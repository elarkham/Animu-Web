Module["asm"] =  (function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var Math_fround=global.Math.fround;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_dii=env.invoke_dii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_iiiiiiiiiii=env.invoke_iiiiiiiiiii;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var ___syscall221=env.___syscall221;
  var ___syscall85=env.___syscall85;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var ___syscall220=env.___syscall220;
  var _abort=env._abort;
  var ___syscall40=env.___syscall40;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___syscall20=env.___syscall20;
  var ___clock_gettime=env.___clock_gettime;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var _longjmp=env._longjmp;
  var _clock_gettime=env._clock_gettime;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___syscall83=env.___syscall83;
  var _llvm_cttz_i32=env._llvm_cttz_i32;
  var ___setErrNo=env.___setErrNo;
  var ___syscall197=env.___syscall197;
  var ___syscall196=env.___syscall196;
  var ___syscall195=env.___syscall195;
  var __exit=env.__exit;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _getenv=env._getenv;
  var ___syscall33=env.___syscall33;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall15=env.___syscall15;
  var ___syscall39=env.___syscall39;
  var ___syscall38=env.___syscall38;
  var _emscripten_get_now=env._emscripten_get_now;
  var ___syscall10=env.___syscall10;
  var ___syscall9=env.___syscall9;
  var ___syscall3=env.___syscall3;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall183=env.___syscall183;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _time=env._time;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var ___syscall140=env.___syscall140;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall4=env.___syscall4;
  var tempFloat = Math_fround(0);
  const f0 = Math_fround(0);

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function _TT_RunIns(i136) {
 i136 = i136 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i137 = 0, i138 = 0, i139 = 0;
 i137 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i126 = i137 + 8 | 0;
 i132 = i137 + 44 | 0;
 i133 = i137 + 4 | 0;
 i134 = i137;
 i135 = i136 + 256 | 0;
 HEAP32[i135 >> 2] = 0;
 i131 = (HEAP16[i136 + 216 >> 1] | 0) == (HEAP16[i136 + 218 >> 1] | 0);
 i127 = i136 + 592 | 0;
 HEAP32[i127 >> 2] = i131 ? 50 : 49;
 i128 = i136 + 596 | 0;
 HEAP32[i128 >> 2] = i131 ? 179 : 178;
 i129 = i136 + 600 | 0;
 HEAP32[i129 >> 2] = i131 ? 10 : 9;
 i130 = i136 + 604 | 0;
 HEAP32[i130 >> 2] = i131 ? 12 : 11;
 i131 = i136 + 298 | 0;
 i6 = HEAP16[i131 >> 1] | 0;
 i3 = i6 << 16 >> 16;
 i6 = i6 << 16 >> 16 == 16384;
 if (i6) {
  i2 = HEAP16[i136 + 294 >> 1] | 0;
  i5 = i2 << 16 >> 16;
 } else {
  i4 = HEAP16[i136 + 300 >> 1] | 0;
  i5 = HEAP16[i136 + 296 >> 1] | 0;
  i2 = HEAP16[i136 + 294 >> 1] | 0;
  if (i4 << 16 >> 16 != 16384) i5 = (Math_imul(i2 << 16 >> 16, i3) | 0) + (Math_imul(i5, i4 << 16 >> 16) | 0) >> 14;
 }
 i125 = i136 + 564 | 0;
 HEAP32[i125 >> 2] = i5;
 if (i2 << 16 >> 16 == 16384) i2 = 68; else i2 = (HEAP16[i136 + 296 >> 1] | 0) == 16384 ? 66 : 65;
 i124 = i136 + 572 | 0;
 HEAP32[i124 >> 2] = i2;
 i122 = i136 + 290 | 0;
 if ((HEAP16[i122 >> 1] | 0) == 16384) i2 = 68; else i2 = (HEAP16[i136 + 292 >> 1] | 0) == 16384 ? 66 : 67;
 i123 = i136 + 576 | 0;
 HEAP32[i123 >> 2] = i2;
 i120 = i136 + 584 | 0;
 HEAP32[i120 >> 2] = 18;
 i121 = i136 + 588 | 0;
 HEAP32[i121 >> 2] = 19;
 do if ((i5 | 0) == 16384) {
  if (i6) {
   HEAP32[i120 >> 2] = 20;
   HEAP32[i121 >> 2] = 21;
   break;
  }
  if ((HEAP16[i136 + 300 >> 1] | 0) == 16384) {
   HEAP32[i120 >> 2] = 22;
   HEAP32[i121 >> 2] = 23;
  }
 } while (0);
 if ((((i5 | 0) < 0 ? 0 - i5 | 0 : i5) | 0) < 1024) HEAP32[i125 >> 2] = 16384;
 HEAP32[i135 >> 2] = 0;
 i118 = i136 + 312 | 0;
 switch ((HEAP32[i118 >> 2] & 255) << 24 >> 24) {
 case 5:
  {
   i2 = 74;
   i12 = 25;
   break;
  }
 case 1:
  {
   i2 = 69;
   i12 = 25;
   break;
  }
 case 4:
  {
   i2 = 75;
   i12 = 25;
   break;
  }
 case 3:
  {
   i2 = 76;
   i12 = 25;
   break;
  }
 case 0:
  {
   i2 = 70;
   i12 = 25;
   break;
  }
 case 2:
  {
   i2 = 71;
   i12 = 25;
   break;
  }
 case 6:
  {
   i2 = 72;
   i12 = 25;
   break;
  }
 case 7:
  {
   i2 = 73;
   i12 = 25;
   break;
  }
 default:
  i17 = i136 + 568 | 0;
 }
 if ((i12 | 0) == 25) {
  i17 = i136 + 568 | 0;
  HEAP32[i17 >> 2] = i2;
 }
 i82 = i136 + 356 | 0;
 i83 = i136 + 360 | 0;
 i84 = i136 + 368 | 0;
 i85 = i136 + 372 | 0;
 i86 = i136 + 364 | 0;
 i87 = i136 + 16 | 0;
 i88 = i136 + 28 | 0;
 i89 = i136 + 561 | 0;
 i90 = i136 + 24 | 0;
 i91 = i136 + 32 | 0;
 i92 = i136 + 20 | 0;
 i93 = i136 + 376 | 0;
 i119 = i136 + 12 | 0;
 i94 = i136 + 308 | 0;
 i95 = i136 + 320 | 0;
 i96 = i136 + 72 | 0;
 i97 = i136 + 80 | 0;
 i98 = i136 + 380 | 0;
 i99 = i136 + 284 | 0;
 i100 = i136 + 44 | 0;
 i101 = i136 + 328 | 0;
 i102 = i136 + 324 | 0;
 i103 = i136 + 346 | 0;
 i104 = i136 + 48 | 0;
 i105 = i136 + 84 | 0;
 i106 = i136 + 300 | 0;
 i107 = i136 + 88 | 0;
 i108 = i136 + 52 | 0;
 i109 = i136 + 316 | 0;
 i110 = i136 + 344 | 0;
 i111 = i136 + 286 | 0;
 i112 = i136 + 288 | 0;
 i113 = i136 + 92 | 0;
 i114 = i136 + 56 | 0;
 i115 = i136 + 220 | 0;
 i18 = i136 + 224 | 0;
 i19 = i136 + 416 | 0;
 i20 = i136 + 408 | 0;
 i21 = i136 + 428 | 0;
 i22 = i136 + 432 | 0;
 i23 = i136 + 436 | 0;
 i116 = i136 + 352 | 0;
 i117 = i136 + 488 | 0;
 i24 = i136 + 294 | 0;
 i25 = i136 + 296 | 0;
 i26 = i136 + 292 | 0;
 i27 = i136 + 294 | 0;
 i28 = i136 + 116 | 0;
 i29 = i136 + 124 | 0;
 i30 = i136 + 290 | 0;
 i31 = i136 + 298 | 0;
 i32 = i136 + 132 | 0;
 i33 = i136 + 284 | 0;
 i34 = i136 + 36 | 0;
 i35 = i136 + 180 | 0;
 i36 = i136 + 144 | 0;
 i37 = i136 + 108 | 0;
 i38 = i136 + 348 | 0;
 i39 = i136 + 304 | 0;
 i40 = i136 + 260 | 0;
 i41 = i136 + 60 | 0;
 i42 = i136 + 420 | 0;
 i43 = i136 + 404 | 0;
 i44 = i136 + 396 | 0;
 i45 = i136 + 400 | 0;
 i46 = i136 + 264 | 0;
 i47 = i136 + 154 | 0;
 i48 = i136 + 160 | 0;
 i49 = i136 + 156 | 0;
 i50 = i136 + 164 | 0;
 i51 = i126 + 4 | 0;
 i52 = i126 + 8 | 0;
 i53 = i136 + 152 | 0;
 i54 = i126 + 12 | 0;
 i55 = i136 + 172 | 0;
 i56 = i136 + 176 | 0;
 i57 = i136 + 168 | 0;
 i58 = i126 + 16 | 0;
 i59 = i136 + 136 | 0;
 i60 = i136 + 140 | 0;
 i61 = i136 + 118 | 0;
 i62 = i126 + 16 | 0;
 i63 = i136 + 120 | 0;
 i64 = i136 + 128 | 0;
 i65 = i136 + 468 | 0;
 i66 = i136 + 472 | 0;
 i67 = i136 + 332 | 0;
 i68 = i136 + 334 | 0;
 i69 = i136 + 384 | 0;
 i70 = i136 + 476 | 0;
 i71 = i136 + 480 | 0;
 i72 = i136 + 484 | 0;
 i73 = i136 + 282 | 0;
 i74 = i136 + 337 | 0;
 i75 = i136 + 281 | 0;
 i76 = i136 + 252 | 0;
 i77 = i136 + 608 | 0;
 i78 = i136 + 412 | 0;
 i79 = i136 + 424 | 0;
 i80 = i136 + 340 | 0;
 i81 = i136 + 336 | 0;
 i16 = 0;
 i4 = HEAP32[i83 >> 2] | 0;
 i5 = HEAP32[i86 >> 2] | 0;
 L34 : while (1) {
  i11 = HEAP32[i82 >> 2] | 0;
  i10 = HEAP8[i11 + i4 >> 0] | 0;
  HEAP8[i84 >> 0] = i10;
  i8 = i10 & 255;
  i3 = HEAP8[279272 + i8 >> 0] | 0;
  HEAP32[i85 >> 2] = i3;
  if ((i8 | 1 | 0) == 65) {
   i2 = i4 + 1 | 0;
   if ((i2 | 0) >= (i5 | 0)) {
    i1 = 131;
    i12 = 873;
    break;
   }
   i3 = 2 - (Math_imul(HEAPU8[i11 + i2 >> 0] | 0, i3) | 0) | 0;
   HEAP32[i85 >> 2] = i3;
  }
  if ((i3 + i4 | 0) > (i5 | 0)) {
   i1 = 131;
   i12 = 873;
   break;
  }
  i7 = HEAP8[279528 + i8 >> 0] | 0;
  i6 = (i7 & 255) >>> 4;
  i2 = (HEAP32[i87 >> 2] | 0) - i6 | 0;
  HEAP32[i88 >> 2] = i2;
  if ((i2 | 0) < 0) {
   if (HEAP8[i89 >> 0] | 0) {
    i1 = 129;
    i12 = 873;
    break;
   }
   if (i6 | 0) {
    i4 = HEAP32[i90 >> 2] | 0;
    i2 = 0;
    i5 = 0;
    do {
     HEAP32[i4 + (i5 << 2) >> 2] = 0;
     i2 = i2 + 1 << 16 >> 16;
     i5 = i2 & 65535;
    } while (i5 >>> 0 < i6 >>> 0);
   }
   HEAP32[i88 >> 2] = 0;
   i2 = 0;
  }
  i6 = (i7 & 15) + i2 | 0;
  HEAP32[i91 >> 2] = i6;
  i7 = HEAP32[i92 >> 2] | 0;
  if ((i6 | 0) > (i7 | 0)) {
   i1 = 130;
   i12 = 873;
   break;
  }
  HEAP8[i93 >> 0] = 1;
  HEAP32[i119 >> 2] = 0;
  i4 = HEAP32[i90 >> 2] | 0;
  i9 = i4 + (i2 << 2) | 0;
  L51 : do switch (i10 << 24 >> 24) {
  case 79:
   {
    i1 = 135;
    i12 = 873;
    break L34;
   }
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
  case 0:
   {
    i3 = i8 << 14 & 16384;
    i2 = i3 & 65535;
    i3 = (i3 ^ 16384) & 65535;
    if ((i10 & 255) < 4) {
     HEAP16[i24 >> 1] = i2;
     HEAP16[i25 >> 1] = i3;
     HEAP16[i122 >> 1] = i2;
     HEAP16[i26 >> 1] = i3;
    }
    if (!(i8 & 2)) {
     HEAP16[i131 >> 1] = i2;
     HEAP16[i106 >> 1] = i3;
    } else i2 = HEAP16[i131 >> 1] | 0;
    i4 = i2 << 16 >> 16 == 16384;
    if (i4) {
     i2 = HEAP16[i24 >> 1] | 0;
     i3 = i2 << 16 >> 16;
    } else {
     i13 = HEAP16[i106 >> 1] | 0;
     i14 = HEAP16[i25 >> 1] | 0;
     i15 = HEAP16[i24 >> 1] | 0;
     i3 = (Math_imul(i15 << 16 >> 16, i2 << 16 >> 16) | 0) + (Math_imul(i14, i13 << 16 >> 16) | 0) >> 14;
     i3 = i13 << 16 >> 16 == 16384 ? i14 : i3;
     i2 = i15;
    }
    HEAP32[i125 >> 2] = i3;
    if (i2 << 16 >> 16 == 16384) i2 = 68; else i2 = (HEAP16[i25 >> 1] | 0) == 16384 ? 66 : 65;
    HEAP32[i124 >> 2] = i2;
    if ((HEAP16[i122 >> 1] | 0) == 16384) i2 = 68; else i2 = (HEAP16[i26 >> 1] | 0) == 16384 ? 66 : 67;
    HEAP32[i123 >> 2] = i2;
    HEAP32[i120 >> 2] = 18;
    HEAP32[i121 >> 2] = 19;
    do if ((i3 | 0) == 16384) {
     if (i4) {
      HEAP32[i120 >> 2] = 20;
      HEAP32[i121 >> 2] = 21;
      break;
     }
     if ((HEAP16[i106 >> 1] | 0) == 16384) {
      HEAP32[i120 >> 2] = 22;
      HEAP32[i121 >> 2] = 23;
     }
    } while (0);
    if ((((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 1024) HEAP32[i125 >> 2] = 16384;
    HEAP32[i135 >> 2] = 0;
    i12 = 853;
    break;
   }
  case 7:
  case 6:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    i15 = HEAP32[i9 + 4 >> 2] | 0;
    i2 = i15 & 65535;
    if ((HEAPU16[i28 >> 1] | 0) > (i15 & 65535)) if ((HEAPU16[i97 >> 1] | 0) > (i3 & 65535)) {
     i14 = i3 & 65535;
     i13 = HEAP32[i107 >> 2] | 0;
     i3 = HEAP32[i29 >> 2] | 0;
     i15 = (HEAP32[i13 + (i14 << 3) >> 2] | 0) - (HEAP32[i3 + (i2 << 3) >> 2] | 0) | 0;
     i3 = (HEAP32[i13 + (i14 << 3) + 4 >> 2] | 0) - (HEAP32[i3 + (i2 << 3) + 4 >> 2] | 0) | 0;
     i14 = (i3 | i15 | 0) == 0;
     i15 = i14 ? 16384 : i15;
     i14 = (i10 & 1) == 0 | i14;
     i2 = i14 ? i3 : i15;
     i3 = i14 ? i15 : 0 - i3 | 0;
     if ((((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 16384) if ((((i2 | 0) < 0 ? 0 - i2 | 0 : i2) | 0) < 16384) {
      if (i2 | i3 | 0) {
       i3 = i3 << 14;
       i2 = i2 << 14;
       i12 = 66;
      }
     } else i12 = 66; else i12 = 66;
     if ((i12 | 0) == 66) {
      i15 = (_FT_Hypot(i3, i2) | 0) << 2;
      i14 = (_FT_DivFix(i3, i15) | 0) & 65535;
      HEAP16[i27 >> 1] = i14;
      i15 = (_FT_DivFix(i2, i15) | 0) & 65535;
      HEAP16[i25 >> 1] = i15;
     }
     i3 = HEAPU16[i27 >> 1] | HEAPU16[i27 + 2 >> 1] << 16;
     HEAP16[i30 >> 1] = i3;
     HEAP16[i30 + 2 >> 1] = i3 >>> 16;
     i2 = HEAP16[i131 >> 1] | 0;
     i5 = i2 << 16 >> 16 == 16384;
     if (i5) i4 = i3 << 16 >> 16; else {
      i14 = HEAP16[i106 >> 1] | 0;
      i15 = HEAP16[i25 >> 1] | 0;
      i4 = (Math_imul(i15, i14 << 16 >> 16) | 0) + (Math_imul(i2 << 16 >> 16, i3 << 16 >> 16) | 0) >> 14;
      i4 = i14 << 16 >> 16 == 16384 ? i15 : i4;
     }
     HEAP32[i125 >> 2] = i4;
     if ((i3 & 65535) << 16 >> 16 == 16384) {
      HEAP32[i124 >> 2] = 68;
      i2 = 68;
     } else {
      HEAP32[i124 >> 2] = (HEAP16[i25 >> 1] | 0) == 16384 ? 66 : 65;
      i2 = (i3 & -65536 | 0) == 1073741824 ? 66 : 67;
     }
     HEAP32[i123 >> 2] = i2;
     HEAP32[i120 >> 2] = 18;
     HEAP32[i121 >> 2] = 19;
     do if ((i4 | 0) == 16384) {
      if (i5) {
       HEAP32[i120 >> 2] = 20;
       HEAP32[i121 >> 2] = 21;
       break;
      }
      if ((HEAP16[i106 >> 1] | 0) != 16384) break;
      HEAP32[i120 >> 2] = 22;
      HEAP32[i121 >> 2] = 23;
     } while (0);
     if ((((i4 | 0) < 0 ? 0 - i4 | 0 : i4) | 0) < 1024) HEAP32[i125 >> 2] = 16384;
     HEAP32[i135 >> 2] = 0;
     i12 = 853;
     break L51;
    }
    if (!(HEAP8[i89 >> 0] | 0)) i12 = 853; else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    break;
   }
  case 9:
  case 8:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    i15 = HEAP32[i9 + 4 >> 2] | 0;
    i2 = i15 & 65535;
    if ((HEAPU16[i28 >> 1] | 0) > (i15 & 65535)) if ((HEAPU16[i97 >> 1] | 0) > (i3 & 65535)) {
     i14 = i3 & 65535;
     i13 = HEAP32[i107 >> 2] | 0;
     i3 = HEAP32[i29 >> 2] | 0;
     i15 = (HEAP32[i13 + (i14 << 3) >> 2] | 0) - (HEAP32[i3 + (i2 << 3) >> 2] | 0) | 0;
     i3 = (HEAP32[i13 + (i14 << 3) + 4 >> 2] | 0) - (HEAP32[i3 + (i2 << 3) + 4 >> 2] | 0) | 0;
     i14 = (i3 | i15 | 0) == 0;
     i15 = i14 ? 16384 : i15;
     i14 = (i10 & 1) == 0 | i14;
     i2 = i14 ? i3 : i15;
     i3 = i14 ? i15 : 0 - i3 | 0;
     if ((((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 16384) if ((((i2 | 0) < 0 ? 0 - i2 | 0 : i2) | 0) < 16384) {
      if (i2 | i3 | 0) {
       i3 = i3 << 14;
       i2 = i2 << 14;
       i12 = 88;
      }
     } else i12 = 88; else i12 = 88;
     if ((i12 | 0) == 88) {
      i15 = (_FT_Hypot(i3, i2) | 0) << 2;
      i14 = (_FT_DivFix(i3, i15) | 0) & 65535;
      HEAP16[i131 >> 1] = i14;
      i15 = (_FT_DivFix(i2, i15) | 0) & 65535;
      HEAP16[i106 >> 1] = i15;
     }
     i2 = HEAP16[i131 >> 1] | 0;
     i4 = i2 << 16 >> 16 == 16384;
     if (i4) {
      i2 = HEAP16[i24 >> 1] | 0;
      i3 = i2 << 16 >> 16;
     } else {
      i13 = HEAP16[i106 >> 1] | 0;
      i14 = HEAP16[i25 >> 1] | 0;
      i15 = HEAP16[i24 >> 1] | 0;
      i3 = (Math_imul(i15 << 16 >> 16, i2 << 16 >> 16) | 0) + (Math_imul(i14, i13 << 16 >> 16) | 0) >> 14;
      i3 = i13 << 16 >> 16 == 16384 ? i14 : i3;
      i2 = i15;
     }
     HEAP32[i125 >> 2] = i3;
     if (i2 << 16 >> 16 == 16384) i2 = 68; else i2 = (HEAP16[i25 >> 1] | 0) == 16384 ? 66 : 65;
     HEAP32[i124 >> 2] = i2;
     if ((HEAP16[i122 >> 1] | 0) == 16384) i2 = 68; else i2 = (HEAP16[i26 >> 1] | 0) == 16384 ? 66 : 67;
     HEAP32[i123 >> 2] = i2;
     HEAP32[i120 >> 2] = 18;
     HEAP32[i121 >> 2] = 19;
     do if ((i3 | 0) == 16384) {
      if (i4) {
       HEAP32[i120 >> 2] = 20;
       HEAP32[i121 >> 2] = 21;
       break;
      }
      if ((HEAP16[i106 >> 1] | 0) != 16384) break;
      HEAP32[i120 >> 2] = 22;
      HEAP32[i121 >> 2] = 23;
     } while (0);
     if ((((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 1024) HEAP32[i125 >> 2] = 16384;
     HEAP32[i135 >> 2] = 0;
     i12 = 853;
     break L51;
    }
    if (!(HEAP8[i89 >> 0] | 0)) i12 = 853; else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    break;
   }
  case 10:
   {
    i5 = HEAP32[i9 + 4 >> 2] << 16;
    i2 = i5 >> 16;
    i4 = HEAP32[i9 >> 2] << 16;
    i3 = i4 >> 16;
    if ((((i4 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 16384) if ((((i5 | 0) < 0 ? 0 - i2 | 0 : i2) | 0) < 16384) {
     if (i2 | i3 | 0) {
      i3 = i4 >> 2;
      i2 = i5 >> 2;
      i12 = 108;
     }
    } else i12 = 108; else i12 = 108;
    if ((i12 | 0) == 108) {
     i15 = (_FT_Hypot(i3, i2) | 0) << 2;
     i14 = (_FT_DivFix(i3, i15) | 0) & 65535;
     HEAP16[i27 >> 1] = i14;
     i15 = (_FT_DivFix(i2, i15) | 0) & 65535;
     HEAP16[i25 >> 1] = i15;
    }
    i3 = HEAPU16[i27 >> 1] | HEAPU16[i27 + 2 >> 1] << 16;
    HEAP16[i30 >> 1] = i3;
    HEAP16[i30 + 2 >> 1] = i3 >>> 16;
    i2 = HEAP16[i131 >> 1] | 0;
    i5 = i2 << 16 >> 16 == 16384;
    if (i5) i4 = i3 << 16 >> 16; else {
     i14 = HEAP16[i106 >> 1] | 0;
     i15 = HEAP16[i25 >> 1] | 0;
     i4 = (Math_imul(i15, i14 << 16 >> 16) | 0) + (Math_imul(i2 << 16 >> 16, i3 << 16 >> 16) | 0) >> 14;
     i4 = i14 << 16 >> 16 == 16384 ? i15 : i4;
    }
    HEAP32[i125 >> 2] = i4;
    if ((i3 & 65535) << 16 >> 16 == 16384) {
     HEAP32[i124 >> 2] = 68;
     i2 = 68;
    } else {
     HEAP32[i124 >> 2] = (HEAP16[i25 >> 1] | 0) == 16384 ? 66 : 65;
     i2 = (i3 & -65536 | 0) == 1073741824 ? 66 : 67;
    }
    HEAP32[i123 >> 2] = i2;
    HEAP32[i120 >> 2] = 18;
    HEAP32[i121 >> 2] = 19;
    do if ((i4 | 0) == 16384) {
     if (i5) {
      HEAP32[i120 >> 2] = 20;
      HEAP32[i121 >> 2] = 21;
      break;
     }
     if ((HEAP16[i106 >> 1] | 0) == 16384) {
      HEAP32[i120 >> 2] = 22;
      HEAP32[i121 >> 2] = 23;
     }
    } while (0);
    if ((((i4 | 0) < 0 ? 0 - i4 | 0 : i4) | 0) < 1024) HEAP32[i125 >> 2] = 16384;
    HEAP32[i135 >> 2] = 0;
    i12 = 853;
    break;
   }
  case 11:
   {
    i5 = HEAP32[i9 + 4 >> 2] << 16;
    i2 = i5 >> 16;
    i4 = HEAP32[i9 >> 2] << 16;
    i3 = i4 >> 16;
    if ((((i4 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 16384) if ((((i5 | 0) < 0 ? 0 - i2 | 0 : i2) | 0) < 16384) {
     if (i2 | i3 | 0) {
      i3 = i4 >> 2;
      i2 = i5 >> 2;
      i12 = 127;
     }
    } else i12 = 127; else i12 = 127;
    if ((i12 | 0) == 127) {
     i15 = (_FT_Hypot(i3, i2) | 0) << 2;
     i14 = (_FT_DivFix(i3, i15) | 0) & 65535;
     HEAP16[i131 >> 1] = i14;
     i15 = (_FT_DivFix(i2, i15) | 0) & 65535;
     HEAP16[i106 >> 1] = i15;
    }
    i2 = HEAP16[i131 >> 1] | 0;
    i4 = i2 << 16 >> 16 == 16384;
    if (i4) {
     i2 = HEAP16[i24 >> 1] | 0;
     i3 = i2 << 16 >> 16;
    } else {
     i13 = HEAP16[i106 >> 1] | 0;
     i14 = HEAP16[i25 >> 1] | 0;
     i15 = HEAP16[i24 >> 1] | 0;
     i3 = (Math_imul(i15 << 16 >> 16, i2 << 16 >> 16) | 0) + (Math_imul(i14, i13 << 16 >> 16) | 0) >> 14;
     i3 = i13 << 16 >> 16 == 16384 ? i14 : i3;
     i2 = i15;
    }
    HEAP32[i125 >> 2] = i3;
    if (i2 << 16 >> 16 == 16384) i2 = 68; else i2 = (HEAP16[i25 >> 1] | 0) == 16384 ? 66 : 65;
    HEAP32[i124 >> 2] = i2;
    if ((HEAP16[i122 >> 1] | 0) == 16384) i2 = 68; else i2 = (HEAP16[i26 >> 1] | 0) == 16384 ? 66 : 67;
    HEAP32[i123 >> 2] = i2;
    HEAP32[i120 >> 2] = 18;
    HEAP32[i121 >> 2] = 19;
    do if ((i3 | 0) == 16384) {
     if (i4) {
      HEAP32[i120 >> 2] = 20;
      HEAP32[i121 >> 2] = 21;
      break;
     }
     if ((HEAP16[i106 >> 1] | 0) == 16384) {
      HEAP32[i120 >> 2] = 22;
      HEAP32[i121 >> 2] = 23;
     }
    } while (0);
    if ((((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 1024) HEAP32[i125 >> 2] = 16384;
    HEAP32[i135 >> 2] = 0;
    i12 = 853;
    break;
   }
  case 12:
   {
    i12 = HEAP16[i25 >> 1] | 0;
    HEAP32[i9 >> 2] = HEAP16[i24 >> 1];
    HEAP32[i9 + 4 >> 2] = i12 << 16 >> 16;
    i12 = 853;
    break;
   }
  case 13:
   {
    i12 = HEAP16[i106 >> 1] | 0;
    HEAP32[i9 >> 2] = HEAP16[i131 >> 1];
    HEAP32[i9 + 4 >> 2] = i12 << 16 >> 16;
    i12 = 853;
    break;
   }
  case 14:
   {
    i2 = HEAPU16[i27 >> 1] | HEAPU16[i27 + 2 >> 1] << 16;
    HEAP16[i31 >> 1] = i2;
    HEAP16[i31 + 2 >> 1] = i2 >>> 16;
    i3 = i2 << 16 >> 16;
    i4 = (i2 & 65535) << 16 >> 16 == 16384;
    i5 = i2 >>> 16 & 65535;
    if (i4) {
     HEAP32[i125 >> 2] = i3;
     i2 = 68;
    } else {
     i15 = HEAP16[i25 >> 1] | 0;
     i14 = i15 << 16 >> 16;
     i3 = (Math_imul(i14, i2 >> 16) | 0) + (Math_imul(i3, i3) | 0) >> 14;
     i3 = i5 << 16 >> 16 == 16384 ? i14 : i3;
     HEAP32[i125 >> 2] = i3;
     i2 = i15 << 16 >> 16 == 16384 ? 66 : 65;
    }
    HEAP32[i124 >> 2] = i2;
    if ((HEAP16[i122 >> 1] | 0) == 16384) i2 = 68; else i2 = (HEAP16[i26 >> 1] | 0) == 16384 ? 66 : 67;
    HEAP32[i123 >> 2] = i2;
    HEAP32[i120 >> 2] = 18;
    HEAP32[i121 >> 2] = 19;
    do if ((i3 | 0) == 16384) {
     if (i4) {
      HEAP32[i120 >> 2] = 20;
      HEAP32[i121 >> 2] = 21;
      break;
     }
     if (i5 << 16 >> 16 == 16384) {
      HEAP32[i120 >> 2] = 22;
      HEAP32[i121 >> 2] = 23;
     }
    } while (0);
    if ((((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 1024) HEAP32[i125 >> 2] = 16384;
    HEAP32[i135 >> 2] = 0;
    i12 = 853;
    break;
   }
  case 15:
   {
    i5 = HEAP32[i9 >> 2] | 0;
    i2 = HEAP32[i9 + 4 >> 2] | 0;
    i4 = HEAP32[i9 + 8 >> 2] | 0;
    i15 = HEAP32[i9 + 12 >> 2] & 65535;
    i3 = HEAPU16[i100 >> 1] | 0;
    if (i15 >>> 0 < i3 >>> 0) {
     i14 = HEAP32[i9 + 16 >> 2] & 65535;
     if (i14 >>> 0 < i3 >>> 0) {
      i13 = i2 & 65535;
      i2 = HEAPU16[i97 >> 1] | 0;
      if (i13 >>> 0 < i2 >>> 0) {
       i11 = i4 & 65535;
       if (i11 >>> 0 < i2 >>> 0) {
        i12 = i5 & 65535;
        if (i12 >>> 0 < (HEAPU16[i28 >> 1] | 0) >>> 0) {
         i139 = HEAP32[i108 >> 2] | 0;
         i2 = HEAP32[i139 + (i15 << 3) >> 2] | 0;
         i3 = (HEAP32[i139 + (i14 << 3) >> 2] | 0) - i2 | 0;
         i4 = HEAP32[i139 + (i15 << 3) + 4 >> 2] | 0;
         i139 = (HEAP32[i139 + (i14 << 3) + 4 >> 2] | 0) - i4 | 0;
         i8 = HEAP32[i107 >> 2] | 0;
         i5 = HEAP32[i8 + (i13 << 3) >> 2] | 0;
         i6 = (HEAP32[i8 + (i11 << 3) >> 2] | 0) - i5 | 0;
         i7 = HEAP32[i8 + (i13 << 3) + 4 >> 2] | 0;
         i8 = (HEAP32[i8 + (i11 << 3) + 4 >> 2] | 0) - i7 | 0;
         i9 = (HEAP32[i32 >> 2] | 0) + i12 | 0;
         HEAP8[i9 >> 0] = HEAP8[i9 >> 0] | 24;
         i9 = 0 - i139 | 0;
         i10 = _FT_MulDiv(i6, i9, 64) | 0;
         i10 = (_FT_MulDiv(i8, i3, 64) | 0) + i10 | 0;
         i138 = _FT_MulDiv(i6, i3, 64) | 0;
         i138 = (_FT_MulDiv(i8, i139, 64) | 0) + i138 | 0;
         if ((((i10 | 0) < 0 ? 0 - i10 | 0 : i10) * 19 | 0) > (((i138 | 0) < 0 ? 0 - i138 | 0 : i138) | 0)) {
          i2 = _FT_MulDiv(i2 - i5 | 0, i9, 64) | 0;
          i2 = (_FT_MulDiv(i4 - i7 | 0, i3, 64) | 0) + i2 | 0;
          i138 = _FT_MulDiv(i2, i6, i10) | 0;
          i2 = _FT_MulDiv(i2, i8, i10) | 0;
          i139 = HEAP32[i107 >> 2] | 0;
          i3 = HEAP32[i29 >> 2] | 0;
          HEAP32[i3 + (i12 << 3) >> 2] = (HEAP32[i139 + (i13 << 3) >> 2] | 0) + i138;
          i2 = (HEAP32[i139 + (i13 << 3) + 4 >> 2] | 0) + i2 | 0;
         } else {
          i139 = HEAP32[i107 >> 2] | 0;
          i2 = HEAP32[i108 >> 2] | 0;
          i3 = HEAP32[i29 >> 2] | 0;
          HEAP32[i3 + (i12 << 3) >> 2] = ((HEAP32[i139 + (i11 << 3) >> 2] | 0) + (HEAP32[i139 + (i13 << 3) >> 2] | 0) + (HEAP32[i2 + (i15 << 3) >> 2] | 0) + (HEAP32[i2 + (i14 << 3) >> 2] | 0) | 0) / 4 | 0;
          i2 = ((HEAP32[i139 + (i11 << 3) + 4 >> 2] | 0) + (HEAP32[i139 + (i13 << 3) + 4 >> 2] | 0) + (HEAP32[i2 + (i15 << 3) + 4 >> 2] | 0) + (HEAP32[i2 + (i14 << 3) + 4 >> 2] | 0) | 0) / 4 | 0;
         }
         HEAP32[i3 + (i12 << 3) + 4 >> 2] = i2;
         i12 = 853;
         break L51;
        }
       }
      }
     }
    }
    if (!(HEAP8[i89 >> 0] | 0)) i12 = 853; else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    break;
   }
  case 16:
   {
    HEAP16[i33 >> 1] = HEAP32[i9 >> 2];
    i12 = 853;
    break;
   }
  case 17:
   {
    HEAP16[i111 >> 1] = HEAP32[i9 >> 2];
    i12 = 853;
    break;
   }
  case 18:
   {
    HEAP16[i112 >> 1] = HEAP32[i9 >> 2];
    i12 = 853;
    break;
   }
  case 19:
   {
    switch (HEAP32[i9 >> 2] | 0) {
    case 0:
     {
      i2 = i34;
      i3 = i35;
      i4 = i2 + 36 | 0;
      do {
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       i2 = i2 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i2 | 0) < (i4 | 0));
      break;
     }
    case 1:
     {
      i2 = i34;
      i3 = i36;
      i4 = i2 + 36 | 0;
      do {
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       i2 = i2 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i2 | 0) < (i4 | 0));
      break;
     }
    default:
     if (!(HEAP8[i89 >> 0] | 0)) {
      i12 = 853;
      break L51;
     } else {
      i1 = 134;
      i12 = 873;
      break L34;
     }
    }
    HEAP16[i110 >> 1] = HEAP32[i9 >> 2];
    i12 = 853;
    break;
   }
  case 20:
   {
    switch (HEAP32[i9 >> 2] | 0) {
    case 0:
     {
      i2 = i96;
      i3 = i35;
      i4 = i2 + 36 | 0;
      do {
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       i2 = i2 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i2 | 0) < (i4 | 0));
      break;
     }
    case 1:
     {
      i2 = i96;
      i3 = i36;
      i4 = i2 + 36 | 0;
      do {
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       i2 = i2 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i2 | 0) < (i4 | 0));
      break;
     }
    default:
     if (!(HEAP8[i89 >> 0] | 0)) {
      i12 = 853;
      break L51;
     } else {
      i1 = 134;
      i12 = 873;
      break L34;
     }
    }
    HEAP16[i103 >> 1] = HEAP32[i9 >> 2];
    i12 = 853;
    break;
   }
  case 21:
   {
    switch (HEAP32[i9 >> 2] | 0) {
    case 0:
     {
      i2 = i37;
      i3 = i35;
      i4 = i2 + 36 | 0;
      do {
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       i2 = i2 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i2 | 0) < (i4 | 0));
      break;
     }
    case 1:
     {
      i2 = i37;
      i3 = i36;
      i4 = i2 + 36 | 0;
      do {
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       i2 = i2 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i2 | 0) < (i4 | 0));
      break;
     }
    default:
     if (!(HEAP8[i89 >> 0] | 0)) {
      i12 = 853;
      break L51;
     } else {
      i1 = 134;
      i12 = 873;
      break L34;
     }
    }
    HEAP16[i38 >> 1] = HEAP32[i9 >> 2];
    i12 = 853;
    break;
   }
  case 22:
   {
    switch (HEAP32[i9 >> 2] | 0) {
    case 0:
     {
      i2 = i34;
      i3 = i35;
      i4 = i2 + 36 | 0;
      do {
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       i2 = i2 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i2 | 0) < (i4 | 0));
      break;
     }
    case 1:
     {
      i2 = i34;
      i3 = i36;
      i4 = i2 + 36 | 0;
      do {
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       i2 = i2 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i2 | 0) < (i4 | 0));
      break;
     }
    default:
     if (!(HEAP8[i89 >> 0] | 0)) {
      i12 = 853;
      break L51;
     } else {
      i1 = 134;
      i12 = 873;
      break L34;
     }
    }
    i2 = i96;
    i3 = i34;
    i4 = i2 + 36 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
     i2 = i2 + 4 | 0;
     i3 = i3 + 4 | 0;
    } while ((i2 | 0) < (i4 | 0));
    i2 = i37;
    i3 = i34;
    i4 = i2 + 36 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
     i2 = i2 + 4 | 0;
     i3 = i3 + 4 | 0;
    } while ((i2 | 0) < (i4 | 0));
    i12 = HEAP32[i9 >> 2] & 65535;
    HEAP16[i110 >> 1] = i12;
    HEAP16[i103 >> 1] = i12;
    HEAP16[i38 >> 1] = i12;
    i12 = 853;
    break;
   }
  case 23:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    if ((i2 | 0) < 0) {
     i1 = 132;
     i12 = 873;
     break L34;
    }
    HEAP32[i39 >> 2] = i2;
    i12 = 853;
    break;
   }
  case 24:
   {
    HEAP32[i118 >> 2] = 1;
    HEAP32[i17 >> 2] = 69;
    i12 = 853;
    break;
   }
  case 25:
   {
    HEAP32[i118 >> 2] = 0;
    HEAP32[i17 >> 2] = 70;
    i12 = 853;
    break;
   }
  case 26:
   {
    HEAP32[i94 >> 2] = HEAP32[i9 >> 2];
    i12 = 853;
    break;
   }
  case 27:
   {
    i7 = HEAP32[i86 >> 2] | 0;
    i4 = 1;
    i2 = HEAP32[i83 >> 2] | 0;
    while (1) {
     L363 : while (1) {
      i2 = i3 + i2 | 0;
      HEAP32[i83 >> 2] = i2;
      if ((i2 | 0) >= (i7 | 0)) {
       i1 = 131;
       i12 = 873;
       break L34;
      }
      i6 = HEAP8[i11 + i2 >> 0] | 0;
      HEAP8[i84 >> 0] = i6;
      i139 = i6 & 255;
      i3 = HEAP8[279272 + i139 >> 0] | 0;
      HEAP32[i85 >> 2] = i3;
      if ((i139 | 1 | 0) == 65) {
       i5 = i2 + 1 | 0;
       if ((i5 | 0) >= (i7 | 0)) {
        i1 = 131;
        i12 = 873;
        break L34;
       }
       i3 = 2 - (Math_imul(HEAPU8[i11 + i5 >> 0] | 0, i3) | 0) | 0;
       HEAP32[i85 >> 2] = i3;
      }
      if ((i3 + i2 | 0) > (i7 | 0)) {
       i1 = 131;
       i12 = 873;
       break L34;
      }
      switch (i6 << 24 >> 24) {
      case 88:
       {
        i12 = 204;
        break L363;
       }
      case 89:
       {
        i5 = -1;
        break L363;
       }
      default:
       {}
      }
     }
     if ((i12 | 0) == 204) {
      i12 = 0;
      i5 = 1;
     }
     i4 = i5 + i4 | 0;
     if (!i4) {
      i12 = 853;
      break;
     }
    }
    break;
   }
  case 28:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    if (!(i3 | i2)) HEAP32[i119 >> 2] = 132;
    i2 = (HEAP32[i83 >> 2] | 0) + i3 | 0;
    HEAP32[i83 >> 2] = i2;
    if ((i2 | 0) < 0) i12 = 211; else {
     i3 = HEAP32[i21 >> 2] | 0;
     if ((i3 | 0) > 0) if ((i2 | 0) > (HEAP32[(HEAP32[(HEAP32[i23 >> 2] | 0) + (i3 + -1 << 4) + 12 >> 2] | 0) + 8 >> 2] | 0)) i12 = 211;
    }
    if ((i12 | 0) == 211) HEAP32[i119 >> 2] = 132;
    HEAP8[i93 >> 0] = 0;
    i12 = 853;
    break;
   }
  case 29:
   {
    HEAP32[i95 >> 2] = HEAP32[i9 >> 2];
    i12 = 853;
    break;
   }
  case 30:
   {
    HEAP32[i102 >> 2] = HEAP32[i9 >> 2];
    i12 = 853;
    break;
   }
  case 31:
   {
    i12 = _FT_MulFix(HEAP32[i9 >> 2] | 0, HEAP32[i40 >> 2] | 0) | 0;
    HEAP32[i101 >> 2] = i12;
    i12 = 853;
    break;
   }
  case 32:
   {
    HEAP32[i9 + 4 >> 2] = HEAP32[i9 >> 2];
    i12 = 853;
    break;
   }
  case 127:
  case 126:
  case 89:
  case 33:
   {
    HEAP32[i87 >> 2] = i6;
    i12 = 868;
    break;
   }
  case 34:
   {
    HEAP32[i91 >> 2] = 0;
    i12 = 853;
    break;
   }
  case 35:
   {
    i139 = HEAP32[i9 >> 2] | 0;
    i12 = i9 + 4 | 0;
    HEAP32[i9 >> 2] = HEAP32[i12 >> 2];
    HEAP32[i12 >> 2] = i139;
    i12 = 853;
    break;
   }
  case 36:
   {
    HEAP32[i9 >> 2] = HEAP32[i87 >> 2];
    i12 = 853;
    break;
   }
  case 37:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    if ((i3 | 0) < 1 | (i2 | 0) < (i3 | 0)) if (!(HEAP8[i89 >> 0] | 0)) i2 = 0; else {
     HEAP32[i119 >> 2] = 134;
     i2 = 0;
    } else i2 = HEAP32[i4 + (i2 - i3 << 2) >> 2] | 0;
    HEAP32[i9 >> 2] = i2;
    i12 = 853;
    break;
   }
  case 38:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    if ((i3 | 0) < 1 | (i2 | 0) < (i3 | 0)) if (!(HEAP8[i89 >> 0] | 0)) {
     i12 = 853;
     break L51;
    } else {
     i1 = 134;
     i12 = 873;
     break L34;
    } else {
     i139 = i2 - i3 | 0;
     i138 = i4 + (i139 << 2) | 0;
     i12 = HEAP32[i138 >> 2] | 0;
     _memmove(i138 | 0, i4 + (i139 + 1 << 2) | 0, (i3 << 2) + -4 | 0) | 0;
     HEAP32[(HEAP32[i90 >> 2] | 0) + ((HEAP32[i88 >> 2] | 0) + -1 << 2) >> 2] = i12;
     i12 = 853;
     break L51;
    }
   }
  case 39:
   {
    i5 = HEAP32[i9 >> 2] | 0;
    i2 = HEAP32[i9 + 4 >> 2] | 0;
    i3 = i5 & 65535;
    i4 = i2 & 65535;
    i5 = i5 & 65535;
    if (i5 >>> 0 < (HEAPU16[i97 >> 1] | 0) >>> 0) {
     i2 = i2 & 65535;
     if (i2 >>> 0 < (HEAPU16[i100 >> 1] | 0) >>> 0) {
      i139 = HEAP32[i108 >> 2] | 0;
      i12 = HEAP32[i107 >> 2] | 0;
      i12 = (FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, (HEAP32[i139 + (i2 << 3) >> 2] | 0) - (HEAP32[i12 + (i5 << 3) >> 2] | 0) | 0, (HEAP32[i139 + (i2 << 3) + 4 >> 2] | 0) - (HEAP32[i12 + (i5 << 3) + 4 >> 2] | 0) | 0) | 0) / 2 | 0;
      FUNCTION_TABLE_viiii[HEAP32[i120 >> 2] & 31](i136, i96, i3, i12);
      FUNCTION_TABLE_viiii[HEAP32[i120 >> 2] & 31](i136, i34, i4, 0 - i12 | 0);
      i12 = 853;
      break L51;
     }
    }
    if (!(HEAP8[i89 >> 0] | 0)) i12 = 853; else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    break;
   }
  case 40:
   {
    i2 = HEAP32[i19 >> 2] | 0;
    i3 = HEAP32[i20 >> 2] | 0;
    i5 = i2 + (i3 * 24 | 0) | 0;
    if ((i3 | 0) > 0) {
     i4 = i2;
     while (1) {
      if ((HEAP32[i4 + 12 >> 2] & 255) << 24 >> 24 == 40) if (HEAP8[i4 + 16 >> 0] | 0) break;
      i4 = i4 + 24 | 0;
      if (i4 >>> 0 >= i5 >>> 0) {
       i12 = 856;
       break L51;
      }
     }
     i2 = HEAP32[i21 >> 2] | 0;
     if ((i2 | 0) >= (HEAP32[i22 >> 2] | 0)) {
      i1 = 130;
      i12 = 873;
      break L34;
     }
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP32[i21 >> 2] = i2 + 1;
     HEAP32[i5 + (i2 << 4) >> 2] = HEAP32[i116 >> 2];
     HEAP32[i5 + (i2 << 4) + 4 >> 2] = (HEAP32[i83 >> 2] | 0) + 1;
     HEAP32[i5 + (i2 << 4) + 8 >> 2] = 1;
     HEAP32[i5 + (i2 << 4) + 12 >> 2] = i4;
     i5 = HEAP32[i4 >> 2] | 0;
     i3 = HEAP32[i4 + 4 >> 2] | 0;
     i2 = i5 + -1 | 0;
     do if (i2 >>> 0 > 2) HEAP32[i119 >> 2] = 132; else {
      i4 = HEAP32[i136 + 444 + (i2 << 3) >> 2] | 0;
      if (!i4) {
       HEAP32[i119 >> 2] = 138;
       break;
      }
      i2 = HEAP32[i136 + 444 + (i2 << 3) + 4 >> 2] | 0;
      if ((i2 | 0) < (i3 | 0)) {
       HEAP32[i119 >> 2] = 131;
       break;
      } else {
       HEAP32[i82 >> 2] = i4;
       HEAP32[i86 >> 2] = i2;
       HEAP32[i83 >> 2] = i3;
       HEAP32[i116 >> 2] = i5;
       break;
      }
     } while (0);
     HEAP8[i93 >> 0] = 0;
     i12 = 853;
    } else i12 = 856;
    break;
   }
  case 41:
   {
    i2 = HEAP32[i9 >> 2] & 65535;
    if (i2 >>> 0 < (HEAPU16[i100 >> 1] | 0) >>> 0) {
     i139 = (HEAP16[i131 >> 1] | 0) == 0 ? -1 : -9;
     i12 = (HEAP32[i41 >> 2] | 0) + i2 | 0;
     HEAP8[i12 >> 0] = ((HEAP16[i106 >> 1] | 0) == 0 ? i139 : i139 & -17) & HEAP8[i12 >> 0];
     i12 = 853;
     break L51;
    } else if (!(HEAP8[i89 >> 0] | 0)) {
     i12 = 853;
     break L51;
    } else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
   }
  case 42:
   {
    i5 = HEAP32[i9 + 4 >> 2] | 0;
    i3 = (HEAP32[i42 >> 2] | 0) + 1 | 0;
    if (i5 >>> 0 >= i3 >>> 0) {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    i2 = HEAP32[i43 >> 2] | 0;
    i4 = HEAP32[i44 >> 2] | 0;
    if ((i3 | 0) == (i4 | 0)) if ((HEAP32[i2 + (i5 * 24 | 0) + 12 >> 2] | 0) == (i5 | 0)) i2 = i2 + (i5 * 24 | 0) | 0; else i12 = 251; else i12 = 251;
    if ((i12 | 0) == 251) {
     i3 = i2 + (i4 * 24 | 0) | 0;
     L435 : do if ((i4 | 0) > 0) do {
      if ((HEAP32[i2 + 12 >> 2] | 0) == (i5 | 0)) break L435;
      i2 = i2 + 24 | 0;
     } while (i2 >>> 0 < i3 >>> 0); while (0);
     if ((i2 | 0) == (i3 | 0)) {
      i1 = 134;
      i12 = 873;
      break L34;
     }
    }
    if (!(HEAP8[i2 + 16 >> 0] | 0)) {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    i3 = HEAP32[i21 >> 2] | 0;
    if ((i3 | 0) >= (HEAP32[i22 >> 2] | 0)) {
     i1 = 130;
     i12 = 873;
     break L34;
    }
    if ((HEAP32[i9 >> 2] | 0) > 0) {
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP32[i5 + (i3 << 4) >> 2] = HEAP32[i116 >> 2];
     HEAP32[i5 + (i3 << 4) + 4 >> 2] = (HEAP32[i83 >> 2] | 0) + 1;
     HEAP32[i5 + (i3 << 4) + 8 >> 2] = HEAP32[i9 >> 2];
     HEAP32[i5 + (i3 << 4) + 12 >> 2] = i2;
     HEAP32[i21 >> 2] = i3 + 1;
     i5 = HEAP32[i2 >> 2] | 0;
     i3 = HEAP32[i2 + 4 >> 2] | 0;
     i2 = i5 + -1 | 0;
     do if (i2 >>> 0 > 2) HEAP32[i119 >> 2] = 132; else {
      i4 = HEAP32[i136 + 444 + (i2 << 3) >> 2] | 0;
      if (!i4) {
       HEAP32[i119 >> 2] = 138;
       break;
      }
      i2 = HEAP32[i136 + 444 + (i2 << 3) + 4 >> 2] | 0;
      if ((i2 | 0) < (i3 | 0)) {
       HEAP32[i119 >> 2] = 131;
       break;
      } else {
       HEAP32[i82 >> 2] = i4;
       HEAP32[i86 >> 2] = i2;
       HEAP32[i83 >> 2] = i3;
       HEAP32[i116 >> 2] = i5;
       break;
      }
     } while (0);
     HEAP8[i93 >> 0] = 0;
     i12 = 853;
    } else i12 = 853;
    break;
   }
  case 43:
   {
    i5 = HEAP32[i9 >> 2] | 0;
    i3 = (HEAP32[i42 >> 2] | 0) + 1 | 0;
    if (i3 >>> 0 <= i5 >>> 0) {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    i2 = HEAP32[i43 >> 2] | 0;
    i4 = HEAP32[i44 >> 2] | 0;
    if ((i3 | 0) == (i4 | 0)) if ((HEAP32[i2 + (i5 * 24 | 0) + 12 >> 2] | 0) == (i5 | 0)) i2 = i2 + (i5 * 24 | 0) | 0; else i12 = 269; else i12 = 269;
    if ((i12 | 0) == 269) {
     i3 = i2 + (i4 * 24 | 0) | 0;
     L460 : do if ((i4 | 0) > 0) do {
      if ((HEAP32[i2 + 12 >> 2] | 0) == (i5 | 0)) break L460;
      i2 = i2 + 24 | 0;
     } while (i2 >>> 0 < i3 >>> 0); while (0);
     if ((i2 | 0) == (i3 | 0)) {
      i1 = 134;
      i12 = 873;
      break L34;
     }
    }
    if (!(HEAP8[i2 + 16 >> 0] | 0)) {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    i3 = HEAP32[i21 >> 2] | 0;
    if ((i3 | 0) >= (HEAP32[i22 >> 2] | 0)) {
     i1 = 130;
     i12 = 873;
     break L34;
    }
    i5 = HEAP32[i23 >> 2] | 0;
    HEAP32[i5 + (i3 << 4) >> 2] = HEAP32[i116 >> 2];
    HEAP32[i5 + (i3 << 4) + 4 >> 2] = (HEAP32[i83 >> 2] | 0) + 1;
    HEAP32[i5 + (i3 << 4) + 8 >> 2] = 1;
    HEAP32[i5 + (i3 << 4) + 12 >> 2] = i2;
    HEAP32[i21 >> 2] = i3 + 1;
    i5 = HEAP32[i2 >> 2] | 0;
    i3 = HEAP32[i2 + 4 >> 2] | 0;
    i2 = i5 + -1 | 0;
    do if (i2 >>> 0 > 2) HEAP32[i119 >> 2] = 132; else {
     i4 = HEAP32[i136 + 444 + (i2 << 3) >> 2] | 0;
     if (!i4) {
      HEAP32[i119 >> 2] = 138;
      break;
     }
     i2 = HEAP32[i136 + 444 + (i2 << 3) + 4 >> 2] | 0;
     if ((i2 | 0) < (i3 | 0)) {
      HEAP32[i119 >> 2] = 131;
      break;
     } else {
      HEAP32[i82 >> 2] = i4;
      HEAP32[i86 >> 2] = i2;
      HEAP32[i83 >> 2] = i3;
      HEAP32[i116 >> 2] = i5;
      break;
     }
    } while (0);
    HEAP8[i93 >> 0] = 0;
    i12 = 853;
    break;
   }
  case 44:
   {
    i6 = HEAP32[i9 >> 2] | 0;
    i2 = HEAP32[i43 >> 2] | 0;
    i4 = HEAP32[i44 >> 2] | 0;
    i5 = i2 + (i4 * 24 | 0) | 0;
    L479 : do if ((i4 | 0) > 0) do {
     if ((HEAP32[i2 + 12 >> 2] | 0) == (i6 | 0)) break L479;
     i2 = i2 + 24 | 0;
    } while (i2 >>> 0 < i5 >>> 0); while (0);
    if ((i2 | 0) == (i5 | 0)) {
     if (i4 >>> 0 >= (HEAP32[i45 >> 2] | 0) >>> 0) {
      i1 = 140;
      i12 = 873;
      break L34;
     }
     HEAP32[i44 >> 2] = i4 + 1;
    }
    if (i6 >>> 0 > 65535) {
     i1 = 140;
     i12 = 873;
     break L34;
    }
    HEAP32[i2 >> 2] = HEAP32[i116 >> 2];
    i4 = i6 & 65535;
    HEAP32[i2 + 12 >> 2] = i4;
    i5 = HEAP32[i83 >> 2] | 0;
    HEAP32[i2 + 4 >> 2] = i5 + 1;
    HEAP8[i2 + 16 >> 0] = 1;
    HEAP8[i2 + 17 >> 0] = 0;
    HEAP32[i2 + 20 >> 2] = 0;
    if ((HEAP32[i42 >> 2] | 0) >>> 0 < i6 >>> 0) HEAP32[i42 >> 2] = i4;
    i7 = HEAP32[i86 >> 2] | 0;
    L492 : while (1) {
     i5 = i3 + i5 | 0;
     HEAP32[i83 >> 2] = i5;
     if ((i5 | 0) >= (i7 | 0)) {
      i1 = 131;
      i12 = 873;
      break L34;
     }
     i6 = HEAP8[i11 + i5 >> 0] | 0;
     HEAP8[i84 >> 0] = i6;
     i139 = i6 & 255;
     i3 = HEAP8[279272 + i139 >> 0] | 0;
     HEAP32[i85 >> 2] = i3;
     if ((i139 | 1 | 0) == 65) {
      i4 = i5 + 1 | 0;
      if ((i4 | 0) >= (i7 | 0)) {
       i1 = 131;
       i12 = 873;
       break L34;
      }
      i3 = 2 - (Math_imul(HEAPU8[i11 + i4 >> 0] | 0, i3) | 0) | 0;
      HEAP32[i85 >> 2] = i3;
     }
     if ((i3 + i5 | 0) > (i7 | 0)) {
      i1 = 131;
      i12 = 873;
      break L34;
     }
     switch (i6 << 24 >> 24) {
     case 44:
     case -119:
      {
       i1 = 137;
       i12 = 873;
       break L34;
      }
     case 45:
      break L492;
     default:
      {}
     }
    }
    HEAP32[i2 + 8 >> 2] = i5;
    i12 = 853;
    break;
   }
  case 45:
   {
    i2 = HEAP32[i21 >> 2] | 0;
    if ((i2 | 0) < 1) {
     i1 = 136;
     i12 = 873;
     break L34;
    }
    i3 = i2 + -1 | 0;
    HEAP32[i21 >> 2] = i3;
    i4 = HEAP32[i23 >> 2] | 0;
    i138 = i4 + (i3 << 4) + 8 | 0;
    i139 = HEAP32[i138 >> 2] | 0;
    HEAP32[i138 >> 2] = i139 + -1;
    HEAP8[i93 >> 0] = 0;
    if ((i139 | 0) > 1) {
     HEAP32[i21 >> 2] = i2;
     HEAP32[i83 >> 2] = HEAP32[(HEAP32[i4 + (i3 << 4) + 12 >> 2] | 0) + 4 >> 2];
     i12 = 853;
     break L51;
    }
    i5 = HEAP32[i4 + (i3 << 4) >> 2] | 0;
    i3 = HEAP32[i4 + (i3 << 4) + 4 >> 2] | 0;
    i2 = i5 + -1 | 0;
    if (i2 >>> 0 > 2) {
     i1 = 132;
     i12 = 873;
     break L34;
    }
    i4 = HEAP32[i136 + 444 + (i2 << 3) >> 2] | 0;
    if (!i4) {
     i1 = 138;
     i12 = 873;
     break L34;
    }
    i2 = HEAP32[i136 + 444 + (i2 << 3) + 4 >> 2] | 0;
    if ((i2 | 0) < (i3 | 0)) {
     i1 = 131;
     i12 = 873;
     break L34;
    }
    HEAP32[i82 >> 2] = i4;
    HEAP32[i86 >> 2] = i2;
    HEAP32[i83 >> 2] = i3;
    HEAP32[i116 >> 2] = i5;
    i12 = 853;
    break;
   }
  case 47:
  case 46:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    i3 = i2 & 65535;
    i2 = i2 & 65535;
    if (i2 >>> 0 >= (HEAPU16[i100 >> 1] | 0) >>> 0) if (!(HEAP8[i89 >> 0] | 0)) {
     i12 = 853;
     break L51;
    } else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    if (!(i10 & 1)) i2 = 0; else {
     i139 = HEAP32[i108 >> 2] | 0;
     i2 = FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, HEAP32[i139 + (i2 << 3) >> 2] | 0, HEAP32[i139 + (i2 << 3) + 4 >> 2] | 0) | 0;
     i2 = (FUNCTION_TABLE_iiii[HEAP32[i17 >> 2] & 127](i136, i2, HEAP32[i46 >> 2] | 0) | 0) - i2 | 0;
    }
    FUNCTION_TABLE_viiii[HEAP32[i120 >> 2] & 31](i136, i34, i3, i2);
    HEAP16[i33 >> 1] = i3;
    HEAP16[i111 >> 1] = i3;
    i12 = 853;
    break;
   }
  case 49:
  case 48:
   {
    L517 : do if (HEAP16[i47 >> 1] | 0) {
     i4 = HEAP32[i48 >> 2] | 0;
     i3 = HEAP32[i49 >> 2] | 0;
     i2 = HEAP32[i50 >> 2] | 0;
     if (!(i10 & 1)) {
      i3 = i3 + 4 | 0;
      HEAP32[i126 >> 2] = i3;
      i10 = i4 + 4 | 0;
      HEAP32[i51 >> 2] = i10;
      i11 = 16;
      i2 = i2 + 4 | 0;
     } else {
      HEAP32[i126 >> 2] = i3;
      HEAP32[i51 >> 2] = i4;
      i11 = 8;
      i10 = i4;
     }
     HEAP32[i52 >> 2] = i2;
     i5 = HEAP16[i53 >> 1] | 0;
     HEAP32[i54 >> 2] = i5 & 65535;
     i2 = 0;
     i4 = 0;
     while (1) {
      i139 = (HEAPU16[(HEAP32[i55 >> 2] | 0) + (i2 << 16 >> 16 << 1) >> 1] | 0) - (HEAPU16[i56 >> 1] | 0) | 0;
      i9 = i5 & 65535;
      i9 = i139 >>> 0 < i9 >>> 0 ? i139 : i9 + -1 | 0;
      L525 : do if (i4 >>> 0 <= i9 >>> 0) {
       i6 = HEAP32[i57 >> 2] | 0;
       i5 = i4;
       while (1) {
        if ((HEAP8[i6 + i5 >> 0] & i11) << 24 >> 24) {
         i6 = i5;
         break;
        }
        i5 = i5 + 1 | 0;
        if (i5 >>> 0 > i9 >>> 0) {
         i4 = i5;
         break L525;
        }
       }
       L530 : while (1) {
        i7 = i6;
        while (1) {
         i8 = i7 + 1 | 0;
         if (i8 >>> 0 > i9 >>> 0) break L530;
         if (!((HEAP8[(HEAP32[i57 >> 2] | 0) + i8 >> 0] & i11) << 24 >> 24)) i7 = i8; else break;
        }
        __iup_worker_interpolate(i126, i6 + 1 | 0, i7, i6, i8);
        i6 = i8;
       }
       if ((i6 | 0) != (i5 | 0)) {
        __iup_worker_interpolate(i126, i6 + 1 & 65535, i9, i6, i5);
        if (!i5) {
         i4 = i8;
         break;
        }
        __iup_worker_interpolate(i126, i4, i5 + -1 | 0, i6, i5);
        i4 = i8;
        break;
       }
       i6 = (HEAP32[i10 + (i5 << 3) >> 2] | 0) - (HEAP32[i3 + (i5 << 3) >> 2] | 0) | 0;
       if (!i6) i4 = i8; else {
        if (i4 >>> 0 < i5 >>> 0) do {
         i139 = i10 + (i4 << 3) | 0;
         HEAP32[i139 >> 2] = (HEAP32[i139 >> 2] | 0) + i6;
         i4 = i4 + 1 | 0;
        } while ((i4 | 0) != (i5 | 0));
        i4 = i5 + 1 | 0;
        if (i4 >>> 0 > i9 >>> 0) {
         i4 = i8;
         break;
        }
        do {
         i139 = i10 + (i4 << 3) | 0;
         HEAP32[i139 >> 2] = (HEAP32[i139 >> 2] | 0) + i6;
         i4 = i4 + 1 | 0;
        } while (i4 >>> 0 <= i9 >>> 0);
        i4 = i8;
       }
      } while (0);
      i2 = i2 + 1 << 16 >> 16;
      if (i2 << 16 >> 16 >= (HEAP16[i47 >> 1] | 0)) break L517;
      i5 = HEAP16[i53 >> 1] | 0;
     }
    } while (0);
    i12 = 853;
    break;
   }
  case 51:
  case 50:
   {
    L552 : do if ((HEAP32[i87 >> 2] | 0) < (HEAP32[i39 >> 2] | 0)) if (!(HEAP8[i89 >> 0] | 0)) i12 = 350; else {
     HEAP32[i119 >> 2] = 134;
     i12 = 350;
    } else if (!((_Compute_Point_Displacement(i136, i133, i134, i126, i132) | 0) << 24 >> 24)) if ((HEAP32[i39 >> 2] | 0) > 0) {
     i2 = HEAP32[i134 >> 2] | 0;
     i3 = HEAP32[i133 >> 2] | 0;
     while (1) {
      i4 = (HEAP32[i88 >> 2] | 0) + -1 | 0;
      HEAP32[i88 >> 2] = i4;
      i4 = HEAP32[(HEAP32[i90 >> 2] | 0) + (i4 << 2) >> 2] & 65535;
      if (i4 >>> 0 < (HEAPU16[i28 >> 1] | 0) >>> 0) {
       if (HEAP16[i131 >> 1] | 0) {
        i139 = (HEAP32[i29 >> 2] | 0) + (i4 << 3) | 0;
        HEAP32[i139 >> 2] = (HEAP32[i139 >> 2] | 0) + i3;
        i139 = (HEAP32[i32 >> 2] | 0) + i4 | 0;
        HEAP8[i139 >> 0] = HEAP8[i139 >> 0] | 8;
       }
       if (HEAP16[i106 >> 1] | 0) {
        i139 = (HEAP32[i29 >> 2] | 0) + (i4 << 3) + 4 | 0;
        HEAP32[i139 >> 2] = (HEAP32[i139 >> 2] | 0) + i2;
        i139 = (HEAP32[i32 >> 2] | 0) + i4 | 0;
        HEAP8[i139 >> 0] = HEAP8[i139 >> 0] | 16;
       }
      } else if (HEAP8[i89 >> 0] | 0) break;
      i139 = HEAP32[i39 >> 2] | 0;
      HEAP32[i39 >> 2] = i139 + -1;
      if ((i139 | 0) <= 1) {
       i12 = 350;
       break L552;
      }
     }
     HEAP32[i119 >> 2] = 134;
    } else i12 = 350; while (0);
    if ((i12 | 0) == 350) {
     HEAP32[i39 >> 2] = 1;
     HEAP32[i91 >> 2] = HEAP32[i88 >> 2];
    }
    i12 = 853;
    break;
   }
  case 53:
  case 52:
   {
    if (!(HEAP16[i38 >> 1] | 0)) i3 = 1; else i3 = HEAP16[i61 >> 1] | 0;
    i2 = HEAP32[i9 >> 2] << 16 >> 16;
    if (i2 >>> 0 < i3 << 16 >> 16 >>> 0) {
     if (!((_Compute_Point_Displacement(i136, i133, i134, i126, i132) | 0) << 24 >> 24)) {
      if (!i2) i3 = 0; else i3 = (HEAPU16[(HEAP32[i59 >> 2] | 0) + (i2 + -1 << 1) >> 1] | 0) + 1 - (HEAPU16[i60 >> 1] | 0) & 65535;
      if (!(HEAP16[i38 >> 1] | 0)) i2 = HEAP16[i28 >> 1] | 0; else i2 = (HEAPU16[(HEAP32[i59 >> 2] | 0) + (i2 << 1) >> 1] | 0) + 1 - (HEAPU16[i60 >> 1] | 0) & 65535;
      if ((i3 & 65535) < (i2 & 65535)) {
       i5 = HEAP32[i58 >> 2] | 0;
       i6 = HEAP32[i134 >> 2] | 0;
       i7 = HEAP32[i133 >> 2] | 0;
       i8 = HEAPU16[i132 >> 1] | 0;
       i4 = i2 & 65535;
       i3 = i3 & 65535;
       do {
        i2 = HEAP32[i29 >> 2] | 0;
        do if (!((i8 | 0) == (i3 | 0) & (i5 | 0) == (i2 | 0))) {
         if (HEAP16[i131 >> 1] | 0) {
          i139 = i2 + (i3 << 3) | 0;
          HEAP32[i139 >> 2] = (HEAP32[i139 >> 2] | 0) + i7;
          i139 = (HEAP32[i32 >> 2] | 0) + i3 | 0;
          HEAP8[i139 >> 0] = HEAP8[i139 >> 0] | 8;
         }
         if (!(HEAP16[i106 >> 1] | 0)) break;
         i139 = (HEAP32[i29 >> 2] | 0) + (i3 << 3) + 4 | 0;
         HEAP32[i139 >> 2] = (HEAP32[i139 >> 2] | 0) + i6;
         i139 = (HEAP32[i32 >> 2] | 0) + i3 | 0;
         HEAP8[i139 >> 0] = HEAP8[i139 >> 0] | 16;
        } while (0);
        i3 = i3 + 1 | 0;
       } while ((i3 | 0) != (i4 | 0));
      }
     }
    } else if (HEAP8[i89 >> 0] | 0) HEAP32[i119 >> 2] = 134;
    i12 = 853;
    break;
   }
  case 55:
  case 54:
   {
    L600 : do if ((HEAP32[i9 >> 2] | 0) >>> 0 > 1) {
     if (HEAP8[i89 >> 0] | 0) HEAP32[i119 >> 2] = 134;
    } else if (!((_Compute_Point_Displacement(i136, i133, i134, i126, i132) | 0) << 24 >> 24)) {
     switch (HEAP16[i38 >> 1] | 0) {
     case 0:
      {
       i2 = HEAP16[i28 >> 1] | 0;
       break;
      }
     case 1:
      {
       i2 = HEAP16[i61 >> 1] | 0;
       if (i2 << 16 >> 16 <= 0) break L600;
       i2 = (HEAPU16[(HEAP32[i59 >> 2] | 0) + ((i2 << 16 >> 16) + -1 << 1) >> 1] | 0) + 1 & 65535;
       break;
      }
     default:
      break L600;
     }
     if (i2 << 16 >> 16) {
      i6 = HEAP32[i62 >> 2] | 0;
      i7 = HEAP32[i29 >> 2] | 0;
      i9 = HEAP32[i134 >> 2] | 0;
      i8 = HEAP32[i133 >> 2] | 0;
      if ((i6 | 0) != (i7 | 0)) {
       i4 = (HEAP16[i106 >> 1] | 0) == 0;
       i5 = i2 & 65535;
       if (!(HEAP16[i131 >> 1] | 0)) {
        if (i4) break; else i2 = 0;
        while (1) {
         i139 = i7 + (i2 << 3) + 4 | 0;
         HEAP32[i139 >> 2] = (HEAP32[i139 >> 2] | 0) + i9;
         i2 = i2 + 1 | 0;
         if ((i2 | 0) == (i5 | 0)) break L600;
        }
       } else i3 = 0;
       while (1) {
        i2 = i7 + (i3 << 3) | 0;
        HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i8;
        i2 = i7 + (i3 << 3) + 4 | 0;
        if (!i4) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i9;
        i3 = i3 + 1 | 0;
        if ((i3 | 0) == (i5 | 0)) break L600;
       }
      }
      i5 = HEAPU16[i132 >> 1] | 0;
      i4 = i2 & 65535;
      i3 = 0;
      do {
       do if ((i5 | 0) != (i3 | 0)) {
        i2 = i6 + (i3 << 3) | 0;
        if (HEAP16[i131 >> 1] | 0) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i8;
        i2 = i6 + (i3 << 3) + 4 | 0;
        if (!(HEAP16[i106 >> 1] | 0)) break;
        HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i9;
       } while (0);
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) != (i4 | 0));
     }
    } while (0);
    i12 = 853;
    break;
   }
  case 56:
   {
    i3 = HEAP32[i39 >> 2] | 0;
    L634 : do if ((HEAP32[i87 >> 2] | 0) > (i3 | 0)) {
     i139 = HEAP32[i9 >> 2] | 0;
     i5 = HEAP16[i131 >> 1] | 0;
     i13 = i5 << 16 >> 16;
     i6 = (i139 | 0) < 0 ? 0 - i139 | 0 : i139;
     i5 = i5 << 16 >> 16 < 0 ? 0 - i13 | 0 : i13;
     i15 = i6 >>> 16;
     i6 = i6 & 65535;
     i138 = Math_imul(i15, i5) | 0;
     i14 = i138 << 16 | 8192;
     i5 = i14 + (Math_imul(i6, i5) | 0) | 0;
     i5 = (i5 >>> 0 < i14 >>> 0 & 1) + (i138 >>> 16) << 18 | i5 >>> 14;
     i5 = (i13 ^ i139 | 0) > -1 ? i5 : 0 - i5 | 0;
     i13 = HEAP16[i106 >> 1] | 0;
     i138 = i13 << 16 >> 16;
     i13 = i13 << 16 >> 16 < 0 ? 0 - i138 | 0 : i138;
     i15 = Math_imul(i13, i15) | 0;
     i14 = i15 << 16 | 8192;
     i6 = i14 + (Math_imul(i13, i6) | 0) | 0;
     i6 = (i6 >>> 0 < i14 >>> 0 & 1) + (i15 >>> 16) << 18 | i6 >>> 14;
     i6 = (i138 ^ i139 | 0) > -1 ? i6 : 0 - i6 | 0;
     if ((i3 | 0) > 0) {
      i3 = i4;
      while (1) {
       i2 = i2 + -1 | 0;
       HEAP32[i88 >> 2] = i2;
       i2 = HEAP32[i3 + (i2 << 2) >> 2] & 65535;
       if (i2 >>> 0 < (HEAPU16[i28 >> 1] | 0) >>> 0) {
        if (HEAP16[i131 >> 1] | 0) {
         i139 = (HEAP32[i29 >> 2] | 0) + (i2 << 3) | 0;
         HEAP32[i139 >> 2] = (HEAP32[i139 >> 2] | 0) + i5;
         i139 = (HEAP32[i32 >> 2] | 0) + i2 | 0;
         HEAP8[i139 >> 0] = HEAP8[i139 >> 0] | 8;
        }
        if (HEAP16[i106 >> 1] | 0) {
         i139 = (HEAP32[i29 >> 2] | 0) + (i2 << 3) + 4 | 0;
         HEAP32[i139 >> 2] = (HEAP32[i139 >> 2] | 0) + i6;
         i139 = (HEAP32[i32 >> 2] | 0) + i2 | 0;
         HEAP8[i139 >> 0] = HEAP8[i139 >> 0] | 16;
        }
       } else if (HEAP8[i89 >> 0] | 0) {
        i1 = 134;
        i12 = 873;
        break L34;
       }
       i139 = HEAP32[i39 >> 2] | 0;
       HEAP32[i39 >> 2] = i139 + -1;
       i2 = HEAP32[i88 >> 2] | 0;
       if ((i139 | 0) <= 1) break L634;
       i3 = HEAP32[i90 >> 2] | 0;
      }
     }
    } else if (HEAP8[i89 >> 0] | 0) HEAP32[i119 >> 2] = 134; while (0);
    HEAP32[i39 >> 2] = 1;
    HEAP32[i91 >> 2] = i2;
    i12 = 853;
    break;
   }
  case 57:
   {
    i3 = HEAP32[i39 >> 2] | 0;
    do if ((HEAP32[i87 >> 2] | 0) < (i3 | 0)) {
     if (HEAP8[i89 >> 0] | 0) HEAP32[i119 >> 2] = 134;
    } else {
     if (!(HEAP16[i110 >> 1] | 0)) i12 = 1; else if (!(HEAP16[i103 >> 1] | 0)) i12 = 1; else i12 = (HEAP16[i38 >> 1] | 0) == 0;
     i139 = HEAP16[i111 >> 1] | 0;
     i7 = i139 & 65535;
     if ((i139 & 65535) >= (HEAPU16[i100 >> 1] | 0)) {
      if (!(HEAP8[i89 >> 0] | 0)) break;
      HEAP32[i119 >> 2] = 134;
      break;
     }
     i6 = HEAP32[(i12 ? i104 : i114) >> 2] | 0;
     i11 = i6 + (i7 << 3) | 0;
     i8 = HEAP32[i108 >> 2] | 0;
     i13 = i8 + (i7 << 3) | 0;
     i139 = HEAP16[i112 >> 1] | 0;
     i5 = i139 & 65535;
     if ((i139 & 65535) < (HEAPU16[i97 >> 1] | 0)) {
      i2 = HEAP32[i11 >> 2] | 0;
      do if (i12) {
       i139 = HEAP32[i105 >> 2] | 0;
       i2 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, (HEAP32[i139 + (i5 << 3) >> 2] | 0) - i2 | 0, (HEAP32[i139 + (i5 << 3) + 4 >> 2] | 0) - (HEAP32[i6 + (i7 << 3) + 4 >> 2] | 0) | 0) | 0;
      } else {
       i3 = HEAP32[i115 >> 2] | 0;
       i4 = HEAP32[i113 >> 2] | 0;
       i2 = (HEAP32[i4 + (i5 << 3) >> 2] | 0) - i2 | 0;
       if ((i3 | 0) == (HEAP32[i18 >> 2] | 0)) {
        i2 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, i2, (HEAP32[i4 + (i5 << 3) + 4 >> 2] | 0) - (HEAP32[i6 + (i7 << 3) + 4 >> 2] | 0) | 0) | 0;
        break;
       } else {
        i139 = _FT_MulFix(i2, i3) | 0;
        i2 = _FT_MulFix((HEAP32[(HEAP32[i113 >> 2] | 0) + (HEAPU16[i112 >> 1] << 3) + 4 >> 2] | 0) - (HEAP32[i6 + (i7 << 3) + 4 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0;
        i2 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, i139, i2) | 0;
        break;
       }
      } while (0);
      i3 = HEAP32[i107 >> 2] | 0;
      i10 = HEAPU16[i112 >> 1] | 0;
      i10 = FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, (HEAP32[i3 + (i10 << 3) >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0, (HEAP32[i3 + (i10 << 3) + 4 >> 2] | 0) - (HEAP32[i8 + (i7 << 3) + 4 >> 2] | 0) | 0) | 0;
      i3 = HEAP32[i39 >> 2] | 0;
     } else {
      i10 = 0;
      i2 = 0;
     }
     if ((i3 | 0) > 0) {
      i9 = i6 + (i7 << 3) + 4 | 0;
      i7 = i8 + (i7 << 3) + 4 | 0;
      i8 = (i2 | 0) == 0;
      do {
       i139 = HEAP32[i90 >> 2] | 0;
       i6 = (HEAP32[i88 >> 2] | 0) + -1 | 0;
       HEAP32[i88 >> 2] = i6;
       i6 = HEAP32[i139 + (i6 << 2) >> 2] | 0;
       if (i6 >>> 0 < (HEAPU16[i28 >> 1] | 0) >>> 0) {
        i3 = HEAP32[i11 >> 2] | 0;
        do if (i12) {
         i139 = HEAP32[i63 >> 2] | 0;
         i3 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, (HEAP32[i139 + (i6 << 3) >> 2] | 0) - i3 | 0, (HEAP32[i139 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) | 0) | 0;
        } else {
         i4 = HEAP32[i115 >> 2] | 0;
         i5 = HEAP32[i64 >> 2] | 0;
         i3 = (HEAP32[i5 + (i6 << 3) >> 2] | 0) - i3 | 0;
         if ((i4 | 0) == (HEAP32[i18 >> 2] | 0)) {
          i3 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, i3, (HEAP32[i5 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) | 0) | 0;
          break;
         } else {
          i139 = _FT_MulFix(i3, i4) | 0;
          i3 = _FT_MulFix((HEAP32[(HEAP32[i64 >> 2] | 0) + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0;
          i3 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, i139, i3) | 0;
          break;
         }
        } while (0);
        i4 = HEAP32[i29 >> 2] | 0;
        i4 = FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, (HEAP32[i4 + (i6 << 3) >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0, (HEAP32[i4 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) | 0;
        if (!(i8 | (i3 | 0) == 0)) i3 = _FT_MulDiv(i3, i10, i2) | 0;
        FUNCTION_TABLE_viiii[HEAP32[i120 >> 2] & 31](i136, i37, i6 & 65535, i3 - i4 | 0);
        i4 = HEAP32[i39 >> 2] | 0;
       } else if (!(HEAP8[i89 >> 0] | 0)) i4 = i3; else {
        i1 = 134;
        i12 = 873;
        break L34;
       }
       i3 = i4 + -1 | 0;
       HEAP32[i39 >> 2] = i3;
      } while ((i4 | 0) > 1);
     }
    } while (0);
    HEAP32[i39 >> 2] = 1;
    HEAP32[i91 >> 2] = HEAP32[i88 >> 2];
    i12 = 853;
    break;
   }
  case 59:
  case 58:
   {
    i5 = HEAP32[i9 >> 2] | 0;
    i4 = i5 & 65535;
    i5 = i5 & 65535;
    if (i5 >>> 0 < (HEAPU16[i97 >> 1] | 0) >>> 0) {
     i2 = HEAP16[i33 >> 1] | 0;
     i3 = i2 & 65535;
     if ((i2 & 65535) < (HEAPU16[i100 >> 1] | 0)) {
      if (!(HEAP16[i103 >> 1] | 0)) {
       i139 = (HEAP32[i104 >> 2] | 0) + (i3 << 3) | 0;
       i138 = HEAP32[i139 + 4 >> 2] | 0;
       i3 = (HEAP32[i105 >> 2] | 0) + (i5 << 3) | 0;
       HEAP32[i3 >> 2] = HEAP32[i139 >> 2];
       HEAP32[i3 + 4 >> 2] = i138;
       i3 = i9 + 4 | 0;
       FUNCTION_TABLE_viiii[HEAP32[i121 >> 2] & 31](i136, i96, i4, HEAP32[i3 >> 2] | 0);
       i138 = (HEAP32[i105 >> 2] | 0) + (i5 << 3) | 0;
       i139 = HEAP32[i138 + 4 >> 2] | 0;
       i2 = (HEAP32[i107 >> 2] | 0) + (i5 << 3) | 0;
       HEAP32[i2 >> 2] = HEAP32[i138 >> 2];
       HEAP32[i2 + 4 >> 2] = i139;
       i2 = HEAP16[i33 >> 1] | 0;
      } else i3 = i9 + 4 | 0;
      i15 = HEAP32[i107 >> 2] | 0;
      i138 = HEAP32[i108 >> 2] | 0;
      i139 = i2 & 65535;
      i139 = FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, (HEAP32[i15 + (i5 << 3) >> 2] | 0) - (HEAP32[i138 + (i139 << 3) >> 2] | 0) | 0, (HEAP32[i15 + (i5 << 3) + 4 >> 2] | 0) - (HEAP32[i138 + (i139 << 3) + 4 >> 2] | 0) | 0) | 0;
      FUNCTION_TABLE_viiii[HEAP32[i120 >> 2] & 31](i136, i96, i4, (HEAP32[i3 >> 2] | 0) - i139 | 0);
      HEAP16[i111 >> 1] = HEAP16[i33 >> 1] | 0;
      HEAP16[i112 >> 1] = i4;
      if (!(HEAP8[i84 >> 0] & 1)) {
       i12 = 853;
       break L51;
      }
      HEAP16[i33 >> 1] = i4;
      i12 = 853;
      break L51;
     }
    }
    if (!(HEAP8[i89 >> 0] | 0)) i12 = 853; else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    break;
   }
  case 60:
   {
    i3 = HEAP32[i39 >> 2] | 0;
    L702 : do if ((HEAP32[i87 >> 2] | 0) < (i3 | 0)) i12 = 449; else if ((HEAPU16[i33 >> 1] | 0) < (HEAPU16[i100 >> 1] | 0)) {
     if ((i3 | 0) > 0) {
      i5 = i3;
      while (1) {
       i2 = i2 + -1 | 0;
       HEAP32[i88 >> 2] = i2;
       i2 = HEAP32[i4 + (i2 << 2) >> 2] | 0;
       i3 = i2 & 65535;
       if (i3 >>> 0 < (HEAPU16[i97 >> 1] | 0) >>> 0) {
        i15 = HEAP32[i107 >> 2] | 0;
        i138 = HEAP32[i108 >> 2] | 0;
        i139 = HEAPU16[i33 >> 1] | 0;
        i3 = FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, (HEAP32[i15 + (i3 << 3) >> 2] | 0) - (HEAP32[i138 + (i139 << 3) >> 2] | 0) | 0, (HEAP32[i15 + (i3 << 3) + 4 >> 2] | 0) - (HEAP32[i138 + (i139 << 3) + 4 >> 2] | 0) | 0) | 0;
        FUNCTION_TABLE_viiii[HEAP32[i120 >> 2] & 31](i136, i96, i2 & 65535, 0 - i3 | 0);
        i3 = HEAP32[i39 >> 2] | 0;
       } else if (!(HEAP8[i89 >> 0] | 0)) i3 = i5; else {
        i1 = 134;
        i12 = 873;
        break L34;
       }
       i5 = i3 + -1 | 0;
       HEAP32[i39 >> 2] = i5;
       i2 = HEAP32[i88 >> 2] | 0;
       if ((i3 | 0) <= 1) break L702;
       i4 = HEAP32[i90 >> 2] | 0;
      }
     }
    } else i12 = 449; while (0);
    if ((i12 | 0) == 449) if (HEAP8[i89 >> 0] | 0) HEAP32[i119 >> 2] = 134;
    HEAP32[i39 >> 2] = 1;
    HEAP32[i91 >> 2] = i2;
    i12 = 853;
    break;
   }
  case 61:
   {
    HEAP32[i118 >> 2] = 2;
    HEAP32[i17 >> 2] = 71;
    i12 = 853;
    break;
   }
  case 63:
  case 62:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    i2 = HEAP32[i9 + 4 >> 2] | 0;
    i5 = HEAP32[i95 >> 2] | 0;
    i6 = i3 & 65535;
    i3 = i3 & 65535;
    if (i3 >>> 0 < (HEAPU16[i100 >> 1] | 0) >>> 0) if ((HEAP32[i98 >> 2] | 0) >>> 0 > i2 >>> 0) {
     i2 = FUNCTION_TABLE_iii[HEAP32[i128 >> 2] & 255](i136, i2) | 0;
     if (!(HEAP16[i110 >> 1] | 0)) {
      i11 = HEAP16[i131 >> 1] | 0;
      i139 = i11 << 16 >> 16;
      i138 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
      i11 = i11 << 16 >> 16 < 0 ? 0 - i139 | 0 : i139;
      i14 = i138 >>> 16;
      i138 = i138 & 65535;
      i15 = Math_imul(i11, i14) | 0;
      i13 = i15 << 16 | 8192;
      i11 = i13 + (Math_imul(i11, i138) | 0) | 0;
      i11 = (i11 >>> 0 < i13 >>> 0 & 1) + (i15 >>> 16) << 18 | i11 >>> 14;
      i15 = HEAP32[i104 >> 2] | 0;
      HEAP32[i15 + (i3 << 3) >> 2] = (i139 ^ i2 | 0) > -1 ? i11 : 0 - i11 | 0;
      i11 = HEAP16[i106 >> 1] | 0;
      i139 = i11 << 16 >> 16;
      i11 = i11 << 16 >> 16 < 0 ? 0 - i139 | 0 : i139;
      i14 = Math_imul(i11, i14) | 0;
      i13 = i14 << 16 | 8192;
      i138 = i13 + (Math_imul(i11, i138) | 0) | 0;
      i138 = (i138 >>> 0 < i13 >>> 0 & 1) + (i14 >>> 16) << 18 | i138 >>> 14;
      HEAP32[i15 + (i3 << 3) + 4 >> 2] = (i139 ^ i2 | 0) > -1 ? i138 : 0 - i138 | 0;
      i15 = i15 + (i3 << 3) | 0;
      i138 = HEAP32[i15 + 4 >> 2] | 0;
      i139 = (HEAP32[i108 >> 2] | 0) + (i3 << 3) | 0;
      HEAP32[i139 >> 2] = HEAP32[i15 >> 2];
      HEAP32[i139 + 4 >> 2] = i138;
     }
     i4 = HEAP32[i108 >> 2] | 0;
     i4 = FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, HEAP32[i4 + (i3 << 3) >> 2] | 0, HEAP32[i4 + (i3 << 3) + 4 >> 2] | 0) | 0;
     i3 = i2 - i4 | 0;
     if (HEAP8[i84 >> 0] & 1) i2 = FUNCTION_TABLE_iiii[HEAP32[i17 >> 2] & 127](i136, (((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) > (i5 | 0) ? i4 : i2, HEAP32[i46 >> 2] | 0) | 0;
     FUNCTION_TABLE_viiii[HEAP32[i120 >> 2] & 31](i136, i34, i6, i2 - i4 | 0);
    } else i12 = 461; else i12 = 461;
    if ((i12 | 0) == 461) if (HEAP8[i89 >> 0] | 0) HEAP32[i119 >> 2] = 134;
    HEAP16[i33 >> 1] = i6;
    HEAP16[i111 >> 1] = i6;
    i12 = 853;
    break;
   }
  case 64:
   {
    i2 = HEAP32[i83 >> 2] | 0;
    i3 = HEAP8[i11 + (i2 + 1) >> 0] | 0;
    i4 = i3 & 255;
    if (i4 >>> 0 >= (i7 + 1 - (HEAP32[i87 >> 2] | 0) | 0) >>> 0) {
     i1 = 130;
     i12 = 873;
     break L34;
    }
    if (i3 << 24 >> 24) {
     HEAP32[i9 >> 2] = HEAPU8[i11 + (i2 + 2) >> 0];
     if (i3 << 24 >> 24 != 1) {
      i2 = 2;
      i3 = 2;
      do {
       HEAP32[i9 + (i2 + -1 << 2) >> 2] = HEAPU8[i11 + ((HEAP32[i83 >> 2] | 0) + 1 + i2) >> 0];
       i3 = i3 + 1 << 16 >> 16;
       i2 = i3 & 65535;
      } while (i2 >>> 0 <= i4 >>> 0);
     }
    }
    HEAP32[i91 >> 2] = (HEAP32[i91 >> 2] | 0) + i4;
    i12 = 853;
    break;
   }
  case 65:
   {
    i2 = HEAP32[i83 >> 2] | 0;
    i4 = HEAP8[i11 + (i2 + 1) >> 0] | 0;
    i5 = i4 & 255;
    if (i5 >>> 0 >= (i7 + 1 - (HEAP32[i87 >> 2] | 0) | 0) >>> 0) {
     i1 = 130;
     i12 = 873;
     break L34;
    }
    i3 = i2 + 2 | 0;
    HEAP32[i83 >> 2] = i3;
    if (!(i4 << 24 >> 24)) i2 = i6; else {
     i2 = 0;
     i4 = i3;
     i3 = 0;
     while (1) {
      HEAP32[i83 >> 2] = i4 + 2;
      HEAP32[i9 + (i3 << 2) >> 2] = (HEAPU8[i11 + i4 >> 0] << 8 | HEAPU8[i11 + (i4 + 1) >> 0]) << 16 >> 16;
      i2 = i2 + 1 << 16 >> 16;
      i3 = i2 & 65535;
      if (i3 >>> 0 >= i5 >>> 0) break;
      i4 = HEAP32[i83 >> 2] | 0;
     }
     i2 = HEAP32[i91 >> 2] | 0;
    }
    HEAP8[i93 >> 0] = 0;
    HEAP32[i91 >> 2] = i2 + i5;
    i12 = 853;
    break;
   }
  case 66:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    if (i2 >>> 0 < (HEAPU16[i65 >> 1] | 0) >>> 0) {
     HEAP32[(HEAP32[i66 >> 2] | 0) + (i2 << 2) >> 2] = HEAP32[i9 + 4 >> 2];
     i12 = 853;
     break L51;
    } else if (!(HEAP8[i89 >> 0] | 0)) {
     i12 = 853;
     break L51;
    } else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
   }
  case 67:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    if (i2 >>> 0 < (HEAPU16[i65 >> 1] | 0) >>> 0) i2 = HEAP32[(HEAP32[i66 >> 2] | 0) + (i2 << 2) >> 2] | 0; else if (!(HEAP8[i89 >> 0] | 0)) i2 = 0; else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    HEAP32[i9 >> 2] = i2;
    i12 = 853;
    break;
   }
  case 68:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i98 >> 2] | 0) >>> 0) {
     FUNCTION_TABLE_viii[HEAP32[i129 >> 2] & 31](i136, i2, HEAP32[i9 + 4 >> 2] | 0);
     i12 = 853;
     break L51;
    } else if (!(HEAP8[i89 >> 0] | 0)) {
     i12 = 853;
     break L51;
    } else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
   }
  case 69:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i98 >> 2] | 0) >>> 0) i2 = FUNCTION_TABLE_iii[HEAP32[i128 >> 2] & 255](i136, i2) | 0; else if (!(HEAP8[i89 >> 0] | 0)) i2 = 0; else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    HEAP32[i9 >> 2] = i2;
    i12 = 853;
    break;
   }
  case 71:
  case 70:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    do if (i2 >>> 0 < (HEAPU16[i28 >> 1] | 0) >>> 0) if (!(i10 & 1)) {
     i139 = HEAP32[i29 >> 2] | 0;
     i2 = FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, HEAP32[i139 + (i2 << 3) >> 2] | 0, HEAP32[i139 + (i2 << 3) + 4 >> 2] | 0) | 0;
     break;
    } else {
     i139 = HEAP32[i63 >> 2] | 0;
     i2 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, HEAP32[i139 + (i2 << 3) >> 2] | 0, HEAP32[i139 + (i2 << 3) + 4 >> 2] | 0) | 0;
     break;
    } else if (!(HEAP8[i89 >> 0] | 0)) i2 = 0; else {
     HEAP32[i119 >> 2] = 134;
     i2 = 0;
    } while (0);
    HEAP32[i9 >> 2] = i2;
    i12 = 853;
    break;
   }
  case 72:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    i3 = i2 & 65535;
    if (i3 >>> 0 >= (HEAPU16[i28 >> 1] | 0) >>> 0) if (!(HEAP8[i89 >> 0] | 0)) {
     i12 = 853;
     break L51;
    } else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    i139 = HEAP32[i29 >> 2] | 0;
    i139 = FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, HEAP32[i139 + (i3 << 3) >> 2] | 0, HEAP32[i139 + (i3 << 3) + 4 >> 2] | 0) | 0;
    FUNCTION_TABLE_viiii[HEAP32[i120 >> 2] & 31](i136, i37, i2 & 65535, (HEAP32[i9 + 4 >> 2] | 0) - i139 | 0);
    if (!(HEAP16[i38 >> 1] | 0)) {
     i138 = (HEAP32[i29 >> 2] | 0) + (i3 << 3) | 0;
     i139 = HEAP32[i138 + 4 >> 2] | 0;
     i12 = (HEAP32[i63 >> 2] | 0) + (i3 << 3) | 0;
     HEAP32[i12 >> 2] = HEAP32[i138 >> 2];
     HEAP32[i12 + 4 >> 2] = i139;
     i12 = 853;
    } else i12 = 853;
    break;
   }
  case 74:
  case 73:
   {
    i6 = HEAP32[i9 >> 2] & 65535;
    do if (i6 >>> 0 < (HEAPU16[i100 >> 1] | 0) >>> 0) {
     i7 = HEAP32[i9 + 4 >> 2] & 65535;
     if (i7 >>> 0 < (HEAPU16[i97 >> 1] | 0) >>> 0) {
      if (i10 & 1) {
       i139 = HEAP32[i108 >> 2] | 0;
       i2 = HEAP32[i107 >> 2] | 0;
       i2 = FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, (HEAP32[i139 + (i6 << 3) >> 2] | 0) - (HEAP32[i2 + (i7 << 3) >> 2] | 0) | 0, (HEAP32[i139 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i2 + (i7 << 3) + 4 >> 2] | 0) | 0) | 0;
       break;
      }
      if (HEAP16[i110 >> 1] | 0) if (HEAP16[i103 >> 1] | 0) {
       i2 = HEAP32[i114 >> 2] | 0;
       i3 = HEAP32[i113 >> 2] | 0;
       i4 = HEAP32[i115 >> 2] | 0;
       i5 = (HEAP32[i2 + (i6 << 3) >> 2] | 0) - (HEAP32[i3 + (i7 << 3) >> 2] | 0) | 0;
       if ((i4 | 0) == (HEAP32[i18 >> 2] | 0)) {
        i2 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, i5, (HEAP32[i2 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i3 + (i7 << 3) + 4 >> 2] | 0) | 0) | 0;
        i2 = _FT_MulFix(i2, HEAP32[i115 >> 2] | 0) | 0;
        break;
       } else {
        i139 = _FT_MulFix(i5, i4) | 0;
        i2 = _FT_MulFix((HEAP32[i2 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i3 + (i7 << 3) + 4 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0;
        i2 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, i139, i2) | 0;
        break;
       }
      }
      i139 = HEAP32[i104 >> 2] | 0;
      i2 = HEAP32[i105 >> 2] | 0;
      i2 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, (HEAP32[i139 + (i6 << 3) >> 2] | 0) - (HEAP32[i2 + (i7 << 3) >> 2] | 0) | 0, (HEAP32[i139 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i2 + (i7 << 3) + 4 >> 2] | 0) | 0) | 0;
     } else i12 = 507;
    } else i12 = 507; while (0);
    if ((i12 | 0) == 507) if (!(HEAP8[i89 >> 0] | 0)) i2 = 0; else {
     HEAP32[i119 >> 2] = 134;
     i2 = 0;
    }
    HEAP32[i9 >> 2] = i2;
    i12 = 853;
    break;
   }
  case 75:
   {
    i12 = FUNCTION_TABLE_ii[HEAP32[i127 >> 2] & 63](i136) | 0;
    HEAP32[i9 >> 2] = i12;
    i12 = 853;
    break;
   }
  case 76:
   {
    i12 = FUNCTION_TABLE_ii[HEAP32[i127 >> 2] & 63](i136) | 0;
    HEAP32[i9 >> 2] = i12;
    i12 = 853;
    break;
   }
  case 77:
   {
    HEAP8[i109 >> 0] = 1;
    i12 = 853;
    break;
   }
  case 78:
   {
    HEAP8[i109 >> 0] = 0;
    i12 = 853;
    break;
   }
  case 80:
   {
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) < (HEAP32[i9 + 4 >> 2] | 0) & 1;
    i12 = 853;
    break;
   }
  case 81:
   {
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) <= (HEAP32[i9 + 4 >> 2] | 0) & 1;
    i12 = 853;
    break;
   }
  case 82:
   {
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) > (HEAP32[i9 + 4 >> 2] | 0) & 1;
    i12 = 853;
    break;
   }
  case 83:
   {
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) >= (HEAP32[i9 + 4 >> 2] | 0) & 1;
    i12 = 853;
    break;
   }
  case 84:
   {
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) == (HEAP32[i9 + 4 >> 2] | 0) & 1;
    i12 = 853;
    break;
   }
  case 85:
   {
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) != (HEAP32[i9 + 4 >> 2] | 0) & 1;
    i12 = 853;
    break;
   }
  case 86:
   {
    i12 = ((FUNCTION_TABLE_iiii[HEAP32[i17 >> 2] & 127](i136, HEAP32[i9 >> 2] | 0, 0) | 0) & 127 | 0) == 64 & 1;
    HEAP32[i9 >> 2] = i12;
    i12 = 853;
    break;
   }
  case 87:
   {
    i12 = ((FUNCTION_TABLE_iiii[HEAP32[i17 >> 2] & 127](i136, HEAP32[i9 >> 2] | 0, 0) | 0) & 127 | 0) == 0 & 1;
    HEAP32[i9 >> 2] = i12;
    i12 = 853;
    break;
   }
  case 88:
   {
    if (!(HEAP32[i9 >> 2] | 0)) {
     i7 = HEAP32[i86 >> 2] | 0;
     i4 = 1;
     i2 = HEAP32[i83 >> 2] | 0;
     while (1) {
      L812 : do if ((i4 | 0) == 1) while (1) {
       i2 = i3 + i2 | 0;
       HEAP32[i83 >> 2] = i2;
       if ((i2 | 0) >= (i7 | 0)) {
        i1 = 131;
        i12 = 873;
        break L34;
       }
       i6 = HEAP8[i11 + i2 >> 0] | 0;
       HEAP8[i84 >> 0] = i6;
       i139 = i6 & 255;
       i3 = HEAP8[279272 + i139 >> 0] | 0;
       HEAP32[i85 >> 2] = i3;
       if ((i139 | 1 | 0) == 65) {
        i5 = i2 + 1 | 0;
        if ((i5 | 0) >= (i7 | 0)) {
         i1 = 131;
         i12 = 873;
         break L34;
        }
        i3 = 2 - (Math_imul(HEAPU8[i11 + i5 >> 0] | 0, i3) | 0) | 0;
        HEAP32[i85 >> 2] = i3;
       }
       if ((i3 + i2 | 0) > (i7 | 0)) {
        i1 = 131;
        i12 = 873;
        break L34;
       }
       switch (i6 << 24 >> 24) {
       case 27:
        {
         i12 = 853;
         break L51;
        }
       case 88:
        {
         i12 = 546;
         break L812;
        }
       case 89:
        {
         i12 = 547;
         break L812;
        }
       default:
        {}
       }
      } else L821 : while (1) while (1) {
       i2 = i3 + i2 | 0;
       HEAP32[i83 >> 2] = i2;
       if ((i2 | 0) >= (i7 | 0)) {
        i1 = 131;
        i12 = 873;
        break L34;
       }
       i6 = HEAP8[i11 + i2 >> 0] | 0;
       HEAP8[i84 >> 0] = i6;
       i139 = i6 & 255;
       i3 = HEAP8[279272 + i139 >> 0] | 0;
       HEAP32[i85 >> 2] = i3;
       if ((i139 | 1 | 0) == 65) {
        i5 = i2 + 1 | 0;
        if ((i5 | 0) >= (i7 | 0)) {
         i1 = 131;
         i12 = 873;
         break L34;
        }
        i3 = 2 - (Math_imul(HEAPU8[i11 + i5 >> 0] | 0, i3) | 0) | 0;
        HEAP32[i85 >> 2] = i3;
       }
       if ((i3 + i2 | 0) > (i7 | 0)) {
        i1 = 131;
        i12 = 873;
        break L34;
       }
       switch (i6 << 24 >> 24) {
       case 88:
        {
         i12 = 546;
         break L812;
        }
       case 89:
        {
         i12 = 547;
         break L812;
        }
       case 27:
        continue L821;
       default:
        {}
       }
      } while (0);
      if ((i12 | 0) == 546) {
       i4 = i4 + 1 | 0;
       continue;
      } else if ((i12 | 0) == 547) {
       i4 = i4 + -1 | 0;
       if (!i4) {
        i12 = 853;
        break;
       } else continue;
      }
     }
    } else i12 = 853;
    break;
   }
  case 90:
   {
    if (!(HEAP32[i9 >> 2] | 0)) i2 = 0; else i2 = (HEAP32[i9 + 4 >> 2] | 0) != 0;
    HEAP32[i9 >> 2] = i2 & 1;
    i12 = 853;
    break;
   }
  case 91:
   {
    if (!(HEAP32[i9 >> 2] | 0)) i2 = (HEAP32[i9 + 4 >> 2] | 0) != 0; else i2 = 1;
    HEAP32[i9 >> 2] = i2 & 1;
    i12 = 853;
    break;
   }
  case 92:
   {
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) == 0 & 1;
    i12 = 853;
    break;
   }
  case 93:
   {
    _Ins_DELTAP(i136, i9);
    i12 = 853;
    break;
   }
  case 94:
   {
    HEAP16[i67 >> 1] = HEAP32[i9 >> 2];
    i12 = 853;
    break;
   }
  case 95:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    if (i2 >>> 0 > 6) {
     i1 = 132;
     i12 = 873;
     break L34;
    }
    HEAP16[i68 >> 1] = i2;
    i12 = 853;
    break;
   }
  case 96:
   {
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i9 + 4 >> 2] | 0);
    i12 = 853;
    break;
   }
  case 97:
   {
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i9 + 4 >> 2] | 0);
    i12 = 853;
    break;
   }
  case 98:
   {
    i2 = HEAP32[i9 + 4 >> 2] | 0;
    if (!i2) {
     i1 = 133;
     i12 = 873;
     break L34;
    }
    i12 = _FT_MulDiv_No_Round(HEAP32[i9 >> 2] | 0, 64, i2) | 0;
    HEAP32[i9 >> 2] = i12;
    i12 = 853;
    break;
   }
  case 99:
   {
    i12 = _FT_MulDiv(HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, 64) | 0;
    HEAP32[i9 >> 2] = i12;
    i12 = 853;
    break;
   }
  case 100:
   {
    i12 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = (i12 | 0) < 0 ? 0 - i12 | 0 : i12;
    i12 = 853;
    break;
   }
  case 101:
   {
    HEAP32[i9 >> 2] = 0 - (HEAP32[i9 >> 2] | 0);
    i12 = 853;
    break;
   }
  case 102:
   {
    HEAP32[i9 >> 2] = HEAP32[i9 >> 2] & -64;
    i12 = 853;
    break;
   }
  case 103:
   {
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 63 & -64;
    i12 = 853;
    break;
   }
  case 107:
  case 106:
  case 105:
  case 104:
   {
    i12 = FUNCTION_TABLE_iiii[HEAP32[i17 >> 2] & 127](i136, HEAP32[i9 >> 2] | 0, HEAP32[i136 + 264 + (i8 + -104 << 2) >> 2] | 0) | 0;
    HEAP32[i9 >> 2] = i12;
    i12 = 853;
    break;
   }
  case 111:
  case 110:
  case 109:
  case 108:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    i2 = HEAP32[i136 + 264 + (i8 + -108 << 2) >> 2] | 0;
    if ((i3 | 0) > -1) {
     i2 = i2 + i3 | 0;
     i2 = (i2 | 0) > 0 ? i2 : 0;
    } else {
     i2 = i3 - i2 | 0;
     i2 = (i2 | 0) < 0 ? i2 : 0;
    }
    HEAP32[i9 >> 2] = i2;
    i12 = 853;
    break;
   }
  case 112:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i98 >> 2] | 0) >>> 0) {
     i12 = _FT_MulFix(HEAP32[i9 + 4 >> 2] | 0, HEAP32[i40 >> 2] | 0) | 0;
     HEAP32[(HEAP32[i69 >> 2] | 0) + (i2 << 2) >> 2] = i12;
     i12 = 853;
     break L51;
    } else if (!(HEAP8[i89 >> 0] | 0)) {
     i12 = 853;
     break L51;
    } else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
   }
  case 114:
  case 113:
   {
    _Ins_DELTAP(i136, i9);
    i12 = 853;
    break;
   }
  case 117:
  case 116:
  case 115:
   {
    i7 = FUNCTION_TABLE_ii[HEAP32[i127 >> 2] & 63](i136) | 0;
    i6 = HEAP32[i9 >> 2] | 0;
    L868 : do if (i6 | 0) {
     i5 = 1;
     while (1) {
      i2 = HEAP32[i88 >> 2] | 0;
      if ((i2 | 0) < 2) break;
      i4 = i2 + -2 | 0;
      HEAP32[i88 >> 2] = i4;
      i139 = HEAP32[i90 >> 2] | 0;
      i3 = HEAP32[i139 + (i2 + -1 << 2) >> 2] | 0;
      i4 = HEAP32[i139 + (i4 << 2) >> 2] | 0;
      if (i3 >>> 0 < (HEAP32[i98 >> 2] | 0) >>> 0) {
       i2 = i4 >>> 4 & 15;
       switch (HEAP8[i84 >> 0] | 0) {
       case 117:
        {
         i2 = i2 | 32;
         break;
        }
       case 116:
        {
         i2 = i2 | 16;
         break;
        }
       default:
        {}
       }
       if ((i7 | 0) == ((HEAPU16[i67 >> 1] | 0) + i2 | 0)) {
        i138 = i4 & 15;
        i139 = i138 + -8 | 0;
        FUNCTION_TABLE_viii[HEAP32[i130 >> 2] & 31](i136, i3, ((i139 | 0) > -1 ? i138 + -7 | 0 : i139) << 6 - (HEAPU16[i68 >> 1] | 0));
       }
      } else if (HEAP8[i89 >> 0] | 0) {
       i1 = 134;
       i12 = 873;
       break L34;
      }
      i5 = i5 + 1 | 0;
      if (i5 >>> 0 > i6 >>> 0) break L868;
     }
     if (HEAP8[i89 >> 0] | 0) HEAP32[i119 >> 2] = 129;
     HEAP32[i88 >> 2] = 0;
    } while (0);
    HEAP32[i91 >> 2] = HEAP32[i88 >> 2];
    i12 = 853;
    break;
   }
  case 118:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    switch (i2 >>> 6 & 3) {
    case 0:
     {
      i3 = 8192;
      break;
     }
    case 1:
     {
      i3 = 16384;
      break;
     }
    case 2:
     {
      i3 = 32768;
      break;
     }
    case 3:
     {
      i3 = 16384;
      break;
     }
    default:
     {
      i12 = 595;
      break L34;
     }
    }
    HEAP32[i70 >> 2] = i3;
    switch (i2 >>> 4 & 3) {
    case 0:
     {
      i4 = 0;
      break;
     }
    case 1:
     {
      i4 = i3 >>> 2;
      break;
     }
    case 2:
     {
      i4 = i3 >>> 1;
      break;
     }
    case 3:
     {
      i4 = (i3 * 3 | 0) >>> 2;
      break;
     }
    default:
     {
      i12 = 600;
      break L34;
     }
    }
    HEAP32[i71 >> 2] = i4;
    i2 = i2 & 15;
    if (!i2) i2 = i3 + -1 | 0; else i2 = (Math_imul(i3, i2 + -4 | 0) | 0) / 8 | 0;
    HEAP32[i70 >> 2] = i3 >>> 8;
    HEAP32[i71 >> 2] = i4 >>> 8;
    HEAP32[i72 >> 2] = i2 >> 8;
    HEAP32[i118 >> 2] = 6;
    HEAP32[i17 >> 2] = 72;
    i12 = 853;
    break;
   }
  case 119:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    switch (i2 >>> 6 & 3) {
    case 0:
     {
      i3 = 5792;
      break;
     }
    case 1:
     {
      i3 = 11585;
      break;
     }
    case 2:
     {
      i3 = 23170;
      break;
     }
    case 3:
     {
      i3 = 11585;
      break;
     }
    default:
     {
      i12 = 609;
      break L34;
     }
    }
    HEAP32[i70 >> 2] = i3;
    switch (i2 >>> 4 & 3) {
    case 0:
     {
      i4 = 0;
      break;
     }
    case 1:
     {
      i4 = i3 >>> 2;
      break;
     }
    case 2:
     {
      i4 = i3 >>> 1;
      break;
     }
    case 3:
     {
      i4 = (i3 * 3 | 0) >>> 2;
      break;
     }
    default:
     {
      i12 = 614;
      break L34;
     }
    }
    HEAP32[i71 >> 2] = i4;
    i2 = i2 & 15;
    if (!i2) i2 = i3 + -1 | 0; else i2 = (Math_imul(i3, i2 + -4 | 0) | 0) / 8 | 0;
    HEAP32[i70 >> 2] = i3 >>> 8;
    HEAP32[i71 >> 2] = i4 >>> 8;
    HEAP32[i72 >> 2] = i2 >> 8;
    HEAP32[i118 >> 2] = 7;
    HEAP32[i17 >> 2] = 73;
    i12 = 853;
    break;
   }
  case 120:
   {
    if (!(HEAP32[i9 + 4 >> 2] | 0)) i12 = 853; else {
     i3 = HEAP32[i9 >> 2] | 0;
     if (!(i3 | i2)) HEAP32[i119 >> 2] = 132;
     i2 = (HEAP32[i83 >> 2] | 0) + i3 | 0;
     HEAP32[i83 >> 2] = i2;
     if ((i2 | 0) < 0) i12 = 625; else {
      i3 = HEAP32[i21 >> 2] | 0;
      if ((i3 | 0) > 0) if ((i2 | 0) > (HEAP32[(HEAP32[(HEAP32[i23 >> 2] | 0) + (i3 + -1 << 4) + 12 >> 2] | 0) + 8 >> 2] | 0)) i12 = 625;
     }
     if ((i12 | 0) == 625) HEAP32[i119 >> 2] = 132;
     HEAP8[i93 >> 0] = 0;
     i12 = 853;
    }
    break;
   }
  case 121:
   {
    if (!(HEAP32[i9 + 4 >> 2] | 0)) {
     i3 = HEAP32[i9 >> 2] | 0;
     if (!(i3 | i2)) HEAP32[i119 >> 2] = 132;
     i2 = (HEAP32[i83 >> 2] | 0) + i3 | 0;
     HEAP32[i83 >> 2] = i2;
     if ((i2 | 0) < 0) i12 = 633; else {
      i3 = HEAP32[i21 >> 2] | 0;
      if ((i3 | 0) > 0) if ((i2 | 0) > (HEAP32[(HEAP32[(HEAP32[i23 >> 2] | 0) + (i3 + -1 << 4) + 12 >> 2] | 0) + 8 >> 2] | 0)) i12 = 633;
     }
     if ((i12 | 0) == 633) HEAP32[i119 >> 2] = 132;
     HEAP8[i93 >> 0] = 0;
     i12 = 853;
    } else i12 = 853;
    break;
   }
  case 122:
   {
    HEAP32[i118 >> 2] = 5;
    HEAP32[i17 >> 2] = 74;
    i12 = 853;
    break;
   }
  case 123:
   {
    i2 = HEAP32[i19 >> 2] | 0;
    i4 = HEAP32[i20 >> 2] | 0;
    i5 = i2 + (i4 * 24 | 0) | 0;
    if ((i4 | 0) > 0) {
     i3 = i2;
     while (1) {
      if ((HEAP32[i3 + 12 >> 2] & 255) << 24 >> 24 == 123) if (HEAP8[i3 + 16 >> 0] | 0) break;
      i3 = i3 + 24 | 0;
      if (i3 >>> 0 >= i5 >>> 0) {
       i3 = i4;
       i12 = 856;
       break L51;
      }
     }
     i2 = HEAP32[i21 >> 2] | 0;
     if ((i2 | 0) >= (HEAP32[i22 >> 2] | 0)) {
      i1 = 130;
      i12 = 873;
      break L34;
     }
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP32[i21 >> 2] = i2 + 1;
     HEAP32[i5 + (i2 << 4) >> 2] = HEAP32[i116 >> 2];
     HEAP32[i5 + (i2 << 4) + 4 >> 2] = (HEAP32[i83 >> 2] | 0) + 1;
     HEAP32[i5 + (i2 << 4) + 8 >> 2] = 1;
     HEAP32[i5 + (i2 << 4) + 12 >> 2] = i3;
     i5 = HEAP32[i3 >> 2] | 0;
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     i2 = i5 + -1 | 0;
     do if (i2 >>> 0 > 2) HEAP32[i119 >> 2] = 132; else {
      i4 = HEAP32[i136 + 444 + (i2 << 3) >> 2] | 0;
      if (!i4) {
       HEAP32[i119 >> 2] = 138;
       break;
      }
      i2 = HEAP32[i136 + 444 + (i2 << 3) + 4 >> 2] | 0;
      if ((i2 | 0) < (i3 | 0)) {
       HEAP32[i119 >> 2] = 131;
       break;
      } else {
       HEAP32[i82 >> 2] = i4;
       HEAP32[i86 >> 2] = i2;
       HEAP32[i83 >> 2] = i3;
       HEAP32[i116 >> 2] = i5;
       break;
      }
     } while (0);
     HEAP8[i93 >> 0] = 0;
     i12 = 853;
    } else {
     i3 = i4;
     i12 = 856;
    }
    break;
   }
  case 124:
   {
    HEAP32[i118 >> 2] = 4;
    HEAP32[i17 >> 2] = 75;
    i12 = 853;
    break;
   }
  case 125:
   {
    HEAP32[i118 >> 2] = 3;
    HEAP32[i17 >> 2] = 76;
    i12 = 853;
    break;
   }
  case -128:
   {
    i3 = HEAP32[i39 >> 2] | 0;
    L960 : do if ((HEAP32[i87 >> 2] | 0) < (i3 | 0)) {
     if (HEAP8[i89 >> 0] | 0) HEAP32[i119 >> 2] = 129;
    } else if ((i3 | 0) > 0) while (1) {
     i2 = i2 + -1 | 0;
     HEAP32[i88 >> 2] = i2;
     i2 = HEAP32[i4 + (i2 << 2) >> 2] & 65535;
     if (i2 >>> 0 < (HEAPU16[i53 >> 1] | 0) >>> 0) {
      i3 = (HEAP32[i57 >> 2] | 0) + i2 | 0;
      HEAP8[i3 >> 0] = HEAP8[i3 >> 0] ^ 1;
      i3 = HEAP32[i39 >> 2] | 0;
     } else if (HEAP8[i89 >> 0] | 0) {
      i1 = 134;
      i12 = 873;
      break L34;
     }
     i5 = i3 + -1 | 0;
     HEAP32[i39 >> 2] = i5;
     i2 = HEAP32[i88 >> 2] | 0;
     if ((i3 | 0) <= 1) break L960;
     i4 = HEAP32[i90 >> 2] | 0;
     i3 = i5;
    } while (0);
    HEAP32[i39 >> 2] = 1;
    HEAP32[i91 >> 2] = i2;
    i12 = 853;
    break;
   }
  case -127:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    i4 = HEAP32[i9 + 4 >> 2] & 65535;
    i139 = HEAPU16[i53 >> 1] | 0;
    i2 = i3 & 65535;
    if (!(i4 >>> 0 < i139 >>> 0 & i2 >>> 0 < i139 >>> 0)) if (!(HEAP8[i89 >> 0] | 0)) {
     i12 = 853;
     break L51;
    } else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    if (i2 >>> 0 > i4 >>> 0) i12 = 853; else {
     i3 = i3 & 65535;
     do {
      i139 = (HEAP32[i57 >> 2] | 0) + i2 | 0;
      HEAP8[i139 >> 0] = HEAP8[i139 >> 0] | 1;
      i3 = i3 + 1 << 16 >> 16;
      i2 = i3 & 65535;
     } while (i2 >>> 0 <= i4 >>> 0);
     i12 = 853;
    }
    break;
   }
  case -126:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    i4 = HEAP32[i9 + 4 >> 2] & 65535;
    i139 = HEAPU16[i53 >> 1] | 0;
    i2 = i3 & 65535;
    if (!(i4 >>> 0 < i139 >>> 0 & i2 >>> 0 < i139 >>> 0)) if (!(HEAP8[i89 >> 0] | 0)) {
     i12 = 853;
     break L51;
    } else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    if (i2 >>> 0 > i4 >>> 0) i12 = 853; else {
     i3 = i3 & 65535;
     do {
      i139 = (HEAP32[i57 >> 2] | 0) + i2 | 0;
      HEAP8[i139 >> 0] = HEAP8[i139 >> 0] & -2;
      i3 = i3 + 1 << 16 >> 16;
      i2 = i3 & 65535;
     } while (i2 >>> 0 <= i4 >>> 0);
     i12 = 853;
    }
    break;
   }
  case -124:
  case -125:
   {
    i2 = HEAP32[i19 >> 2] | 0;
    i3 = HEAP32[i20 >> 2] | 0;
    i5 = i2 + (i3 * 24 | 0) | 0;
    if ((i3 | 0) > 0) {
     i4 = i2;
     while (1) {
      if (i10 << 24 >> 24 == (HEAP32[i4 + 12 >> 2] & 255) << 24 >> 24) if (HEAP8[i4 + 16 >> 0] | 0) break;
      i4 = i4 + 24 | 0;
      if (i4 >>> 0 >= i5 >>> 0) {
       i12 = 856;
       break L51;
      }
     }
     i2 = HEAP32[i21 >> 2] | 0;
     if ((i2 | 0) >= (HEAP32[i22 >> 2] | 0)) {
      i1 = 130;
      i12 = 873;
      break L34;
     }
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP32[i21 >> 2] = i2 + 1;
     HEAP32[i5 + (i2 << 4) >> 2] = HEAP32[i116 >> 2];
     HEAP32[i5 + (i2 << 4) + 4 >> 2] = (HEAP32[i83 >> 2] | 0) + 1;
     HEAP32[i5 + (i2 << 4) + 8 >> 2] = 1;
     HEAP32[i5 + (i2 << 4) + 12 >> 2] = i4;
     i5 = HEAP32[i4 >> 2] | 0;
     i3 = HEAP32[i4 + 4 >> 2] | 0;
     i2 = i5 + -1 | 0;
     do if (i2 >>> 0 > 2) HEAP32[i119 >> 2] = 132; else {
      i4 = HEAP32[i136 + 444 + (i2 << 3) >> 2] | 0;
      if (!i4) {
       HEAP32[i119 >> 2] = 138;
       break;
      }
      i2 = HEAP32[i136 + 444 + (i2 << 3) + 4 >> 2] | 0;
      if ((i2 | 0) < (i3 | 0)) {
       HEAP32[i119 >> 2] = 131;
       break;
      } else {
       HEAP32[i82 >> 2] = i4;
       HEAP32[i86 >> 2] = i2;
       HEAP32[i83 >> 2] = i3;
       HEAP32[i116 >> 2] = i5;
       break;
      }
     } while (0);
     HEAP8[i93 >> 0] = 0;
     i12 = 853;
    } else i12 = 856;
    break;
   }
  case -123:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    i3 = i2 & 255;
    switch ((i2 & 255) << 24 >> 24) {
    case -1:
     {
      HEAP8[i74 >> 0] = 1;
      i12 = 853;
      break L51;
     }
    case 0:
     {
      HEAP8[i74 >> 0] = 0;
      i12 = 853;
      break L51;
     }
    default:
     {
      if (i2 & 256 | 0) if ((HEAPU16[i76 >> 1] | 0) >>> 0 <= i3 >>> 0) HEAP8[i74 >> 0] = 1;
      if (i2 & 512 | 0) if (HEAP8[i75 >> 0] | 0) HEAP8[i74 >> 0] = 1;
      if (i2 & 1024 | 0) if (HEAP8[i73 >> 0] | 0) HEAP8[i74 >> 0] = 1;
      if (i2 & 2048 | 0) if ((HEAPU16[i76 >> 1] | 0) >>> 0 > i3 >>> 0) HEAP8[i74 >> 0] = 0;
      if (i2 & 4096 | 0) if (HEAP8[i75 >> 0] | 0) HEAP8[i74 >> 0] = 0;
      if (!(i2 & 8192)) {
       i12 = 853;
       break L51;
      }
      if (!(HEAP8[i73 >> 0] | 0)) {
       i12 = 853;
       break L51;
      }
      HEAP8[i74 >> 0] = 0;
      i12 = 853;
      break L51;
     }
    }
   }
  case -121:
  case -122:
   {
    i6 = HEAP32[i9 >> 2] & 65535;
    if (i6 >>> 0 < (HEAPU16[i97 >> 1] | 0) >>> 0) {
     i5 = HEAP32[i9 + 4 >> 2] & 65535;
     if (i5 >>> 0 < (HEAPU16[i28 >> 1] | 0) >>> 0) {
      i4 = HEAP32[i105 >> 2] | 0;
      i3 = HEAP32[i63 >> 2] | 0;
      i139 = (HEAP32[i4 + (i6 << 3) >> 2] | 0) - (HEAP32[i3 + (i5 << 3) >> 2] | 0) | 0;
      i3 = (HEAP32[i4 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i3 + (i5 << 3) + 4 >> 2] | 0) | 0;
      i4 = (i3 | i139 | 0) == 0;
      i139 = i4 ? 16384 : i139;
      i4 = (i10 & 1) == 0 | i4;
      i2 = i4 ? i3 : i139;
      i3 = i4 ? i139 : 0 - i3 | 0;
      if ((((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 16384) if ((((i2 | 0) < 0 ? 0 - i2 | 0 : i2) | 0) < 16384) {
       if (i2 | i3 | 0) {
        i3 = i3 << 14;
        i2 = i2 << 14;
        i12 = 712;
       }
      } else i12 = 712; else i12 = 712;
      if ((i12 | 0) == 712) {
       i12 = 0;
       i139 = (_FT_Hypot(i3, i2) | 0) << 2;
       i138 = (_FT_DivFix(i3, i139) | 0) & 65535;
       HEAP16[i122 >> 1] = i138;
       i139 = (_FT_DivFix(i2, i139) | 0) & 65535;
       HEAP16[i26 >> 1] = i139;
      }
      i138 = HEAP32[i107 >> 2] | 0;
      i3 = HEAP32[i29 >> 2] | 0;
      i139 = (HEAP32[i138 + (i6 << 3) >> 2] | 0) - (HEAP32[i3 + (i5 << 3) >> 2] | 0) | 0;
      i3 = (HEAP32[i138 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i3 + (i5 << 3) + 4 >> 2] | 0) | 0;
      i138 = (i3 | i139 | 0) == 0;
      i139 = i138 ? 16384 : i139;
      i138 = i4 | i138;
      i2 = i138 ? i3 : i139;
      i3 = i138 ? i139 : 0 - i3 | 0;
      if ((((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 16384) if ((((i2 | 0) < 0 ? 0 - i2 | 0 : i2) | 0) < 16384) {
       if (i2 | i3 | 0) {
        i3 = i3 << 14;
        i2 = i2 << 14;
        i12 = 717;
       }
      } else i12 = 717; else i12 = 717;
      if ((i12 | 0) == 717) {
       i139 = (_FT_Hypot(i3, i2) | 0) << 2;
       i138 = (_FT_DivFix(i3, i139) | 0) & 65535;
       HEAP16[i24 >> 1] = i138;
       i139 = (_FT_DivFix(i2, i139) | 0) & 65535;
       HEAP16[i25 >> 1] = i139;
      }
      i2 = HEAP16[i131 >> 1] | 0;
      i4 = i2 << 16 >> 16 == 16384;
      if (i4) {
       i2 = HEAP16[i24 >> 1] | 0;
       i3 = i2 << 16 >> 16;
      } else {
       i15 = HEAP16[i106 >> 1] | 0;
       i138 = HEAP16[i25 >> 1] | 0;
       i139 = HEAP16[i24 >> 1] | 0;
       i3 = (Math_imul(i139 << 16 >> 16, i2 << 16 >> 16) | 0) + (Math_imul(i138, i15 << 16 >> 16) | 0) >> 14;
       i3 = i15 << 16 >> 16 == 16384 ? i138 : i3;
       i2 = i139;
      }
      HEAP32[i125 >> 2] = i3;
      if (i2 << 16 >> 16 == 16384) i2 = 68; else i2 = (HEAP16[i25 >> 1] | 0) == 16384 ? 66 : 65;
      HEAP32[i124 >> 2] = i2;
      if ((HEAP16[i122 >> 1] | 0) == 16384) i2 = 68; else i2 = (HEAP16[i26 >> 1] | 0) == 16384 ? 66 : 67;
      HEAP32[i123 >> 2] = i2;
      HEAP32[i120 >> 2] = 18;
      HEAP32[i121 >> 2] = 19;
      do if ((i3 | 0) == 16384) {
       if (i4) {
        HEAP32[i120 >> 2] = 20;
        HEAP32[i121 >> 2] = 21;
        break;
       }
       if ((HEAP16[i106 >> 1] | 0) != 16384) break;
       HEAP32[i120 >> 2] = 22;
       HEAP32[i121 >> 2] = 23;
      } while (0);
      if ((((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 1024) HEAP32[i125 >> 2] = 16384;
      HEAP32[i135 >> 2] = 0;
      i12 = 853;
      break L51;
     }
    }
    if (!(HEAP8[i89 >> 0] | 0)) i12 = 853; else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    break;
   }
  case -120:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    i2 = i3 & 1 | 0 ? 35 : 0;
    if (i3 & 2) i2 = (HEAP8[i75 >> 0] | 0) == 0 ? i2 : i2 | 128;
    if (i3 & 4) i2 = (HEAP8[i73 >> 0] | 0) == 0 ? i2 : i2 | 256;
    if (i3 & 32) i2 = (HEAP8[i77 >> 0] | 0) == 0 ? i2 : i2 | 4096;
    HEAP32[i9 >> 2] = i2;
    i12 = 853;
    break;
   }
  case -119:
   {
    i2 = HEAP32[i19 >> 2] | 0;
    i6 = HEAP32[i20 >> 2] | 0;
    i7 = i2 + (i6 * 24 | 0) | 0;
    L1081 : do if ((i6 | 0) > 0) {
     i4 = HEAP32[i9 >> 2] | 0;
     while (1) {
      if ((HEAP32[i2 + 12 >> 2] | 0) == (i4 | 0)) {
       i5 = i2;
       break L1081;
      }
      i2 = i2 + 24 | 0;
      if (i2 >>> 0 >= i7 >>> 0) {
       i5 = i2;
       break;
      }
     }
    } else i5 = i2; while (0);
    if ((i5 | 0) == (i7 | 0)) if (i6 >>> 0 < (HEAP32[i78 >> 2] | 0) >>> 0) {
     HEAP32[i20 >> 2] = i6 + 1;
     i12 = 747;
    } else i2 = 141; else i12 = 747;
    L1090 : do if ((i12 | 0) == 747) {
     i2 = HEAP32[i9 >> 2] | 0;
     if (i2 >>> 0 > 255) i2 = 141; else {
      HEAP32[i5 + 12 >> 2] = i2 & 255;
      i4 = HEAP32[i83 >> 2] | 0;
      HEAP32[i5 + 4 >> 2] = i4 + 1;
      HEAP32[i5 >> 2] = HEAP32[i116 >> 2];
      HEAP8[i5 + 16 >> 0] = 1;
      i2 = HEAP32[i9 >> 2] | 0;
      if (i2 >>> 0 > (HEAP32[i79 >> 2] | 0) >>> 0) HEAP32[i79 >> 2] = i2 & 255;
      i6 = HEAP32[i86 >> 2] | 0;
      i2 = i3;
      while (1) {
       i4 = i2 + i4 | 0;
       HEAP32[i83 >> 2] = i4;
       if ((i4 | 0) >= (i6 | 0)) {
        i2 = 131;
        break L1090;
       }
       i5 = HEAP8[i11 + i4 >> 0] | 0;
       HEAP8[i84 >> 0] = i5;
       i139 = i5 & 255;
       i2 = HEAP8[279272 + i139 >> 0] | 0;
       HEAP32[i85 >> 2] = i2;
       if ((i139 | 1 | 0) == 65) {
        i3 = i4 + 1 | 0;
        if ((i3 | 0) >= (i6 | 0)) {
         i2 = 131;
         break L1090;
        }
        i2 = 2 - (Math_imul(HEAPU8[i11 + i3 >> 0] | 0, i2) | 0) | 0;
        HEAP32[i85 >> 2] = i2;
       }
       if ((i2 + i4 | 0) > (i6 | 0)) {
        i2 = 131;
        break L1090;
       }
       switch (i5 << 24 >> 24) {
       case 45:
        {
         i12 = 853;
         break L51;
        }
       case 44:
       case -119:
        {
         i2 = 137;
         break L1090;
        }
       default:
        {}
       }
      }
     }
    } while (0);
    HEAP32[i119 >> 2] = i2;
    i12 = 854;
    break;
   }
  case -118:
   {
    i15 = i9 + 8 | 0;
    i138 = HEAP32[i15 >> 2] | 0;
    i139 = i9 + 4 | 0;
    i12 = HEAP32[i139 >> 2] | 0;
    HEAP32[i15 >> 2] = HEAP32[i9 >> 2];
    HEAP32[i139 >> 2] = i138;
    HEAP32[i9 >> 2] = i12;
    i12 = 853;
    break;
   }
  case -117:
   {
    i2 = HEAP32[i9 + 4 >> 2] | 0;
    if ((i2 | 0) > (HEAP32[i9 >> 2] | 0)) {
     HEAP32[i9 >> 2] = i2;
     i12 = 853;
    } else i12 = 853;
    break;
   }
  case -116:
   {
    i2 = HEAP32[i9 + 4 >> 2] | 0;
    if ((i2 | 0) < (HEAP32[i9 >> 2] | 0)) {
     HEAP32[i9 >> 2] = i2;
     i12 = 853;
    } else i12 = 853;
    break;
   }
  case -115:
   {
    i2 = HEAP32[i9 >> 2] | 0;
    if ((i2 | 0) > -1) {
     HEAP32[i80 >> 2] = i2;
     i12 = 853;
    } else i12 = 853;
    break;
   }
  case -114:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    i2 = (HEAP32[i9 + 4 >> 2] | 0) + -1 | 0;
    if (i2 >>> 0 > 2) if (!(HEAP8[i89 >> 0] | 0)) {
     i12 = 853;
     break L51;
    } else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
    i2 = 1 << i2;
    if ((i3 | 0) == 0 | (i2 | 0) == (i3 | 0)) {
     HEAP8[i81 >> 0] = HEAPU8[i81 >> 0] & (i2 ^ 255) | i3;
     i12 = 853;
     break L51;
    } else if (!(HEAP8[i89 >> 0] | 0)) {
     i12 = 853;
     break L51;
    } else {
     i1 = 134;
     i12 = 873;
     break L34;
    }
   }
  case -113:
   {
    i2 = HEAP32[i19 >> 2] | 0;
    i4 = HEAP32[i20 >> 2] | 0;
    i5 = i2 + (i4 * 24 | 0) | 0;
    if ((i4 | 0) > 0) {
     i3 = i2;
     while (1) {
      if ((HEAP32[i3 + 12 >> 2] & 255) << 24 >> 24 == -113) if (HEAP8[i3 + 16 >> 0] | 0) break;
      i3 = i3 + 24 | 0;
      if (i3 >>> 0 >= i5 >>> 0) {
       i3 = i4;
       i12 = 856;
       break L51;
      }
     }
     i2 = HEAP32[i21 >> 2] | 0;
     if ((i2 | 0) >= (HEAP32[i22 >> 2] | 0)) {
      i1 = 130;
      i12 = 873;
      break L34;
     }
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP32[i21 >> 2] = i2 + 1;
     HEAP32[i5 + (i2 << 4) >> 2] = HEAP32[i116 >> 2];
     HEAP32[i5 + (i2 << 4) + 4 >> 2] = (HEAP32[i83 >> 2] | 0) + 1;
     HEAP32[i5 + (i2 << 4) + 8 >> 2] = 1;
     HEAP32[i5 + (i2 << 4) + 12 >> 2] = i3;
     i5 = HEAP32[i3 >> 2] | 0;
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     i2 = i5 + -1 | 0;
     do if (i2 >>> 0 > 2) HEAP32[i119 >> 2] = 132; else {
      i4 = HEAP32[i136 + 444 + (i2 << 3) >> 2] | 0;
      if (!i4) {
       HEAP32[i119 >> 2] = 138;
       break;
      }
      i2 = HEAP32[i136 + 444 + (i2 << 3) + 4 >> 2] | 0;
      if ((i2 | 0) < (i3 | 0)) {
       HEAP32[i119 >> 2] = 131;
       break;
      } else {
       HEAP32[i82 >> 2] = i4;
       HEAP32[i86 >> 2] = i2;
       HEAP32[i83 >> 2] = i3;
       HEAP32[i116 >> 2] = i5;
       break;
      }
     } while (0);
     HEAP8[i93 >> 0] = 0;
     i12 = 853;
    } else {
     i3 = i4;
     i12 = 856;
    }
    break;
   }
  default:
   {
    if ((i10 & 255) > 223) {
     i4 = HEAP32[i9 >> 2] | 0;
     i2 = HEAP32[i9 + 4 >> 2] | 0;
     i8 = HEAP32[i94 >> 2] | 0;
     i7 = HEAP32[i95 >> 2] | 0;
     i9 = i4 & 65535;
     i3 = i2 + 1 | 0;
     i4 = i4 & 65535;
     if (i4 >>> 0 < (HEAPU16[i97 >> 1] | 0) >>> 0) if (i3 >>> 0 < ((HEAP32[i98 >> 2] | 0) + 1 | 0) >>> 0) if ((HEAPU16[i99 >> 1] | 0) < (HEAPU16[i100 >> 1] | 0)) {
      if (!i3) i2 = 0; else i2 = FUNCTION_TABLE_iii[HEAP32[i128 >> 2] & 255](i136, i2) | 0;
      i139 = HEAP32[i101 >> 2] | 0;
      i138 = i2 - i139 | 0;
      i2 = (((i138 | 0) < 0 ? 0 - i138 | 0 : i138) | 0) < (HEAP32[i102 >> 2] | 0) ? ((i2 | 0) > -1 ? i139 : 0 - i139 | 0) : i2;
      if (!(HEAP16[i103 >> 1] | 0)) {
       i139 = HEAP32[i104 >> 2] | 0;
       i138 = HEAPU16[i99 >> 1] | 0;
       i6 = HEAP16[i131 >> 1] | 0;
       i13 = i6 << 16 >> 16;
       i3 = 0 - i2 | 0;
       i14 = (i2 | 0) < 0 ? i3 : i2;
       i6 = i6 << 16 >> 16 < 0 ? 0 - i13 | 0 : i13;
       i11 = i14 >>> 16;
       i14 = i14 & 65535;
       i15 = Math_imul(i6, i11) | 0;
       i10 = i15 << 16 | 8192;
       i6 = i10 + (Math_imul(i6, i14) | 0) | 0;
       i6 = (i6 >>> 0 < i10 >>> 0 & 1) + (i15 >>> 16) << 18 | i6 >>> 14;
       i15 = HEAP32[i105 >> 2] | 0;
       HEAP32[i15 + (i4 << 3) >> 2] = ((i13 ^ i2 | 0) > -1 ? i6 : 0 - i6 | 0) + (HEAP32[i139 + (i138 << 3) >> 2] | 0);
       i6 = HEAP16[i106 >> 1] | 0;
       i13 = i6 << 16 >> 16;
       i6 = i6 << 16 >> 16 < 0 ? 0 - i13 | 0 : i13;
       i11 = Math_imul(i6, i11) | 0;
       i10 = i11 << 16 | 8192;
       i14 = i10 + (Math_imul(i6, i14) | 0) | 0;
       i14 = (i14 >>> 0 < i10 >>> 0 & 1) + (i11 >>> 16) << 18 | i14 >>> 14;
       HEAP32[i15 + (i4 << 3) + 4 >> 2] = ((i13 ^ i2 | 0) > -1 ? i14 : 0 - i14 | 0) + (HEAP32[i139 + (i138 << 3) + 4 >> 2] | 0);
       i15 = i15 + (i4 << 3) | 0;
       i138 = HEAP32[i15 + 4 >> 2] | 0;
       i139 = (HEAP32[i107 >> 2] | 0) + (i4 << 3) | 0;
       HEAP32[i139 >> 2] = HEAP32[i15 >> 2];
       HEAP32[i139 + 4 >> 2] = i138;
      } else i3 = 0 - i2 | 0;
      i139 = HEAP32[i105 >> 2] | 0;
      i138 = HEAP32[i104 >> 2] | 0;
      i5 = HEAPU16[i99 >> 1] | 0;
      i5 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, (HEAP32[i139 + (i4 << 3) >> 2] | 0) - (HEAP32[i138 + (i5 << 3) >> 2] | 0) | 0, (HEAP32[i139 + (i4 << 3) + 4 >> 2] | 0) - (HEAP32[i138 + (i5 << 3) + 4 >> 2] | 0) | 0) | 0;
      i138 = HEAP32[i107 >> 2] | 0;
      i139 = HEAP32[i108 >> 2] | 0;
      i6 = HEAPU16[i99 >> 1] | 0;
      i6 = FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, (HEAP32[i138 + (i4 << 3) >> 2] | 0) - (HEAP32[i139 + (i6 << 3) >> 2] | 0) | 0, (HEAP32[i138 + (i4 << 3) + 4 >> 2] | 0) - (HEAP32[i139 + (i6 << 3) + 4 >> 2] | 0) | 0) | 0;
      i4 = (i5 ^ i2 | 0) < 0 & (HEAP8[i109 >> 0] | 0) != 0 ? i3 : i2;
      i3 = HEAP8[i84 >> 0] | 0;
      i2 = i3 & 255;
      do if (!(i2 & 4)) {
       i2 = HEAP32[i136 + 264 + ((i2 & 3) << 2) >> 2] | 0;
       if ((i4 | 0) > -1) {
        i2 = i2 + i4 | 0;
        i2 = (i2 | 0) > 0 ? i2 : 0;
        break;
       } else {
        i2 = i4 - i2 | 0;
        i2 = (i2 | 0) < 0 ? i2 : 0;
        break;
       }
      } else {
       i3 = i4 - i5 | 0;
       i2 = FUNCTION_TABLE_iiii[HEAP32[i17 >> 2] & 127](i136, ((((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) > (i7 | 0) ? (HEAP16[i110 >> 1] | 0) == (HEAP16[i103 >> 1] | 0) : 0) ? i5 : i4, HEAP32[i136 + 264 + ((i2 & 3) << 2) >> 2] | 0) | 0;
       i3 = HEAP8[i84 >> 0] | 0;
      } while (0);
      do if (i3 & 8) if ((i5 | 0) > -1) {
       i2 = (i2 | 0) < (i8 | 0) ? i8 : i2;
       break;
      } else {
       i139 = 0 - i8 | 0;
       i2 = (i2 | 0) > (i139 | 0) ? i139 : i2;
       break;
      } while (0);
      FUNCTION_TABLE_viiii[HEAP32[i120 >> 2] & 31](i136, i96, i9, i2 - i6 | 0);
      i2 = HEAP8[i84 >> 0] | 0;
     } else i12 = 787; else i12 = 787; else i12 = 787;
     if ((i12 | 0) == 787) if (!(HEAP8[i89 >> 0] | 0)) i2 = i10; else {
      HEAP32[i119 >> 2] = 134;
      i2 = i10;
     }
     HEAP16[i111 >> 1] = HEAP16[i99 >> 1] | 0;
     if (i2 & 16) HEAP16[i99 >> 1] = i9;
     HEAP16[i112 >> 1] = i9;
     i12 = 853;
     break L51;
    }
    if ((i10 & 255) > 191) {
     i8 = HEAP32[i9 >> 2] | 0;
     i7 = HEAP32[i94 >> 2] | 0;
     i9 = i8 & 65535;
     i8 = i8 & 65535;
     if (i8 >>> 0 < (HEAPU16[i97 >> 1] | 0) >>> 0) {
      i139 = HEAP16[i99 >> 1] | 0;
      i6 = i139 & 65535;
      if ((i139 & 65535) < (HEAPU16[i100 >> 1] | 0)) {
       do if (!(HEAP16[i110 >> 1] | 0)) i12 = 814; else if (!(HEAP16[i103 >> 1] | 0)) i12 = 814; else {
        i2 = HEAP32[i113 >> 2] | 0;
        i3 = HEAP32[i114 >> 2] | 0;
        i4 = HEAP32[i115 >> 2] | 0;
        i5 = (HEAP32[i2 + (i8 << 3) >> 2] | 0) - (HEAP32[i3 + (i6 << 3) >> 2] | 0) | 0;
        if ((i4 | 0) == (HEAP32[i18 >> 2] | 0)) {
         i2 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, i5, (HEAP32[i2 + (i8 << 3) + 4 >> 2] | 0) - (HEAP32[i3 + (i6 << 3) + 4 >> 2] | 0) | 0) | 0;
         i2 = _FT_MulFix(i2, HEAP32[i115 >> 2] | 0) | 0;
         break;
        } else {
         i139 = _FT_MulFix(i5, i4) | 0;
         i2 = _FT_MulFix((HEAP32[i2 + (i8 << 3) + 4 >> 2] | 0) - (HEAP32[i3 + (i6 << 3) + 4 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0;
         i2 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, i139, i2) | 0;
         break;
        }
       } while (0);
       if ((i12 | 0) == 814) {
        i12 = 0;
        i139 = HEAP32[i105 >> 2] | 0;
        i2 = HEAP32[i104 >> 2] | 0;
        i2 = FUNCTION_TABLE_iiii[HEAP32[i123 >> 2] & 127](i136, (HEAP32[i139 + (i8 << 3) >> 2] | 0) - (HEAP32[i2 + (i6 << 3) >> 2] | 0) | 0, (HEAP32[i139 + (i8 << 3) + 4 >> 2] | 0) - (HEAP32[i2 + (i6 << 3) + 4 >> 2] | 0) | 0) | 0;
       }
       i4 = HEAP32[i101 >> 2] | 0;
       i3 = i2 - i4 | 0;
       i4 = (((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < (HEAP32[i102 >> 2] | 0) ? ((i2 | 0) > -1 ? i4 : 0 - i4 | 0) : i2;
       i3 = HEAP8[i84 >> 0] | 0;
       i139 = i3 & 255;
       i2 = HEAP32[i136 + 264 + ((i139 & 3) << 2) >> 2] | 0;
       do if (!(i139 & 4)) if ((i4 | 0) > -1) {
        i2 = i4 + i2 | 0;
        i2 = (i2 | 0) > 0 ? i2 : 0;
        break;
       } else {
        i2 = i4 - i2 | 0;
        i2 = (i2 | 0) < 0 ? i2 : 0;
        break;
       } else {
        i2 = FUNCTION_TABLE_iiii[HEAP32[i17 >> 2] & 127](i136, i4, i2) | 0;
        i3 = HEAP8[i84 >> 0] | 0;
       } while (0);
       do if (i3 & 8) if ((i4 | 0) > -1) {
        i2 = (i2 | 0) < (i7 | 0) ? i7 : i2;
        break;
       } else {
        i139 = 0 - i7 | 0;
        i2 = (i2 | 0) > (i139 | 0) ? i139 : i2;
        break;
       } while (0);
       i15 = HEAP32[i107 >> 2] | 0;
       i138 = HEAP32[i108 >> 2] | 0;
       i139 = HEAPU16[i99 >> 1] | 0;
       i139 = FUNCTION_TABLE_iiii[HEAP32[i124 >> 2] & 127](i136, (HEAP32[i15 + (i8 << 3) >> 2] | 0) - (HEAP32[i138 + (i139 << 3) >> 2] | 0) | 0, (HEAP32[i15 + (i8 << 3) + 4 >> 2] | 0) - (HEAP32[i138 + (i139 << 3) + 4 >> 2] | 0) | 0) | 0;
       FUNCTION_TABLE_viiii[HEAP32[i120 >> 2] & 31](i136, i96, i9, i2 - i139 | 0);
       i2 = HEAP8[i84 >> 0] | 0;
      } else i12 = 810;
     } else i12 = 810;
     if ((i12 | 0) == 810) if (!(HEAP8[i89 >> 0] | 0)) i2 = i10; else {
      HEAP32[i119 >> 2] = 134;
      i2 = i10;
     }
     HEAP16[i111 >> 1] = HEAP16[i99 >> 1] | 0;
     HEAP16[i112 >> 1] = i9;
     if (!(i2 & 16)) {
      i12 = 853;
      break L51;
     }
     HEAP16[i99 >> 1] = i9;
     i12 = 853;
     break L51;
    }
    if ((i10 & 255) > 183) {
     i5 = i8 + 65353 & 65535;
     if (i5 >>> 0 >= (i7 + 1 - (HEAP32[i87 >> 2] | 0) | 0) >>> 0) {
      i1 = 130;
      i12 = 873;
      break L34;
     }
     i2 = (HEAP32[i83 >> 2] | 0) + 1 | 0;
     HEAP32[i83 >> 2] = i2;
     L123 : do if (i5 | 0) {
      i4 = 0;
      i3 = 0;
      while (1) {
       HEAP32[i83 >> 2] = i2 + 2;
       HEAP32[i9 + (i3 << 2) >> 2] = (HEAPU8[i11 + i2 >> 0] << 8 | HEAPU8[i11 + (i2 + 1) >> 0]) << 16 >> 16;
       i2 = i4 + 1 << 16 >> 16;
       i3 = i2 & 65535;
       if (i3 >>> 0 >= i5 >>> 0) break L123;
       i4 = i2;
       i2 = HEAP32[i83 >> 2] | 0;
      }
     } while (0);
     HEAP8[i93 >> 0] = 0;
     i12 = 853;
     break L51;
    }
    if ((i10 & 255) > 175) {
     i4 = i8 + 65361 & 65535;
     if (i4 >>> 0 >= (i7 + 1 - (HEAP32[i87 >> 2] | 0) | 0) >>> 0) {
      i1 = 130;
      i12 = 873;
      break L34;
     }
     if (!i4) {
      i12 = 853;
      break L51;
     } else {
      i2 = 1;
      i3 = 1;
     }
     while (1) {
      HEAP32[i9 + (i3 + -1 << 2) >> 2] = HEAPU8[i11 + ((HEAP32[i83 >> 2] | 0) + i3) >> 0];
      i2 = i2 + 1 << 16 >> 16;
      i3 = i2 & 65535;
      if (i3 >>> 0 > i4 >>> 0) {
       i12 = 853;
       break L51;
      }
     }
    }
    i2 = HEAP32[i19 >> 2] | 0;
    i3 = HEAP32[i20 >> 2] | 0;
    i5 = i2 + (i3 * 24 | 0) | 0;
    if ((i3 | 0) > 0) {
     i4 = i2;
     while (1) {
      if (i10 << 24 >> 24 == (HEAP32[i4 + 12 >> 2] & 255) << 24 >> 24) if (HEAP8[i4 + 16 >> 0] | 0) break;
      i4 = i4 + 24 | 0;
      if (i4 >>> 0 >= i5 >>> 0) {
       i12 = 856;
       break L51;
      }
     }
     i2 = HEAP32[i21 >> 2] | 0;
     if ((i2 | 0) >= (HEAP32[i22 >> 2] | 0)) {
      i1 = 130;
      i12 = 873;
      break L34;
     }
     i5 = HEAP32[i23 >> 2] | 0;
     HEAP32[i21 >> 2] = i2 + 1;
     HEAP32[i5 + (i2 << 4) >> 2] = HEAP32[i116 >> 2];
     HEAP32[i5 + (i2 << 4) + 4 >> 2] = (HEAP32[i83 >> 2] | 0) + 1;
     HEAP32[i5 + (i2 << 4) + 8 >> 2] = 1;
     HEAP32[i5 + (i2 << 4) + 12 >> 2] = i4;
     i5 = HEAP32[i4 >> 2] | 0;
     i3 = HEAP32[i4 + 4 >> 2] | 0;
     i2 = i5 + -1 | 0;
     do if (i2 >>> 0 > 2) HEAP32[i119 >> 2] = 132; else {
      i4 = HEAP32[i136 + 444 + (i2 << 3) >> 2] | 0;
      if (!i4) {
       HEAP32[i119 >> 2] = 138;
       break;
      }
      i2 = HEAP32[i136 + 444 + (i2 << 3) + 4 >> 2] | 0;
      if ((i2 | 0) < (i3 | 0)) {
       HEAP32[i119 >> 2] = 131;
       break;
      } else {
       HEAP32[i82 >> 2] = i4;
       HEAP32[i86 >> 2] = i2;
       HEAP32[i83 >> 2] = i3;
       HEAP32[i116 >> 2] = i5;
       break;
      }
     } while (0);
     HEAP8[i93 >> 0] = 0;
     i12 = 853;
    } else i12 = 856;
   }
  } while (0);
  if ((i12 | 0) == 853) {
   i2 = HEAP32[i119 >> 2] | 0;
   i12 = 854;
  } else if ((i12 | 0) == 856) {
   HEAP32[i119 >> 2] = 128;
   i12 = 857;
  }
  L1140 : do if ((i12 | 0) == 854) {
   i12 = 0;
   switch (i2 | 0) {
   case 0:
    {
     i139 = HEAP8[i93 >> 0] | 0;
     HEAP32[i87 >> 2] = HEAP32[i91 >> 2];
     if (!(i139 << 24 >> 24)) {
      i12 = 869;
      break L1140;
     } else {
      i12 = 868;
      break L1140;
     }
    }
   case 128:
    {
     i2 = HEAP32[i19 >> 2] | 0;
     i3 = HEAP32[i20 >> 2] | 0;
     i12 = 857;
     break L1140;
    }
   default:
    {
     i1 = i2;
     break L34;
    }
   }
  } while (0);
  if ((i12 | 0) == 857) {
   i12 = 0;
   i4 = i2 + (i3 * 24 | 0) | 0;
   if ((i3 | 0) > 0) i3 = i2; else {
    i1 = 128;
    i12 = 873;
    break;
   }
   while (1) {
    if (HEAP8[i3 + 16 >> 0] | 0) if ((HEAP8[i84 >> 0] | 0) == (HEAP32[i3 + 12 >> 2] & 255) << 24 >> 24) break;
    i2 = i3 + 24 | 0;
    if (i2 >>> 0 < i4 >>> 0) i3 = i2; else {
     i1 = 128;
     i12 = 873;
     break L34;
    }
   }
   i2 = HEAP32[i21 >> 2] | 0;
   if ((i2 | 0) >= (HEAP32[i22 >> 2] | 0)) {
    i1 = 134;
    i12 = 873;
    break;
   }
   i5 = HEAP32[i23 >> 2] | 0;
   HEAP32[i5 + (i2 << 4) >> 2] = HEAP32[i116 >> 2];
   HEAP32[i5 + (i2 << 4) + 4 >> 2] = (HEAP32[i83 >> 2] | 0) + 1;
   HEAP32[i5 + (i2 << 4) + 8 >> 2] = 1;
   HEAP32[i5 + (i2 << 4) + 12 >> 2] = i3;
   i5 = HEAP32[i3 >> 2] | 0;
   i3 = HEAP32[i3 + 4 >> 2] | 0;
   i2 = i5 + -1 | 0;
   if (i2 >>> 0 > 2) {
    i1 = 132;
    i12 = 873;
    break;
   }
   i4 = HEAP32[i136 + 444 + (i2 << 3) >> 2] | 0;
   if (!i4) {
    i1 = 138;
    i12 = 873;
    break;
   }
   i2 = HEAP32[i136 + 444 + (i2 << 3) + 4 >> 2] | 0;
   if ((i2 | 0) < (i3 | 0)) {
    i1 = 131;
    i12 = 873;
    break;
   }
   HEAP32[i82 >> 2] = i4;
   HEAP32[i86 >> 2] = i2;
   HEAP32[i83 >> 2] = i3;
   HEAP32[i116 >> 2] = i5;
   i2 = i16;
  } else if ((i12 | 0) == 868) {
   HEAP32[i83 >> 2] = (HEAP32[i83 >> 2] | 0) + (HEAP32[i85 >> 2] | 0);
   i12 = 869;
  }
  if ((i12 | 0) == 869) {
   i12 = 0;
   if ((i16 | 0) > 999999) {
    i1 = 139;
    i12 = 877;
    break;
   } else i2 = i16 + 1 | 0;
  }
  i4 = HEAP32[i83 >> 2] | 0;
  i5 = HEAP32[i86 >> 2] | 0;
  if ((i4 | 0) >= (i5 | 0)) {
   i12 = 871;
   break;
  }
  if (HEAP8[i117 >> 0] | 0) {
   i1 = 0;
   i12 = 877;
   break;
  } else i16 = i2;
 }
 if ((i12 | 0) != 595) if ((i12 | 0) != 600) if ((i12 | 0) != 609) if ((i12 | 0) != 614) if ((i12 | 0) == 871) if ((HEAP32[i21 >> 2] | 0) > 0) {
  i1 = 131;
  i12 = 873;
 } else {
  i139 = 0;
  STACKTOP = i137;
  return i139 | 0;
 } else if ((i12 | 0) == 877) {
  STACKTOP = i137;
  return i1 | 0;
 }
 if ((i12 | 0) == 873) HEAP32[i119 >> 2] = i1;
 if (HEAP8[i117 >> 0] | 0) {
  i139 = i1;
  STACKTOP = i137;
  return i139 | 0;
 }
 if ((HEAP32[i116 >> 2] | 0) != 3) {
  i139 = i1;
  STACKTOP = i137;
  return i139 | 0;
 }
 i139 = HEAP32[i136 + 4 >> 2] | 0;
 HEAP32[i139 + 296 >> 2] = -1;
 HEAP32[i139 + 300 >> 2] = -1;
 i139 = i1;
 STACKTOP = i137;
 return i139 | 0;
}

function _ass_render_event(i81, i71, i86) {
 i81 = i81 | 0;
 i71 = i71 | 0;
 i86 = i86 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, i15 = 0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, d27 = 0.0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, d37 = 0.0, d38 = 0.0, d39 = 0.0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, d45 = 0.0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, d53 = 0.0, d54 = 0.0, i55 = 0, i56 = 0, d57 = 0.0, d58 = 0.0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i87 = 0, i88 = 0, i89 = 0, d90 = 0.0, d91 = 0.0, d92 = 0.0, d93 = 0.0, d94 = 0.0, d95 = 0.0, d96 = 0.0;
 i89 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i75 = i89 + 136 | 0;
 i59 = i89 + 128 | 0;
 i55 = i89 + 120 | 0;
 i52 = i89 + 112 | 0;
 i51 = i89 + 104 | 0;
 i48 = i89 + 96 | 0;
 i44 = i89 + 88 | 0;
 i74 = i89;
 i78 = i89 + 144 | 0;
 i79 = i89 + 140 | 0;
 i67 = i81 + 160 | 0;
 if ((HEAP32[i71 + 24 >> 2] | 0) >= (HEAP32[HEAP32[i67 >> 2] >> 2] | 0)) {
  _ass_msg(HEAP32[i81 >> 2] | 0, 2, 358867, i89 + 72 | 0);
  i88 = 1;
  STACKTOP = i89;
  return i88 | 0;
 }
 i4 = i71 + 48 | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  _ass_msg(HEAP32[i81 >> 2] | 0, 2, 358882, i89 + 80 | 0);
  i88 = 1;
  STACKTOP = i89;
  return i88 | 0;
 }
 i84 = i81 + 220 | 0;
 _ass_cache_dec_ref(HEAP32[i84 >> 2] | 0);
 i85 = i81 + 500 | 0;
 _free(HEAP32[i85 >> 2] | 0);
 i87 = i81 + 472 | 0;
 _ass_drawing_free(HEAP32[i87 >> 2] | 0);
 HEAP32[i84 >> 2] = 0;
 HEAP32[i85 >> 2] = 0;
 HEAP32[i87 >> 2] = 0;
 i88 = i81 + 684 | 0;
 if ((HEAP32[i88 >> 2] | 0) > 0) {
  i2 = i81 + 680 | 0;
  i1 = 0;
  do {
   _ass_drawing_free(HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 * 344 | 0) + 32 >> 2] | 0);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i88 >> 2] | 0));
 }
 HEAP32[i88 >> 2] = 0;
 HEAP32[i81 + 208 >> 2] = i71;
 HEAP32[i81 + 216 >> 2] = 0;
 i60 = i81 + 288 | 0;
 HEAP32[i60 >> 2] = 0;
 _reset_render_context(i81, 0);
 i70 = HEAP32[i67 >> 2] | 0;
 i50 = i81 + 516 | 0;
 HEAP32[i50 >> 2] = HEAP32[i70 + 56 >> 2];
 i49 = i81 + 212 | 0;
 i61 = HEAP32[i49 >> 2] | 0;
 i62 = i81 + 236 | 0;
 HEAP32[i62 >> 2] = HEAP32[i61 + 104 >> 2];
 i56 = i81 + 240 | 0;
 HEAP32[i56 >> 2] = HEAP32[i61 + 136 >> 2];
 i61 = i81 + 296 | 0;
 i63 = i81 + 400 | 0;
 HEAP32[i63 >> 2] = 0;
 i64 = i81 + 404 | 0;
 HEAP32[i64 >> 2] = 0;
 HEAP32[i61 >> 2] = 0;
 HEAP32[i61 + 4 >> 2] = 0;
 HEAP32[i61 + 8 >> 2] = 0;
 HEAP32[i61 + 12 >> 2] = 0;
 HEAP32[i61 + 16 >> 2] = 0;
 HEAP32[i61 + 20 >> 2] = 0;
 HEAP32[i61 + 24 >> 2] = 0;
 HEAP32[i61 + 28 >> 2] = 0;
 HEAP8[i61 + 32 >> 0] = 0;
 i65 = i81 + 408 | 0;
 HEAP32[i65 >> 2] = HEAP32[i70 + 36 >> 2];
 i66 = i81 + 412 | 0;
 HEAP32[i66 >> 2] = HEAP32[i70 + 40 >> 2];
 HEAP8[i81 + 416 >> 0] = 0;
 i70 = i81 + 417 | 0;
 HEAP8[i70 >> 0] = 1;
 i35 = i81 + 420 | 0;
 HEAP32[i35 >> 2] = 0;
 i36 = i81 + 456 | 0;
 HEAP32[i36 >> 2] = 0;
 i40 = i81 + 464 | 0;
 HEAPF64[i40 >> 3] = 0.0;
 i41 = i81 + 480 | 0;
 HEAP32[i41 >> 2] = 0;
 i42 = i81 + 484 | 0;
 HEAP32[i42 >> 2] = 0;
 i43 = i81 + 488 | 0;
 HEAP32[i43 >> 2] = 0;
 _apply_transition_effects(i81, i71);
 i83 = i81 + 680 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i74 >> 2] = i1;
 i10 = i81 + 712 | 0;
 i14 = i81 + 224 | 0;
 i47 = i81 + 176 | 0;
 i15 = i81 + 424 | 0;
 i17 = i81 + 432 | 0;
 i76 = i81 + 440 | 0;
 i80 = i81 + 448 | 0;
 i18 = i81 + 336 | 0;
 i19 = i81 + 344 | 0;
 i77 = i81 + 360 | 0;
 i20 = i81 + 368 | 0;
 i21 = i81 + 376 | 0;
 i22 = i81 + 352 | 0;
 i23 = i81 + 504 | 0;
 i24 = i81 + 508 | 0;
 i25 = i81 + 232 | 0;
 i26 = i81 + 248 | 0;
 i28 = i81 + 256 | 0;
 i29 = i81 + 264 | 0;
 i30 = i81 + 272 | 0;
 i31 = i81 + 280 | 0;
 i46 = i81 + 88 | 0;
 i32 = i81 + 384 | 0;
 i33 = i81 + 388 | 0;
 i34 = i81 + 392 | 0;
 i82 = i81 + 396 | 0;
 i5 = 0;
 L14 : while (1) {
  L16 : while (1) {
   i2 = HEAP8[i1 >> 0] | 0;
   switch (i2 << 24 >> 24) {
   case 0:
    {
     i68 = 51;
     break L14;
    }
   case 123:
    break;
   default:
    break L16;
   }
   i2 = _strchr(i1, 125) | 0;
   if (!i2) {
    i2 = 123;
    break;
   }
   if (i1 >>> 0 >= i2 >>> 0) {
    i68 = 15;
    break L14;
   }
   do {
    i1 = _parse_tag(i81, i1, i2, 1.0) | 0;
    HEAP32[i74 >> 2] = i1;
   } while (i1 >>> 0 < i2 >>> 0);
   if ((HEAP8[i1 >> 0] | 0) != 125) {
    i68 = 15;
    break L14;
   }
   i1 = i1 + 1 | 0;
   HEAP32[i74 >> 2] = i1;
  }
  if (!(HEAP32[i36 >> 2] | 0)) {
   i1 = _get_next_char(i81, i74) | 0;
   if (!i1) {
    i68 = 51;
    break;
   }
  } else {
   i4 = i2 << 24 >> 24 == 123 ? i1 + 1 | 0 : i1;
   L28 : while (1) {
    switch (HEAP8[i4 >> 0] | 0) {
    case 0:
    case 123:
     break L28;
    default:
     {}
    }
    i4 = i4 + 1 | 0;
   }
   if (!i5) {
    i1 = _ass_drawing_new(HEAP32[i81 >> 2] | 0) | 0;
    if (!i1) break;
    i2 = i1;
    i1 = HEAP32[i74 >> 2] | 0;
   } else i2 = i5;
   _ass_drawing_set_text(i2, i1, i4 - i1 | 0);
   HEAP32[i74 >> 2] = i4;
   i1 = 65532;
   i5 = i2;
  }
  if (!(HEAP32[i84 >> 2] | 0)) {
   i68 = 27;
   break;
  }
  i4 = HEAP32[i88 >> 2] | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i4 | 0) < (i2 | 0)) i8 = HEAP32[i83 >> 2] | 0; else {
   HEAP32[i10 >> 2] = i2 << 1;
   i8 = _realloc(HEAP32[i83 >> 2] | 0, i2 * 688 | 0) | 0;
   HEAP32[i83 >> 2] = i8;
   i4 = HEAP32[i88 >> 2] | 0;
  }
  i2 = i8 + (i4 * 344 | 0) | 0;
  _memset(i2 | 0, 0, 344) | 0;
  if (!i5) i5 = 0; else if (HEAP32[i5 >> 2] | 0) {
   d58 = +HEAPF64[i47 >> 3];
   HEAPF64[i5 + 16 >> 3] = +HEAPF64[i18 >> 3] * d58;
   HEAPF64[i5 + 24 >> 3] = d58 * +HEAPF64[i19 >> 3];
   HEAP32[i5 + 4 >> 2] = HEAP32[i36 >> 2];
   HEAPF64[i5 + 8 >> 3] = +HEAPF64[i40 >> 3];
   HEAP32[i8 + (i4 * 344 | 0) + 32 >> 2] = i5;
   i5 = 0;
  }
  HEAP32[i2 >> 2] = i1;
  i1 = HEAP32[i84 >> 2] | 0;
  HEAP32[i8 + (i4 * 344 | 0) + 8 >> 2] = i1;
  i7 = i8 + (i4 * 344 | 0) + 32 | 0;
  if (!(HEAP32[i7 >> 2] | 0)) _ass_cache_inc_ref(i1);
  i1 = HEAP32[i32 >> 2] | 0;
  HEAP32[i78 >> 2] = i1;
  i2 = HEAP32[i35 >> 2] | 0;
  if ((i2 | 0) > 0) {
   _change_alpha(i78, _mult_alpha(i1 & 255, i2) | 0, 1.0);
   i1 = HEAP32[i78 >> 2] | 0;
  }
  HEAP32[i8 + (i4 * 344 | 0) + 84 >> 2] = i1;
  i1 = HEAP32[i33 >> 2] | 0;
  HEAP32[i78 >> 2] = i1;
  i2 = HEAP32[i35 >> 2] | 0;
  if ((i2 | 0) > 0) {
   _change_alpha(i78, _mult_alpha(i1 & 255, i2) | 0, 1.0);
   i1 = HEAP32[i78 >> 2] | 0;
  }
  HEAP32[i8 + (i4 * 344 | 0) + 88 >> 2] = i1;
  i1 = HEAP32[i34 >> 2] | 0;
  HEAP32[i78 >> 2] = i1;
  i2 = HEAP32[i35 >> 2] | 0;
  if ((i2 | 0) > 0) {
   _change_alpha(i78, _mult_alpha(i1 & 255, i2) | 0, 1.0);
   i1 = HEAP32[i78 >> 2] | 0;
  }
  HEAP32[i8 + (i4 * 344 | 0) + 92 >> 2] = i1;
  i1 = HEAP32[i82 >> 2] | 0;
  HEAP32[i78 >> 2] = i1;
  i2 = HEAP32[i35 >> 2] | 0;
  if ((i2 | 0) > 0) {
   _change_alpha(i78, _mult_alpha(i1 & 255, i2) | 0, 1.0);
   i1 = HEAP32[i78 >> 2] | 0;
  }
  HEAP32[i8 + (i4 * 344 | 0) + 96 >> 2] = i1;
  HEAP32[i8 + (i4 * 344 | 0) + 120 >> 2] = HEAP32[i41 >> 2];
  HEAP32[i8 + (i4 * 344 | 0) + 124 >> 2] = HEAP32[i42 >> 2];
  HEAP32[i8 + (i4 * 344 | 0) + 128 >> 2] = HEAP32[i43 >> 2];
  d9 = +HEAPF64[i14 >> 3] * +HEAPF64[i47 >> 3];
  i6 = i8 + (i4 * 344 | 0) + 24 | 0;
  HEAPF64[i6 >> 3] = d9;
  HEAP32[i8 + (i4 * 344 | 0) + 140 >> 2] = HEAP8[i15 >> 0];
  HEAPF64[i8 + (i4 * 344 | 0) + 144 >> 3] = +HEAPF64[i17 >> 3];
  HEAPF64[i8 + (i4 * 344 | 0) + 152 >> 3] = +HEAPF64[i76 >> 3];
  HEAPF64[i8 + (i4 * 344 | 0) + 160 >> 3] = +HEAPF64[i80 >> 3];
  d11 = +HEAPF64[i18 >> 3];
  HEAPF64[i8 + (i4 * 344 | 0) + 224 >> 3] = d11;
  i1 = i8 + (i4 * 344 | 0) + 208 | 0;
  HEAPF64[i1 >> 3] = d11;
  d3 = +HEAPF64[i19 >> 3];
  HEAPF64[i8 + (i4 * 344 | 0) + 232 >> 3] = d3;
  i2 = i8 + (i4 * 344 | 0) + 216 | 0;
  HEAPF64[i2 >> 3] = d3;
  HEAP32[i8 + (i4 * 344 | 0) + 240 >> 2] = HEAP32[i77 >> 2];
  HEAPF64[i8 + (i4 * 344 | 0) + 248 >> 3] = +HEAPF64[i20 >> 3];
  HEAPF64[i8 + (i4 * 344 | 0) + 256 >> 3] = +HEAPF64[i21 >> 3];
  HEAPF64[i8 + (i4 * 344 | 0) + 264 >> 3] = +HEAPF64[i22 >> 3];
  HEAP32[i8 + (i4 * 344 | 0) + 276 >> 2] = HEAP32[i23 >> 2];
  HEAP32[i8 + (i4 * 344 | 0) + 272 >> 2] = HEAP32[i24 >> 2];
  HEAP32[i8 + (i4 * 344 | 0) + 280 >> 2] = HEAP32[i25 >> 2];
  HEAPF64[i8 + (i4 * 344 | 0) + 168 >> 3] = +HEAPF64[i26 >> 3];
  HEAPF64[i8 + (i4 * 344 | 0) + 176 >> 3] = +HEAPF64[i28 >> 3];
  HEAPF64[i8 + (i4 * 344 | 0) + 184 >> 3] = +HEAPF64[i29 >> 3];
  HEAPF64[i8 + (i4 * 344 | 0) + 192 >> 3] = +HEAPF64[i30 >> 3];
  HEAPF64[i8 + (i4 * 344 | 0) + 200 >> 3] = +HEAPF64[i31 >> 3];
  if (!(HEAP32[i7 >> 2] | 0)) {
   d57 = d9 * d3;
   d58 = (HEAP32[i46 >> 2] | 0) == 0 ? 256.0 : d57;
   HEAPF64[i1 >> 3] = d9 * d11 / d58;
   HEAPF64[i2 >> 3] = d57 / d58;
   HEAPF64[i6 >> 3] = d58;
  }
  HEAP32[i88 >> 2] = (HEAP32[i88 >> 2] | 0) + 1;
  HEAP32[i41 >> 2] = 0;
  HEAP32[i42 >> 2] = 0;
  HEAP32[i43 >> 2] = 0;
  i1 = HEAP32[i74 >> 2] | 0;
 }
 if ((i68 | 0) == 15) ___assert_fail(358894, 358904, 1717, 358917); else if ((i68 | 0) == 27) {
  _ass_cache_dec_ref(0);
  _free(HEAP32[i85 >> 2] | 0);
  _ass_drawing_free(HEAP32[i87 >> 2] | 0);
  HEAP32[i84 >> 2] = 0;
  HEAP32[i85 >> 2] = 0;
  HEAP32[i87 >> 2] = 0;
  if ((HEAP32[i88 >> 2] | 0) > 0) {
   i2 = i81 + 680 | 0;
   i1 = 0;
   do {
    _ass_drawing_free(HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 * 344 | 0) + 32 >> 2] | 0);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[i88 >> 2] | 0));
  }
  HEAP32[i88 >> 2] = 0;
  _ass_drawing_free(i5);
 } else if ((i68 | 0) == 51) {
  _ass_drawing_free(i5);
  if (!(HEAP32[i88 >> 2] | 0)) {
   _ass_cache_dec_ref(HEAP32[i84 >> 2] | 0);
   _free(HEAP32[i85 >> 2] | 0);
   _ass_drawing_free(HEAP32[i87 >> 2] | 0);
   HEAP32[i84 >> 2] = 0;
   HEAP32[i85 >> 2] = 0;
   HEAP32[i87 >> 2] = 0;
   if ((HEAP32[i88 >> 2] | 0) > 0) {
    i2 = i81 + 680 | 0;
    i1 = 0;
    do {
     _ass_drawing_free(HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 * 344 | 0) + 32 >> 2] | 0);
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < (HEAP32[i88 >> 2] | 0));
   }
   HEAP32[i88 >> 2] = 0;
   i88 = 1;
   STACKTOP = i89;
   return i88 | 0;
  }
  i72 = i81 + 116 | 0;
  i73 = HEAP32[i72 >> 2] | 0;
  _ass_shaper_set_base_direction(i73, _resolve_base_direction(HEAP32[i81 + 520 >> 2] | 0) | 0);
  _ass_shaper_find_runs(HEAP32[i72 >> 2] | 0, i81, HEAP32[i83 >> 2] | 0, HEAP32[i88 >> 2] | 0);
  if ((_ass_shaper_shape(HEAP32[i72 >> 2] | 0, i83) | 0) < 0) {
   _ass_msg(HEAP32[i81 >> 2] | 0, 1, 358930, i44);
   _ass_cache_dec_ref(HEAP32[i84 >> 2] | 0);
   _free(HEAP32[i85 >> 2] | 0);
   _ass_drawing_free(HEAP32[i87 >> 2] | 0);
   HEAP32[i84 >> 2] = 0;
   HEAP32[i85 >> 2] = 0;
   HEAP32[i87 >> 2] = 0;
   if ((HEAP32[i88 >> 2] | 0) > 0) {
    i2 = i81 + 680 | 0;
    i1 = 0;
    do {
     _ass_drawing_free(HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 * 344 | 0) + 32 >> 2] | 0);
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < (HEAP32[i88 >> 2] | 0));
   }
   HEAP32[i88 >> 2] = 0;
   i88 = 1;
   STACKTOP = i89;
   return i88 | 0;
  }
  i73 = i81 + 680 | 0;
  i19 = HEAP32[i73 >> 2] | 0;
  if ((HEAP32[i88 >> 2] | 0) > 0) {
   i20 = i74 + 8 | 0;
   i21 = i74 + 16 | 0;
   i22 = i74 + 24 | 0;
   i23 = i74 + 28 | 0;
   i24 = i74 + 32 | 0;
   i25 = i74 + 36 | 0;
   i26 = i74 + 40 | 0;
   i28 = i74 + 44 | 0;
   i29 = i81 + 192 | 0;
   i30 = i74 + 48 | 0;
   i31 = i74 + 52 | 0;
   i32 = i74 + 56 | 0;
   i33 = i74 + 60 | 0;
   i34 = i74 + 64 | 0;
   i35 = i81 + 732 | 0;
   i36 = i81 + 92 | 0;
   i40 = i74 + 8 | 0;
   i41 = i40 + 4 | 0;
   i42 = i40 + 12 | 0;
   i18 = 0;
   do {
    i1 = i19 + (i18 * 344 | 0) | 0;
    if (i1 | 0) do {
     i2 = i1 + 288 | 0;
     i5 = i2 + 44 | 0;
     do {
      HEAP32[i2 >> 2] = 0;
      i2 = i2 + 4 | 0;
     } while ((i2 | 0) < (i5 | 0));
     i17 = i1 + 32 | 0;
     i4 = HEAP32[i17 >> 2] | 0;
     i6 = i1 + 208 | 0;
     d3 = +HEAPF64[i6 >> 3];
     if (!i4) {
      HEAP32[i74 >> 2] = 0;
      HEAP32[i20 >> 2] = HEAP32[i1 + 8 >> 2];
      HEAPF64[i21 >> 3] = +HEAPF64[i1 + 24 >> 3];
      HEAP32[i22 >> 2] = HEAP32[i1 + 12 >> 2];
      HEAP32[i23 >> 2] = HEAP32[i1 + 16 >> 2];
      HEAP32[i24 >> 2] = HEAP32[i1 + 276 >> 2];
      HEAP32[i25 >> 2] = HEAP32[i1 + 272 >> 2];
      HEAP32[i26 >> 2] = ~~(d3 * 65536.0);
      HEAP32[i28 >> 2] = ~~(+HEAPF64[i1 + 216 >> 3] * 65536.0);
      d58 = +HEAPF64[i29 >> 3];
      HEAP32[i30 >> 2] = ~~(+HEAPF64[i1 + 248 >> 3] * d58 * 64.0);
      HEAP32[i31 >> 2] = ~~(d58 * +HEAPF64[i1 + 256 >> 3] * 64.0);
      HEAP32[i32 >> 2] = HEAP32[i1 + 280 >> 2];
      i44 = HEAP32[i1 + 240 >> 2] | 0;
      HEAP32[i33 >> 2] = i44;
      if ((i44 | 0) == 3) i2 = ~~(+HEAPF64[i1 + 264 >> 3] * 65536.0); else i2 = 0;
      HEAP32[i34 >> 2] = i2;
     } else {
      HEAP32[i74 >> 2] = 1;
      HEAP32[i40 >> 2] = ~~(d3 * 65536.0);
      HEAP32[i41 >> 2] = ~~(+HEAPF64[i1 + 216 >> 3] * 65536.0);
      d58 = +HEAPF64[i29 >> 3];
      HEAP32[i42 >> 2] = ~~(+HEAPF64[i1 + 248 >> 3] * d58 * 64.0);
      HEAP32[i22 >> 2] = ~~(d58 * +HEAPF64[i1 + 256 >> 3] * 64.0);
      i44 = HEAP32[i1 + 240 >> 2] | 0;
      HEAP32[i23 >> 2] = i44;
      if ((i44 | 0) == 3) i2 = ~~(+HEAPF64[i1 + 264 >> 3] * 65536.0); else i2 = 0;
      HEAP32[i24 >> 2] = i2;
      HEAP32[i26 >> 2] = HEAP32[i4 + 72 >> 2];
      HEAP32[i28 >> 2] = HEAP32[i4 >> 2];
      HEAP32[i21 >> 2] = ~~+HEAPF64[i4 + 8 >> 3];
      HEAP32[i25 >> 2] = HEAP32[i4 + 4 >> 2];
     }
     i44 = _ass_cache_get(HEAP32[i35 >> 2] | 0, i74, i78) | 0;
     i2 = HEAP32[i78 >> 2] | 0;
     L107 : do if (i44) if (!(HEAP8[i2 >> 0] | 0)) _ass_cache_dec_ref(i2); else i68 = 105; else if (i2 | 0) {
      i5 = i2 + 108 | 0;
      do {
       HEAP32[i2 >> 2] = 0;
       i2 = i2 + 4 | 0;
      } while ((i2 | 0) < (i5 | 0));
      i2 = HEAP32[i17 >> 2] | 0;
      L112 : do if (!i2) {
       i2 = i1 + 8 | 0;
       i5 = i1 + 12 | 0;
       _ass_face_set_size(HEAP32[(HEAP32[i2 >> 2] | 0) + 64 + (HEAP32[i5 >> 2] << 2) >> 2] | 0, +HEAPF64[i1 + 24 >> 3]);
       i4 = i1 + 216 | 0;
       _ass_font_set_transform(HEAP32[i2 >> 2] | 0, +HEAPF64[i6 >> 3], +HEAPF64[i4 >> 3], 0);
       i5 = _ass_font_get_glyph(HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i1 + 16 >> 2] | 0, HEAP32[i46 >> 2] | 0, HEAP32[i1 + 280 >> 2] | 0) | 0;
       if (!i5) {
        i2 = HEAP32[i78 >> 2] | 0;
        break;
       }
       if (!(_outline_convert((HEAP32[i78 >> 2] | 0) + 4 | 0, i5 + 20 | 0) | 0)) {
        _ass_cache_commit(HEAP32[i78 >> 2] | 0, 1);
        _ass_cache_dec_ref(HEAP32[i78 >> 2] | 0);
        break L107;
       }
       if (!(HEAP32[i36 >> 2] | 0)) {
        i44 = HEAP32[i78 >> 2] | 0;
        HEAP32[i44 + 92 >> 2] = (HEAP32[i5 + 12 >> 2] | 0) + 512 >> 10;
        HEAP32[i44 + 96 >> 2] = (HEAP32[i5 + 16 >> 2] | 0) + 512 >> 10;
       }
       _FT_Done_Glyph(i5);
       i44 = HEAP32[i78 >> 2] | 0;
       _ass_font_get_asc_desc(HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] | 0, i44 + 100 | 0, i44 + 104 | 0);
       d58 = +HEAPF64[i4 >> 3];
       i2 = HEAP32[i78 >> 2] | 0;
       i44 = i2 + 100 | 0;
       HEAP32[i44 >> 2] = ~~(d58 * +(HEAP32[i44 >> 2] | 0));
       i44 = i2 + 104 | 0;
       HEAP32[i44 >> 2] = ~~(d58 * +(HEAP32[i44 >> 2] | 0));
      } else {
       _ass_drawing_hash(i2);
       do if (_ass_drawing_parse(i2, 0) | 0) {
        if (!(_outline_copy((HEAP32[i78 >> 2] | 0) + 4 | 0, i2 + 40 | 0) | 0)) break;
        i44 = HEAP32[i78 >> 2] | 0;
        HEAP32[i44 + 92 >> 2] = HEAP32[i2 + 64 >> 2];
        HEAP32[i44 + 96 >> 2] = HEAP32[i2 + 68 >> 2];
        HEAP32[i44 + 100 >> 2] = HEAP32[i2 + 32 >> 2];
        HEAP32[i44 + 104 >> 2] = HEAP32[i2 + 36 >> 2];
        i2 = i44;
        break L112;
       } while (0);
       _ass_cache_commit(HEAP32[i78 >> 2] | 0, 1);
       _ass_cache_dec_ref(HEAP32[i78 >> 2] | 0);
       break L107;
      } while (0);
      HEAP8[i2 >> 0] = 1;
      _outline_get_cbox(i2 + 4 | 0, i2 + 76 | 0);
      L129 : do if ((HEAP32[i1 + 240 >> 2] | 0) == 3) {
       do if (!(HEAP32[i36 >> 2] | 0)) i68 = 88; else {
        if (HEAP32[i17 >> 2] | 0) {
         i68 = 88;
         break;
        }
        i15 = HEAP32[i78 >> 2] | 0;
        i2 = i1 + 100 | 0;
       } while (0);
       if ((i68 | 0) == 88) {
        i2 = HEAP32[i78 >> 2] | 0;
        i15 = i2;
        i2 = i2 + 92 | 0;
       }
       i2 = HEAP32[i2 >> 2] | 0;
       i4 = HEAP32[i15 + 100 >> 2] | 0;
       i5 = i15 + 28 | 0;
       d3 = +HEAPF64[i29 >> 3];
       i6 = ~~(+HEAPF64[i1 + 248 >> 3] * d3 * 64.0);
       i7 = ~~(d3 * +HEAPF64[i1 + 256 >> 3] * 64.0);
       d3 = +HEAPF64[i47 >> 3];
       d9 = +HEAPF64[i1 + 224 >> 3];
       d58 = +HEAPF64[i1 + 232 >> 3];
       d11 = +HEAPF64[i1 + 264 >> 3];
       i6 = ~~(d9 * +(((i6 | 0) > 64 ? i6 : 64) | 0));
       i7 = ~~(d58 * +(((i7 | 0) > 64 ? i7 : 64) | 0));
       i8 = 0 - i6 | 0;
       i10 = i7 + ~~(+(i4 | 0) * (d58 + -1.0) + +(~~(+(HEAP32[i15 + 104 >> 2] | 0) * d58) | 0)) | 0;
       i14 = i15 + 36 | 0;
       HEAP32[i14 >> 2] = 0;
       HEAP32[i5 >> 2] = 0;
       if (!(_outline_alloc(i5, 4, 4) | 0)) break;
       i68 = ~~(d9 * +(~~(d9 * (d3 * d11) * 64.0) + i2 | 0)) + i6 | 0;
       i7 = 0 - (i4 + i7) | 0;
       i43 = i15 + 44 | 0;
       i44 = i15 + 48 | 0;
       i6 = HEAP32[i43 >> 2] | 0;
       i15 = HEAP32[i5 >> 2] | 0;
       HEAP32[i5 >> 2] = i15 + 1;
       i15 = i6 + (i15 << 3) | 0;
       HEAP32[i15 >> 2] = i8;
       HEAP32[i15 + 4 >> 2] = i7;
       i15 = HEAP32[i44 >> 2] | 0;
       i6 = HEAP32[i14 >> 2] | 0;
       HEAP32[i14 >> 2] = i6 + 1;
       HEAP8[i15 + i6 >> 0] = 1;
       i6 = HEAP32[i43 >> 2] | 0;
       i15 = HEAP32[i5 >> 2] | 0;
       HEAP32[i5 >> 2] = i15 + 1;
       i15 = i6 + (i15 << 3) | 0;
       HEAP32[i15 >> 2] = i68;
       HEAP32[i15 + 4 >> 2] = i7;
       i15 = HEAP32[i44 >> 2] | 0;
       i7 = HEAP32[i14 >> 2] | 0;
       HEAP32[i14 >> 2] = i7 + 1;
       HEAP8[i15 + i7 >> 0] = 1;
       i7 = HEAP32[i43 >> 2] | 0;
       i15 = HEAP32[i5 >> 2] | 0;
       HEAP32[i5 >> 2] = i15 + 1;
       i15 = i7 + (i15 << 3) | 0;
       HEAP32[i15 >> 2] = i68;
       HEAP32[i15 + 4 >> 2] = i10;
       i15 = HEAP32[i44 >> 2] | 0;
       i68 = HEAP32[i14 >> 2] | 0;
       HEAP32[i14 >> 2] = i68 + 1;
       HEAP8[i15 + i68 >> 0] = 1;
       i43 = HEAP32[i43 >> 2] | 0;
       i68 = HEAP32[i5 >> 2] | 0;
       HEAP32[i5 >> 2] = i68 + 1;
       i68 = i43 + (i68 << 3) | 0;
       HEAP32[i68 >> 2] = i8;
       HEAP32[i68 + 4 >> 2] = i10;
       i44 = HEAP32[i44 >> 2] | 0;
       i68 = HEAP32[i14 >> 2] | 0;
       HEAP32[i14 >> 2] = i68 + 1;
       HEAP8[i44 + i68 >> 0] = 5;
      } else {
       i2 = HEAP32[i78 >> 2] | 0;
       i4 = HEAP32[i2 + 4 >> 2] | 0;
       if (i4 | 0) {
        d3 = +HEAPF64[i1 + 248 >> 3];
        if (!(d3 > 0.0)) if (!(+HEAPF64[i1 + 256 >> 3] > 0.0)) break;
        if (!~~(+HEAPF64[i6 >> 3] * 64.0)) break;
        if (!~~(+HEAPF64[i1 + 216 >> 3] * 64.0)) break;
        d58 = +HEAPF64[i29 >> 3];
        i5 = ~~(d3 * d58 * 64.0);
        i6 = ~~(d58 * +HEAPF64[i1 + 256 >> 3] * 64.0);
        if (!((i5 | 0) > 15 | (i6 | 0) > 15)) break;
        _outline_alloc(i2 + 28 | 0, i4 << 1, HEAP32[i2 + 12 >> 2] << 1) | 0;
        i2 = HEAP32[i78 >> 2] | 0;
        _outline_alloc(i2 + 52 | 0, HEAP32[i2 + 4 >> 2] << 1, HEAP32[i2 + 12 >> 2] << 1) | 0;
        i2 = HEAP32[i78 >> 2] | 0;
        i4 = i2 + 28 | 0;
        do if (HEAP32[i2 + 32 >> 2] | 0) {
         if (!(HEAP32[i2 + 56 >> 2] | 0)) break;
         if (_outline_stroke(i4, i2 + 52 | 0, i2 + 4 | 0, i5, i6, 16) | 0) break L129;
        } while (0);
        _ass_msg(HEAP32[i81 >> 2] | 0, 2, 358951, i48);
        _outline_free((HEAP32[i78 >> 2] | 0) + 28 | 0);
        _outline_free((HEAP32[i78 >> 2] | 0) + 52 | 0);
       }
      } while (0);
      _ass_cache_commit(HEAP32[i78 >> 2] | 0, 1);
      i2 = HEAP32[i78 >> 2] | 0;
      i68 = 105;
     } while (0);
     if ((i68 | 0) == 105) {
      i68 = 0;
      HEAP32[i1 + 292 >> 2] = i2;
      HEAP32[i1 + 36 >> 2] = i2 + 4;
      HEAP32[i1 + 40 >> 2] = i2 + 28;
      HEAP32[i1 + 44 >> 2] = i2 + 52;
      i44 = i1 + 48 | 0;
      i43 = i2 + 76 | 0;
      HEAP32[i44 >> 2] = HEAP32[i43 >> 2];
      HEAP32[i44 + 4 >> 2] = HEAP32[i43 + 4 >> 2];
      HEAP32[i44 + 8 >> 2] = HEAP32[i43 + 8 >> 2];
      HEAP32[i44 + 12 >> 2] = HEAP32[i43 + 12 >> 2];
      if (!(HEAP32[i17 >> 2] | 0)) {
       if (!(HEAP32[i36 >> 2] | 0)) i68 = 107;
      } else i68 = 107;
      if ((i68 | 0) == 107) {
       i68 = 0;
       i44 = HEAP32[i2 + 92 >> 2] | 0;
       HEAP32[i1 + 100 >> 2] = i44;
       HEAP32[i1 + 108 >> 2] = i44;
       i44 = HEAP32[i2 + 96 >> 2] | 0;
       HEAP32[i1 + 104 >> 2] = i44;
       HEAP32[i1 + 112 >> 2] = i44;
      }
      HEAP32[i1 + 132 >> 2] = HEAP32[i2 + 100 >> 2];
      HEAP32[i1 + 136 >> 2] = HEAP32[i2 + 104 >> 2];
     }
     i1 = HEAP32[i1 + 336 >> 2] | 0;
    } while ((i1 | 0) != 0);
    if (i18 | 0) {
     i1 = i18 + -1 | 0;
     if (HEAP32[i19 + (i1 * 344 | 0) + 272 >> 2] | 0) if (!(HEAP32[i19 + (i18 * 344 | 0) + 272 >> 2] | 0)) {
      i2 = HEAP32[i19 + (i1 * 344 | 0) + 56 >> 2] | 0;
      L164 : do if (!i1) i1 = 0; else while (1) {
       if ((i2 | 0) != (HEAP32[i19 + (i1 * 344 | 0) + 48 >> 2] | 0)) break L164;
       if (!(HEAP32[i19 + (i1 * 344 | 0) + 272 >> 2] | 0)) break L164;
       i1 = i1 + -1 | 0;
       i2 = HEAP32[i19 + (i1 * 344 | 0) + 56 >> 2] | 0;
       if (!i1) {
        i1 = 0;
        break;
       }
      } while (0);
      i1 = i19 + (i1 * 344 | 0) + 108 | 0;
      if ((i2 | 0) > (HEAP32[i1 >> 2] | 0)) HEAP32[i1 >> 2] = i2;
     }
    }
    i10 = i19 + (i18 * 344 | 0) + 108 | 0;
    i44 = ~~(+HEAPF64[i19 + (i18 * 344 | 0) + 264 >> 3] * +HEAPF64[i47 >> 3] * +HEAPF64[i19 + (i18 * 344 | 0) + 224 >> 3] * 64.0) + (HEAP32[i10 >> 2] | 0) | 0;
    HEAP32[i10 >> 2] = i44;
    i10 = i19 + (i18 * 344 | 0) + 112 | 0;
    HEAP32[i10 >> 2] = ~~(+(HEAP32[i10 >> 2] | 0) + +(i44 | 0) * (+HEAPF64[i19 + (i18 * 344 | 0) + 200 >> 3] / +HEAPF64[i19 + (i18 * 344 | 0) + 208 >> 3] * +HEAPF64[i19 + (i18 * 344 | 0) + 216 >> 3]));
    i18 = i18 + 1 | 0;
    i10 = HEAP32[i88 >> 2] | 0;
   } while ((i18 | 0) < (i10 | 0));
   if ((i10 | 0) > 0) {
    i8 = HEAP32[i73 >> 2] | 0;
    i5 = 0;
    i6 = 0;
    i7 = 0;
    do {
     i1 = i8 + (i5 * 344 | 0) | 0;
     if (i1 | 0) {
      i2 = i6;
      i4 = i7;
      do {
       HEAP32[i1 + 64 >> 2] = i2;
       HEAP32[i1 + 68 >> 2] = i4;
       i2 = (HEAP32[i1 + 100 >> 2] | 0) + i2 | 0;
       i4 = (HEAP32[i1 + 104 >> 2] | 0) + i4 | 0;
       HEAP32[i1 + 288 >> 2] = 0;
       i48 = ~~(+_remainder(+HEAPF64[i1 + 168 >> 3], 6.283185307179586) * 4194304.0);
       HEAP32[i1 + 296 >> 2] = i48;
       i48 = ~~(+_remainder(+HEAPF64[i1 + 176 >> 3], 6.283185307179586) * 4194304.0);
       HEAP32[i1 + 300 >> 2] = i48;
       i48 = ~~(+_remainder(+HEAPF64[i1 + 184 >> 3], 6.283185307179586) * 4194304.0);
       HEAP32[i1 + 304 >> 2] = i48;
       HEAP32[i1 + 308 >> 2] = ~~(+HEAPF64[i1 + 192 >> 3] * 65536.0);
       HEAP32[i1 + 312 >> 2] = ~~(+HEAPF64[i1 + 200 >> 3] * 65536.0);
       i1 = HEAP32[i1 + 336 >> 2] | 0;
      } while ((i1 | 0) != 0);
     }
     i6 = (HEAP32[i8 + (i5 * 344 | 0) + 108 >> 2] | 0) + i6 | 0;
     i7 = (HEAP32[i8 + (i5 * 344 | 0) + 112 >> 2] | 0) + i7 | 0;
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != (i10 | 0));
   }
  }
  _process_karaoke_effects(i81);
  i46 = HEAP32[i62 >> 2] & 12;
  i1 = HEAP32[i71 + 32 >> 2] | 0;
  if (!i1) i1 = HEAP32[(HEAP32[i49 >> 2] | 0) + 108 >> 2] | 0;
  i2 = HEAP32[i71 + 36 >> 2] | 0;
  if (!i2) i2 = HEAP32[(HEAP32[i49 >> 2] | 0) + 112 >> 2] | 0;
  i4 = HEAP32[i71 + 40 >> 2] | 0;
  if (!i4) i4 = HEAP32[(HEAP32[i49 >> 2] | 0) + 116 >> 2] | 0;
  i5 = HEAP32[(HEAP32[i67 >> 2] | 0) + 36 >> 2] | 0;
  d3 = +(i5 - i2 | 0);
  i22 = i81 + 532 | 0;
  i41 = i81 + 184 | 0;
  d9 = +HEAPF64[i41 >> 3];
  i47 = i81 + 64 | 0;
  i2 = HEAP32[i47 >> 2] | 0;
  if (!(HEAP32[i22 >> 2] | 0)) {
   d37 = +(i1 | 0);
   d11 = d37 * +(HEAP32[i81 + 156 >> 2] | 0) / d9 / +(i5 | 0);
   d3 = d3 * +(HEAP32[i81 + 156 >> 2] | 0) / d9 / +(i5 | 0) + +(((i2 | 0) > 0 ? i2 : 0) | 0);
   i1 = (i2 | 0) > 0 ? i2 : 0;
  } else {
   d37 = +(i1 | 0);
   d11 = d37 * +(HEAP32[i81 + 148 >> 2] | 0) / d9 / +(i5 | 0);
   d3 = d3 * +(HEAP32[i81 + 148 >> 2] | 0) / d9 / +(i5 | 0) + +(i2 | 0);
   i1 = i2;
  }
  d16 = d3 - (d11 + +(i1 | 0));
  if ((HEAP32[i60 >> 2] | 0) == 2) {
   i52 = HEAP32[i81 + 688 >> 2] | 0;
   HEAP32[i52 + 16 >> 2] = 0;
   HEAP32[i52 + 20 >> 2] = HEAP32[i88 >> 2];
   HEAP32[i81 + 692 >> 2] = 1;
   _measure_text(i81);
  } else {
   i20 = i81 + 692 | 0;
   HEAP32[i20 >> 2] = 1;
   i1 = HEAP32[i88 >> 2] | 0;
   L197 : do if ((i1 | 0) > 0) {
    i2 = HEAP32[i73 >> 2] | 0;
    i10 = i81 + 716 | 0;
    i14 = i81 + 688 | 0;
    i7 = i2;
    i6 = -1;
    i8 = 0;
    while (1) {
     switch (HEAP32[i2 + (i8 * 344 | 0) >> 2] | 0) {
     case 10:
      {
       i1 = HEAP32[i81 >> 2] | 0;
       HEAP32[i51 >> 2] = i8;
       _ass_msg(i1, 7, 358972, i51);
       i1 = i8;
       i2 = 2;
       i68 = 145;
       break;
      }
     case 32:
      {
       i5 = i7;
       i6 = i8;
       break;
      }
     default:
      if (!(+((HEAP32[i2 + (i8 * 344 | 0) + 64 >> 2] | 0) + (HEAP32[i2 + (i8 * 344 | 0) + 56 >> 2] | 0) | 0) * .015625 - +((HEAP32[i7 + 64 >> 2] | 0) + (HEAP32[i7 + 48 >> 2] | 0) | 0) * .015625 >= d16)) i5 = i7; else if ((HEAP32[i50 >> 2] | 0) == 2) i5 = i7; else if ((i6 | 0) > -1) {
       i1 = HEAP32[i81 >> 2] | 0;
       HEAP32[i52 >> 2] = i6;
       _ass_msg(i1, 7, 358996, i52);
       i1 = i6;
       i2 = 1;
       i68 = 147;
      } else {
       i1 = i6;
       i2 = 1;
       i68 = 145;
      }
     }
     if ((i68 | 0) == 145) {
      i68 = 0;
      if ((i1 | 0) == -1) {
       i5 = i7;
       i1 = HEAP32[i88 >> 2] | 0;
      } else i68 = 147;
     }
     if ((i68 | 0) == 147) {
      i68 = 0;
      i5 = i1 + 1 | 0;
      i1 = HEAP32[i10 >> 2] | 0;
      if ((HEAP32[i20 >> 2] | 0) >= (i1 | 0)) {
       HEAP32[i10 >> 2] = i1 << 1;
       i49 = _realloc(HEAP32[i14 >> 2] | 0, i1 * 48 | 0) | 0;
       HEAP32[i14 >> 2] = i49;
      }
      i1 = HEAP32[i88 >> 2] | 0;
      if ((i5 | 0) < (i1 | 0)) {
       i6 = HEAP32[i73 >> 2] | 0;
       HEAP8[i6 + (i5 * 344 | 0) + 80 >> 0] = i2;
       HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
       i5 = i6 + (i5 * 344 | 0) | 0;
       i6 = -1;
      } else i5 = i7;
     }
     i2 = i8 + 1 | 0;
     if ((i2 | 0) >= (i1 | 0)) {
      i19 = i1;
      break L197;
     }
     i7 = i5;
     i8 = i2;
     i2 = HEAP32[i73 >> 2] | 0;
    }
   } else i19 = i1; while (0);
   if ((HEAP32[i50 >> 2] | 0) != 1) {
    i18 = HEAP32[i73 >> 2] | 0;
    if ((i19 | 0) >= 0) do {
     i8 = 0;
     i2 = i18;
     i1 = 1;
     i17 = 0;
     while (1) {
      i15 = i18 + (i17 * 344 | 0) | 0;
      i14 = (i17 | 0) == (i19 | 0);
      if (i14) i68 = 158; else if (!(HEAP8[i18 + (i17 * 344 | 0) + 80 >> 0] | 0)) i5 = i8; else i68 = 158;
      if ((i68 | 0) == 158) {
       i68 = 0;
       do if (i8) {
        i10 = i2 + 80 | 0;
        if ((HEAP8[i10 >> 0] | 0) == 1) i5 = i2; else break;
        while (1) {
         i5 = i5 + -344 | 0;
         if (i5 >>> 0 <= i8 >>> 0) break;
         if ((HEAP32[i5 >> 2] | 0) != 32) {
          i68 = 163;
          break;
         }
        }
        L234 : do if ((i68 | 0) == 163) while (1) {
         i68 = 0;
         i5 = i5 + -344 | 0;
         if (i5 >>> 0 <= i8 >>> 0) break L234;
         if ((HEAP32[i5 >> 2] | 0) == 32) break; else i68 = 163;
        } while (0);
        L239 : do if (i5 >>> 0 > i8 >>> 0) {
         i6 = i5;
         do {
          if ((HEAP32[i6 >> 2] | 0) != 32) break L239;
          i6 = i6 + -344 | 0;
         } while (i6 >>> 0 > i8 >>> 0);
        } else i6 = i5; while (0);
        i7 = (HEAP32[i5 >> 2] | 0) == 32 ? i5 + 344 | 0 : i5;
        i51 = (HEAP32[i8 + 64 >> 2] | 0) + (HEAP32[i8 + 48 >> 2] | 0) | 0;
        d57 = +((HEAP32[i2 + -280 >> 2] | 0) + (HEAP32[i2 + -288 >> 2] | 0) - i51 | 0) * .015625;
        i52 = i15 + -344 | 0;
        i52 = (HEAP32[i52 + 64 >> 2] | 0) + (HEAP32[i52 + 48 + 8 >> 2] | 0) | 0;
        d58 = +(i52 - (HEAP32[i2 + 48 >> 2] | 0) - (HEAP32[i2 + 64 >> 2] | 0) | 0) * .015625;
        d53 = +((HEAP32[i6 + 56 >> 2] | 0) - i51 + (HEAP32[i6 + 64 >> 2] | 0) | 0) * .015625;
        d54 = +(i52 - (HEAP32[i7 + 48 >> 2] | 0) - (HEAP32[i7 + 64 >> 2] | 0) | 0) * .015625;
        if (!((d53 < d54 ? d54 - d53 : d53 - d54) < (d57 < d58 ? d58 - d57 : d57 - d58))) break;
        i5 = i7 + 80 | 0;
        i1 = (i7 | 0) == (i18 | 0);
        if (i1 | (HEAP8[i5 >> 0] | 0) != 0) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
        if (!i1) HEAP8[i5 >> 0] = 1;
        HEAP8[i10 >> 0] = 0;
        i1 = 0;
       } while (0);
       if (i14) break; else {
        i5 = i2;
        i2 = i15;
       }
      }
      if ((i17 | 0) < (i19 | 0)) {
       i8 = i5;
       i17 = i17 + 1 | 0;
      } else break;
     }
    } while (!(i1 | 0));
   }
   if ((HEAP32[i20 >> 2] | 0) <= 0) ___assert_fail(359013, 358904, 1502, 359037);
   _measure_text(i81);
   i10 = HEAP32[i73 >> 2] | 0;
   i14 = HEAP32[i88 >> 2] | 0;
   i1 = i14 + -1 | 0;
   if (!i1) {
    i2 = 0;
    i1 = i10;
    i68 = 181;
   } else {
    L259 : do {
     switch (HEAP32[i10 + (i1 * 344 | 0) >> 2] | 0) {
     case 10:
     case 32:
      break;
     default:
      break L259;
     }
     if (HEAP8[i10 + (i1 * 344 | 0) + 80 >> 0] | 0) break;
     i68 = i10 + (i1 * 344 | 0) + 4 | 0;
     HEAP32[i68 >> 2] = (HEAP32[i68 >> 2] | 0) + 1;
     i1 = i1 + -1 | 0;
    } while ((i1 | 0) != 0);
    if ((i14 | 0) > 0) {
     i2 = 0;
     i1 = i10;
     i68 = 181;
    } else i68 = 197;
   }
   if ((i68 | 0) == 181) {
    L265 : while (1) {
     i68 = 0;
     switch (HEAP32[i1 >> 2] | 0) {
     case 10:
     case 32:
      break;
     default:
      {
       i1 = 0;
       break L265;
      }
     }
     if (HEAP8[i1 + 80 >> 0] | 0) {
      i1 = 0;
      break;
     }
     i1 = i1 + 4 | 0;
     HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
     i1 = i2 + 1 | 0;
     if ((i1 | 0) < (i14 | 0)) {
      i2 = i1;
      i1 = i10 + (i1 * 344 | 0) | 0;
      i68 = 181;
     } else {
      i1 = 0;
      break;
     }
    }
    do {
     L271 : do if (HEAP8[i10 + (i1 * 344 | 0) + 80 >> 0] | 0) {
      i2 = i1 + -1 | 0;
      L273 : do if (i2 | 0) while (1) {
       switch (HEAP32[i10 + (i2 * 344 | 0) >> 2] | 0) {
       case 10:
       case 32:
        break;
       default:
        break L273;
       }
       if (HEAP8[i10 + (i2 * 344 | 0) + 80 >> 0] | 0) break L273;
       i52 = i10 + (i2 * 344 | 0) + 4 | 0;
       HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
       i2 = i2 + -1 | 0;
       if (!i2) break L273;
      } while (0);
      switch (HEAP32[i10 + (i1 * 344 | 0) >> 2] | 0) {
      case 10:
      case 32:
       break;
      default:
       break L271;
      }
      while (1) {
       i2 = i10 + (i1 * 344 | 0) + 4 | 0;
       HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
       i2 = i1 + 1 | 0;
       if ((i2 | 0) >= (i14 | 0)) break L271;
       switch (HEAP32[i10 + (i2 * 344 | 0) >> 2] | 0) {
       case 10:
       case 32:
        break;
       default:
        break L271;
       }
       if (!(HEAP8[i10 + (i2 * 344 | 0) + 80 >> 0] | 0)) i1 = i2; else break L271;
      }
     } while (0);
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < (i14 | 0));
    if ((i14 | 0) > 0) {
     i1 = i10;
     i2 = 0;
     while (1) {
      if (!(HEAP32[i1 + 4 >> 2] | 0)) {
       i5 = i1;
       break;
      }
      i2 = i2 + 1 | 0;
      i1 = i10 + (i2 * 344 | 0) | 0;
      if ((i2 | 0) >= (i14 | 0)) {
       i5 = i1;
       break;
      }
     }
     i1 = i81 + 688 | 0;
     i8 = i81 + 40 | 0;
     i2 = 1;
     d9 = 0.0;
     d3 = +(0 - (HEAP32[i5 + 64 >> 2] | 0) | 0) * .015625;
     i6 = 0;
     do {
      i5 = i10 + (i6 * 344 | 0) | 0;
      if (!(HEAP8[i10 + (i6 * 344 | 0) + 80 >> 0] | 0)) {
       i7 = i6;
       i6 = HEAP32[i10 + (i6 * 344 | 0) + 64 >> 2] | 0;
      } else {
       L294 : do if ((i6 | 0) < (i14 | 0)) do {
        if (!(HEAP32[i5 + 4 >> 2] | 0)) break L294;
        if ((HEAP32[i5 >> 2] | 0) == 10) break L294;
        i6 = i6 + 1 | 0;
        i5 = i10 + (i6 * 344 | 0) | 0;
       } while ((i6 | 0) < (i14 | 0)); while (0);
       i52 = HEAP32[i1 >> 2] | 0;
       i7 = i2 + -1 | 0;
       d3 = +HEAPF64[i52 + (i7 * 24 | 0) + 8 >> 3] + +HEAPF64[i52 + (i2 * 24 | 0) >> 3];
       HEAP32[i52 + (i7 * 24 | 0) + 20 >> 2] = i6 - (HEAP32[i52 + (i7 * 24 | 0) + 16 >> 2] | 0);
       HEAP32[i52 + (i2 * 24 | 0) + 16 >> 2] = i6;
       i52 = HEAP32[i5 + 64 >> 2] | 0;
       i2 = i2 + 1 | 0;
       d9 = d9 + (d3 + +HEAPF64[i8 >> 3]);
       d3 = +(0 - i52 | 0) * .015625;
       i7 = i6;
       i6 = i52;
      }
      HEAP32[i5 + 64 >> 2] = ~~(d3 * 64.0) + i6;
      i6 = i5 + 68 | 0;
      HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + ~~(d9 * 64.0);
      i6 = i7 + 1 | 0;
     } while ((i6 | 0) < (i14 | 0));
    } else i68 = 197;
   }
   if ((i68 | 0) == 197) {
    i2 = 1;
    i1 = i81 + 688 | 0;
   }
   i51 = HEAP32[i1 >> 2] | 0;
   i52 = i2 + -1 | 0;
   HEAP32[i51 + (i52 * 24 | 0) + 20 >> 2] = i14 - (HEAP32[i51 + (i52 * 24 | 0) + 16 >> 2] | 0);
  }
  i21 = _ass_shaper_reorder(HEAP32[i72 >> 2] | 0, i83) | 0;
  if (!i21) {
   _ass_msg(HEAP32[i81 >> 2] | 0, 1, 359054, i55);
   _ass_shaper_cleanup(HEAP32[i72 >> 2] | 0, i83);
   _ass_cache_dec_ref(HEAP32[i84 >> 2] | 0);
   _free(HEAP32[i85 >> 2] | 0);
   _ass_drawing_free(HEAP32[i87 >> 2] | 0);
   HEAP32[i84 >> 2] = 0;
   HEAP32[i85 >> 2] = 0;
   HEAP32[i87 >> 2] = 0;
   if ((HEAP32[i88 >> 2] | 0) > 0) {
    i1 = 0;
    do {
     _ass_drawing_free(HEAP32[(HEAP32[i73 >> 2] | 0) + (i1 * 344 | 0) + 32 >> 2] | 0);
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < (HEAP32[i88 >> 2] | 0));
   }
   HEAP32[i88 >> 2] = 0;
   i1 = 0;
  } else {
   i1 = HEAP32[i88 >> 2] | 0;
   if ((i1 | 0) > 0) {
    i18 = HEAP32[i83 >> 2] | 0;
    i19 = i81 + 688 | 0;
    i20 = i81 + 40 | 0;
    i15 = 0;
    d9 = 0.0;
    d11 = 0.0;
    i7 = 1;
    i6 = 0;
    i5 = 0;
    while (1) {
     i14 = i21 + (i15 << 2) | 0;
     i8 = HEAP32[i14 >> 2] | 0;
     i2 = i18 + (i8 * 344 | 0) | 0;
     if (!(HEAP8[i18 + (i15 * 344 | 0) + 80 >> 0] | 0)) {
      d3 = +HEAPF64[i18 + (i8 * 344 | 0) + 200 >> 3];
      if (d9 != d3) {
       d58 = +(i6 | 0);
       d12 = d58;
       i17 = i7;
       i10 = i6;
       i7 = ~~(+(i5 | 0) - (d58 - d11) * (d9 / +HEAPF64[i18 + (i8 * 344 | 0) + 208 >> 3] * +HEAPF64[i18 + (i8 * 344 | 0) + 216 >> 3]));
      } else {
       d12 = d11;
       i17 = i7;
       i10 = i6;
       i7 = i5;
      }
     } else {
      i55 = HEAP32[i19 >> 2] | 0;
      d12 = 0.0;
      i17 = i7 + 1 | 0;
      i10 = 0;
      i7 = ~~(+(i5 | 0) - (+(i6 | 0) - d11) * (d9 / +HEAPF64[i18 + (i8 * 344 | 0) + 208 >> 3] * +HEAPF64[i18 + (i8 * 344 | 0) + 216 >> 3])) + ~~(+HEAPF64[i55 + ((i7 + -1 | 0) * 24 | 0) + 8 >> 3] * 64.0) + ~~(+HEAPF64[i55 + (i7 * 24 | 0) >> 3] * 64.0) + ~~(+HEAPF64[i20 >> 3] * 64.0) | 0;
      d3 = +HEAPF64[i18 + (i8 * 344 | 0) + 200 >> 3];
     }
     if (!(HEAP32[i18 + (i8 * 344 | 0) + 4 >> 2] | 0)) {
      i5 = i10;
      i6 = i7;
      do {
       HEAP32[i2 + 64 >> 2] = (HEAP32[i2 + 72 >> 2] | 0) + i5;
       HEAP32[i2 + 68 >> 2] = (HEAP32[i2 + 76 >> 2] | 0) + i6;
       i5 = (HEAP32[i2 + 100 >> 2] | 0) + i5 | 0;
       i6 = (HEAP32[i2 + 104 >> 2] | 0) + i6 | 0;
       i2 = HEAP32[i2 + 336 >> 2] | 0;
      } while ((i2 | 0) != 0);
      i5 = HEAP32[i14 >> 2] | 0;
      i2 = (HEAP32[i18 + (i5 * 344 | 0) + 108 >> 2] | 0) + i10 | 0;
      i5 = (HEAP32[i18 + (i5 * 344 | 0) + 112 >> 2] | 0) + i7 | 0;
     } else {
      i2 = i10;
      i5 = i7;
     }
     i15 = i15 + 1 | 0;
     if ((i15 | 0) == (i1 | 0)) break; else {
      d9 = d3;
      d11 = d12;
      i7 = i17;
      i6 = i2;
     }
    }
   }
  }
  i14 = HEAP32[i73 >> 2] | 0;
  i5 = HEAP32[i62 >> 2] | 0;
  i10 = HEAP32[i56 >> 2] | 0;
  i15 = HEAP32[i60 >> 2] | 0;
  L326 : do if ((i15 | 0) == 2) i68 = 296; else {
   i1 = HEAP32[i88 >> 2] | 0;
   if ((i1 | 0) < 0) {
    d58 = 0.0;
    d3 = 0.0;
    d57 = 0.0;
    d16 = 0.0;
   } else {
    d9 = 0.0;
    i2 = 0;
    d3 = 0.0;
    while (1) {
     if ((i2 | 0) == (i1 | 0)) i68 = 273; else if (HEAP8[i14 + (i2 * 344 | 0) + 80 >> 0] | 0) i68 = 273;
     if ((i68 | 0) == 273) {
      i68 = 0;
      d9 = d9 > d3 ? d9 : d3;
      d3 = 0.0;
     }
     if ((i2 | 0) >= (i1 | 0)) break;
     L336 : do if (!(HEAP32[i14 + (i2 * 344 | 0) + 4 >> 2] | 0)) {
      switch (HEAP32[i14 + (i2 * 344 | 0) >> 2] | 0) {
      case 0:
      case 10:
       break L336;
      default:
       {}
      }
      d3 = d3 + +(HEAP32[i14 + (i2 * 344 | 0) + 108 >> 2] | 0) * .015625;
     } while (0);
     i2 = i2 + 1 | 0;
    }
    i2 = i5 & 255;
    d13 = d16 - d9;
    d11 = d13 * .5;
    d12 = d9 + d11;
    switch (i2 & 3) {
    case 1:
     {
      if ((i10 | 0) == 3) {
       i2 = -1;
       i7 = 0;
       while (1) {
        if ((i7 | 0) == (i1 | 0)) i68 = 247; else if (HEAP8[i14 + (i7 * 344 | 0) + 80 >> 0] | 0) i68 = 247;
        if ((i68 | 0) == 247) {
         i68 = 0;
         i2 = i2 + 1 | 0;
         if ((i2 | 0) < (i7 | 0)) {
          i6 = ~~((d9 - d3) * 64.0);
          do {
           i5 = i14 + (i2 * 344 | 0) | 0;
           if (i5 | 0) do {
            i56 = i5 + 64 | 0;
            HEAP32[i56 >> 2] = (HEAP32[i56 >> 2] | 0) + i6;
            i5 = HEAP32[i5 + 336 >> 2] | 0;
           } while ((i5 | 0) != 0);
           i2 = i2 + 1 | 0;
          } while ((i2 | 0) != (i7 | 0));
         }
         i2 = i7 + -1 | 0;
         d3 = 0.0;
        }
        if ((i7 | 0) >= (i1 | 0)) {
         i68 = 296;
         break L326;
        }
        L389 : do if (!(HEAP32[i14 + (i7 * 344 | 0) + 4 >> 2] | 0)) {
         switch (HEAP32[i14 + (i7 * 344 | 0) >> 2] | 0) {
         case 0:
         case 10:
          break L389;
         default:
          {}
         }
         d3 = d3 + +(HEAP32[i14 + (i7 * 344 | 0) + 108 >> 2] | 0) * .015625;
        } while (0);
        i7 = i7 + 1 | 0;
       }
      }
      i8 = (i10 | 0) == 2;
      i2 = -1;
      i7 = 0;
      while (1) {
       if ((i7 | 0) == (i1 | 0)) i68 = 260; else if (HEAP8[i14 + (i7 * 344 | 0) + 80 >> 0] | 0) i68 = 260;
       if ((i68 | 0) == 260) {
        i68 = 0;
        i2 = i2 + 1 | 0;
        if ((i2 | 0) < (i7 | 0)) {
         i6 = i8 ? ~~((d9 - d3) * .5 * 64.0) : 0;
         do {
          i5 = i14 + (i2 * 344 | 0) | 0;
          if (i5 | 0) do {
           i56 = i5 + 64 | 0;
           HEAP32[i56 >> 2] = (HEAP32[i56 >> 2] | 0) + i6;
           i5 = HEAP32[i5 + 336 >> 2] | 0;
          } while ((i5 | 0) != 0);
          i2 = i2 + 1 | 0;
         } while ((i2 | 0) != (i7 | 0));
        }
        i2 = i7 + -1 | 0;
        d3 = 0.0;
       }
       if ((i7 | 0) >= (i1 | 0)) {
        i68 = 296;
        break L326;
       }
       L411 : do if (!(HEAP32[i14 + (i7 * 344 | 0) + 4 >> 2] | 0)) {
        switch (HEAP32[i14 + (i7 * 344 | 0) >> 2] | 0) {
        case 0:
        case 10:
         break L411;
        default:
         {}
        }
        d3 = d3 + +(HEAP32[i14 + (i7 * 344 | 0) + 108 >> 2] | 0) * .015625;
       } while (0);
       i7 = i7 + 1 | 0;
      }
     }
    case 2:
     {
      i2 = -1;
      i7 = 0;
      while (1) {
       if ((i7 | 0) == (i1 | 0)) i68 = 229; else if (HEAP8[i14 + (i7 * 344 | 0) + 80 >> 0] | 0) i68 = 229;
       if ((i68 | 0) == 229) {
        i68 = 0;
        switch (i10 | 0) {
        case 1:
         {
          d3 = d11;
          break;
         }
        case 3:
         {
          d3 = d12 - d3;
          break;
         }
        default:
         d3 = (d16 - d3) * .5;
        }
        i2 = i2 + 1 | 0;
        if ((i2 | 0) < (i7 | 0)) {
         i6 = ~~(d3 * 64.0);
         do {
          i5 = i14 + (i2 * 344 | 0) | 0;
          if (i5 | 0) do {
           i56 = i5 + 64 | 0;
           HEAP32[i56 >> 2] = (HEAP32[i56 >> 2] | 0) + i6;
           i5 = HEAP32[i5 + 336 >> 2] | 0;
          } while ((i5 | 0) != 0);
          i2 = i2 + 1 | 0;
         } while ((i2 | 0) != (i7 | 0));
        }
        i2 = i7 + -1 | 0;
        d3 = 0.0;
       }
       if ((i7 | 0) >= (i1 | 0)) {
        i68 = 296;
        break L326;
       }
       L436 : do if (!(HEAP32[i14 + (i7 * 344 | 0) + 4 >> 2] | 0)) {
        switch (HEAP32[i14 + (i7 * 344 | 0) >> 2] | 0) {
        case 0:
        case 10:
         break L436;
        default:
         {}
        }
        d3 = d3 + +(HEAP32[i14 + (i7 * 344 | 0) + 108 >> 2] | 0) * .015625;
       } while (0);
       i7 = i7 + 1 | 0;
      }
     }
    default:
     {
      i8 = (i2 & 3) == 3;
      i2 = -1;
      i7 = 0;
      while (1) {
       if ((i7 | 0) == (i1 | 0)) i68 = 281; else if (HEAP8[i14 + (i7 * 344 | 0) + 80 >> 0] | 0) i68 = 281;
       if ((i68 | 0) == 281) {
        i68 = 0;
        L349 : do if (i8) switch (i10 | 0) {
        case 1:
         {
          d3 = d13;
          break L349;
         }
        case 2:
         {
          d3 = d13 + (d9 - d3) * .5;
          break L349;
         }
        default:
         {
          d3 = d16 - d3;
          break L349;
         }
        } else d3 = 0.0; while (0);
        i2 = i2 + 1 | 0;
        if ((i2 | 0) < (i7 | 0)) {
         i6 = ~~(d3 * 64.0);
         do {
          i5 = i14 + (i2 * 344 | 0) | 0;
          if (i5 | 0) do {
           i56 = i5 + 64 | 0;
           HEAP32[i56 >> 2] = (HEAP32[i56 >> 2] | 0) + i6;
           i5 = HEAP32[i5 + 336 >> 2] | 0;
          } while ((i5 | 0) != 0);
          i2 = i2 + 1 | 0;
         } while ((i2 | 0) != (i7 | 0));
        }
        i2 = i7 + -1 | 0;
        d3 = 0.0;
       }
       if ((i7 | 0) >= (i1 | 0)) {
        i68 = 296;
        break L326;
       }
       L366 : do if (!(HEAP32[i14 + (i7 * 344 | 0) + 4 >> 2] | 0)) {
        switch (HEAP32[i14 + (i7 * 344 | 0) >> 2] | 0) {
        case 0:
        case 10:
         break L366;
        default:
         {}
        }
        d3 = d3 + +(HEAP32[i14 + (i7 * 344 | 0) + 108 >> 2] | 0) * .015625;
       } while (0);
       i7 = i7 + 1 | 0;
      }
     }
    }
   }
  } while (0);
  if ((i68 | 0) == 296) if ((i1 | 0) > 0) {
   d13 = +(HEAP32[i14 + 68 >> 2] | 0);
   d16 = +HEAPF64[HEAP32[i81 + 688 >> 2] >> 3];
   d27 = +HEAPF64[i81 + 704 >> 3];
   i2 = 0;
   d11 = 32.0e3;
   d12 = -32.0e3;
   d9 = 32.0e3;
   d3 = -32.0e3;
   do {
    if (!(HEAP32[i14 + (i2 * 344 | 0) + 4 >> 2] | 0)) {
     d12 = +(HEAP32[i14 + (i2 * 344 | 0) + 64 >> 2] | 0) * .015625;
     d11 = d12 + +(HEAP32[i14 + (i2 * 344 | 0) + 108 >> 2] | 0) * .015625;
     d9 = d9 > d12 ? d12 : d9;
     d3 = d3 > d11 ? d3 : d11;
     d11 = d9;
     d12 = d3;
    }
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i1 | 0));
   d16 = d13 * .015625 - d16;
   d58 = d11;
   d3 = d16;
   d57 = d12;
   d16 = d16 + d27;
  } else {
   d58 = 0.0;
   d3 = 0.0;
   d57 = 0.0;
   d16 = 0.0;
  }
  L450 : do switch (i15 | 0) {
  case 3:
  case 0:
   {
    d9 = +HEAPF64[i41 >> 3];
    i2 = HEAP32[(HEAP32[i67 >> 2] | 0) + 36 >> 2] | 0;
    i1 = HEAP32[i47 >> 2] | 0;
    if (!(HEAP32[i22 >> 2] | 0)) {
     d9 = d37 * +(HEAP32[i81 + 156 >> 2] | 0) / d9 / +(i2 | 0);
     i1 = (i1 | 0) > 0 ? i1 : 0;
    } else d9 = d37 * +(HEAP32[i81 + 148 >> 2] | 0) / d9 / +(i2 | 0);
    d12 = d9 + +(i1 | 0);
    i68 = 316;
    break;
   }
  case 2:
   switch (HEAP32[i81 + 492 >> 2] | 0) {
   case 1:
    {
     i2 = HEAP32[(HEAP32[i67 >> 2] | 0) + 36 >> 2] | 0;
     d9 = +(i2 - (HEAP32[i81 + 496 >> 2] | 0) | 0);
     d11 = +HEAPF64[i41 >> 3];
     i1 = HEAP32[i47 >> 2] | 0;
     if (!(HEAP32[i22 >> 2] | 0)) {
      d9 = d9 * +(HEAP32[i81 + 156 >> 2] | 0) / d11 / +(i2 | 0);
      i1 = (i1 | 0) > 0 ? i1 : 0;
     } else d9 = d9 * +(HEAP32[i81 + 148 >> 2] | 0) / d11 / +(i2 | 0);
     d11 = d9 + +(i1 | 0);
     i68 = 317;
     break L450;
    }
   case 0:
    {
     d9 = +(HEAP32[i81 + 496 >> 2] | 0);
     d11 = +HEAPF64[i41 >> 3];
     i2 = HEAP32[(HEAP32[i67 >> 2] | 0) + 36 >> 2] | 0;
     i1 = HEAP32[i47 >> 2] | 0;
     if (!(HEAP32[i22 >> 2] | 0)) {
      d9 = d9 * +(HEAP32[i81 + 156 >> 2] | 0) / d11 / +(i2 | 0);
      i1 = (i1 | 0) > 0 ? i1 : 0;
     } else d9 = d9 * +(HEAP32[i81 + 148 >> 2] | 0) / d11 / +(i2 | 0);
     d11 = d9 + +(i1 | 0) - (d57 - d58);
     i68 = 317;
     break L450;
    }
   default:
    {
     d11 = 0.0;
     i68 = 317;
     break L450;
    }
   }
  default:
   {
    d12 = 0.0;
    i68 = 316;
   }
  } while (0);
  L468 : do if ((i68 | 0) == 316) {
   switch (i15 | 0) {
   case 2:
   case 0:
    {
     d11 = d12;
     i68 = 317;
     break L468;
    }
   case 3:
    break;
   default:
    {
     d11 = d12;
     d9 = 0.0;
     i2 = i15;
     i68 = 347;
     break L468;
    }
   }
   switch (HEAP32[i81 + 492 >> 2] | 0) {
   case 2:
    {
     d9 = +((HEAP32[i81 + 496 >> 2] | 0) + (HEAP32[i64 >> 2] | 0) | 0);
     if (!(HEAP32[i22 >> 2] | 0)) {
      i68 = HEAP32[i81 + 56 >> 2] | 0;
      d11 = d9 * +(HEAP32[i81 + 152 >> 2] | 0) / +(HEAP32[(HEAP32[i67 >> 2] | 0) + 40 >> 2] | 0);
      d9 = +(((i68 | 0) > 0 ? i68 : 0) | 0);
     } else {
      d11 = +(HEAP32[i81 + 56 >> 2] | 0);
      d9 = d9 * +(HEAP32[i81 + 144 >> 2] | 0) / +(HEAP32[(HEAP32[i67 >> 2] | 0) + 40 >> 2] | 0);
     }
     d13 = d9 + d11 - (d16 - d3);
     i68 = 358;
     break L468;
    }
   case 3:
    {
     d9 = +((HEAP32[i66 >> 2] | 0) - (HEAP32[i81 + 496 >> 2] | 0) | 0);
     if (!(HEAP32[i22 >> 2] | 0)) {
      i68 = HEAP32[i81 + 56 >> 2] | 0;
      d11 = d9 * +(HEAP32[i81 + 152 >> 2] | 0) / +(HEAP32[(HEAP32[i67 >> 2] | 0) + 40 >> 2] | 0);
      d9 = +(((i68 | 0) > 0 ? i68 : 0) | 0);
     } else {
      d11 = +(HEAP32[i81 + 56 >> 2] | 0);
      d9 = d9 * +(HEAP32[i81 + 144 >> 2] | 0) / +(HEAP32[(HEAP32[i67 >> 2] | 0) + 40 >> 2] | 0);
     }
     d13 = d9 + d11;
     i68 = 358;
     break L468;
    }
   default:
    {
     d13 = 0.0;
     i68 = 358;
     break L468;
    }
   }
  } while (0);
  L482 : do if ((i68 | 0) == 317) switch (i46 & 15) {
  case 4:
   {
    d9 = +(i4 | 0);
    if (!(HEAP32[i22 >> 2] | 0)) {
     d9 = d9 * +(HEAP32[i81 + 152 >> 2] | 0) / +(HEAP32[(HEAP32[i67 >> 2] | 0) + 40 >> 2] | 0);
     if (!(HEAP32[i81 + 72 >> 2] | 0)) {
      i68 = HEAP32[i81 + 56 >> 2] | 0;
      d9 = d9 + +(((i68 | 0) > 0 ? i68 : 0) | 0);
     }
    } else d9 = +(HEAP32[i81 + 56 >> 2] | 0) + d9 * +(HEAP32[i81 + 144 >> 2] | 0) / +(HEAP32[(HEAP32[i67 >> 2] | 0) + 40 >> 2] | 0);
    d9 = d9 + +HEAPF64[HEAP32[i81 + 688 >> 2] >> 3];
    i2 = i15;
    i68 = 347;
    break L482;
   }
  case 8:
   {
    d9 = +(HEAP32[(HEAP32[i67 >> 2] | 0) + 40 >> 2] | 0);
    d12 = d9 * .5;
    if (!(HEAP32[i22 >> 2] | 0)) {
     i68 = HEAP32[i81 + 56 >> 2] | 0;
     d13 = d12 * +(HEAP32[i81 + 152 >> 2] | 0) / d9;
     d9 = +(((i68 | 0) > 0 ? i68 : 0) | 0);
    } else {
     d13 = +(HEAP32[i81 + 56 >> 2] | 0);
     d9 = d12 * +(HEAP32[i81 + 144 >> 2] | 0) / d9;
    }
    d9 = d9 + d13 - (d3 + d16) * .5;
    i2 = i15;
    i68 = 347;
    break L482;
   }
  default:
   {
    i1 = HEAP32[i22 >> 2] | 0;
    if (!i1) d13 = +HEAPF64[i81 + 48 >> 3]; else d13 = 0.0;
    if (i46) {
     _ass_msg(HEAP32[i81 >> 2] | 0, 6, 359077, i59);
     i1 = HEAP32[i22 >> 2] | 0;
    }
    i2 = HEAP32[(HEAP32[i67 >> 2] | 0) + 40 >> 2] | 0;
    d9 = +(i2 - i4 | 0);
    do if (!i1) {
     i1 = HEAP32[i81 + 56 >> 2] | 0;
     d9 = d9 * +(HEAP32[i81 + 152 >> 2] | 0) / +(i2 | 0) + +(((i1 | 0) > 0 ? i1 : 0) | 0);
     if (!(HEAP32[i81 + 72 >> 2] | 0)) d12 = d9; else {
      i68 = HEAP32[i81 + 60 >> 2] | 0;
      d12 = d9 + +(((i68 | 0) > 0 ? i68 : 0) | 0);
     }
     d9 = +(HEAP32[i81 + 152 >> 2] | 0) * 0.0 / +(i2 | 0);
     if (HEAP32[i81 + 72 >> 2] | 0) break;
     d9 = d9 + +(((i1 | 0) > 0 ? i1 : 0) | 0);
    } else {
     i68 = HEAP32[i81 + 56 >> 2] | 0;
     d12 = +(i68 | 0) + d9 * +(HEAP32[i81 + 144 >> 2] | 0) / +(i2 | 0);
     d9 = +(i68 | 0) + +(HEAP32[i81 + 144 >> 2] | 0) * 0.0 / +(i2 | 0);
    } while (0);
    d53 = +HEAPF64[HEAP32[i81 + 688 >> 2] >> 3];
    d54 = d53 + (d12 + d13 * (d9 - d12) / 100.0 - +HEAPF64[i81 + 704 >> 3]);
    d9 = d9 + d53;
    d9 = d13 > 0.0 & d54 < d9 ? d9 : d54;
    i2 = HEAP32[i60 >> 2] | 0;
    i68 = 347;
    break L482;
   }
  } while (0);
  L511 : do if ((i68 | 0) == 347) {
   if ((i2 | 0) == 1) {
    i60 = HEAP32[i62 >> 2] | 0;
    i1 = i60 & 12;
    switch (i60 & 3) {
    case 1:
     {
      d11 = d58;
      break;
     }
    case 2:
     {
      d11 = (d58 + d57) * .5;
      break;
     }
    case 3:
     {
      d11 = d57;
      break;
     }
    default:
     d11 = 0.0;
    }
    switch (i1 & 15) {
    case 4:
     {
      d9 = d3;
      break;
     }
    case 8:
     {
      d9 = (d3 + d16) * .5;
      break;
     }
    case 0:
     {
      d9 = d16;
      break;
     }
    default:
     d9 = 0.0;
    }
    i60 = HEAP32[i67 >> 2] | 0;
    d11 = +HEAPF64[i61 >> 3] * +(HEAP32[i81 + 148 >> 2] | 0) / +HEAPF64[i41 >> 3] / +(HEAP32[i60 + 36 >> 2] | 0) + +(HEAP32[i47 >> 2] | 0) - d11;
    d9 = +(HEAP32[i81 + 56 >> 2] | 0) + +HEAPF64[i81 + 304 >> 3] * +(HEAP32[i81 + 144 >> 2] | 0) / +(HEAP32[i60 + 40 >> 2] | 0) - d9;
   }
   switch (i2 | 0) {
   case 3:
   case 2:
   case 0:
    {
     d12 = d11;
     d13 = d9;
     i68 = 358;
     break L511;
    }
   case 1:
    break;
   default:
    {
     d54 = d11;
     d53 = d9;
     break L511;
    }
   }
   i61 = HEAP32[i67 >> 2] | 0;
   d54 = +(HEAP32[i81 + 148 >> 2] | 0);
   d53 = +(HEAP32[i61 + 36 >> 2] | 0);
   d45 = +(HEAP32[i47 >> 2] | 0);
   HEAP32[i63 >> 2] = ~~(d45 + +(HEAP32[i63 >> 2] | 0) * d54 / d53);
   HEAP32[i65 >> 2] = ~~(d45 + +(HEAP32[i65 >> 2] | 0) * d54 / d53);
   d53 = +(HEAP32[i81 + 144 >> 2] | 0);
   d54 = +(HEAP32[i61 + 40 >> 2] | 0);
   d45 = +(HEAP32[i81 + 56 >> 2] | 0);
   HEAP32[i64 >> 2] = ~~(d45 + +(HEAP32[i64 >> 2] | 0) * d53 / d54);
   HEAP32[i66 >> 2] = ~~(d45 + +(HEAP32[i66 >> 2] | 0) * d53 / d54);
   d54 = d11;
   d53 = d9;
  } while (0);
  L527 : do if ((i68 | 0) == 358) {
   d9 = +(HEAP32[i63 >> 2] | 0);
   i2 = (HEAP32[i22 >> 2] | 0) == 0;
   if (i2) {
    i1 = HEAP32[i67 >> 2] | 0;
    i60 = HEAP32[i1 + 36 >> 2] | 0;
    i61 = HEAP32[i47 >> 2] | 0;
    HEAP32[i63 >> 2] = ~~(+(((i61 | 0) > 0 ? i61 : 0) | 0) + d9 * +(HEAP32[i81 + 156 >> 2] | 0) / +(i60 | 0));
    d9 = +(HEAP32[i65 >> 2] | 0) * +(HEAP32[i81 + 156 >> 2] | 0) / +(i60 | 0);
    d11 = +(((i61 | 0) > 0 ? i61 : 0) | 0);
   } else {
    i60 = HEAP32[i47 >> 2] | 0;
    i1 = HEAP32[i67 >> 2] | 0;
    i61 = HEAP32[i1 + 36 >> 2] | 0;
    HEAP32[i63 >> 2] = ~~(d9 * +(HEAP32[i81 + 148 >> 2] | 0) / +(i61 | 0) + +(i60 | 0));
    d9 = +(i60 | 0);
    d11 = +(HEAP32[i65 >> 2] | 0) * +(HEAP32[i81 + 148 >> 2] | 0) / +(i61 | 0);
   }
   HEAP32[i65 >> 2] = ~~(d11 + d9);
   switch (i46 & 15) {
   case 4:
    {
     d9 = +(HEAP32[i64 >> 2] | 0);
     do if (i2) {
      i1 = HEAP32[i1 + 40 >> 2] | 0;
      d9 = d9 * +(HEAP32[i81 + 152 >> 2] | 0) / +(i1 | 0);
      if (!(HEAP32[i81 + 72 >> 2] | 0)) {
       i61 = HEAP32[i81 + 56 >> 2] | 0;
       d9 = d9 + +(((i61 | 0) > 0 ? i61 : 0) | 0);
      }
      HEAP32[i64 >> 2] = ~~d9;
      d9 = +(HEAP32[i66 >> 2] | 0) * +(HEAP32[i81 + 152 >> 2] | 0) / +(i1 | 0);
      if (HEAP32[i81 + 72 >> 2] | 0) break;
      i61 = HEAP32[i81 + 56 >> 2] | 0;
      d9 = d9 + +(((i61 | 0) > 0 ? i61 : 0) | 0);
     } else {
      i61 = HEAP32[i1 + 40 >> 2] | 0;
      HEAP32[i64 >> 2] = ~~(+(HEAP32[i81 + 56 >> 2] | 0) + d9 * +(HEAP32[i81 + 144 >> 2] | 0) / +(i61 | 0));
      d9 = +(HEAP32[i81 + 56 >> 2] | 0) + +(HEAP32[i66 >> 2] | 0) * +(HEAP32[i81 + 144 >> 2] | 0) / +(i61 | 0);
     } while (0);
     HEAP32[i66 >> 2] = ~~d9;
     d54 = d12;
     d53 = d13;
     break L527;
    }
   case 8:
    {
     d9 = +(HEAP32[i64 >> 2] | 0);
     if (i2) {
      i60 = HEAP32[i1 + 40 >> 2] | 0;
      i61 = HEAP32[i81 + 56 >> 2] | 0;
      HEAP32[i64 >> 2] = ~~(+(((i61 | 0) > 0 ? i61 : 0) | 0) + d9 * +(HEAP32[i81 + 152 >> 2] | 0) / +(i60 | 0));
      d9 = +(HEAP32[i66 >> 2] | 0) * +(HEAP32[i81 + 152 >> 2] | 0) / +(i60 | 0);
      d11 = +(((i61 | 0) > 0 ? i61 : 0) | 0);
     } else {
      i60 = HEAP32[i81 + 56 >> 2] | 0;
      i61 = HEAP32[i1 + 40 >> 2] | 0;
      HEAP32[i64 >> 2] = ~~(d9 * +(HEAP32[i81 + 144 >> 2] | 0) / +(i61 | 0) + +(i60 | 0));
      d9 = +(i60 | 0);
      d11 = +(HEAP32[i66 >> 2] | 0) * +(HEAP32[i81 + 144 >> 2] | 0) / +(i61 | 0);
     }
     HEAP32[i66 >> 2] = ~~(d11 + d9);
     d54 = d12;
     d53 = d13;
     break L527;
    }
   case 0:
    {
     d9 = +(HEAP32[i64 >> 2] | 0);
     do if (i2) {
      i1 = HEAP32[i1 + 40 >> 2] | 0;
      i2 = HEAP32[i81 + 56 >> 2] | 0;
      d9 = d9 * +(HEAP32[i81 + 152 >> 2] | 0) / +(i1 | 0) + +(((i2 | 0) > 0 ? i2 : 0) | 0);
      if (HEAP32[i81 + 72 >> 2] | 0) {
       i61 = HEAP32[i81 + 60 >> 2] | 0;
       d9 = d9 + +(((i61 | 0) > 0 ? i61 : 0) | 0);
      }
      HEAP32[i64 >> 2] = ~~d9;
      d9 = +(HEAP32[i66 >> 2] | 0) * +(HEAP32[i81 + 152 >> 2] | 0) / +(i1 | 0) + +(((i2 | 0) > 0 ? i2 : 0) | 0);
      if (!(HEAP32[i81 + 72 >> 2] | 0)) break;
      i61 = HEAP32[i81 + 60 >> 2] | 0;
      d9 = d9 + +(((i61 | 0) > 0 ? i61 : 0) | 0);
     } else {
      i60 = HEAP32[i81 + 56 >> 2] | 0;
      i61 = HEAP32[i1 + 40 >> 2] | 0;
      HEAP32[i64 >> 2] = ~~(+(i60 | 0) + d9 * +(HEAP32[i81 + 144 >> 2] | 0) / +(i61 | 0));
      d9 = +(i60 | 0) + +(HEAP32[i66 >> 2] | 0) * +(HEAP32[i81 + 144 >> 2] | 0) / +(i61 | 0);
     } while (0);
     HEAP32[i66 >> 2] = ~~d9;
     d54 = d12;
     d53 = d13;
     break L527;
    }
   default:
    {
     d54 = d12;
     d53 = d13;
     break L527;
    }
   }
  } while (0);
  i5 = (HEAP32[i22 >> 2] | 0) == 0;
  if (!i5) {
   i61 = HEAP32[i67 >> 2] | 0;
   d12 = +(HEAP32[i81 + 148 >> 2] | 0);
   d38 = +(HEAP32[i61 + 36 >> 2] | 0);
   d11 = +(HEAP32[i47 >> 2] | 0);
   d27 = d11 + d12 * 0.0 / d38;
   d45 = +(HEAP32[i81 + 144 >> 2] | 0);
   d39 = +(HEAP32[i61 + 40 >> 2] | 0);
   d13 = +(HEAP32[i81 + 56 >> 2] | 0);
   d37 = d13 + d45 * 0.0 / d39;
   d38 = d11 + d12 * d38 / d38;
   d39 = d13 + d45 * d39 / d39;
   d45 = +(HEAP32[i63 >> 2] | 0);
   HEAP32[i63 >> 2] = ~~(d45 < d27 ? d27 : d45);
   d45 = +(HEAP32[i64 >> 2] | 0);
   HEAP32[i64 >> 2] = ~~(d45 < d37 ? d37 : d45);
   d45 = +(HEAP32[i65 >> 2] | 0);
   HEAP32[i65 >> 2] = ~~(d45 > d38 ? d38 : d45);
   d45 = +(HEAP32[i66 >> 2] | 0);
   HEAP32[i66 >> 2] = ~~(d45 > d39 ? d39 : d45);
  }
  if (!(HEAP8[i81 + 328 >> 0] | 0)) {
   i67 = HEAP32[i62 >> 2] | 0;
   i1 = i67 & 12;
   switch (i67 & 3) {
   case 1:
    {
     d9 = d58;
     break;
    }
   case 2:
    {
     d9 = (d58 + d57) * .5;
     break;
    }
   case 3:
    {
     d9 = d57;
     break;
    }
   default:
    d9 = 0.0;
   }
   switch (i1 & 15) {
   case 4:
    break;
   case 8:
    {
     d3 = (d3 + d16) * .5;
     break;
    }
   case 0:
    {
     d3 = d16;
     break;
    }
   default:
    d3 = 0.0;
   }
   d11 = d54 + d9;
   d3 = d53 + d3;
  } else {
   d11 = +HEAPF64[i81 + 312 >> 3];
   d13 = +HEAPF64[i41 >> 3];
   i1 = HEAP32[i67 >> 2] | 0;
   i2 = HEAP32[i1 + 36 >> 2] | 0;
   i4 = HEAP32[i47 >> 2] | 0;
   d3 = +HEAPF64[i81 + 320 >> 3];
   if (i5) {
    i67 = HEAP32[i81 + 56 >> 2] | 0;
    d12 = d3 * +(HEAP32[i81 + 152 >> 2] | 0) / +(HEAP32[i1 + 40 >> 2] | 0);
    d9 = +(((i67 | 0) > 0 ? i67 : 0) | 0);
    d3 = +(((i4 | 0) > 0 ? i4 : 0) | 0) + d11 * +(HEAP32[i81 + 156 >> 2] | 0) / d13 / +(i2 | 0);
   } else {
    d12 = +(HEAP32[i81 + 56 >> 2] | 0);
    d9 = d3 * +(HEAP32[i81 + 144 >> 2] | 0) / +(HEAP32[i1 + 40 >> 2] | 0);
    d3 = +(i4 | 0) + d11 * +(HEAP32[i81 + 148 >> 2] | 0) / d13 / +(i2 | 0);
   }
   d11 = d3;
   d3 = d9 + d12;
  }
  i7 = HEAP32[i88 >> 2] | 0;
  i10 = (i7 | 0) > 0;
  if (i10) {
   i8 = HEAP32[i73 >> 2] | 0;
   i6 = ~~((d54 - d11) * 64.0);
   i5 = ~~((d53 - d3) * 64.0);
   i4 = 0;
   do {
    i1 = i8 + (i4 * 344 | 0) | 0;
    if (i1 | 0) do {
     do if (!(HEAP32[i1 + 296 >> 2] | 0)) {
      if (HEAP32[i1 + 300 >> 2] | 0) {
       i68 = 405;
       break;
      }
      if (HEAP32[i1 + 304 >> 2] | 0) {
       i68 = 405;
       break;
      }
      if (HEAP32[i1 + 308 >> 2] | 0) {
       i68 = 405;
       break;
      }
      if (HEAP32[i1 + 312 >> 2] | 0) {
       i68 = 405;
       break;
      }
      HEAP32[i1 + 316 >> 2] = 0;
      i2 = 0;
     } else i68 = 405; while (0);
     if ((i68 | 0) == 405) {
      i68 = 0;
      HEAP32[i1 + 316 >> 2] = (HEAP32[i1 + 64 >> 2] | 0) + i6;
      i2 = (HEAP32[i1 + 68 >> 2] | 0) + i5 | 0;
     }
     HEAP32[i1 + 320 >> 2] = i2;
     i1 = HEAP32[i1 + 336 >> 2] | 0;
    } while ((i1 | 0) != 0);
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i7 | 0));
  }
  d45 = +(HEAP32[i47 >> 2] | 0);
  d45 = d45 + +HEAPF64[i41 >> 3] * (d54 - d45);
  i44 = i81 + 696 | 0;
  L597 : do if (i10) {
   i23 = ~~(d53 * 64.0);
   i24 = i81 + 720 | 0;
   i25 = i81 + 200 | 0;
   i26 = i81 + 192 | 0;
   i28 = i81 + 736 | 0;
   i29 = i78 + 24 | 0;
   i30 = i78 + 48 | 0;
   i31 = i78 + 16 | 0;
   i32 = i78 + 40 | 0;
   i33 = i78 + 24 | 0;
   i34 = i78 + 64 | 0;
   i35 = i78 + 48 | 0;
   i4 = 0;
   i7 = HEAP32[i44 >> 2] | 0;
   i5 = 0;
   i6 = 0;
   i22 = 0;
   i8 = 0;
   while (1) {
    i67 = HEAP32[i73 >> 2] | 0;
    i1 = i67 + (i22 * 344 | 0) | 0;
    i4 = (HEAP8[i67 + (i22 * 344 | 0) + 80 >> 0] | 0) == 0 ? i4 : 1;
    i2 = (i1 | 0) == 0;
    do if (!(HEAP32[i67 + (i22 * 344 | 0) + 4 >> 2] | 0)) {
     if (i2) {
      i40 = i8;
      i2 = i5;
      i1 = i4;
      i36 = i7;
      break;
     } else {
      i19 = i7;
      i18 = i4;
     }
     while (1) {
      i15 = i1 + 64 | 0;
      i20 = ~~((d45 + +HEAPF64[i41 >> 3] * (+(HEAP32[i15 >> 2] | 0) * .015625)) * 64.0);
      HEAP32[i15 >> 2] = i20;
      i15 = i1 + 68 | 0;
      i21 = (HEAP32[i15 >> 2] | 0) + i23 | 0;
      HEAP32[i15 >> 2] = i21;
      i15 = i1 + 324 | 0;
      HEAP32[i15 >> 2] = i20 & 56;
      i17 = i1 + 328 | 0;
      HEAP32[i17 >> 2] = i21 & 56;
      i20 = i20 >> 6;
      i21 = i21 >> 6;
      i2 = i1 + 36 | 0;
      L605 : do if (HEAP32[i2 >> 2] | 0) {
       switch (HEAP32[i1 >> 2] | 0) {
       case 0:
       case 10:
        break L605;
       default:
        {}
       }
       if (HEAP32[i1 + 4 >> 2] | 0) break;
       i68 = _ass_cache_get(HEAP32[i28 >> 2] | 0, i1 + 288 | 0, i74) | 0;
       i4 = HEAP32[i74 >> 2] | 0;
       do if (i68) {
        HEAP32[i1 + 332 >> 2] = i4;
        if (HEAP8[i4 >> 0] | 0) break;
        HEAP32[i1 >> 2] = 0;
       } else {
        if (!i4) {
         HEAP32[i1 >> 2] = 0;
         break;
        }
        i2 = HEAP32[i2 >> 2] | 0;
        if (!i2) {
         HEAP32[i4 >> 2] = 0;
         HEAP32[i4 + 4 >> 2] = 0;
         HEAP32[i4 + 8 >> 2] = 0;
         _ass_cache_commit(i4, 56);
         HEAP32[i1 + 332 >> 2] = HEAP32[i74 >> 2];
         HEAP32[i1 >> 2] = 0;
         break;
        }
        _outline_copy(i78, i2) | 0;
        _outline_copy(i29, HEAP32[i1 + 40 >> 2] | 0) | 0;
        _outline_copy(i30, HEAP32[i1 + 44 >> 2] | 0) | 0;
        i10 = HEAP32[i1 + 316 >> 2] | 0;
        i14 = HEAP32[i1 + 320 >> 2] | 0;
        d39 = +HEAPF64[i41 >> 3];
        d11 = +HEAPF64[i1 + 216 >> 3];
        d9 = +HEAPF64[i1 + 208 >> 3];
        d3 = +HEAPF64[i1 + 192 >> 3] / d11 * d9;
        d9 = d11 * (+HEAPF64[i1 + 200 >> 3] / d9);
        d11 = +HEAPF64[i1 + 168 >> 3];
        d12 = +HEAPF64[i1 + 176 >> 3];
        d13 = +HEAPF64[i1 + 184 >> 3];
        do if (!(d9 == 0.0 & (d3 == 0.0 & (d11 == 0.0 & d12 == 0.0 & d13 == 0.0)))) {
         i4 = HEAP32[i1 + 132 >> 2] | 0;
         d93 = +HEAPF64[i25 >> 3];
         d38 = +_sin(d11);
         d92 = +_sin(d12);
         d27 = +_sin(d13);
         d90 = -d27;
         d37 = +_cos(d13);
         d13 = +(i10 | 0) + d3 * +(i4 | 0);
         d94 = +(i14 | 0);
         d96 = d37 - d9 * d90;
         d95 = d9 * d37 - d27;
         d27 = d27 + d3 * d37;
         d16 = d3 * d90 + d37;
         d91 = d13 * d37 - d94 * d90;
         d37 = d13 * d90 + d94 * d37;
         d94 = +_cos(d11);
         d90 = +_cos(d12);
         d11 = -(d38 * d95);
         d13 = -(d38 * d16);
         d38 = -(d38 * d37);
         d3 = d92 * d96 + d90 * d11;
         d9 = d92 * d27 + d90 * d13;
         d93 = d93 * 2.0e4;
         d11 = d93 * (d96 * d90 - d92 * d11);
         d12 = d93 * (d94 * d95);
         d13 = d93 * (d90 * d27 - d92 * d13);
         d16 = d93 * (d94 * d16);
         d27 = d93 * (d90 * d91 - d92 * d38);
         d37 = d93 * (d94 * d37);
         d38 = d93 + (d92 * d91 + d90 * d38);
         i4 = HEAP32[i31 >> 2] | 0;
         i7 = HEAP32[i78 >> 2] | 0;
         if (i7 | 0) {
          i2 = 0;
          do {
           i67 = i4 + (i2 << 3) | 0;
           d94 = +(HEAP32[i67 >> 2] | 0);
           i68 = i4 + (i2 << 3) + 4 | 0;
           d95 = +(HEAP32[i68 >> 2] | 0);
           d96 = d38 + (d3 * d94 + d9 * d95);
           d96 = 1.0 / (d96 > 1.0e3 ? d96 : 1.0e3);
           i66 = (_lrint((d27 + (d11 * d94 + d13 * d95)) * d96) | 0) - i10 | 0;
           HEAP32[i67 >> 2] = i66;
           i67 = (_lrint((d37 + (d12 * d94 + d16 * d95)) * d96) | 0) - i14 | 0;
           HEAP32[i68 >> 2] = i67;
           i2 = i2 + 1 | 0;
          } while ((i2 | 0) != (i7 | 0));
         }
         i4 = HEAP32[i32 >> 2] | 0;
         i7 = HEAP32[i33 >> 2] | 0;
         if (i7 | 0) {
          i2 = 0;
          do {
           i67 = i4 + (i2 << 3) | 0;
           d94 = +(HEAP32[i67 >> 2] | 0);
           i68 = i4 + (i2 << 3) + 4 | 0;
           d95 = +(HEAP32[i68 >> 2] | 0);
           d96 = d38 + (d3 * d94 + d9 * d95);
           d96 = 1.0 / (d96 > 1.0e3 ? d96 : 1.0e3);
           i66 = (_lrint((d27 + (d11 * d94 + d13 * d95)) * d96) | 0) - i10 | 0;
           HEAP32[i67 >> 2] = i66;
           i67 = (_lrint((d37 + (d12 * d94 + d16 * d95)) * d96) | 0) - i14 | 0;
           HEAP32[i68 >> 2] = i67;
           i2 = i2 + 1 | 0;
          } while ((i2 | 0) != (i7 | 0));
         }
         i4 = HEAP32[i34 >> 2] | 0;
         i7 = HEAP32[i35 >> 2] | 0;
         if (!i7) break; else i2 = 0;
         do {
          i67 = i4 + (i2 << 3) | 0;
          d94 = +(HEAP32[i67 >> 2] | 0);
          i68 = i4 + (i2 << 3) + 4 | 0;
          d95 = +(HEAP32[i68 >> 2] | 0);
          d96 = d38 + (d3 * d94 + d9 * d95);
          d96 = 1.0 / (d96 > 1.0e3 ? d96 : 1.0e3);
          i66 = (_lrint((d27 + (d11 * d94 + d13 * d95)) * d96) | 0) - i10 | 0;
          HEAP32[i67 >> 2] = i66;
          i67 = (_lrint((d37 + (d12 * d94 + d16 * d95)) * d96) | 0) - i14 | 0;
          HEAP32[i68 >> 2] = i67;
          i2 = i2 + 1 | 0;
         } while ((i2 | 0) != (i7 | 0));
        } while (0);
        _outline_adjust(i78, d39, HEAP32[i15 >> 2] | 0, HEAP32[i17 >> 2] | 0);
        _outline_adjust(i29, d39, HEAP32[i15 >> 2] | 0, HEAP32[i17 >> 2] | 0);
        _outline_adjust(i30, d39, HEAP32[i15 >> 2] | 0, HEAP32[i17 >> 2] | 0);
        i68 = HEAP32[i74 >> 2] | 0;
        i68 = _outline_to_bitmap2(i81, i78, i29, i30, i68 + 4 | 0, i68 + 8 | 0) | 0;
        i7 = HEAP32[i74 >> 2] | 0;
        HEAP8[i7 >> 0] = i68 & 1;
        if (!i68) HEAP32[i1 >> 2] = 0;
        i2 = HEAP32[i7 + 4 >> 2] | 0;
        if (!i2) i4 = 56; else i4 = (Math_imul(HEAP32[i2 + 12 >> 2] | 0, HEAP32[i2 + 16 >> 2] | 0) | 0) + 80 | 0;
        i2 = HEAP32[i7 + 8 >> 2] | 0;
        if (!i2) i2 = 0; else i2 = (Math_imul(HEAP32[i2 + 12 >> 2] | 0, HEAP32[i2 + 16 >> 2] | 0) | 0) + 24 | 0;
        _ass_cache_commit(i7, i2 + i4 | 0);
        HEAP32[i1 + 332 >> 2] = HEAP32[i74 >> 2];
        _outline_free(i78);
        _outline_free(i29);
        _outline_free(i30);
       } while (0);
      } while (0);
      do if (i18 << 24 >> 24 != 0 | (i6 | 0) == 0) i68 = 472; else {
       if (HEAP8[i1 + 116 >> 0] | 0) {
        i68 = 472;
        break;
       }
       if (HEAP32[i1 + 32 >> 2] | 0) {
        i68 = 472;
        break;
       }
       if (HEAP32[i6 + 32 >> 2] | 0) {
        i68 = 472;
        break;
       }
       i2 = HEAP32[i6 + 8 >> 2] | 0;
       i4 = HEAP32[i1 + 8 >> 2] | 0;
       if (_strcmp(HEAP32[i2 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0) {
        i68 = 472;
        break;
       }
       if ((HEAP32[i2 + 12 >> 2] | 0) != (HEAP32[i4 + 12 >> 2] | 0)) {
        i68 = 472;
        break;
       }
       if ((HEAP32[i6 + 12 >> 2] | 0) != (HEAP32[i1 + 12 >> 2] | 0)) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 24 >> 3] != +HEAPF64[i1 + 24 >> 3]) {
        i68 = 472;
        break;
       }
       if ((HEAP32[i6 + 84 >> 2] | 0) != (HEAP32[i1 + 84 >> 2] | 0)) {
        i68 = 472;
        break;
       }
       if ((HEAP32[i6 + 88 >> 2] | 0) != (HEAP32[i1 + 88 >> 2] | 0)) {
        i68 = 472;
        break;
       }
       if ((HEAP32[i6 + 92 >> 2] | 0) != (HEAP32[i1 + 92 >> 2] | 0)) {
        i68 = 472;
        break;
       }
       if ((HEAP32[i6 + 96 >> 2] | 0) != (HEAP32[i1 + 96 >> 2] | 0)) {
        i68 = 472;
        break;
       }
       if ((HEAP32[i6 + 140 >> 2] | 0) != (HEAP32[i1 + 140 >> 2] | 0)) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 144 >> 3] != +HEAPF64[i1 + 144 >> 3]) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 152 >> 3] != +HEAPF64[i1 + 152 >> 3]) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 160 >> 3] != +HEAPF64[i1 + 160 >> 3]) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 168 >> 3] != +HEAPF64[i1 + 168 >> 3]) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 176 >> 3] != +HEAPF64[i1 + 176 >> 3]) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 184 >> 3] != +HEAPF64[i1 + 184 >> 3]) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 192 >> 3] != +HEAPF64[i1 + 192 >> 3]) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 200 >> 3] != +HEAPF64[i1 + 200 >> 3]) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 208 >> 3] != +HEAPF64[i1 + 208 >> 3]) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 216 >> 3] != +HEAPF64[i1 + 216 >> 3]) {
        i68 = 472;
        break;
       }
       if ((HEAP32[i6 + 240 >> 2] | 0) != (HEAP32[i1 + 240 >> 2] | 0)) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 248 >> 3] != +HEAPF64[i1 + 248 >> 3]) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 256 >> 3] != +HEAPF64[i1 + 256 >> 3]) {
        i68 = 472;
        break;
       }
       if (+HEAPF64[i6 + 264 >> 3] != +HEAPF64[i1 + 264 >> 3]) {
        i68 = 472;
        break;
       }
       if ((HEAP32[i6 + 272 >> 2] | 0) != (HEAP32[i1 + 272 >> 2] | 0)) {
        i68 = 472;
        break;
       }
       if ((HEAP32[i6 + 276 >> 2] | 0) != (HEAP32[i1 + 276 >> 2] | 0)) {
        i68 = 472;
        break;
       }
       if ((HEAP32[i6 + 280 >> 2] | 0) == (HEAP32[i1 + 280 >> 2] | 0)) {
        i17 = i5;
        i4 = i19;
        i68 = 489;
       } else i68 = 472;
      } while (0);
      L673 : do if ((i68 | 0) == 472) {
       i68 = 0;
       i2 = HEAP32[i24 >> 2] | 0;
       do if (i8 >>> 0 < i2 >>> 0) i4 = i19; else {
        i2 = i2 << 1;
        i67 = ___errno_location() | 0;
        HEAP32[i67 >> 2] = 0;
        i67 = _ass_try_realloc_array(HEAP32[i44 >> 2] | 0, i2, 128) | 0;
        HEAP32[i44 >> 2] = i67;
        i67 = ___errno_location() | 0;
        if (!(HEAP32[i67 >> 2] | 0)) {
         HEAP32[i24 >> 2] = i2;
         i4 = HEAP32[i44 >> 2] | 0;
         break;
        } else {
         _ass_cache_dec_ref(HEAP32[i1 + 332 >> 2] | 0);
         i6 = 0;
         i7 = i8;
         i2 = i5;
         i4 = i19;
         break L673;
        }
       } while (0);
       i10 = i4 + (i8 << 7) | 0;
       i2 = i4 + (i8 << 7) + 24 | 0;
       i5 = i1 + 84 | 0;
       HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
       HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
       HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
       HEAP32[i2 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
       HEAP32[i4 + (i8 << 7) + 40 >> 2] = HEAP32[i1 + 120 >> 2];
       HEAP32[i4 + (i8 << 7) + 44 >> 2] = HEAP32[i1 + 124 >> 2];
       HEAP32[i4 + (i8 << 7) + 48 >> 2] = HEAP32[i1 + 56 >> 2] >> 6;
       HEAP32[i10 >> 2] = 0;
       i2 = (HEAP32[i1 + 240 >> 2] | 0) == 3 & 1;
       HEAP32[i10 >> 2] = i2;
       if (+HEAPF64[i1 + 248 >> 3] != 0.0) i68 = 478; else if (+HEAPF64[i1 + 256 >> 3] != 0.0) i68 = 478;
       if ((i68 | 0) == 478) {
        i68 = 0;
        i2 = i2 | 2;
        HEAP32[i10 >> 2] = i2;
       }
       d3 = +HEAPF64[i1 + 152 >> 3];
       if (d3 != 0.0) i68 = 481; else if (+HEAPF64[i1 + 160 >> 3] != 0.0) i68 = 481;
       if ((i68 | 0) == 481) {
        i68 = 0;
        i2 = i2 | 4;
        HEAP32[i10 >> 2] = i2;
       }
       do if (!(HEAP32[i1 + 40 >> 2] | 0)) {
        if (HEAP32[i1 + 44 >> 2] | 0) {
         i68 = 485;
         break;
        }
        if ((HEAP32[i5 >> 2] & 255 | 0) != 255) i68 = 485;
       } else i68 = 485; while (0);
       if ((i68 | 0) == 485) {
        i68 = 0;
        HEAP32[i10 >> 2] = i2 | 8;
       }
       HEAP32[i4 + (i8 << 7) + 4 >> 2] = HEAP32[i1 + 140 >> 2];
       HEAPF64[i4 + (i8 << 7) + 8 >> 3] = +HEAPF64[i1 + 144 >> 3] * 2.0 * +HEAPF64[i25 >> 3];
       d96 = +HEAPF64[i26 >> 3];
       HEAP32[i4 + (i8 << 7) + 16 >> 2] = ~~(d3 * d96 * 64.0);
       HEAP32[i4 + (i8 << 7) + 20 >> 2] = ~~(d96 * +HEAPF64[i1 + 160 >> 3] * 64.0);
       HEAP32[i4 + (i8 << 7) + 68 >> 2] = 2147483647;
       HEAP32[i4 + (i8 << 7) + 64 >> 2] = 2147483647;
       HEAP32[i4 + (i8 << 7) + 76 >> 2] = 2147483647;
       HEAP32[i4 + (i8 << 7) + 72 >> 2] = 2147483647;
       HEAP32[i4 + (i8 << 7) + 84 >> 2] = -2147483648;
       HEAP32[i4 + (i8 << 7) + 80 >> 2] = -2147483648;
       HEAP32[i4 + (i8 << 7) + 92 >> 2] = 2147483647;
       HEAP32[i4 + (i8 << 7) + 88 >> 2] = 2147483647;
       HEAP32[i4 + (i8 << 7) + 100 >> 2] = -2147483648;
       HEAP32[i4 + (i8 << 7) + 96 >> 2] = -2147483648;
       i67 = i4 + (i8 << 7) + 104 | 0;
       i2 = i4 + (i8 << 7) + 56 | 0;
       HEAP32[i2 >> 2] = 0;
       HEAP32[i4 + (i8 << 7) + 52 >> 2] = 0;
       HEAP32[i67 >> 2] = 0;
       HEAP32[i67 + 4 >> 2] = 0;
       HEAP32[i67 + 8 >> 2] = 0;
       HEAP32[i67 + 12 >> 2] = 0;
       HEAP32[i67 + 16 >> 2] = 0;
       HEAP32[i67 + 20 >> 2] = 0;
       i67 = _malloc(768) | 0;
       HEAP32[i4 + (i8 << 7) + 60 >> 2] = i67;
       if (!i67) {
        _ass_cache_dec_ref(HEAP32[i1 + 332 >> 2] | 0);
        i6 = 0;
        i7 = i8;
        i2 = i10;
        break;
       } else {
        HEAP32[i2 >> 2] = 64;
        i8 = i8 + 1 | 0;
        i17 = i10;
        i68 = 489;
        break;
       }
      } while (0);
      L700 : do if ((i68 | 0) == 489) {
       i68 = 0;
       i7 = i1 + 332 | 0;
       i14 = HEAP32[i7 >> 2] | 0;
       if (!((i17 | 0) != 0 & (i14 | 0) != 0)) {
        _ass_cache_dec_ref(i14);
        i6 = i1;
        i7 = i8;
        i2 = i17;
        break;
       }
       i15 = i17 + 52 | 0;
       i6 = HEAP32[i15 >> 2] | 0;
       i10 = i17 + 56 | 0;
       i2 = HEAP32[i10 >> 2] | 0;
       do if (i6 >>> 0 < i2 >>> 0) {
        i5 = i17 + 60 | 0;
        i2 = i6;
        i6 = i14;
        i7 = i14;
       } else {
        i2 = i2 << 1;
        i5 = ___errno_location() | 0;
        HEAP32[i5 >> 2] = 0;
        i5 = i17 + 60 | 0;
        i67 = _ass_try_realloc_array(HEAP32[i5 >> 2] | 0, i2, 12) | 0;
        HEAP32[i5 >> 2] = i67;
        i67 = ___errno_location() | 0;
        if (!(HEAP32[i67 >> 2] | 0)) {
         HEAP32[i10 >> 2] = i2;
         i7 = HEAP32[i7 >> 2] | 0;
         i2 = HEAP32[i15 >> 2] | 0;
         i6 = i7;
         break;
        } else {
         _ass_cache_dec_ref(HEAP32[i7 >> 2] | 0);
         i6 = i1;
         i7 = i8;
         i2 = i17;
         break L700;
        }
       } while (0);
       i67 = HEAP32[i5 >> 2] | 0;
       HEAP32[i67 + (i2 * 12 | 0) >> 2] = i6;
       HEAP32[i67 + (i2 * 12 | 0) + 4 >> 2] = i20;
       HEAP32[i67 + (i2 * 12 | 0) + 8 >> 2] = i21;
       HEAP32[i15 >> 2] = i2 + 1;
       i2 = i17 + 64 | 0;
       i67 = HEAP32[i2 >> 2] | 0;
       HEAP32[i2 >> 2] = (i67 | 0) > (i20 | 0) ? i20 : i67;
       i2 = i17 + 68 | 0;
       i67 = HEAP32[i2 >> 2] | 0;
       HEAP32[i2 >> 2] = (i67 | 0) > (i21 | 0) ? i21 : i67;
       i2 = HEAP32[i7 + 4 >> 2] | 0;
       if (i2 | 0) {
        i62 = (HEAP32[i2 >> 2] | 0) + i20 | 0;
        i63 = (HEAP32[i2 + 4 >> 2] | 0) + i21 | 0;
        i65 = (HEAP32[i2 + 8 >> 2] | 0) + i62 | 0;
        i66 = (HEAP32[i2 + 12 >> 2] | 0) + i63 | 0;
        i67 = i17 + 72 | 0;
        i64 = HEAP32[i67 >> 2] | 0;
        HEAP32[i67 >> 2] = (i64 | 0) > (i62 | 0) ? i62 : i64;
        i67 = i17 + 76 | 0;
        i64 = HEAP32[i67 >> 2] | 0;
        HEAP32[i67 >> 2] = (i64 | 0) > (i63 | 0) ? i63 : i64;
        i67 = i17 + 80 | 0;
        i64 = HEAP32[i67 >> 2] | 0;
        HEAP32[i67 >> 2] = (i64 | 0) > (i65 | 0) ? i64 : i65;
        i67 = i17 + 84 | 0;
        i65 = HEAP32[i67 >> 2] | 0;
        HEAP32[i67 >> 2] = (i65 | 0) > (i66 | 0) ? i65 : i66;
        i67 = i17 + 104 | 0;
        HEAP32[i67 >> 2] = (HEAP32[i67 >> 2] | 0) + 1;
       }
       i2 = HEAP32[i7 + 8 >> 2] | 0;
       if (!i2) {
        i6 = i1;
        i7 = i8;
        i2 = i17;
        break;
       }
       i65 = (HEAP32[i2 >> 2] | 0) + i20 | 0;
       i66 = (HEAP32[i2 + 4 >> 2] | 0) + i21 | 0;
       i67 = (HEAP32[i2 + 8 >> 2] | 0) + i65 | 0;
       i7 = (HEAP32[i2 + 12 >> 2] | 0) + i66 | 0;
       i6 = i17 + 88 | 0;
       i2 = HEAP32[i6 >> 2] | 0;
       HEAP32[i6 >> 2] = (i2 | 0) > (i65 | 0) ? i65 : i2;
       i6 = i17 + 92 | 0;
       i2 = HEAP32[i6 >> 2] | 0;
       HEAP32[i6 >> 2] = (i2 | 0) > (i66 | 0) ? i66 : i2;
       i6 = i17 + 96 | 0;
       i2 = HEAP32[i6 >> 2] | 0;
       HEAP32[i6 >> 2] = (i2 | 0) > (i67 | 0) ? i2 : i67;
       i6 = i17 + 100 | 0;
       i2 = HEAP32[i6 >> 2] | 0;
       HEAP32[i6 >> 2] = (i2 | 0) > (i7 | 0) ? i2 : i7;
       i6 = i17 + 108 | 0;
       HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
       i6 = i1;
       i7 = i8;
       i2 = i17;
      } while (0);
      i1 = HEAP32[i1 + 336 >> 2] | 0;
      if (!i1) {
       i40 = i7;
       i1 = 0;
       i36 = i4;
       break;
      } else {
       i19 = i4;
       i5 = i2;
       i8 = i7;
       i18 = 0;
      }
     }
    } else {
     if (i2) {
      i40 = i8;
      i2 = i5;
      i1 = i4;
      i36 = i7;
      break;
     }
     do {
      _ass_cache_dec_ref(HEAP32[i1 + 292 >> 2] | 0);
      i1 = HEAP32[i1 + 336 >> 2] | 0;
     } while ((i1 | 0) != 0);
     i40 = i8;
     i2 = i5;
     i1 = i4;
     i36 = i7;
    } while (0);
    i22 = i22 + 1 | 0;
    if ((i22 | 0) >= (HEAP32[i88 >> 2] | 0)) break; else {
     i4 = i1;
     i7 = i36;
     i5 = i2;
     i8 = i40;
    }
   }
   if (!i40) i69 = 0; else {
    i26 = i74 + 24 | 0;
    i28 = i74 + 28 | 0;
    i29 = i81 + 740 | 0;
    i30 = i81 + 756 | 0;
    i25 = 0;
    L723 : while (1) {
     i24 = i36 + (i25 << 7) | 0;
     i22 = i36 + (i25 << 7) + 52 | 0;
     i7 = HEAP32[i22 >> 2] | 0;
     if (!i7) {
      i1 = i36 + (i25 << 7) + 60 | 0;
      i5 = i1;
      i1 = HEAP32[i1 >> 2] | 0;
     } else {
      i4 = HEAP32[i36 + (i25 << 7) + 64 >> 2] | 0;
      i5 = i36 + (i25 << 7) + 60 | 0;
      i1 = HEAP32[i5 >> 2] | 0;
      i6 = HEAP32[i36 + (i25 << 7) + 68 >> 2] | 0;
      i2 = 0;
      do {
       i67 = i1 + (i2 * 12 | 0) + 4 | 0;
       HEAP32[i67 >> 2] = (HEAP32[i67 >> 2] | 0) - i4;
       i67 = i1 + (i2 * 12 | 0) + 8 | 0;
       HEAP32[i67 >> 2] = (HEAP32[i67 >> 2] | 0) - i6;
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) != (i7 | 0));
     };
     HEAP32[i74 >> 2] = HEAP32[i24 >> 2];
     HEAP32[i74 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
     HEAP32[i74 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
     HEAP32[i74 + 12 >> 2] = HEAP32[i24 + 12 >> 2];
     HEAP32[i74 + 16 >> 2] = HEAP32[i24 + 16 >> 2];
     HEAP32[i74 + 20 >> 2] = HEAP32[i24 + 20 >> 2];
     HEAP32[i26 >> 2] = i7;
     HEAP32[i28 >> 2] = i1;
     i67 = _ass_cache_get(HEAP32[i29 >> 2] | 0, i74, i78) | 0;
     i1 = HEAP32[i78 >> 2] | 0;
     do if (i67) {
      HEAP32[i36 + (i25 << 7) + 112 >> 2] = HEAP32[i1 >> 2];
      HEAP32[i36 + (i25 << 7) + 116 >> 2] = HEAP32[i1 + 4 >> 2];
      HEAP32[i36 + (i25 << 7) + 120 >> 2] = HEAP32[i1 + 8 >> 2];
      HEAP32[i36 + (i25 << 7) + 124 >> 2] = i1;
     } else {
      if (!i1) break;
      i23 = i36 + (i25 << 7) + 4 | 0;
      i21 = _be_padding(HEAP32[i23 >> 2] | 0) | 0;
      i1 = HEAP32[i36 + (i25 << 7) + 104 >> 2] | 0;
      i20 = (i21 | 0) == 0;
      L736 : do if (i20 & (i1 | 0) == 1) {
       i4 = HEAP32[i22 >> 2] | 0;
       if (!i4) break;
       i6 = HEAP32[i5 >> 2] | 0;
       i2 = 0;
       while (1) {
        i1 = HEAP32[(HEAP32[i6 + (i2 * 12 | 0) >> 2] | 0) + 4 >> 2] | 0;
        if (i1 | 0) break;
        i1 = i2 + 1 | 0;
        if (i1 >>> 0 < i4 >>> 0) i2 = i1; else break L736;
       }
       i1 = _copy_bitmap(HEAP32[i30 >> 2] | 0, i1) | 0;
       HEAP32[i36 + (i25 << 7) + 112 >> 2] = i1;
       if (!i1) break;
       i66 = HEAP32[i5 >> 2] | 0;
       HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + (HEAP32[i66 + (i2 * 12 | 0) + 4 >> 2] | 0);
       i67 = i1 + 4 | 0;
       HEAP32[i67 >> 2] = (HEAP32[i67 >> 2] | 0) + (HEAP32[i66 + (i2 * 12 | 0) + 8 >> 2] | 0);
      } else {
       if (!i1) break;
       i1 = i36 + (i25 << 7) + 72 | 0;
       i19 = i21 << 1;
       i2 = i36 + (i25 << 7) + 76 | 0;
       i19 = _alloc_bitmap(HEAP32[i30 >> 2] | 0, (HEAP32[i36 + (i25 << 7) + 80 >> 2] | 0) + i19 - (HEAP32[i1 >> 2] | 0) | 0, (HEAP32[i36 + (i25 << 7) + 84 >> 2] | 0) + i19 - (HEAP32[i2 >> 2] | 0) | 0, 1) | 0;
       HEAP32[i36 + (i25 << 7) + 112 >> 2] = i19;
       if (!i19) break;
       HEAP32[i19 >> 2] = (HEAP32[i1 >> 2] | 0) - i21 - (HEAP32[i36 + (i25 << 7) + 64 >> 2] | 0);
       i18 = i19 + 4 | 0;
       HEAP32[i18 >> 2] = (HEAP32[i2 >> 2] | 0) - i21 - (HEAP32[i36 + (i25 << 7) + 68 >> 2] | 0);
       i1 = HEAP32[i22 >> 2] | 0;
       if (!i1) break;
       i10 = i19 + 8 | 0;
       i14 = i19 + 12 | 0;
       i15 = i19 + 20 | 0;
       i17 = i19 + 16 | 0;
       i8 = 0;
       do {
        i2 = HEAP32[i5 >> 2] | 0;
        i7 = HEAP32[(HEAP32[i2 + (i8 * 12 | 0) >> 2] | 0) + 4 >> 2] | 0;
        if (i7) {
         i6 = (HEAP32[i7 >> 2] | 0) + (HEAP32[i2 + (i8 * 12 | 0) + 4 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) | 0;
         i1 = (HEAP32[i7 + 4 >> 2] | 0) + (HEAP32[i2 + (i8 * 12 | 0) + 8 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0;
         if ((i6 | 0) <= -1) {
          i68 = 524;
          break L723;
         }
         i2 = HEAP32[i7 + 8 >> 2] | 0;
         if ((i2 + i6 | 0) > (HEAP32[i10 >> 2] | 0)) {
          i68 = 524;
          break L723;
         }
         if ((i1 | 0) <= -1) {
          i68 = 527;
          break L723;
         }
         i4 = HEAP32[i7 + 12 >> 2] | 0;
         if ((i4 + i1 | 0) > (HEAP32[i14 >> 2] | 0)) {
          i68 = 527;
          break L723;
         }
         i67 = HEAP32[i17 >> 2] | 0;
         i1 = (HEAP32[i15 >> 2] | 0) + (Math_imul(i67, i1) | 0) + i6 | 0;
         FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i30 >> 2] | 0) + 20 >> 2] & 7](i1, i67, HEAP32[i7 + 20 >> 2] | 0, HEAP32[i7 + 16 >> 2] | 0, i4, i2);
         i1 = HEAP32[i22 >> 2] | 0;
        }
        i8 = i8 + 1 | 0;
       } while (i8 >>> 0 < i1 >>> 0);
      } while (0);
      i1 = HEAP32[i36 + (i25 << 7) + 108 >> 2] | 0;
      L758 : do if (i20 & (i1 | 0) == 1) {
       i4 = HEAP32[i22 >> 2] | 0;
       if (!i4) break;
       i6 = HEAP32[i5 >> 2] | 0;
       i2 = 0;
       while (1) {
        i1 = HEAP32[(HEAP32[i6 + (i2 * 12 | 0) >> 2] | 0) + 8 >> 2] | 0;
        if (i1 | 0) break;
        i1 = i2 + 1 | 0;
        if (i1 >>> 0 < i4 >>> 0) i2 = i1; else break L758;
       }
       i1 = _copy_bitmap(HEAP32[i30 >> 2] | 0, i1) | 0;
       HEAP32[i36 + (i25 << 7) + 116 >> 2] = i1;
       if (!i1) break;
       i66 = HEAP32[i5 >> 2] | 0;
       HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + (HEAP32[i66 + (i2 * 12 | 0) + 4 >> 2] | 0);
       i67 = i1 + 4 | 0;
       HEAP32[i67 >> 2] = (HEAP32[i67 >> 2] | 0) + (HEAP32[i66 + (i2 * 12 | 0) + 8 >> 2] | 0);
      } else {
       if (!i1) break;
       i1 = i36 + (i25 << 7) + 88 | 0;
       i19 = i21 << 1;
       i2 = i36 + (i25 << 7) + 92 | 0;
       i19 = _alloc_bitmap(HEAP32[i30 >> 2] | 0, (HEAP32[i36 + (i25 << 7) + 96 >> 2] | 0) + i19 - (HEAP32[i1 >> 2] | 0) | 0, (HEAP32[i36 + (i25 << 7) + 100 >> 2] | 0) + i19 - (HEAP32[i2 >> 2] | 0) | 0, 1) | 0;
       HEAP32[i36 + (i25 << 7) + 116 >> 2] = i19;
       if (!i19) break;
       HEAP32[i19 >> 2] = (HEAP32[i1 >> 2] | 0) - i21 - (HEAP32[i36 + (i25 << 7) + 64 >> 2] | 0);
       i18 = i19 + 4 | 0;
       HEAP32[i18 >> 2] = (HEAP32[i2 >> 2] | 0) - i21 - (HEAP32[i36 + (i25 << 7) + 68 >> 2] | 0);
       i1 = HEAP32[i22 >> 2] | 0;
       if (!i1) break;
       i10 = i19 + 8 | 0;
       i14 = i19 + 12 | 0;
       i15 = i19 + 20 | 0;
       i17 = i19 + 16 | 0;
       i8 = 0;
       do {
        i2 = HEAP32[i5 >> 2] | 0;
        i7 = HEAP32[(HEAP32[i2 + (i8 * 12 | 0) >> 2] | 0) + 8 >> 2] | 0;
        if (i7) {
         i6 = (HEAP32[i7 >> 2] | 0) + (HEAP32[i2 + (i8 * 12 | 0) + 4 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) | 0;
         i1 = (HEAP32[i7 + 4 >> 2] | 0) + (HEAP32[i2 + (i8 * 12 | 0) + 8 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0;
         if ((i6 | 0) <= -1) {
          i68 = 544;
          break L723;
         }
         i2 = HEAP32[i7 + 8 >> 2] | 0;
         if ((i2 + i6 | 0) > (HEAP32[i10 >> 2] | 0)) {
          i68 = 544;
          break L723;
         }
         if ((i1 | 0) <= -1) {
          i68 = 547;
          break L723;
         }
         i4 = HEAP32[i7 + 12 >> 2] | 0;
         if ((i4 + i1 | 0) > (HEAP32[i14 >> 2] | 0)) {
          i68 = 547;
          break L723;
         }
         i67 = HEAP32[i17 >> 2] | 0;
         i1 = (HEAP32[i15 >> 2] | 0) + (Math_imul(i67, i1) | 0) + i6 | 0;
         FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i30 >> 2] | 0) + 20 >> 2] & 7](i1, i67, HEAP32[i7 + 20 >> 2] | 0, HEAP32[i7 + 16 >> 2] | 0, i4, i2);
         i1 = HEAP32[i22 >> 2] | 0;
        }
        i8 = i8 + 1 | 0;
       } while (i8 >>> 0 < i1 >>> 0);
      } while (0);
      i7 = i36 + (i25 << 7) + 112 | 0;
      i1 = HEAP32[i7 >> 2] | 0;
      i8 = i36 + (i25 << 7) + 116 | 0;
      i2 = HEAP32[i8 >> 2] | 0;
      do if (!((i1 | 0) == 0 & (i2 | 0) == 0)) {
       _ass_synth_blur(HEAP32[i30 >> 2] | 0, HEAP32[i24 >> 2] & 1, HEAP32[i23 >> 2] | 0, +HEAPF64[i36 + (i25 << 7) + 8 >> 3], i1, i2);
       i1 = HEAP32[i24 >> 2] | 0;
       if (!(i1 & 8)) break;
       i2 = HEAP32[i7 >> 2] | 0;
       i4 = (i2 | 0) != 0;
       i5 = HEAP32[i8 >> 2] | 0;
       i6 = (i5 | 0) != 0;
       if (!(i1 & 4)) {
        if ((i1 & 1 | 0) == 0 & (i4 & i6)) {
         _fix_outline(i2, i5);
         break;
        }
        if (!((i1 & 2 | 0) == 0 & i6)) break;
        _ass_free_bitmap(i5);
        HEAP32[i8 >> 2] = 0;
        break;
       }
       do if (i4) {
        if (!((i1 & 1 | 0) == 0 & i6)) {
         i68 = 560;
         break;
        }
        i67 = _copy_bitmap(HEAP32[i30 >> 2] | 0, i5) | 0;
        i1 = i36 + (i25 << 7) + 120 | 0;
        HEAP32[i1 >> 2] = i67;
        _fix_outline(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0);
       } else i68 = 560; while (0);
       do if ((i68 | 0) == 560) {
        i68 = 0;
        if (i6) if (!(i1 & 2)) {
         i1 = i36 + (i25 << 7) + 120 | 0;
         HEAP32[i1 >> 2] = i5;
         HEAP32[i8 >> 2] = 0;
         break;
        } else {
         i67 = _copy_bitmap(HEAP32[i30 >> 2] | 0, i5) | 0;
         i1 = i36 + (i25 << 7) + 120 | 0;
         HEAP32[i1 >> 2] = i67;
         break;
        } else if (!i2) {
         i1 = i36 + (i25 << 7) + 120 | 0;
         break;
        } else {
         i67 = _copy_bitmap(HEAP32[i30 >> 2] | 0, i2) | 0;
         i1 = i36 + (i25 << 7) + 120 | 0;
         HEAP32[i1 >> 2] = i67;
         break;
        }
       } while (0);
       i1 = HEAP32[i1 >> 2] | 0;
       if (!i1) break;
       i66 = HEAP32[i36 + (i25 << 7) + 16 >> 2] | 0;
       HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + (i66 >> 6);
       i67 = HEAP32[i36 + (i25 << 7) + 20 >> 2] | 0;
       i65 = i1 + 4 | 0;
       HEAP32[i65 >> 2] = (HEAP32[i65 >> 2] | 0) + (i67 >> 6);
       _shift_bitmap(i1, i66 & 63, i67 & 63);
      } while (0);
      HEAP32[HEAP32[i78 >> 2] >> 2] = HEAP32[i7 >> 2];
      i2 = HEAP32[i8 >> 2] | 0;
      i8 = HEAP32[i78 >> 2] | 0;
      HEAP32[i8 + 4 >> 2] = i2;
      i5 = HEAP32[i36 + (i25 << 7) + 120 >> 2] | 0;
      HEAP32[i8 + 8 >> 2] = i5;
      i1 = HEAP32[i8 >> 2] | 0;
      i4 = i2;
      i6 = i5;
      if (!i1) i7 = 0; else i7 = (Math_imul(HEAP32[i1 + 12 >> 2] | 0, HEAP32[i1 + 16 >> 2] | 0) | 0) + 24 | 0;
      if (!i2) i2 = 0; else i2 = (Math_imul(HEAP32[i4 + 12 >> 2] | 0, HEAP32[i4 + 16 >> 2] | 0) | 0) + 24 | 0;
      if (!i5) i1 = 0; else i1 = (Math_imul(HEAP32[i6 + 12 >> 2] | 0, HEAP32[i6 + 16 >> 2] | 0) | 0) + 24 | 0;
      _ass_cache_commit(i8, i7 + 44 + i2 + i1 | 0);
      HEAP32[i36 + (i25 << 7) + 124 >> 2] = HEAP32[i78 >> 2];
     } while (0);
     i25 = i25 + 1 | 0;
     if (i25 >>> 0 >= i40 >>> 0) {
      i69 = i40;
      break L597;
     }
    }
    if ((i68 | 0) == 524) ___assert_fail(359115, 358904, 2206, 359146); else if ((i68 | 0) == 527) ___assert_fail(359172, 358904, 2207, 359146); else if ((i68 | 0) == 544) ___assert_fail(359115, 358904, 2241, 359146); else if ((i68 | 0) == 547) ___assert_fail(359172, 358904, 2242, 359146);
   }
  } else i69 = 0; while (0);
  i15 = i81 + 700 | 0;
  HEAP32[i15 >> 2] = i69;
  HEAP32[i86 >> 2] = 0;
  i43 = i86 + 4 | 0;
  HEAP32[i43 >> 2] = ~~(d53 - +HEAPF64[HEAP32[i81 + 688 >> 2] >> 3]);
  i42 = i86 + 8 | 0;
  HEAP32[i42 >> 2] = ~~+HEAPF64[i81 + 704 >> 3];
  d96 = +HEAPF64[i41 >> 3];
  i41 = i86 + 12 | 0;
  HEAP32[i41 >> 2] = ~~(d54 + d58 * d96 + .5);
  i40 = i86 + 16 | 0;
  HEAP32[i40 >> 2] = ~~((d57 - d58) * d96 + .5);
  HEAP32[i86 + 20 >> 2] = HEAP8[i70 >> 0];
  HEAP32[i86 + 24 >> 2] = (i46 | 0) == 4 ? 1 : -1;
  HEAP32[i86 + 28 >> 2] = i71;
  i15 = HEAP32[i15 >> 2] | 0;
  i14 = HEAP32[i44 >> 2] | 0;
  if (!i15) i1 = i79; else {
   i1 = i79;
   i4 = 0;
   do {
    i2 = HEAP32[i14 + (i4 << 7) + 120 >> 2] | 0;
    do if (i2) {
     if ((HEAP32[i77 >> 2] | 0) == 4) break;
     i1 = _render_glyph(i81, i2, HEAP32[i14 + (i4 << 7) + 64 >> 2] | 0, HEAP32[i14 + (i4 << 7) + 68 >> 2] | 0, HEAP32[i14 + (i4 << 7) + 36 >> 2] | 0, 0, 1e6, i1, 2, HEAP32[i14 + (i4 << 7) + 124 >> 2] | 0) | 0;
    } while (0);
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i15 | 0));
   i4 = 0;
   do {
    i2 = HEAP32[i14 + (i4 << 7) + 116 >> 2] | 0;
    do if (i2) {
     if ((HEAP32[i14 + (i4 << 7) + 40 >> 2] | 0) == 3) if ((HEAP32[i14 + (i4 << 7) + 44 >> 2] | 0) <= (HEAP32[i14 + (i4 << 7) + 48 >> 2] | 0)) break;
     i1 = _render_glyph(i81, i2, HEAP32[i14 + (i4 << 7) + 64 >> 2] | 0, HEAP32[i14 + (i4 << 7) + 68 >> 2] | 0, HEAP32[i14 + (i4 << 7) + 32 >> 2] | 0, 0, 1e6, i1, 1, HEAP32[i14 + (i4 << 7) + 124 >> 2] | 0) | 0;
    } while (0);
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i15 | 0));
   i10 = 0;
   while (1) {
    i2 = HEAP32[i14 + (i10 << 7) + 112 >> 2] | 0;
    L844 : do if (i2) {
     i4 = HEAP32[i14 + (i10 << 7) + 40 >> 2] | 0;
     i5 = HEAP32[i14 + (i10 << 7) + 68 >> 2] | 0;
     i6 = HEAP32[i14 + (i10 << 7) + 64 >> 2] | 0;
     i7 = HEAP32[i14 + (i10 << 7) + 124 >> 2] | 0;
     switch (i4 | 0) {
     case 3:
     case 1:
      if ((HEAP32[i14 + (i10 << 7) + 44 >> 2] | 0) > (HEAP32[i14 + (i10 << 7) + 48 >> 2] | 0)) {
       i1 = _render_glyph(i81, i2, i6, i5, HEAP32[i14 + (i10 << 7) + 24 >> 2] | 0, 0, 1e6, i1, 0, i7) | 0;
       break L844;
      } else {
       i1 = _render_glyph(i81, i2, i6, i5, HEAP32[i14 + (i10 << 7) + 28 >> 2] | 0, 0, 1e6, i1, 0, i7) | 0;
       break L844;
      }
     default:
      {
       i8 = HEAP32[i14 + (i10 << 7) + 24 >> 2] | 0;
       if ((i4 | 0) == 2) {
        i1 = _render_glyph(i81, i2, i6, i5, i8, HEAP32[i14 + (i10 << 7) + 28 >> 2] | 0, HEAP32[i14 + (i10 << 7) + 44 >> 2] | 0, i1, 0, i7) | 0;
        break L844;
       } else {
        i1 = _render_glyph(i81, i2, i6, i5, i8, 0, 1e6, i1, 0, i7) | 0;
        break L844;
       }
      }
     }
    } while (0);
    i10 = i10 + 1 | 0;
    if ((i10 | 0) == (i15 | 0)) {
     i2 = 0;
     break;
    }
   }
   do {
    _ass_cache_dec_ref(HEAP32[i14 + (i2 << 7) + 124 >> 2] | 0);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i15 | 0));
  }
  HEAP32[i1 >> 2] = 0;
  i1 = HEAP32[i79 >> 2] | 0;
  i4 = HEAP32[i87 >> 2] | 0;
  if (i4) {
   i2 = i74 + 8 | 0;
   i5 = i2 + 36 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i5 | 0));
   HEAP32[i74 >> 2] = 1;
   HEAP32[i74 + 4 >> 2] = HEAP32[i4 >> 2];
   do if (_ass_cache_get(HEAP32[i81 + 736 >> 2] | 0, i74, i78) | 0) i68 = 606; else {
    i2 = HEAP32[i78 >> 2] | 0;
    if (!i2) break;
    HEAP32[i2 + 8 >> 2] = 0;
    HEAP32[i2 + 4 >> 2] = 0;
    i5 = _ass_drawing_parse(i4, 1) | 0;
    if (!i5) {
     _ass_msg(HEAP32[i81 >> 2] | 0, 2, 359203, i75);
     _ass_cache_commit(HEAP32[i78 >> 2] | 0, 56);
     _ass_cache_dec_ref(HEAP32[i78 >> 2] | 0);
     break;
    }
    i2 = HEAP32[i47 >> 2] | 0;
    i4 = HEAP32[i81 + 56 >> 2] | 0;
    if (i4 | i2 | 0) _outline_translate(i5, i2 << 6, i4 << 6);
    i2 = _outline_to_bitmap(i81, i5, 0, 1) | 0;
    i4 = HEAP32[i78 >> 2] | 0;
    HEAP32[i4 + 4 >> 2] = i2;
    if (!i2) i2 = 56; else i2 = (Math_imul(HEAP32[i2 + 12 >> 2] | 0, HEAP32[i2 + 16 >> 2] | 0) | 0) + 80 | 0;
    _ass_cache_commit(i4, i2);
    i68 = 606;
   } while (0);
   do if ((i68 | 0) == 606) {
    i2 = HEAP32[i78 >> 2] | 0;
    i36 = HEAP32[i2 + 4 >> 2] | 0;
    if (!i36) {
     _ass_cache_dec_ref(i2);
     break;
    }
    if (!i1) i1 = i2; else {
     i29 = i36 + 20 | 0;
     i30 = i36 + 4 | 0;
     i31 = i36 + 8 | 0;
     i32 = i36 + 12 | 0;
     i33 = i36 + 16 | 0;
     i34 = i81 + 476 | 0;
     i35 = i81 + 756 | 0;
     L880 : do {
      i28 = i1 + 12 | 0;
      i17 = HEAP32[i28 >> 2] | 0;
      i18 = HEAP32[i29 >> 2] | 0;
      i8 = i1 + 20 | 0;
      i75 = HEAP32[i8 >> 2] | 0;
      i10 = i1 + 24 | 0;
      i2 = HEAP32[i10 >> 2] | 0;
      i6 = HEAP32[i1 >> 2] | 0;
      i14 = i1 + 4 | 0;
      i7 = HEAP32[i14 >> 2] | 0;
      i15 = i1 + 8 | 0;
      i19 = HEAP32[i15 >> 2] | 0;
      i70 = HEAP32[i36 >> 2] | 0;
      i74 = HEAP32[i30 >> 2] | 0;
      i20 = HEAP32[i33 >> 2] | 0;
      i25 = (i75 | 0) > (i70 | 0) ? i75 : i70;
      i26 = (i2 | 0) > (i74 | 0) ? i2 : i74;
      i69 = i6 + i75 | 0;
      i5 = (HEAP32[i31 >> 2] | 0) + i70 | 0;
      i71 = i7 + i2 | 0;
      i4 = (HEAP32[i32 >> 2] | 0) + i74 | 0;
      i21 = i25 - i75 | 0;
      i22 = i26 - i2 | 0;
      i23 = ((i69 | 0) < (i5 | 0) ? i69 : i5) - i25 | 0;
      i24 = ((i71 | 0) < (i4 | 0) ? i71 : i4) - i26 | 0;
      i25 = i25 - i70 | 0;
      i26 = i26 - i74 | 0;
      i5 = (i69 | 0) < (i70 | 0) | (i71 | 0) < (i74 | 0) | (i75 | 0) > (i5 | 0);
      L882 : do if (!(HEAP32[i34 >> 2] | 0)) {
       do if (!i5) {
        if (!((i23 | 0) != 0 & ((i2 | 0) <= (i4 | 0) & (i24 | 0) != 0))) break;
        i2 = (i23 | 0) > 15 ? 16 : (i23 | 0) > 7 ? 8 : 1;
        i4 = 0 - i2 | 0;
        i4 = i23 >>> 0 > i4 >>> 0 ? i23 : i23 + -1 + i2 & i4;
        i2 = _ass_aligned_alloc(i2, Math_imul(i4, i24) | 0, 0) | 0;
        if (!i2) break L880;
        i75 = i17 + (Math_imul(i22, i19) | 0) + i21 | 0;
        i68 = i18 + (Math_imul(i26, i20) | 0) + i25 | 0;
        FUNCTION_TABLE_viiiiiiii[HEAP32[(HEAP32[i35 >> 2] | 0) + 28 >> 2] & 1](i2, i4, i75, i19, i68, i20, i23, i24);
        HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i21;
        HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i22;
        HEAP32[i1 >> 2] = i23;
        HEAP32[i14 >> 2] = i24;
        HEAP32[i15 >> 2] = i4;
        i68 = 620;
        break L882;
       } while (0);
       HEAP32[i15 >> 2] = 0;
       HEAP32[i14 >> 2] = 0;
       HEAP32[i1 >> 2] = 0;
      } else {
       if (i5) break;
       if (!((i23 | 0) != 0 & ((i2 | 0) <= (i4 | 0) & (i24 | 0) != 0))) break;
       i2 = _ass_aligned_alloc(32, Math_imul(i19, i7) | 0, 0) | 0;
       if (!i2) break L880;
       _memcpy(i2 | 0, i17 | 0, (Math_imul(i7 + -1 | 0, i19) | 0) + i6 | 0) | 0;
       i75 = i2 + (Math_imul(i22, i19) | 0) + i21 | 0;
       i68 = i18 + (Math_imul(i26, i20) | 0) + i25 | 0;
       FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i35 >> 2] | 0) + 24 >> 2] & 7](i75, i19, i68, i20, i24, i23);
       i68 = 620;
      } while (0);
      if ((i68 | 0) == 620) {
       i68 = 0;
       HEAP32[i28 >> 2] = i2;
       i75 = i1 + 36 | 0;
       _ass_cache_dec_ref(HEAP32[i75 >> 2] | 0);
       HEAP32[i75 >> 2] = 0;
      }
      i1 = HEAP32[i1 + 28 >> 2] | 0;
     } while ((i1 | 0) != 0);
     i1 = HEAP32[i78 >> 2] | 0;
    }
    _ass_cache_dec_ref(i1);
   } while (0);
   i1 = HEAP32[i79 >> 2] | 0;
  }
  HEAP32[i86 >> 2] = i1;
  do if ((HEAP32[i77 >> 2] | 0) == 4) {
   d3 = +HEAPF64[i76 >> 3];
   if (d3 > 0.0) d9 = d3 * +HEAPF64[i81 + 192 >> 3]; else d9 = 0.0;
   d3 = +HEAPF64[i80 >> 3];
   if (d3 > 0.0) d3 = d3 * +HEAPF64[i81 + 192 >> 3]; else d3 = 0.0;
   i5 = HEAP32[i41 >> 2] | 0;
   i8 = ~~(+(i5 | 0) - d9);
   i6 = HEAP32[i43 >> 2] | 0;
   i4 = ~~(+(i6 | 0) - d3);
   i5 = ~~(d9 + +((HEAP32[i40 >> 2] | 0) + i5 | 0));
   i6 = ~~(d3 + +((HEAP32[i42 >> 2] | 0) + i6 | 0));
   i8 = (i8 | 0) > 0 ? i8 : 0;
   i80 = HEAP32[i81 + 136 >> 2] | 0;
   i8 = (i8 | 0) > (i80 | 0) ? i80 : i8;
   i4 = (i4 | 0) > 0 ? i4 : 0;
   i81 = HEAP32[i81 + 140 >> 2] | 0;
   i4 = (i4 | 0) > (i81 | 0) ? i81 : i4;
   i5 = (i5 | 0) > 0 ? i5 : 0;
   i6 = (i6 | 0) > 0 ? i6 : 0;
   i5 = ((i5 | 0) > (i80 | 0) ? i80 : i5) - i8 | 0;
   i6 = ((i6 | 0) > (i81 | 0) ? i81 : i6) - i4 | 0;
   if ((i5 | 0) < 1 | (i6 | 0) < 1) break;
   i1 = Math_imul(i6, i5) | 0;
   i7 = _ass_aligned_alloc(1, i1, 0) | 0;
   if (!i7) break;
   _memset(i7 | 0, -1, i1 | 0) | 0;
   i1 = HEAP32[i82 >> 2] | 0;
   i2 = _malloc(44) | 0;
   if (!i2) {
    _ass_aligned_free(i7);
    break;
   } else {
    HEAP32[i2 >> 2] = i5;
    HEAP32[i2 + 4 >> 2] = i6;
    HEAP32[i2 + 8 >> 2] = i5;
    HEAP32[i2 + 12 >> 2] = i7;
    HEAP32[i2 + 16 >> 2] = i1;
    HEAP32[i2 + 20 >> 2] = i8;
    HEAP32[i2 + 24 >> 2] = i4;
    HEAP32[i2 + 36 >> 2] = 0;
    _ass_cache_inc_ref(0);
    HEAP32[i2 + 40 >> 2] = 0;
    HEAP32[i2 + 28 >> 2] = HEAP32[i86 >> 2];
    HEAP32[i86 >> 2] = i2;
    break;
   }
  } while (0);
  _ass_shaper_cleanup(HEAP32[i72 >> 2] | 0, i83);
  _ass_cache_dec_ref(HEAP32[i84 >> 2] | 0);
  _free(HEAP32[i85 >> 2] | 0);
  _ass_drawing_free(HEAP32[i87 >> 2] | 0);
  HEAP32[i84 >> 2] = 0;
  HEAP32[i85 >> 2] = 0;
  HEAP32[i87 >> 2] = 0;
  if ((HEAP32[i88 >> 2] | 0) > 0) {
   i1 = 0;
   do {
    _ass_drawing_free(HEAP32[(HEAP32[i73 >> 2] | 0) + (i1 * 344 | 0) + 32 >> 2] | 0);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[i88 >> 2] | 0));
  }
  HEAP32[i88 >> 2] = 0;
  i88 = 0;
  STACKTOP = i89;
  return i88 | 0;
 }
 i88 = 1;
 STACKTOP = i89;
 return i88 | 0;
}

function _cf2_interpT2CharString(i75, i7, i77, i78, i68, i1, i5, i67) {
 i75 = i75 | 0;
 i7 = i7 | 0;
 i77 = i77 | 0;
 i78 = i78 | 0;
 i68 = i68 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i67 = i67 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i76 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0;
 i99 = STACKTOP;
 STACKTOP = STACKTOP + 15792 | 0;
 i81 = i99 + 11920 | 0;
 i73 = i99 + 11916 | 0;
 i72 = i99 + 11912 | 0;
 i66 = i99 + 15788 | 0;
 i96 = i99 + 11880 | 0;
 i97 = i99 + 11848 | 0;
 i63 = i99 + 11816 | 0;
 i98 = i99 + 32 | 0;
 i80 = i99 + 4 | 0;
 i76 = i99;
 HEAP32[i73 >> 2] = i1;
 HEAP32[i72 >> 2] = i5;
 i64 = i75 + 132 | 0;
 i74 = HEAP32[i64 >> 2] | 0;
 i82 = i75 + 4 | 0;
 i87 = HEAP32[i75 >> 2] | 0;
 i3 = i75 + 48 | 0;
 i59 = HEAP32[i3 >> 2] | 0;
 i6 = i74 + 736 | 0;
 i65 = HEAP32[(HEAP32[i6 >> 2] | 0) + 532 >> 2] << 16;
 HEAP32[i96 >> 2] = i87;
 HEAP32[i96 + 4 >> 2] = i82;
 HEAP32[i96 + 8 >> 2] = 20;
 i88 = i96 + 12 | 0;
 HEAP32[i88 >> 2] = 0;
 HEAP32[i96 + 16 >> 2] = 10;
 i89 = i96 + 20 | 0;
 HEAP32[i89 >> 2] = 0;
 i90 = i96 + 24 | 0;
 HEAP32[i90 >> 2] = 0;
 i91 = i96 + 28 | 0;
 HEAP32[i91 >> 2] = 0;
 HEAP32[i97 >> 2] = i87;
 HEAP32[i97 + 4 >> 2] = i82;
 HEAP32[i97 + 8 >> 2] = 20;
 i92 = i97 + 12 | 0;
 HEAP32[i92 >> 2] = 0;
 HEAP32[i97 + 16 >> 2] = 10;
 i93 = i97 + 20 | 0;
 HEAP32[i93 >> 2] = 0;
 i94 = i97 + 24 | 0;
 HEAP32[i94 >> 2] = 0;
 i95 = i97 + 28 | 0;
 HEAP32[i95 >> 2] = 0;
 i60 = i63 + 4 | 0;
 HEAP32[i60 >> 2] = 0;
 HEAP32[i60 + 4 >> 2] = 0;
 HEAP32[i60 + 8 >> 2] = 0;
 HEAP32[i60 + 12 >> 2] = 0;
 HEAP32[i60 + 16 >> 2] = 0;
 HEAP32[i60 + 20 >> 2] = 0;
 HEAP32[i63 >> 2] = i82;
 i4 = i75 + 196 | 0;
 i61 = i98 + 20 | 0;
 i1 = i61 + 11644 | 0;
 i2 = i1 + 120 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i98 >> 2] = i75;
 HEAP32[i98 + 4 >> 2] = i77;
 i51 = i98 + 11612 | 0;
 HEAP32[i51 >> 2] = i87;
 HEAP32[i98 + 11616 >> 2] = i82;
 HEAP32[i98 + 11620 >> 2] = 8;
 i83 = i98 + 11624 | 0;
 HEAP32[i83 >> 2] = 0;
 HEAP32[i98 + 11628 >> 2] = 10;
 i84 = i98 + 11632 | 0;
 HEAP32[i84 >> 2] = 0;
 i85 = i98 + 11636 | 0;
 HEAP32[i85 >> 2] = 0;
 i86 = i98 + 11640 | 0;
 HEAP32[i86 >> 2] = 0;
 i52 = i98 + 7744 | 0;
 _memset(i98 + 7756 | 0, 0, 3856) | 0;
 i53 = i75 + 140 | 0;
 i43 = HEAP8[i53 >> 0] | 0;
 HEAP8[i98 + 7757 >> 0] = i43;
 HEAP32[i98 + 7760 >> 2] = i59;
 HEAP32[i52 >> 2] = i75;
 HEAP32[i98 + 7748 >> 2] = i52;
 HEAP32[i98 + 7752 >> 2] = i51;
 _memset(i98 + 3888 | 0, 0, 3856) | 0;
 HEAP8[i98 + 3889 >> 0] = i43;
 HEAP32[i98 + 3892 >> 2] = i59;
 HEAP32[i98 + 3876 >> 2] = i75;
 HEAP32[i98 + 3880 >> 2] = i52;
 HEAP32[i98 + 3884 >> 2] = i51;
 _memset(i61 | 0, 0, 3856) | 0;
 HEAP8[i98 + 21 >> 0] = i43;
 HEAP32[i98 + 24 >> 2] = i59;
 HEAP32[i98 + 8 >> 2] = i75;
 HEAP32[i98 + 12 >> 2] = i52;
 HEAP32[i98 + 16 >> 2] = i51;
 HEAP32[i98 + 11644 >> 2] = HEAP32[i75 + 36 >> 2];
 HEAP32[i98 + 11648 >> 2] = HEAP32[i75 + 44 >> 2];
 HEAP32[i98 + 11652 >> 2] = HEAP32[i3 >> 2];
 i43 = i78;
 i42 = HEAP32[i43 + 4 >> 2] | 0;
 i41 = i98 + 11656 | 0;
 HEAP32[i41 >> 2] = HEAP32[i43 >> 2];
 HEAP32[i41 + 4 >> 2] = i42;
 i41 = i98 + 11668 | 0;
 HEAP32[i41 >> 2] = i96;
 i42 = i98 + 11672 | 0;
 HEAP32[i42 >> 2] = i97;
 i43 = i98 + 11676 | 0;
 HEAP32[i43 >> 2] = i63;
 i44 = i98 + 11680 | 0;
 HEAP32[i44 >> 2] = i5;
 HEAP32[i98 + 11684 >> 2] = i4;
 HEAP8[i98 + 11666 >> 0] = HEAP8[i75 + 141 >> 0] | 0;
 i55 = HEAP32[i75 + 184 >> 2] | 0;
 HEAP32[i98 + 11688 >> 2] = i55;
 i54 = HEAP32[i75 + 188 >> 2] | 0;
 HEAP32[i98 + 11692 >> 2] = i54;
 i55 = (i55 | 0) < 0 ? 0 - i55 | 0 : i55;
 i54 = (i54 | 0) < 0 ? 0 - i54 | 0 : i54;
 HEAP32[i98 + 11696 >> 2] = ((i55 | 0) > (i54 | 0) ? i55 : i54) << 1;
 HEAP32[i98 + 11700 >> 2] = 6554;
 i54 = i98 + 11667 | 0;
 HEAP8[i54 >> 0] = 1;
 i55 = i98 + 11664 | 0;
 HEAP8[i55 >> 0] = 0;
 i56 = i98 + 11665 | 0;
 HEAP8[i56 >> 0] = 0;
 i57 = i98 + 11744 | 0;
 HEAP8[i57 >> 0] = 0;
 HEAP8[i66 >> 0] = 0;
 HEAP32[i67 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 528 >> 2] << 16;
 HEAP32[i81 >> 2] = 0;
 i79 = _ft_mem_qalloc(i87, 396, i81) | 0;
 if (!(HEAP32[i81 >> 2] | 0)) {
  HEAP32[i79 >> 2] = i87;
  HEAP32[i79 + 4 >> 2] = i82;
  HEAP32[i79 + 392 >> 2] = i79 + 8;
  i1 = (i79 | 0) == 0;
  i62 = 4;
 } else if (!i79) {
  i2 = 64;
  i1 = 1;
  i3 = 0;
  i62 = 755;
 } else {
  i1 = 0;
  i62 = 4;
 }
 L4 : do if ((i62 | 0) == 4) {
  HEAP32[i81 >> 2] = 0;
  i3 = _ft_mem_realloc(i87, 1, 0, 272, 0, i81) | 0;
  if (!(HEAP32[i81 >> 2] | 0)) i39 = 17; else if (!(HEAP32[i82 >> 2] | 0)) {
   HEAP32[i82 >> 2] = 64;
   i39 = 0;
  } else i39 = 0;
  HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  if (!(HEAP32[i82 >> 2] | 0)) {
   i71 = i79 + 392 | 0;
   i69 = i79 + 4 | 0;
   i70 = i79 + 8 | 0;
   i58 = i70;
   i47 = i98 + 11736 | 0;
   i18 = i98 + 11720 | 0;
   i48 = i98 + 11740 | 0;
   i19 = i98 + 11724 | 0;
   i49 = i98 + 8 | 0;
   i20 = i98 + 3876 | 0;
   i50 = i98 + 11704 | 0;
   i45 = i98 + 11712 | 0;
   i46 = i98 + 11716 | 0;
   i40 = i79 + 12 | 0;
   i21 = i74 + 708 | 0;
   i22 = i74 + 700 | 0;
   i23 = i74 + 716 | 0;
   i24 = i74 + 704 | 0;
   i25 = i74 + 696 | 0;
   i26 = i74 + 712 | 0;
   i27 = i63 + 8 | 0;
   i28 = i63 + 12 | 0;
   i29 = i63 + 5 | 0;
   i30 = i81 + 12 | 0;
   i31 = i81 + 13 | 0;
   i32 = i81 + 16 | 0;
   i33 = i81 + 4 | 0;
   i34 = i81 + 8 | 0;
   i35 = i80 + 4 | 0;
   i36 = i80 + 8 | 0;
   i37 = i80 + 12 | 0;
   i38 = i80 + 5 | 0;
   i6 = 2e7;
   i16 = i3;
   i15 = 0;
   L11 : while (1) {
    i7 = i16 + 8 | 0;
    i8 = HEAP32[i7 >> 2] | 0;
    i9 = i16 + 12 | 0;
    i2 = HEAP32[i9 >> 2] | 0;
    if (i2 >>> 0 < i8 >>> 0) {
     i4 = i2 + 1 | 0;
     HEAP32[i9 >> 2] = i4;
     i14 = HEAPU8[i2 >> 0] | 0;
    } else {
     i14 = (i15 | 0) == 0 ? 14 : 11;
     i4 = i2;
    }
    if (HEAP32[i82 >> 2] | 0) break L4;
    i17 = i6 + -1 | 0;
    if (!i17) {
     i2 = 18;
     i62 = 755;
     break L4;
    }
    L19 : do switch ((i14 & 255) << 24 >> 24) {
    case 14:
     break L11;
    case 17:
    case 16:
    case 15:
    case 13:
    case 9:
    case 2:
    case 0:
     break;
    case 1:
    case 18:
     {
      if (!(HEAP8[i60 >> 0] | 0)) {
       _cf2_doStems(i75, i79, i96, i67, i66);
       if (HEAP8[(HEAP32[i64 >> 2] | 0) + 561 >> 0] | 0) {
        i2 = 0;
        i62 = 755;
        break L4;
       }
      }
      break;
     }
    case 3:
    case 23:
     {
      if (!(HEAP8[i60 >> 0] | 0)) {
       _cf2_doStems(i75, i79, i97, i67, i66);
       if (HEAP8[(HEAP32[i64 >> 2] | 0) + 561 >> 0] | 0) {
        i2 = 0;
        i62 = 755;
        break L4;
       }
      }
      break;
     }
    case 4:
     {
      i4 = HEAP32[i71 >> 2] | 0;
      i2 = i4 - i58 >> 3;
      if (!((HEAP8[i66 >> 0] | 0) != 0 | i2 >>> 0 < 2)) {
       L93 : do if (!i2) {
        i2 = HEAP32[i69 >> 2] | 0;
        if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
         HEAP32[i2 >> 2] = 130;
         i2 = 0;
        } else i2 = 0;
       } else switch (HEAP32[i40 >> 2] | 0) {
       case 2:
        {
         i2 = HEAP32[i70 >> 2] << 16;
         break L93;
        }
       case 1:
        {
         i2 = HEAP32[i70 >> 2] | 0;
         if ((i2 | 0) < 0) {
          i2 = 0 - (8192 - i2 >> 14) | 0;
          break L93;
         } else {
          i2 = i2 + 8192 >> 14;
          break L93;
         }
        }
       default:
        {
         i2 = HEAP32[i70 >> 2] | 0;
         break L93;
        }
       } while (0);
       HEAP32[i67 >> 2] = i2 + i65;
      }
      HEAP8[i66 >> 0] = 1;
      if (HEAP8[(HEAP32[i64 >> 2] | 0) + 561 >> 0] | 0) {
       i2 = 0;
       i62 = 755;
       break L4;
      }
      L108 : do if ((i4 | 0) == (i70 | 0)) {
       i2 = HEAP32[i69 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 161;
        i2 = 0;
       } else i2 = 0;
      } else {
       i2 = i4 + -8 | 0;
       HEAP32[i71 >> 2] = i2;
       switch (HEAP32[i4 + -4 >> 2] | 0) {
       case 2:
        {
         i2 = HEAP32[i2 >> 2] << 16;
         break L108;
        }
       case 1:
        {
         i2 = HEAP32[i2 >> 2] | 0;
         if ((i2 | 0) < 0) {
          i2 = 0 - (8192 - i2 >> 14) | 0;
          break L108;
         } else {
          i2 = i2 + 8192 >> 14;
          break L108;
         }
        }
       default:
        {
         i2 = HEAP32[i2 >> 2] | 0;
         break L108;
        }
       }
      } while (0);
      i2 = (HEAP32[i72 >> 2] | 0) + i2 | 0;
      HEAP32[i72 >> 2] = i2;
      i4 = HEAP32[i73 >> 2] | 0;
      if (HEAP8[i55 >> 0] | 0) {
       HEAP8[i56 >> 0] = 1;
       _cf2_glyphpath_lineTo(i98, HEAP32[i47 >> 2] | 0, HEAP32[i48 >> 2] | 0);
       if (HEAP8[i57 >> 0] | 0) _cf2_glyphpath_pushPrevElem(i98, i49, i50, HEAP32[i45 >> 2] | 0, HEAP32[i46 >> 2] | 0, 1);
       HEAP8[i54 >> 0] = 1;
       HEAP8[i55 >> 0] = 0;
       HEAP8[i56 >> 0] = 0;
       HEAP8[i57 >> 0] = 0;
      }
      HEAP32[i47 >> 2] = i4;
      HEAP32[i18 >> 2] = i4;
      HEAP32[i48 >> 2] = i2;
      HEAP32[i19 >> 2] = i2;
      HEAP8[i54 >> 0] = 1;
      i2 = HEAP32[i43 >> 2] | 0;
      if (!(HEAP8[i61 >> 0] | 0)) i62 = 48; else if (HEAP8[i2 + 5 >> 0] | 0) i62 = 48;
      if ((i62 | 0) == 48) {
       i62 = 0;
       _cf2_hintmap_build(i49, HEAP32[i41 >> 2] | 0, HEAP32[i42 >> 2] | 0, i2, HEAP32[i44 >> 2] | 0, 0);
      }
      _memcpy(i20 | 0, i49 | 0, 3868) | 0;
      break;
     }
    case 5:
     {
      i4 = HEAP32[i71 >> 2] | 0;
      i8 = i4 - i58 >> 3;
      L133 : do if (i8 | 0) {
       i2 = 0;
       while (1) {
        i6 = i4 - i58 >> 3;
        L136 : do if (i6 >>> 0 > i2 >>> 0) {
         i4 = i79 + 8 + (i2 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i4 = HEAP32[i4 >> 2] << 16;
           break L136;
          }
         case 1:
          {
           i4 = HEAP32[i4 >> 2] | 0;
           if ((i4 | 0) < 0) {
            i4 = 0 - (8192 - i4 >> 14) | 0;
            break L136;
           } else {
            i4 = i4 + 8192 >> 14;
            break L136;
           }
          }
         default:
          {
           i4 = HEAP32[i4 >> 2] | 0;
           break L136;
          }
         }
        } else {
         i4 = HEAP32[i69 >> 2] | 0;
         if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
          HEAP32[i4 >> 2] = 130;
          i4 = 0;
         } else i4 = 0;
        } while (0);
        i7 = (HEAP32[i73 >> 2] | 0) + i4 | 0;
        HEAP32[i73 >> 2] = i7;
        i5 = i2 | 1;
        L149 : do if (i6 >>> 0 > i5 >>> 0) {
         i4 = i79 + 8 + (i5 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i5 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i5 = HEAP32[i4 >> 2] << 16;
           i4 = i7;
           break L149;
          }
         case 1:
          {
           i4 = HEAP32[i4 >> 2] | 0;
           if ((i4 | 0) < 0) {
            i5 = 0 - (8192 - i4 >> 14) | 0;
            i4 = i7;
            break L149;
           } else {
            i5 = i4 + 8192 >> 14;
            i4 = i7;
            break L149;
           }
          }
         default:
          {
           i5 = HEAP32[i4 >> 2] | 0;
           i4 = i7;
           break L149;
          }
         }
        } else {
         i4 = HEAP32[i69 >> 2] | 0;
         if (!i4) {
          i5 = 0;
          i4 = i7;
         } else if (!(HEAP32[i4 >> 2] | 0)) {
          HEAP32[i4 >> 2] = 130;
          i5 = 0;
          i4 = HEAP32[i73 >> 2] | 0;
         } else {
          i5 = 0;
          i4 = i7;
         }
        } while (0);
        i14 = (HEAP32[i72 >> 2] | 0) + i5 | 0;
        HEAP32[i72 >> 2] = i14;
        _cf2_glyphpath_lineTo(i98, i4, i14);
        i2 = i2 + 2 | 0;
        if (i2 >>> 0 >= i8 >>> 0) break L133;
        i4 = HEAP32[i71 >> 2] | 0;
       }
      } while (0);
      HEAP32[i71 >> 2] = i70;
      i13 = i15;
      i14 = i16;
      i6 = i17;
      i15 = i13;
      i16 = i14;
      continue L11;
     }
    case 7:
    case 6:
     {
      i4 = HEAP32[i71 >> 2] | 0;
      i7 = i4 - i58 >> 3;
      L165 : do if (i7 | 0) {
       i2 = 0;
       i6 = (i14 | 0) == 6;
       while (1) {
        L169 : do if (i4 - i58 >> 3 >>> 0 > i2 >>> 0) {
         i4 = i79 + 8 + (i2 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i4 = HEAP32[i4 >> 2] << 16;
           break L169;
          }
         case 1:
          {
           i4 = HEAP32[i4 >> 2] | 0;
           if ((i4 | 0) < 0) {
            i4 = 0 - (8192 - i4 >> 14) | 0;
            break L169;
           } else {
            i4 = i4 + 8192 >> 14;
            break L169;
           }
          }
         default:
          {
           i4 = HEAP32[i4 >> 2] | 0;
           break L169;
          }
         }
        } else {
         i4 = HEAP32[i69 >> 2] | 0;
         if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
          HEAP32[i4 >> 2] = 130;
          i4 = 0;
         } else i4 = 0;
        } while (0);
        if (i6) {
         i4 = (HEAP32[i73 >> 2] | 0) + i4 | 0;
         HEAP32[i73 >> 2] = i4;
         i5 = HEAP32[i72 >> 2] | 0;
        } else {
         i5 = (HEAP32[i72 >> 2] | 0) + i4 | 0;
         HEAP32[i72 >> 2] = i5;
         i4 = HEAP32[i73 >> 2] | 0;
        }
        _cf2_glyphpath_lineTo(i98, i4, i5);
        i2 = i2 + 1 | 0;
        if ((i2 | 0) == (i7 | 0)) break L165;
        i6 = i6 ^ 1;
        i4 = HEAP32[i71 >> 2] | 0;
       }
      } while (0);
      HEAP32[i71 >> 2] = i70;
      i13 = i15;
      i14 = i16;
      i6 = i17;
      i15 = i13;
      i16 = i14;
      continue L11;
     }
    case 8:
    case 24:
     {
      i2 = HEAP32[i71 >> 2] | 0;
      i13 = i2 - i58 >> 3;
      L189 : do if (i13 >>> 0 < 6) i4 = 0; else {
       i11 = 0;
       i12 = 6;
       while (1) {
        i9 = i2 - i58 >> 3;
        L192 : do if (i9 >>> 0 > i11 >>> 0) {
         i2 = i79 + 8 + (i11 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i11 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i2 = HEAP32[i2 >> 2] << 16;
           break L192;
          }
         case 1:
          {
           i2 = HEAP32[i2 >> 2] | 0;
           if ((i2 | 0) < 0) {
            i2 = 0 - (8192 - i2 >> 14) | 0;
            break L192;
           } else {
            i2 = i2 + 8192 >> 14;
            break L192;
           }
          }
         default:
          {
           i2 = HEAP32[i2 >> 2] | 0;
           break L192;
          }
         }
        } else {
         i2 = HEAP32[i69 >> 2] | 0;
         if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
          HEAP32[i2 >> 2] = 130;
          i2 = 0;
         } else i2 = 0;
        } while (0);
        i10 = (HEAP32[i73 >> 2] | 0) + i2 | 0;
        i2 = i11 | 1;
        L205 : do if (i9 >>> 0 > i2 >>> 0) {
         i4 = i79 + 8 + (i2 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i2 = HEAP32[i4 >> 2] << 16;
           break L205;
          }
         case 1:
          {
           i2 = HEAP32[i4 >> 2] | 0;
           if ((i2 | 0) < 0) {
            i2 = 0 - (8192 - i2 >> 14) | 0;
            break L205;
           } else {
            i2 = i2 + 8192 >> 14;
            break L205;
           }
          }
         default:
          {
           i2 = HEAP32[i4 >> 2] | 0;
           break L205;
          }
         }
        } else {
         i2 = HEAP32[i69 >> 2] | 0;
         if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
          HEAP32[i2 >> 2] = 130;
          i2 = 0;
         } else i2 = 0;
        } while (0);
        i8 = (HEAP32[i72 >> 2] | 0) + i2 | 0;
        i2 = i11 + 2 | 0;
        L218 : do if (i9 >>> 0 > i2 >>> 0) {
         i4 = i79 + 8 + (i2 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i2 = HEAP32[i4 >> 2] << 16;
           break L218;
          }
         case 1:
          {
           i2 = HEAP32[i4 >> 2] | 0;
           if ((i2 | 0) < 0) {
            i2 = 0 - (8192 - i2 >> 14) | 0;
            break L218;
           } else {
            i2 = i2 + 8192 >> 14;
            break L218;
           }
          }
         default:
          {
           i2 = HEAP32[i4 >> 2] | 0;
           break L218;
          }
         }
        } else {
         i2 = HEAP32[i69 >> 2] | 0;
         if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
          HEAP32[i2 >> 2] = 130;
          i2 = 0;
         } else i2 = 0;
        } while (0);
        i7 = i2 + i10 | 0;
        i2 = i11 + 3 | 0;
        L231 : do if (i9 >>> 0 > i2 >>> 0) {
         i4 = i79 + 8 + (i2 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i2 = HEAP32[i4 >> 2] << 16;
           break L231;
          }
         case 1:
          {
           i2 = HEAP32[i4 >> 2] | 0;
           if ((i2 | 0) < 0) {
            i2 = 0 - (8192 - i2 >> 14) | 0;
            break L231;
           } else {
            i2 = i2 + 8192 >> 14;
            break L231;
           }
          }
         default:
          {
           i2 = HEAP32[i4 >> 2] | 0;
           break L231;
          }
         }
        } else {
         i2 = HEAP32[i69 >> 2] | 0;
         if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
          HEAP32[i2 >> 2] = 130;
          i2 = 0;
         } else i2 = 0;
        } while (0);
        i6 = i2 + i8 | 0;
        i2 = i11 + 4 | 0;
        L244 : do if (i9 >>> 0 > i2 >>> 0) {
         i4 = i79 + 8 + (i2 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i2 = HEAP32[i4 >> 2] << 16;
           break L244;
          }
         case 1:
          {
           i2 = HEAP32[i4 >> 2] | 0;
           if ((i2 | 0) < 0) {
            i2 = 0 - (8192 - i2 >> 14) | 0;
            break L244;
           } else {
            i2 = i2 + 8192 >> 14;
            break L244;
           }
          }
         default:
          {
           i2 = HEAP32[i4 >> 2] | 0;
           break L244;
          }
         }
        } else {
         i2 = HEAP32[i69 >> 2] | 0;
         if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
          HEAP32[i2 >> 2] = 130;
          i2 = 0;
         } else i2 = 0;
        } while (0);
        i5 = i2 + i7 | 0;
        i4 = i11 + 5 | 0;
        L257 : do if (i9 >>> 0 > i4 >>> 0) {
         i2 = i79 + 8 + (i4 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i2 = HEAP32[i2 >> 2] << 16;
           break L257;
          }
         case 1:
          {
           i2 = HEAP32[i2 >> 2] | 0;
           if ((i2 | 0) < 0) {
            i2 = 0 - (8192 - i2 >> 14) | 0;
            break L257;
           } else {
            i2 = i2 + 8192 >> 14;
            break L257;
           }
          }
         default:
          {
           i2 = HEAP32[i2 >> 2] | 0;
           break L257;
          }
         }
        } else {
         i2 = HEAP32[i69 >> 2] | 0;
         if (!i2) i2 = 0; else {
          if (HEAP32[i2 >> 2] | 0) {
           i2 = 0;
           break;
          }
          HEAP32[i2 >> 2] = 130;
          i2 = 0;
         }
        } while (0);
        i4 = i2 + i6 | 0;
        _cf2_glyphpath_curveTo(i98, i10, i8, i7, i6, i5, i4);
        HEAP32[i73 >> 2] = i5;
        HEAP32[i72 >> 2] = i4;
        i4 = i12 + 6 | 0;
        if (i4 >>> 0 > i13 >>> 0) {
         i4 = i12;
         break L189;
        }
        i11 = i12;
        i2 = HEAP32[i71 >> 2] | 0;
        i12 = i4;
       }
      } while (0);
      if ((i14 | 0) == 24) {
       i5 = (HEAP32[i71 >> 2] | 0) - i58 >> 3;
       L274 : do if (i5 >>> 0 > i4 >>> 0) {
        i2 = i79 + 8 + (i4 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i2 = HEAP32[i2 >> 2] << 16;
          break L274;
         }
        case 1:
         {
          i2 = HEAP32[i2 >> 2] | 0;
          if ((i2 | 0) < 0) {
           i2 = 0 - (8192 - i2 >> 14) | 0;
           break L274;
          } else {
           i2 = i2 + 8192 >> 14;
           break L274;
          }
         }
        default:
         {
          i2 = HEAP32[i2 >> 2] | 0;
          break L274;
         }
        }
       } else {
        i2 = HEAP32[i69 >> 2] | 0;
        if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
         HEAP32[i2 >> 2] = 130;
         i2 = 0;
        } else i2 = 0;
       } while (0);
       i6 = (HEAP32[i73 >> 2] | 0) + i2 | 0;
       HEAP32[i73 >> 2] = i6;
       i4 = i4 | 1;
       L287 : do if (i5 >>> 0 > i4 >>> 0) {
        i2 = i79 + 8 + (i4 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i2 >> 2] << 16;
          i2 = i6;
          break L287;
         }
        case 1:
         {
          i2 = HEAP32[i2 >> 2] | 0;
          if ((i2 | 0) < 0) {
           i4 = 0 - (8192 - i2 >> 14) | 0;
           i2 = i6;
           break L287;
          } else {
           i4 = i2 + 8192 >> 14;
           i2 = i6;
           break L287;
          }
         }
        default:
         {
          i4 = HEAP32[i2 >> 2] | 0;
          i2 = i6;
          break L287;
         }
        }
       } else {
        i2 = HEAP32[i69 >> 2] | 0;
        if (!i2) {
         i4 = 0;
         i2 = i6;
        } else if (!(HEAP32[i2 >> 2] | 0)) {
         HEAP32[i2 >> 2] = 130;
         i4 = 0;
         i2 = HEAP32[i73 >> 2] | 0;
        } else {
         i4 = 0;
         i2 = i6;
        }
       } while (0);
       i14 = (HEAP32[i72 >> 2] | 0) + i4 | 0;
       HEAP32[i72 >> 2] = i14;
       _cf2_glyphpath_lineTo(i98, i2, i14);
      }
      HEAP32[i71 >> 2] = i70;
      i13 = i15;
      i14 = i16;
      i6 = i17;
      i15 = i13;
      i16 = i14;
      continue L11;
     }
    case 10:
    case 29:
     {
      if ((i15 | 0) > 16) {
       i2 = 18;
       i62 = 755;
       break L4;
      }
      i7 = i15 + 1 | 0;
      if (i39 >>> 0 > i7 >>> 0) i2 = i7; else {
       HEAP32[i82 >> 2] = 130;
       i2 = 0;
      }
      i5 = i3 + (i2 << 4) | 0;
      i2 = HEAP32[i71 >> 2] | 0;
      do if ((i2 | 0) == (i70 | 0)) {
       i2 = HEAP32[i69 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 161;
        i2 = 0;
       } else i2 = 0;
      } else {
       i4 = i2 + -8 | 0;
       if ((HEAP32[i2 + -4 >> 2] | 0) == 2) {
        HEAP32[i71 >> 2] = i4;
        i2 = HEAP32[i4 >> 2] | 0;
        break;
       }
       i2 = HEAP32[i69 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 160;
        i2 = 0;
       } else i2 = 0;
      } while (0);
      HEAP32[i5 >> 2] = 0;
      HEAP32[i5 + 4 >> 2] = 0;
      HEAP32[i5 + 8 >> 2] = 0;
      HEAP32[i5 + 12 >> 2] = 0;
      if ((i14 | 0) == 29) {
       i2 = (HEAP32[i21 >> 2] | 0) + i2 | 0;
       if (i2 >>> 0 >= (HEAP32[i22 >> 2] | 0) >>> 0) {
        i2 = 18;
        i62 = 755;
        break L4;
       }
       i6 = HEAP32[i23 >> 2] | 0;
       i16 = HEAP32[i6 + (i2 << 2) >> 2] | 0;
       HEAP32[i5 + 12 >> 2] = i16;
       HEAP32[i5 + 4 >> 2] = i16;
       HEAP32[i5 + 8 >> 2] = HEAP32[i6 + (i2 + 1 << 2) >> 2];
       i6 = i17;
       i16 = i5;
       i15 = i7;
       continue L11;
      } else {
       i2 = (HEAP32[i24 >> 2] | 0) + i2 | 0;
       if (i2 >>> 0 >= (HEAP32[i25 >> 2] | 0) >>> 0) {
        i2 = 18;
        i62 = 755;
        break L4;
       }
       i6 = HEAP32[i26 >> 2] | 0;
       i16 = HEAP32[i6 + (i2 << 2) >> 2] | 0;
       HEAP32[i5 + 12 >> 2] = i16;
       HEAP32[i5 + 4 >> 2] = i16;
       HEAP32[i5 + 8 >> 2] = HEAP32[i6 + (i2 + 1 << 2) >> 2];
       i6 = i17;
       i16 = i5;
       i15 = i7;
       continue L11;
      }
     }
    case 11:
     {
      if ((i15 | 0) < 1) {
       i2 = 18;
       i62 = 755;
       break L4;
      }
      i4 = i15 + -1 | 0;
      if (i39 >>> 0 > i4 >>> 0) i2 = i4; else {
       HEAP32[i82 >> 2] = 130;
       i2 = 0;
      }
      i6 = i17;
      i16 = i3 + (i2 << 4) | 0;
      i15 = i4;
      continue L11;
     }
    case 12:
     {
      if (i4 >>> 0 < i8 >>> 0) {
       HEAP32[i9 >> 2] = i4 + 1;
       i2 = HEAPU8[i4 >> 0] | 0;
      } else {
       i2 = HEAP32[i16 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 85;
        i2 = 0;
       } else i2 = 0;
      }
      switch ((i2 & 255) << 24 >> 24) {
      case 37:
       {
        _cf2_doFlex(i79, i73, i72, i98, 280204, 1);
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
      case 36:
       {
        _cf2_doFlex(i79, i73, i72, i98, 280192, 0);
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
      case 35:
       {
        _cf2_doFlex(i79, i73, i72, i98, 280180, 0);
        break L19;
       }
      case 34:
       {
        _cf2_doFlex(i79, i73, i72, i98, 280168, 0);
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
      default:
       break L19;
      }
     }
    case 19:
    case 20:
     {
      if ((HEAP8[i60 >> 0] | 0) == 0 ? 1 : (HEAP32[i71 >> 2] | 0) - i58 >> 3 >>> 0 < 2) {
       _cf2_doStems(i75, i79, i97, i67, i66);
       if (HEAP8[(HEAP32[i64 >> 2] | 0) + 561 >> 0] | 0) {
        i2 = 0;
        i62 = 755;
        break L4;
       }
       if ((i14 | 0) == 19) {
        i2 = (HEAP32[i93 >> 2] | 0) + (HEAP32[i89 >> 2] | 0) | 0;
        if (i2 >>> 0 > 96) {
         i2 = HEAP32[i63 >> 2] | 0;
         if (!i2) break L19;
         if (HEAP32[i2 >> 2] | 0) break L19;
         HEAP32[i2 >> 2] = 18;
         break L19;
        }
        HEAP32[i27 >> 2] = i2;
        i4 = (i2 + 7 | 0) >>> 3;
        HEAP32[i28 >> 2] = i4;
        HEAP8[i60 >> 0] = 1;
        HEAP8[i29 >> 0] = 1;
        if ((i2 | 0) == 0 | (i4 | 0) == 0) break L19;
        i5 = 0;
        do {
         i2 = HEAP32[i9 >> 2] | 0;
         if (i2 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
          HEAP32[i9 >> 2] = i2 + 1;
          i2 = HEAPU8[i2 >> 0] | 0;
         } else {
          i2 = HEAP32[i16 >> 2] | 0;
          if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
           HEAP32[i2 >> 2] = 85;
           i2 = 0;
           i4 = HEAP32[i28 >> 2] | 0;
          } else i2 = 0;
         }
         HEAP8[i63 + 16 + i5 >> 0] = i2;
         i5 = i5 + 1 | 0;
        } while (i5 >>> 0 < i4 >>> 0);
       } else {
        _memset(i30 | 0, 0, 3856) | 0;
        HEAP8[i31 >> 0] = HEAP8[i53 >> 0] | 0;
        HEAP32[i32 >> 2] = i59;
        HEAP32[i81 >> 2] = i75;
        HEAP32[i33 >> 2] = i52;
        HEAP32[i34 >> 2] = i51;
        HEAP32[i35 >> 2] = 0;
        HEAP32[i35 + 4 >> 2] = 0;
        HEAP32[i35 + 8 >> 2] = 0;
        HEAP32[i35 + 12 >> 2] = 0;
        HEAP32[i35 + 16 >> 2] = 0;
        HEAP32[i35 + 20 >> 2] = 0;
        HEAP32[i80 >> 2] = i82;
        i2 = (HEAP32[i93 >> 2] | 0) + (HEAP32[i89 >> 2] | 0) | 0;
        if (i2 >>> 0 > 96) {
         if (!(HEAP32[i82 >> 2] | 0)) HEAP32[i82 >> 2] = 18;
        } else {
         HEAP32[i36 >> 2] = i2;
         i5 = (i2 + 7 | 0) >>> 3;
         HEAP32[i37 >> 2] = i5;
         HEAP8[i35 >> 0] = 1;
         HEAP8[i38 >> 0] = 1;
         if (!((i2 | 0) == 0 | (i5 | 0) == 0)) {
          i4 = 0;
          do {
           i2 = HEAP32[i9 >> 2] | 0;
           do if (i2 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
            HEAP32[i9 >> 2] = i2 + 1;
            i2 = HEAPU8[i2 >> 0] | 0;
           } else {
            i2 = HEAP32[i16 >> 2] | 0;
            if (!i2) i2 = 0; else {
             if (HEAP32[i2 >> 2] | 0) {
              i2 = 0;
              break;
             }
             HEAP32[i2 >> 2] = 85;
             i2 = 0;
            }
           } while (0);
           HEAP8[i80 + 16 + i4 >> 0] = i2;
           i4 = i4 + 1 | 0;
          } while (i4 >>> 0 < i5 >>> 0);
         }
        }
        _cf2_hintmap_build(i81, i96, i97, i80, 0, 0);
        break L19;
       }
      }
      break;
     }
    case 21:
     {
      i6 = HEAP32[i71 >> 2] | 0;
      i2 = i6 - i58 >> 3;
      if (!((HEAP8[i66 >> 0] | 0) != 0 | i2 >>> 0 < 3)) {
       L376 : do if (!i2) {
        i2 = HEAP32[i69 >> 2] | 0;
        if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
         HEAP32[i2 >> 2] = 130;
         i2 = 0;
        } else i2 = 0;
       } else switch (HEAP32[i40 >> 2] | 0) {
       case 2:
        {
         i2 = HEAP32[i70 >> 2] << 16;
         break L376;
        }
       case 1:
        {
         i2 = HEAP32[i70 >> 2] | 0;
         if ((i2 | 0) < 0) {
          i2 = 0 - (8192 - i2 >> 14) | 0;
          break L376;
         } else {
          i2 = i2 + 8192 >> 14;
          break L376;
         }
        }
       default:
        {
         i2 = HEAP32[i70 >> 2] | 0;
         break L376;
        }
       } while (0);
       HEAP32[i67 >> 2] = i2 + i65;
      }
      HEAP8[i66 >> 0] = 1;
      if (HEAP8[(HEAP32[i64 >> 2] | 0) + 561 >> 0] | 0) {
       i2 = 0;
       i62 = 755;
       break L4;
      }
      L391 : do if ((i6 | 0) == (i70 | 0)) {
       i2 = HEAP32[i69 >> 2] | 0;
       if (i2 | 0) if (!(HEAP32[i2 >> 2] | 0)) HEAP32[i2 >> 2] = 161;
       i4 = HEAP32[i72 >> 2] | 0;
       i62 = 331;
      } else {
       i5 = i6 + -8 | 0;
       HEAP32[i71 >> 2] = i5;
       L398 : do switch (HEAP32[i6 + -4 >> 2] | 0) {
       case 2:
        {
         i2 = HEAP32[i5 >> 2] << 16;
         break;
        }
       case 1:
        {
         i2 = HEAP32[i5 >> 2] | 0;
         if ((i2 | 0) < 0) {
          i2 = 0 - (8192 - i2 >> 14) | 0;
          break L398;
         } else {
          i2 = i2 + 8192 >> 14;
          break L398;
         }
        }
       default:
        i2 = HEAP32[i5 >> 2] | 0;
       } while (0);
       i4 = (HEAP32[i72 >> 2] | 0) + i2 | 0;
       HEAP32[i72 >> 2] = i4;
       if ((i5 | 0) == (i70 | 0)) i62 = 331; else {
        i2 = i6 + -16 | 0;
        HEAP32[i71 >> 2] = i2;
        switch (HEAP32[i6 + -12 >> 2] | 0) {
        case 2:
         {
          i2 = HEAP32[i2 >> 2] << 16;
          break L391;
         }
        case 1:
         {
          i2 = HEAP32[i2 >> 2] | 0;
          if ((i2 | 0) < 0) {
           i2 = 0 - (8192 - i2 >> 14) | 0;
           break L391;
          } else {
           i2 = i2 + 8192 >> 14;
           break L391;
          }
         }
        default:
         {
          i2 = HEAP32[i2 >> 2] | 0;
          break L391;
         }
        }
       }
      } while (0);
      if ((i62 | 0) == 331) {
       i62 = 0;
       i2 = HEAP32[i69 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 161;
        i2 = 0;
        i4 = HEAP32[i72 >> 2] | 0;
       } else i2 = 0;
      }
      i2 = (HEAP32[i73 >> 2] | 0) + i2 | 0;
      HEAP32[i73 >> 2] = i2;
      if (HEAP8[i55 >> 0] | 0) {
       HEAP8[i56 >> 0] = 1;
       _cf2_glyphpath_lineTo(i98, HEAP32[i47 >> 2] | 0, HEAP32[i48 >> 2] | 0);
       if (HEAP8[i57 >> 0] | 0) _cf2_glyphpath_pushPrevElem(i98, i49, i50, HEAP32[i45 >> 2] | 0, HEAP32[i46 >> 2] | 0, 1);
       HEAP8[i54 >> 0] = 1;
       HEAP8[i55 >> 0] = 0;
       HEAP8[i56 >> 0] = 0;
       HEAP8[i57 >> 0] = 0;
      }
      HEAP32[i47 >> 2] = i2;
      HEAP32[i18 >> 2] = i2;
      HEAP32[i48 >> 2] = i4;
      HEAP32[i19 >> 2] = i4;
      HEAP8[i54 >> 0] = 1;
      i2 = HEAP32[i43 >> 2] | 0;
      if (!(HEAP8[i61 >> 0] | 0)) i62 = 346; else if (HEAP8[i2 + 5 >> 0] | 0) i62 = 346;
      if ((i62 | 0) == 346) {
       i62 = 0;
       _cf2_hintmap_build(i49, HEAP32[i41 >> 2] | 0, HEAP32[i42 >> 2] | 0, i2, HEAP32[i44 >> 2] | 0, 0);
      }
      _memcpy(i20 | 0, i49 | 0, 3868) | 0;
      break;
     }
    case 22:
     {
      i4 = HEAP32[i71 >> 2] | 0;
      i2 = i4 - i58 >> 3;
      if (!((HEAP8[i66 >> 0] | 0) != 0 | i2 >>> 0 < 2)) {
       L433 : do if (!i2) {
        i2 = HEAP32[i69 >> 2] | 0;
        if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
         HEAP32[i2 >> 2] = 130;
         i2 = 0;
        } else i2 = 0;
       } else switch (HEAP32[i40 >> 2] | 0) {
       case 2:
        {
         i2 = HEAP32[i70 >> 2] << 16;
         break L433;
        }
       case 1:
        {
         i2 = HEAP32[i70 >> 2] | 0;
         if ((i2 | 0) < 0) {
          i2 = 0 - (8192 - i2 >> 14) | 0;
          break L433;
         } else {
          i2 = i2 + 8192 >> 14;
          break L433;
         }
        }
       default:
        {
         i2 = HEAP32[i70 >> 2] | 0;
         break L433;
        }
       } while (0);
       HEAP32[i67 >> 2] = i2 + i65;
      }
      HEAP8[i66 >> 0] = 1;
      if (HEAP8[(HEAP32[i64 >> 2] | 0) + 561 >> 0] | 0) {
       i2 = 0;
       i62 = 755;
       break L4;
      }
      L448 : do if ((i4 | 0) == (i70 | 0)) {
       i2 = HEAP32[i69 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 161;
        i2 = 0;
       } else i2 = 0;
      } else {
       i2 = i4 + -8 | 0;
       HEAP32[i71 >> 2] = i2;
       switch (HEAP32[i4 + -4 >> 2] | 0) {
       case 2:
        {
         i2 = HEAP32[i2 >> 2] << 16;
         break L448;
        }
       case 1:
        {
         i2 = HEAP32[i2 >> 2] | 0;
         if ((i2 | 0) < 0) {
          i2 = 0 - (8192 - i2 >> 14) | 0;
          break L448;
         } else {
          i2 = i2 + 8192 >> 14;
          break L448;
         }
        }
       default:
        {
         i2 = HEAP32[i2 >> 2] | 0;
         break L448;
        }
       }
      } while (0);
      i2 = (HEAP32[i73 >> 2] | 0) + i2 | 0;
      HEAP32[i73 >> 2] = i2;
      i4 = HEAP32[i72 >> 2] | 0;
      if (HEAP8[i55 >> 0] | 0) {
       HEAP8[i56 >> 0] = 1;
       _cf2_glyphpath_lineTo(i98, HEAP32[i47 >> 2] | 0, HEAP32[i48 >> 2] | 0);
       if (HEAP8[i57 >> 0] | 0) _cf2_glyphpath_pushPrevElem(i98, i49, i50, HEAP32[i45 >> 2] | 0, HEAP32[i46 >> 2] | 0, 1);
       HEAP8[i54 >> 0] = 1;
       HEAP8[i55 >> 0] = 0;
       HEAP8[i56 >> 0] = 0;
       HEAP8[i57 >> 0] = 0;
      }
      HEAP32[i47 >> 2] = i2;
      HEAP32[i18 >> 2] = i2;
      HEAP32[i48 >> 2] = i4;
      HEAP32[i19 >> 2] = i4;
      HEAP8[i54 >> 0] = 1;
      i2 = HEAP32[i43 >> 2] | 0;
      if (!(HEAP8[i61 >> 0] | 0)) i62 = 377; else if (HEAP8[i2 + 5 >> 0] | 0) i62 = 377;
      if ((i62 | 0) == 377) {
       i62 = 0;
       _cf2_hintmap_build(i49, HEAP32[i41 >> 2] | 0, HEAP32[i42 >> 2] | 0, i2, HEAP32[i44 >> 2] | 0, 0);
      }
      _memcpy(i20 | 0, i49 | 0, 3868) | 0;
      break;
     }
    case 25:
     {
      i2 = HEAP32[i71 >> 2] | 0;
      i12 = i2 - i58 >> 3;
      L473 : do if (i12 >>> 0 > 6) {
       i7 = 0;
       while (1) {
        i5 = i2 - i58 >> 3;
        L476 : do if (i5 >>> 0 > i7 >>> 0) {
         i2 = i79 + 8 + (i7 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i7 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i2 = HEAP32[i2 >> 2] << 16;
           break L476;
          }
         case 1:
          {
           i2 = HEAP32[i2 >> 2] | 0;
           if ((i2 | 0) < 0) {
            i2 = 0 - (8192 - i2 >> 14) | 0;
            break L476;
           } else {
            i2 = i2 + 8192 >> 14;
            break L476;
           }
          }
         default:
          {
           i2 = HEAP32[i2 >> 2] | 0;
           break L476;
          }
         }
        } else {
         i2 = HEAP32[i69 >> 2] | 0;
         if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
          HEAP32[i2 >> 2] = 130;
          i2 = 0;
         } else i2 = 0;
        } while (0);
        i6 = (HEAP32[i73 >> 2] | 0) + i2 | 0;
        HEAP32[i73 >> 2] = i6;
        i4 = i7 | 1;
        L489 : do if (i5 >>> 0 > i4 >>> 0) {
         i2 = i79 + 8 + (i4 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i4 = HEAP32[i2 >> 2] << 16;
           i2 = i6;
           break L489;
          }
         case 1:
          {
           i2 = HEAP32[i2 >> 2] | 0;
           if ((i2 | 0) < 0) {
            i4 = 0 - (8192 - i2 >> 14) | 0;
            i2 = i6;
            break L489;
           } else {
            i4 = i2 + 8192 >> 14;
            i2 = i6;
            break L489;
           }
          }
         default:
          {
           i4 = HEAP32[i2 >> 2] | 0;
           i2 = i6;
           break L489;
          }
         }
        } else {
         i2 = HEAP32[i69 >> 2] | 0;
         if (!i2) {
          i4 = 0;
          i2 = i6;
         } else if (!(HEAP32[i2 >> 2] | 0)) {
          HEAP32[i2 >> 2] = 130;
          i4 = 0;
          i2 = HEAP32[i73 >> 2] | 0;
         } else {
          i4 = 0;
          i2 = i6;
         }
        } while (0);
        i14 = (HEAP32[i72 >> 2] | 0) + i4 | 0;
        HEAP32[i72 >> 2] = i14;
        _cf2_glyphpath_lineTo(i98, i2, i14);
        i2 = i7 + 2 | 0;
        if ((i7 + 8 | 0) >>> 0 >= i12 >>> 0) break L473;
        i7 = i2;
        i2 = HEAP32[i71 >> 2] | 0;
       }
      } else i2 = 0; while (0);
      if (i2 >>> 0 < i12 >>> 0) do {
       i10 = (HEAP32[i71 >> 2] | 0) - i58 >> 3;
       L507 : do if (i10 >>> 0 > i2 >>> 0) {
        i4 = i79 + 8 + (i2 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i4 >> 2] << 16;
          break L507;
         }
        case 1:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L507;
          } else {
           i4 = i4 + 8192 >> 14;
           break L507;
          }
         }
        default:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          break L507;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i11 = (HEAP32[i73 >> 2] | 0) + i4 | 0;
       i5 = i2 | 1;
       L520 : do if (i10 >>> 0 > i5 >>> 0) {
        i4 = i79 + 8 + (i5 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i5 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i4 >> 2] << 16;
          break L520;
         }
        case 1:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L520;
          } else {
           i4 = i4 + 8192 >> 14;
           break L520;
          }
         }
        default:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          break L520;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i9 = (HEAP32[i72 >> 2] | 0) + i4 | 0;
       i4 = i2 + 2 | 0;
       L533 : do if (i10 >>> 0 > i4 >>> 0) {
        i5 = i79 + 8 + (i4 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i5 >> 2] << 16;
          break L533;
         }
        case 1:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L533;
          } else {
           i4 = i4 + 8192 >> 14;
           break L533;
          }
         }
        default:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          break L533;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i8 = i4 + i11 | 0;
       i4 = i2 + 3 | 0;
       L546 : do if (i10 >>> 0 > i4 >>> 0) {
        i5 = i79 + 8 + (i4 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i5 >> 2] << 16;
          break L546;
         }
        case 1:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L546;
          } else {
           i4 = i4 + 8192 >> 14;
           break L546;
          }
         }
        default:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          break L546;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i7 = i4 + i9 | 0;
       i4 = i2 + 4 | 0;
       L559 : do if (i10 >>> 0 > i4 >>> 0) {
        i5 = i79 + 8 + (i4 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i5 >> 2] << 16;
          break L559;
         }
        case 1:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L559;
          } else {
           i4 = i4 + 8192 >> 14;
           break L559;
          }
         }
        default:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          break L559;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else {
         if (HEAP32[i4 >> 2] | 0) {
          i4 = 0;
          break;
         }
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        }
       } while (0);
       i6 = i4 + i8 | 0;
       i5 = i2 + 5 | 0;
       L572 : do if (i10 >>> 0 > i5 >>> 0) {
        i4 = i79 + 8 + (i5 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i5 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i4 >> 2] << 16;
          break L572;
         }
        case 1:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L572;
          } else {
           i4 = i4 + 8192 >> 14;
           break L572;
          }
         }
        default:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          break L572;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) {
         i4 = 0;
         break;
        }
        if (HEAP32[i4 >> 2] | 0) {
         i4 = 0;
         break;
        }
        HEAP32[i4 >> 2] = 130;
        i4 = 0;
       } while (0);
       i14 = i4 + i7 | 0;
       _cf2_glyphpath_curveTo(i98, i11, i9, i8, i7, i6, i14);
       HEAP32[i73 >> 2] = i6;
       HEAP32[i72 >> 2] = i14;
       i2 = i2 + 6 | 0;
      } while (i2 >>> 0 < i12 >>> 0);
      HEAP32[i71 >> 2] = i70;
      i13 = i15;
      i14 = i16;
      i6 = i17;
      i15 = i13;
      i16 = i14;
      continue L11;
     }
    case 26:
     {
      i11 = (HEAP32[i71 >> 2] | 0) - i58 >> 3;
      i12 = i11 & -3;
      i2 = i11 - i12 | 0;
      if (i12 >>> 0 > i2 >>> 0) do {
       if (!(i11 - i2 & 1)) {
        i10 = HEAP32[i73 >> 2] | 0;
        i4 = HEAP32[i71 >> 2] | 0;
       } else {
        i5 = HEAP32[i71 >> 2] | 0;
        L593 : do if (i5 - i58 >> 3 >>> 0 > i2 >>> 0) {
         i4 = i79 + 8 + (i2 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i4 = HEAP32[i4 >> 2] << 16;
           break L593;
          }
         case 1:
          {
           i4 = HEAP32[i4 >> 2] | 0;
           if ((i4 | 0) < 0) {
            i4 = 0 - (8192 - i4 >> 14) | 0;
            break L593;
           } else {
            i4 = i4 + 8192 >> 14;
            break L593;
           }
          }
         default:
          {
           i4 = HEAP32[i4 >> 2] | 0;
           break L593;
          }
         }
        } else {
         i4 = HEAP32[i69 >> 2] | 0;
         if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
          HEAP32[i4 >> 2] = 130;
          i4 = 0;
         } else i4 = 0;
        } while (0);
        i10 = (HEAP32[i73 >> 2] | 0) + i4 | 0;
        i2 = i2 + 1 | 0;
        i4 = i5;
       }
       i8 = i4 - i58 >> 3;
       L607 : do if (i8 >>> 0 > i2 >>> 0) {
        i4 = i79 + 8 + (i2 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i4 >> 2] << 16;
          break L607;
         }
        case 1:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L607;
          } else {
           i4 = i4 + 8192 >> 14;
           break L607;
          }
         }
        default:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          break L607;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i9 = (HEAP32[i72 >> 2] | 0) + i4 | 0;
       i4 = i2 + 1 | 0;
       L620 : do if (i8 >>> 0 > i4 >>> 0) {
        i5 = i79 + 8 + (i4 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i5 >> 2] << 16;
          break L620;
         }
        case 1:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L620;
          } else {
           i4 = i4 + 8192 >> 14;
           break L620;
          }
         }
        default:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          break L620;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i7 = i4 + i10 | 0;
       i4 = i2 + 2 | 0;
       L633 : do if (i8 >>> 0 > i4 >>> 0) {
        i5 = i79 + 8 + (i4 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i5 >> 2] << 16;
          break L633;
         }
        case 1:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L633;
          } else {
           i4 = i4 + 8192 >> 14;
           break L633;
          }
         }
        default:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          break L633;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i6 = i4 + i9 | 0;
       i5 = i2 + 3 | 0;
       L646 : do if (i8 >>> 0 > i5 >>> 0) {
        i4 = i79 + 8 + (i5 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i5 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i4 >> 2] << 16;
          break L646;
         }
        case 1:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L646;
          } else {
           i4 = i4 + 8192 >> 14;
           break L646;
          }
         }
        default:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          break L646;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i14 = i4 + i6 | 0;
       _cf2_glyphpath_curveTo(i98, i10, i9, i7, i6, i7, i14);
       HEAP32[i73 >> 2] = i7;
       HEAP32[i72 >> 2] = i14;
       i2 = i2 + 4 | 0;
      } while (i12 >>> 0 > i2 >>> 0);
      HEAP32[i71 >> 2] = i70;
      i13 = i15;
      i14 = i16;
      i6 = i17;
      i15 = i13;
      i16 = i14;
      continue L11;
     }
    case 27:
     {
      i11 = (HEAP32[i71 >> 2] | 0) - i58 >> 3;
      i12 = i11 & -3;
      i2 = i11 - i12 | 0;
      if (i12 >>> 0 > i2 >>> 0) do {
       if (!(i11 - i2 & 1)) {
        i10 = HEAP32[i72 >> 2] | 0;
        i4 = HEAP32[i71 >> 2] | 0;
       } else {
        i5 = HEAP32[i71 >> 2] | 0;
        L667 : do if (i5 - i58 >> 3 >>> 0 > i2 >>> 0) {
         i4 = i79 + 8 + (i2 << 3) | 0;
         switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
         case 2:
          {
           i4 = HEAP32[i4 >> 2] << 16;
           break L667;
          }
         case 1:
          {
           i4 = HEAP32[i4 >> 2] | 0;
           if ((i4 | 0) < 0) {
            i4 = 0 - (8192 - i4 >> 14) | 0;
            break L667;
           } else {
            i4 = i4 + 8192 >> 14;
            break L667;
           }
          }
         default:
          {
           i4 = HEAP32[i4 >> 2] | 0;
           break L667;
          }
         }
        } else {
         i4 = HEAP32[i69 >> 2] | 0;
         if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
          HEAP32[i4 >> 2] = 130;
          i4 = 0;
         } else i4 = 0;
        } while (0);
        i10 = (HEAP32[i72 >> 2] | 0) + i4 | 0;
        i2 = i2 + 1 | 0;
        i4 = i5;
       }
       i8 = i4 - i58 >> 3;
       L681 : do if (i8 >>> 0 > i2 >>> 0) {
        i4 = i79 + 8 + (i2 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i4 >> 2] << 16;
          break L681;
         }
        case 1:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L681;
          } else {
           i4 = i4 + 8192 >> 14;
           break L681;
          }
         }
        default:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          break L681;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i9 = (HEAP32[i73 >> 2] | 0) + i4 | 0;
       i4 = i2 + 1 | 0;
       L694 : do if (i8 >>> 0 > i4 >>> 0) {
        i5 = i79 + 8 + (i4 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i5 >> 2] << 16;
          break L694;
         }
        case 1:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L694;
          } else {
           i4 = i4 + 8192 >> 14;
           break L694;
          }
         }
        default:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          break L694;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i7 = i4 + i9 | 0;
       i4 = i2 + 2 | 0;
       L707 : do if (i8 >>> 0 > i4 >>> 0) {
        i5 = i79 + 8 + (i4 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i5 >> 2] << 16;
          break L707;
         }
        case 1:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L707;
          } else {
           i4 = i4 + 8192 >> 14;
           break L707;
          }
         }
        default:
         {
          i4 = HEAP32[i5 >> 2] | 0;
          break L707;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i6 = i4 + i10 | 0;
       i5 = i2 + 3 | 0;
       L720 : do if (i8 >>> 0 > i5 >>> 0) {
        i4 = i79 + 8 + (i5 << 3) | 0;
        switch (HEAP32[i79 + 8 + (i5 << 3) + 4 >> 2] | 0) {
        case 2:
         {
          i4 = HEAP32[i4 >> 2] << 16;
          break L720;
         }
        case 1:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          if ((i4 | 0) < 0) {
           i4 = 0 - (8192 - i4 >> 14) | 0;
           break L720;
          } else {
           i4 = i4 + 8192 >> 14;
           break L720;
          }
         }
        default:
         {
          i4 = HEAP32[i4 >> 2] | 0;
          break L720;
         }
        }
       } else {
        i4 = HEAP32[i69 >> 2] | 0;
        if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
         HEAP32[i4 >> 2] = 130;
         i4 = 0;
        } else i4 = 0;
       } while (0);
       i14 = i4 + i7 | 0;
       _cf2_glyphpath_curveTo(i98, i9, i10, i7, i6, i14, i6);
       HEAP32[i73 >> 2] = i14;
       HEAP32[i72 >> 2] = i6;
       i2 = i2 + 4 | 0;
      } while (i12 >>> 0 > i2 >>> 0);
      HEAP32[i71 >> 2] = i70;
      i13 = i15;
      i14 = i16;
      i6 = i17;
      i15 = i13;
      i16 = i14;
      continue L11;
     }
    case 31:
    case 30:
     {
      i4 = (HEAP32[i71 >> 2] | 0) - i58 >> 3;
      i13 = i4 & -3;
      i4 = i4 - i13 | 0;
      if (i13 >>> 0 > i4 >>> 0) {
       i2 = (i14 | 0) == 31 & 1;
       do {
        if (!(i2 << 24 >> 24)) {
         i7 = HEAP32[i73 >> 2] | 0;
         i8 = (HEAP32[i71 >> 2] | 0) - i58 >> 3;
         L741 : do if (i8 >>> 0 > i4 >>> 0) {
          i2 = i79 + 8 + (i4 << 3) | 0;
          switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
          case 2:
           {
            i2 = HEAP32[i2 >> 2] << 16;
            break L741;
           }
          case 1:
           {
            i2 = HEAP32[i2 >> 2] | 0;
            if ((i2 | 0) < 0) {
             i2 = 0 - (8192 - i2 >> 14) | 0;
             break L741;
            } else {
             i2 = i2 + 8192 >> 14;
             break L741;
            }
           }
          default:
           {
            i2 = HEAP32[i2 >> 2] | 0;
            break L741;
           }
          }
         } else {
          i2 = HEAP32[i69 >> 2] | 0;
          if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
           HEAP32[i2 >> 2] = 130;
           i2 = 0;
          } else i2 = 0;
         } while (0);
         i10 = (HEAP32[i72 >> 2] | 0) + i2 | 0;
         i11 = i4 + 1 | 0;
         L754 : do if (i8 >>> 0 > i11 >>> 0) {
          i2 = i79 + 8 + (i11 << 3) | 0;
          switch (HEAP32[i79 + 8 + (i11 << 3) + 4 >> 2] | 0) {
          case 2:
           {
            i2 = HEAP32[i2 >> 2] << 16;
            break L754;
           }
          case 1:
           {
            i2 = HEAP32[i2 >> 2] | 0;
            if ((i2 | 0) < 0) {
             i2 = 0 - (8192 - i2 >> 14) | 0;
             break L754;
            } else {
             i2 = i2 + 8192 >> 14;
             break L754;
            }
           }
          default:
           {
            i2 = HEAP32[i2 >> 2] | 0;
            break L754;
           }
          }
         } else {
          i2 = HEAP32[i69 >> 2] | 0;
          if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
           HEAP32[i2 >> 2] = 130;
           i2 = 0;
          } else i2 = 0;
         } while (0);
         i9 = i2 + i7 | 0;
         i2 = i4 + 2 | 0;
         L767 : do if (i8 >>> 0 > i2 >>> 0) {
          i5 = i79 + 8 + (i2 << 3) | 0;
          switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
          case 2:
           {
            i2 = HEAP32[i5 >> 2] << 16;
            break L767;
           }
          case 1:
           {
            i2 = HEAP32[i5 >> 2] | 0;
            if ((i2 | 0) < 0) {
             i2 = 0 - (8192 - i2 >> 14) | 0;
             break L767;
            } else {
             i2 = i2 + 8192 >> 14;
             break L767;
            }
           }
          default:
           {
            i2 = HEAP32[i5 >> 2] | 0;
            break L767;
           }
          }
         } else {
          i2 = HEAP32[i69 >> 2] | 0;
          if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
           HEAP32[i2 >> 2] = 130;
           i2 = 0;
          } else i2 = 0;
         } while (0);
         i6 = i2 + i10 | 0;
         i2 = i4 + 3 | 0;
         L780 : do if (i8 >>> 0 > i2 >>> 0) {
          i5 = i79 + 8 + (i2 << 3) | 0;
          switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
          case 2:
           {
            i2 = HEAP32[i5 >> 2] << 16;
            break L780;
           }
          case 1:
           {
            i2 = HEAP32[i5 >> 2] | 0;
            if ((i2 | 0) < 0) {
             i2 = 0 - (8192 - i2 >> 14) | 0;
             break L780;
            } else {
             i2 = i2 + 8192 >> 14;
             break L780;
            }
           }
          default:
           {
            i2 = HEAP32[i5 >> 2] | 0;
            break L780;
           }
          }
         } else {
          i2 = HEAP32[i69 >> 2] | 0;
          if (!i2) i2 = 0; else {
           if (HEAP32[i2 >> 2] | 0) {
            i2 = 0;
            break;
           }
           HEAP32[i2 >> 2] = 130;
           i2 = 0;
          }
         } while (0);
         i5 = i2 + i9 | 0;
         if ((i13 - i4 | 0) == 5) {
          i4 = i4 + 4 | 0;
          L794 : do if (i8 >>> 0 > i4 >>> 0) {
           i2 = i79 + 8 + (i4 << 3) | 0;
           switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
           case 2:
            {
             i2 = HEAP32[i2 >> 2] << 16;
             break L794;
            }
           case 1:
            {
             i2 = HEAP32[i2 >> 2] | 0;
             if ((i2 | 0) < 0) {
              i2 = 0 - (8192 - i2 >> 14) | 0;
              break L794;
             } else {
              i2 = i2 + 8192 >> 14;
              break L794;
             }
            }
           default:
            {
             i2 = HEAP32[i2 >> 2] | 0;
             break L794;
            }
           }
          } else {
           i2 = HEAP32[i69 >> 2] | 0;
           if (!i2) {
            i2 = 0;
            break;
           }
           if (HEAP32[i2 >> 2] | 0) {
            i2 = 0;
            break;
           }
           HEAP32[i2 >> 2] = 130;
           i2 = 0;
          } while (0);
          i8 = i6;
          i6 = i2 + i6 | 0;
          i2 = 1;
          i4 = i11;
         } else {
          i8 = i6;
          i2 = 1;
         }
        } else {
         i9 = (HEAP32[i71 >> 2] | 0) - i58 >> 3;
         L808 : do if (i9 >>> 0 > i4 >>> 0) {
          i2 = i79 + 8 + (i4 << 3) | 0;
          switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
          case 2:
           {
            i2 = HEAP32[i2 >> 2] << 16;
            break L808;
           }
          case 1:
           {
            i2 = HEAP32[i2 >> 2] | 0;
            if ((i2 | 0) < 0) {
             i2 = 0 - (8192 - i2 >> 14) | 0;
             break L808;
            } else {
             i2 = i2 + 8192 >> 14;
             break L808;
            }
           }
          default:
           {
            i2 = HEAP32[i2 >> 2] | 0;
            break L808;
           }
          }
         } else {
          i2 = HEAP32[i69 >> 2] | 0;
          if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
           HEAP32[i2 >> 2] = 130;
           i2 = 0;
          } else i2 = 0;
         } while (0);
         i7 = (HEAP32[i73 >> 2] | 0) + i2 | 0;
         i10 = HEAP32[i72 >> 2] | 0;
         i12 = i4 + 1 | 0;
         L821 : do if (i9 >>> 0 > i12 >>> 0) {
          i2 = i79 + 8 + (i12 << 3) | 0;
          switch (HEAP32[i79 + 8 + (i12 << 3) + 4 >> 2] | 0) {
          case 2:
           {
            i2 = HEAP32[i2 >> 2] << 16;
            break L821;
           }
          case 1:
           {
            i2 = HEAP32[i2 >> 2] | 0;
            if ((i2 | 0) < 0) {
             i2 = 0 - (8192 - i2 >> 14) | 0;
             break L821;
            } else {
             i2 = i2 + 8192 >> 14;
             break L821;
            }
           }
          default:
           {
            i2 = HEAP32[i2 >> 2] | 0;
            break L821;
           }
          }
         } else {
          i2 = HEAP32[i69 >> 2] | 0;
          if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
           HEAP32[i2 >> 2] = 130;
           i2 = 0;
          } else i2 = 0;
         } while (0);
         i11 = i2 + i7 | 0;
         i2 = i4 + 2 | 0;
         L834 : do if (i9 >>> 0 > i2 >>> 0) {
          i5 = i79 + 8 + (i2 << 3) | 0;
          switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
          case 2:
           {
            i2 = HEAP32[i5 >> 2] << 16;
            break L834;
           }
          case 1:
           {
            i2 = HEAP32[i5 >> 2] | 0;
            if ((i2 | 0) < 0) {
             i2 = 0 - (8192 - i2 >> 14) | 0;
             break L834;
            } else {
             i2 = i2 + 8192 >> 14;
             break L834;
            }
           }
          default:
           {
            i2 = HEAP32[i5 >> 2] | 0;
            break L834;
           }
          }
         } else {
          i2 = HEAP32[i69 >> 2] | 0;
          if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
           HEAP32[i2 >> 2] = 130;
           i2 = 0;
          } else i2 = 0;
         } while (0);
         i8 = i2 + i10 | 0;
         i2 = i4 + 3 | 0;
         L847 : do if (i9 >>> 0 > i2 >>> 0) {
          i5 = i79 + 8 + (i2 << 3) | 0;
          switch (HEAP32[i79 + 8 + (i2 << 3) + 4 >> 2] | 0) {
          case 2:
           {
            i2 = HEAP32[i5 >> 2] << 16;
            break L847;
           }
          case 1:
           {
            i2 = HEAP32[i5 >> 2] | 0;
            if ((i2 | 0) < 0) {
             i2 = 0 - (8192 - i2 >> 14) | 0;
             break L847;
            } else {
             i2 = i2 + 8192 >> 14;
             break L847;
            }
           }
          default:
           {
            i2 = HEAP32[i5 >> 2] | 0;
            break L847;
           }
          }
         } else {
          i2 = HEAP32[i69 >> 2] | 0;
          if (!i2) i2 = 0; else {
           if (HEAP32[i2 >> 2] | 0) {
            i2 = 0;
            break;
           }
           HEAP32[i2 >> 2] = 130;
           i2 = 0;
          }
         } while (0);
         i6 = i2 + i8 | 0;
         if ((i13 - i4 | 0) == 5) {
          i4 = i4 + 4 | 0;
          L861 : do if (i9 >>> 0 > i4 >>> 0) {
           i2 = i79 + 8 + (i4 << 3) | 0;
           switch (HEAP32[i79 + 8 + (i4 << 3) + 4 >> 2] | 0) {
           case 2:
            {
             i2 = HEAP32[i2 >> 2] << 16;
             break L861;
            }
           case 1:
            {
             i2 = HEAP32[i2 >> 2] | 0;
             if ((i2 | 0) < 0) {
              i2 = 0 - (8192 - i2 >> 14) | 0;
              break L861;
             } else {
              i2 = i2 + 8192 >> 14;
              break L861;
             }
            }
           default:
            {
             i2 = HEAP32[i2 >> 2] | 0;
             break L861;
            }
           }
          } else {
           i2 = HEAP32[i69 >> 2] | 0;
           if (!i2) {
            i2 = 0;
            break;
           }
           if (HEAP32[i2 >> 2] | 0) {
            i2 = 0;
            break;
           }
           HEAP32[i2 >> 2] = 130;
           i2 = 0;
          } while (0);
          i9 = i11;
          i5 = i2 + i11 | 0;
          i2 = 0;
          i4 = i12;
         } else {
          i9 = i11;
          i5 = i11;
          i2 = 0;
         }
        }
        _cf2_glyphpath_curveTo(i98, i7, i10, i9, i8, i5, i6);
        HEAP32[i73 >> 2] = i5;
        HEAP32[i72 >> 2] = i6;
        i4 = i4 + 4 | 0;
       } while (i13 >>> 0 > i4 >>> 0);
      }
      HEAP32[i71 >> 2] = i70;
      i13 = i15;
      i14 = i16;
      i6 = i17;
      i15 = i13;
      i16 = i14;
      continue L11;
     }
    case 28:
     {
      if (i4 >>> 0 < i8 >>> 0) {
       i14 = i4 + 1 | 0;
       HEAP32[i9 >> 2] = i14;
       i2 = HEAPU8[i4 >> 0] | 0;
       i4 = i14;
      } else {
       i2 = HEAP32[i16 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 85;
        i2 = 0;
       } else i2 = 0;
      }
      i5 = i2 << 8;
      if (i4 >>> 0 < i8 >>> 0) {
       HEAP32[i9 >> 2] = i4 + 1;
       i2 = HEAPU8[i4 >> 0] | 0;
      } else {
       i2 = HEAP32[i16 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 85;
        i2 = 0;
       } else i2 = 0;
      }
      i4 = HEAP32[i71 >> 2] | 0;
      if ((i4 | 0) != (i71 | 0)) {
       HEAP32[i4 >> 2] = (i2 | i5) << 16 >> 16;
       HEAP32[i4 + 4 >> 2] = 2;
       HEAP32[i71 >> 2] = i4 + 8;
       i13 = i15;
       i14 = i16;
       i6 = i17;
       i15 = i13;
       i16 = i14;
       continue L11;
      }
      i2 = HEAP32[i69 >> 2] | 0;
      if (!i2) {
       i13 = i15;
       i14 = i16;
       i6 = i17;
       i15 = i13;
       i16 = i14;
       continue L11;
      }
      if (HEAP32[i2 >> 2] | 0) {
       i13 = i15;
       i14 = i16;
       i6 = i17;
       i15 = i13;
       i16 = i14;
       continue L11;
      }
      HEAP32[i2 >> 2] = 130;
      i13 = i15;
      i14 = i16;
      i6 = i17;
      i15 = i13;
      i16 = i14;
      continue L11;
     }
    default:
     {
      if (i14 >>> 0 < 247) {
       i2 = HEAP32[i71 >> 2] | 0;
       if ((i2 | 0) != (i71 | 0)) {
        HEAP32[i2 >> 2] = i14 + -139;
        HEAP32[i2 + 4 >> 2] = 2;
        HEAP32[i71 >> 2] = i2 + 8;
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
       i2 = HEAP32[i69 >> 2] | 0;
       if (!i2) {
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
       if (HEAP32[i2 >> 2] | 0) {
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
       HEAP32[i2 >> 2] = 130;
       i13 = i15;
       i14 = i16;
       i6 = i17;
       i15 = i13;
       i16 = i14;
       continue L11;
      }
      if (i14 >>> 0 < 251) {
       i5 = (i14 << 8) + -63232 | 0;
       if (i4 >>> 0 < i8 >>> 0) {
        HEAP32[i9 >> 2] = i4 + 1;
        i2 = HEAPU8[i4 >> 0] | 0;
       } else {
        i2 = HEAP32[i16 >> 2] | 0;
        if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
         HEAP32[i2 >> 2] = 85;
         i2 = 0;
        } else i2 = 0;
       }
       i4 = HEAP32[i71 >> 2] | 0;
       if ((i4 | 0) != (i71 | 0)) {
        HEAP32[i4 >> 2] = (i2 | i5) + 108;
        HEAP32[i4 + 4 >> 2] = 2;
        HEAP32[i71 >> 2] = i4 + 8;
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
       i2 = HEAP32[i69 >> 2] | 0;
       if (!i2) {
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
       if (HEAP32[i2 >> 2] | 0) {
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
       HEAP32[i2 >> 2] = 130;
       i13 = i15;
       i14 = i16;
       i6 = i17;
       i15 = i13;
       i16 = i14;
       continue L11;
      }
      if ((i14 | 0) != 255) {
       i5 = (i14 << 8) + -64256 | 0;
       if (i4 >>> 0 < i8 >>> 0) {
        HEAP32[i9 >> 2] = i4 + 1;
        i2 = HEAPU8[i4 >> 0] | 0;
       } else {
        i2 = HEAP32[i16 >> 2] | 0;
        if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
         HEAP32[i2 >> 2] = 85;
         i2 = 0;
        } else i2 = 0;
       }
       i4 = HEAP32[i71 >> 2] | 0;
       if ((i4 | 0) != (i71 | 0)) {
        HEAP32[i4 >> 2] = -108 - (i2 | i5);
        HEAP32[i4 + 4 >> 2] = 2;
        HEAP32[i71 >> 2] = i4 + 8;
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
       i2 = HEAP32[i69 >> 2] | 0;
       if (!i2) {
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
       if (HEAP32[i2 >> 2] | 0) {
        i13 = i15;
        i14 = i16;
        i6 = i17;
        i15 = i13;
        i16 = i14;
        continue L11;
       }
       HEAP32[i2 >> 2] = 130;
       i13 = i15;
       i14 = i16;
       i6 = i17;
       i15 = i13;
       i16 = i14;
       continue L11;
      }
      if (i4 >>> 0 < i8 >>> 0) {
       i14 = i4 + 1 | 0;
       HEAP32[i9 >> 2] = i14;
       i2 = HEAPU8[i4 >> 0] | 0;
       i4 = i14;
      } else {
       i2 = HEAP32[i16 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 85;
        i2 = 0;
       } else i2 = 0;
      }
      i5 = i2 << 24;
      if (i4 >>> 0 < i8 >>> 0) {
       i14 = i4 + 1 | 0;
       HEAP32[i9 >> 2] = i14;
       i2 = HEAPU8[i4 >> 0] | 0;
       i4 = i14;
      } else {
       i2 = HEAP32[i16 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 85;
        i2 = 0;
       } else i2 = 0;
      }
      i5 = i2 << 16 | i5;
      if (i4 >>> 0 < i8 >>> 0) {
       i14 = i4 + 1 | 0;
       HEAP32[i9 >> 2] = i14;
       i2 = HEAPU8[i4 >> 0] | 0;
       i4 = i14;
      } else {
       i2 = HEAP32[i16 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 85;
        i2 = 0;
       } else i2 = 0;
      }
      i5 = i5 | i2 << 8;
      if (i4 >>> 0 < i8 >>> 0) {
       HEAP32[i9 >> 2] = i4 + 1;
       i2 = HEAPU8[i4 >> 0] | 0;
      } else {
       i2 = HEAP32[i16 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 85;
        i2 = 0;
       } else i2 = 0;
      }
      i4 = HEAP32[i71 >> 2] | 0;
      if ((i4 | 0) != (i71 | 0)) {
       HEAP32[i4 >> 2] = i5 | i2;
       HEAP32[i4 + 4 >> 2] = 0;
       HEAP32[i71 >> 2] = i4 + 8;
       i13 = i15;
       i14 = i16;
       i6 = i17;
       i15 = i13;
       i16 = i14;
       continue L11;
      }
      i2 = HEAP32[i69 >> 2] | 0;
      if (!i2) {
       i13 = i15;
       i14 = i16;
       i6 = i17;
       i15 = i13;
       i16 = i14;
       continue L11;
      }
      if (HEAP32[i2 >> 2] | 0) {
       i13 = i15;
       i14 = i16;
       i6 = i17;
       i15 = i13;
       i16 = i14;
       continue L11;
      }
      HEAP32[i2 >> 2] = 130;
      i13 = i15;
      i14 = i16;
      i6 = i17;
      i15 = i13;
      i16 = i14;
      continue L11;
     }
    } while (0);
    HEAP32[i71 >> 2] = i70;
    i13 = i15;
    i14 = i16;
    i6 = i17;
    i15 = i13;
    i16 = i14;
   }
   i2 = HEAP32[i71 >> 2] | 0;
   i4 = i2 - i58 >> 3;
   if ((i4 | 0) == 1) {
    if (!(HEAP8[i66 >> 0] | 0)) i62 = 212;
   } else if (!((i4 | 0) != 5 | (HEAP8[i66 >> 0] | 0) != 0)) i62 = 212;
   if ((i62 | 0) == 212) {
    L901 : do if ((i2 | 0) == (i58 | 0)) {
     i4 = HEAP32[i69 >> 2] | 0;
     if (!i4) i4 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
      HEAP32[i4 >> 2] = 130;
      i4 = 0;
     } else i4 = 0;
    } else switch (HEAP32[i40 >> 2] | 0) {
    case 2:
     {
      i4 = HEAP32[i70 >> 2] << 16;
      break L901;
     }
    case 1:
     {
      i4 = HEAP32[i70 >> 2] | 0;
      if ((i4 | 0) < 0) {
       i4 = 0 - (8192 - i4 >> 14) | 0;
       break L901;
      } else {
       i4 = i4 + 8192 >> 14;
       break L901;
      }
     }
    default:
     {
      i4 = HEAP32[i70 >> 2] | 0;
      break L901;
     }
    } while (0);
    HEAP32[i67 >> 2] = i4 + i65;
   }
   HEAP8[i66 >> 0] = 1;
   if (!(HEAP8[(HEAP32[i64 >> 2] | 0) + 561 >> 0] | 0)) {
    if (HEAP8[i55 >> 0] | 0) {
     HEAP8[i56 >> 0] = 1;
     _cf2_glyphpath_lineTo(i98, HEAP32[i47 >> 2] | 0, HEAP32[i48 >> 2] | 0);
     if (HEAP8[i57 >> 0] | 0) _cf2_glyphpath_pushPrevElem(i98, i49, i50, HEAP32[i45 >> 2] | 0, HEAP32[i46 >> 2] | 0, 1);
     HEAP8[i54 >> 0] = 1;
     HEAP8[i55 >> 0] = 0;
     HEAP8[i56 >> 0] = 0;
     HEAP8[i57 >> 0] = 0;
     i2 = HEAP32[i71 >> 2] | 0;
    }
    i4 = i2;
    if (i2 - i58 >> 3 >>> 0 > 1) {
     do if (!(i68 << 24 >> 24)) {
      do if ((i4 | 0) == (i70 | 0)) {
       i2 = HEAP32[i69 >> 2] | 0;
       if (!i2) {
        i6 = 0;
        i2 = i4;
       } else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 161;
        i6 = 0;
        i2 = i4;
       } else {
        i6 = 0;
        i2 = i4;
       }
      } else {
       i2 = i4 + -8 | 0;
       if ((HEAP32[i4 + -4 >> 2] | 0) == 2) {
        HEAP32[i71 >> 2] = i2;
        i6 = HEAP32[i2 >> 2] | 0;
        break;
       }
       i2 = HEAP32[i69 >> 2] | 0;
       if (!i2) {
        i6 = 0;
        i2 = i4;
       } else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 160;
        i6 = 0;
        i2 = i4;
       } else {
        i6 = 0;
        i2 = i4;
       }
      } while (0);
      do if ((i2 | 0) == (i70 | 0)) {
       i4 = HEAP32[i69 >> 2] | 0;
       if (!i4) i7 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
        HEAP32[i4 >> 2] = 161;
        i7 = 0;
       } else i7 = 0;
      } else {
       i4 = i2 + -8 | 0;
       if ((HEAP32[i2 + -4 >> 2] | 0) == 2) {
        HEAP32[i71 >> 2] = i4;
        i7 = HEAP32[i4 >> 2] | 0;
        i2 = i4;
        break;
       }
       i4 = HEAP32[i69 >> 2] | 0;
       if (!i4) i7 = 0; else if (!(HEAP32[i4 >> 2] | 0)) {
        HEAP32[i4 >> 2] = 160;
        i7 = 0;
       } else i7 = 0;
      } while (0);
      L947 : do if ((i2 | 0) == (i70 | 0)) {
       i4 = HEAP32[i69 >> 2] | 0;
       if (!i4) {
        i5 = 0;
        i4 = i2;
       } else if (!(HEAP32[i4 >> 2] | 0)) {
        HEAP32[i4 >> 2] = 161;
        i5 = 0;
        i4 = i2;
       } else {
        i5 = 0;
        i4 = i2;
       }
      } else {
       i4 = i2 + -8 | 0;
       HEAP32[i71 >> 2] = i4;
       switch (HEAP32[i2 + -4 >> 2] | 0) {
       case 2:
        {
         i5 = HEAP32[i4 >> 2] << 16;
         break L947;
        }
       case 1:
        {
         i2 = HEAP32[i4 >> 2] | 0;
         if ((i2 | 0) < 0) {
          i5 = 0 - (8192 - i2 >> 14) | 0;
          break L947;
         } else {
          i5 = i2 + 8192 >> 14;
          break L947;
         }
        }
       default:
        {
         i5 = HEAP32[i4 >> 2] | 0;
         break L947;
        }
       }
      } while (0);
      HEAP32[i72 >> 2] = i5;
      L960 : do if ((i4 | 0) == (i70 | 0)) {
       i2 = HEAP32[i69 >> 2] | 0;
       if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
        HEAP32[i2 >> 2] = 161;
        i2 = 0;
       } else i2 = 0;
      } else {
       i2 = i4 + -8 | 0;
       HEAP32[i71 >> 2] = i2;
       switch (HEAP32[i4 + -4 >> 2] | 0) {
       case 2:
        {
         i2 = HEAP32[i2 >> 2] << 16;
         break L960;
        }
       case 1:
        {
         i2 = HEAP32[i2 >> 2] | 0;
         if ((i2 | 0) < 0) {
          i2 = 0 - (8192 - i2 >> 14) | 0;
          break L960;
         } else {
          i2 = i2 + 8192 >> 14;
          break L960;
         }
        }
       default:
        {
         i2 = HEAP32[i2 >> 2] | 0;
         break L960;
        }
       }
      } while (0);
      HEAP32[i73 >> 2] = i2;
      i2 = _cf2_getSeacComponent(i74, i6, i80) | 0;
      if (!i2) {
       _cf2_interpT2CharString(i75, i80, i77, i78, 1, HEAP32[i73 >> 2] | 0, HEAP32[i72 >> 2] | 0, i76);
       i5 = i74 + 4 | 0;
       i2 = HEAP32[i5 >> 2] | 0;
       i6 = i80 + 4 | 0;
       i4 = HEAP32[(HEAP32[i2 + 128 >> 2] | 0) + 48 >> 2] | 0;
       if (!i4) {
        i2 = HEAP32[i2 + 656 >> 2] | 0;
        if (!(HEAP32[i2 + 1204 >> 2] | 0)) _FT_Stream_ReleaseFrame(HEAP32[i2 + 1176 >> 2] | 0, i6);
       } else {
        i72 = HEAP32[i6 >> 2] | 0;
        i73 = (HEAP32[i80 + 8 >> 2] | 0) - i72 | 0;
        HEAP32[i81 >> 2] = i72;
        HEAP32[i81 + 4 >> 2] = i73;
        FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 63](HEAP32[i4 + 4 >> 2] | 0, i81);
       }
       i2 = _cf2_getSeacComponent(i74, i7, i80) | 0;
       if (!i2) {
        _cf2_interpT2CharString(i75, i80, i77, i78, 1, 0, 0, i76);
        i2 = HEAP32[i5 >> 2] | 0;
        i4 = HEAP32[(HEAP32[i2 + 128 >> 2] | 0) + 48 >> 2] | 0;
        if (i4 | 0) {
         i78 = HEAP32[i6 >> 2] | 0;
         i2 = (HEAP32[i80 + 8 >> 2] | 0) - i78 | 0;
         HEAP32[i81 >> 2] = i78;
         HEAP32[i81 + 4 >> 2] = i2;
         FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 63](HEAP32[i4 + 4 >> 2] | 0, i81);
         i2 = 0;
         break;
        }
        i2 = HEAP32[i2 + 656 >> 2] | 0;
        if (!(HEAP32[i2 + 1204 >> 2] | 0)) {
         _FT_Stream_ReleaseFrame(HEAP32[i2 + 1176 >> 2] | 0, i6);
         i2 = 0;
        } else i2 = 0;
       }
      }
     } else i2 = 18; while (0);
     i62 = 755;
    } else {
     i2 = 0;
     i62 = 755;
    }
   } else {
    i2 = 0;
    i62 = 755;
   }
  }
 } while (0);
 if ((i62 | 0) == 755) if (!(HEAP32[i82 >> 2] | 0)) HEAP32[i82 >> 2] = i2;
 i98 = HEAP32[i98 + 11612 >> 2] | 0;
 HEAP32[i83 >> 2] = 0;
 HEAP32[i84 >> 2] = 0;
 HEAP32[i85 >> 2] = 0;
 _ft_mem_free(i98, HEAP32[i86 >> 2] | 0);
 HEAP32[i86 >> 2] = 0;
 i98 = HEAP32[i97 >> 2] | 0;
 HEAP32[i92 >> 2] = 0;
 HEAP32[i93 >> 2] = 0;
 HEAP32[i94 >> 2] = 0;
 _ft_mem_free(i98, HEAP32[i95 >> 2] | 0);
 HEAP32[i95 >> 2] = 0;
 i98 = HEAP32[i96 >> 2] | 0;
 HEAP32[i88 >> 2] = 0;
 HEAP32[i89 >> 2] = 0;
 HEAP32[i90 >> 2] = 0;
 _ft_mem_free(i98, HEAP32[i91 >> 2] | 0);
 HEAP32[i91 >> 2] = 0;
 _ft_mem_free(i87, i3);
 if (i1) {
  STACKTOP = i99;
  return;
 }
 _ft_mem_free(HEAP32[i79 >> 2] | 0, i79);
 STACKTOP = i99;
 return;
}

function _doProlog(i97, i3, i4, i98, i5, i1, i99, i2) {
 i97 = i97 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i98 = i98 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i99 = i99 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i100 = 0;
 i100 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i87 = i100 + 12 | 0;
 i88 = i100 + 4 | 0;
 i83 = i100;
 i84 = i100 + 8 | 0;
 HEAP32[i84 >> 2] = i1;
 i40 = i97 + 356 | 0;
 i41 = HEAP32[i40 >> 2] | 0;
 i42 = i97 + 144 | 0;
 if ((HEAP32[i42 >> 2] | 0) == (i3 | 0)) {
  i39 = i97 + 288 | 0;
  i37 = i97 + 292 | 0;
  i35 = i39;
  i36 = i37;
  i38 = i97 + 300 | 0;
 } else {
  i38 = i97 + 300 | 0;
  i36 = HEAP32[i38 >> 2] | 0;
  i35 = i36;
  i36 = i36 + 4 | 0;
  i37 = i97 + 292 | 0;
  i39 = i97 + 288 | 0;
 }
 i43 = i2 << 24 >> 24 != 0;
 i44 = i97 + 256 | 0;
 i45 = i97 + 80 | 0;
 i46 = i97 + 44 | 0;
 i47 = i97 + 48 | 0;
 i96 = i97 + 4 | 0;
 i48 = i97 + 480 | 0;
 i49 = i97 + 84 | 0;
 i50 = i97 + 324 | 0;
 i51 = i97 + 416 | 0;
 i52 = i97 + 428 | 0;
 i53 = i97 + 424 | 0;
 i54 = i97 + 432 | 0;
 i55 = i97 + 320 | 0;
 i56 = i97 + 328 | 0;
 i57 = i97 + 420 | 0;
 i58 = i97 + 416 | 0;
 i59 = i97 + 489 | 0;
 i85 = i41 + 132 | 0;
 i60 = i97 + 316 | 0;
 i89 = i41 + 129 | 0;
 i61 = i41 + 128 | 0;
 i62 = i41 + 80 | 0;
 i63 = i41 + 92 | 0;
 i64 = i41 + 88 | 0;
 i65 = i41 + 96 | 0;
 i66 = i97 + 136 | 0;
 i67 = i97 + 88 | 0;
 i86 = i97 + 492 | 0;
 i90 = i97 + 112 | 0;
 i91 = i41 + 131 | 0;
 i92 = i97 + 116 | 0;
 i93 = i41 + 130 | 0;
 i94 = i97 + 108 | 0;
 i95 = i97 + 360 | 0;
 i68 = i97 + 344 | 0;
 i69 = i97 + 132 | 0;
 i70 = i97 + 348 | 0;
 i71 = i97 + 352 | 0;
 i72 = i97 + 332 | 0;
 i73 = i97 + 353 | 0;
 i74 = i97 + 12 | 0;
 i75 = i97 + 16 | 0;
 i76 = i41 + 120 | 0;
 i77 = i41 + 116 | 0;
 i78 = i97 + 92 | 0;
 i79 = i97 + 476 | 0;
 i80 = i97 + 340 | 0;
 i81 = i97 + 336 | 0;
 i82 = i97 + 96 | 0;
 i19 = i2 << 24 >> 24 == 0;
 i20 = i97 + 260 | 0;
 i21 = i97 + 468 | 0;
 i22 = i97 + 464 | 0;
 i23 = i41 + 160 | 0;
 i24 = i41 + 184 | 0;
 i25 = i41 + 180 | 0;
 i26 = i41 + 164 | 0;
 i27 = i97 + 128 | 0;
 i28 = i41 + 140 | 0;
 i29 = i97 + 272 | 0;
 i30 = i97 + 120 | 0;
 i18 = i97 + 496 | 0;
 i31 = i41 + 132 | 0;
 i32 = i41 + 136 | 0;
 i33 = i41 + 176 | 0;
 i34 = i41 + 168 | 0;
 i17 = i3;
 i16 = i4;
 i2 = i5;
 L5 : while (1) {
  HEAP32[i35 >> 2] = i16;
  i3 = HEAP32[i84 >> 2] | 0;
  HEAP32[i36 >> 2] = i3;
  i1 = i3;
  L7 : do if ((i2 | 0) < 1) {
   if (i43 & (i2 | 0) != 0) {
    i15 = 7;
    break L5;
   }
   switch (i2 | 0) {
   case -1:
    {
     i1 = 5;
     i15 = 588;
     break L5;
    }
   case 0:
    {
     i15 = 9;
     break L5;
    }
   case -4:
    {
     i15 = 10;
     break L5;
    }
   case -2:
    {
     i1 = 6;
     i15 = 589;
     break L5;
    }
   case -15:
    {
     i2 = 15;
     break L7;
    }
   default:
    {}
   }
   HEAP32[i84 >> 2] = i98;
   i2 = 0 - i2 | 0;
   i1 = i98;
  } while (0);
  i14 = FUNCTION_TABLE_iiiiii[HEAP32[i44 >> 2] & 127](i44, i2, i16, i1, i17) | 0;
  L12 : do switch (i14 | 0) {
  case 2:
   {
    i15 = 115;
    break L5;
   }
  case -1:
   {
    i15 = 412;
    break L5;
   }
  case 1:
   {
    i1 = _processXmlDecl(i97, 0, i16, HEAP32[i84 >> 2] | 0) | 0;
    if (i1 | 0) {
     i15 = 588;
     break L5;
    }
    i1 = HEAP32[i42 >> 2] | 0;
    break;
   }
  case 4:
   {
    if (!(HEAP32[i49 >> 2] | 0)) i1 = 1; else {
     i1 = HEAP32[i84 >> 2] | 0;
     HEAP32[i87 >> 2] = i16;
     if (!(HEAP32[i52 >> 2] | 0)) if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
      i15 = 26;
      break L5;
     }
     i2 = i17 + 60 | 0;
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i2 >> 2] & 31](i17, i87, i1, i52, HEAP32[i53 >> 2] | 0);
      if ((HEAP32[i87 >> 2] | 0) == (i1 | 0)) break;
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i15 = 26;
       break L5;
      }
     }
     if (!(HEAP32[i54 >> 2] | 0)) {
      i15 = 31;
      break L5;
     }
     i1 = HEAP32[i52 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i53 >> 2] | 0)) {
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i15 = 31;
       break L5;
      }
      i1 = HEAP32[i52 >> 2] | 0;
     }
     HEAP32[i52 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i15 = HEAP32[i54 >> 2] | 0;
     HEAP32[i55 >> 2] = i15;
     if (!i15) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     HEAP32[i54 >> 2] = HEAP32[i52 >> 2];
     HEAP32[i56 >> 2] = 0;
     i1 = 0;
    }
    HEAP32[i50 >> 2] = 0;
    i15 = 576;
    break;
   }
  case 7:
   {
    i1 = HEAP32[i49 >> 2] | 0;
    if (!i1) i15 = 577; else {
     FUNCTION_TABLE_viiiii[i1 & 31](HEAP32[i96 >> 2] | 0, HEAP32[i55 >> 2] | 0, HEAP32[i50 >> 2] | 0, HEAP32[i56 >> 2] | 0, 1);
     HEAP32[i55 >> 2] = 0;
     i2 = HEAP32[i57 >> 2] | 0;
     i1 = HEAP32[i58 >> 2] | 0;
     if (!i2) i15 = 39; else if (i1 | 0) while (1) {
      i3 = HEAP32[i1 >> 2] | 0;
      HEAP32[i1 >> 2] = i2;
      if (!i3) {
       i15 = 39;
       break;
      } else {
       i2 = i1;
       i1 = i3;
      }
     }
     if ((i15 | 0) == 39) {
      i15 = 0;
      HEAP32[i57 >> 2] = i1;
     }
     HEAP32[i58 >> 2] = 0;
     HEAP32[i54 >> 2] = 0;
     HEAP32[i52 >> 2] = 0;
     HEAP32[i53 >> 2] = 0;
     i1 = i17;
    }
    break;
   }
  case 57:
   {
    i1 = _processXmlDecl(i97, 1, i16, HEAP32[i84 >> 2] | 0) | 0;
    if (i1 | 0) {
     i15 = 588;
     break L5;
    }
    i1 = HEAP32[i42 >> 2] | 0;
    break;
   }
  case 6:
   {
    HEAP8[i59 >> 0] = 0;
    i15 = _lookup(i97, i85, 345437, 36) | 0;
    HEAP32[i60 >> 2] = i15;
    if (!i15) {
     i1 = 1;
     i15 = 588;
     break L5;
    }
    HEAP8[i89 >> 0] = 1;
    if (!(HEAP32[i49 >> 2] | 0)) i15 = 67; else {
     if (!(FUNCTION_TABLE_iiiii[HEAP32[i17 + 56 >> 2] & 127](i17, i16, HEAP32[i84 >> 2] | 0, i35) | 0)) {
      i1 = 32;
      i15 = 588;
      break L5;
     }
     i15 = HEAP32[i17 + 68 >> 2] | 0;
     i1 = (HEAP32[i84 >> 2] | 0) + (0 - i15) | 0;
     HEAP32[i87 >> 2] = i16 + i15;
     if (!(HEAP32[i52 >> 2] | 0)) if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
      i15 = 51;
      break L5;
     }
     i2 = i17 + 60 | 0;
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i2 >> 2] & 31](i17, i87, i1, i52, HEAP32[i53 >> 2] | 0);
      if ((HEAP32[i87 >> 2] | 0) == (i1 | 0)) break;
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i15 = 51;
       break L5;
      }
     }
     if (!(HEAP32[i54 >> 2] | 0)) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     i1 = HEAP32[i52 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i53 >> 2] | 0)) {
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i1 = 1;
       i15 = 588;
       break L5;
      }
      i1 = HEAP32[i52 >> 2] | 0;
     }
     HEAP32[i52 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i4 = HEAP32[i54 >> 2] | 0;
     if (!i4) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     i2 = HEAP8[i4 >> 0] | 0;
     if (!(i2 << 24 >> 24)) i1 = i4; else {
      i1 = i4;
      i3 = i4;
      do {
       switch (i2 << 24 >> 24 | 0) {
       case 10:
       case 13:
       case 32:
        {
         if ((i1 | 0) == (i4 | 0)) i1 = i4; else if ((HEAP8[i1 + -1 >> 0] | 0) != 32) {
          HEAP8[i1 >> 0] = 32;
          i1 = i1 + 1 | 0;
         }
         break;
        }
       default:
        {
         HEAP8[i1 >> 0] = i2;
         i1 = i1 + 1 | 0;
        }
       }
       i3 = i3 + 1 | 0;
       i2 = HEAP8[i3 >> 0] | 0;
      } while (i2 << 24 >> 24 != 0);
      if ((i1 | 0) == (i4 | 0)) i1 = i4; else {
       i15 = i1 + -1 | 0;
       i1 = (HEAP8[i15 >> 0] | 0) == 32 ? i15 : i1;
      }
     }
     HEAP8[i1 >> 0] = 0;
     HEAP32[i54 >> 2] = HEAP32[i52 >> 2];
     HEAP32[i56 >> 2] = i4;
     i1 = 0;
     i15 = 68;
    }
    break;
   }
  case 14:
   {
    i15 = 67;
    break;
   }
  case 8:
   {
    i1 = HEAP32[i55 >> 2] | 0;
    if (!i1) i1 = 1; else {
     FUNCTION_TABLE_viiiii[HEAP32[i49 >> 2] & 31](HEAP32[i96 >> 2] | 0, i1, HEAP32[i50 >> 2] | 0, HEAP32[i56 >> 2] | 0, 0);
     i2 = HEAP32[i57 >> 2] | 0;
     i1 = HEAP32[i58 >> 2] | 0;
     if (!i2) i15 = 95; else if (i1 | 0) while (1) {
      i3 = HEAP32[i1 >> 2] | 0;
      HEAP32[i1 >> 2] = i2;
      if (!i3) {
       i15 = 95;
       break;
      } else {
       i2 = i1;
       i1 = i3;
      }
     }
     if ((i15 | 0) == 95) {
      i15 = 0;
      HEAP32[i57 >> 2] = i1;
     }
     HEAP32[i58 >> 2] = 0;
     HEAP32[i54 >> 2] = 0;
     HEAP32[i52 >> 2] = 0;
     HEAP32[i53 >> 2] = 0;
     i1 = 0;
    }
    if (!(HEAP32[i50 >> 2] | 0)) {
     if (HEAP8[i59 >> 0] | 0) i15 = 99;
    } else i15 = 99;
    if ((i15 | 0) == 99) {
     i15 = 0;
     i2 = HEAP8[i89 >> 0] | 0;
     HEAP8[i89 >> 0] = 1;
     do if (HEAP32[i86 >> 2] | 0) if (HEAP32[i90 >> 2] | 0) {
      i3 = _lookup(i97, i85, 345437, 36) | 0;
      if (!i3) {
       i1 = 1;
       i15 = 588;
       break L5;
      }
      if (!(HEAP8[i59 >> 0] | 0)) i4 = HEAP32[i3 + 20 >> 2] | 0; else {
       i4 = HEAP32[i95 >> 2] | 0;
       HEAP32[i3 + 20 >> 2] = i4;
      }
      HEAP8[i91 >> 0] = 0;
      if (!(FUNCTION_TABLE_iiiiii[HEAP32[i90 >> 2] & 127](HEAP32[i92 >> 2] | 0, 0, i4, HEAP32[i3 + 16 >> 2] | 0, HEAP32[i3 + 24 >> 2] | 0) | 0)) {
       i1 = 21;
       i15 = 588;
       break L5;
      }
      if (!(HEAP8[i91 >> 0] | 0)) {
       if (HEAP32[i50 >> 2] | 0) break;
       HEAP8[i89 >> 0] = i2;
       break;
      }
      if (!(HEAP8[i93 >> 0] | 0)) {
       i2 = HEAP32[i94 >> 2] | 0;
       if (i2 | 0) if (!(FUNCTION_TABLE_ii[i2 & 63](HEAP32[i96 >> 2] | 0) | 0)) {
        i1 = 22;
        i15 = 588;
        break L5;
       }
      }
     } while (0);
     HEAP8[i59 >> 0] = 0;
    }
    i2 = HEAP32[i67 >> 2] | 0;
    if (!i2) i15 = 576; else {
     FUNCTION_TABLE_vi[i2 & 127](HEAP32[i96 >> 2] | 0);
     i1 = i17;
    }
    break;
   }
  case 34:
   {
    i1 = HEAP32[i84 >> 2] | 0;
    i6 = HEAP32[i40 >> 2] | 0;
    i3 = i6 + 80 | 0;
    HEAP32[i87 >> 2] = i16;
    i7 = i6 + 92 | 0;
    if (!(HEAP32[i7 >> 2] | 0)) if (!((_poolGrow(i3) | 0) << 24 >> 24)) {
     i15 = 131;
     break L5;
    }
    i2 = i17 + 60 | 0;
    i4 = i6 + 88 | 0;
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i2 >> 2] & 31](i17, i87, i1, i7, HEAP32[i4 >> 2] | 0);
     if ((HEAP32[i87 >> 2] | 0) == (i1 | 0)) break;
     if (!((_poolGrow(i3) | 0) << 24 >> 24)) {
      i15 = 131;
      break L5;
     }
    }
    i5 = i6 + 96 | 0;
    if (!(HEAP32[i5 >> 2] | 0)) {
     i15 = 141;
     break L5;
    }
    i1 = HEAP32[i7 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i4 >> 2] | 0)) {
     if (!((_poolGrow(i3) | 0) << 24 >> 24)) {
      i15 = 141;
      break L5;
     }
     i1 = HEAP32[i7 >> 2] | 0;
    }
    HEAP32[i7 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = 0;
    i2 = HEAP32[i5 >> 2] | 0;
    if (!i2) {
     i15 = 141;
     break L5;
    }
    i1 = _lookup(i97, i6 + 20 | 0, i2, 24) | 0;
    if (!i1) {
     i15 = 141;
     break L5;
    }
    if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) {
     HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
     if (!(_setElementTypePrefix(i97, i1) | 0)) {
      i15 = 141;
      break L5;
     }
    } else HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i68 >> 2] = i1;
    i15 = 153;
    break;
   }
  case 22:
   {
    i15 = _getAttributeId(i97, i17, i16, HEAP32[i84 >> 2] | 0) | 0;
    HEAP32[i70 >> 2] = i15;
    if (!i15) {
     i1 = 1;
     i15 = 588;
     break L5;
    }
    HEAP8[i71 >> 0] = 0;
    HEAP32[i72 >> 2] = 0;
    HEAP8[i73 >> 0] = 0;
    i15 = 153;
    break;
   }
  case 23:
   {
    HEAP8[i71 >> 0] = 1;
    HEAP32[i72 >> 2] = 345439;
    i15 = 153;
    break;
   }
  case 24:
   {
    HEAP8[i73 >> 0] = 1;
    HEAP32[i72 >> 2] = 345445;
    i15 = 153;
    break;
   }
  case 25:
   {
    HEAP32[i72 >> 2] = 345448;
    i15 = 153;
    break;
   }
  case 26:
   {
    HEAP32[i72 >> 2] = 345454;
    i15 = 153;
    break;
   }
  case 27:
   {
    HEAP32[i72 >> 2] = 345461;
    i15 = 153;
    break;
   }
  case 28:
   {
    HEAP32[i72 >> 2] = 345468;
    i15 = 153;
    break;
   }
  case 29:
   {
    HEAP32[i72 >> 2] = 345477;
    i15 = 153;
    break;
   }
  case 30:
   {
    HEAP32[i72 >> 2] = 345485;
    i15 = 153;
    break;
   }
  case 32:
  case 31:
   {
    if (!(HEAP8[i61 >> 0] | 0)) i15 = 577; else if (!(HEAP32[i69 >> 2] | 0)) i15 = 577; else {
     i1 = (HEAP32[i72 >> 2] | 0) == 0 ? ((i14 | 0) == 32 ? 345494 : 345504) : 345506;
     i2 = HEAP8[i1 >> 0] | 0;
     if (i2 << 24 >> 24) do {
      i3 = HEAP32[i52 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i53 >> 2] | 0)) {
       if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
        i1 = 1;
        i15 = 589;
        break L5;
       }
       i3 = HEAP32[i52 >> 2] | 0;
       i2 = HEAP8[i1 >> 0] | 0;
      }
      HEAP32[i52 >> 2] = i3 + 1;
      HEAP8[i3 >> 0] = i2;
      i1 = i1 + 1 | 0;
      i2 = HEAP8[i1 >> 0] | 0;
     } while (i2 << 24 >> 24 != 0);
     if (!(HEAP32[i54 >> 2] | 0)) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     i2 = HEAP32[i84 >> 2] | 0;
     HEAP32[i87 >> 2] = i16;
     if (!(HEAP32[i52 >> 2] | 0)) if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
      i15 = 168;
      break L5;
     }
     i1 = i17 + 60 | 0;
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i1 >> 2] & 31](i17, i87, i2, i52, HEAP32[i53 >> 2] | 0);
      if ((HEAP32[i87 >> 2] | 0) == (i2 | 0)) break;
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i15 = 168;
       break L5;
      }
     }
     i1 = HEAP32[i54 >> 2] | 0;
     if (!i1) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     HEAP32[i72 >> 2] = i1;
     i1 = i17;
    }
    break;
   }
  case 36:
  case 35:
   {
    if (!(HEAP8[i61 >> 0] | 0)) i15 = 577; else {
     i4 = HEAP32[i68 >> 2] | 0;
     i7 = HEAP32[i70 >> 2] | 0;
     i8 = HEAP8[i71 >> 0] | 0;
     i6 = i4 + 12 | 0;
     i5 = HEAP32[i6 >> 2] | 0;
     L156 : do if (!(HEAP8[i73 >> 0] | 0)) i15 = 180; else {
      if ((i5 | 0) > 0) {
       i2 = HEAP32[i4 + 20 >> 2] | 0;
       i1 = 0;
       do {
        if ((HEAP32[i2 + (i1 * 12 | 0) >> 2] | 0) == (i7 | 0)) break L156;
        i1 = i1 + 1 | 0;
       } while ((i1 | 0) < (i5 | 0));
      }
      i1 = i4 + 8 | 0;
      if (!(HEAP32[i1 >> 2] | 0)) if (!(HEAP8[i7 + 9 >> 0] | 0)) {
       HEAP32[i1 >> 2] = i7;
       i15 = 180;
      } else i15 = 180; else i15 = 180;
     } while (0);
     if ((i15 | 0) == 180) {
      i15 = 0;
      i3 = i4 + 16 | 0;
      do if ((i5 | 0) == (HEAP32[i3 >> 2] | 0)) {
       if (!i5) {
        HEAP32[i3 >> 2] = 8;
        i1 = FUNCTION_TABLE_ii[HEAP32[i74 >> 2] & 63](96) | 0;
        HEAP32[i4 + 20 >> 2] = i1;
        if (!i1) {
         i1 = 1;
         i15 = 588;
         break L5;
        } else break;
       }
       i2 = i4 + 20 | 0;
       i1 = FUNCTION_TABLE_iii[HEAP32[i75 >> 2] & 255](HEAP32[i2 >> 2] | 0, i5 * 24 | 0) | 0;
       if (!i1) {
        i1 = 1;
        i15 = 588;
        break L5;
       }
       HEAP32[i3 >> 2] = i5 << 1;
       HEAP32[i2 >> 2] = i1;
      } else i1 = HEAP32[i4 + 20 >> 2] | 0; while (0);
      i2 = HEAP32[i6 >> 2] | 0;
      HEAP32[i1 + (i2 * 12 | 0) >> 2] = i7;
      HEAP32[i1 + (i2 * 12 | 0) + 8 >> 2] = 0;
      HEAP8[i1 + (i2 * 12 | 0) + 4 >> 0] = i8;
      if (!(i8 << 24 >> 24)) HEAP8[i7 + 8 >> 0] = 1;
      HEAP32[i6 >> 2] = i2 + 1;
     }
     if (!(HEAP32[i69 >> 2] | 0)) i15 = 577; else {
      i1 = HEAP32[i72 >> 2] | 0;
      if (!i1) i15 = 577; else {
       switch (HEAP8[i1 >> 0] | 0) {
       case 40:
        {
         i15 = 193;
         break;
        }
       case 78:
        {
         if ((HEAP8[i1 + 1 >> 0] | 0) == 79) i15 = 193;
         break;
        }
       default:
        {}
       }
       if ((i15 | 0) == 193) {
        i15 = 0;
        i1 = HEAP32[i52 >> 2] | 0;
        if ((i1 | 0) == (HEAP32[i53 >> 2] | 0)) {
         if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
          i1 = 1;
          i15 = 588;
          break L5;
         }
         i1 = HEAP32[i52 >> 2] | 0;
        }
        HEAP32[i52 >> 2] = i1 + 1;
        HEAP8[i1 >> 0] = 41;
        i1 = HEAP32[i52 >> 2] | 0;
        if ((i1 | 0) == (HEAP32[i53 >> 2] | 0)) {
         if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
          i1 = 1;
          i15 = 588;
          break L5;
         }
         i1 = HEAP32[i52 >> 2] | 0;
        }
        HEAP32[i52 >> 2] = i1 + 1;
        HEAP8[i1 >> 0] = 0;
        HEAP32[i72 >> 2] = HEAP32[i54 >> 2];
        HEAP32[i54 >> 2] = HEAP32[i52 >> 2];
       }
       HEAP32[i36 >> 2] = i16;
       FUNCTION_TABLE_viiiiii[HEAP32[i69 >> 2] & 7](HEAP32[i96 >> 2] | 0, HEAP32[HEAP32[i68 >> 2] >> 2] | 0, HEAP32[HEAP32[i70 >> 2] >> 2] | 0, HEAP32[i72 >> 2] | 0, 0, (i14 | 0) == 36 & 1);
       i2 = HEAP32[i57 >> 2] | 0;
       i1 = HEAP32[i58 >> 2] | 0;
       if (!i2) i15 = 203; else if (i1 | 0) while (1) {
        i3 = HEAP32[i1 >> 2] | 0;
        HEAP32[i1 >> 2] = i2;
        if (!i3) {
         i15 = 203;
         break;
        } else {
         i2 = i1;
         i1 = i3;
        }
       }
       if ((i15 | 0) == 203) {
        i15 = 0;
        HEAP32[i57 >> 2] = i1;
       }
       HEAP32[i58 >> 2] = 0;
       HEAP32[i54 >> 2] = 0;
       HEAP32[i52 >> 2] = 0;
       HEAP32[i53 >> 2] = 0;
       i1 = i17;
      }
     }
    }
    break;
   }
  case 38:
  case 37:
   {
    if (!(HEAP8[i61 >> 0] | 0)) i15 = 577; else {
     i2 = HEAP8[i71 >> 0] | 0;
     i1 = HEAP32[i17 + 68 >> 2] | 0;
     i1 = _appendAttributeValue(i97, i17, i2, i16 + i1 | 0, (HEAP32[i84 >> 2] | 0) + (0 - i1) | 0, i62) | 0;
     if (i1 | 0) {
      i15 = 588;
      break L5;
     }
     i1 = HEAP32[i63 >> 2] | 0;
     if (!(i2 << 24 >> 24)) if ((i1 | 0) != (HEAP32[i65 >> 2] | 0)) {
      i2 = i1 + -1 | 0;
      if ((HEAP8[i2 >> 0] | 0) == 32) {
       HEAP32[i63 >> 2] = i2;
       i1 = i2;
      }
     }
     if ((i1 | 0) == (HEAP32[i64 >> 2] | 0)) {
      if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
       i1 = 1;
       i15 = 588;
       break L5;
      }
      i1 = HEAP32[i63 >> 2] | 0;
     }
     HEAP32[i63 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i9 = HEAP32[i65 >> 2] | 0;
     HEAP32[i65 >> 2] = HEAP32[i63 >> 2];
     i4 = HEAP32[i68 >> 2] | 0;
     i7 = HEAP32[i70 >> 2] | 0;
     i8 = HEAP8[i71 >> 0] | 0;
     i6 = i4 + 12 | 0;
     i5 = HEAP32[i6 >> 2] | 0;
     L214 : do if ((i9 | 0) != 0 & (i5 | 0) > 0) {
      i2 = HEAP32[i4 + 20 >> 2] | 0;
      i1 = 0;
      while (1) {
       if ((HEAP32[i2 + (i1 * 12 | 0) >> 2] | 0) == (i7 | 0)) break L214;
       i1 = i1 + 1 | 0;
       if ((i1 | 0) >= (i5 | 0)) {
        i15 = 218;
        break;
       }
      }
     } else i15 = 218; while (0);
     if ((i15 | 0) == 218) {
      i15 = 0;
      i3 = i4 + 16 | 0;
      do if ((i5 | 0) == (HEAP32[i3 >> 2] | 0)) {
       if (!i5) {
        HEAP32[i3 >> 2] = 8;
        i1 = FUNCTION_TABLE_ii[HEAP32[i74 >> 2] & 63](96) | 0;
        HEAP32[i4 + 20 >> 2] = i1;
        if (!i1) {
         i1 = 1;
         i15 = 588;
         break L5;
        } else break;
       }
       i2 = i4 + 20 | 0;
       i1 = FUNCTION_TABLE_iii[HEAP32[i75 >> 2] & 255](HEAP32[i2 >> 2] | 0, i5 * 24 | 0) | 0;
       if (!i1) {
        i1 = 1;
        i15 = 588;
        break L5;
       }
       HEAP32[i3 >> 2] = i5 << 1;
       HEAP32[i2 >> 2] = i1;
      } else i1 = HEAP32[i4 + 20 >> 2] | 0; while (0);
      i2 = HEAP32[i6 >> 2] | 0;
      HEAP32[i1 + (i2 * 12 | 0) >> 2] = i7;
      HEAP32[i1 + (i2 * 12 | 0) + 8 >> 2] = i9;
      HEAP8[i1 + (i2 * 12 | 0) + 4 >> 0] = i8;
      if (!(i8 << 24 >> 24)) HEAP8[i7 + 8 >> 0] = 1;
      HEAP32[i6 >> 2] = i2 + 1;
     }
     if (!(HEAP32[i69 >> 2] | 0)) i15 = 577; else {
      i1 = HEAP32[i72 >> 2] | 0;
      if (!i1) i15 = 577; else {
       switch (HEAP8[i1 >> 0] | 0) {
       case 40:
        {
         i15 = 231;
         break;
        }
       case 78:
        {
         if ((HEAP8[i1 + 1 >> 0] | 0) == 79) i15 = 231;
         break;
        }
       default:
        {}
       }
       if ((i15 | 0) == 231) {
        i15 = 0;
        i1 = HEAP32[i52 >> 2] | 0;
        if ((i1 | 0) == (HEAP32[i53 >> 2] | 0)) {
         if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
          i1 = 1;
          i15 = 588;
          break L5;
         }
         i1 = HEAP32[i52 >> 2] | 0;
        }
        HEAP32[i52 >> 2] = i1 + 1;
        HEAP8[i1 >> 0] = 41;
        i1 = HEAP32[i52 >> 2] | 0;
        if ((i1 | 0) == (HEAP32[i53 >> 2] | 0)) {
         if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
          i1 = 1;
          i15 = 588;
          break L5;
         }
         i1 = HEAP32[i52 >> 2] | 0;
        }
        HEAP32[i52 >> 2] = i1 + 1;
        HEAP8[i1 >> 0] = 0;
        HEAP32[i72 >> 2] = HEAP32[i54 >> 2];
        HEAP32[i54 >> 2] = HEAP32[i52 >> 2];
       }
       HEAP32[i36 >> 2] = i16;
       FUNCTION_TABLE_viiiiii[HEAP32[i69 >> 2] & 7](HEAP32[i96 >> 2] | 0, HEAP32[HEAP32[i68 >> 2] >> 2] | 0, HEAP32[HEAP32[i70 >> 2] >> 2] | 0, HEAP32[i72 >> 2] | 0, i9, (i14 | 0) == 38 & 1);
       i2 = HEAP32[i57 >> 2] | 0;
       i1 = HEAP32[i58 >> 2] | 0;
       if (!i2) i15 = 241; else if (i1 | 0) while (1) {
        i3 = HEAP32[i1 >> 2] | 0;
        HEAP32[i1 >> 2] = i2;
        if (!i3) {
         i15 = 241;
         break;
        } else {
         i2 = i1;
         i1 = i3;
        }
       }
       if ((i15 | 0) == 241) {
        i15 = 0;
        HEAP32[i57 >> 2] = i1;
       }
       HEAP32[i58 >> 2] = 0;
       HEAP32[i54 >> 2] = 0;
       HEAP32[i52 >> 2] = 0;
       HEAP32[i53 >> 2] = 0;
       i1 = i17;
      }
     }
    }
    break;
   }
  case 12:
   {
    if (!(HEAP8[i61 >> 0] | 0)) i15 = 577; else {
     i1 = HEAP32[i17 + 68 >> 2] | 0;
     i1 = _storeEntityValue(i97, i17, i16 + i1 | 0, (HEAP32[i84 >> 2] | 0) + (0 - i1) | 0) | 0;
     i2 = HEAP32[i60 >> 2] | 0;
     i3 = HEAP32[i76 >> 2] | 0;
     if (!i2) {
      HEAP32[i77 >> 2] = i3;
      i2 = 1;
     } else {
      HEAP32[i2 + 4 >> 2] = i3;
      i15 = HEAP32[i77 >> 2] | 0;
      HEAP32[i2 + 8 >> 2] = i15 - i3;
      HEAP32[i76 >> 2] = i15;
      if (!(HEAP32[i66 >> 2] | 0)) i2 = 1; else {
       HEAP32[i36 >> 2] = i16;
       i2 = HEAP32[i60 >> 2] | 0;
       FUNCTION_TABLE_viiiiiiiii[HEAP32[i66 >> 2] & 0](HEAP32[i96 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAPU8[i2 + 33 >> 0] | 0, HEAP32[i2 + 4 >> 2] | 0, HEAP32[i2 + 8 >> 2] | 0, HEAP32[i95 >> 2] | 0, 0, 0, 0);
       i2 = 0;
      }
     }
     if (!i1) {
      i1 = i2;
      i15 = 576;
     } else {
      i15 = 588;
      break L5;
     }
    }
    break;
   }
  case 5:
   {
    HEAP8[i59 >> 0] = 0;
    HEAP8[i89 >> 0] = 1;
    if (!(HEAP32[i49 >> 2] | 0)) {
     HEAP32[i50 >> 2] = 345437;
     i1 = 1;
    } else {
     i15 = HEAP32[i17 + 68 >> 2] | 0;
     i1 = (HEAP32[i84 >> 2] | 0) + (0 - i15) | 0;
     HEAP32[i87 >> 2] = i16 + i15;
     if (!(HEAP32[i52 >> 2] | 0)) if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
      i15 = 255;
      break L5;
     }
     i2 = i17 + 60 | 0;
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i2 >> 2] & 31](i17, i87, i1, i52, HEAP32[i53 >> 2] | 0);
      if ((HEAP32[i87 >> 2] | 0) == (i1 | 0)) break;
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i15 = 255;
       break L5;
      }
     }
     if (!(HEAP32[i54 >> 2] | 0)) {
      i15 = 260;
      break L5;
     }
     i1 = HEAP32[i52 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i53 >> 2] | 0)) {
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i15 = 260;
       break L5;
      }
      i1 = HEAP32[i52 >> 2] | 0;
     }
     HEAP32[i52 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i15 = HEAP32[i54 >> 2] | 0;
     HEAP32[i50 >> 2] = i15;
     if (!i15) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     HEAP32[i54 >> 2] = HEAP32[i52 >> 2];
     i1 = 0;
    }
    if (!(HEAP8[i93 >> 0] | 0)) if (!(HEAP32[i86 >> 2] | 0)) {
     i2 = HEAP32[i94 >> 2] | 0;
     if (i2 | 0) if (!(FUNCTION_TABLE_ii[i2 & 63](HEAP32[i96 >> 2] | 0) | 0)) {
      i1 = 22;
      i15 = 588;
      break L5;
     }
    }
    if (!(HEAP32[i60 >> 2] | 0)) {
     i2 = _lookup(i97, i85, 345437, 36) | 0;
     HEAP32[i60 >> 2] = i2;
     if (!i2) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     HEAP32[i2 + 24 >> 2] = 0;
     i15 = 271;
    } else i15 = 271;
    break;
   }
  case 13:
   {
    i1 = 1;
    i15 = 271;
    break;
   }
  case 15:
   {
    if (!(HEAP8[i61 >> 0] | 0)) i15 = 577; else if (!(HEAP32[i60 >> 2] | 0)) i15 = 577; else if (!(HEAP32[i66 >> 2] | 0)) i15 = 577; else {
     HEAP32[i36 >> 2] = i16;
     i1 = HEAP32[i60 >> 2] | 0;
     FUNCTION_TABLE_viiiiiiiii[HEAP32[i66 >> 2] & 0](HEAP32[i96 >> 2] | 0, HEAP32[i1 >> 2] | 0, HEAPU8[i1 + 33 >> 0] | 0, 0, 0, HEAP32[i1 + 20 >> 2] | 0, HEAP32[i1 + 16 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0, 0);
     i1 = i17;
    }
    break;
   }
  case 16:
   {
    if (!(HEAP8[i61 >> 0] | 0)) i15 = 577; else if (!(HEAP32[i60 >> 2] | 0)) i15 = 577; else {
     i1 = HEAP32[i84 >> 2] | 0;
     HEAP32[i87 >> 2] = i16;
     if (!(HEAP32[i63 >> 2] | 0)) if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
      i15 = 297;
      break L5;
     }
     i2 = i17 + 60 | 0;
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i2 >> 2] & 31](i17, i87, i1, i63, HEAP32[i64 >> 2] | 0);
      if ((HEAP32[i87 >> 2] | 0) == (i1 | 0)) break;
      if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
       i15 = 297;
       break L5;
      }
     }
     if (!(HEAP32[i65 >> 2] | 0)) {
      i15 = 302;
      break L5;
     }
     i1 = HEAP32[i63 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i64 >> 2] | 0)) {
      if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
       i15 = 302;
       break L5;
      }
      i1 = HEAP32[i63 >> 2] | 0;
     }
     HEAP32[i63 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i14 = HEAP32[i65 >> 2] | 0;
     HEAP32[(HEAP32[i60 >> 2] | 0) + 28 >> 2] = i14;
     if (!i14) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     HEAP32[i65 >> 2] = HEAP32[i63 >> 2];
     if (HEAP32[i78 >> 2] | 0) {
      HEAP32[i36 >> 2] = i16;
      i1 = HEAP32[i60 >> 2] | 0;
      FUNCTION_TABLE_viiiiii[HEAP32[i78 >> 2] & 7](HEAP32[i96 >> 2] | 0, HEAP32[i1 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0, HEAP32[i1 + 16 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0);
      i1 = i17;
      break L12;
     }
     if (!(HEAP32[i66 >> 2] | 0)) i15 = 577; else {
      HEAP32[i36 >> 2] = i16;
      i1 = HEAP32[i60 >> 2] | 0;
      FUNCTION_TABLE_viiiiiiiii[HEAP32[i66 >> 2] & 0](HEAP32[i96 >> 2] | 0, HEAP32[i1 >> 2] | 0, 0, 0, 0, HEAP32[i1 + 20 >> 2] | 0, HEAP32[i1 + 16 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0);
      i1 = i17;
     }
    }
    break;
   }
  case 9:
   {
    if (FUNCTION_TABLE_iiii[HEAP32[i17 + 48 >> 2] & 127](i17, i16, HEAP32[i84 >> 2] | 0) | 0) {
     HEAP32[i60 >> 2] = 0;
     i15 = 577;
     break L12;
    }
    if (!(HEAP8[i61 >> 0] | 0)) {
     HEAP32[i63 >> 2] = HEAP32[i65 >> 2];
     HEAP32[i60 >> 2] = 0;
     i15 = 577;
     break L12;
    }
    i1 = HEAP32[i84 >> 2] | 0;
    HEAP32[i87 >> 2] = i16;
    if (!(HEAP32[i63 >> 2] | 0)) if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
     i15 = 316;
     break L5;
    }
    i2 = i17 + 60 | 0;
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i2 >> 2] & 31](i17, i87, i1, i63, HEAP32[i64 >> 2] | 0);
     if ((HEAP32[i87 >> 2] | 0) == (i1 | 0)) break;
     if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
      i15 = 316;
      break L5;
     }
    }
    if (!(HEAP32[i65 >> 2] | 0)) {
     i1 = 1;
     i15 = 588;
     break L5;
    }
    i1 = HEAP32[i63 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i64 >> 2] | 0)) {
     if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     i1 = HEAP32[i63 >> 2] | 0;
    }
    HEAP32[i63 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = 0;
    i1 = HEAP32[i65 >> 2] | 0;
    if (!i1) {
     i1 = 1;
     i15 = 588;
     break L5;
    }
    i2 = _lookup(i97, i41, i1, 36) | 0;
    HEAP32[i60 >> 2] = i2;
    if (!i2) {
     i1 = 1;
     i15 = 588;
     break L5;
    }
    if ((HEAP32[i2 >> 2] | 0) != (i1 | 0)) {
     HEAP32[i63 >> 2] = HEAP32[i65 >> 2];
     HEAP32[i60 >> 2] = 0;
     i15 = 577;
     break L12;
    }
    HEAP32[i65 >> 2] = HEAP32[i63 >> 2];
    HEAP32[i2 + 24 >> 2] = 0;
    HEAP8[i2 + 33 >> 0] = 0;
    if (!(HEAP32[i79 >> 2] | 0)) i1 = (HEAP32[i38 >> 2] | 0) != 0; else i1 = 1;
    HEAP8[i2 + 34 >> 0] = (i1 ^ 1) & 1;
    if (!(HEAP32[i66 >> 2] | 0)) i15 = 577; else i1 = i17;
    break;
   }
  case 10:
   {
    if (!(HEAP8[i61 >> 0] | 0)) {
     HEAP32[i63 >> 2] = HEAP32[i65 >> 2];
     HEAP32[i60 >> 2] = 0;
     i15 = 577;
     break L12;
    }
    i1 = HEAP32[i84 >> 2] | 0;
    HEAP32[i87 >> 2] = i16;
    if (!(HEAP32[i63 >> 2] | 0)) if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
     i15 = 335;
     break L5;
    }
    i2 = i17 + 60 | 0;
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i2 >> 2] & 31](i17, i87, i1, i63, HEAP32[i64 >> 2] | 0);
     if ((HEAP32[i87 >> 2] | 0) == (i1 | 0)) break;
     if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
      i15 = 335;
      break L5;
     }
    }
    if (!(HEAP32[i65 >> 2] | 0)) {
     i1 = 1;
     i15 = 588;
     break L5;
    }
    i1 = HEAP32[i63 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i64 >> 2] | 0)) {
     if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     i1 = HEAP32[i63 >> 2] | 0;
    }
    HEAP32[i63 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = 0;
    i1 = HEAP32[i65 >> 2] | 0;
    if (!i1) {
     i1 = 1;
     i15 = 588;
     break L5;
    }
    i2 = _lookup(i97, i85, i1, 36) | 0;
    HEAP32[i60 >> 2] = i2;
    if (!i2) {
     i1 = 1;
     i15 = 588;
     break L5;
    }
    if ((HEAP32[i2 >> 2] | 0) != (i1 | 0)) {
     HEAP32[i63 >> 2] = HEAP32[i65 >> 2];
     HEAP32[i60 >> 2] = 0;
     i15 = 577;
     break L12;
    }
    HEAP32[i65 >> 2] = HEAP32[i63 >> 2];
    HEAP32[i2 + 24 >> 2] = 0;
    HEAP8[i2 + 33 >> 0] = 1;
    if (!(HEAP32[i79 >> 2] | 0)) i1 = (HEAP32[i38 >> 2] | 0) != 0; else i1 = 1;
    HEAP8[i2 + 34 >> 0] = (i1 ^ 1) & 1;
    if (!(HEAP32[i66 >> 2] | 0)) i15 = 577; else i1 = i17;
    break;
   }
  case 18:
   {
    HEAP32[i80 >> 2] = 0;
    HEAP32[i81 >> 2] = 0;
    if (!(HEAP32[i82 >> 2] | 0)) i15 = 577; else {
     i2 = HEAP32[i84 >> 2] | 0;
     HEAP32[i87 >> 2] = i16;
     if (!(HEAP32[i52 >> 2] | 0)) if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
      i15 = 354;
      break L5;
     }
     i1 = i17 + 60 | 0;
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i1 >> 2] & 31](i17, i87, i2, i52, HEAP32[i53 >> 2] | 0);
      if ((HEAP32[i87 >> 2] | 0) == (i2 | 0)) break;
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i15 = 354;
       break L5;
      }
     }
     if (!(HEAP32[i54 >> 2] | 0)) {
      i15 = 359;
      break L5;
     }
     i1 = HEAP32[i52 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i53 >> 2] | 0)) {
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i15 = 359;
       break L5;
      }
      i1 = HEAP32[i52 >> 2] | 0;
     }
     HEAP32[i52 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i16 = HEAP32[i54 >> 2] | 0;
     HEAP32[i81 >> 2] = i16;
     if (!i16) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     HEAP32[i54 >> 2] = HEAP32[i52 >> 2];
     i1 = i17;
    }
    break;
   }
  case 21:
   {
    if (!(FUNCTION_TABLE_iiiii[HEAP32[i17 + 56 >> 2] & 127](i17, i16, HEAP32[i84 >> 2] | 0, i35) | 0)) {
     i1 = 32;
     i15 = 588;
     break L5;
    }
    if (!(HEAP32[i81 >> 2] | 0)) i15 = 577; else {
     i14 = HEAP32[i17 + 68 >> 2] | 0;
     i2 = (HEAP32[i84 >> 2] | 0) + (0 - i14) | 0;
     HEAP32[i87 >> 2] = i16 + i14;
     if (!(HEAP32[i52 >> 2] | 0)) if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
      i15 = 369;
      break L5;
     }
     i1 = i17 + 60 | 0;
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i1 >> 2] & 31](i17, i87, i2, i52, HEAP32[i53 >> 2] | 0);
      if ((HEAP32[i87 >> 2] | 0) == (i2 | 0)) break;
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i15 = 369;
       break L5;
      }
     }
     if (!(HEAP32[i54 >> 2] | 0)) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     i1 = HEAP32[i52 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i53 >> 2] | 0)) {
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i1 = 1;
       i15 = 588;
       break L5;
      }
      i1 = HEAP32[i52 >> 2] | 0;
     }
     HEAP32[i52 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i4 = HEAP32[i54 >> 2] | 0;
     if (!i4) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     i2 = HEAP8[i4 >> 0] | 0;
     if (!(i2 << 24 >> 24)) i1 = i4; else {
      i1 = i4;
      i3 = i4;
      do {
       switch (i2 << 24 >> 24 | 0) {
       case 10:
       case 13:
       case 32:
        {
         if ((i1 | 0) == (i4 | 0)) i1 = i4; else if ((HEAP8[i1 + -1 >> 0] | 0) != 32) {
          HEAP8[i1 >> 0] = 32;
          i1 = i1 + 1 | 0;
         }
         break;
        }
       default:
        {
         HEAP8[i1 >> 0] = i2;
         i1 = i1 + 1 | 0;
        }
       }
       i3 = i3 + 1 | 0;
       i2 = HEAP8[i3 >> 0] | 0;
      } while (i2 << 24 >> 24 != 0);
      if ((i1 | 0) == (i4 | 0)) i1 = i4; else {
       i16 = i1 + -1 | 0;
       i1 = (HEAP8[i16 >> 0] | 0) == 32 ? i16 : i1;
      }
     }
     HEAP8[i1 >> 0] = 0;
     HEAP32[i80 >> 2] = i4;
     HEAP32[i54 >> 2] = HEAP32[i52 >> 2];
     i1 = i17;
    }
    break;
   }
  case 19:
   {
    if (!(HEAP32[i81 >> 2] | 0)) i1 = 1; else if (!(HEAP32[i82 >> 2] | 0)) i1 = 1; else {
     i14 = HEAP32[i17 + 68 >> 2] | 0;
     i2 = (HEAP32[i84 >> 2] | 0) + (0 - i14) | 0;
     HEAP32[i87 >> 2] = i16 + i14;
     if (!(HEAP32[i52 >> 2] | 0)) if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
      i15 = 392;
      break L5;
     }
     i1 = i17 + 60 | 0;
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i1 >> 2] & 31](i17, i87, i2, i52, HEAP32[i53 >> 2] | 0);
      if ((HEAP32[i87 >> 2] | 0) == (i2 | 0)) break;
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i15 = 392;
       break L5;
      }
     }
     if (!(HEAP32[i54 >> 2] | 0)) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     i1 = HEAP32[i52 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i53 >> 2] | 0)) {
      if (!((_poolGrow(i51) | 0) << 24 >> 24)) {
       i1 = 1;
       i15 = 588;
       break L5;
      }
      i1 = HEAP32[i52 >> 2] | 0;
     }
     HEAP32[i52 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i1 = HEAP32[i54 >> 2] | 0;
     if (!i1) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     HEAP32[i36 >> 2] = i16;
     FUNCTION_TABLE_viiiii[HEAP32[i82 >> 2] & 31](HEAP32[i96 >> 2] | 0, HEAP32[i81 >> 2] | 0, HEAP32[i95 >> 2] | 0, i1, HEAP32[i80 >> 2] | 0);
     i1 = 0;
    }
    i3 = HEAP32[i57 >> 2] | 0;
    i2 = HEAP32[i58 >> 2] | 0;
    if (!i3) i15 = 402; else if (i2 | 0) while (1) {
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = i3;
     if (!i4) {
      i15 = 402;
      break;
     } else {
      i3 = i2;
      i2 = i4;
     }
    }
    if ((i15 | 0) == 402) HEAP32[i57 >> 2] = i2;
    HEAP32[i58 >> 2] = 0;
    HEAP32[i54 >> 2] = 0;
    HEAP32[i52 >> 2] = 0;
    HEAP32[i53 >> 2] = 0;
    i15 = 576;
    break;
   }
  case 20:
   {
    if (!(HEAP32[i80 >> 2] | 0)) i1 = 1; else if (!(HEAP32[i82 >> 2] | 0)) i1 = 1; else {
     HEAP32[i36 >> 2] = i16;
     FUNCTION_TABLE_viiiii[HEAP32[i82 >> 2] & 31](HEAP32[i96 >> 2] | 0, HEAP32[i81 >> 2] | 0, HEAP32[i95 >> 2] | 0, 0, HEAP32[i80 >> 2] | 0);
     i1 = 0;
    }
    i3 = HEAP32[i57 >> 2] | 0;
    i2 = HEAP32[i58 >> 2] | 0;
    if (!i3) i15 = 410; else if (i2 | 0) while (1) {
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = i3;
     if (!i4) {
      i15 = 410;
      break;
     } else {
      i3 = i2;
      i2 = i4;
     }
    }
    if ((i15 | 0) == 410) HEAP32[i57 >> 2] = i2;
    HEAP32[i58 >> 2] = 0;
    HEAP32[i54 >> 2] = 0;
    HEAP32[i52 >> 2] = 0;
    HEAP32[i53 >> 2] = 0;
    i15 = 576;
    break;
   }
  case 58:
   {
    i1 = HEAP32[i45 >> 2] | 0;
    if (i1 | 0) {
     i4 = HEAP32[i84 >> 2] | 0;
     HEAP32[i87 >> 2] = i16;
     if (!(HEAP8[i17 + 72 >> 0] | 0)) {
      if ((HEAP32[i42 >> 2] | 0) == (i17 | 0)) {
       i1 = i37;
       i2 = i39;
      } else {
       i2 = HEAP32[i38 >> 2] | 0;
       i1 = i2 + 4 | 0;
      }
      i3 = i17 + 60 | 0;
      do {
       HEAP32[i88 >> 2] = HEAP32[i46 >> 2];
       FUNCTION_TABLE_viiiii[HEAP32[i3 >> 2] & 31](i17, i87, i4, i88, HEAP32[i47 >> 2] | 0);
       HEAP32[i1 >> 2] = HEAP32[i87 >> 2];
       i16 = HEAP32[i46 >> 2] | 0;
       FUNCTION_TABLE_viii[HEAP32[i45 >> 2] & 31](HEAP32[i96 >> 2] | 0, i16, (HEAP32[i88 >> 2] | 0) - i16 | 0);
       HEAP32[i2 >> 2] = HEAP32[i87 >> 2];
      } while ((HEAP32[i87 >> 2] | 0) != (i4 | 0));
     } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i96 >> 2] | 0, i16, i4 - i16 | 0);
    }
    i4 = HEAP32[i84 >> 2] | 0;
    if ((HEAP32[i42 >> 2] | 0) == (i17 | 0)) {
     HEAP32[i39 >> 2] = i4;
     i2 = i37;
     i3 = i39;
    } else {
     i3 = HEAP32[i38 >> 2] | 0;
     i2 = i3 + 4 | 0;
    }
    HEAP32[i3 >> 2] = i4;
    HEAP32[i84 >> 2] = 0;
    i16 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 12 >> 2] & 127](i17, i4, i98, i83) | 0;
    i1 = HEAP32[i83 >> 2] | 0;
    HEAP32[i2 >> 2] = i1;
    i5 = i1;
    switch (i16 | 0) {
    case 0:
     {
      i15 = 434;
      break L5;
     }
    case 42:
     {
      i2 = HEAP32[i45 >> 2] | 0;
      if (i2) {
       HEAP32[i87 >> 2] = i4;
       if (!(HEAP8[i17 + 72 >> 0] | 0)) {
        if ((HEAP32[i42 >> 2] | 0) == (i17 | 0)) {
         i1 = i37;
         i2 = i39;
        } else {
         i2 = HEAP32[i38 >> 2] | 0;
         i1 = i2 + 4 | 0;
        }
        i3 = i17 + 60 | 0;
        do {
         HEAP32[i88 >> 2] = HEAP32[i46 >> 2];
         FUNCTION_TABLE_viiiii[HEAP32[i3 >> 2] & 31](i17, i87, i5, i88, HEAP32[i47 >> 2] | 0);
         HEAP32[i1 >> 2] = HEAP32[i87 >> 2];
         i16 = HEAP32[i46 >> 2] | 0;
         FUNCTION_TABLE_viii[HEAP32[i45 >> 2] & 31](HEAP32[i96 >> 2] | 0, i16, (HEAP32[i88 >> 2] | 0) - i16 | 0);
         HEAP32[i2 >> 2] = HEAP32[i87 >> 2];
        } while ((HEAP32[i87 >> 2] | 0) != (i5 | 0));
       } else FUNCTION_TABLE_viii[i2 & 31](HEAP32[i96 >> 2] | 0, i4, i1 - i4 | 0);
       i1 = HEAP32[i83 >> 2] | 0;
      }
      HEAP32[i84 >> 2] = i1;
      HEAP32[i99 >> 2] = i1;
      if ((HEAP32[i48 >> 2] | 0) == 2) {
       i1 = 35;
       i15 = 438;
       break L5;
      }
      break;
     }
    case -2:
     {
      if (i19) {
       i1 = 6;
       i15 = 438;
       break L5;
      } else i15 = 439;
      break;
     }
    case -4:
    case -1:
     {
      if (i19) {
       i1 = 2;
       i15 = 438;
       break L5;
      } else i15 = 439;
      break;
     }
    default:
     {
      i15 = 437;
      break L5;
     }
    }
    if ((i15 | 0) == 439) {
     i15 = 0;
     HEAP32[i99 >> 2] = i4;
     i1 = HEAP32[i84 >> 2] | 0;
    }
    if (!i1) {
     i15 = 441;
     break L5;
    } else i1 = i17;
    break;
   }
  case 44:
   {
    i1 = HEAP32[i21 >> 2] | 0;
    do if ((HEAP32[i20 >> 2] | 0) >>> 0 >= i1 >>> 0) {
     if (!i1) {
      i14 = HEAP32[i74 >> 2] | 0;
      HEAP32[i21 >> 2] = 32;
      i14 = FUNCTION_TABLE_ii[i14 & 63](32) | 0;
      HEAP32[i22 >> 2] = i14;
      if (!i14) {
       i1 = 1;
       i15 = 588;
       break L5;
      } else break;
     }
     i13 = HEAP32[i75 >> 2] | 0;
     i14 = HEAP32[i22 >> 2] | 0;
     i1 = i1 << 1;
     HEAP32[i21 >> 2] = i1;
     i1 = FUNCTION_TABLE_iii[i13 & 255](i14, i1) | 0;
     if (!i1) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     HEAP32[i22 >> 2] = i1;
     i1 = HEAP32[i24 >> 2] | 0;
     if (i1 | 0) {
      i1 = FUNCTION_TABLE_iii[HEAP32[i75 >> 2] & 255](i1, HEAP32[i21 >> 2] << 2) | 0;
      if (!i1) {
       i1 = 1;
       i15 = 588;
       break L5;
      }
      HEAP32[i24 >> 2] = i1;
     }
    } while (0);
    HEAP8[(HEAP32[i22 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) >> 0] = 0;
    if (!(HEAP8[i23 >> 0] | 0)) i15 = 577; else {
     i1 = _nextScaffoldPart(i97) | 0;
     if ((i1 | 0) < 0) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     HEAP32[(HEAP32[i24 >> 2] | 0) + (HEAP32[i25 >> 2] << 2) >> 2] = i1;
     HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
     HEAP32[(HEAP32[i26 >> 2] | 0) + (i1 * 28 | 0) >> 2] = 6;
     if (!(HEAP32[i27 >> 2] | 0)) i15 = 577; else i1 = i17;
    }
    break;
   }
  case 50:
   {
    i1 = (HEAP32[i22 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) | 0;
    if ((HEAP8[i1 >> 0] | 0) == 124) {
     i1 = 2;
     i15 = 588;
     break L5;
    }
    HEAP8[i1 >> 0] = 44;
    if (!(HEAP8[i23 >> 0] | 0)) i15 = 577; else if (!(HEAP32[i27 >> 2] | 0)) i15 = 577; else i1 = i17;
    break;
   }
  case 49:
   {
    i2 = (HEAP32[i22 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) | 0;
    i1 = HEAP8[i2 >> 0] | 0;
    if (i1 << 24 >> 24 == 44) {
     i1 = 2;
     i15 = 588;
     break L5;
    }
    if (i1 << 24 >> 24 == 0 & (HEAP8[i23 >> 0] | 0) != 0) {
     i1 = (HEAP32[i26 >> 2] | 0) + ((HEAP32[(HEAP32[i24 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) + -1 << 2) >> 2] | 0) * 28 | 0) | 0;
     if ((HEAP32[i1 >> 2] | 0) == 3) i1 = 1; else {
      HEAP32[i1 >> 2] = 5;
      i1 = (HEAP32[i27 >> 2] | 0) == 0 & 1;
     }
    } else i1 = 1;
    HEAP8[i2 >> 0] = 124;
    i15 = 576;
    break;
   }
  case 59:
  case 60:
   {
    HEAP8[i89 >> 0] = 1;
    if (!(HEAP32[i86 >> 2] | 0)) {
     i2 = HEAP8[i93 >> 0] | 0;
     HEAP8[i61 >> 0] = i2;
     i1 = 1;
    } else {
     i13 = HEAP32[i17 + 68 >> 2] | 0;
     i1 = (HEAP32[i84 >> 2] | 0) + (0 - i13) | 0;
     HEAP32[i87 >> 2] = i16 + i13;
     if (!(HEAP32[i63 >> 2] | 0)) if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
      i15 = 467;
      break L5;
     }
     i2 = i17 + 60 | 0;
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i2 >> 2] & 31](i17, i87, i1, i63, HEAP32[i64 >> 2] | 0);
      if ((HEAP32[i87 >> 2] | 0) == (i1 | 0)) break;
      if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
       i15 = 467;
       break L5;
      }
     }
     if (!(HEAP32[i65 >> 2] | 0)) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     i1 = HEAP32[i63 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i64 >> 2] | 0)) {
      if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
       i1 = 1;
       i15 = 588;
       break L5;
      }
      i1 = HEAP32[i63 >> 2] | 0;
     }
     HEAP32[i63 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i13 = HEAP32[i65 >> 2] | 0;
     i12 = i13;
     if (!i13) {
      i1 = 1;
      i15 = 588;
      break L5;
     }
     i10 = HEAP32[i28 >> 2] | 0;
     L516 : do if (!i10) i3 = 0; else {
      i1 = HEAP32[i18 >> 2] | 0;
      i11 = HEAP8[i13 >> 0] | 0;
      if (i11 << 24 >> 24) {
       i2 = i13;
       i3 = i11;
       do {
        i2 = i2 + 1 | 0;
        i1 = i1 * 1000003 ^ i3 & 255;
        i3 = HEAP8[i2 >> 0] | 0;
       } while (i3 << 24 >> 24 != 0);
      }
      i2 = i10 + -1 | 0;
      i4 = i1 & i2;
      i9 = HEAP32[i31 >> 2] | 0;
      i3 = HEAP32[i9 + (i4 << 2) >> 2] | 0;
      if (!i3) i3 = 0; else {
       i8 = i1 & 0 - i10;
       i7 = i2 >>> 2;
       i1 = 0;
       while (1) {
        i2 = HEAP32[i3 >> 2] | 0;
        if (i11 << 24 >> 24 == (HEAP8[i2 >> 0] | 0)) {
         i6 = i13;
         i5 = i11;
         do {
          if (!(i5 << 24 >> 24)) break L516;
          i6 = i6 + 1 | 0;
          i2 = i2 + 1 | 0;
          i5 = HEAP8[i6 >> 0] | 0;
         } while (i5 << 24 >> 24 == (HEAP8[i2 >> 0] | 0));
        }
        if (!(i1 << 24 >> 24)) i1 = (i8 >>> ((HEAPU8[i32 >> 0] | 0) + -1 | 0) & i7 | 1) & 255;
        i3 = i1 & 255;
        i4 = (i4 >>> 0 < i3 >>> 0 ? i10 : 0) + (i4 - i3) | 0;
        i3 = HEAP32[i9 + (i4 << 2) >> 2] | 0;
        if (!i3) {
         i3 = 0;
         break;
        }
       }
      }
     } while (0);
     HEAP32[i63 >> 2] = i12;
     do if (!(HEAP32[i29 >> 2] | 0)) i15 = 490; else {
      if (!(HEAP8[i93 >> 0] | 0)) {
       if (HEAP8[i89 >> 0] | 0) {
        i15 = 490;
        break;
       }
      } else if (HEAP32[i38 >> 2] | 0) {
       i15 = 490;
       break;
      }
      if (!i3) {
       i1 = 11;
       i15 = 588;
       break L5;
      }
      if (!(HEAP8[i3 + 34 >> 0] | 0)) {
       i1 = 24;
       i15 = 588;
       break L5;
      }
     } while (0);
     if ((i15 | 0) == 490) {
      i15 = 0;
      if (!i3) {
       HEAP8[i61 >> 0] = HEAP8[i93 >> 0] | 0;
       if ((i14 | 0) != 60) {
        i15 = 577;
        break L12;
       }
       i1 = HEAP32[i30 >> 2] | 0;
       if (!i1) {
        i15 = 577;
        break L12;
       }
       FUNCTION_TABLE_viii[i1 & 31](HEAP32[i96 >> 2] | 0, i13, 1);
       i1 = i17;
       break L12;
      }
     }
     i2 = i3 + 32 | 0;
     if (HEAP8[i2 >> 0] | 0) {
      i1 = 12;
      i15 = 588;
      break L5;
     }
     if (HEAP32[i3 + 4 >> 2] | 0) {
      i1 = _processInternalEntity(i97, i3, (i14 | 0) == 60 & 1) | 0;
      i2 = (i1 | 0) == 0;
      if (i2) {
       i1 = (i2 ^ 1) & 1;
       i15 = 576;
       break L12;
      } else {
       i15 = 588;
       break L5;
      }
     }
     i1 = HEAP32[i90 >> 2] | 0;
     if (!i1) {
      HEAP8[i61 >> 0] = HEAP8[i93 >> 0] | 0;
      i15 = 577;
      break L12;
     }
     HEAP8[i91 >> 0] = 0;
     HEAP8[i2 >> 0] = 1;
     i14 = (FUNCTION_TABLE_iiiiii[i1 & 127](HEAP32[i92 >> 2] | 0, 0, HEAP32[i3 + 20 >> 2] | 0, HEAP32[i3 + 16 >> 2] | 0, HEAP32[i3 + 24 >> 2] | 0) | 0) == 0;
     HEAP8[i2 >> 0] = 0;
     if (i14) {
      i1 = 21;
      i15 = 588;
      break L5;
     }
     i2 = HEAP8[i93 >> 0] | 0;
     if (!(HEAP8[i91 >> 0] | 0)) {
      HEAP8[i61 >> 0] = i2;
      i1 = i17;
      break L12;
     } else i1 = 0;
    }
    if (!(i2 << 24 >> 24)) {
     i2 = HEAP32[i94 >> 2] | 0;
     if (!i2) i15 = 576; else if (!(FUNCTION_TABLE_ii[i2 & 63](HEAP32[i96 >> 2] | 0) | 0)) {
      i1 = 22;
      i15 = 588;
      break L5;
     } else i15 = 576;
    } else i15 = 576;
    break;
   }
  case 40:
   {
    if (!(HEAP32[i27 >> 2] | 0)) i15 = 577; else {
     i2 = HEAP32[i84 >> 2] | 0;
     i6 = HEAP32[i40 >> 2] | 0;
     i4 = i6 + 80 | 0;
     HEAP32[i87 >> 2] = i16;
     i7 = i6 + 92 | 0;
     if (!(HEAP32[i7 >> 2] | 0)) if (!((_poolGrow(i4) | 0) << 24 >> 24)) {
      i15 = 511;
      break L5;
     }
     i1 = i17 + 60 | 0;
     i3 = i6 + 88 | 0;
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i1 >> 2] & 31](i17, i87, i2, i7, HEAP32[i3 >> 2] | 0);
      if ((HEAP32[i87 >> 2] | 0) == (i2 | 0)) break;
      if (!((_poolGrow(i4) | 0) << 24 >> 24)) {
       i15 = 511;
       break L5;
      }
     }
     i5 = i6 + 96 | 0;
     if (!(HEAP32[i5 >> 2] | 0)) {
      i15 = 521;
      break L5;
     }
     i1 = HEAP32[i7 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i3 >> 2] | 0)) {
      if (!((_poolGrow(i4) | 0) << 24 >> 24)) {
       i15 = 521;
       break L5;
      }
      i1 = HEAP32[i7 >> 2] | 0;
     }
     HEAP32[i7 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i2 = HEAP32[i5 >> 2] | 0;
     if (!i2) {
      i15 = 521;
      break L5;
     }
     i1 = _lookup(i97, i6 + 20 | 0, i2, 24) | 0;
     if (!i1) {
      i15 = 521;
      break L5;
     }
     if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) {
      HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
      if (!(_setElementTypePrefix(i97, i1) | 0)) {
       i15 = 521;
       break L5;
      }
     } else HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
     HEAP32[i68 >> 2] = i1;
     HEAP32[i25 >> 2] = 0;
     HEAP32[i33 >> 2] = 0;
     HEAP8[i23 >> 0] = 1;
     i1 = i17;
    }
    break;
   }
  case 42:
  case 41:
   {
    if (!(HEAP8[i23 >> 0] | 0)) i15 = 577; else {
     if (!(HEAP32[i27 >> 2] | 0)) i1 = 1; else {
      i1 = FUNCTION_TABLE_ii[HEAP32[i74 >> 2] & 63](20) | 0;
      if (!i1) {
       i1 = 1;
       i15 = 588;
       break L5;
      }
      i15 = i1 + 4 | 0;
      HEAP32[i15 >> 2] = 0;
      HEAP32[i15 + 4 >> 2] = 0;
      HEAP32[i15 + 8 >> 2] = 0;
      HEAP32[i15 + 12 >> 2] = 0;
      HEAP32[i1 >> 2] = (i14 | 0) == 41 ? 2 : 1;
      HEAP32[i36 >> 2] = i16;
      FUNCTION_TABLE_viii[HEAP32[i27 >> 2] & 31](HEAP32[i96 >> 2] | 0, HEAP32[HEAP32[i68 >> 2] >> 2] | 0, i1);
      i1 = 0;
     }
     HEAP8[i23 >> 0] = 0;
     i15 = 576;
    }
    break;
   }
  case 43:
   {
    if (!(HEAP8[i23 >> 0] | 0)) i15 = 577; else {
     HEAP32[(HEAP32[i26 >> 2] | 0) + ((HEAP32[(HEAP32[i24 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) + -1 << 2) >> 2] | 0) * 28 | 0) >> 2] = 3;
     if (!(HEAP32[i27 >> 2] | 0)) i15 = 577; else i1 = i17;
    }
    break;
   }
  case 51:
   {
    i2 = 0;
    i15 = 533;
    break;
   }
  case 53:
   {
    i2 = 1;
    i15 = 533;
    break;
   }
  case 52:
   {
    i2 = 2;
    i15 = 533;
    break;
   }
  case 54:
   {
    i2 = 3;
    i15 = 533;
    break;
   }
  case 45:
   {
    i3 = 0;
    i15 = 559;
    break;
   }
  case 47:
   {
    i3 = 1;
    i15 = 559;
    break;
   }
  case 46:
   {
    i3 = 2;
    i15 = 559;
    break;
   }
  case 48:
   {
    i3 = 3;
    i15 = 559;
    break;
   }
  case 55:
   {
    if (!(_reportProcessingInstruction(i97, i17, i16, HEAP32[i84 >> 2] | 0) | 0)) {
     i1 = 1;
     i15 = 588;
     break L5;
    } else i1 = i17;
    break;
   }
  case 56:
   {
    if (!(_reportComment(i97, i17, i16, HEAP32[i84 >> 2] | 0) | 0)) {
     i1 = 1;
     i15 = 588;
     break L5;
    } else i1 = i17;
    break;
   }
  case 0:
   {
    if ((i2 | 0) == 14) i1 = i17; else i15 = 577;
    break;
   }
  case 3:
   {
    if (!(HEAP32[i49 >> 2] | 0)) i15 = 577; else i1 = i17;
    break;
   }
  case 11:
   {
    if (!(HEAP8[i61 >> 0] | 0)) i15 = 577; else if (!(HEAP32[i66 >> 2] | 0)) i15 = 577; else i1 = i17;
    break;
   }
  case 17:
   {
    if (!(HEAP32[i82 >> 2] | 0)) i15 = 577; else i1 = i17;
    break;
   }
  case 33:
   {
    if (!(HEAP8[i61 >> 0] | 0)) i15 = 577; else if (!(HEAP32[i69 >> 2] | 0)) i15 = 577; else i1 = i17;
    break;
   }
  case 39:
   {
    if (!(HEAP32[i27 >> 2] | 0)) i15 = 577; else i1 = i17;
    break;
   }
  default:
   i15 = 577;
  } while (0);
  if ((i15 | 0) == 67) if (!(FUNCTION_TABLE_iiiii[HEAP32[i17 + 56 >> 2] & 127](i17, i16, HEAP32[i84 >> 2] | 0, i35) | 0)) {
   i1 = 32;
   i15 = 588;
   break;
  } else {
   i1 = 1;
   i15 = 68;
  } else if ((i15 | 0) == 153) {
   i15 = 0;
   if (!(HEAP8[i61 >> 0] | 0)) i15 = 577; else if (!(HEAP32[i69 >> 2] | 0)) i15 = 577; else i1 = i17;
  } else if ((i15 | 0) == 271) {
   i15 = 0;
   if (!(HEAP8[i61 >> 0] | 0)) i15 = 576; else if (!(HEAP32[i60 >> 2] | 0)) i15 = 576; else {
    i14 = HEAP32[i17 + 68 >> 2] | 0;
    i2 = (HEAP32[i84 >> 2] | 0) + (0 - i14) | 0;
    HEAP32[i87 >> 2] = i16 + i14;
    if (!(HEAP32[i63 >> 2] | 0)) if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
     i15 = 278;
     break;
    }
    i3 = i17 + 60 | 0;
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i3 >> 2] & 31](i17, i87, i2, i63, HEAP32[i64 >> 2] | 0);
     if ((HEAP32[i87 >> 2] | 0) == (i2 | 0)) break;
     if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
      i15 = 278;
      break L5;
     }
    }
    if (!(HEAP32[i65 >> 2] | 0)) {
     i15 = 283;
     break;
    }
    i2 = HEAP32[i63 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i64 >> 2] | 0)) {
     if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
      i15 = 283;
      break;
     }
     i2 = HEAP32[i63 >> 2] | 0;
    }
    HEAP32[i63 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = 0;
    i14 = HEAP32[i65 >> 2] | 0;
    i2 = HEAP32[i60 >> 2] | 0;
    HEAP32[i2 + 16 >> 2] = i14;
    if (!i14) {
     i1 = 1;
     i15 = 588;
     break;
    }
    HEAP32[i2 + 20 >> 2] = HEAP32[i95 >> 2];
    HEAP32[i65 >> 2] = HEAP32[i63 >> 2];
    if (!(HEAP32[i66 >> 2] | 0)) i15 = 576; else i1 = i17;
   }
  } else if ((i15 | 0) == 533) {
   i15 = 0;
   if (!(HEAP8[i23 >> 0] | 0)) i15 = 577; else {
    i1 = HEAP32[i84 >> 2] | 0;
    if (i2) i1 = i1 + (0 - (HEAP32[i17 + 68 >> 2] | 0)) | 0;
    i8 = _nextScaffoldPart(i97) | 0;
    if ((i8 | 0) < 0) {
     i1 = 1;
     i15 = 588;
     break;
    }
    i5 = HEAP32[i26 >> 2] | 0;
    HEAP32[i5 + (i8 * 28 | 0) >> 2] = 4;
    HEAP32[i5 + (i8 * 28 | 0) + 4 >> 2] = i2;
    i5 = HEAP32[i40 >> 2] | 0;
    i3 = i5 + 80 | 0;
    HEAP32[i87 >> 2] = i16;
    i7 = i5 + 92 | 0;
    if (!(HEAP32[i7 >> 2] | 0)) if (!((_poolGrow(i3) | 0) << 24 >> 24)) {
     i15 = 542;
     break;
    }
    i2 = i17 + 60 | 0;
    i4 = i5 + 88 | 0;
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i2 >> 2] & 31](i17, i87, i1, i7, HEAP32[i4 >> 2] | 0);
     if ((HEAP32[i87 >> 2] | 0) == (i1 | 0)) break;
     if (!((_poolGrow(i3) | 0) << 24 >> 24)) {
      i15 = 542;
      break L5;
     }
    }
    i6 = i5 + 96 | 0;
    if (!(HEAP32[i6 >> 2] | 0)) {
     i1 = 1;
     i15 = 588;
     break;
    }
    i1 = HEAP32[i7 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i4 >> 2] | 0)) {
     if (!((_poolGrow(i3) | 0) << 24 >> 24)) {
      i1 = 1;
      i15 = 588;
      break;
     }
     i1 = HEAP32[i7 >> 2] | 0;
    }
    HEAP32[i7 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = 0;
    i3 = HEAP32[i6 >> 2] | 0;
    if (!i3) {
     i1 = 1;
     i15 = 588;
     break;
    }
    i1 = _lookup(i97, i5 + 20 | 0, i3, 24) | 0;
    if (!i1) {
     i1 = 1;
     i15 = 588;
     break;
    }
    i2 = HEAP32[i1 >> 2] | 0;
    if ((i2 | 0) == (i3 | 0)) {
     HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
     if (!(_setElementTypePrefix(i97, i1) | 0)) {
      i1 = 1;
      i15 = 588;
      break;
     }
     i2 = HEAP32[i1 >> 2] | 0;
    } else HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
    HEAP32[(HEAP32[i26 >> 2] | 0) + (i8 * 28 | 0) + 8 >> 2] = i2;
    i1 = 0;
    do {
     i14 = i1;
     i1 = i1 + 1 | 0;
    } while ((HEAP8[i2 + i14 >> 0] | 0) != 0);
    HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + i1;
    if (!(HEAP32[i27 >> 2] | 0)) i15 = 577; else i1 = i17;
   }
  } else if ((i15 | 0) == 559) if (!(HEAP8[i23 >> 0] | 0)) i15 = 577; else {
   i2 = (HEAP32[i27 >> 2] | 0) == 0;
   i1 = i2 & 1;
   i15 = (HEAP32[i25 >> 2] | 0) + -1 | 0;
   HEAP32[i25 >> 2] = i15;
   HEAP32[(HEAP32[i26 >> 2] | 0) + ((HEAP32[(HEAP32[i24 >> 2] | 0) + (i15 << 2) >> 2] | 0) * 28 | 0) + 4 >> 2] = i3;
   if (!i15) {
    if (!i2) {
     i3 = HEAP32[i40 >> 2] | 0;
     i2 = i3 + 176 | 0;
     i3 = FUNCTION_TABLE_ii[HEAP32[i74 >> 2] & 63](((HEAP32[i2 >> 2] | 0) * 20 | 0) + (HEAP32[i3 + 168 >> 2] | 0) | 0) | 0;
     if (!i3) {
      i15 = 563;
      break;
     }
     HEAP32[i88 >> 2] = i3 + ((HEAP32[i2 >> 2] | 0) * 20 | 0);
     HEAP32[i87 >> 2] = i3 + 20;
     _build_node(i97, 0, i3, i87, i88);
     HEAP32[i36 >> 2] = i16;
     FUNCTION_TABLE_viii[HEAP32[i27 >> 2] & 31](HEAP32[i96 >> 2] | 0, HEAP32[HEAP32[i68 >> 2] >> 2] | 0, i3);
    }
    HEAP8[i23 >> 0] = 0;
    HEAP32[i34 >> 2] = 0;
    i15 = 576;
   } else i15 = 576;
  }
  if ((i15 | 0) == 68) {
   i15 = 0;
   if (!(HEAP8[i61 >> 0] | 0)) i15 = 576; else if (!(HEAP32[i60 >> 2] | 0)) i15 = 576; else {
    i14 = HEAP32[i17 + 68 >> 2] | 0;
    i2 = (HEAP32[i84 >> 2] | 0) + (0 - i14) | 0;
    HEAP32[i87 >> 2] = i16 + i14;
    if (!(HEAP32[i63 >> 2] | 0)) if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
     i15 = 75;
     break;
    }
    i3 = i17 + 60 | 0;
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i3 >> 2] & 31](i17, i87, i2, i63, HEAP32[i64 >> 2] | 0);
     if ((HEAP32[i87 >> 2] | 0) == (i2 | 0)) break;
     if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
      i15 = 75;
      break L5;
     }
    }
    if (!(HEAP32[i65 >> 2] | 0)) {
     i1 = 1;
     i15 = 588;
     break;
    }
    i2 = HEAP32[i63 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i64 >> 2] | 0)) {
     if (!((_poolGrow(i62) | 0) << 24 >> 24)) {
      i1 = 1;
      i15 = 588;
      break;
     }
     i2 = HEAP32[i63 >> 2] | 0;
    }
    HEAP32[i63 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = 0;
    i5 = HEAP32[i65 >> 2] | 0;
    if (!i5) {
     i1 = 1;
     i15 = 588;
     break;
    }
    i3 = HEAP8[i5 >> 0] | 0;
    if (!(i3 << 24 >> 24)) i2 = i5; else {
     i2 = i5;
     i4 = i5;
     do {
      switch (i3 << 24 >> 24 | 0) {
      case 10:
      case 13:
      case 32:
       {
        if ((i2 | 0) == (i5 | 0)) i2 = i5; else if ((HEAP8[i2 + -1 >> 0] | 0) != 32) {
         HEAP8[i2 >> 0] = 32;
         i2 = i2 + 1 | 0;
        }
        break;
       }
      default:
       {
        HEAP8[i2 >> 0] = i3;
        i2 = i2 + 1 | 0;
       }
      }
      i4 = i4 + 1 | 0;
      i3 = HEAP8[i4 >> 0] | 0;
     } while (i3 << 24 >> 24 != 0);
     if ((i2 | 0) == (i5 | 0)) i2 = i5; else {
      i14 = i2 + -1 | 0;
      i2 = (HEAP8[i14 >> 0] | 0) == 32 ? i14 : i2;
     }
    }
    HEAP8[i2 >> 0] = 0;
    HEAP32[(HEAP32[i60 >> 2] | 0) + 24 >> 2] = i5;
    HEAP32[i65 >> 2] = HEAP32[i63 >> 2];
    if (!(HEAP32[i66 >> 2] | 0)) i15 = 576; else i1 = i17;
   }
  }
  if ((i15 | 0) == 576) {
   i15 = 0;
   if (!(i1 << 24 >> 24)) i1 = i17; else i15 = 577;
  }
  if ((i15 | 0) == 577) {
   i15 = 0;
   i1 = HEAP32[i45 >> 2] | 0;
   if (!i1) i1 = i17; else {
    i4 = HEAP32[i84 >> 2] | 0;
    HEAP32[i87 >> 2] = i16;
    if (!(HEAP8[i17 + 72 >> 0] | 0)) {
     if ((HEAP32[i42 >> 2] | 0) == (i17 | 0)) {
      i1 = i37;
      i2 = i39;
     } else {
      i2 = HEAP32[i38 >> 2] | 0;
      i1 = i2 + 4 | 0;
     }
     i3 = i17 + 60 | 0;
     do {
      HEAP32[i88 >> 2] = HEAP32[i46 >> 2];
      FUNCTION_TABLE_viiiii[HEAP32[i3 >> 2] & 31](i17, i87, i4, i88, HEAP32[i47 >> 2] | 0);
      HEAP32[i1 >> 2] = HEAP32[i87 >> 2];
      i16 = HEAP32[i46 >> 2] | 0;
      FUNCTION_TABLE_viii[HEAP32[i45 >> 2] & 31](HEAP32[i96 >> 2] | 0, i16, (HEAP32[i88 >> 2] | 0) - i16 | 0);
      HEAP32[i2 >> 2] = HEAP32[i87 >> 2];
     } while ((HEAP32[i87 >> 2] | 0) != (i4 | 0));
    } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i96 >> 2] | 0, i16, i4 - i16 | 0);
    i1 = i17;
   }
  }
  switch (HEAP32[i48 >> 2] | 0) {
  case 3:
   {
    i15 = 586;
    break L5;
   }
  case 2:
   {
    i1 = 35;
    i15 = 588;
    break L5;
   }
  default:
   {}
  }
  i2 = HEAP32[i84 >> 2] | 0;
  i17 = i1;
  i16 = i2;
  i2 = FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i1, i2, i98, i84) | 0;
 }
 switch (i15 | 0) {
 case 7:
  {
   HEAP32[i99 >> 2] = i16;
   i99 = 0;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 9:
  {
   HEAP32[i35 >> 2] = i3;
   i99 = 4;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 10:
  {
   if ((i17 | 0) == (HEAP32[i42 >> 2] | 0)) {
    if (!(HEAP8[i97 + 488 >> 0] | 0)) {
     i99 = 3;
     STACKTOP = i100;
     return i99 | 0;
    }
   } else if (!(HEAP8[(HEAP32[i38 >> 2] | 0) + 20 >> 0] | 0)) {
    HEAP32[i99 >> 2] = i16;
    i99 = 0;
    STACKTOP = i100;
    return i99 | 0;
   }
   if ((FUNCTION_TABLE_iiiiii[HEAP32[i44 >> 2] & 127](i44, -4, i98, i98, i17) | 0) == -1) {
    i99 = 29;
    STACKTOP = i100;
    return i99 | 0;
   }
   HEAP32[i99 >> 2] = i16;
   i99 = 0;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 26:
  {
   i15 = 31;
   break;
  }
 case 51:
  {
   i99 = 1;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 75:
  {
   i99 = 1;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 115:
  {
   do if (HEAP8[i59 >> 0] | 0) {
    i2 = HEAP8[i89 >> 0] | 0;
    HEAP8[i89 >> 0] = 1;
    if (HEAP32[i86 >> 2] | 0) if (HEAP32[i90 >> 2] | 0) {
     i1 = _lookup(i97, i85, 345437, 36) | 0;
     if (!i1) {
      i99 = 1;
      STACKTOP = i100;
      return i99 | 0;
     }
     i95 = HEAP32[i95 >> 2] | 0;
     HEAP32[i1 + 20 >> 2] = i95;
     HEAP8[i91 >> 0] = 0;
     if (!(FUNCTION_TABLE_iiiiii[HEAP32[i90 >> 2] & 127](HEAP32[i92 >> 2] | 0, 0, i95, HEAP32[i1 + 16 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0) | 0)) {
      i99 = 21;
      STACKTOP = i100;
      return i99 | 0;
     }
     if (!(HEAP8[i91 >> 0] | 0)) {
      HEAP8[i89 >> 0] = i2;
      break;
     }
     if (!(HEAP8[i93 >> 0] | 0)) {
      i1 = HEAP32[i94 >> 2] | 0;
      if (i1 | 0) if (!(FUNCTION_TABLE_ii[i1 & 63](HEAP32[i96 >> 2] | 0) | 0)) {
       i99 = 22;
       STACKTOP = i100;
       return i99 | 0;
      }
     }
    }
   } while (0);
   HEAP32[i97 + 280 >> 2] = 77;
   i99 = _contentProcessor(i97, i16, i98, i99) | 0;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 131:
  {
   i15 = 141;
   break;
  }
 case 168:
  {
   i99 = 1;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 255:
  {
   i15 = 260;
   break;
  }
 case 278:
  {
   i15 = 283;
   break;
  }
 case 297:
  {
   i15 = 302;
   break;
  }
 case 316:
  {
   i99 = 1;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 335:
  {
   i99 = 1;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 354:
  {
   i15 = 359;
   break;
  }
 case 369:
  {
   i99 = 1;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 392:
  {
   i99 = 1;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 412:
  {
   i99 = (i2 | 0) == 28 ? 10 : (i2 | 0) == 12 ? 17 : 2;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 434:
  {
   HEAP32[i3 >> 2] = i1;
   i1 = 4;
   i15 = 438;
   break;
  }
 case 437:
  {
   HEAP32[i3 >> 2] = i1;
   i1 = 23;
   i15 = 438;
   break;
  }
 case 441:
  {
   HEAP32[i97 + 280 >> 2] = 78;
   i99 = 0;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 467:
  {
   i99 = 1;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 511:
  {
   i15 = 521;
   break;
  }
 case 542:
  {
   i99 = 1;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 563:
  {
   i99 = 1;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 586:
  {
   HEAP32[i99 >> 2] = HEAP32[i84 >> 2];
   i99 = 0;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 588:
  {
   i99 = i1;
   STACKTOP = i100;
   return i99 | 0;
  }
 case 589:
  {
   STACKTOP = i100;
   return i1 | 0;
  }
 }
 if ((i15 | 0) == 31) {
  HEAP32[i55 >> 2] = 0;
  i99 = 1;
  STACKTOP = i100;
  return i99 | 0;
 } else if ((i15 | 0) == 141) {
  HEAP32[i68 >> 2] = 0;
  i99 = 1;
  STACKTOP = i100;
  return i99 | 0;
 } else if ((i15 | 0) == 260) {
  HEAP32[i50 >> 2] = 0;
  i99 = 1;
  STACKTOP = i100;
  return i99 | 0;
 } else if ((i15 | 0) == 283) {
  HEAP32[(HEAP32[i60 >> 2] | 0) + 16 >> 2] = 0;
  i99 = 1;
  STACKTOP = i100;
  return i99 | 0;
 } else if ((i15 | 0) == 302) {
  HEAP32[(HEAP32[i60 >> 2] | 0) + 28 >> 2] = 0;
  i99 = 1;
  STACKTOP = i100;
  return i99 | 0;
 } else if ((i15 | 0) == 359) {
  HEAP32[i81 >> 2] = 0;
  i99 = 1;
  STACKTOP = i100;
  return i99 | 0;
 } else if ((i15 | 0) == 438) {
  i99 = i1;
  STACKTOP = i100;
  return i99 | 0;
 } else if ((i15 | 0) == 521) {
  HEAP32[i68 >> 2] = 0;
  i99 = 1;
  STACKTOP = i100;
  return i99 | 0;
 }
 return 0;
}

function _FcEndElement(i88, i1) {
 i88 = i88 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0;
 i87 = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 i85 = i87 + 656 | 0;
 i12 = i87 + 648 | 0;
 i35 = i87 + 640 | 0;
 i25 = i87 + 632 | 0;
 i46 = i87 + 624 | 0;
 i45 = i87 + 616 | 0;
 i32 = i87 + 608 | 0;
 i11 = i87 + 600 | 0;
 i19 = i87 + 592 | 0;
 i18 = i87 + 584 | 0;
 i10 = i87 + 576 | 0;
 i9 = i87 + 568 | 0;
 i22 = i87 + 560 | 0;
 i21 = i87 + 552 | 0;
 i20 = i87 + 544 | 0;
 i24 = i87 + 536 | 0;
 i23 = i87 + 528 | 0;
 i41 = i87 + 520 | 0;
 i40 = i87 + 512 | 0;
 i39 = i87 + 504 | 0;
 i8 = i87 + 496 | 0;
 i7 = i87 + 488 | 0;
 i44 = i87 + 480 | 0;
 i43 = i87 + 472 | 0;
 i38 = i87 + 464 | 0;
 i31 = i87 + 456 | 0;
 i30 = i87 + 448 | 0;
 i17 = i87 + 440 | 0;
 i4 = i87 + 432 | 0;
 i42 = i87 + 424 | 0;
 i3 = i87 + 416 | 0;
 i15 = i87 + 408 | 0;
 i2 = i87 + 400 | 0;
 i77 = i87 + 392 | 0;
 i74 = i87 + 384 | 0;
 i73 = i87 + 376 | 0;
 i65 = i87 + 368 | 0;
 i53 = i87 + 360 | 0;
 i29 = i87 + 352 | 0;
 i84 = i87 + 344 | 0;
 i83 = i87 + 336 | 0;
 i82 = i87 + 328 | 0;
 i81 = i87 + 320 | 0;
 i78 = i87 + 312 | 0;
 i75 = i87 + 304 | 0;
 i64 = i87 + 296 | 0;
 i52 = i87 + 288 | 0;
 i28 = i87 + 280 | 0;
 i14 = i87 + 272 | 0;
 i47 = i87 + 264 | 0;
 i60 = i87 + 256 | 0;
 i59 = i87 + 248 | 0;
 i76 = i87 + 240 | 0;
 i68 = i87 + 232 | 0;
 i67 = i87 + 224 | 0;
 i66 = i87 + 216 | 0;
 i27 = i87 + 208 | 0;
 i36 = i87 + 200 | 0;
 i70 = i87 + 192 | 0;
 i69 = i87 + 184 | 0;
 i58 = i87 + 176 | 0;
 i62 = i87 + 168 | 0;
 i26 = i87 + 160 | 0;
 i61 = i87 + 152 | 0;
 i80 = i87 + 144 | 0;
 i79 = i87 + 136 | 0;
 i72 = i87 + 128 | 0;
 i57 = i87 + 120 | 0;
 i33 = i87 + 112 | 0;
 i13 = i87 + 104 | 0;
 i1 = i87 + 96 | 0;
 i51 = i87 + 88 | 0;
 i50 = i87 + 80 | 0;
 i49 = i87 + 72 | 0;
 i37 = i87 + 64 | 0;
 i55 = i87 + 56 | 0;
 i54 = i87 + 48 | 0;
 i48 = i87 + 40 | 0;
 i34 = i87 + 32 | 0;
 i71 = i87 + 16 | 0;
 i63 = i87;
 i56 = HEAP32[i88 >> 2] | 0;
 if (!i56) {
  STACKTOP = i87;
  return;
 }
 i16 = HEAP32[i56 + 4 >> 2] | 0;
 L4 : do switch (i16 | 0) {
 case 52:
  {
   _FcParseUnary(i88, 40);
   break;
  }
 case 51:
  {
   _FcParseUnary(i88, 39);
   break;
  }
 case 2:
  {
   i2 = HEAP32[i56 + 8 >> 2] | 0;
   L8 : do if (!i2) i1 = 0; else {
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) i1 = 0; else {
     while (1) {
      if (!(_strcmp(i1, 352690) | 0)) break;
      i2 = i2 + 8 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i1 = 0;
       break L8;
      }
     }
     HEAP8[i1 >> 0] = 0;
     i1 = HEAP32[i2 + 4 >> 2] | 0;
     if (!i1) i1 = 0; else if (!(_FcStrCmp(i1, 352697) | 0)) {
      i1 = _FcConfigXdgDataHome() | 0;
      if (!i1) break L4;
     } else i1 = 0;
    }
   } while (0);
   i2 = _FcStrBufDoneStatic((HEAP32[i88 >> 2] | 0) + 12 | 0) | 0;
   L17 : do if (!i2) {
    _FcConfigMessage(i88, 2, 352676, i34);
    i86 = 23;
   } else {
    do if (!i1) i1 = 0; else {
     i3 = _strlen(i1) | 0;
     i4 = _strlen(i2) | 0;
     i7 = i3 + 1 | 0;
     i8 = i7 + i4 | 0;
     i9 = _realloc(i1, i8 + 1 | 0) | 0;
     if (!i9) {
      _FcConfigMessage(i88, 2, 352676, i48);
      break L17;
     } else {
      HEAP8[i9 + i3 >> 0] = 47;
      _memcpy(i9 + i7 | 0, i2 | 0, i4 | 0) | 0;
      HEAP8[i9 + i8 >> 0] = 0;
      i2 = i9;
      i1 = i9;
      break;
     }
    } while (0);
    do if (!(HEAP8[i2 >> 0] | 0)) _FcConfigMessage(i88, 1, 352701, i54); else {
     if (_FcStrUsesHome(i2) | 0) if (!(_FcConfigHome() | 0)) break;
     if (!(_FcConfigAddDir(HEAP32[i88 + 16 >> 2] | 0, i2) | 0)) {
      HEAP32[i55 >> 2] = i2;
      _FcConfigMessage(i88, 2, 352735, i55);
     }
    } while (0);
    _FcStrBufDestroy((HEAP32[i88 >> 2] | 0) + 12 | 0);
    i86 = 23;
   } while (0);
   if ((i86 | 0) == 23) if (!i1) break L4;
   _FcStrFree(i1);
   break;
  }
 case 3:
  {
   i1 = HEAP32[i56 + 8 >> 2] | 0;
   L38 : do if (!i1) i1 = 0; else {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) i1 = 0; else {
     while (1) {
      if (!(_strcmp(i2, 352690) | 0)) break;
      i1 = i1 + 8 | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if (!i2) {
       i1 = 0;
       break L38;
      }
     }
     HEAP8[i2 >> 0] = 0;
     i1 = HEAP32[i1 + 4 >> 2] | 0;
     if (!i1) i1 = 0; else if (!(_FcStrCmp(i1, 352697) | 0)) {
      i1 = _FcConfigXdgCacheHome() | 0;
      if (!i1) break L4;
     } else i1 = 0;
    }
   } while (0);
   i9 = _FcStrBufDone((HEAP32[i88 >> 2] | 0) + 12 | 0) | 0;
   if (!i9) {
    _FcConfigMessage(i88, 2, 352676, i37);
    break L4;
   }
   do if (!i1) {
    i1 = i9;
    i86 = 38;
   } else {
    i2 = _strlen(i1) | 0;
    i3 = _strlen(i9) | 0;
    i4 = i2 + 1 | 0;
    i7 = i4 + i3 | 0;
    i8 = _realloc(i1, i7 + 1 | 0) | 0;
    if (!i8) {
     _FcConfigMessage(i88, 2, 352676, i49);
     break;
    } else {
     HEAP8[i8 + i2 >> 0] = 47;
     _memcpy(i8 + i4 | 0, i9 | 0, i3 | 0) | 0;
     HEAP8[i8 + i7 >> 0] = 0;
     _FcStrFree(i9);
     i1 = i8;
     i86 = 38;
     break;
    }
   } while (0);
   if ((i86 | 0) == 38) {
    do if (!(HEAP8[i1 >> 0] | 0)) _FcConfigMessage(i88, 1, 352774, i50); else {
     if (_FcStrUsesHome(i1) | 0) if (!(_FcConfigHome() | 0)) break;
     if (!(_FcConfigAddCacheDir(HEAP32[i88 + 16 >> 2] | 0, i1) | 0)) {
      HEAP32[i51 >> 2] = i1;
      _FcConfigMessage(i88, 2, 352809, i51);
     }
    } while (0);
    _FcStrBufDestroy((HEAP32[i88 >> 2] | 0) + 12 | 0);
   }
   _FcStrFree(i1);
   break;
  }
 case 4:
  if (!(_FcStrBufDoneStatic(i56 + 12 | 0) | 0)) {
   _FcConfigMessage(i88, 2, 352676, i1);
   break L4;
  } else {
   _FcStrBufDestroy((HEAP32[i88 >> 2] | 0) + 12 | 0);
   break L4;
  }
 case 5:
  {
   i10 = _FcStrBufDoneStatic(i56 + 12 | 0) | 0;
   if (!i10) {
    _FcConfigMessage(i88, 2, 352676, i13);
    break L4;
   }
   i1 = HEAP32[i88 >> 2] | 0;
   L74 : do if (!i1) {
    i4 = 1;
    i9 = 0;
    i1 = 0;
    i8 = 0;
    i3 = 0;
    i86 = 88;
   } else {
    i1 = HEAP32[i1 + 8 >> 2] | 0;
    L76 : do if (!i1) i11 = 1; else {
     i2 = HEAP32[i1 >> 2] | 0;
     if (!i2) i11 = 1; else {
      while (1) {
       if (!(_strcmp(i2, 352854) | 0)) break;
       i1 = i1 + 8 | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (!i2) {
        i11 = 1;
        break L76;
       }
      }
      HEAP8[i2 >> 0] = 0;
      i1 = HEAP32[i1 + 4 >> 2] | 0;
      if (!i1) i11 = 1; else {
       HEAP32[i85 >> 2] = 0;
       if (!(_FcNameBool(i1, i85) | 0)) {
        HEAP32[i33 >> 2] = i1;
        _FcConfigMessage(i88, 1, 352869, i33);
       }
       i11 = (HEAP32[i85 >> 2] | 0) != 1 & 1;
      }
     }
    } while (0);
    i1 = HEAP32[i88 >> 2] | 0;
    if (!i1) {
     i4 = i11;
     i9 = 0;
     i1 = 0;
     i8 = 0;
     i3 = 0;
     i86 = 88;
    } else {
     i1 = HEAP32[i1 + 8 >> 2] | 0;
     L88 : do if (!i1) i9 = 0; else {
      i2 = HEAP32[i1 >> 2] | 0;
      if (!i2) i9 = 0; else {
       while (1) {
        if (!(_strcmp(i2, 352895) | 0)) break;
        i1 = i1 + 8 | 0;
        i2 = HEAP32[i1 >> 2] | 0;
        if (!i2) {
         i9 = 0;
         break L88;
        }
       }
       HEAP8[i2 >> 0] = 0;
       i1 = HEAP32[i1 + 4 >> 2] | 0;
       if (!i1) i9 = 0; else {
        HEAP32[i85 >> 2] = 0;
        if (!(_FcNameBool(i1, i85) | 0)) {
         HEAP32[i57 >> 2] = i1;
         _FcConfigMessage(i88, 1, 352869, i57);
        }
        i9 = (HEAP32[i85 >> 2] | 0) == 1 & 1;
       }
      }
     } while (0);
     i1 = HEAP32[i88 >> 2] | 0;
     if (!i1) {
      i4 = i11;
      i1 = 0;
      i8 = 0;
      i3 = 0;
      i86 = 88;
     } else {
      i1 = HEAP32[i1 + 8 >> 2] | 0;
      if (!i1) {
       i4 = i11;
       i1 = 0;
       i8 = 0;
       i3 = 0;
       i86 = 88;
      } else {
       i2 = HEAP32[i1 >> 2] | 0;
       if (!i2) {
        i4 = i11;
        i1 = 0;
        i8 = 0;
        i3 = 0;
        i86 = 88;
       } else {
        while (1) {
         if (!(_strcmp(i2, 352690) | 0)) break;
         i1 = i1 + 8 | 0;
         i2 = HEAP32[i1 >> 2] | 0;
         if (!i2) {
          i4 = i11;
          i1 = 0;
          i8 = 0;
          i3 = 0;
          i86 = 88;
          break L74;
         }
        }
        HEAP8[i2 >> 0] = 0;
        i1 = HEAP32[i1 + 4 >> 2] | 0;
        if (!i1) {
         i4 = i11;
         i1 = 0;
         i8 = 0;
         i3 = 0;
         i86 = 88;
        } else if (!(_FcStrCmp(i1, 352697) | 0)) {
         i1 = _FcConfigXdgConfigHome() | 0;
         if (!i1) break L4;
         i2 = _strlen(i1) | 0;
         i3 = _strlen(i10) | 0;
         i4 = i2 + 1 | 0;
         i7 = i4 + i3 | 0;
         i8 = _realloc(i1, i7 + 1 | 0) | 0;
         if (!i8) {
          _FcConfigMessage(i88, 2, 352676, i72);
          break;
         }
         HEAP8[i8 + i2 >> 0] = 47;
         _memcpy(i8 + i4 | 0, i10 | 0, i3 | 0) | 0;
         HEAP8[i8 + i7 >> 0] = 0;
         do if (!(_FcFileIsDir(i8) | 0)) {
          if (!(_FcFileIsFile(i8) | 0)) if (_FcStrStr(i8, 352906) | 0) break;
          i2 = HEAP32[91943] | 0;
          if (i2 | 0) {
           i4 = i11;
           i10 = i8;
           i1 = i8;
           i8 = i2;
           i3 = 0;
           i86 = 88;
           break L74;
          }
          while (1) {
           i2 = ___strdup(i8) | 0;
           i1 = HEAP32[91943] | 0;
           if (!i1) HEAP32[91943] = i2;
           if (!i1) {
            i4 = i11;
            i10 = i8;
            i1 = i8;
            i8 = i2;
            i3 = 0;
            i86 = 88;
            break L74;
           }
           _free(i2);
           i2 = HEAP32[91943] | 0;
           if (i2 | 0) {
            i4 = i11;
            i10 = i8;
            i1 = i8;
            i8 = i2;
            i3 = 0;
            i86 = 88;
            break L74;
           }
          }
         } while (0);
         i2 = HEAP32[91942] | 0;
         if (!i2) while (1) {
          i3 = ___strdup(i8) | 0;
          i1 = HEAP32[91942] | 0;
          if (!i1) HEAP32[91942] = i3;
          if (!i1) {
           i4 = i11;
           i10 = i8;
           i1 = i8;
           i8 = 0;
           i86 = 88;
           break L74;
          }
          _free(i3);
          i2 = HEAP32[91942] | 0;
          if (i2 | 0) {
           i4 = i11;
           i10 = i8;
           i1 = i8;
           i8 = 0;
           i3 = i2;
           i86 = 88;
           break;
          }
         } else {
          i4 = i11;
          i10 = i8;
          i1 = i8;
          i8 = 0;
          i3 = i2;
          i86 = 88;
         }
        } else {
         i4 = i11;
         i1 = 0;
         i8 = 0;
         i3 = 0;
         i86 = 88;
        }
       }
      }
     }
    }
   } while (0);
   if ((i86 | 0) == 88) {
    if (!(_FcConfigParseAndLoad(HEAP32[i88 + 16 >> 2] | 0, i10, i4) | 0)) HEAP32[i88 + 8 >> 2] = 1; else {
     i4 = _FcConfigFilename(i10) | 0;
     i7 = (i4 | 0) != 0;
     do if ((i3 | 0) != 0 & ((i9 | 0) == 1 & i7)) if (!(_FcFileIsLink(i4) | 0)) if (!(_FcFileIsDir(i4) | 0)) {
      i2 = _FcStrDirname(i8) | 0;
      if (!(_FcFileIsDir(i2) | 0)) _FcMakeDirectory(i2) | 0;
      _FcStrFree(i2);
      if (!(_FcFileIsFile(i8) | 0)) if (!(_rename(i4, i8) | 0)) {
       i85 = (_symlink(i8, i4) | 0) == 0;
       if (i85 | (HEAP32[91945] | 0) != 0) break;
      } else i86 = 105; else i86 = 105;
      if ((i86 | 0) == 105) if (HEAP32[91945] | 0) break;
      HEAP32[i80 >> 2] = i10;
      HEAP32[i80 + 4 >> 2] = i8;
      _FcConfigMessage(i88, 1, 352913, i80);
      HEAP32[91945] = 1;
      break;
     } else {
      i2 = _FcStrDirname(i3) | 0;
      if (!(_FcFileIsDir(i2) | 0)) _FcMakeDirectory(i2) | 0;
      _FcStrFree(i2);
      if (!(_FcFileIsDir(i3) | 0)) if (!(_rename(i4, i3) | 0)) {
       i85 = (_symlink(i3, i4) | 0) == 0;
       if (i85 | (HEAP32[91944] | 0) != 0) break;
      } else i86 = 98; else i86 = 98;
      if ((i86 | 0) == 98) if (HEAP32[91944] | 0) break;
      HEAP32[i79 >> 2] = i10;
      HEAP32[i79 + 4 >> 2] = i3;
      _FcConfigMessage(i88, 1, 352913, i79);
      HEAP32[91944] = 1;
      break;
     } while (0);
     if (i7) _FcStrFree(i4);
    }
    _FcStrBufDestroy((HEAP32[i88 >> 2] | 0) + 12 | 0);
    if (!i1) break L4;
   }
   _FcStrFree(i1);
   break;
  }
 case 50:
  {
   _FcParseUnary(i88, 38);
   break;
  }
 case 7:
  {
   i1 = HEAP32[i56 + 8 >> 2] | 0;
   L158 : do if (!i1) i8 = 0; else {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) i8 = 0; else {
     while (1) {
      if (!(_strcmp(i2, 352989) | 0)) break;
      i1 = i1 + 8 | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if (!i2) {
       i8 = 0;
       break L158;
      }
     }
     HEAP8[i2 >> 0] = 0;
     i1 = HEAP32[i1 + 4 >> 2] | 0;
     if (!i1) i8 = 0; else if (!(_strcmp(i1, 353018) | 0)) i8 = 0; else if (!(_strcmp(i1, 353026) | 0)) i8 = 1; else if (!(_strcmp(i1, 353031) | 0)) i8 = 2; else {
      HEAP32[i26 >> 2] = i1;
      _FcConfigMessage(i88, 1, 353036, i26);
      break L4;
     }
    }
   } while (0);
   i7 = i88 + 4 | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   if (i2 | 0) {
    L171 : do if ((i8 | 0) == 2) {
     i1 = 0;
     L172 : while (1) {
      if ((HEAP32[i2 + 4 >> 2] | 0) != (HEAP32[i88 >> 2] | 0)) break L171;
      i4 = i2 + 8 | 0;
      switch (HEAP32[i4 >> 2] | 0) {
      case 17:
       {
        i3 = HEAP32[i2 + 16 >> 2] | 0;
        i2 = _malloc(12) | 0;
        if (!i2) i2 = 0; else {
         HEAP32[i2 >> 2] = 0;
         HEAP32[i2 + 4 >> 2] = 1;
         HEAP32[i2 + 8 >> 2] = i3;
        }
        if (i1 | 0) HEAP32[i2 >> 2] = i1;
        HEAP32[i4 >> 2] = 0;
        i1 = i2;
        break;
       }
      case 19:
       {
        i3 = HEAP32[i2 + 16 >> 2] | 0;
        i2 = HEAP32[i3 >> 2] | 0;
        if ((i2 | 0) > 48) break L172;
        i2 = _malloc(12) | 0;
        if (!i2) i2 = 0; else {
         HEAP32[i2 >> 2] = 0;
         HEAP32[i2 + 4 >> 2] = 2;
         HEAP32[i2 + 8 >> 2] = i3;
        }
        if (i1 | 0) HEAP32[i2 >> 2] = i1;
        HEAP32[i4 >> 2] = 0;
        i1 = i2;
        break;
       }
      default:
       _FcConfigMessage(i88, 1, 352996, i61);
      }
      _FcVStackPopAndDestroy(i88);
      i2 = HEAP32[i7 >> 2] | 0;
      if (!i2) break L171;
     }
     i86 = _FcObjectName(i2) | 0;
     HEAP32[i62 >> 2] = i86;
     _FcConfigMessage(i88, 2, 353062, i62);
     if (!i1) break L4;
     while (1) {
      i2 = i1;
      i1 = HEAP32[i1 >> 2] | 0;
      switch (HEAP32[i2 + 4 >> 2] | 0) {
      case 1:
       {
        i86 = HEAP32[i2 + 8 >> 2] | 0;
        _FcExprDestroy(HEAP32[i86 + 16 >> 2] | 0);
        _free(i86);
        break;
       }
      case 2:
       {
        i3 = HEAP32[i2 + 8 >> 2] | 0;
        i4 = HEAP32[i3 + 8 >> 2] | 0;
        if (i4 | 0) _FcExprDestroy(i4);
        _free(i3);
        break;
       }
      default:
       {}
      }
      _free(i2);
      if (!i1) break L4;
     }
    } else {
     i1 = 0;
     while (1) {
      if ((HEAP32[i2 + 4 >> 2] | 0) != (HEAP32[i88 >> 2] | 0)) break L171;
      i4 = i2 + 8 | 0;
      switch (HEAP32[i4 >> 2] | 0) {
      case 17:
       {
        i3 = HEAP32[i2 + 16 >> 2] | 0;
        i2 = _malloc(12) | 0;
        if (!i2) i2 = 0; else {
         HEAP32[i2 >> 2] = 0;
         HEAP32[i2 + 4 >> 2] = 1;
         HEAP32[i2 + 8 >> 2] = i3;
        }
        if (i1 | 0) HEAP32[i2 >> 2] = i1;
        HEAP32[i4 >> 2] = 0;
        i1 = i2;
        break;
       }
      case 19:
       {
        i3 = HEAP32[i2 + 16 >> 2] | 0;
        i2 = _malloc(12) | 0;
        if (!i2) i2 = 0; else {
         HEAP32[i2 >> 2] = 0;
         HEAP32[i2 + 4 >> 2] = 2;
         HEAP32[i2 + 8 >> 2] = i3;
        }
        if (i1 | 0) HEAP32[i2 >> 2] = i1;
        HEAP32[i4 >> 2] = 0;
        i1 = i2;
        break;
       }
      default:
       _FcConfigMessage(i88, 1, 352996, i58);
      }
      _FcVStackPopAndDestroy(i88);
      i2 = HEAP32[i7 >> 2] | 0;
      if (!i2) break L171;
     }
    } while (0);
    if (i1 | 0) {
     if (_FcConfigAddRule(HEAP32[i88 + 16 >> 2] | 0, i1, i8) | 0) break L4;
     _FcConfigMessage(i88, 2, 352676, i70);
     break L4;
    }
   }
   _FcConfigMessage(i88, 1, 353121, i69);
   break;
  }
 case 8:
  {
   i1 = HEAP32[i56 + 8 >> 2] | 0;
   L228 : do if (!i1) i14 = 0; else {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) i14 = 0; else {
     while (1) {
      if (!(_strcmp(i2, 353162) | 0)) break;
      i1 = i1 + 8 | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if (!i2) {
       i14 = 0;
       break L228;
      }
     }
     HEAP8[i2 >> 0] = 0;
     i1 = HEAP32[i1 + 4 >> 2] | 0;
     if (!i1) i14 = 0; else if (!(_strcmp(i1, 353170) | 0)) i14 = 0; else if (!(_strcmp(i1, 353175) | 0)) i14 = 1; else if (!(_strcmp(i1, 353182) | 0)) i14 = 2; else {
      HEAP32[i27 >> 2] = i1;
      _FcConfigMessage(i88, 1, 353211, i27);
      break L4;
     }
    }
   } while (0);
   i11 = i88 + 4 | 0;
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) {
    _FcConfigMessage(i88, 2, 353187, i36);
    break L4;
   }
   i15 = i88 + 16 | 0;
   i1 = 0;
   i7 = 0;
   i10 = 0;
   i9 = 0;
   i2 = 0;
   while (1) {
    if ((HEAP32[i3 + 4 >> 2] | 0) != (HEAP32[i88 >> 2] | 0)) {
     i3 = i2;
     i12 = i7;
     i13 = i10;
     break;
    }
    i8 = i3 + 8 | 0;
    L245 : do switch (HEAP32[i8 >> 2] | 0) {
    case 2:
     {
      do if (!i2) {
       i2 = HEAP32[i3 + 16 >> 2] | 0;
       if (!i2) {
        i8 = i10;
        i2 = 0;
        break L245;
       }
      } else {
       _FcConfigMessage(i88, 1, 353232, i66);
       i3 = HEAP32[i3 + 16 >> 2] | 0;
       i4 = _FcConfigAllocExpr(HEAP32[i15 >> 2] | 0) | 0;
       if (!i4) {
        _FcConfigMessage(i88, 2, 352676, i67);
        i8 = i10;
        break L245;
       } else {
        HEAP32[i4 >> 2] = 36;
        i85 = i4 + 8 | 0;
        HEAP32[i85 >> 2] = i3;
        HEAP32[i85 + 4 >> 2] = i2;
        i2 = i4;
        break;
       }
      } while (0);
      HEAP32[i8 >> 2] = 0;
      i8 = i10;
      break;
     }
    case 7:
     {
      if (i9 | 0) _FcExprDestroy(i9);
      i9 = HEAP32[i3 + 16 >> 2] | 0;
      HEAP32[i8 >> 2] = 0;
      i8 = i10;
      break;
     }
    case 8:
     {
      if (i7 | 0) _FcExprDestroy(i7);
      i7 = HEAP32[i3 + 16 >> 2] | 0;
      HEAP32[i8 >> 2] = 0;
      i8 = i10;
      break;
     }
    case 9:
     {
      if (i10 | 0) _FcExprDestroy(i10);
      i85 = HEAP32[i3 + 16 >> 2] | 0;
      HEAP32[i8 >> 2] = 0;
      i8 = i85;
      break;
     }
    case 17:
     {
      i3 = HEAP32[i3 + 16 >> 2] | 0;
      i4 = _malloc(12) | 0;
      if (!i4) i4 = 0; else {
       HEAP32[i4 >> 2] = 0;
       HEAP32[i4 + 4 >> 2] = 1;
       HEAP32[i4 + 8 >> 2] = i3;
      }
      if (i1 | 0) HEAP32[i4 >> 2] = i1;
      HEAP32[i8 >> 2] = 0;
      i8 = i10;
      i1 = i4;
      break;
     }
    default:
     {
      _FcConfigMessage(i88, 1, 353313, i68);
      i8 = i10;
     }
    } while (0);
    _FcVStackPopAndDestroy(i88);
    i3 = HEAP32[i11 >> 2] | 0;
    if (!i3) {
     i3 = i2;
     i12 = i7;
     i13 = i8;
     break;
    } else i10 = i8;
   }
   i10 = (i12 | 0) != 0;
   if (!i3) {
    _FcConfigMessage(i88, 2, 353187, i76);
    if (!i9) {
     if (i10) i86 = 202;
    } else {
     _FcExprDestroy(i9);
     if (i10) i86 = 202;
    }
    if ((i86 | 0) == 202) _FcExprDestroy(i12);
    if (i13 | 0) _FcExprDestroy(i13);
    if (!i1) break L4;
    while (1) {
     i2 = i1;
     i1 = HEAP32[i1 >> 2] | 0;
     switch (HEAP32[i2 + 4 >> 2] | 0) {
     case 1:
      {
       i86 = HEAP32[i2 + 8 >> 2] | 0;
       _FcExprDestroy(HEAP32[i86 + 16 >> 2] | 0);
       _free(i86);
       break;
      }
     case 2:
      {
       i3 = HEAP32[i2 + 8 >> 2] | 0;
       i4 = HEAP32[i3 + 8 >> 2] | 0;
       if (i4 | 0) _FcExprDestroy(i4);
       _free(i3);
       break;
      }
     default:
      {}
     }
     _free(i2);
     if (!i1) break L4;
    }
   }
   i8 = (i9 | 0) != 0;
   i11 = (i13 | 0) != 0;
   if (!(i11 | (i8 | i10))) {
    _FcExprDestroy(i3);
    break L4;
   }
   i7 = _malloc(20) | 0;
   if (i7 | 0) {
    HEAP32[i7 >> 2] = 0;
    HEAP32[i7 + 4 >> 2] = 0;
    i2 = _FcObjectFromName(354977) | 0;
    HEAP32[i7 + 8 >> 2] = i2;
    HEAP32[i7 + 12 >> 2] = 65558;
    HEAP32[i7 + 16 >> 2] = i3;
    i2 = _FcNameGetObjectType(_FcObjectName(i2) | 0) | 0;
    if (i2 | 0) _FcTypecheckExpr(i88, i3, HEAP32[i2 + 4 >> 2] | 0);
   }
   if (!i1) {
    i1 = _malloc(12) | 0;
    if (!i1) {
     i3 = 0;
     i4 = 0;
    } else {
     HEAP32[i1 >> 2] = 0;
     HEAP32[i1 + 4 >> 2] = 1;
     HEAP32[i1 + 8 >> 2] = i7;
     i3 = i1;
     i4 = i1;
    }
   } else {
    i4 = i1;
    while (1) {
     i2 = HEAP32[i4 >> 2] | 0;
     if (!i2) break; else i4 = i2;
    }
    i3 = _malloc(12) | 0;
    if (!i3) i3 = 0; else {
     HEAP32[i3 >> 2] = 0;
     HEAP32[i3 + 4 >> 2] = 1;
     HEAP32[i3 + 8 >> 2] = i7;
    }
    HEAP32[i4 >> 2] = i3;
    i4 = i1;
   }
   do if (i8) {
    i2 = _malloc(16) | 0;
    if (!i2) {
     _FcExprDestroy(i9);
     break;
    }
    HEAP32[i2 >> 2] = 1;
    HEAP32[i2 + 4 >> 2] = 14;
    HEAP32[i2 + 8 >> 2] = i9;
    HEAP32[i2 + 12 >> 2] = i14;
    i1 = _FcNameGetObjectType(_FcObjectName(1) | 0) | 0;
    if (i1 | 0) _FcTypecheckExpr(i88, i9, HEAP32[i1 + 4 >> 2] | 0);
    i1 = _malloc(12) | 0;
    if (!i1) i1 = 0; else {
     HEAP32[i1 >> 2] = 0;
     HEAP32[i1 + 4 >> 2] = 2;
     HEAP32[i1 + 8 >> 2] = i2;
    }
    HEAP32[i3 >> 2] = i1;
    i3 = i1;
   } while (0);
   do if (i10) {
    i2 = _malloc(16) | 0;
    if (!i2) {
     _FcExprDestroy(i12);
     break;
    }
    HEAP32[i2 >> 2] = 1;
    HEAP32[i2 + 4 >> 2] = 15;
    HEAP32[i2 + 8 >> 2] = i12;
    HEAP32[i2 + 12 >> 2] = i14;
    i1 = _FcNameGetObjectType(_FcObjectName(1) | 0) | 0;
    if (i1 | 0) _FcTypecheckExpr(i88, i12, HEAP32[i1 + 4 >> 2] | 0);
    i1 = _malloc(12) | 0;
    if (!i1) i1 = 0; else {
     HEAP32[i1 >> 2] = 0;
     HEAP32[i1 + 4 >> 2] = 2;
     HEAP32[i1 + 8 >> 2] = i2;
    }
    HEAP32[i3 >> 2] = i1;
    i3 = i1;
   } while (0);
   do if (i11) {
    i2 = _malloc(16) | 0;
    if (!i2) {
     _FcExprDestroy(i13);
     break;
    }
    HEAP32[i2 >> 2] = 1;
    HEAP32[i2 + 4 >> 2] = 16;
    HEAP32[i2 + 8 >> 2] = i13;
    HEAP32[i2 + 12 >> 2] = i14;
    i1 = _FcNameGetObjectType(_FcObjectName(1) | 0) | 0;
    if (i1 | 0) _FcTypecheckExpr(i88, i13, HEAP32[i1 + 4 >> 2] | 0);
    i1 = _malloc(12) | 0;
    if (!i1) i1 = 0; else {
     HEAP32[i1 >> 2] = 0;
     HEAP32[i1 + 4 >> 2] = 2;
     HEAP32[i1 + 8 >> 2] = i2;
    }
    HEAP32[i3 >> 2] = i1;
   } while (0);
   if (!(_FcConfigAddRule(HEAP32[i15 >> 2] | 0, i4, 0) | 0)) {
    i1 = i4;
    while (1) {
     i2 = i1;
     i1 = HEAP32[i1 >> 2] | 0;
     switch (HEAP32[i2 + 4 >> 2] | 0) {
     case 1:
      {
       i86 = HEAP32[i2 + 8 >> 2] | 0;
       _FcExprDestroy(HEAP32[i86 + 16 >> 2] | 0);
       _free(i86);
       break;
      }
     case 2:
      {
       i3 = HEAP32[i2 + 8 >> 2] | 0;
       i4 = HEAP32[i3 + 8 >> 2] | 0;
       if (i4 | 0) _FcExprDestroy(i4);
       _free(i3);
       break;
      }
     default:
      {}
     }
     _free(i2);
     if (!i1) break L4;
    }
   }
   break;
  }
 case 9:
  {
   i9 = i88 + 4 | 0;
   i2 = HEAP32[i9 >> 2] | 0;
   if (i2 | 0) {
    i3 = i2;
    i1 = 0;
    do {
     if ((HEAP32[i3 + 4 >> 2] | 0) != (i56 | 0)) break;
     i1 = i1 + 1 | 0;
     i3 = HEAP32[i3 >> 2] | 0;
    } while ((i3 | 0) != 0);
    if ((i1 | 0) > 0) {
     i8 = i88 + 16 | 0;
     L365 : while (1) {
      i7 = i1 + -1 | 0;
      if ((i2 | 0) != 0 & (i1 | 0) != 1) {
       i3 = i7;
       while (1) {
        i2 = HEAP32[i2 >> 2] | 0;
        if ((i3 | 0) > 1 & (i2 | 0) != 0) i3 = i3 + -1 | 0; else break;
       }
      }
      i3 = HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0;
      if (!i3) {
       i3 = _FcBlanksCreate() | 0;
       HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = i3;
       i3 = HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0;
       if (!i3) break;
      }
      L374 : do switch (HEAP32[i2 + 8 >> 2] | 0) {
      case 10:
       {
        if (!(_FcBlanksAdd(i3, HEAP32[i2 + 16 >> 2] | 0) | 0)) break L365;
        break;
       }
      case 13:
       {
        i4 = HEAP32[i2 + 16 >> 2] | 0;
        i2 = ~~+HEAPF64[i4 >> 3] >>> 0;
        i4 = ~~+HEAPF64[i4 + 8 >> 3] >>> 0;
        if (i2 >>> 0 <= i4 >>> 0) {
         if (!(_FcBlanksAdd(i3, i2) | 0)) break L365;
         while (1) {
          i2 = i2 + 1 | 0;
          if (i2 >>> 0 > i4 >>> 0) break L374;
          if (!(_FcBlanksAdd(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0, i2) | 0)) break L365;
         }
        }
        break;
       }
      default:
       _FcConfigMessage(i88, 2, 353323, i59);
      } while (0);
      if ((i1 | 0) <= 1) break L4;
      i2 = HEAP32[i9 >> 2] | 0;
      i1 = i7;
     }
     _FcConfigMessage(i88, 2, 352676, i60);
    }
   }
   break;
  }
 case 10:
  {
   i8 = i88 + 4 | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   if (i1 | 0) {
    i3 = i1;
    i2 = 0;
    do {
     if ((HEAP32[i3 + 4 >> 2] | 0) != (i56 | 0)) break;
     i2 = i2 + 1 | 0;
     i3 = HEAP32[i3 >> 2] | 0;
    } while ((i3 | 0) != 0);
    if ((i2 | 0) > 0) {
     i7 = i88 + 16 | 0;
     while (1) {
      i4 = i2 + -1 | 0;
      if ((i1 | 0) != 0 & (i2 | 0) != 1) {
       i3 = i4;
       while (1) {
        i1 = HEAP32[i1 >> 2] | 0;
        if ((i3 | 0) > 1 & (i1 | 0) != 0) i3 = i3 + -1 | 0; else break;
       }
      }
      if ((HEAP32[i1 + 8 >> 2] | 0) == 10) HEAP32[(HEAP32[i7 >> 2] | 0) + 64 >> 2] = HEAP32[i1 + 16 >> 2]; else _FcConfigMessage(i88, 1, 353348, i47);
      if ((i2 | 0) <= 1) break L4;
      i1 = HEAP32[i8 >> 2] | 0;
      i2 = i4;
     }
    }
   }
   break;
  }
 case 11:
  {
   _FcParseFamilies(i88, 7);
   break;
  }
 case 12:
  {
   _FcParseFamilies(i88, 8);
   break;
  }
 case 13:
  {
   _FcParseFamilies(i88, 9);
   break;
  }
 case 14:
  {
   i1 = _FcStrBufDoneStatic(i56 + 12 | 0) | 0;
   if (!i1) {
    _FcConfigMessage(i88, 2, 352676, i14);
    break L4;
   }
   i7 = _FcConfigAllocExpr(HEAP32[i88 + 16 >> 2] | 0) | 0;
   if (!i7) {
    _FcStrBufDestroy((HEAP32[i88 >> 2] | 0) + 12 | 0);
    break L4;
   }
   HEAP32[i7 >> 2] = 2;
   i1 = ___strdup(i1) | 0;
   HEAP32[i7 + 8 >> 2] = i1;
   _FcStrBufDestroy((HEAP32[i88 >> 2] | 0) + 12 | 0);
   i1 = i88 + 1308 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < 64) {
    HEAP32[i1 >> 2] = i2 + 1;
    i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
   } else {
    i1 = _malloc(24) | 0;
    if (!i1) break L4;
   }
   i3 = i1 + 8 | 0;
   HEAP32[i3 >> 2] = 0;
   i4 = i88 + 4 | 0;
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   i2 = HEAP32[i88 >> 2] | 0;
   if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
   HEAP32[i1 + 4 >> 2] = i2;
   HEAP32[i4 >> 2] = i1;
   if (i1 | 0) {
    HEAP32[i1 + 16 >> 2] = i7;
    HEAP32[i3 >> 2] = 2;
   }
   break;
  }
 case 21:
  {
   i1 = HEAP32[i56 + 8 >> 2] | 0;
   L421 : do if (!i1) i11 = -1; else {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) i11 = -1; else {
     while (1) {
      if (!(_strcmp(i2, 352989) | 0)) break;
      i1 = i1 + 8 | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if (!i2) {
       i11 = -1;
       break L421;
      }
     }
     HEAP8[i2 >> 0] = 0;
     i1 = HEAP32[i1 + 4 >> 2] | 0;
     if (!i1) i11 = -1; else if (!(_strcmp(i1, 353018) | 0)) i11 = 0; else if (!(_strcmp(i1, 353026) | 0)) i11 = 1; else if (!(_strcmp(i1, 353031) | 0)) i11 = 2; else if (!(_strcmp(i1, 353367) | 0)) i11 = -1; else {
      HEAP32[i28 >> 2] = i1;
      _FcConfigMessage(i88, 1, 353375, i28);
      break L4;
     }
    }
   } while (0);
   i1 = HEAP32[i88 >> 2] | 0;
   L433 : do if (i1 | 0) {
    i1 = HEAP32[i1 + 8 >> 2] | 0;
    L435 : do if (!i1) i10 = 0; else {
     i2 = HEAP32[i1 >> 2] | 0;
     if (!i2) i10 = 0; else {
      while (1) {
       if (!(_strcmp(i2, 353400) | 0)) break;
       i1 = i1 + 8 | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (!i2) {
        i10 = 0;
        break L435;
       }
      }
      HEAP8[i2 >> 0] = 0;
      i1 = HEAP32[i1 + 4 >> 2] | 0;
      if (!i1) i10 = 0; else if (!(_strcmp(i1, 353405) | 0)) i10 = 0; else if (!(_strcmp(i1, 353409) | 0)) i10 = 1; else if (!(_strcmp(i1, 353413) | 0)) i10 = 2; else if (!(_strcmp(i1, 353419) | 0)) i10 = 3; else {
       HEAP32[i52 >> 2] = i1;
       _FcConfigMessage(i88, 1, 353429, i52);
       break L4;
      }
     }
    } while (0);
    i1 = HEAP32[i88 >> 2] | 0;
    if (i1 | 0) {
     i1 = HEAP32[i1 + 8 >> 2] | 0;
     if (i1 | 0) {
      i2 = HEAP32[i1 >> 2] | 0;
      if (i2 | 0) {
       while (1) {
        if (!(_strcmp(i2, 353452) | 0)) break;
        i1 = i1 + 8 | 0;
        i2 = HEAP32[i1 >> 2] | 0;
        if (!i2) break L433;
       }
       HEAP8[i2 >> 0] = 0;
       i9 = HEAP32[i1 + 4 >> 2] | 0;
       if (i9 | 0) {
        i1 = HEAP32[i88 >> 2] | 0;
        L454 : do if (!i1) {
         i2 = 22;
         i8 = 0;
        } else {
         i1 = HEAP32[i1 + 8 >> 2] | 0;
         L456 : do if (!i1) i2 = 22; else {
          i2 = HEAP32[i1 >> 2] | 0;
          if (!i2) i2 = 22; else {
           while (1) {
            if (!(_strcmp(i2, 353475) | 0)) break;
            i1 = i1 + 8 | 0;
            i2 = HEAP32[i1 >> 2] | 0;
            if (!i2) {
             i2 = 22;
             break L456;
            }
           }
           HEAP8[i2 >> 0] = 0;
           i1 = HEAP32[i1 + 4 >> 2] | 0;
           if (!i1) i2 = 22; else {
            i2 = _FcConfigLexOp(i1, 71168) | 0;
            if ((i2 | 0) == 41) {
             HEAP32[i75 >> 2] = i1;
             _FcConfigMessage(i88, 1, 353483, i75);
             break L4;
            }
           }
          }
         } while (0);
         i1 = HEAP32[i88 >> 2] | 0;
         if (!i1) i8 = 0; else {
          i1 = HEAP32[i1 + 8 >> 2] | 0;
          if (!i1) i8 = 0; else {
           i3 = HEAP32[i1 >> 2] | 0;
           if (!i3) i8 = 0; else {
            while (1) {
             if (!(_strcmp(i3, 353509) | 0)) break;
             i1 = i1 + 8 | 0;
             i3 = HEAP32[i1 >> 2] | 0;
             if (!i3) {
              i8 = 0;
              break L454;
             }
            }
            HEAP8[i3 >> 0] = 0;
            i1 = HEAP32[i1 + 4 >> 2] | 0;
            if (!i1) i8 = 0; else {
             HEAP32[i85 >> 2] = 0;
             if (!(_FcNameBool(i1, i85) | 0)) {
              HEAP32[i78 >> 2] = i1;
              _FcConfigMessage(i88, 1, 353523, i78);
             }
             i8 = (HEAP32[i85 >> 2] | 0) == 0 ? 0 : 65536;
            }
           }
          }
         }
        } while (0);
        i1 = _FcPopExpr(i88) | 0;
        do if (i1 | 0) {
         i7 = i88 + 16 | 0;
         i4 = 0;
         while (1) {
          if (!i4) i3 = i1; else {
           i3 = _FcConfigAllocExpr(HEAP32[i7 >> 2] | 0) | 0;
           if (!i3) {
            i86 = 351;
            break;
           }
           HEAP32[i3 >> 2] = 36;
           i85 = i3 + 8 | 0;
           HEAP32[i85 >> 2] = i1;
           HEAP32[i85 + 4 >> 2] = i4;
          }
          i1 = _FcPopExpr(i88) | 0;
          if (!i1) break; else i4 = i3;
         }
         if ((i86 | 0) == 351) {
          _FcConfigMessage(i88, 2, 352676, i81);
          _FcExprDestroy(i1);
          _FcExprDestroy(i4);
          break;
         }
         if ((HEAP32[i3 >> 2] | 0) == 36) _FcConfigMessage(i88, 1, 353579, i83);
         i7 = _malloc(20) | 0;
         if (!i7) {
          _FcConfigMessage(i88, 2, 352676, i84);
          break L4;
         }
         HEAP32[i7 >> 2] = i11;
         HEAP32[i7 + 4 >> 2] = i10;
         i1 = _FcObjectFromName(i9) | 0;
         HEAP32[i7 + 8 >> 2] = i1;
         HEAP32[i7 + 12 >> 2] = i2 & 65535 | i8;
         HEAP32[i7 + 16 >> 2] = i3;
         i1 = _FcNameGetObjectType(_FcObjectName(i1) | 0) | 0;
         if (i1 | 0) _FcTypecheckExpr(i88, i3, HEAP32[i1 + 4 >> 2] | 0);
         i1 = i88 + 1308 | 0;
         i2 = HEAP32[i1 >> 2] | 0;
         if (i2 >>> 0 < 64) {
          HEAP32[i1 >> 2] = i2 + 1;
          i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
         } else {
          i1 = _malloc(24) | 0;
          if (!i1) break L4;
         }
         i3 = i1 + 8 | 0;
         HEAP32[i3 >> 2] = 0;
         i4 = i88 + 4 | 0;
         HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
         i2 = HEAP32[i88 >> 2] | 0;
         if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
         HEAP32[i1 + 4 >> 2] = i2;
         HEAP32[i4 >> 2] = i1;
         if (!i1) break L4;
         HEAP32[i1 + 16 >> 2] = i7;
         HEAP32[i3 >> 2] = 17;
         break L4;
        } while (0);
        _FcConfigMessage(i88, 1, 353555, i82);
        break L4;
       }
      }
     }
    }
   } while (0);
   _FcConfigMessage(i88, 1, 353457, i64);
   break;
  }
 case 22:
  {
   i1 = HEAP32[i56 + 8 >> 2] | 0;
   L507 : do if (i1 | 0) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2 | 0) {
     while (1) {
      if (!(_strcmp(i2, 353452) | 0)) break;
      i1 = i1 + 8 | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if (!i2) break L507;
     }
     HEAP8[i2 >> 0] = 0;
     i8 = HEAP32[i1 + 4 >> 2] | 0;
     if (i8 | 0) {
      i1 = HEAP32[i88 >> 2] | 0;
      L514 : do if (!i1) {
       i9 = 0;
       i2 = 11;
      } else {
       i1 = HEAP32[i1 + 8 >> 2] | 0;
       L516 : do if (!i1) i2 = 11; else {
        i2 = HEAP32[i1 >> 2] | 0;
        if (!i2) i2 = 11; else {
         while (1) {
          if (!(_strcmp(i2, 353675) | 0)) break;
          i1 = i1 + 8 | 0;
          i2 = HEAP32[i1 >> 2] | 0;
          if (!i2) {
           i2 = 11;
           break L516;
          }
         }
         HEAP8[i2 >> 0] = 0;
         i1 = HEAP32[i1 + 4 >> 2] | 0;
         if (!i1) i2 = 11; else {
          i2 = _FcConfigLexOp(i1, 71328) | 0;
          if ((i2 | 0) == 41) {
           HEAP32[i53 >> 2] = i1;
           _FcConfigMessage(i88, 1, 353680, i53);
           break L4;
          }
         }
        }
       } while (0);
       i1 = HEAP32[i88 >> 2] | 0;
       if (!i1) i9 = 0; else {
        i1 = HEAP32[i1 + 8 >> 2] | 0;
        if (!i1) i9 = 0; else {
         i3 = HEAP32[i1 >> 2] | 0;
         if (!i3) i9 = 0; else {
          while (1) {
           if (!(_strcmp(i3, 353162) | 0)) break;
           i1 = i1 + 8 | 0;
           i3 = HEAP32[i1 >> 2] | 0;
           if (!i3) {
            i9 = 0;
            break L514;
           }
          }
          HEAP8[i3 >> 0] = 0;
          i1 = HEAP32[i1 + 4 >> 2] | 0;
          if (!i1) i9 = 0; else if (!(_strcmp(i1, 353170) | 0)) i9 = 0; else if (!(_strcmp(i1, 353175) | 0)) i9 = 1; else if (!(_strcmp(i1, 353182) | 0)) i9 = 2; else {
           HEAP32[i65 >> 2] = i1;
           _FcConfigMessage(i88, 1, 353211, i65);
           break L4;
          }
         }
        }
       }
      } while (0);
      i3 = _FcPopExpr(i88) | 0;
      do if (!i3) i3 = 0; else {
       i7 = i88 + 16 | 0;
       i1 = 0;
       do {
        if (!i1) i1 = i3; else {
         i4 = _FcConfigAllocExpr(HEAP32[i7 >> 2] | 0) | 0;
         if (!i4) {
          i86 = 396;
          break;
         }
         HEAP32[i4 >> 2] = 36;
         i85 = i4 + 8 | 0;
         HEAP32[i85 >> 2] = i3;
         HEAP32[i85 + 4 >> 2] = i1;
         i1 = i4;
        }
        i3 = _FcPopExpr(i88) | 0;
       } while ((i3 | 0) != 0);
       if ((i86 | 0) == 396) {
        _FcConfigMessage(i88, 2, 352676, i73);
        _FcExprDestroy(i3);
        _FcExprDestroy(i1);
        i3 = 0;
        break;
       }
       if ((i2 + -17 | 0) >>> 0 < 2) {
        _FcConfigMessage(i88, 1, 353703, i74);
        _FcExprDestroy(i1);
        i3 = 0;
       } else i3 = i1;
      } while (0);
      i1 = _FcObjectFromName(i8) | 0;
      i8 = _malloc(16) | 0;
      if (!i8) {
       _FcConfigMessage(i88, 2, 352676, i77);
       _FcExprDestroy(i3);
       break L4;
      }
      HEAP32[i8 >> 2] = i1;
      HEAP32[i8 + 4 >> 2] = i2;
      i7 = i8 + 8 | 0;
      HEAP32[i7 >> 2] = i3;
      HEAP32[i8 + 12 >> 2] = i9;
      i1 = _FcNameGetObjectType(_FcObjectName(i1) | 0) | 0;
      if (i1 | 0) _FcTypecheckExpr(i88, i3, HEAP32[i1 + 4 >> 2] | 0);
      i1 = i88 + 1308 | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if (i2 >>> 0 < 64) {
       HEAP32[i1 >> 2] = i2 + 1;
       i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
       i86 = 406;
      } else {
       i1 = _malloc(24) | 0;
       if (i1 | 0) i86 = 406;
      }
      if ((i86 | 0) == 406) {
       i3 = i1 + 8 | 0;
       HEAP32[i3 >> 2] = 0;
       i4 = i88 + 4 | 0;
       HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
       i2 = HEAP32[i88 >> 2] | 0;
       if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
       HEAP32[i1 + 4 >> 2] = i2;
       HEAP32[i4 >> 2] = i1;
       if (i1 | 0) {
        HEAP32[i1 + 16 >> 2] = i8;
        HEAP32[i3 >> 2] = 19;
        break L4;
       }
      }
      i1 = HEAP32[i7 >> 2] | 0;
      if (i1 | 0) _FcExprDestroy(i1);
      _free(i8);
      break L4;
     }
    }
   } while (0);
   _FcConfigMessage(i88, 1, 353657, i29);
   break;
  }
 case 23:
  {
   i1 = _FcStrBufDoneStatic(i56 + 12 | 0) | 0;
   if (!i1) _FcConfigMessage(i88, 2, 352676, i2); else {
    HEAP32[i85 >> 2] = 0;
    i7 = _strtol(i1, i85, 0) | 0;
    i86 = HEAP32[i85 >> 2] | 0;
    do if ((i86 | 0) == (i1 + (_strlen(i1) | 0) | 0)) {
     i1 = i88 + 1308 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     if (i2 >>> 0 < 64) {
      HEAP32[i1 >> 2] = i2 + 1;
      i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
     } else {
      i1 = _malloc(24) | 0;
      if (!i1) break;
     }
     i3 = i1 + 8 | 0;
     HEAP32[i3 >> 2] = 0;
     i4 = i88 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
     i2 = HEAP32[i88 >> 2] | 0;
     if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 + 4 >> 2] = i2;
     HEAP32[i4 >> 2] = i1;
     if (i1 | 0) {
      HEAP32[i1 + 16 >> 2] = i7;
      HEAP32[i3 >> 2] = 10;
     }
    } else {
     HEAP32[i15 >> 2] = i1;
     _FcConfigMessage(i88, 2, 353765, i15);
    } while (0);
    _FcStrBufDestroy((HEAP32[i88 >> 2] | 0) + 12 | 0);
   }
   break;
  }
 case 24:
  {
   i4 = _FcStrBufDoneStatic(i56 + 12 | 0) | 0;
   if (!i4) _FcConfigMessage(i88, 2, 352676, i3); else {
    HEAP32[i63 >> 2] = 0;
    i3 = _strchr(i4, 46) | 0;
    do if (!i3) i86 = 438; else {
     i2 = _localeconv() | 0;
     if (!i2) i86 = 438; else {
      i1 = HEAP32[i2 >> 2] | 0;
      if ((HEAP8[i1 >> 0] | 0) == 46) if (!(HEAP8[i1 + 1 >> 0] | 0)) {
       i86 = 438;
       break;
      }
      i84 = _strlen(i4) | 0;
      i1 = _strlen(i1) | 0;
      if ((i1 + i84 | 0) > 128) {
       HEAP32[i63 >> 2] = i4;
       d5 = 0.0;
       i1 = i4;
      } else {
       i84 = i3 - i4 | 0;
       _strncpy(i85, i4, i84) | 0;
       i84 = i85 + i84 | 0;
       _strcpy(i84, HEAP32[i2 >> 2] | 0) | 0;
       _strcpy(i84 + i1 | 0, i3 + 1 | 0) | 0;
       HEAP32[i71 >> 2] = 0;
       d5 = +_strtod(i85, i71);
       i84 = HEAP32[i71 >> 2] | 0;
       i2 = i84;
       i85 = i4 + (i2 - i85) | 0;
       i1 = i85 >>> 0 > i3 >>> 0 ? i85 + (1 - i1) | 0 : i85;
       if (!i84) i1 = i2; else HEAP32[i71 >> 2] = i1;
       HEAP32[i63 >> 2] = i1;
      }
     }
    } while (0);
    if ((i86 | 0) == 438) {
     d5 = +_strtod(i4, i63);
     i1 = HEAP32[i63 >> 2] | 0;
    }
    do if ((i1 | 0) == (i4 + (_strlen(i4) | 0) | 0)) {
     i1 = i88 + 1308 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     if (i2 >>> 0 < 64) {
      HEAP32[i1 >> 2] = i2 + 1;
      i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
     } else {
      i1 = _malloc(24) | 0;
      if (!i1) break;
     }
     i3 = i1 + 8 | 0;
     HEAP32[i3 >> 2] = 0;
     i4 = i88 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
     i2 = HEAP32[i88 >> 2] | 0;
     if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 + 4 >> 2] = i2;
     HEAP32[i4 >> 2] = i1;
     if (i1 | 0) {
      HEAPF64[i1 + 16 >> 3] = d5;
      HEAP32[i3 >> 2] = 11;
     }
    } else {
     HEAP32[i42 >> 2] = i4;
     _FcConfigMessage(i88, 2, 353791, i42);
    } while (0);
    _FcStrBufDestroy((HEAP32[i88 >> 2] | 0) + 12 | 0);
   }
   break;
  }
 case 25:
  {
   i7 = _FcStrBufDone(i56 + 12 | 0) | 0;
   if (!i7) {
    _FcConfigMessage(i88, 2, 352676, i4);
    break L4;
   }
   i1 = i88 + 1308 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < 64) {
    HEAP32[i1 >> 2] = i2 + 1;
    i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
    i86 = 455;
   } else {
    i1 = _malloc(24) | 0;
    if (i1 | 0) i86 = 455;
   }
   if ((i86 | 0) == 455) {
    i3 = i1 + 8 | 0;
    HEAP32[i3 >> 2] = 0;
    i4 = i88 + 4 | 0;
    HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
    i2 = HEAP32[i88 >> 2] | 0;
    if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 + 4 >> 2] = i2;
    HEAP32[i4 >> 2] = i1;
    if (i1 | 0) {
     HEAP32[i1 + 16 >> 2] = i7;
     HEAP32[i3 >> 2] = 1;
     break L4;
    }
   }
   _FcStrFree(i7);
   break;
  }
 case 26:
  {
   i7 = _FcPopExpr(i88) | 0;
   i8 = _FcPopExpr(i88) | 0;
   i9 = _FcPopExpr(i88) | 0;
   i10 = _FcPopExpr(i88) | 0;
   if (_FcPopExpr(i88) | 0) {
    _FcConfigMessage(i88, 2, 353816, i17);
    break L4;
   }
   i1 = i88 + 1308 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < 64) {
    HEAP32[i1 >> 2] = i2 + 1;
    i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
   } else {
    i1 = _malloc(24) | 0;
    if (!i1) break L4;
   }
   i4 = i1 + 8 | 0;
   HEAP32[i4 >> 2] = 0;
   i3 = i88 + 4 | 0;
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   i2 = HEAP32[i88 >> 2] | 0;
   if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
   HEAP32[i1 + 4 >> 2] = i2;
   HEAP32[i3 >> 2] = i1;
   if (i1 | 0) {
    i2 = _malloc(16) | 0;
    if (i2 | 0) {
     HEAP32[i2 >> 2] = i10;
     HEAP32[i2 + 4 >> 2] = i9;
     HEAP32[i2 + 8 >> 2] = i8;
     HEAP32[i2 + 12 >> 2] = i7;
    }
    HEAP32[i1 + 16 >> 2] = i2;
    HEAP32[i4 >> 2] = 12;
   }
   break;
  }
 case 27:
  {
   i8 = i85;
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i71 >> 2] = 0;
   HEAP32[i71 + 4 >> 2] = 0;
   HEAP32[i71 + 8 >> 2] = 0;
   HEAP32[i71 + 12 >> 2] = 0;
   i8 = i88 + 4 | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   L649 : do if (!i1) i86 = 489; else {
    i4 = i85 + 4 | 0;
    i7 = i71 + 8 | 0;
    do if ((HEAP32[i1 + 4 >> 2] | 0) == (i56 | 0)) {
     i3 = 1;
     i2 = 0;
     while (1) {
      if ((i3 | 0) < 0) {
       i86 = 474;
       break;
      }
      L655 : do switch (HEAP32[i1 + 8 >> 2] | 0) {
      case 10:
       {
        i1 = HEAP32[i1 + 16 >> 2] | 0;
        if (!i2) {
         HEAP32[i85 + (i3 << 2) >> 2] = i1;
         i2 = 0;
         break L655;
        } else {
         HEAPF64[i71 + (i3 << 3) >> 3] = +(i1 | 0);
         break L655;
        }
       }
      case 11:
       {
        if (!(i3 | i2)) HEAPF64[i7 >> 3] = +((HEAP32[i4 >> 2] | 0) >>> 0);
        HEAPF64[i71 + (i3 << 3) >> 3] = +HEAPF64[i1 + 16 >> 3];
        i2 = 1;
        break;
       }
      default:
       {
        _FcConfigMessage(i88, 2, 353875, i31);
        if (!i2) {
         HEAP32[i85 + (i3 << 2) >> 2] = 0;
         i2 = 0;
         break L655;
        } else {
         HEAPF64[i71 + (i3 << 3) >> 3] = 0.0;
         break L655;
        }
       }
      } while (0);
      _FcVStackPopAndDestroy(i88);
      i1 = HEAP32[i8 >> 2] | 0;
      if (!i1) {
       i86 = 487;
       break;
      }
      if ((HEAP32[i1 + 4 >> 2] | 0) != (HEAP32[i88 >> 2] | 0)) {
       i86 = 487;
       break;
      } else i3 = i3 + -1 | 0;
     }
     if ((i86 | 0) == 474) {
      _FcConfigMessage(i88, 2, 353848, i30);
      break L649;
     } else if ((i86 | 0) == 487) {
      i1 = (i3 | 0) > 0;
      break;
     }
    } else {
     i2 = 0;
     i1 = 1;
    } while (0);
    if (i1) i86 = 489; else {
     do if (!i2) {
      i2 = HEAP32[i85 >> 2] | 0;
      i1 = HEAP32[i4 >> 2] | 0;
      if (i2 >>> 0 > i1 >>> 0) {
       _FcConfigMessage(i88, 2, 353900, i44);
       break L649;
      } else {
       i4 = _FcRangeCreateInteger(i2, i1) | 0;
       break;
      }
     } else {
      d6 = +HEAPF64[i71 >> 3];
      d5 = +HEAPF64[i7 >> 3];
      if (d6 > d5) {
       _FcConfigMessage(i88, 2, 353900, i43);
       break L649;
      } else {
       i4 = _FcRangeCreateDouble(d6, d5) | 0;
       break;
      }
     } while (0);
     i2 = i88 + 1308 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (i1 >>> 0 < 64) {
      HEAP32[i2 >> 2] = i1 + 1;
      i1 = i88 + 1312 + (i1 * 24 | 0) | 0;
     } else {
      i1 = _malloc(24) | 0;
      if (!i1) break;
     }
     i3 = i1 + 8 | 0;
     HEAP32[i3 >> 2] = 0;
     HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
     i2 = HEAP32[i88 >> 2] | 0;
     if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 + 4 >> 2] = i2;
     HEAP32[i8 >> 2] = i1;
     if (i1 | 0) {
      HEAP32[i1 + 16 >> 2] = i4;
      HEAP32[i3 >> 2] = 13;
     }
    }
   } while (0);
   if ((i86 | 0) == 489) _FcConfigMessage(i88, 2, 353900, i38);
   break;
  }
 case 28:
  {
   i1 = _FcStrBufDoneStatic(i56 + 12 | 0) | 0;
   if (!i1) {
    _FcConfigMessage(i88, 2, 352676, i7);
    break L4;
   }
   HEAP32[i85 >> 2] = 0;
   if (!(_FcNameBool(i1, i85) | 0)) {
    HEAP32[i8 >> 2] = i1;
    _FcConfigMessage(i88, 1, 352869, i8);
   }
   i7 = HEAP32[i85 >> 2] | 0;
   i1 = i88 + 1308 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < 64) {
    HEAP32[i1 >> 2] = i2 + 1;
    i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
    i86 = 512;
   } else {
    i1 = _malloc(24) | 0;
    if (i1 | 0) i86 = 512;
   }
   if ((i86 | 0) == 512) {
    i3 = i1 + 8 | 0;
    HEAP32[i3 >> 2] = 0;
    i4 = i88 + 4 | 0;
    HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
    i2 = HEAP32[i88 >> 2] | 0;
    if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 + 4 >> 2] = i2;
    HEAP32[i4 >> 2] = i1;
    if (i1 | 0) {
     HEAP32[i1 + 16 >> 2] = i7;
     HEAP32[i3 >> 2] = 14;
    }
   }
   _FcStrBufDestroy((HEAP32[i88 >> 2] | 0) + 12 | 0);
   break;
  }
 case 29:
  {
   i4 = _FcCharSetCreate() | 0;
   i7 = i88 + 4 | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   if (i2 | 0) {
    i1 = 0;
    do {
     if ((HEAP32[i2 + 4 >> 2] | 0) != (HEAP32[i88 >> 2] | 0)) break;
     L718 : do switch (HEAP32[i2 + 8 >> 2] | 0) {
     case 10:
      {
       i2 = i2 + 16 | 0;
       if (!(_FcCharSetAddChar(i4, HEAP32[i2 >> 2] | 0) | 0)) {
        HEAP32[i39 >> 2] = HEAP32[i2 >> 2];
        _FcConfigMessage(i88, 1, 353914, i39);
        break L718;
       } else {
        i1 = i1 + 1 | 0;
        break L718;
       }
      }
     case 13:
      {
       i3 = HEAP32[i2 + 16 >> 2] | 0;
       i2 = ~~+HEAPF64[i3 >> 3] >>> 0;
       i3 = ~~+HEAPF64[i3 + 8 >> 3] >>> 0;
       if (i2 >>> 0 <= i3 >>> 0) do {
        if (!(_FcCharSetAddChar(i4, i2) | 0)) {
         HEAP32[i40 >> 2] = i2;
         _FcConfigMessage(i88, 1, 353914, i40);
        } else i1 = i1 + 1 | 0;
        i2 = i2 + 1 | 0;
       } while (i2 >>> 0 <= i3 >>> 0);
       break;
      }
     default:
      _FcConfigMessage(i88, 2, 353940, i41);
     } while (0);
     _FcVStackPopAndDestroy(i88);
     i2 = HEAP32[i7 >> 2] | 0;
    } while ((i2 | 0) != 0);
    if ((i1 | 0) > 0) {
     if (!i4) break L4;
     i1 = i88 + 1308 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     if (i2 >>> 0 < 64) {
      HEAP32[i1 >> 2] = i2 + 1;
      i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
     } else {
      i1 = _malloc(24) | 0;
      if (!i1) break L4;
     }
     i3 = i1 + 8 | 0;
     HEAP32[i3 >> 2] = 0;
     HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
     i2 = HEAP32[i88 >> 2] | 0;
     if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 + 4 >> 2] = i2;
     HEAP32[i7 >> 2] = i1;
     if (!i1) break L4;
     HEAP32[i1 + 16 >> 2] = i4;
     HEAP32[i3 >> 2] = 15;
     break L4;
    }
   }
   _FcCharSetDestroy(i4);
   break;
  }
 case 30:
  {
   i4 = _FcLangSetCreate() | 0;
   i7 = i88 + 4 | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   if (i2 | 0) {
    i1 = 0;
    do {
     if ((HEAP32[i2 + 4 >> 2] | 0) != (HEAP32[i88 >> 2] | 0)) break;
     do if ((HEAP32[i2 + 8 >> 2] | 0) == 1) {
      i2 = i2 + 16 | 0;
      if (!(_FcLangSetAdd(i4, HEAP32[i2 >> 2] | 0) | 0)) {
       HEAP32[i23 >> 2] = HEAP32[i2 >> 2];
       _FcConfigMessage(i88, 1, 353967, i23);
       break;
      } else {
       i1 = i1 + 1 | 0;
       break;
      }
     } else _FcConfigMessage(i88, 2, 353987, i24); while (0);
     _FcVStackPopAndDestroy(i88);
     i2 = HEAP32[i7 >> 2] | 0;
    } while ((i2 | 0) != 0);
    if ((i1 | 0) > 0) {
     if (!i4) break L4;
     i1 = i88 + 1308 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     if (i2 >>> 0 < 64) {
      HEAP32[i1 >> 2] = i2 + 1;
      i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
     } else {
      i1 = _malloc(24) | 0;
      if (!i1) break L4;
     }
     i3 = i1 + 8 | 0;
     HEAP32[i3 >> 2] = 0;
     HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
     i2 = HEAP32[i88 >> 2] | 0;
     if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 + 4 >> 2] = i2;
     HEAP32[i7 >> 2] = i1;
     if (!i1) break L4;
     HEAP32[i1 + 16 >> 2] = i4;
     HEAP32[i3 >> 2] = 16;
     break L4;
    }
   }
   _FcLangSetDestroy(i4);
   break;
  }
 case 49:
  {
   _FcParseUnary(i88, 37);
   break;
  }
 case 17:
 case 16:
  {
   i4 = i88 + 4 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 | 0) {
    i7 = i88 + 16 | 0;
    i3 = (i16 | 0) == 16 & 1;
    if ((HEAP32[i2 + 4 >> 2] | 0) == (i56 | 0)) while (1) {
     i1 = i2 + 8 | 0;
     L773 : do switch (HEAP32[i1 >> 2] | 0) {
     case 4:
      {
       if (!(_FcConfigGlobAdd(HEAP32[i7 >> 2] | 0, HEAP32[i2 + 16 >> 2] | 0, i3) | 0)) _FcConfigMessage(i88, 2, 352676, i20);
       break;
      }
     case 6:
      if (!(_FcConfigPatternsAdd(HEAP32[i7 >> 2] | 0, HEAP32[i2 + 16 >> 2] | 0, i3) | 0)) {
       _FcConfigMessage(i88, 2, 352676, i21);
       break L773;
      } else {
       HEAP32[i1 >> 2] = 0;
       break L773;
      }
     default:
      _FcConfigMessage(i88, 1, 354014, i22);
     } while (0);
     _FcVStackPopAndDestroy(i88);
     i2 = HEAP32[i4 >> 2] | 0;
     if (!i2) break L4;
     if ((HEAP32[i2 + 4 >> 2] | 0) != (HEAP32[i88 >> 2] | 0)) break L4;
    }
   }
   break;
  }
 case 18:
  {
   i7 = _FcStrBufDone(i56 + 12 | 0) | 0;
   if (!i7) {
    _FcConfigMessage(i88, 2, 352676, i9);
    break L4;
   }
   i1 = i88 + 1308 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < 64) {
    HEAP32[i1 >> 2] = i2 + 1;
    i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
    i86 = 574;
   } else {
    i1 = _malloc(24) | 0;
    if (i1 | 0) i86 = 574;
   }
   if ((i86 | 0) == 574) {
    i3 = i1 + 8 | 0;
    HEAP32[i3 >> 2] = 0;
    i4 = i88 + 4 | 0;
    HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
    i2 = HEAP32[i88 >> 2] | 0;
    if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 + 4 >> 2] = i2;
    HEAP32[i4 >> 2] = i1;
    if (i1 | 0) {
     HEAP32[i1 + 16 >> 2] = i7;
     HEAP32[i3 >> 2] = 4;
     break L4;
    }
   }
   _FcStrFree(i7);
   break;
  }
 case 19:
  {
   i7 = _FcPatternCreate() | 0;
   if (!i7) {
    _FcConfigMessage(i88, 2, 352676, i10);
    break L4;
   }
   i4 = i88 + 4 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   L801 : do if (i1 | 0) {
    while (1) {
     if ((HEAP32[i1 + 4 >> 2] | 0) != (HEAP32[i88 >> 2] | 0)) break L801;
     if ((HEAP32[i1 + 8 >> 2] | 0) == 6) {
      if (!(_FcPatternAppend(i7, HEAP32[i1 + 16 >> 2] | 0) | 0)) break;
     } else _FcConfigMessage(i88, 1, 354032, i19);
     _FcVStackPopAndDestroy(i88);
     i1 = HEAP32[i4 >> 2] | 0;
     if (!i1) break L801;
    }
    _FcConfigMessage(i88, 2, 352676, i18);
    _FcPatternDestroy(i7);
    break L4;
   } while (0);
   i1 = i88 + 1308 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < 64) {
    HEAP32[i1 >> 2] = i2 + 1;
    i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
   } else {
    i1 = _malloc(24) | 0;
    if (!i1) break L4;
   }
   i3 = i1 + 8 | 0;
   HEAP32[i3 >> 2] = 0;
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   i2 = HEAP32[i88 >> 2] | 0;
   if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
   HEAP32[i1 + 4 >> 2] = i2;
   HEAP32[i4 >> 2] = i1;
   if (i1 | 0) {
    HEAP32[i1 + 16 >> 2] = i7;
    HEAP32[i3 >> 2] = 6;
   }
   break;
  }
 case 20:
  {
   i9 = _FcPatternCreate() | 0;
   L820 : do if (!i9) _FcConfigMessage(i88, 2, 352676, i11); else {
    i1 = HEAP32[i88 >> 2] | 0;
    L823 : do if (i1 | 0) {
     i1 = HEAP32[i1 + 8 >> 2] | 0;
     if (i1 | 0) {
      i2 = HEAP32[i1 >> 2] | 0;
      if (i2 | 0) {
       while (1) {
        if (!(_strcmp(i2, 353452) | 0)) break;
        i1 = i1 + 8 | 0;
        i2 = HEAP32[i1 >> 2] | 0;
        if (!i2) break L823;
       }
       HEAP8[i2 >> 0] = 0;
       i7 = HEAP32[i1 + 4 >> 2] | 0;
       if (i7 | 0) {
        i8 = i88 + 4 | 0;
        i1 = i85 + 8 | 0;
        i2 = i85 + 8 | 0;
        while (1) {
         i3 = HEAP32[i8 >> 2] | 0;
         if (!i3) i86 = 607; else if ((HEAP32[i3 + 4 >> 2] | 0) == (HEAP32[i88 >> 2] | 0)) {
          HEAP32[i85 >> 2] = 0;
          i4 = HEAP32[i3 + 8 >> 2] | 0;
          switch (i4 | 0) {
          case 1:
           {
            i84 = ___strdup(HEAP32[i3 + 16 >> 2] | 0) | 0;
            HEAP32[i1 >> 2] = i84;
            if (i84 | 0) HEAP32[i85 >> 2] = 3;
            break;
           }
          case 3:
           {
            if (_FcNameConstant(HEAP32[i3 + 16 >> 2] | 0, i1) | 0) HEAP32[i85 >> 2] = 1;
            break;
           }
          case 10:
           {
            HEAP32[i1 >> 2] = HEAP32[i3 + 16 >> 2];
            HEAP32[i85 >> 2] = 1;
            break;
           }
          case 11:
           {
            HEAPF64[i2 >> 3] = +HEAPF64[i3 + 16 >> 3];
            HEAP32[i85 >> 2] = 2;
            break;
           }
          case 14:
           {
            HEAP32[i1 >> 2] = HEAP32[i3 + 16 >> 2];
            HEAP32[i85 >> 2] = 4;
            break;
           }
          case 15:
           {
            i84 = _FcCharSetCopy(HEAP32[i3 + 16 >> 2] | 0) | 0;
            HEAP32[i1 >> 2] = i84;
            if (i84 | 0) HEAP32[i85 >> 2] = 6;
            break;
           }
          case 16:
           {
            i84 = _FcLangSetCopy(HEAP32[i3 + 16 >> 2] | 0) | 0;
            HEAP32[i1 >> 2] = i84;
            if (i84 | 0) HEAP32[i85 >> 2] = 8;
            break;
           }
          case 13:
           {
            i84 = _FcRangeCopy(HEAP32[i3 + 16 >> 2] | 0) | 0;
            HEAP32[i1 >> 2] = i84;
            if (i84 | 0) HEAP32[i85 >> 2] = 9;
            break;
           }
          default:
           {
            HEAP32[i45 >> 2] = i4;
            _FcConfigMessage(i88, 1, 354085, i45);
           }
          }
          _FcVStackPopAndDestroy(i88);
          HEAP32[i63 >> 2] = HEAP32[i85 >> 2];
          HEAP32[i63 + 4 >> 2] = HEAP32[i85 + 4 >> 2];
          HEAP32[i63 + 8 >> 2] = HEAP32[i85 + 8 >> 2];
          HEAP32[i63 + 12 >> 2] = HEAP32[i85 + 12 >> 2];
         } else i86 = 607;
         if ((i86 | 0) == 607) {
          i86 = 0;
          HEAP32[i85 >> 2] = 0;
          HEAP32[i63 >> 2] = HEAP32[i85 >> 2];
          HEAP32[i63 + 4 >> 2] = HEAP32[i85 + 4 >> 2];
          HEAP32[i63 + 8 >> 2] = HEAP32[i85 + 8 >> 2];
          HEAP32[i63 + 12 >> 2] = HEAP32[i85 + 12 >> 2];
         };
         HEAP32[i71 >> 2] = HEAP32[i63 >> 2];
         HEAP32[i71 + 4 >> 2] = HEAP32[i63 + 4 >> 2];
         HEAP32[i71 + 8 >> 2] = HEAP32[i63 + 8 >> 2];
         HEAP32[i71 + 12 >> 2] = HEAP32[i63 + 12 >> 2];
         if (!(HEAP32[i71 >> 2] | 0)) break;
         HEAP32[i85 >> 2] = HEAP32[i71 >> 2];
         HEAP32[i85 + 4 >> 2] = HEAP32[i71 + 4 >> 2];
         HEAP32[i85 + 8 >> 2] = HEAP32[i71 + 8 >> 2];
         HEAP32[i85 + 12 >> 2] = HEAP32[i71 + 12 >> 2];
         if (!(_FcPatternAdd(i9, i7, i85, 1) | 0)) {
          i86 = 626;
          break;
         };
         HEAP32[i85 >> 2] = HEAP32[i71 >> 2];
         HEAP32[i85 + 4 >> 2] = HEAP32[i71 + 4 >> 2];
         HEAP32[i85 + 8 >> 2] = HEAP32[i71 + 8 >> 2];
         HEAP32[i85 + 12 >> 2] = HEAP32[i71 + 12 >> 2];
         _FcValueDestroy(i85);
        }
        if ((i86 | 0) == 626) {
         _FcConfigMessage(i88, 2, 352676, i46);
         HEAP32[i85 >> 2] = HEAP32[i71 >> 2];
         HEAP32[i85 + 4 >> 2] = HEAP32[i71 + 4 >> 2];
         HEAP32[i85 + 8 >> 2] = HEAP32[i71 + 8 >> 2];
         HEAP32[i85 + 12 >> 2] = HEAP32[i71 + 12 >> 2];
         _FcValueDestroy(i85);
        }
        i1 = i88 + 1308 | 0;
        i2 = HEAP32[i1 >> 2] | 0;
        if (i2 >>> 0 < 64) {
         HEAP32[i1 >> 2] = i2 + 1;
         i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
        } else {
         i1 = _malloc(24) | 0;
         if (!i1) break L820;
        }
        i3 = i1 + 8 | 0;
        HEAP32[i3 >> 2] = 0;
        HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
        i2 = HEAP32[i88 >> 2] | 0;
        if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
        HEAP32[i1 + 4 >> 2] = i2;
        HEAP32[i8 >> 2] = i1;
        if (!i1) break L820;
        HEAP32[i1 + 16 >> 2] = i9;
        HEAP32[i3 >> 2] = 6;
        break L820;
       }
      }
     }
    } while (0);
    _FcConfigMessage(i88, 1, 354056, i32);
    _FcPatternDestroy(i9);
   } while (0);
   break;
  }
 case 31:
  {
   i1 = HEAP32[i56 + 8 >> 2] | 0;
   L871 : do if (!i1) i9 = -1; else {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) i9 = -1; else {
     while (1) {
      if (!(_strcmp(i2, 352989) | 0)) break;
      i1 = i1 + 8 | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if (!i2) {
       i9 = -1;
       break L871;
      }
     }
     HEAP8[i2 >> 0] = 0;
     i1 = HEAP32[i1 + 4 >> 2] | 0;
     if (!i1) i9 = -1; else if (!(_strcmp(i1, 353018) | 0)) i9 = 0; else if (!(_strcmp(i1, 353026) | 0)) i9 = 1; else if (!(_strcmp(i1, 353367) | 0)) i9 = -1; else {
      HEAP32[i25 >> 2] = i1;
      _FcConfigMessage(i88, 1, 354112, i25);
      break L4;
     }
    }
   } while (0);
   i1 = HEAP32[i88 >> 2] | 0;
   if (i1 | 0) {
    i8 = _FcStrBufDone(i1 + 12 | 0) | 0;
    if (!i8) {
     _FcConfigMessage(i88, 2, 352676, i35);
     break L4;
    }
    i7 = _FcObjectFromName(i8) | 0;
    i1 = i88 + 1308 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2 >>> 0 < 64) {
     HEAP32[i1 >> 2] = i2 + 1;
     i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
     i86 = 651;
    } else {
     i1 = _malloc(24) | 0;
     if (i1 | 0) i86 = 651;
    }
    if ((i86 | 0) == 651) {
     i3 = i1 + 8 | 0;
     HEAP32[i3 >> 2] = 0;
     i4 = i88 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
     i2 = HEAP32[i88 >> 2] | 0;
     if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 + 4 >> 2] = i2;
     HEAP32[i4 >> 2] = i1;
     if (i1 | 0) {
      i86 = i1 + 16 | 0;
      HEAP32[i86 >> 2] = i7;
      HEAP32[i86 + 4 >> 2] = i9;
      HEAP32[i3 >> 2] = 5;
     }
    }
    _FcStrFree(i8);
   }
   break;
  }
 case 32:
  {
   i7 = _FcStrBufDone(i56 + 12 | 0) | 0;
   if (!i7) {
    _FcConfigMessage(i88, 2, 352676, i12);
    break L4;
   }
   i1 = i88 + 1308 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < 64) {
    HEAP32[i1 >> 2] = i2 + 1;
    i1 = i88 + 1312 + (i2 * 24 | 0) | 0;
    i86 = 661;
   } else {
    i1 = _malloc(24) | 0;
    if (i1 | 0) i86 = 661;
   }
   if ((i86 | 0) == 661) {
    i3 = i1 + 8 | 0;
    HEAP32[i3 >> 2] = 0;
    i4 = i88 + 4 | 0;
    HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
    i2 = HEAP32[i88 >> 2] | 0;
    if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 + 4 >> 2] = i2;
    HEAP32[i4 >> 2] = i1;
    if (i1 | 0) {
     HEAP32[i1 + 16 >> 2] = i7;
     HEAP32[i3 >> 2] = 3;
     break L4;
    }
   }
   _FcStrFree(i7);
   break;
  }
 case 33:
  {
   _FcParseBinary(i88, 20);
   break;
  }
 case 34:
  {
   _FcParseBinary(i88, 21);
   break;
  }
 case 35:
  {
   _FcParseBinary(i88, 22);
   break;
  }
 case 36:
  {
   _FcParseBinary(i88, 23);
   break;
  }
 case 37:
  {
   _FcParseBinary(i88, 27);
   break;
  }
 case 38:
  {
   _FcParseBinary(i88, 28);
   break;
  }
 case 39:
  {
   _FcParseBinary(i88, 29);
   break;
  }
 case 40:
  {
   _FcParseBinary(i88, 30);
   break;
  }
 case 41:
  {
   _FcParseBinary(i88, 24);
   break;
  }
 case 42:
  {
   _FcParseBinary(i88, 26);
   break;
  }
 case 43:
  {
   _FcParseBinary(i88, 31);
   break;
  }
 case 44:
  {
   _FcParseBinary(i88, 32);
   break;
  }
 case 45:
  {
   _FcParseBinary(i88, 33);
   break;
  }
 case 46:
  {
   _FcParseBinary(i88, 34);
   break;
  }
 case 47:
  {
   _FcParseUnary(i88, 35);
   break;
  }
 case 48:
  {
   _FcParseBinary(i88, 19);
   break;
  }
 default:
  {}
 } while (0);
 _FcPStackPop(i88);
 STACKTOP = i87;
 return;
}
function _parse_tag(i28, i1, i9, d18) {
 i28 = i28 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 d18 = +d18;
 var d2 = 0.0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i29 = 0, i30 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i16 = i30 + 24 | 0;
 i26 = i30 + 8 | 0;
 i24 = i30;
 i22 = i30 + 100 | 0;
 i29 = i30 + 96 | 0;
 i27 = i30 + 32 | 0;
 while (1) {
  HEAP32[i22 >> 2] = i1;
  i3 = (HEAP8[i1 >> 0] | 0) != 92;
  i4 = i1 + 1 | 0;
  if ((i1 | 0) != (i9 | 0) & i3) i1 = i4; else break;
 }
 if (i3) {
  i29 = i1;
  STACKTOP = i30;
  return i29 | 0;
 }
 HEAP32[i22 >> 2] = i4;
 if ((i4 | 0) == (i9 | 0)) {
  i17 = i22;
  i3 = i4;
  i1 = i9;
 } else {
  _skip_spaces(i22);
  i1 = HEAP32[i22 >> 2] | 0;
  i17 = i22;
  i3 = i1;
 }
 HEAP32[i29 >> 2] = i3;
 i4 = i3;
 L11 : while (1) {
  switch (HEAP8[i4 >> 0] | 0) {
  case 92:
  case 40:
   {
    i21 = i4;
    break L11;
   }
  default:
   {}
  }
  if ((i4 | 0) == (i9 | 0)) {
   i21 = i9;
   break;
  }
  i23 = i4 + 1 | 0;
  HEAP32[i29 >> 2] = i23;
  i4 = i23;
 }
 if ((i21 | 0) != (i1 | 0)) {
  i23 = i27 + 4 | 0;
  HEAP32[i23 >> 2] = 369704;
  HEAP32[i27 >> 2] = 369704;
  i13 = i27 + 12 | 0;
  HEAP32[i13 >> 2] = 369704;
  HEAP32[i27 + 8 >> 2] = 369704;
  i12 = i27 + 20 | 0;
  HEAP32[i12 >> 2] = 369704;
  HEAP32[i27 + 16 >> 2] = 369704;
  i11 = i27 + 28 | 0;
  HEAP32[i11 >> 2] = 369704;
  HEAP32[i27 + 24 >> 2] = 369704;
  i14 = i27 + 36 | 0;
  HEAP32[i14 >> 2] = 369704;
  HEAP32[i27 + 32 >> 2] = 369704;
  i15 = i27 + 44 | 0;
  HEAP32[i15 >> 2] = 369704;
  HEAP32[i27 + 40 >> 2] = 369704;
  i10 = i27 + 52 | 0;
  HEAP32[i10 >> 2] = 369704;
  HEAP32[i27 + 48 >> 2] = 369704;
  HEAP32[i27 + 60 >> 2] = 369704;
  HEAP32[i27 + 56 >> 2] = 369704;
  if ((HEAP8[i4 >> 0] | 0) == 40) {
   i3 = 0;
   i1 = i4;
   while (1) {
    i8 = i1 + 1 | 0;
    HEAP32[i29 >> 2] = i8;
    if ((i8 | 0) == (i9 | 0)) i8 = i9; else {
     _skip_spaces(i29);
     i8 = HEAP32[i29 >> 2] | 0;
    }
    i1 = i8;
    L25 : while (1) {
     i4 = HEAP8[i1 >> 0] | 0;
     switch (i4 << 24 >> 24) {
     case 41:
     case 92:
     case 44:
      break L25;
     default:
      {}
     }
     if ((i1 | 0) == (i9 | 0)) {
      i25 = 20;
      break;
     }
     i1 = i1 + 1 | 0;
    }
    if ((i25 | 0) == 20) {
     i25 = 0;
     i1 = i9;
     i4 = HEAP8[i9 >> 0] | 0;
    }
    if (i4 << 24 >> 24 != 44) break;
    HEAP32[i26 >> 2] = i1;
    if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i8);
     i4 = HEAP32[i26 >> 2] | 0;
     if (i4 >>> 0 > i8 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i8;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i4;
      i3 = i3 + 1 | 0;
     }
    }
   }
   i6 = (i1 | 0) == (i9 | 0);
   i7 = i1 + 1 | 0;
   if (!(i6 | i4 << 24 >> 24 == 41)) {
    i1 = i7;
    while (1) {
     i6 = (i1 | 0) == (i9 | 0);
     i4 = i1 + 1 | 0;
     if (i6 | (HEAP8[i1 >> 0] | 0) == 41) {
      i7 = i4;
      break;
     } else i1 = i4;
    }
   }
   HEAP32[i26 >> 2] = i1;
   if ((i3 | 0) < 8) {
    _rskip_spaces(i26, i8);
    i4 = HEAP32[i26 >> 2] | 0;
    if (i4 >>> 0 > i8 >>> 0) {
     HEAP32[i27 + (i3 << 3) >> 2] = i8;
     HEAP32[i27 + (i3 << 3) + 4 >> 2] = i4;
     i3 = i3 + 1 | 0;
    }
   }
   HEAP32[i29 >> 2] = i6 ? i1 : i7;
   i1 = HEAP32[i22 >> 2] | 0;
  } else i3 = 0;
  L47 : do if (!(_strncmp(i1, 360192, 5) | 0)) {
   i4 = i1 + 5 | 0;
   HEAP32[i22 >> 2] = i4;
   HEAP32[i26 >> 2] = i21;
   if ((i3 | 0) < 8) {
    _rskip_spaces(i26, i4);
    i1 = HEAP32[i26 >> 2] | 0;
    if (i1 >>> 0 > i4 >>> 0) {
     HEAP32[i27 + (i3 << 3) >> 2] = i4;
     HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
     i3 = i3 + 1 | 0;
    }
    if (!i3) {
     d2 = +HEAPF64[(HEAP32[i28 + 212 >> 2] | 0) + 88 >> 3];
     i1 = i28 + 368 | 0;
    } else i25 = 38;
   } else i25 = 38;
   if ((i25 | 0) == 38) {
    i1 = HEAP32[i23 >> 2] | 0;
    HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
    HEAP32[i26 + 4 >> 2] = i1;
    _mystrtod(i26, i24) | 0;
    i1 = i28 + 368 | 0;
    d2 = +HEAPF64[i24 >> 3] * d18 + (1.0 - d18) * +HEAPF64[i1 >> 3];
    d2 = d2 < 0.0 ? 0.0 : d2;
   }
   HEAPF64[i1 >> 3] = d2;
  } else {
   if (!(_strncmp(i1, 360198, 5) | 0)) {
    i4 = i1 + 5 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (!i3) {
      d2 = +HEAPF64[(HEAP32[i28 + 212 >> 2] | 0) + 88 >> 3];
      i1 = i28 + 376 | 0;
     } else i25 = 47;
    } else i25 = 47;
    if ((i25 | 0) == 47) {
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     i1 = i28 + 376 | 0;
     d2 = +HEAPF64[i24 >> 3] * d18 + (1.0 - d18) * +HEAPF64[i1 >> 3];
     d2 = d2 < 0.0 ? 0.0 : d2;
    }
    HEAPF64[i1 >> 3] = d2;
    break;
   }
   if (!(_strncmp(i1, 360204, 5) | 0)) {
    i4 = i1 + 5 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (!i3) {
      d2 = +HEAPF64[(HEAP32[i28 + 212 >> 2] | 0) + 96 >> 3];
      i1 = i28 + 440 | 0;
     } else i25 = 56;
    } else i25 = 56;
    if ((i25 | 0) == 56) {
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     i1 = i28 + 440 | 0;
     d2 = +HEAPF64[i24 >> 3] * d18 + (1.0 - d18) * +HEAPF64[i1 >> 3];
    }
    HEAPF64[i1 >> 3] = d2;
    break;
   }
   if (!(_strncmp(i1, 360210, 5) | 0)) {
    i4 = i1 + 5 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (!i3) {
      d2 = +HEAPF64[(HEAP32[i28 + 212 >> 2] | 0) + 96 >> 3];
      i1 = i28 + 448 | 0;
     } else i25 = 65;
    } else i25 = 65;
    if ((i25 | 0) == 65) {
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     i1 = i28 + 448 | 0;
     d2 = +HEAPF64[i24 >> 3] * d18 + (1.0 - d18) * +HEAPF64[i1 >> 3];
    }
    HEAPF64[i1 >> 3] = d2;
    break;
   }
   if (!(_strncmp(i1, 360216, 3) | 0)) {
    i4 = i1 + 3 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (!i3) {
      i1 = i28 + 272 | 0;
      d2 = 0.0;
     } else i25 = 75;
    } else i25 = 75;
    if ((i25 | 0) == 75) {
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     i28 = i28 + 272 | 0;
     i1 = i28;
     d2 = +HEAPF64[i24 >> 3] * d18 + (1.0 - d18) * +HEAPF64[i28 >> 3];
    }
    HEAPF64[i1 >> 3] = d2;
    break;
   }
   if (!(_strncmp(i1, 360220, 3) | 0)) {
    i4 = i1 + 3 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (!i3) {
      i1 = i28 + 280 | 0;
      d2 = 0.0;
     } else i25 = 84;
    } else i25 = 84;
    if ((i25 | 0) == 84) {
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     i28 = i28 + 280 | 0;
     i1 = i28;
     d2 = +HEAPF64[i24 >> 3] * d18 + (1.0 - d18) * +HEAPF64[i28 >> 3];
    }
    HEAPF64[i1 >> 3] = d2;
    break;
   }
   if (!(_strncmp(i1, 358828, 5) | 0)) {
    HEAP32[i22 >> 2] = i1 + 5;
    if ((i3 | 0) == 4) {
     i22 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i22;
     _mystrtoi(i26, i24) | 0;
     i22 = HEAP32[i24 >> 2] | 0;
     i25 = HEAP32[i13 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 + 8 >> 2];
     HEAP32[i26 + 4 >> 2] = i25;
     _mystrtoi(i26, i24) | 0;
     i25 = HEAP32[i24 >> 2] | 0;
     i23 = HEAP32[i12 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 + 16 >> 2];
     HEAP32[i26 + 4 >> 2] = i23;
     _mystrtoi(i26, i24) | 0;
     i23 = HEAP32[i24 >> 2] | 0;
     i21 = HEAP32[i11 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 + 24 >> 2];
     HEAP32[i26 + 4 >> 2] = i21;
     _mystrtoi(i26, i24) | 0;
     i26 = HEAP32[i24 >> 2] | 0;
     i27 = i28 + 400 | 0;
     d20 = 1.0 - d18;
     HEAP32[i27 >> 2] = ~~(+(i22 | 0) * d18 + d20 * +(HEAP32[i27 >> 2] | 0));
     i27 = i28 + 408 | 0;
     HEAP32[i27 >> 2] = ~~(+(i23 | 0) * d18 + d20 * +(HEAP32[i27 >> 2] | 0));
     i27 = i28 + 404 | 0;
     HEAP32[i27 >> 2] = ~~(+(i25 | 0) * d18 + d20 * +(HEAP32[i27 >> 2] | 0));
     i27 = i28 + 412 | 0;
     HEAP32[i27 >> 2] = ~~(+(i26 | 0) * d18 + d20 * +(HEAP32[i27 >> 2] | 0));
     HEAP8[i28 + 416 >> 0] = 1;
     break;
    }
    if (HEAP32[i28 + 472 >> 2] | 0) break;
    if (!(_parse_vector_clip(i28, i27, i3) | 0)) break;
    HEAP32[i28 + 476 >> 2] = 1;
    break;
   }
   if (!(_strncmp(i1, 360224, 4) | 0)) {
    i4 = i1 + 4 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (!i3) {
      i1 = i28 + 432 | 0;
      d2 = 0.0;
     } else i25 = 99;
    } else i25 = 99;
    if ((i25 | 0) == 99) {
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     i1 = i28 + 432 | 0;
     d2 = +HEAPF64[i24 >> 3] * d18 + (1.0 - d18) * +HEAPF64[i1 >> 3];
     d2 = d2 < 0.0 ? 0.0 : d2;
     d2 = d2 > 100.0 ? 100.0 : d2;
    }
    HEAPF64[i1 >> 3] = d2;
    break;
   }
   if (!(_strncmp(i1, 360229, 4) | 0)) {
    i4 = i1 + 4 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (!i3) {
      d2 = +HEAPF64[(HEAP32[i28 + 212 >> 2] | 0) + 48 >> 3];
      i1 = i28 + 336 | 0;
     } else i25 = 107;
    } else i25 = 107;
    if ((i25 | 0) == 107) {
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     i1 = i28 + 336 | 0;
     d2 = +HEAPF64[i24 >> 3] / 100.0 * d18 + (1.0 - d18) * +HEAPF64[i1 >> 3];
     d2 = d2 < 0.0 ? 0.0 : d2;
    }
    HEAPF64[i1 >> 3] = d2;
    break;
   }
   if (!(_strncmp(i1, 360234, 4) | 0)) {
    i4 = i1 + 4 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    do if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (i3 | 0) {
      i25 = 116;
      break;
     }
     d2 = +HEAPF64[(HEAP32[i28 + 212 >> 2] | 0) + 56 >> 3];
     i1 = i28 + 344 | 0;
    } else i25 = 116; while (0);
    if ((i25 | 0) == 116) {
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     i1 = i28 + 344 | 0;
     d2 = +HEAPF64[i24 >> 3] / 100.0 * d18 + (1.0 - d18) * +HEAPF64[i1 >> 3];
     d2 = d2 < 0.0 ? 0.0 : d2;
    }
    HEAPF64[i1 >> 3] = d2;
    break;
   }
   if (!(_strncmp(i1, 360239, 3) | 0)) {
    i4 = i1 + 3 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    do if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 <= i4 >>> 0) break;
     HEAP32[i27 + (i3 << 3) >> 2] = i4;
     HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
    } while (0);
    i27 = HEAP32[i28 + 212 >> 2] | 0;
    HEAPF64[i28 + 336 >> 3] = +HEAPF64[i27 + 48 >> 3];
    HEAPF64[i28 + 344 >> 3] = +HEAPF64[i27 + 56 >> 3];
    break;
   }
   if (!(_strncmp(i1, 360243, 3) | 0)) {
    i4 = i1 + 3 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    do if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (i3 | 0) {
      i25 = 130;
      break;
     }
     i1 = i28 + 352 | 0;
     d2 = +HEAPF64[(HEAP32[i28 + 212 >> 2] | 0) + 64 >> 3];
    } else i25 = 130; while (0);
    if ((i25 | 0) == 130) {
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     i28 = i28 + 352 | 0;
     i1 = i28;
     d2 = +HEAPF64[i24 >> 3] * d18 + (1.0 - d18) * +HEAPF64[i28 >> 3];
    }
    HEAPF64[i1 >> 3] = d2;
    break;
   }
   if (!(_strncmp(i1, 360247, 2) | 0)) {
    i4 = i1 + 2 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i1 = i3 + 1 | 0;
     } else i1 = i3;
     if (!i1) i25 = 143; else i25 = 139;
    } else i25 = 139;
    if ((i25 | 0) == 139) {
     i23 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i23;
     _mystrtod(i26, i24) | 0;
     d2 = +HEAPF64[i24 >> 3] * d18;
     d5 = +HEAPF64[i28 + 224 >> 3];
     switch (HEAP8[HEAP32[i27 >> 2] >> 0] | 0) {
     case 45:
     case 43:
      {
       d2 = (d2 / 10.0 + 1.0) * d5;
       break;
      }
     default:
      d2 = d2 + (1.0 - d18) * d5;
     }
     if (d2 <= 0.0) i25 = 143;
    }
    if ((i25 | 0) == 143) d2 = +HEAPF64[(HEAP32[i28 + 212 >> 2] | 0) + 8 >> 3];
    if (!(HEAP32[i28 + 220 >> 2] | 0)) break;
    HEAPF64[i28 + 224 >> 3] = d2;
    break;
   }
   if (!(_strncmp(i1, 360250, 4) | 0)) {
    i4 = i1 + 4 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    do if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (i3 | 0) {
      i25 = 152;
      break;
     }
     d5 = +HEAPF64[(HEAP32[i28 + 212 >> 2] | 0) + 88 >> 3];
     d2 = d5;
     i3 = i28 + 368 | 0;
     i1 = i28 + 376 | 0;
    } else i25 = 152; while (0);
    if ((i25 | 0) == 152) {
     i3 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i3;
     _mystrtod(i26, i24) | 0;
     i3 = i28 + 368 | 0;
     d5 = 1.0 - d18;
     d20 = +HEAPF64[i24 >> 3] * d18;
     d2 = d20 + d5 * +HEAPF64[i3 >> 3];
     i1 = i28 + 376 | 0;
     d5 = d20 + d5 * +HEAPF64[i1 >> 3];
     d2 = d2 < 0.0 ? 0.0 : d2;
     d5 = d5 < 0.0 ? 0.0 : d5;
    }
    HEAPF64[i3 >> 3] = d2;
    HEAPF64[i1 >> 3] = d5;
    break;
   }
   if (!(_strncmp(i1, 358818, 4) | 0)) {
    HEAP32[i22 >> 2] = i1 + 4;
    if ((i3 | 2 | 0) != 6) break;
    i25 = HEAP32[i23 >> 2] | 0;
    HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
    HEAP32[i26 + 4 >> 2] = i25;
    _mystrtod(i26, i24) | 0;
    d20 = +HEAPF64[i24 >> 3];
    i25 = HEAP32[i13 >> 2] | 0;
    HEAP32[i26 >> 2] = HEAP32[i27 + 8 >> 2];
    HEAP32[i26 + 4 >> 2] = i25;
    _mystrtod(i26, i24) | 0;
    d19 = +HEAPF64[i24 >> 3];
    i25 = HEAP32[i12 >> 2] | 0;
    HEAP32[i26 >> 2] = HEAP32[i27 + 16 >> 2];
    HEAP32[i26 + 4 >> 2] = i25;
    _mystrtod(i26, i24) | 0;
    d18 = +HEAPF64[i24 >> 3];
    i25 = HEAP32[i11 >> 2] | 0;
    HEAP32[i26 >> 2] = HEAP32[i27 + 24 >> 2];
    HEAP32[i26 + 4 >> 2] = i25;
    _mystrtod(i26, i24) | 0;
    d5 = +HEAPF64[i24 >> 3];
    if ((i3 | 0) == 6) {
     i23 = HEAP32[i14 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 + 32 >> 2];
     HEAP32[i26 + 4 >> 2] = i23;
     _mystrtoll(i26, i24) | 0;
     i23 = i24;
     i25 = HEAP32[i23 >> 2] | 0;
     i23 = HEAP32[i23 + 4 >> 2] | 0;
     i7 = HEAP32[i15 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 + 40 >> 2];
     HEAP32[i26 + 4 >> 2] = i7;
     _mystrtoll(i26, i24) | 0;
     i7 = i24;
     i4 = HEAP32[i7 >> 2] | 0;
     i7 = HEAP32[i7 + 4 >> 2] | 0;
     i27 = (i23 | 0) > (i7 | 0) | (i23 | 0) == (i7 | 0) & i25 >>> 0 > i4 >>> 0;
     i1 = i27 ? i7 : i23;
     i3 = i27 ? i4 : i25;
     i7 = i27 ? i23 : i7;
     i4 = i27 ? i25 : i4;
    } else {
     i1 = 0;
     i3 = 0;
     i7 = 0;
     i4 = 0;
    }
    i6 = HEAP32[i28 + 208 >> 2] | 0;
    if (((i7 | 0) < 0 | (i7 | 0) == 0 & i4 >>> 0 < 1) & ((i1 | 0) < 0 | (i1 | 0) == 0 & i3 >>> 0 < 1)) {
     i7 = i6 + 8 | 0;
     i1 = 0;
     i3 = 0;
     i8 = HEAP32[i7 >> 2] | 0;
     i7 = HEAP32[i7 + 4 >> 2] | 0;
    } else i8 = i4;
    i27 = i28 + 168 | 0;
    i4 = i6;
    i4 = _i64Subtract(HEAP32[i27 >> 2] | 0, HEAP32[i27 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0) | 0;
    i6 = tempRet0;
    if ((i6 | 0) > (i1 | 0) | (i6 | 0) == (i1 | 0) & i4 >>> 0 > i3 >>> 0) {
     i26 = _i64Subtract(i8 | 0, i7 | 0, i3 | 0, i1 | 0) | 0;
     i27 = tempRet0;
     i25 = _i64Subtract(i4 | 0, i6 | 0, i3 | 0, i1 | 0) | 0;
     d2 = (i6 | 0) < (i7 | 0) | (i6 | 0) == (i7 | 0) & i4 >>> 0 < i8 >>> 0 ? (+(i25 >>> 0) + 4294967296.0 * +(tempRet0 | 0)) / (+(i26 >>> 0) + 4294967296.0 * +(i27 | 0)) : 1.0;
    } else d2 = 0.0;
    i1 = i28 + 288 | 0;
    if ((HEAP32[i1 >> 2] | 0) == 1) break;
    HEAPF64[i28 + 296 >> 3] = d20 + (d18 - d20) * d2;
    HEAPF64[i28 + 304 >> 3] = d19 + (d5 - d19) * d2;
    HEAP8[i28 + 417 >> 0] = 0;
    HEAP32[i1 >> 2] = 1;
    break;
   }
   if (!(_strncmp(i1, 360255, 3) | 0)) {
    i4 = i1 + 3 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    do if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (i3 | 0) {
      i25 = 172;
      break;
     }
     i1 = i28 + 248 | 0;
     d2 = 0.0;
    } else i25 = 172; while (0);
    if ((i25 | 0) == 172) {
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     i28 = i28 + 248 | 0;
     i1 = i28;
     d2 = +HEAPF64[i24 >> 3] * .017453292519943295 * d18 + (1.0 - d18) * +HEAPF64[i28 >> 3];
    }
    HEAPF64[i1 >> 3] = d2;
    break;
   }
   if (!(_strncmp(i1, 360259, 3) | 0)) {
    i4 = i1 + 3 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    do if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 > i4 >>> 0) {
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     }
     if (i3 | 0) {
      i25 = 181;
      break;
     }
     i1 = i28 + 256 | 0;
     d2 = 0.0;
    } else i25 = 181; while (0);
    if ((i25 | 0) == 181) {
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     i28 = i28 + 256 | 0;
     i1 = i28;
     d2 = +HEAPF64[i24 >> 3] * .017453292519943295 * d18 + (1.0 - d18) * +HEAPF64[i28 >> 3];
    }
    HEAPF64[i1 >> 3] = d2;
    break;
   }
   do if (!(_strncmp(i1, 360263, 3) | 0)) {
    i4 = i1 + 3 | 0;
    HEAP32[i22 >> 2] = i4;
    HEAP32[i26 >> 2] = i21;
    do if ((i3 | 0) < 8) {
     _rskip_spaces(i26, i4);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 <= i4 >>> 0) {
      i1 = i3;
      break;
     }
     HEAP32[i27 + (i3 << 3) >> 2] = i4;
     HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
     i1 = i3 + 1 | 0;
    } else i1 = i3; while (0);
   } else {
    if (!(_strncmp(i1, 360267, 2) | 0)) {
     i4 = i1 + 2 | 0;
     HEAP32[i22 >> 2] = i4;
     HEAP32[i26 >> 2] = i21;
     do if ((i3 | 0) < 8) {
      _rskip_spaces(i26, i4);
      i1 = HEAP32[i26 >> 2] | 0;
      if (i1 >>> 0 <= i4 >>> 0) {
       i1 = i3;
       break;
      }
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i1 = i3 + 1 | 0;
     } else i1 = i3; while (0);
     break;
    }
    if (!(_strncmp(i1, 360270, 2) | 0)) {
     i4 = i1 + 2 | 0;
     HEAP32[i22 >> 2] = i4;
     HEAP32[i26 >> 2] = i21;
     do if ((i3 | 0) < 8) {
      _rskip_spaces(i26, i4);
      i1 = HEAP32[i26 >> 2] | 0;
      if (i1 >>> 0 <= i4 >>> 0) break;
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
      i3 = i3 + 1 | 0;
     } while (0);
     i4 = HEAP32[i27 >> 2] | 0;
     HEAP32[i24 >> 2] = i4;
     do if (!i3) i25 = 204; else {
      i1 = HEAP32[i23 >> 2] | 0;
      if (!(_strncmp(i4, 360273, i1 - i4 | 0) | 0)) {
       i25 = 204;
       break;
      }
      _skip_spaces(i24);
      i27 = HEAP32[i24 >> 2] | 0;
      i1 = _strndup(i27, i1 - i27 | 0) | 0;
     } while (0);
     if ((i25 | 0) == 204) i1 = ___strdup(HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 4 >> 2] | 0) | 0;
     i3 = i28 + 500 | 0;
     _free(HEAP32[i3 >> 2] | 0);
     HEAP32[i3 >> 2] = i1;
     i3 = i26 + 12 | 0;
     if ((HEAP8[i1 >> 0] | 0) == 64) {
      HEAP32[i3 >> 2] = 1;
      i1 = i1 + 1 | 0;
     } else HEAP32[i3 >> 2] = 0;
     i1 = ___strdup(i1) | 0;
     HEAP32[i26 >> 2] = i1;
     i1 = HEAP32[i28 + 504 >> 2] | 0;
     switch (i1 | 0) {
     case 1:
     case -1:
      {
       i1 = 700;
       break;
      }
     case 0:
      {
       i1 = 400;
       break;
      }
     default:
      {}
     }
     HEAP32[i26 + 4 >> 2] = i1;
     i1 = HEAP32[i28 + 508 >> 2] | 0;
     switch (i1 | 0) {
     case 1:
      {
       i1 = 100;
       break;
      }
     case 0:
      {
       i1 = 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i26 + 8 >> 2] = i1;
     i27 = i28 + 220 | 0;
     _ass_cache_dec_ref(HEAP32[i27 >> 2] | 0);
     i28 = _ass_font_new(HEAP32[i28 + 728 >> 2] | 0, HEAP32[i28 >> 2] | 0, HEAP32[i28 + 4 >> 2] | 0, HEAP32[i28 + 8 >> 2] | 0, i26) | 0;
     HEAP32[i27 >> 2] = i28;
     break L47;
    }
    if (!(_strncmp(i1, 360275, 5) | 0)) {
     i4 = i1 + 5 | 0;
     HEAP32[i22 >> 2] = i4;
     HEAP32[i26 >> 2] = i21;
     do if ((i3 | 0) < 8) {
      _rskip_spaces(i26, i4);
      i1 = HEAP32[i26 >> 2] | 0;
      if (i1 >>> 0 > i4 >>> 0) {
       HEAP32[i27 + (i3 << 3) >> 2] = i4;
       HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
       i1 = i3 + 1 | 0;
      } else i1 = i3;
      if (i1 | 0) break;
      i26 = i28 + 384 | 0;
      i27 = HEAP32[i28 + 212 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 + 16 >> 2] & 255 | HEAP32[i26 >> 2] & -256;
      i26 = i28 + 388 | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 + 20 >> 2] & 255 | HEAP32[i26 >> 2] & -256;
      i26 = i28 + 392 | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 + 24 >> 2] & 255 | HEAP32[i26 >> 2] & -256;
      i28 = i28 + 396 | 0;
      HEAP32[i28 >> 2] = HEAP32[i27 + 28 >> 2] & 255 | HEAP32[i28 >> 2] & -256;
      break L47;
     } while (0);
     d20 = 1.0 - d18;
     d19 = +(_parse_alpha_tag(HEAP32[i27 >> 2] | 0) | 0) * d18;
     i27 = i28 + 384 | 0;
     i26 = HEAP32[i27 >> 2] | 0;
     HEAP32[i27 >> 2] = ~~(d19 + d20 * +((i26 & 255) >>> 0)) & 255 | i26 & -256;
     i27 = i28 + 388 | 0;
     i26 = HEAP32[i27 >> 2] | 0;
     HEAP32[i27 >> 2] = ~~(d19 + d20 * +((i26 & 255) >>> 0)) & 255 | i26 & -256;
     i27 = i28 + 392 | 0;
     i26 = HEAP32[i27 >> 2] | 0;
     HEAP32[i27 >> 2] = ~~(d19 + d20 * +((i26 & 255) >>> 0)) & 255 | i26 & -256;
     i28 = i28 + 396 | 0;
     i27 = HEAP32[i28 >> 2] | 0;
     HEAP32[i28 >> 2] = ~~(d19 + d20 * +((i27 & 255) >>> 0)) & 255 | i27 & -256;
     break L47;
    }
    if (!(_strncmp(i1, 360281, 2) | 0)) {
     i4 = i1 + 2 | 0;
     HEAP32[i22 >> 2] = i4;
     HEAP32[i26 >> 2] = i21;
     do if ((i3 | 0) < 8) {
      _rskip_spaces(i26, i4);
      i1 = HEAP32[i26 >> 2] | 0;
      if (i1 >>> 0 <= i4 >>> 0) break;
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
     } while (0);
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtoi(i26, i24) | 0;
     i1 = HEAP32[i24 >> 2] | 0;
     i6 = i28 + 216 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
     if (i4 & 2 | 0) break L47;
     if ((i1 + -1 | 0) >>> 0 < 9) {
      i3 = _numpad2align(i1) | 0;
      i1 = HEAP32[i6 >> 2] | 0;
     } else {
      i3 = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 104 >> 2] | 0;
      i1 = i4;
     }
     HEAP32[i28 + 236 >> 2] = i3;
     HEAP32[i6 >> 2] = i1 | 2;
     break L47;
    }
    if ((HEAP8[i1 >> 0] | 0) == 97) {
     i4 = i1 + 1 | 0;
     HEAP32[i22 >> 2] = i4;
     HEAP32[i26 >> 2] = i21;
     do if ((i3 | 0) < 8) {
      _rskip_spaces(i26, i4);
      i1 = HEAP32[i26 >> 2] | 0;
      if (i1 >>> 0 <= i4 >>> 0) break;
      HEAP32[i27 + (i3 << 3) >> 2] = i4;
      HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
     } while (0);
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtoi(i26, i24) | 0;
     i1 = HEAP32[i24 >> 2] | 0;
     i3 = i28 + 216 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4 & 2 | 0) break L47;
     if ((i1 + -1 | 0) >>> 0 < 11) i1 = (i1 & 3 | 0) == 0 ? 5 : i1; else i1 = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 104 >> 2] | 0;
     HEAP32[i28 + 236 >> 2] = i1;
     HEAP32[i3 >> 2] = i4 | 2;
     break L47;
    }
    if (!(_strncmp(i1, 358814, 3) | 0)) {
     HEAP32[i22 >> 2] = i1 + 3;
     if ((i3 | 0) != 2) break L47;
     i1 = HEAP32[i23 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     d5 = +HEAPF64[i24 >> 3];
     i1 = HEAP32[i13 >> 2] | 0;
     HEAP32[i26 >> 2] = HEAP32[i27 + 8 >> 2];
     HEAP32[i26 + 4 >> 2] = i1;
     _mystrtod(i26, i24) | 0;
     d2 = +HEAPF64[i24 >> 3];
     i1 = i28 + 288 | 0;
     if ((HEAP32[i1 >> 2] | 0) == 1) {
      _ass_msg(HEAP32[i28 >> 2] | 0, 6, 360284, i16);
      break L47;
     } else {
      HEAP32[i1 >> 2] = 1;
      HEAP8[i28 + 417 >> 0] = 0;
      HEAPF64[i28 + 296 >> 3] = d5;
      HEAPF64[i28 + 304 >> 3] = d2;
      break L47;
     }
    }
    do if (!(_strncmp(i1, 360338, 4) | 0)) i4 = 4; else {
     if (!(_strncmp(i1, 360343, 3) | 0)) {
      i4 = 3;
      break;
     }
     if (!(_strncmp(i1, 358834, 3) | 0)) {
      HEAP32[i22 >> 2] = i1 + 3;
      if ((i3 | 0) != 2) break L47;
      i1 = HEAP32[i23 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
      HEAP32[i26 + 4 >> 2] = i1;
      _mystrtod(i26, i24) | 0;
      d5 = +HEAPF64[i24 >> 3];
      i1 = HEAP32[i13 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 + 8 >> 2];
      HEAP32[i26 + 4 >> 2] = i1;
      _mystrtod(i26, i24) | 0;
      d2 = +HEAPF64[i24 >> 3];
      i1 = i28 + 328 | 0;
      if (HEAP8[i1 >> 0] | 0) break L47;
      HEAPF64[i28 + 312 >> 3] = d5;
      HEAPF64[i28 + 320 >> 3] = d2;
      HEAP8[i1 >> 0] = 1;
      HEAP8[i28 + 417 >> 0] = 0;
      break L47;
     }
     if ((HEAP8[i1 >> 0] | 0) == 116) {
      HEAP32[i22 >> 2] = i1 + 1;
      i11 = i3 + -1 | 0;
      switch (i3 | 0) {
      case 4:
       {
        i7 = HEAP32[i23 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
        HEAP32[i26 + 4 >> 2] = i7;
        _mystrtoll(i26, i24) | 0;
        i7 = i24;
        i6 = HEAP32[i7 >> 2] | 0;
        i7 = HEAP32[i7 + 4 >> 2] | 0;
        i3 = HEAP32[i13 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 + 8 >> 2];
        HEAP32[i26 + 4 >> 2] = i3;
        _mystrtoll(i26, i24) | 0;
        i3 = i24;
        i1 = HEAP32[i3 >> 2] | 0;
        i3 = HEAP32[i3 + 4 >> 2] | 0;
        i25 = HEAP32[i12 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 + 16 >> 2];
        HEAP32[i26 + 4 >> 2] = i25;
        _mystrtod(i26, i24) | 0;
        d2 = +HEAPF64[i24 >> 3];
        i25 = 271;
        break;
       }
      case 3:
       {
        i7 = HEAP32[i23 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
        HEAP32[i26 + 4 >> 2] = i7;
        _mystrtoll(i26, i24) | 0;
        i7 = i24;
        i6 = HEAP32[i7 >> 2] | 0;
        i7 = HEAP32[i7 + 4 >> 2] | 0;
        i3 = HEAP32[i13 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 + 8 >> 2];
        HEAP32[i26 + 4 >> 2] = i3;
        _mystrtoll(i26, i24) | 0;
        i3 = i24;
        d2 = 1.0;
        i1 = HEAP32[i3 >> 2] | 0;
        i3 = HEAP32[i3 + 4 >> 2] | 0;
        i25 = 271;
        break;
       }
      case 2:
       {
        i25 = HEAP32[i23 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
        HEAP32[i26 + 4 >> 2] = i25;
        _mystrtod(i26, i24) | 0;
        d2 = +HEAPF64[i24 >> 3];
        i25 = 270;
        break;
       }
      case 1:
       {
        d2 = 1.0;
        i25 = 270;
        break;
       }
      default:
       break L47;
      }
      if ((i25 | 0) == 270) {
       HEAP8[i28 + 417 >> 0] = 0;
       i6 = 0;
       i7 = 0;
       i4 = HEAP32[i28 + 208 >> 2] | 0;
       i25 = 272;
      } else if ((i25 | 0) == 271) {
       HEAP8[i28 + 417 >> 0] = 0;
       i4 = HEAP32[i28 + 208 >> 2] | 0;
       if ((i1 | 0) == 0 & (i3 | 0) == 0) i25 = 272; else i10 = i6;
      }
      if ((i25 | 0) == 272) {
       i3 = i4 + 8 | 0;
       i1 = HEAP32[i3 >> 2] | 0;
       i3 = HEAP32[i3 + 4 >> 2] | 0;
       i10 = i6;
      }
      i8 = _i64Subtract(i1 | 0, i3 | 0, i10 | 0, i7 | 0) | 0;
      i9 = tempRet0;
      i6 = i28 + 168 | 0;
      i4 = _i64Subtract(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0) | 0;
      i6 = tempRet0;
      do if ((i6 | 0) > (i7 | 0) | (i6 | 0) == (i7 | 0) & i4 >>> 0 > i10 >>> 0) {
       if (!((i6 | 0) < (i3 | 0) | (i6 | 0) == (i3 | 0) & i4 >>> 0 < i1 >>> 0)) {
        d5 = 1.0;
        break;
       }
       if ((i8 | 0) == 0 & (i9 | 0) == 0) ___assert_fail(360347, 360361, 649, 360373); else {
        i26 = _i64Subtract(i4 | 0, i6 | 0, i10 | 0, i7 | 0) | 0;
        d5 = +Math_pow(+((+(i26 >>> 0) + 4294967296.0 * +(tempRet0 | 0)) / (+(i8 >>> 0) + 4294967296.0 * +(i9 | 0))), +d2);
        break;
       }
      } else d5 = 0.0; while (0);
      i3 = HEAP32[i27 + (i11 << 3) >> 2] | 0;
      HEAP32[i17 >> 2] = i3;
      i4 = i27 + (i11 << 3) + 4 | 0;
      i1 = HEAP32[i4 >> 2] | 0;
      if (i3 >>> 0 >= i1 >>> 0) break L47;
      while (1) {
       i3 = _parse_tag(i28, i3, i1, d5) | 0;
       HEAP32[i22 >> 2] = i3;
       i1 = HEAP32[i4 >> 2] | 0;
       if (i3 >>> 0 >= i1 >>> 0) break L47;
      }
     }
     if (!(_strncmp(i1, 358823, 4) | 0)) {
      HEAP32[i22 >> 2] = i1 + 4;
      if ((i3 | 0) == 4) {
       i22 = HEAP32[i23 >> 2] | 0;
       HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
       HEAP32[i26 + 4 >> 2] = i22;
       _mystrtoi(i26, i24) | 0;
       i22 = HEAP32[i24 >> 2] | 0;
       i25 = HEAP32[i13 >> 2] | 0;
       HEAP32[i26 >> 2] = HEAP32[i27 + 8 >> 2];
       HEAP32[i26 + 4 >> 2] = i25;
       _mystrtoi(i26, i24) | 0;
       i25 = HEAP32[i24 >> 2] | 0;
       i23 = HEAP32[i12 >> 2] | 0;
       HEAP32[i26 >> 2] = HEAP32[i27 + 16 >> 2];
       HEAP32[i26 + 4 >> 2] = i23;
       _mystrtoi(i26, i24) | 0;
       i23 = HEAP32[i24 >> 2] | 0;
       i21 = HEAP32[i11 >> 2] | 0;
       HEAP32[i26 >> 2] = HEAP32[i27 + 24 >> 2];
       HEAP32[i26 + 4 >> 2] = i21;
       _mystrtoi(i26, i24) | 0;
       i26 = HEAP32[i24 >> 2] | 0;
       i27 = i28 + 400 | 0;
       d20 = 1.0 - d18;
       HEAP32[i27 >> 2] = ~~(+(i22 | 0) * d18 + d20 * +(HEAP32[i27 >> 2] | 0));
       i27 = i28 + 408 | 0;
       HEAP32[i27 >> 2] = ~~(+(i23 | 0) * d18 + d20 * +(HEAP32[i27 >> 2] | 0));
       i27 = i28 + 404 | 0;
       HEAP32[i27 >> 2] = ~~(+(i25 | 0) * d18 + d20 * +(HEAP32[i27 >> 2] | 0));
       i27 = i28 + 412 | 0;
       HEAP32[i27 >> 2] = ~~(+(i26 | 0) * d18 + d20 * +(HEAP32[i27 >> 2] | 0));
       HEAP8[i28 + 416 >> 0] = 0;
       break L47;
      }
      if (HEAP32[i28 + 472 >> 2] | 0) break L47;
      if (!(_parse_vector_clip(i28, i27, i3) | 0)) break L47;
      HEAP32[i28 + 476 >> 2] = 0;
      break L47;
     }
     do if ((HEAP8[i1 >> 0] | 0) == 99) {
      i4 = i1 + 1 | 0;
      HEAP32[i22 >> 2] = i4;
      HEAP32[i26 >> 2] = i21;
      do if ((i3 | 0) < 8) {
       _rskip_spaces(i26, i4);
       i1 = HEAP32[i26 >> 2] | 0;
       if (i1 >>> 0 <= i4 >>> 0) {
        i1 = i3;
        break;
       }
       HEAP32[i27 + (i3 << 3) >> 2] = i4;
       HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
       i1 = i3 + 1 | 0;
      } else i1 = i3; while (0);
     } else {
      if (!(_strncmp(i1, 360383, 2) | 0)) {
       i4 = i1 + 2 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 <= i4 >>> 0) {
         i1 = i3;
         break;
        }
        HEAP32[i27 + (i3 << 3) >> 2] = i4;
        HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
        i1 = i3 + 1 | 0;
       } else i1 = i3; while (0);
       break;
      }
      if (!(_strncmp(i1, 360386, 2) | 0)) {
       i4 = i1 + 2 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 > i4 >>> 0) {
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i1 = i3 + 1 | 0;
        } else i1 = i3;
        if (i1 | 0) break;
        i27 = i28 + 388 | 0;
        i28 = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 20 >> 2] | 0;
        HEAP32[i27 >> 2] = i28 & -16777216 | HEAP32[i27 >> 2] & 255 | i28 & 16711680 | i28 & 65280;
        break L47;
       } while (0);
       i26 = _parse_color_tag(HEAP32[i27 >> 2] | 0) | 0;
       i28 = i28 + 388 | 0;
       i27 = HEAP32[i28 >> 2] | 0;
       d20 = 1.0 - d18;
       HEAP32[i28 >> 2] = ~~(+(i26 >>> 24 >>> 0) * d18 + d20 * +(i27 >>> 24 >>> 0)) >>> 0 << 24 | i27 & 255 | ~~(+((i26 >>> 16 & 255) >>> 0) * d18 + d20 * +((i27 >>> 16 & 255) >>> 0)) >>> 0 << 16 | ~~(+((i26 >>> 8 & 255) >>> 0) * d18 + d20 * +((i27 >>> 8 & 255) >>> 0)) >>> 0 << 8;
       break L47;
      }
      if (!(_strncmp(i1, 360389, 2) | 0)) {
       i4 = i1 + 2 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 > i4 >>> 0) {
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i1 = i3 + 1 | 0;
        } else i1 = i3;
        if (i1 | 0) break;
        i27 = i28 + 392 | 0;
        i28 = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 24 >> 2] | 0;
        HEAP32[i27 >> 2] = i28 & -16777216 | HEAP32[i27 >> 2] & 255 | i28 & 16711680 | i28 & 65280;
        break L47;
       } while (0);
       i26 = _parse_color_tag(HEAP32[i27 >> 2] | 0) | 0;
       i28 = i28 + 392 | 0;
       i27 = HEAP32[i28 >> 2] | 0;
       d20 = 1.0 - d18;
       HEAP32[i28 >> 2] = ~~(+(i26 >>> 24 >>> 0) * d18 + d20 * +(i27 >>> 24 >>> 0)) >>> 0 << 24 | i27 & 255 | ~~(+((i26 >>> 16 & 255) >>> 0) * d18 + d20 * +((i27 >>> 16 & 255) >>> 0)) >>> 0 << 16 | ~~(+((i26 >>> 8 & 255) >>> 0) * d18 + d20 * +((i27 >>> 8 & 255) >>> 0)) >>> 0 << 8;
       break L47;
      }
      if (!(_strncmp(i1, 360392, 2) | 0)) {
       i4 = i1 + 2 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 > i4 >>> 0) {
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i1 = i3 + 1 | 0;
        } else i1 = i3;
        if (i1 | 0) break;
        i27 = i28 + 396 | 0;
        i28 = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 28 >> 2] | 0;
        HEAP32[i27 >> 2] = i28 & -16777216 | HEAP32[i27 >> 2] & 255 | i28 & 16711680 | i28 & 65280;
        break L47;
       } while (0);
       i26 = _parse_color_tag(HEAP32[i27 >> 2] | 0) | 0;
       i28 = i28 + 396 | 0;
       i27 = HEAP32[i28 >> 2] | 0;
       d20 = 1.0 - d18;
       HEAP32[i28 >> 2] = ~~(+(i26 >>> 24 >>> 0) * d18 + d20 * +(i27 >>> 24 >>> 0)) >>> 0 << 24 | i27 & 255 | ~~(+((i26 >>> 16 & 255) >>> 0) * d18 + d20 * +((i27 >>> 16 & 255) >>> 0)) >>> 0 << 16 | ~~(+((i26 >>> 8 & 255) >>> 0) * d18 + d20 * +((i27 >>> 8 & 255) >>> 0)) >>> 0 << 8;
       break L47;
      }
      if (!(_strncmp(i1, 360395, 2) | 0)) {
       i4 = i1 + 2 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 > i4 >>> 0) {
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i1 = i3 + 1 | 0;
        } else i1 = i3;
        if (i1 | 0) break;
        i27 = i28 + 384 | 0;
        HEAP32[i27 >> 2] = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 16 >> 2] & 255 | HEAP32[i27 >> 2] & -256;
        break L47;
       } while (0);
       i26 = _parse_alpha_tag(HEAP32[i27 >> 2] | 0) | 0;
       i28 = i28 + 384 | 0;
       i27 = HEAP32[i28 >> 2] | 0;
       HEAP32[i28 >> 2] = ~~(+(i26 | 0) * d18 + (1.0 - d18) * +((i27 & 255) >>> 0)) & 255 | i27 & -256;
       break L47;
      }
      if (!(_strncmp(i1, 360398, 2) | 0)) {
       i4 = i1 + 2 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 > i4 >>> 0) {
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i1 = i3 + 1 | 0;
        } else i1 = i3;
        if (i1 | 0) break;
        i27 = i28 + 388 | 0;
        HEAP32[i27 >> 2] = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 20 >> 2] & 255 | HEAP32[i27 >> 2] & -256;
        break L47;
       } while (0);
       i26 = _parse_alpha_tag(HEAP32[i27 >> 2] | 0) | 0;
       i28 = i28 + 388 | 0;
       i27 = HEAP32[i28 >> 2] | 0;
       HEAP32[i28 >> 2] = ~~(+(i26 | 0) * d18 + (1.0 - d18) * +((i27 & 255) >>> 0)) & 255 | i27 & -256;
       break L47;
      }
      if (!(_strncmp(i1, 360401, 2) | 0)) {
       i4 = i1 + 2 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 > i4 >>> 0) {
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i1 = i3 + 1 | 0;
        } else i1 = i3;
        if (i1 | 0) break;
        i27 = i28 + 392 | 0;
        HEAP32[i27 >> 2] = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 24 >> 2] & 255 | HEAP32[i27 >> 2] & -256;
        break L47;
       } while (0);
       i26 = _parse_alpha_tag(HEAP32[i27 >> 2] | 0) | 0;
       i28 = i28 + 392 | 0;
       i27 = HEAP32[i28 >> 2] | 0;
       HEAP32[i28 >> 2] = ~~(+(i26 | 0) * d18 + (1.0 - d18) * +((i27 & 255) >>> 0)) & 255 | i27 & -256;
       break L47;
      }
      if (!(_strncmp(i1, 360404, 2) | 0)) {
       i4 = i1 + 2 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 > i4 >>> 0) {
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i1 = i3 + 1 | 0;
        } else i1 = i3;
        if (i1 | 0) break;
        i27 = i28 + 396 | 0;
        HEAP32[i27 >> 2] = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 28 >> 2] & 255 | HEAP32[i27 >> 2] & -256;
        break L47;
       } while (0);
       i26 = _parse_alpha_tag(HEAP32[i27 >> 2] | 0) | 0;
       i28 = i28 + 396 | 0;
       i27 = HEAP32[i28 >> 2] | 0;
       HEAP32[i28 >> 2] = ~~(+(i26 | 0) * d18 + (1.0 - d18) * +((i27 & 255) >>> 0)) & 255 | i27 & -256;
       break L47;
      }
      if ((HEAP8[i1 >> 0] | 0) == 114) {
       i4 = i1 + 1 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 > i4 >>> 0) {
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i1 = i3 + 1 | 0;
        } else i1 = i3;
        if (i1 | 0) break;
        _reset_render_context(i28, 0);
        break L47;
       } while (0);
       i27 = HEAP32[i27 >> 2] | 0;
       _reset_render_context(i28, _lookup_style_strict(HEAP32[i28 + 160 >> 2] | 0, i27, (HEAP32[i23 >> 2] | 0) - i27 | 0) | 0);
       break L47;
      }
      if (!(_strncmp(i1, 360407, 2) | 0)) {
       i4 = i1 + 2 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 > i4 >>> 0) {
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i1 = i3 + 1 | 0;
        } else i1 = i3;
        if (i1 | 0) break;
        HEAP8[i28 + 424 >> 0] = 0;
        break L47;
       } while (0);
       i25 = HEAP32[i23 >> 2] | 0;
       HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
       HEAP32[i26 + 4 >> 2] = i25;
       _mystrtod(i26, i24) | 0;
       i28 = i28 + 424 | 0;
       i27 = ~~(+HEAPF64[i24 >> 3] * d18 + (1.0 - d18) * +(HEAP8[i28 >> 0] | 0) + .5);
       i27 = (i27 | 0) > 0 ? i27 : 0;
       HEAP8[i28 >> 0] = (i27 | 0) < 127 ? i27 : 127;
       break L47;
      }
      if ((HEAP8[i1 >> 0] | 0) == 98) {
       i4 = i1 + 1 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 <= i4 >>> 0) break;
        HEAP32[i27 + (i3 << 3) >> 2] = i4;
        HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
        i3 = i3 + 1 | 0;
       } while (0);
       i1 = HEAP32[i23 >> 2] | 0;
       HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
       HEAP32[i26 + 4 >> 2] = i1;
       _mystrtoi(i26, i24) | 0;
       i1 = HEAP32[i24 >> 2] | 0;
       if (!i3) i25 = 377; else if (!((i1 | 0) > 99 | (i1 | 1 | 0) == 1)) i25 = 377;
       if ((i25 | 0) == 377) i1 = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 32 >> 2] | 0;
       i4 = i28 + 504 | 0;
       HEAP32[i4 >> 2] = i1;
       i1 = HEAP32[i28 + 500 >> 2] | 0;
       i3 = i26 + 12 | 0;
       if ((HEAP8[i1 >> 0] | 0) == 64) {
        HEAP32[i3 >> 2] = 1;
        i1 = i1 + 1 | 0;
       } else HEAP32[i3 >> 2] = 0;
       i1 = ___strdup(i1) | 0;
       HEAP32[i26 >> 2] = i1;
       i1 = HEAP32[i4 >> 2] | 0;
       switch (i1 | 0) {
       case 1:
       case -1:
        {
         i1 = 700;
         break;
        }
       case 0:
        {
         i1 = 400;
         break;
        }
       default:
        {}
       }
       HEAP32[i26 + 4 >> 2] = i1;
       i1 = HEAP32[i28 + 508 >> 2] | 0;
       switch (i1 | 0) {
       case 1:
        {
         i1 = 100;
         break;
        }
       case 0:
        {
         i1 = 0;
         break;
        }
       default:
        {}
       }
       HEAP32[i26 + 8 >> 2] = i1;
       i27 = i28 + 220 | 0;
       _ass_cache_dec_ref(HEAP32[i27 >> 2] | 0);
       i28 = _ass_font_new(HEAP32[i28 + 728 >> 2] | 0, HEAP32[i28 >> 2] | 0, HEAP32[i28 + 4 >> 2] | 0, HEAP32[i28 + 8 >> 2] | 0, i26) | 0;
       HEAP32[i27 >> 2] = i28;
       break L47;
      }
      if ((HEAP8[i1 >> 0] | 0) == 105) {
       i4 = i1 + 1 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 <= i4 >>> 0) break;
        HEAP32[i27 + (i3 << 3) >> 2] = i4;
        HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
        i3 = i3 + 1 | 0;
       } while (0);
       i1 = HEAP32[i23 >> 2] | 0;
       HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
       HEAP32[i26 + 4 >> 2] = i1;
       _mystrtoi(i26, i24) | 0;
       i1 = HEAP32[i24 >> 2] | 0;
       if (!((i3 | 0) != 0 & (i1 | 1 | 0) == 1)) i1 = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 36 >> 2] | 0;
       i4 = i28 + 508 | 0;
       HEAP32[i4 >> 2] = i1;
       i1 = HEAP32[i28 + 500 >> 2] | 0;
       i3 = i26 + 12 | 0;
       if ((HEAP8[i1 >> 0] | 0) == 64) {
        HEAP32[i3 >> 2] = 1;
        i1 = i1 + 1 | 0;
       } else HEAP32[i3 >> 2] = 0;
       i1 = ___strdup(i1) | 0;
       HEAP32[i26 >> 2] = i1;
       i1 = HEAP32[i28 + 504 >> 2] | 0;
       switch (i1 | 0) {
       case 1:
       case -1:
        {
         i1 = 700;
         break;
        }
       case 0:
        {
         i1 = 400;
         break;
        }
       default:
        {}
       }
       HEAP32[i26 + 4 >> 2] = i1;
       i1 = HEAP32[i4 >> 2] | 0;
       switch (i1 | 0) {
       case 1:
        {
         i1 = 100;
         break;
        }
       case 0:
        {
         i1 = 0;
         break;
        }
       default:
        {}
       }
       HEAP32[i26 + 8 >> 2] = i1;
       i27 = i28 + 220 | 0;
       _ass_cache_dec_ref(HEAP32[i27 >> 2] | 0);
       i28 = _ass_font_new(HEAP32[i28 + 728 >> 2] | 0, HEAP32[i28 >> 2] | 0, HEAP32[i28 + 4 >> 2] | 0, HEAP32[i28 + 8 >> 2] | 0, i26) | 0;
       HEAP32[i27 >> 2] = i28;
       break L47;
      }
      do if (!(_strncmp(i1, 360410, 2) | 0)) {
       i4 = i1 + 2 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 <= i4 >>> 0) {
         i1 = i3;
         break;
        }
        HEAP32[i27 + (i3 << 3) >> 2] = i4;
        HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
        i1 = i3 + 1 | 0;
       } else i1 = i3; while (0);
      } else {
       if ((HEAP8[i1 >> 0] | 0) == 75) {
        i4 = i1 + 1 | 0;
        HEAP32[i22 >> 2] = i4;
        HEAP32[i26 >> 2] = i21;
        do if ((i3 | 0) < 8) {
         _rskip_spaces(i26, i4);
         i1 = HEAP32[i26 >> 2] | 0;
         if (i1 >>> 0 <= i4 >>> 0) {
          i1 = i3;
          break;
         }
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i1 = i3 + 1 | 0;
        } else i1 = i3; while (0);
        break;
       }
       if (!(_strncmp(i1, 360413, 2) | 0)) {
        i4 = i1 + 2 | 0;
        HEAP32[i22 >> 2] = i4;
        HEAP32[i26 >> 2] = i21;
        if ((i3 | 0) < 8) {
         _rskip_spaces(i26, i4);
         i1 = HEAP32[i26 >> 2] | 0;
         if (i1 >>> 0 > i4 >>> 0) {
          HEAP32[i27 + (i3 << 3) >> 2] = i4;
          HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
          i3 = i3 + 1 | 0;
         }
         if (!i3) i4 = 1e3; else i25 = 425;
        } else i25 = 425;
        if ((i25 | 0) == 425) {
         i4 = HEAP32[i23 >> 2] | 0;
         HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
         HEAP32[i26 + 4 >> 2] = i4;
         _mystrtod(i26, i24) | 0;
         i4 = ~~(+HEAPF64[i24 >> 3] * 10.0);
        }
        HEAP32[i28 + 480 >> 2] = 3;
        i1 = i28 + 484 | 0;
        i3 = HEAP32[i1 >> 2] | 0;
        if (i3 | 0) {
         i28 = i28 + 488 | 0;
         HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + i3;
        }
        HEAP32[i1 >> 2] = i4;
        break L47;
       }
       if ((HEAP8[i1 >> 0] | 0) == 107) {
        i4 = i1 + 1 | 0;
        HEAP32[i22 >> 2] = i4;
        HEAP32[i26 >> 2] = i21;
        if ((i3 | 0) < 8) {
         _rskip_spaces(i26, i4);
         i1 = HEAP32[i26 >> 2] | 0;
         if (i1 >>> 0 > i4 >>> 0) {
          HEAP32[i27 + (i3 << 3) >> 2] = i4;
          HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
          i3 = i3 + 1 | 0;
         }
         if (!i3) i4 = 1e3; else i25 = 435;
        } else i25 = 435;
        if ((i25 | 0) == 435) {
         i4 = HEAP32[i23 >> 2] | 0;
         HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
         HEAP32[i26 + 4 >> 2] = i4;
         _mystrtod(i26, i24) | 0;
         i4 = ~~(+HEAPF64[i24 >> 3] * 10.0);
        }
        HEAP32[i28 + 480 >> 2] = 1;
        i1 = i28 + 484 | 0;
        i3 = HEAP32[i1 >> 2] | 0;
        if (i3 | 0) {
         i28 = i28 + 488 | 0;
         HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + i3;
        }
        HEAP32[i1 >> 2] = i4;
        break L47;
       }
       if (!(_strncmp(i1, 360416, 4) | 0)) {
        i4 = i1 + 4 | 0;
        HEAP32[i22 >> 2] = i4;
        HEAP32[i26 >> 2] = i21;
        do if ((i3 | 0) < 8) {
         _rskip_spaces(i26, i4);
         i1 = HEAP32[i26 >> 2] | 0;
         if (i1 >>> 0 > i4 >>> 0) {
          HEAP32[i27 + (i3 << 3) >> 2] = i4;
          HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
          i3 = i3 + 1 | 0;
         }
         if (i3 | 0) {
          i25 = 445;
          break;
         }
         d5 = +HEAPF64[(HEAP32[i28 + 212 >> 2] | 0) + 96 >> 3];
         d2 = d5;
         i3 = i28 + 440 | 0;
         i1 = i28 + 448 | 0;
        } else i25 = 445; while (0);
        if ((i25 | 0) == 445) {
         i3 = HEAP32[i23 >> 2] | 0;
         HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
         HEAP32[i26 + 4 >> 2] = i3;
         _mystrtod(i26, i24) | 0;
         i3 = i28 + 440 | 0;
         d2 = 1.0 - d18;
         d20 = +HEAPF64[i24 >> 3] * d18;
         d5 = d20 + d2 * +HEAPF64[i3 >> 3];
         i1 = i28 + 448 | 0;
         d2 = d20 + d2 * +HEAPF64[i1 >> 3];
         d2 = d2 < 0.0 ? 0.0 : d2;
         d5 = d5 < 0.0 ? 0.0 : d5;
        }
        HEAPF64[i3 >> 3] = d5;
        HEAPF64[i1 >> 3] = d2;
        break L47;
       }
       if ((HEAP8[i1 >> 0] | 0) == 115) {
        i4 = i1 + 1 | 0;
        HEAP32[i22 >> 2] = i4;
        HEAP32[i26 >> 2] = i21;
        do if ((i3 | 0) < 8) {
         _rskip_spaces(i26, i4);
         i1 = HEAP32[i26 >> 2] | 0;
         if (i1 >>> 0 <= i4 >>> 0) break;
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i3 = i3 + 1 | 0;
        } while (0);
        i1 = HEAP32[i23 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
        HEAP32[i26 + 4 >> 2] = i1;
        _mystrtoi(i26, i24) | 0;
        i1 = HEAP32[i24 >> 2] | 0;
        if (!((i3 | 0) != 0 & (i1 | 1 | 0) == 1)) i1 = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 44 >> 2] | 0;
        i28 = i28 + 232 | 0;
        i27 = HEAP32[i28 >> 2] | 0;
        HEAP32[i28 >> 2] = i1 | 0 ? i27 | 2 : i27 & -3;
        break L47;
       }
       if ((HEAP8[i1 >> 0] | 0) == 117) {
        i4 = i1 + 1 | 0;
        HEAP32[i22 >> 2] = i4;
        HEAP32[i26 >> 2] = i21;
        do if ((i3 | 0) < 8) {
         _rskip_spaces(i26, i4);
         i1 = HEAP32[i26 >> 2] | 0;
         if (i1 >>> 0 <= i4 >>> 0) break;
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i3 = i3 + 1 | 0;
        } while (0);
        i1 = HEAP32[i23 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
        HEAP32[i26 + 4 >> 2] = i1;
        _mystrtoi(i26, i24) | 0;
        i1 = HEAP32[i24 >> 2] | 0;
        if (!((i3 | 0) != 0 & (i1 | 1 | 0) == 1)) i1 = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 40 >> 2] | 0;
        i28 = i28 + 232 | 0;
        i27 = HEAP32[i28 >> 2] | 0;
        HEAP32[i28 >> 2] = i1 | 0 ? i27 | 1 : i27 & -2;
        break L47;
       }
       if (!(_strncmp(i1, 358838, 3) | 0)) {
        i4 = i1 + 3 | 0;
        HEAP32[i22 >> 2] = i4;
        HEAP32[i26 >> 2] = i21;
        do if ((i3 | 0) < 8) {
         _rskip_spaces(i26, i4);
         i1 = HEAP32[i26 >> 2] | 0;
         if (i1 >>> 0 <= i4 >>> 0) break;
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
        } while (0);
        i25 = HEAP32[i23 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
        HEAP32[i26 + 4 >> 2] = i25;
        _mystrtod(i26, i24) | 0;
        HEAPF64[i28 + 464 >> 3] = +HEAPF64[i24 >> 3];
        break L47;
       }
       if ((HEAP8[i1 >> 0] | 0) == 112) {
        i4 = i1 + 1 | 0;
        HEAP32[i22 >> 2] = i4;
        HEAP32[i26 >> 2] = i21;
        do if ((i3 | 0) < 8) {
         _rskip_spaces(i26, i4);
         i1 = HEAP32[i26 >> 2] | 0;
         if (i1 >>> 0 <= i4 >>> 0) break;
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
        } while (0);
        i25 = HEAP32[i23 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
        HEAP32[i26 + 4 >> 2] = i25;
        _mystrtoi(i26, i24) | 0;
        i27 = HEAP32[i24 >> 2] | 0;
        HEAP32[i28 + 456 >> 2] = (i27 | 0) > 0 ? i27 : 0;
        break L47;
       }
       if ((HEAP8[i1 >> 0] | 0) == 113) {
        i4 = i1 + 1 | 0;
        HEAP32[i22 >> 2] = i4;
        HEAP32[i26 >> 2] = i21;
        do if ((i3 | 0) < 8) {
         _rskip_spaces(i26, i4);
         i1 = HEAP32[i26 >> 2] | 0;
         if (i1 >>> 0 <= i4 >>> 0) break;
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i3 = i3 + 1 | 0;
        } while (0);
        i1 = HEAP32[i23 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
        HEAP32[i26 + 4 >> 2] = i1;
        _mystrtoi(i26, i24) | 0;
        i1 = HEAP32[i24 >> 2] | 0;
        if (!((i3 | 0) != 0 & i1 >>> 0 < 4)) i1 = HEAP32[(HEAP32[i28 + 160 >> 2] | 0) + 56 >> 2] | 0;
        HEAP32[i28 + 516 >> 2] = i1;
        break L47;
       }
       if (_strncmp(i1, 360421, 2) | 0) break L47;
       i4 = i1 + 2 | 0;
       HEAP32[i22 >> 2] = i4;
       HEAP32[i26 >> 2] = i21;
       do if ((i3 | 0) < 8) {
        _rskip_spaces(i26, i4);
        i1 = HEAP32[i26 >> 2] | 0;
        if (i1 >>> 0 > i4 >>> 0) {
         HEAP32[i27 + (i3 << 3) >> 2] = i4;
         HEAP32[i27 + (i3 << 3) + 4 >> 2] = i1;
         i3 = i3 + 1 | 0;
        }
        if (i3 | 0) {
         i25 = 485;
         break;
        }
        i1 = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 120 >> 2] | 0;
       } else i25 = 485; while (0);
       if ((i25 | 0) == 485) {
        i1 = HEAP32[i23 >> 2] | 0;
        HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
        HEAP32[i26 + 4 >> 2] = i1;
        _mystrtoi(i26, i24) | 0;
        i1 = HEAP32[i24 >> 2] | 0;
       }
       HEAP32[i28 + 520 >> 2] = i1;
       break L47;
      } while (0);
      if (!i1) i1 = 1e3; else {
       i1 = HEAP32[i23 >> 2] | 0;
       HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
       HEAP32[i26 + 4 >> 2] = i1;
       _mystrtod(i26, i24) | 0;
       i1 = ~~(+HEAPF64[i24 >> 3] * 10.0);
      }
      HEAP32[i28 + 480 >> 2] = 2;
      i3 = i28 + 484 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (i4 | 0) {
       i28 = i28 + 488 | 0;
       HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + i4;
      }
      HEAP32[i3 >> 2] = i1;
      break L47;
     } while (0);
     if (!i1) {
      i27 = i28 + 384 | 0;
      i28 = HEAP32[(HEAP32[i28 + 212 >> 2] | 0) + 16 >> 2] | 0;
      HEAP32[i27 >> 2] = i28 & -16777216 | HEAP32[i27 >> 2] & 255 | i28 & 16711680 | i28 & 65280;
      break L47;
     } else {
      i26 = _parse_color_tag(HEAP32[i27 >> 2] | 0) | 0;
      i28 = i28 + 384 | 0;
      i27 = HEAP32[i28 >> 2] | 0;
      d20 = 1.0 - d18;
      HEAP32[i28 >> 2] = ~~(+(i26 >>> 24 >>> 0) * d18 + d20 * +(i27 >>> 24 >>> 0)) >>> 0 << 24 | i27 & 255 | ~~(+((i26 >>> 16 & 255) >>> 0) * d18 + d20 * +((i27 >>> 16 & 255) >>> 0)) >>> 0 << 16 | ~~(+((i26 >>> 8 & 255) >>> 0) * d18 + d20 * +((i27 >>> 8 & 255) >>> 0)) >>> 0 << 8;
      break L47;
     }
    } while (0);
    HEAP32[i22 >> 2] = i1 + i4;
    switch (i3 | 0) {
    case 2:
     {
      i16 = HEAP32[i23 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
      HEAP32[i26 + 4 >> 2] = i16;
      _mystrtoll(i26, i24) | 0;
      i16 = i24;
      i17 = HEAP32[i16 >> 2] | 0;
      i16 = HEAP32[i16 + 4 >> 2] | 0;
      i6 = HEAP32[i13 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 + 8 >> 2];
      HEAP32[i26 + 4 >> 2] = i6;
      _mystrtoll(i26, i24) | 0;
      i6 = i24;
      i1 = 255;
      i14 = 0;
      i15 = 255;
      i11 = -1;
      i4 = -1;
      i8 = -1;
      i3 = -1;
      i7 = HEAP32[i6 >> 2] | 0;
      i6 = HEAP32[i6 + 4 >> 2] | 0;
      break;
     }
    case 7:
     {
      i1 = HEAP32[i23 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
      HEAP32[i26 + 4 >> 2] = i1;
      _mystrtoi(i26, i24) | 0;
      i1 = HEAP32[i24 >> 2] | 0;
      i23 = HEAP32[i13 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 + 8 >> 2];
      HEAP32[i26 + 4 >> 2] = i23;
      _mystrtoi(i26, i24) | 0;
      i23 = HEAP32[i24 >> 2] | 0;
      i25 = HEAP32[i12 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 + 16 >> 2];
      HEAP32[i26 + 4 >> 2] = i25;
      _mystrtoi(i26, i24) | 0;
      i25 = HEAP32[i24 >> 2] | 0;
      i3 = HEAP32[i11 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 + 24 >> 2];
      HEAP32[i26 + 4 >> 2] = i3;
      _mystrtoll(i26, i24) | 0;
      i3 = i24;
      i4 = HEAP32[i3 >> 2] | 0;
      i3 = HEAP32[i3 + 4 >> 2] | 0;
      i16 = HEAP32[i14 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 + 32 >> 2];
      HEAP32[i26 + 4 >> 2] = i16;
      _mystrtoll(i26, i24) | 0;
      i16 = i24;
      i17 = HEAP32[i16 >> 2] | 0;
      i16 = HEAP32[i16 + 4 >> 2] | 0;
      i6 = HEAP32[i15 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 + 40 >> 2];
      HEAP32[i26 + 4 >> 2] = i6;
      _mystrtoll(i26, i24) | 0;
      i6 = i24;
      i7 = HEAP32[i6 >> 2] | 0;
      i6 = HEAP32[i6 + 4 >> 2] | 0;
      i8 = HEAP32[i10 >> 2] | 0;
      HEAP32[i26 >> 2] = HEAP32[i27 + 48 >> 2];
      HEAP32[i26 + 4 >> 2] = i8;
      _mystrtoll(i26, i24) | 0;
      i8 = i24;
      i14 = i23;
      i15 = i25;
      i11 = HEAP32[i8 >> 2] | 0;
      i8 = HEAP32[i8 + 4 >> 2] | 0;
      break;
     }
    default:
     break L47;
    }
    if ((i4 & i11 | 0) == -1 & (i3 & i8 | 0) == -1) {
     i8 = (HEAP32[i28 + 208 >> 2] | 0) + 8 | 0;
     i11 = HEAP32[i8 >> 2] | 0;
     i8 = HEAP32[i8 + 4 >> 2] | 0;
     i7 = _i64Subtract(i11 | 0, i8 | 0, i7 | 0, i6 | 0) | 0;
     i3 = 0;
     i4 = 0;
     i6 = tempRet0;
    }
    i12 = i28 + 216 | 0;
    i13 = HEAP32[i12 >> 2] | 0;
    if (i13 & 1 | 0) break L47;
    i10 = i28 + 168 | 0;
    i9 = HEAP32[i28 + 208 >> 2] | 0;
    i9 = _i64Subtract(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0) | 0;
    i10 = tempRet0;
    do if (!((i10 | 0) < (i3 | 0) | (i10 | 0) == (i3 | 0) & i9 >>> 0 < i4 >>> 0)) {
     if ((i10 | 0) < (i16 | 0) | (i10 | 0) == (i16 | 0) & i9 >>> 0 < i17 >>> 0) {
      i27 = _i64Subtract(i9 | 0, i10 | 0, i4 | 0, i3 | 0) | 0;
      d20 = +(i27 >>> 0) + 4294967296.0 * +(tempRet0 | 0);
      i27 = _i64Subtract(i17 | 0, i16 | 0, i4 | 0, i3 | 0) | 0;
      d20 = d20 / (+(i27 >>> 0) + 4294967296.0 * +(tempRet0 | 0));
      i1 = ~~(+(i14 | 0) * d20 + +(i1 | 0) * (1.0 - d20));
      break;
     }
     if ((i10 | 0) < (i6 | 0) | (i10 | 0) == (i6 | 0) & i9 >>> 0 < i7 >>> 0) {
      i1 = i14;
      break;
     }
     if (!((i10 | 0) < (i8 | 0) | (i10 | 0) == (i8 | 0) & i9 >>> 0 < i11 >>> 0)) {
      i1 = i15;
      break;
     }
     i1 = _i64Subtract(i9 | 0, i10 | 0, i7 | 0, i6 | 0) | 0;
     d20 = +(i1 >>> 0) + 4294967296.0 * +(tempRet0 | 0);
     i1 = _i64Subtract(i11 | 0, i8 | 0, i7 | 0, i6 | 0) | 0;
     d20 = d20 / (+(i1 >>> 0) + 4294967296.0 * +(tempRet0 | 0));
     i1 = ~~(+(i15 | 0) * d20 + +(i14 | 0) * (1.0 - d20));
    } while (0);
    HEAP32[i28 + 420 >> 2] = i1;
    HEAP32[i12 >> 2] = i13 | 1;
    break L47;
   } while (0);
   if (!i1) {
    i1 = i28 + 264 | 0;
    d2 = +HEAPF64[(HEAP32[i28 + 212 >> 2] | 0) + 72 >> 3] * 3.141592653589793 / 180.0;
   } else {
    i1 = HEAP32[i23 >> 2] | 0;
    HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
    HEAP32[i26 + 4 >> 2] = i1;
    _mystrtod(i26, i24) | 0;
    i28 = i28 + 264 | 0;
    i1 = i28;
    d2 = +HEAPF64[i24 >> 3] * .017453292519943295 * d18 + (1.0 - d18) * +HEAPF64[i28 >> 3];
   }
   HEAPF64[i1 >> 3] = d2;
  } while (0);
  i1 = HEAP32[i29 >> 2] | 0;
 }
 i29 = i1;
 STACKTOP = i30;
 return i29 | 0;
}

function _big2_contentTok(i35, i14, i2, i40) {
 i35 = i35 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i40 = i40 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i41 = 0;
 i41 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i34 = i41;
 if ((i14 | 0) == (i2 | 0)) {
  i40 = -4;
  STACKTOP = i41;
  return i40 | 0;
 }
 i4 = i14;
 i39 = i2 - i4 | 0;
 i9 = (i39 & 1 | 0) == 0;
 i39 = i39 & -2;
 i38 = (i39 | 0) == 0;
 i39 = i9 | i38 ? i2 : i14 + i39 | 0;
 if (!(i9 | i38 ^ 1)) {
  i40 = -1;
  STACKTOP = i41;
  return i40 | 0;
 }
 i2 = HEAP8[i14 + 1 >> 0] | 0;
 L7 : do switch (HEAP8[i14 >> 0] | 0) {
 case 0:
  {
   i38 = i35 + 76 | 0;
   switch (HEAP8[i38 + (i2 & 255) >> 0] | 0) {
   case 7:
    {
     i37 = 262;
     break L7;
    }
   case 8:
   case 1:
   case 0:
    {
     i37 = 264;
     break L7;
    }
   case 2:
    {
     i6 = i14 + 2 | 0;
     if ((i6 | 0) == (i39 | 0)) {
      i40 = -1;
      STACKTOP = i41;
      return i40 | 0;
     }
     i9 = HEAP8[i6 >> 0] | 0;
     L14 : do switch (i9 << 24 >> 24) {
     case 0:
      {
       i1 = HEAP8[i14 + 3 >> 0] | 0;
       switch (HEAP8[i38 + (i1 & 255) >> 0] | 0) {
       case 29:
        {
         i10 = i1;
         i37 = 11;
         break L14;
        }
       case 24:
       case 22:
        break L14;
       case 7:
        {
         i37 = 19;
         break L14;
        }
       case 5:
        {
         if ((i39 - i6 | 0) < 2) {
          i40 = -2;
          STACKTOP = i41;
          return i40 | 0;
         }
         HEAP32[i40 >> 2] = i6;
         i40 = 0;
         STACKTOP = i41;
         return i40 | 0;
        }
       case 6:
        {
         if ((i39 - i6 | 0) < 3) {
          i40 = -2;
          STACKTOP = i41;
          return i40 | 0;
         }
         HEAP32[i40 >> 2] = i6;
         i40 = 0;
         STACKTOP = i41;
         return i40 | 0;
        }
       case 16:
        {
         i1 = i14 + 4 | 0;
         if ((i1 | 0) == (i39 | 0)) {
          i40 = -1;
          STACKTOP = i41;
          return i40 | 0;
         }
         L32 : do if (!(HEAP8[i1 >> 0] | 0)) {
          switch (HEAP8[i38 + (HEAPU8[i14 + 5 >> 0] | 0) >> 0] | 0) {
          case 27:
           break;
          case 20:
           {
            i1 = i14 + 6 | 0;
            if ((i39 - i1 | 0) < 12) {
             i40 = -1;
             STACKTOP = i41;
             return i40 | 0;
            }
            do if (!(HEAP8[i1 >> 0] | 0)) if ((HEAP8[i14 + 7 >> 0] | 0) == 67) {
             i1 = i14 + 8 | 0;
             if (!(HEAP8[i1 >> 0] | 0)) if ((HEAP8[i14 + 9 >> 0] | 0) == 68) {
              i1 = i14 + 10 | 0;
              if (!(HEAP8[i1 >> 0] | 0)) if ((HEAP8[i14 + 11 >> 0] | 0) == 65) {
               i1 = i14 + 12 | 0;
               if (!(HEAP8[i1 >> 0] | 0)) {
                if ((HEAP8[i14 + 13 >> 0] | 0) != 84) {
                 i2 = 0;
                 break;
                }
                i1 = i14 + 14 | 0;
                if (HEAP8[i1 >> 0] | 0) {
                 i2 = 0;
                 break;
                }
                if ((HEAP8[i14 + 15 >> 0] | 0) != 65) {
                 i2 = 0;
                 break;
                }
                i1 = i14 + 16 | 0;
                if (HEAP8[i1 >> 0] | 0) {
                 i2 = 0;
                 break;
                }
                i39 = (HEAP8[i14 + 17 >> 0] | 0) == 91;
                i2 = i39 ? 8 : 0;
                i1 = i39 ? i14 + 18 | 0 : i1;
               } else i2 = 0;
              } else i2 = 0; else i2 = 0;
             } else i2 = 0; else i2 = 0;
            } else i2 = 0; else i2 = 0; while (0);
            HEAP32[i40 >> 2] = i1;
            i40 = i2;
            STACKTOP = i41;
            return i40 | 0;
           }
          default:
           break L32;
          }
          i4 = i14 + 6 | 0;
          if ((i4 | 0) == (i39 | 0)) {
           i40 = -1;
           STACKTOP = i41;
           return i40 | 0;
          }
          if (!(HEAP8[i4 >> 0] | 0)) if ((HEAP8[i14 + 7 >> 0] | 0) == 45) {
           i1 = i14 + 8 | 0;
           if ((i1 | 0) == (i39 | 0)) {
            i40 = -1;
            STACKTOP = i41;
            return i40 | 0;
           }
           i3 = i39;
           i2 = i1;
           L63 : while (1) {
            i1 = HEAP8[i2 + 1 >> 0] | 0;
            L65 : do switch (HEAP8[i2 >> 0] | 0) {
            case -33:
            case -34:
            case -35:
            case -36:
             {
              i37 = 39;
              break L63;
             }
            case 0:
             switch (HEAP8[i38 + (i1 & 255) >> 0] | 0) {
             case 8:
             case 1:
             case 0:
              {
               i37 = 39;
               break L63;
              }
             case 7:
              {
               i37 = 37;
               break L65;
              }
             case 5:
              {
               if ((i3 - i2 | 0) < 2) {
                i19 = -2;
                i37 = 291;
                break L63;
               }
               i7 = i2 + 2 | 0;
               break L65;
              }
             case 6:
              {
               if ((i3 - i2 | 0) < 3) {
                i19 = -2;
                i37 = 291;
                break L63;
               }
               i7 = i2 + 3 | 0;
               break L65;
              }
             case 27:
              {
               i1 = i2 + 2 | 0;
               if ((i1 | 0) == (i39 | 0)) {
                i19 = -1;
                i37 = 291;
                break L63;
               }
               if (HEAP8[i1 >> 0] | 0) {
                i7 = i1;
                break L65;
               }
               if ((HEAP8[i2 + 3 >> 0] | 0) == 45) {
                i37 = 44;
                break L63;
               } else {
                i7 = i1;
                break L65;
               }
              }
             default:
              {
               i37 = 49;
               break L65;
              }
             }
            case -37:
            case -38:
            case -39:
            case -40:
             {
              i37 = 37;
              break;
             }
            case -1:
             {
              if ((i1 & 255) > 253) {
               i37 = 39;
               break L63;
              } else i37 = 49;
              break;
             }
            default:
             i37 = 49;
            } while (0);
            if ((i37 | 0) == 37) {
             i37 = 0;
             if ((i3 - i2 | 0) < 4) {
              i19 = -2;
              i37 = 291;
              break;
             }
             i7 = i2 + 4 | 0;
            } else if ((i37 | 0) == 49) {
             i37 = 0;
             i7 = i2 + 2 | 0;
            }
            if ((i7 | 0) == (i39 | 0)) {
             i19 = -1;
             i37 = 291;
             break;
            } else i2 = i7;
           }
           if ((i37 | 0) == 39) {
            HEAP32[i40 >> 2] = i2;
            i40 = 0;
            STACKTOP = i41;
            return i40 | 0;
           } else if ((i37 | 0) == 44) {
            i1 = i2 + 4 | 0;
            if ((i1 | 0) == (i39 | 0)) {
             i40 = -1;
             STACKTOP = i41;
             return i40 | 0;
            }
            if (!(HEAP8[i1 >> 0] | 0)) if ((HEAP8[i2 + 5 >> 0] | 0) == 62) {
             HEAP32[i40 >> 2] = i2 + 6;
             i40 = 13;
             STACKTOP = i41;
             return i40 | 0;
            }
            HEAP32[i40 >> 2] = i1;
            i40 = 0;
            STACKTOP = i41;
            return i40 | 0;
           } else if ((i37 | 0) == 291) {
            STACKTOP = i41;
            return i19 | 0;
           }
          }
          HEAP32[i40 >> 2] = i4;
          i40 = 0;
          STACKTOP = i41;
          return i40 | 0;
         } while (0);
         HEAP32[i40 >> 2] = i1;
         i40 = 0;
         STACKTOP = i41;
         return i40 | 0;
        }
       case 15:
        {
         i40 = _big2_scanPi(i35, i14 + 4 | 0, i39, i40) | 0;
         STACKTOP = i41;
         return i40 | 0;
        }
       case 17:
        {
         i4 = i14 + 4 | 0;
         if ((i4 | 0) == (i39 | 0)) {
          i40 = -1;
          STACKTOP = i41;
          return i40 | 0;
         }
         i2 = HEAP8[i4 >> 0] | 0;
         L109 : do switch (i2 << 24 >> 24) {
         case 0:
          {
           i1 = HEAP8[i14 + 5 >> 0] | 0;
           switch (HEAP8[i38 + (i1 & 255) >> 0] | 0) {
           case 29:
            {
             i5 = i1;
             i37 = 72;
             break L109;
            }
           case 24:
           case 22:
            break L109;
           case 7:
            {
             i37 = 78;
             break L109;
            }
           case 5:
            {
             if ((i39 - i4 | 0) < 2) {
              i40 = -2;
              STACKTOP = i41;
              return i40 | 0;
             }
             HEAP32[i40 >> 2] = i4;
             i40 = 0;
             STACKTOP = i41;
             return i40 | 0;
            }
           case 6:
            {
             if ((i39 - i4 | 0) < 3) {
              i40 = -2;
              STACKTOP = i41;
              return i40 | 0;
             }
             HEAP32[i40 >> 2] = i4;
             i40 = 0;
             STACKTOP = i41;
             return i40 | 0;
            }
           default:
            {
             i37 = 80;
             break L109;
            }
           }
          }
         case -37:
         case -38:
         case -39:
         case -40:
          {
           i37 = 78;
           break;
          }
         case -33:
         case -34:
         case -35:
         case -36:
          {
           i37 = 80;
           break;
          }
         case -1:
          {
           i1 = HEAP8[i14 + 5 >> 0] | 0;
           if ((i1 & 255) > 253) i37 = 80; else {
            i5 = i1;
            i37 = 72;
           }
           break;
          }
         default:
          {
           i5 = HEAP8[i14 + 5 >> 0] | 0;
           i37 = 72;
          }
         } while (0);
         if ((i37 | 0) == 72) {
          i7 = i5 & 255;
          if (!(1 << (i7 & 31) & HEAP32[25356 + ((HEAPU8[344737 + (i2 & 255) >> 0] << 3 | i7 >>> 5) << 2) >> 2])) {
           HEAP32[i40 >> 2] = i4;
           i40 = 0;
           STACKTOP = i41;
           return i40 | 0;
          }
         } else if ((i37 | 0) == 78) {
          if ((i39 - i4 | 0) < 4) {
           i40 = -2;
           STACKTOP = i41;
           return i40 | 0;
          }
          HEAP32[i40 >> 2] = i4;
          i40 = 0;
          STACKTOP = i41;
          return i40 | 0;
         } else if ((i37 | 0) == 80) {
          HEAP32[i40 >> 2] = i4;
          i40 = 0;
          STACKTOP = i41;
          return i40 | 0;
         }
         i3 = i14 + 6 | 0;
         if ((i3 | 0) == (i39 | 0)) {
          i40 = -1;
          STACKTOP = i41;
          return i40 | 0;
         }
         L138 : while (1) {
          i2 = HEAP8[i3 >> 0] | 0;
          switch (i2 << 24 >> 24) {
          case -37:
          case -38:
          case -39:
          case -40:
           {
            i37 = 93;
            break L138;
           }
          case -33:
          case -34:
          case -35:
          case -36:
           {
            i37 = 101;
            break L138;
           }
          case 0:
           {
            i1 = HEAP8[i4 + 3 >> 0] | 0;
            switch (HEAP8[i38 + (i1 & 255) >> 0] | 0) {
            case 7:
             {
              i37 = 93;
              break L138;
             }
            case 5:
             {
              i37 = 89;
              break L138;
             }
            case 6:
             {
              i37 = 91;
              break L138;
             }
            case 10:
            case 9:
            case 21:
             {
              i37 = 85;
              break L138;
             }
            case 11:
             {
              i37 = 100;
              break L138;
             }
            case 29:
             {
              i8 = i1;
              i37 = 86;
              break;
             }
            case 23:
            case 27:
            case 26:
            case 25:
            case 24:
            case 22:
             break;
            default:
             {
              i37 = 101;
              break L138;
             }
            }
            break;
           }
          case -1:
           {
            i1 = HEAP8[i4 + 3 >> 0] | 0;
            if ((i1 & 255) > 253) {
             i37 = 101;
             break L138;
            } else {
             i8 = i1;
             i37 = 86;
            }
            break;
           }
          default:
           {
            i8 = HEAP8[i4 + 3 >> 0] | 0;
            i37 = 86;
           }
          }
          if ((i37 | 0) == 86) {
           i37 = 0;
           i7 = i8 & 255;
           if (!(1 << (i7 & 31) & HEAP32[25356 + ((HEAPU8[344993 + (i2 & 255) >> 0] << 3 | i7 >>> 5) << 2) >> 2])) {
            i37 = 88;
            break;
           }
          }
          i1 = i3 + 2 | 0;
          if ((i1 | 0) == (i39 | 0)) {
           i19 = -1;
           i37 = 291;
           break;
          } else {
           i4 = i3;
           i3 = i1;
          }
         }
         if ((i37 | 0) == 85) {
          i1 = i3 + 2 | 0;
          if ((i1 | 0) == (i39 | 0)) {
           i40 = -1;
           STACKTOP = i41;
           return i40 | 0;
          } else i2 = i1;
          L169 : while (1) {
           if (HEAP8[i2 >> 0] | 0) {
            i37 = 99;
            break;
           }
           switch (HEAP8[i38 + (HEAPU8[i3 + 3 >> 0] | 0) >> 0] | 0) {
           case 11:
            {
             i37 = 98;
             break L169;
            }
           case 10:
           case 9:
           case 21:
            break;
           default:
            {
             i37 = 99;
             break L169;
            }
           }
           i1 = i2 + 2 | 0;
           if ((i1 | 0) == (i39 | 0)) {
            i19 = -1;
            i37 = 291;
            break;
           } else {
            i3 = i2;
            i2 = i1;
           }
          }
          if ((i37 | 0) == 98) {
           HEAP32[i40 >> 2] = i3 + 4;
           i40 = 5;
           STACKTOP = i41;
           return i40 | 0;
          } else if ((i37 | 0) == 99) {
           HEAP32[i40 >> 2] = i2;
           i40 = 0;
           STACKTOP = i41;
           return i40 | 0;
          } else if ((i37 | 0) == 291) {
           STACKTOP = i41;
           return i19 | 0;
          }
         } else if ((i37 | 0) == 88) {
          HEAP32[i40 >> 2] = i3;
          i40 = 0;
          STACKTOP = i41;
          return i40 | 0;
         } else if ((i37 | 0) == 89) {
          if ((i39 - i3 | 0) < 2) {
           i40 = -2;
           STACKTOP = i41;
           return i40 | 0;
          }
          HEAP32[i40 >> 2] = i3;
          i40 = 0;
          STACKTOP = i41;
          return i40 | 0;
         } else if ((i37 | 0) == 91) {
          if ((i39 - i3 | 0) < 3) {
           i40 = -2;
           STACKTOP = i41;
           return i40 | 0;
          }
          HEAP32[i40 >> 2] = i3;
          i40 = 0;
          STACKTOP = i41;
          return i40 | 0;
         } else if ((i37 | 0) == 93) {
          if ((i39 - i3 | 0) < 4) {
           i40 = -2;
           STACKTOP = i41;
           return i40 | 0;
          }
          HEAP32[i40 >> 2] = i3;
          i40 = 0;
          STACKTOP = i41;
          return i40 | 0;
         } else if ((i37 | 0) == 100) {
          HEAP32[i40 >> 2] = i4 + 4;
          i40 = 5;
          STACKTOP = i41;
          return i40 | 0;
         } else if ((i37 | 0) == 101) {
          HEAP32[i40 >> 2] = i3;
          i40 = 0;
          STACKTOP = i41;
          return i40 | 0;
         } else if ((i37 | 0) == 291) {
          STACKTOP = i41;
          return i19 | 0;
         }
         break;
        }
       default:
        {
         i37 = 102;
         break L14;
        }
       }
       break;
      }
     case -37:
     case -38:
     case -39:
     case -40:
      {
       i37 = 19;
       break;
      }
     case -33:
     case -34:
     case -35:
     case -36:
      {
       i37 = 102;
       break;
      }
     case -1:
      {
       i1 = HEAP8[i14 + 3 >> 0] | 0;
       if ((i1 & 255) > 253) i37 = 102; else {
        i10 = i1;
        i37 = 11;
       }
       break;
      }
     default:
      {
       i10 = HEAP8[i14 + 3 >> 0] | 0;
       i37 = 11;
      }
     } while (0);
     if ((i37 | 0) == 11) {
      i10 = i10 & 255;
      if (!(1 << (i10 & 31) & HEAP32[25356 + ((HEAPU8[344737 + (i9 & 255) >> 0] << 3 | i10 >>> 5) << 2) >> 2])) {
       HEAP32[i40 >> 2] = i6;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     } else if ((i37 | 0) == 19) {
      if ((i39 - i6 | 0) < 4) {
       i40 = -2;
       STACKTOP = i41;
       return i40 | 0;
      }
      HEAP32[i40 >> 2] = i6;
      i40 = 0;
      STACKTOP = i41;
      return i40 | 0;
     } else if ((i37 | 0) == 102) {
      HEAP32[i40 >> 2] = i6;
      i40 = 0;
      STACKTOP = i41;
      return i40 | 0;
     }
     i1 = i14 + 4 | 0;
     if ((i1 | 0) == (i39 | 0)) {
      i40 = -1;
      STACKTOP = i41;
      return i40 | 0;
     } else i3 = 0;
     L198 : while (1) {
      i4 = i1;
      L200 : while (1) {
       i2 = HEAP8[i4 >> 0] | 0;
       switch (i2 << 24 >> 24) {
       case -33:
       case -34:
       case -35:
       case -36:
        {
         i37 = 244;
         break L198;
        }
       case -37:
       case -38:
       case -39:
       case -40:
        {
         i37 = 115;
         break L198;
        }
       case 0:
        {
         i1 = HEAP8[i4 + 1 >> 0] | 0;
         switch (HEAP8[i38 + (i1 & 255) >> 0] | 0) {
         case 5:
          {
           i37 = 111;
           break L198;
          }
         case 6:
          {
           i37 = 113;
           break L198;
          }
         case 7:
          {
           i37 = 115;
           break L198;
          }
         case 10:
         case 9:
         case 21:
          {
           i37 = 107;
           break L198;
          }
         case 11:
          {
           i15 = i4;
           i37 = 238;
           break L198;
          }
         case 17:
          {
           i16 = i4;
           break L198;
          }
         case 23:
          break L200;
         case 29:
          {
           i11 = i1;
           i37 = 108;
           break;
          }
         case 27:
         case 26:
         case 25:
         case 24:
         case 22:
          break;
         default:
          {
           i37 = 244;
           break L198;
          }
         }
         break;
        }
       case -1:
        {
         i1 = HEAP8[i4 + 1 >> 0] | 0;
         if ((i1 & 255) > 253) {
          i37 = 244;
          break L198;
         } else {
          i11 = i1;
          i37 = 108;
         }
         break;
        }
       default:
        {
         i11 = HEAP8[i4 + 1 >> 0] | 0;
         i37 = 108;
        }
       }
       if ((i37 | 0) == 108) {
        i37 = 0;
        i14 = i11 & 255;
        if (!(1 << (i14 & 31) & HEAP32[25356 + ((HEAPU8[344993 + (i2 & 255) >> 0] << 3 | i14 >>> 5) << 2) >> 2])) {
         i37 = 109;
         break L198;
        }
       }
       i1 = i4 + 2 | 0;
       if ((i1 | 0) == (i39 | 0)) {
        i19 = -1;
        i37 = 291;
        break L198;
       } else i4 = i1;
      }
      if (i3 | 0) {
       i37 = 118;
       break;
      }
      i13 = i4 + 2 | 0;
      if ((i13 | 0) == (i39 | 0)) {
       i19 = -1;
       i37 = 291;
       break;
      }
      i2 = HEAP8[i13 >> 0] | 0;
      switch (i2 << 24 >> 24) {
      case -33:
      case -34:
      case -35:
      case -36:
       {
        i37 = 133;
        break L198;
       }
      case -37:
      case -38:
      case -39:
      case -40:
       {
        i37 = 131;
        break L198;
       }
      case 0:
       {
        i1 = HEAP8[i4 + 3 >> 0] | 0;
        switch (HEAP8[i38 + (i1 & 255) >> 0] | 0) {
        case 5:
         {
          i37 = 127;
          break L198;
         }
        case 6:
         {
          i37 = 129;
          break L198;
         }
        case 7:
         {
          i37 = 131;
          break L198;
         }
        case 29:
         {
          i12 = i1;
          i37 = 124;
          break;
         }
        case 24:
        case 22:
         break;
        default:
         {
          i37 = 133;
          break L198;
         }
        }
        break;
       }
      case -1:
       {
        i1 = HEAP8[i4 + 3 >> 0] | 0;
        if ((i1 & 255) > 253) {
         i37 = 133;
         break L198;
        } else {
         i12 = i1;
         i37 = 124;
        }
        break;
       }
      default:
       {
        i12 = HEAP8[i4 + 3 >> 0] | 0;
        i37 = 124;
       }
      }
      if ((i37 | 0) == 124) {
       i37 = 0;
       i14 = i12 & 255;
       if (!(1 << (i14 & 31) & HEAP32[25356 + ((HEAPU8[344737 + (i2 & 255) >> 0] << 3 | i14 >>> 5) << 2) >> 2])) {
        i37 = 125;
        break;
       }
      }
      i1 = i4 + 4 | 0;
      if ((i1 | 0) == (i39 | 0)) {
       i19 = -1;
       i37 = 291;
       break;
      } else i3 = 1;
     }
     L219 : switch (i37 | 0) {
     case 107:
      {
       i1 = i4 + 2 | 0;
       if ((i1 | 0) == (i39 | 0)) {
        i40 = -1;
        STACKTOP = i41;
        return i40 | 0;
       } else i3 = i1;
       L263 : while (1) {
        i2 = HEAP8[i3 >> 0] | 0;
        switch (i2 << 24 >> 24) {
        case -37:
        case -38:
        case -39:
        case -40:
         {
          i37 = 235;
          break L263;
         }
        case -33:
        case -34:
        case -35:
        case -36:
         {
          i37 = 237;
          break L263;
         }
        case -1:
         {
          i37 = 136;
          break L263;
         }
        case 0:
         break;
        default:
         {
          i37 = 135;
          break L263;
         }
        }
        i1 = HEAP8[i4 + 3 >> 0] | 0;
        switch (HEAP8[i38 + (i1 & 255) >> 0] | 0) {
        case 11:
         {
          i15 = i3;
          i37 = 238;
          break L219;
         }
        case 17:
         {
          i16 = i3;
          break L219;
         }
        case 7:
         {
          i37 = 235;
          break L263;
         }
        case 29:
         {
          i17 = 0;
          i18 = i1;
          i37 = 139;
          break L263;
         }
        case 24:
        case 22:
         break L263;
        case 5:
         {
          i37 = 231;
          break L263;
         }
        case 6:
         {
          i37 = 233;
          break L263;
         }
        case 10:
        case 9:
        case 21:
         break;
        default:
         {
          i37 = 237;
          break L263;
         }
        }
        i1 = i3 + 2 | 0;
        if ((i1 | 0) == (i39 | 0)) {
         i19 = -1;
         i37 = 291;
         break;
        } else {
         i4 = i3;
         i3 = i1;
        }
       }
       if ((i37 | 0) == 135) {
        i17 = i2;
        i18 = HEAP8[i4 + 3 >> 0] | 0;
        i37 = 139;
       } else if ((i37 | 0) == 136) {
        i1 = HEAP8[i4 + 3 >> 0] | 0;
        if ((i1 & 255) > 253) i37 = 237; else {
         i17 = -1;
         i18 = i1;
         i37 = 139;
        }
       } else if ((i37 | 0) == 231) {
        if ((i39 - i3 | 0) < 2) {
         i40 = -2;
         STACKTOP = i41;
         return i40 | 0;
        }
        HEAP32[i40 >> 2] = i3;
        i40 = 0;
        STACKTOP = i41;
        return i40 | 0;
       } else if ((i37 | 0) == 233) {
        if ((i39 - i3 | 0) < 3) {
         i40 = -2;
         STACKTOP = i41;
         return i40 | 0;
        }
        HEAP32[i40 >> 2] = i3;
        i40 = 0;
        STACKTOP = i41;
        return i40 | 0;
       } else if ((i37 | 0) == 235) {
        if ((i39 - i3 | 0) < 4) {
         i40 = -2;
         STACKTOP = i41;
         return i40 | 0;
        }
        HEAP32[i40 >> 2] = i3;
        i40 = 0;
        STACKTOP = i41;
        return i40 | 0;
       } else if ((i37 | 0) == 291) {
        STACKTOP = i41;
        return i19 | 0;
       }
       if ((i37 | 0) == 237) {
        HEAP32[i40 >> 2] = i3;
        i40 = 0;
        STACKTOP = i41;
        return i40 | 0;
       }
       if ((i37 | 0) == 139) {
        i19 = i18 & 255;
        if (!(1 << (i19 & 31) & HEAP32[25356 + ((HEAPU8[344737 + (i17 & 255) >> 0] << 3 | i19 >>> 5) << 2) >> 2])) {
         HEAP32[i40 >> 2] = i3;
         i40 = 0;
         STACKTOP = i41;
         return i40 | 0;
        }
       }
       i1 = i4 + 4 | 0;
       HEAP32[i34 >> 2] = i1;
       L294 : do if ((i1 | 0) == (i39 | 0)) i27 = -1; else {
        i5 = i39;
        i3 = 0;
        L296 : while (1) {
         i4 = i1;
         L298 : while (1) {
          i1 = HEAP8[i4 >> 0] | 0;
          i2 = HEAP8[i4 + 1 >> 0] | 0;
          switch (i1 << 24 >> 24) {
          case -33:
          case -34:
          case -35:
          case -36:
           {
            i37 = 229;
            break L296;
           }
          case -37:
          case -38:
          case -39:
          case -40:
           {
            i37 = 156;
            break L296;
           }
          case 0:
           {
            switch (HEAP8[i38 + (i2 & 255) >> 0] | 0) {
            case 5:
             {
              i37 = 152;
              break L296;
             }
            case 6:
             {
              i37 = 154;
              break L296;
             }
            case 7:
             {
              i37 = 156;
              break L296;
             }
            case 23:
             {
              i37 = 158;
              break L298;
             }
            case 10:
            case 9:
            case 21:
             {
              i37 = 147;
              break L298;
             }
            case 14:
             {
              i22 = i4;
              i37 = 148;
              break L298;
             }
            case 29:
             {
              i37 = 149;
              break;
             }
            case 27:
            case 26:
            case 25:
            case 24:
            case 22:
             break;
            default:
             {
              i37 = 229;
              break L296;
             }
            }
            break;
           }
          case -1:
           {
            if ((i2 & 255) > 253) {
             i37 = 229;
             break L296;
            } else i37 = 149;
            break;
           }
          default:
           i37 = 149;
          }
          if ((i37 | 0) == 149) {
           i37 = 0;
           i19 = i2 & 255;
           if (!(HEAP32[25356 + ((HEAPU8[344993 + (i1 & 255) >> 0] << 3 | i19 >>> 5) << 2) >> 2] & 1 << (i19 & 31))) {
            i37 = 150;
            break L296;
           }
          }
          i1 = i4 + 2 | 0;
          HEAP32[i34 >> 2] = i1;
          if ((i1 | 0) == (i39 | 0)) {
           i27 = -1;
           break L294;
          } else i4 = i1;
         }
         L306 : do if ((i37 | 0) == 147) {
          i1 = i4 + 2 | 0;
          HEAP32[i34 >> 2] = i1;
          if ((i1 | 0) == (i39 | 0)) {
           i27 = -1;
           break L294;
          } else {
           i26 = i1;
           i1 = i4;
          }
          while (1) {
           if (HEAP8[i26 >> 0] | 0) {
            i37 = 176;
            break L296;
           }
           switch (HEAP8[i38 + (HEAPU8[i1 + 3 >> 0] | 0) >> 0] | 0) {
           case 14:
            {
             i22 = i26;
             i37 = 148;
             break L306;
            }
           case 9:
           case 10:
           case 21:
            break;
           default:
            {
             i37 = 176;
             break L296;
            }
           }
           i1 = i26 + 2 | 0;
           HEAP32[i34 >> 2] = i1;
           if ((i1 | 0) == (i39 | 0)) {
            i27 = -1;
            break L294;
           } else {
            i37 = i26;
            i26 = i1;
            i1 = i37;
           }
          }
         } else if ((i37 | 0) == 158) {
          i37 = 0;
          if (i3 | 0) {
           i37 = 159;
           break L296;
          }
          i28 = i4 + 2 | 0;
          HEAP32[i34 >> 2] = i28;
          if ((i28 | 0) == (i39 | 0)) {
           i27 = -1;
           break L294;
          }
          i1 = HEAP8[i28 >> 0] | 0;
          i2 = HEAP8[i4 + 3 >> 0] | 0;
          switch (i1 << 24 >> 24) {
          case -33:
          case -34:
          case -35:
          case -36:
           {
            i37 = 172;
            break L296;
           }
          case -37:
          case -38:
          case -39:
          case -40:
           {
            i37 = 170;
            break L296;
           }
          case 0:
           {
            switch (HEAP8[i38 + (i2 & 255) >> 0] | 0) {
            case 5:
             {
              i37 = 166;
              break L296;
             }
            case 6:
             {
              i37 = 168;
              break L296;
             }
            case 7:
             {
              i37 = 170;
              break L296;
             }
            case 24:
            case 22:
             {
              i20 = 1;
              i21 = i28;
              break L306;
             }
            case 29:
             break;
            default:
             {
              i37 = 172;
              break L296;
             }
            }
            break;
           }
          case -1:
           {
            if ((i2 & 255) > 253) {
             i37 = 172;
             break L296;
            }
            break;
           }
          default:
           {}
          }
          i21 = i2 & 255;
          if (!(HEAP32[25356 + ((HEAPU8[344737 + (i1 & 255) >> 0] << 3 | i21 >>> 5) << 2) >> 2] & 1 << (i21 & 31))) {
           i37 = 165;
           break L296;
          } else {
           i20 = 1;
           i21 = i28;
          }
         } while (0);
         L319 : do if ((i37 | 0) == 148) {
          i37 = 0;
          i1 = i22 + 2 | 0;
          HEAP32[i34 >> 2] = i1;
          if ((i1 | 0) == (i39 | 0)) {
           i27 = -1;
           break L294;
          } else {
           i24 = i1;
           i1 = i22;
          }
          while (1) {
           if (HEAP8[i24 >> 0] | 0) {
            i37 = 181;
            break L296;
           }
           i1 = HEAP8[i38 + (HEAPU8[i1 + 3 >> 0] | 0) >> 0] | 0;
           i2 = i1 & 255;
           if ((i2 | 1 | 0) == 13) break;
           switch (i1 << 24 >> 24) {
           case 9:
           case 10:
           case 21:
            break;
           default:
            {
             i37 = 181;
             break L296;
            }
           }
           i1 = i24 + 2 | 0;
           HEAP32[i34 >> 2] = i1;
           if ((i1 | 0) == (i39 | 0)) {
            i27 = -1;
            break L294;
           } else {
            i21 = i24;
            i24 = i1;
            i1 = i21;
           }
          }
          i1 = i24 + 2 | 0;
          HEAP32[i34 >> 2] = i1;
          if ((i1 | 0) == (i39 | 0)) {
           i27 = -1;
           break L294;
          } else i23 = i1;
          while (1) {
           i1 = HEAP8[i23 + 1 >> 0] | 0;
           switch (HEAP8[i23 >> 0] | 0) {
           case 0:
            {
             i29 = HEAPU8[i38 + (i1 & 255) >> 0] | 0;
             break;
            }
           case -37:
           case -38:
           case -39:
           case -40:
            {
             i29 = 7;
             break;
            }
           case -33:
           case -34:
           case -35:
           case -36:
            {
             i29 = 8;
             break;
            }
           case -1:
            {
             if ((i1 & 255) > 253) i29 = 0; else i37 = 187;
             break;
            }
           default:
            i37 = 187;
           }
           if ((i37 | 0) == 187) {
            i37 = 0;
            i29 = 29;
           }
           if ((i29 | 0) == (i2 | 0)) break;
           switch ((i29 & 255) << 24 >> 24) {
           case 8:
           case 1:
           case 0:
            {
             i37 = 196;
             break L296;
            }
           case 2:
            {
             i37 = 202;
             break L296;
            }
           case 5:
            {
             if ((i5 - i23 | 0) < 2) {
              i27 = -2;
              break L294;
             }
             i1 = i23 + 2 | 0;
             HEAP32[i34 >> 2] = i1;
             break;
            }
           case 6:
            {
             if ((i5 - i23 | 0) < 3) {
              i27 = -2;
              break L294;
             }
             i1 = i23 + 3 | 0;
             HEAP32[i34 >> 2] = i1;
             break;
            }
           case 7:
            {
             if ((i5 - i23 | 0) < 4) {
              i27 = -2;
              break L294;
             }
             i1 = i23 + 4 | 0;
             HEAP32[i34 >> 2] = i1;
             break;
            }
           case 3:
            {
             i30 = _big2_scanRef(i35, i23 + 2 | 0, i39, i34) | 0;
             if ((i30 | 0) < 1) {
              i37 = 200;
              break L296;
             }
             i1 = HEAP32[i34 >> 2] | 0;
             break;
            }
           default:
            {
             i1 = i23 + 2 | 0;
             HEAP32[i34 >> 2] = i1;
            }
           }
           if ((i1 | 0) == (i39 | 0)) {
            i27 = -1;
            break L294;
           } else i23 = i1;
          }
          i31 = i23 + 2 | 0;
          HEAP32[i34 >> 2] = i31;
          if ((i31 | 0) == (i39 | 0)) {
           i27 = -1;
           break L294;
          }
          if (HEAP8[i31 >> 0] | 0) {
           i37 = 208;
           break L296;
          }
          switch (HEAP8[i38 + (HEAPU8[i23 + 3 >> 0] | 0) >> 0] | 0) {
          case 11:
           {
            i33 = i31;
            i37 = 221;
            break L296;
           }
          case 17:
           {
            i36 = i31;
            i37 = 222;
            break L296;
           }
          case 10:
          case 9:
          case 21:
           break;
          default:
           {
            i37 = 208;
            break L296;
           }
          }
          i1 = i23 + 4 | 0;
          HEAP32[i34 >> 2] = i1;
          if ((i1 | 0) == (i39 | 0)) {
           i27 = -1;
           break L294;
          } else {
           i25 = i1;
           i1 = i31;
          }
          L352 : while (1) {
           i2 = HEAP8[i25 >> 0] | 0;
           i1 = HEAP8[i1 + 3 >> 0] | 0;
           switch (i2 << 24 >> 24) {
           case -33:
           case -34:
           case -35:
           case -36:
            {
             i37 = 227;
             break L296;
            }
           case -37:
           case -38:
           case -39:
           case -40:
            {
             i37 = 219;
             break L296;
            }
           case -1:
            {
             i37 = 210;
             break L352;
            }
           case 0:
            break;
           default:
            {
             i32 = i2;
             break L352;
            }
           }
           switch (HEAP8[i38 + (i1 & 255) >> 0] | 0) {
           case 5:
            {
             i37 = 215;
             break L296;
            }
           case 6:
            {
             i37 = 217;
             break L296;
            }
           case 7:
            {
             i37 = 219;
             break L296;
            }
           case 11:
            {
             i33 = i25;
             i37 = 221;
             break L296;
            }
           case 17:
            {
             i36 = i25;
             i37 = 222;
             break L296;
            }
           case 24:
           case 22:
            {
             i20 = 0;
             i21 = i25;
             break L319;
            }
           case 29:
            {
             i32 = 0;
             break L352;
            }
           case 10:
           case 9:
           case 21:
            break;
           default:
            {
             i37 = 227;
             break L296;
            }
           }
           i1 = i25 + 2 | 0;
           HEAP32[i34 >> 2] = i1;
           if ((i1 | 0) == (i39 | 0)) {
            i27 = -1;
            break L294;
           } else {
            i21 = i25;
            i25 = i1;
            i1 = i21;
           }
          }
          if ((i37 | 0) == 210) {
           i37 = 0;
           if ((i1 & 255) > 253) {
            i37 = 227;
            break L296;
           } else i32 = -1;
          }
          i21 = HEAPU8[i25 + 1 >> 0] | 0;
          if (!(1 << (i21 & 31) & HEAP32[25356 + ((i21 >>> 5 | HEAPU8[344737 + (i32 & 255) >> 0] << 3) << 2) >> 2])) {
           i37 = 214;
           break L296;
          } else {
           i20 = 0;
           i21 = i25;
          }
         } while (0);
         i1 = i21 + 2 | 0;
         HEAP32[i34 >> 2] = i1;
         if ((i1 | 0) == (i39 | 0)) {
          i27 = -1;
          break L294;
         } else i3 = i20;
        }
        switch (i37 | 0) {
        case 150:
         {
          HEAP32[i40 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        case 152:
         {
          if ((i5 - i4 | 0) < 2) {
           i27 = -2;
           break L294;
          }
          HEAP32[i40 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        case 154:
         {
          if ((i5 - i4 | 0) < 3) {
           i27 = -2;
           break L294;
          }
          HEAP32[i40 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        case 156:
         {
          if ((i5 - i4 | 0) < 4) {
           i27 = -2;
           break L294;
          }
          HEAP32[i40 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        case 159:
         {
          HEAP32[i40 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        case 165:
         {
          HEAP32[i40 >> 2] = i28;
          i27 = 0;
          break L294;
         }
        case 166:
         {
          if ((i5 - i28 | 0) < 2) {
           i27 = -2;
           break L294;
          }
          HEAP32[i40 >> 2] = i28;
          i27 = 0;
          break L294;
         }
        case 168:
         {
          if ((i5 - i28 | 0) < 3) {
           i27 = -2;
           break L294;
          }
          HEAP32[i40 >> 2] = i28;
          i27 = 0;
          break L294;
         }
        case 170:
         {
          if ((i5 - i28 | 0) < 4) {
           i27 = -2;
           break L294;
          }
          HEAP32[i40 >> 2] = i28;
          i27 = 0;
          break L294;
         }
        case 172:
         {
          HEAP32[i40 >> 2] = i28;
          i27 = 0;
          break L294;
         }
        case 176:
         {
          HEAP32[i40 >> 2] = i26;
          i27 = 0;
          break L294;
         }
        case 181:
         {
          HEAP32[i40 >> 2] = i24;
          i27 = 0;
          break L294;
         }
        case 196:
         {
          HEAP32[i40 >> 2] = i23;
          i27 = 0;
          break L294;
         }
        case 200:
         {
          if (i30 | 0) {
           i27 = i30;
           break L294;
          }
          HEAP32[i40 >> 2] = HEAP32[i34 >> 2];
          i27 = 0;
          break L294;
         }
        case 202:
         {
          HEAP32[i40 >> 2] = i23;
          i27 = 0;
          break L294;
         }
        case 208:
         {
          HEAP32[i40 >> 2] = i31;
          i27 = 0;
          break L294;
         }
        case 214:
         {
          HEAP32[i40 >> 2] = i25;
          i27 = 0;
          break L294;
         }
        case 215:
         {
          if ((i5 - i25 | 0) < 2) {
           i27 = -2;
           break L294;
          }
          HEAP32[i40 >> 2] = i25;
          i27 = 0;
          break L294;
         }
        case 217:
         {
          if ((i5 - i25 | 0) < 3) {
           i27 = -2;
           break L294;
          }
          HEAP32[i40 >> 2] = i25;
          i27 = 0;
          break L294;
         }
        case 219:
         {
          if ((i5 - i25 | 0) < 4) {
           i27 = -2;
           break L294;
          }
          HEAP32[i40 >> 2] = i25;
          i27 = 0;
          break L294;
         }
        case 221:
         {
          HEAP32[i40 >> 2] = i33 + 2;
          i27 = 1;
          break L294;
         }
        case 222:
         {
          i2 = i36 + 2 | 0;
          HEAP32[i34 >> 2] = i2;
          i1 = i2;
          if ((i2 | 0) == (i39 | 0)) {
           i27 = -1;
           break L294;
          }
          if (!(HEAP8[i2 >> 0] | 0)) if ((HEAP8[i36 + 3 >> 0] | 0) == 62) {
           HEAP32[i40 >> 2] = i36 + 4;
           i27 = 3;
           break L294;
          }
          HEAP32[i40 >> 2] = i1;
          i27 = 0;
          break L294;
         }
        case 227:
         {
          HEAP32[i40 >> 2] = i25;
          i27 = 0;
          break L294;
         }
        case 229:
         {
          HEAP32[i40 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        }
       } while (0);
       i40 = i27;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 109:
      {
       HEAP32[i40 >> 2] = i4;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 111:
      {
       if ((i39 - i4 | 0) < 2) {
        i40 = -2;
        STACKTOP = i41;
        return i40 | 0;
       }
       HEAP32[i40 >> 2] = i4;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 113:
      {
       if ((i39 - i4 | 0) < 3) {
        i40 = -2;
        STACKTOP = i41;
        return i40 | 0;
       }
       HEAP32[i40 >> 2] = i4;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 115:
      {
       if ((i39 - i4 | 0) < 4) {
        i40 = -2;
        STACKTOP = i41;
        return i40 | 0;
       }
       HEAP32[i40 >> 2] = i4;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 118:
      {
       HEAP32[i40 >> 2] = i4;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 125:
      {
       HEAP32[i40 >> 2] = i13;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 127:
      {
       if ((i39 - i13 | 0) < 2) {
        i40 = -2;
        STACKTOP = i41;
        return i40 | 0;
       }
       HEAP32[i40 >> 2] = i13;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 129:
      {
       if ((i39 - i13 | 0) < 3) {
        i40 = -2;
        STACKTOP = i41;
        return i40 | 0;
       }
       HEAP32[i40 >> 2] = i13;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 131:
      {
       if ((i39 - i13 | 0) < 4) {
        i40 = -2;
        STACKTOP = i41;
        return i40 | 0;
       }
       HEAP32[i40 >> 2] = i13;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 133:
      {
       HEAP32[i40 >> 2] = i13;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 244:
      {
       HEAP32[i40 >> 2] = i4;
       i40 = 0;
       STACKTOP = i41;
       return i40 | 0;
      }
     case 291:
      {
       STACKTOP = i41;
       return i19 | 0;
      }
     }
     if ((i37 | 0) == 238) {
      HEAP32[i40 >> 2] = i15 + 2;
      i40 = 2;
      STACKTOP = i41;
      return i40 | 0;
     }
     i1 = i16 + 2 | 0;
     if ((i1 | 0) == (i39 | 0)) {
      i40 = -1;
      STACKTOP = i41;
      return i40 | 0;
     }
     if (!(HEAP8[i1 >> 0] | 0)) if ((HEAP8[i16 + 3 >> 0] | 0) == 62) {
      HEAP32[i40 >> 2] = i16 + 4;
      i40 = 4;
      STACKTOP = i41;
      return i40 | 0;
     }
     HEAP32[i40 >> 2] = i1;
     i40 = 0;
     STACKTOP = i41;
     return i40 | 0;
    }
   case 3:
    {
     i40 = _big2_scanRef(i35, i14 + 2 | 0, i39, i40) | 0;
     STACKTOP = i41;
     return i40 | 0;
    }
   case 9:
    {
     i1 = i14 + 2 | 0;
     if ((i1 | 0) == (i39 | 0)) {
      i40 = -3;
      STACKTOP = i41;
      return i40 | 0;
     }
     if (!(HEAP8[i1 >> 0] | 0)) i1 = (HEAP8[i38 + (HEAPU8[i14 + 3 >> 0] | 0) >> 0] | 0) == 10 ? i14 + 4 | 0 : i1;
     HEAP32[i40 >> 2] = i1;
     i40 = 7;
     STACKTOP = i41;
     return i40 | 0;
    }
   case 10:
    {
     HEAP32[i40 >> 2] = i14 + 2;
     i40 = 7;
     STACKTOP = i41;
     return i40 | 0;
    }
   case 4:
    {
     i3 = i14 + 2 | 0;
     if ((i3 | 0) == (i39 | 0)) {
      i40 = -5;
      STACKTOP = i41;
      return i40 | 0;
     }
     if (HEAP8[i3 >> 0] | 0) break L7;
     if ((HEAP8[i14 + 3 >> 0] | 0) != 93) break L7;
     i2 = i14 + 4 | 0;
     if ((i2 | 0) == (i39 | 0)) {
      i40 = -5;
      STACKTOP = i41;
      return i40 | 0;
     }
     if (HEAP8[i2 >> 0] | 0) break L7;
     if ((HEAP8[i14 + 5 >> 0] | 0) != 62) break L7;
     HEAP32[i40 >> 2] = i2;
     i40 = 0;
     STACKTOP = i41;
     return i40 | 0;
    }
   case 5:
    if ((i39 - i4 | 0) < 2) {
     i40 = -2;
     STACKTOP = i41;
     return i40 | 0;
    } else {
     i3 = i14 + 2 | 0;
     break L7;
    }
   case 6:
    if ((i39 - i4 | 0) < 3) {
     i40 = -2;
     STACKTOP = i41;
     return i40 | 0;
    } else {
     i3 = i14 + 3 | 0;
     break L7;
    }
   default:
    {
     i37 = 265;
     break L7;
    }
   }
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i37 = 262;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i37 = 264;
   break;
  }
 case -1:
  {
   if ((i2 & 255) > 253) i37 = 264; else i37 = 265;
   break;
  }
 default:
  i37 = 265;
 } while (0);
 do if ((i37 | 0) == 262) if ((i39 - i4 | 0) < 4) {
  i40 = -2;
  STACKTOP = i41;
  return i40 | 0;
 } else {
  i3 = i14 + 4 | 0;
  break;
 } else if ((i37 | 0) == 264) {
  HEAP32[i40 >> 2] = i14;
  i40 = 0;
  STACKTOP = i41;
  return i40 | 0;
 } else if ((i37 | 0) == 265) i3 = i14 + 2 | 0; while (0);
 L460 : do if ((i3 | 0) != (i39 | 0)) {
  i4 = i35 + 76 | 0;
  i5 = i39;
  L462 : while (1) {
   i2 = HEAP8[i3 + 1 >> 0] | 0;
   L464 : do switch (HEAP8[i3 >> 0] | 0) {
   case -33:
   case -34:
   case -35:
   case -36:
    {
     i37 = 287;
     break L462;
    }
   case 0:
    switch (HEAP8[i4 + (i2 & 255) >> 0] | 0) {
    case 10:
    case 9:
    case 8:
    case 1:
    case 0:
    case 2:
    case 3:
     {
      i37 = 287;
      break L462;
     }
    case 7:
     {
      i37 = 277;
      break L464;
     }
    case 5:
     {
      if ((i5 - i3 | 0) < 2) {
       i37 = 272;
       break L462;
      }
      i1 = i3 + 2 | 0;
      break L464;
     }
    case 6:
     {
      if ((i5 - i3 | 0) < 3) {
       i37 = 275;
       break L462;
      }
      i1 = i3 + 3 | 0;
      break L464;
     }
    case 4:
     {
      i1 = i3 + 2 | 0;
      if ((i1 | 0) == (i39 | 0)) {
       i37 = 287;
       break L462;
      }
      if (HEAP8[i1 >> 0] | 0) break L464;
      if ((HEAP8[i3 + 3 >> 0] | 0) != 93) break L464;
      i6 = i3 + 4 | 0;
      if ((i6 | 0) == (i39 | 0)) {
       i37 = 287;
       break L462;
      }
      if (HEAP8[i6 >> 0] | 0) break L464;
      if ((HEAP8[i3 + 5 >> 0] | 0) == 62) {
       i37 = 286;
       break L462;
      } else break L464;
     }
    default:
     {
      i37 = 288;
      break L464;
     }
    }
   case -37:
   case -38:
   case -39:
   case -40:
    {
     i37 = 277;
     break;
    }
   case -1:
    {
     if ((i2 & 255) > 253) {
      i37 = 287;
      break L462;
     } else i37 = 288;
     break;
    }
   default:
    i37 = 288;
   } while (0);
   if ((i37 | 0) == 277) {
    i37 = 0;
    if ((i5 - i3 | 0) < 4) {
     i37 = 278;
     break;
    }
    i1 = i3 + 4 | 0;
   } else if ((i37 | 0) == 288) {
    i37 = 0;
    i1 = i3 + 2 | 0;
   }
   if ((i1 | 0) == (i39 | 0)) break L460; else i3 = i1;
  }
  if ((i37 | 0) == 272) {
   HEAP32[i40 >> 2] = i3;
   i40 = 6;
   STACKTOP = i41;
   return i40 | 0;
  } else if ((i37 | 0) == 275) {
   HEAP32[i40 >> 2] = i3;
   i40 = 6;
   STACKTOP = i41;
   return i40 | 0;
  } else if ((i37 | 0) == 278) {
   HEAP32[i40 >> 2] = i3;
   i40 = 6;
   STACKTOP = i41;
   return i40 | 0;
  } else if ((i37 | 0) == 286) {
   HEAP32[i40 >> 2] = i6;
   i40 = 0;
   STACKTOP = i41;
   return i40 | 0;
  } else if ((i37 | 0) == 287) {
   HEAP32[i40 >> 2] = i3;
   i40 = 6;
   STACKTOP = i41;
   return i40 | 0;
  }
 } while (0);
 HEAP32[i40 >> 2] = i39;
 i40 = 6;
 STACKTOP = i41;
 return i40 | 0;
}
function _little2_contentTok(i34, i14, i2, i39) {
 i34 = i34 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i39 = i39 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i40 = 0;
 i40 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i33 = i40;
 if ((i14 | 0) == (i2 | 0)) {
  i39 = -4;
  STACKTOP = i40;
  return i39 | 0;
 }
 i4 = i14;
 i38 = i2 - i4 | 0;
 i9 = (i38 & 1 | 0) == 0;
 i38 = i38 & -2;
 i37 = (i38 | 0) == 0;
 i38 = i9 | i37 ? i2 : i14 + i38 | 0;
 if (!(i9 | i37 ^ 1)) {
  i39 = -1;
  STACKTOP = i40;
  return i39 | 0;
 }
 i2 = HEAP8[i14 >> 0] | 0;
 L7 : do switch (HEAP8[i14 + 1 >> 0] | 0) {
 case 0:
  {
   i37 = i34 + 76 | 0;
   switch (HEAP8[i37 + (i2 & 255) >> 0] | 0) {
   case 7:
    {
     i36 = 262;
     break L7;
    }
   case 8:
   case 1:
   case 0:
    {
     i36 = 264;
     break L7;
    }
   case 2:
    {
     i6 = i14 + 2 | 0;
     if ((i6 | 0) == (i38 | 0)) {
      i39 = -1;
      STACKTOP = i40;
      return i39 | 0;
     }
     i9 = HEAP8[i14 + 3 >> 0] | 0;
     L14 : do switch (i9 << 24 >> 24) {
     case 0:
      {
       i1 = HEAP8[i6 >> 0] | 0;
       switch (HEAP8[i37 + (i1 & 255) >> 0] | 0) {
       case 29:
        {
         i10 = i1;
         i36 = 11;
         break L14;
        }
       case 24:
       case 22:
        break L14;
       case 7:
        {
         i36 = 19;
         break L14;
        }
       case 5:
        {
         if ((i38 - i6 | 0) < 2) {
          i39 = -2;
          STACKTOP = i40;
          return i39 | 0;
         }
         HEAP32[i39 >> 2] = i6;
         i39 = 0;
         STACKTOP = i40;
         return i39 | 0;
        }
       case 6:
        {
         if ((i38 - i6 | 0) < 3) {
          i39 = -2;
          STACKTOP = i40;
          return i39 | 0;
         }
         HEAP32[i39 >> 2] = i6;
         i39 = 0;
         STACKTOP = i40;
         return i39 | 0;
        }
       case 16:
        {
         i1 = i14 + 4 | 0;
         if ((i1 | 0) == (i38 | 0)) {
          i39 = -1;
          STACKTOP = i40;
          return i39 | 0;
         }
         L32 : do if (!(HEAP8[i14 + 5 >> 0] | 0)) {
          switch (HEAP8[i37 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
          case 27:
           break;
          case 20:
           {
            i1 = i14 + 6 | 0;
            if ((i38 - i1 | 0) < 12) {
             i39 = -1;
             STACKTOP = i40;
             return i39 | 0;
            }
            do if (!(HEAP8[i14 + 7 >> 0] | 0)) if ((HEAP8[i1 >> 0] | 0) == 67) {
             i1 = i14 + 8 | 0;
             if (!(HEAP8[i14 + 9 >> 0] | 0)) if ((HEAP8[i1 >> 0] | 0) == 68) {
              i1 = i14 + 10 | 0;
              if (!(HEAP8[i14 + 11 >> 0] | 0)) if ((HEAP8[i1 >> 0] | 0) == 65) {
               i1 = i14 + 12 | 0;
               if (!(HEAP8[i14 + 13 >> 0] | 0)) {
                if ((HEAP8[i1 >> 0] | 0) != 84) {
                 i2 = 0;
                 break;
                }
                i1 = i14 + 14 | 0;
                if (HEAP8[i14 + 15 >> 0] | 0) {
                 i2 = 0;
                 break;
                }
                if ((HEAP8[i1 >> 0] | 0) != 65) {
                 i2 = 0;
                 break;
                }
                i1 = i14 + 16 | 0;
                if (HEAP8[i14 + 17 >> 0] | 0) {
                 i2 = 0;
                 break;
                }
                i38 = (HEAP8[i1 >> 0] | 0) == 91;
                i2 = i38 ? 8 : 0;
                i1 = i38 ? i14 + 18 | 0 : i1;
               } else i2 = 0;
              } else i2 = 0; else i2 = 0;
             } else i2 = 0; else i2 = 0;
            } else i2 = 0; else i2 = 0; while (0);
            HEAP32[i39 >> 2] = i1;
            i39 = i2;
            STACKTOP = i40;
            return i39 | 0;
           }
          default:
           break L32;
          }
          i4 = i14 + 6 | 0;
          if ((i4 | 0) == (i38 | 0)) {
           i39 = -1;
           STACKTOP = i40;
           return i39 | 0;
          }
          if (!(HEAP8[i14 + 7 >> 0] | 0)) if ((HEAP8[i4 >> 0] | 0) == 45) {
           i1 = i14 + 8 | 0;
           if ((i1 | 0) == (i38 | 0)) {
            i39 = -1;
            STACKTOP = i40;
            return i39 | 0;
           }
           i3 = i38;
           i2 = i1;
           L63 : while (1) {
            i1 = HEAP8[i2 >> 0] | 0;
            L65 : do switch (HEAP8[i2 + 1 >> 0] | 0) {
            case -33:
            case -34:
            case -35:
            case -36:
             {
              i36 = 39;
              break L63;
             }
            case 0:
             switch (HEAP8[i37 + (i1 & 255) >> 0] | 0) {
             case 8:
             case 1:
             case 0:
              {
               i36 = 39;
               break L63;
              }
             case 7:
              {
               i36 = 37;
               break L65;
              }
             case 5:
              {
               if ((i3 - i2 | 0) < 2) {
                i19 = -2;
                i36 = 291;
                break L63;
               }
               i7 = i2 + 2 | 0;
               break L65;
              }
             case 6:
              {
               if ((i3 - i2 | 0) < 3) {
                i19 = -2;
                i36 = 291;
                break L63;
               }
               i7 = i2 + 3 | 0;
               break L65;
              }
             case 27:
              {
               i1 = i2 + 2 | 0;
               if ((i1 | 0) == (i38 | 0)) {
                i19 = -1;
                i36 = 291;
                break L63;
               }
               if (HEAP8[i2 + 3 >> 0] | 0) {
                i7 = i1;
                break L65;
               }
               if ((HEAP8[i1 >> 0] | 0) == 45) {
                i36 = 44;
                break L63;
               } else {
                i7 = i1;
                break L65;
               }
              }
             default:
              {
               i36 = 49;
               break L65;
              }
             }
            case -37:
            case -38:
            case -39:
            case -40:
             {
              i36 = 37;
              break;
             }
            case -1:
             {
              if ((i1 & 255) > 253) {
               i36 = 39;
               break L63;
              } else i36 = 49;
              break;
             }
            default:
             i36 = 49;
            } while (0);
            if ((i36 | 0) == 37) {
             i36 = 0;
             if ((i3 - i2 | 0) < 4) {
              i19 = -2;
              i36 = 291;
              break;
             }
             i7 = i2 + 4 | 0;
            } else if ((i36 | 0) == 49) {
             i36 = 0;
             i7 = i2 + 2 | 0;
            }
            if ((i7 | 0) == (i38 | 0)) {
             i19 = -1;
             i36 = 291;
             break;
            } else i2 = i7;
           }
           if ((i36 | 0) == 39) {
            HEAP32[i39 >> 2] = i2;
            i39 = 0;
            STACKTOP = i40;
            return i39 | 0;
           } else if ((i36 | 0) == 44) {
            i1 = i2 + 4 | 0;
            if ((i1 | 0) == (i38 | 0)) {
             i39 = -1;
             STACKTOP = i40;
             return i39 | 0;
            }
            if (!(HEAP8[i2 + 5 >> 0] | 0)) if ((HEAP8[i1 >> 0] | 0) == 62) {
             HEAP32[i39 >> 2] = i2 + 6;
             i39 = 13;
             STACKTOP = i40;
             return i39 | 0;
            }
            HEAP32[i39 >> 2] = i1;
            i39 = 0;
            STACKTOP = i40;
            return i39 | 0;
           } else if ((i36 | 0) == 291) {
            STACKTOP = i40;
            return i19 | 0;
           }
          }
          HEAP32[i39 >> 2] = i4;
          i39 = 0;
          STACKTOP = i40;
          return i39 | 0;
         } while (0);
         HEAP32[i39 >> 2] = i1;
         i39 = 0;
         STACKTOP = i40;
         return i39 | 0;
        }
       case 15:
        {
         i39 = _little2_scanPi(i34, i14 + 4 | 0, i38, i39) | 0;
         STACKTOP = i40;
         return i39 | 0;
        }
       case 17:
        {
         i4 = i14 + 4 | 0;
         if ((i4 | 0) == (i38 | 0)) {
          i39 = -1;
          STACKTOP = i40;
          return i39 | 0;
         }
         i2 = HEAP8[i14 + 5 >> 0] | 0;
         L109 : do switch (i2 << 24 >> 24) {
         case 0:
          {
           i1 = HEAP8[i4 >> 0] | 0;
           switch (HEAP8[i37 + (i1 & 255) >> 0] | 0) {
           case 29:
            {
             i5 = i1;
             i36 = 72;
             break L109;
            }
           case 24:
           case 22:
            break L109;
           case 7:
            {
             i36 = 78;
             break L109;
            }
           case 5:
            {
             if ((i38 - i4 | 0) < 2) {
              i39 = -2;
              STACKTOP = i40;
              return i39 | 0;
             }
             HEAP32[i39 >> 2] = i4;
             i39 = 0;
             STACKTOP = i40;
             return i39 | 0;
            }
           case 6:
            {
             if ((i38 - i4 | 0) < 3) {
              i39 = -2;
              STACKTOP = i40;
              return i39 | 0;
             }
             HEAP32[i39 >> 2] = i4;
             i39 = 0;
             STACKTOP = i40;
             return i39 | 0;
            }
           default:
            {
             i36 = 80;
             break L109;
            }
           }
          }
         case -37:
         case -38:
         case -39:
         case -40:
          {
           i36 = 78;
           break;
          }
         case -33:
         case -34:
         case -35:
         case -36:
          {
           i36 = 80;
           break;
          }
         case -1:
          {
           i1 = HEAP8[i4 >> 0] | 0;
           if ((i1 & 255) > 253) i36 = 80; else {
            i5 = i1;
            i36 = 72;
           }
           break;
          }
         default:
          {
           i5 = HEAP8[i4 >> 0] | 0;
           i36 = 72;
          }
         } while (0);
         if ((i36 | 0) == 72) {
          i7 = i5 & 255;
          if (!(1 << (i7 & 31) & HEAP32[25356 + ((HEAPU8[344737 + (i2 & 255) >> 0] << 3 | i7 >>> 5) << 2) >> 2])) {
           HEAP32[i39 >> 2] = i4;
           i39 = 0;
           STACKTOP = i40;
           return i39 | 0;
          }
         } else if ((i36 | 0) == 78) {
          if ((i38 - i4 | 0) < 4) {
           i39 = -2;
           STACKTOP = i40;
           return i39 | 0;
          }
          HEAP32[i39 >> 2] = i4;
          i39 = 0;
          STACKTOP = i40;
          return i39 | 0;
         } else if ((i36 | 0) == 80) {
          HEAP32[i39 >> 2] = i4;
          i39 = 0;
          STACKTOP = i40;
          return i39 | 0;
         }
         i3 = i14 + 6 | 0;
         if ((i3 | 0) == (i38 | 0)) {
          i39 = -1;
          STACKTOP = i40;
          return i39 | 0;
         }
         L138 : while (1) {
          i2 = HEAP8[i4 + 3 >> 0] | 0;
          switch (i2 << 24 >> 24) {
          case -37:
          case -38:
          case -39:
          case -40:
           {
            i36 = 93;
            break L138;
           }
          case -33:
          case -34:
          case -35:
          case -36:
           {
            i36 = 101;
            break L138;
           }
          case 0:
           {
            i1 = HEAP8[i3 >> 0] | 0;
            switch (HEAP8[i37 + (i1 & 255) >> 0] | 0) {
            case 7:
             {
              i36 = 93;
              break L138;
             }
            case 5:
             {
              i36 = 89;
              break L138;
             }
            case 6:
             {
              i36 = 91;
              break L138;
             }
            case 10:
            case 9:
            case 21:
             {
              i36 = 85;
              break L138;
             }
            case 11:
             {
              i36 = 100;
              break L138;
             }
            case 29:
             {
              i8 = i1;
              i36 = 86;
              break;
             }
            case 23:
            case 27:
            case 26:
            case 25:
            case 24:
            case 22:
             break;
            default:
             {
              i36 = 101;
              break L138;
             }
            }
            break;
           }
          case -1:
           {
            i1 = HEAP8[i3 >> 0] | 0;
            if ((i1 & 255) > 253) {
             i36 = 101;
             break L138;
            } else {
             i8 = i1;
             i36 = 86;
            }
            break;
           }
          default:
           {
            i8 = HEAP8[i3 >> 0] | 0;
            i36 = 86;
           }
          }
          if ((i36 | 0) == 86) {
           i36 = 0;
           i7 = i8 & 255;
           if (!(1 << (i7 & 31) & HEAP32[25356 + ((HEAPU8[344993 + (i2 & 255) >> 0] << 3 | i7 >>> 5) << 2) >> 2])) {
            i36 = 88;
            break;
           }
          }
          i1 = i3 + 2 | 0;
          if ((i1 | 0) == (i38 | 0)) {
           i19 = -1;
           i36 = 291;
           break;
          } else {
           i4 = i3;
           i3 = i1;
          }
         }
         if ((i36 | 0) == 85) {
          i1 = i3 + 2 | 0;
          if ((i1 | 0) == (i38 | 0)) {
           i39 = -1;
           STACKTOP = i40;
           return i39 | 0;
          } else i2 = i1;
          L169 : while (1) {
           if (HEAP8[i3 + 3 >> 0] | 0) {
            i36 = 99;
            break;
           }
           switch (HEAP8[i37 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
           case 11:
            {
             i36 = 98;
             break L169;
            }
           case 10:
           case 9:
           case 21:
            break;
           default:
            {
             i36 = 99;
             break L169;
            }
           }
           i1 = i2 + 2 | 0;
           if ((i1 | 0) == (i38 | 0)) {
            i19 = -1;
            i36 = 291;
            break;
           } else {
            i3 = i2;
            i2 = i1;
           }
          }
          if ((i36 | 0) == 98) {
           HEAP32[i39 >> 2] = i3 + 4;
           i39 = 5;
           STACKTOP = i40;
           return i39 | 0;
          } else if ((i36 | 0) == 99) {
           HEAP32[i39 >> 2] = i2;
           i39 = 0;
           STACKTOP = i40;
           return i39 | 0;
          } else if ((i36 | 0) == 291) {
           STACKTOP = i40;
           return i19 | 0;
          }
         } else if ((i36 | 0) == 88) {
          HEAP32[i39 >> 2] = i3;
          i39 = 0;
          STACKTOP = i40;
          return i39 | 0;
         } else if ((i36 | 0) == 89) {
          if ((i38 - i3 | 0) < 2) {
           i39 = -2;
           STACKTOP = i40;
           return i39 | 0;
          }
          HEAP32[i39 >> 2] = i3;
          i39 = 0;
          STACKTOP = i40;
          return i39 | 0;
         } else if ((i36 | 0) == 91) {
          if ((i38 - i3 | 0) < 3) {
           i39 = -2;
           STACKTOP = i40;
           return i39 | 0;
          }
          HEAP32[i39 >> 2] = i3;
          i39 = 0;
          STACKTOP = i40;
          return i39 | 0;
         } else if ((i36 | 0) == 93) {
          if ((i38 - i3 | 0) < 4) {
           i39 = -2;
           STACKTOP = i40;
           return i39 | 0;
          }
          HEAP32[i39 >> 2] = i3;
          i39 = 0;
          STACKTOP = i40;
          return i39 | 0;
         } else if ((i36 | 0) == 100) {
          HEAP32[i39 >> 2] = i4 + 4;
          i39 = 5;
          STACKTOP = i40;
          return i39 | 0;
         } else if ((i36 | 0) == 101) {
          HEAP32[i39 >> 2] = i3;
          i39 = 0;
          STACKTOP = i40;
          return i39 | 0;
         } else if ((i36 | 0) == 291) {
          STACKTOP = i40;
          return i19 | 0;
         }
         break;
        }
       default:
        {
         i36 = 102;
         break L14;
        }
       }
       break;
      }
     case -37:
     case -38:
     case -39:
     case -40:
      {
       i36 = 19;
       break;
      }
     case -33:
     case -34:
     case -35:
     case -36:
      {
       i36 = 102;
       break;
      }
     case -1:
      {
       i1 = HEAP8[i6 >> 0] | 0;
       if ((i1 & 255) > 253) i36 = 102; else {
        i10 = i1;
        i36 = 11;
       }
       break;
      }
     default:
      {
       i10 = HEAP8[i6 >> 0] | 0;
       i36 = 11;
      }
     } while (0);
     if ((i36 | 0) == 11) {
      i10 = i10 & 255;
      if (!(1 << (i10 & 31) & HEAP32[25356 + ((HEAPU8[344737 + (i9 & 255) >> 0] << 3 | i10 >>> 5) << 2) >> 2])) {
       HEAP32[i39 >> 2] = i6;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     } else if ((i36 | 0) == 19) {
      if ((i38 - i6 | 0) < 4) {
       i39 = -2;
       STACKTOP = i40;
       return i39 | 0;
      }
      HEAP32[i39 >> 2] = i6;
      i39 = 0;
      STACKTOP = i40;
      return i39 | 0;
     } else if ((i36 | 0) == 102) {
      HEAP32[i39 >> 2] = i6;
      i39 = 0;
      STACKTOP = i40;
      return i39 | 0;
     }
     i1 = i14 + 4 | 0;
     if ((i1 | 0) == (i38 | 0)) {
      i39 = -1;
      STACKTOP = i40;
      return i39 | 0;
     } else i3 = 0;
     L198 : while (1) {
      i4 = i1;
      L200 : while (1) {
       i2 = HEAP8[i4 + 1 >> 0] | 0;
       switch (i2 << 24 >> 24) {
       case -33:
       case -34:
       case -35:
       case -36:
        {
         i36 = 244;
         break L198;
        }
       case -37:
       case -38:
       case -39:
       case -40:
        {
         i36 = 115;
         break L198;
        }
       case 0:
        {
         i1 = HEAP8[i4 >> 0] | 0;
         switch (HEAP8[i37 + (i1 & 255) >> 0] | 0) {
         case 5:
          {
           i36 = 111;
           break L198;
          }
         case 6:
          {
           i36 = 113;
           break L198;
          }
         case 7:
          {
           i36 = 115;
           break L198;
          }
         case 10:
         case 9:
         case 21:
          {
           i36 = 107;
           break L198;
          }
         case 11:
          {
           i15 = i4;
           i36 = 238;
           break L198;
          }
         case 17:
          {
           i16 = i4;
           break L198;
          }
         case 23:
          break L200;
         case 29:
          {
           i11 = i1;
           i36 = 108;
           break;
          }
         case 27:
         case 26:
         case 25:
         case 24:
         case 22:
          break;
         default:
          {
           i36 = 244;
           break L198;
          }
         }
         break;
        }
       case -1:
        {
         i1 = HEAP8[i4 >> 0] | 0;
         if ((i1 & 255) > 253) {
          i36 = 244;
          break L198;
         } else {
          i11 = i1;
          i36 = 108;
         }
         break;
        }
       default:
        {
         i11 = HEAP8[i4 >> 0] | 0;
         i36 = 108;
        }
       }
       if ((i36 | 0) == 108) {
        i36 = 0;
        i14 = i11 & 255;
        if (!(1 << (i14 & 31) & HEAP32[25356 + ((HEAPU8[344993 + (i2 & 255) >> 0] << 3 | i14 >>> 5) << 2) >> 2])) {
         i36 = 109;
         break L198;
        }
       }
       i1 = i4 + 2 | 0;
       if ((i1 | 0) == (i38 | 0)) {
        i19 = -1;
        i36 = 291;
        break L198;
       } else i4 = i1;
      }
      if (i3 | 0) {
       i36 = 118;
       break;
      }
      i13 = i4 + 2 | 0;
      if ((i13 | 0) == (i38 | 0)) {
       i19 = -1;
       i36 = 291;
       break;
      }
      i2 = HEAP8[i4 + 3 >> 0] | 0;
      switch (i2 << 24 >> 24) {
      case -33:
      case -34:
      case -35:
      case -36:
       {
        i36 = 133;
        break L198;
       }
      case -37:
      case -38:
      case -39:
      case -40:
       {
        i36 = 131;
        break L198;
       }
      case 0:
       {
        i1 = HEAP8[i13 >> 0] | 0;
        switch (HEAP8[i37 + (i1 & 255) >> 0] | 0) {
        case 5:
         {
          i36 = 127;
          break L198;
         }
        case 6:
         {
          i36 = 129;
          break L198;
         }
        case 7:
         {
          i36 = 131;
          break L198;
         }
        case 29:
         {
          i12 = i1;
          i36 = 124;
          break;
         }
        case 24:
        case 22:
         break;
        default:
         {
          i36 = 133;
          break L198;
         }
        }
        break;
       }
      case -1:
       {
        i1 = HEAP8[i13 >> 0] | 0;
        if ((i1 & 255) > 253) {
         i36 = 133;
         break L198;
        } else {
         i12 = i1;
         i36 = 124;
        }
        break;
       }
      default:
       {
        i12 = HEAP8[i13 >> 0] | 0;
        i36 = 124;
       }
      }
      if ((i36 | 0) == 124) {
       i36 = 0;
       i14 = i12 & 255;
       if (!(1 << (i14 & 31) & HEAP32[25356 + ((HEAPU8[344737 + (i2 & 255) >> 0] << 3 | i14 >>> 5) << 2) >> 2])) {
        i36 = 125;
        break;
       }
      }
      i1 = i4 + 4 | 0;
      if ((i1 | 0) == (i38 | 0)) {
       i19 = -1;
       i36 = 291;
       break;
      } else i3 = 1;
     }
     L219 : switch (i36 | 0) {
     case 107:
      {
       i1 = i4 + 2 | 0;
       if ((i1 | 0) == (i38 | 0)) {
        i39 = -1;
        STACKTOP = i40;
        return i39 | 0;
       } else i3 = i1;
       L263 : while (1) {
        i2 = HEAP8[i4 + 3 >> 0] | 0;
        switch (i2 << 24 >> 24) {
        case -37:
        case -38:
        case -39:
        case -40:
         {
          i36 = 235;
          break L263;
         }
        case -33:
        case -34:
        case -35:
        case -36:
         {
          i36 = 237;
          break L263;
         }
        case -1:
         {
          i36 = 136;
          break L263;
         }
        case 0:
         break;
        default:
         {
          i36 = 135;
          break L263;
         }
        }
        i1 = HEAP8[i3 >> 0] | 0;
        switch (HEAP8[i37 + (i1 & 255) >> 0] | 0) {
        case 11:
         {
          i15 = i3;
          i36 = 238;
          break L219;
         }
        case 17:
         {
          i16 = i3;
          break L219;
         }
        case 7:
         {
          i36 = 235;
          break L263;
         }
        case 29:
         {
          i17 = 0;
          i18 = i1;
          i36 = 139;
          break L263;
         }
        case 24:
        case 22:
         break L263;
        case 5:
         {
          i36 = 231;
          break L263;
         }
        case 6:
         {
          i36 = 233;
          break L263;
         }
        case 10:
        case 9:
        case 21:
         break;
        default:
         {
          i36 = 237;
          break L263;
         }
        }
        i1 = i3 + 2 | 0;
        if ((i1 | 0) == (i38 | 0)) {
         i19 = -1;
         i36 = 291;
         break;
        } else {
         i4 = i3;
         i3 = i1;
        }
       }
       if ((i36 | 0) == 135) {
        i17 = i2;
        i18 = HEAP8[i3 >> 0] | 0;
        i36 = 139;
       } else if ((i36 | 0) == 136) {
        i1 = HEAP8[i3 >> 0] | 0;
        if ((i1 & 255) > 253) i36 = 237; else {
         i17 = -1;
         i18 = i1;
         i36 = 139;
        }
       } else if ((i36 | 0) == 231) {
        if ((i38 - i3 | 0) < 2) {
         i39 = -2;
         STACKTOP = i40;
         return i39 | 0;
        }
        HEAP32[i39 >> 2] = i3;
        i39 = 0;
        STACKTOP = i40;
        return i39 | 0;
       } else if ((i36 | 0) == 233) {
        if ((i38 - i3 | 0) < 3) {
         i39 = -2;
         STACKTOP = i40;
         return i39 | 0;
        }
        HEAP32[i39 >> 2] = i3;
        i39 = 0;
        STACKTOP = i40;
        return i39 | 0;
       } else if ((i36 | 0) == 235) {
        if ((i38 - i3 | 0) < 4) {
         i39 = -2;
         STACKTOP = i40;
         return i39 | 0;
        }
        HEAP32[i39 >> 2] = i3;
        i39 = 0;
        STACKTOP = i40;
        return i39 | 0;
       } else if ((i36 | 0) == 291) {
        STACKTOP = i40;
        return i19 | 0;
       }
       if ((i36 | 0) == 237) {
        HEAP32[i39 >> 2] = i3;
        i39 = 0;
        STACKTOP = i40;
        return i39 | 0;
       }
       if ((i36 | 0) == 139) {
        i19 = i18 & 255;
        if (!(1 << (i19 & 31) & HEAP32[25356 + ((HEAPU8[344737 + (i17 & 255) >> 0] << 3 | i19 >>> 5) << 2) >> 2])) {
         HEAP32[i39 >> 2] = i3;
         i39 = 0;
         STACKTOP = i40;
         return i39 | 0;
        }
       }
       i1 = i4 + 4 | 0;
       HEAP32[i33 >> 2] = i1;
       L294 : do if ((i1 | 0) == (i38 | 0)) i27 = -1; else {
        i5 = i38;
        i3 = 0;
        L296 : while (1) {
         i4 = i1;
         L298 : while (1) {
          i1 = HEAP8[i4 + 1 >> 0] | 0;
          i2 = HEAP8[i4 >> 0] | 0;
          switch (i1 << 24 >> 24) {
          case -33:
          case -34:
          case -35:
          case -36:
           {
            i36 = 229;
            break L296;
           }
          case -37:
          case -38:
          case -39:
          case -40:
           {
            i36 = 156;
            break L296;
           }
          case 0:
           {
            switch (HEAP8[i37 + (i2 & 255) >> 0] | 0) {
            case 5:
             {
              i36 = 152;
              break L296;
             }
            case 6:
             {
              i36 = 154;
              break L296;
             }
            case 7:
             {
              i36 = 156;
              break L296;
             }
            case 23:
             {
              i36 = 158;
              break L298;
             }
            case 10:
            case 9:
            case 21:
             {
              i36 = 147;
              break L298;
             }
            case 14:
             {
              i22 = i4;
              i36 = 148;
              break L298;
             }
            case 29:
             {
              i36 = 149;
              break;
             }
            case 27:
            case 26:
            case 25:
            case 24:
            case 22:
             break;
            default:
             {
              i36 = 229;
              break L296;
             }
            }
            break;
           }
          case -1:
           {
            if ((i2 & 255) > 253) {
             i36 = 229;
             break L296;
            } else i36 = 149;
            break;
           }
          default:
           i36 = 149;
          }
          if ((i36 | 0) == 149) {
           i36 = 0;
           i19 = i2 & 255;
           if (!(HEAP32[25356 + ((HEAPU8[344993 + (i1 & 255) >> 0] << 3 | i19 >>> 5) << 2) >> 2] & 1 << (i19 & 31))) {
            i36 = 150;
            break L296;
           }
          }
          i1 = i4 + 2 | 0;
          HEAP32[i33 >> 2] = i1;
          if ((i1 | 0) == (i38 | 0)) {
           i27 = -1;
           break L294;
          } else i4 = i1;
         }
         L306 : do if ((i36 | 0) == 147) {
          i1 = i4 + 2 | 0;
          HEAP32[i33 >> 2] = i1;
          if ((i1 | 0) == (i38 | 0)) {
           i27 = -1;
           break L294;
          } else {
           i26 = i1;
           i1 = i4;
          }
          while (1) {
           if (HEAP8[i1 + 3 >> 0] | 0) {
            i36 = 176;
            break L296;
           }
           switch (HEAP8[i37 + (HEAPU8[i26 >> 0] | 0) >> 0] | 0) {
           case 14:
            {
             i22 = i26;
             i36 = 148;
             break L306;
            }
           case 9:
           case 10:
           case 21:
            break;
           default:
            {
             i36 = 176;
             break L296;
            }
           }
           i1 = i26 + 2 | 0;
           HEAP32[i33 >> 2] = i1;
           if ((i1 | 0) == (i38 | 0)) {
            i27 = -1;
            break L294;
           } else {
            i36 = i26;
            i26 = i1;
            i1 = i36;
           }
          }
         } else if ((i36 | 0) == 158) {
          i36 = 0;
          if (i3 | 0) {
           i36 = 159;
           break L296;
          }
          i28 = i4 + 2 | 0;
          HEAP32[i33 >> 2] = i28;
          if ((i28 | 0) == (i38 | 0)) {
           i27 = -1;
           break L294;
          }
          i1 = HEAP8[i4 + 3 >> 0] | 0;
          i2 = HEAP8[i28 >> 0] | 0;
          switch (i1 << 24 >> 24) {
          case -33:
          case -34:
          case -35:
          case -36:
           {
            i36 = 172;
            break L296;
           }
          case -37:
          case -38:
          case -39:
          case -40:
           {
            i36 = 170;
            break L296;
           }
          case 0:
           {
            switch (HEAP8[i37 + (i2 & 255) >> 0] | 0) {
            case 5:
             {
              i36 = 166;
              break L296;
             }
            case 6:
             {
              i36 = 168;
              break L296;
             }
            case 7:
             {
              i36 = 170;
              break L296;
             }
            case 24:
            case 22:
             {
              i20 = 1;
              i21 = i28;
              break L306;
             }
            case 29:
             break;
            default:
             {
              i36 = 172;
              break L296;
             }
            }
            break;
           }
          case -1:
           {
            if ((i2 & 255) > 253) {
             i36 = 172;
             break L296;
            }
            break;
           }
          default:
           {}
          }
          i21 = i2 & 255;
          if (!(HEAP32[25356 + ((HEAPU8[344737 + (i1 & 255) >> 0] << 3 | i21 >>> 5) << 2) >> 2] & 1 << (i21 & 31))) {
           i36 = 165;
           break L296;
          } else {
           i20 = 1;
           i21 = i28;
          }
         } while (0);
         L319 : do if ((i36 | 0) == 148) {
          i36 = 0;
          i1 = i22 + 2 | 0;
          HEAP32[i33 >> 2] = i1;
          if ((i1 | 0) == (i38 | 0)) {
           i27 = -1;
           break L294;
          } else {
           i24 = i1;
           i1 = i22;
          }
          while (1) {
           if (HEAP8[i1 + 3 >> 0] | 0) {
            i36 = 181;
            break L296;
           }
           i1 = HEAP8[i37 + (HEAPU8[i24 >> 0] | 0) >> 0] | 0;
           i2 = i1 & 255;
           if ((i2 | 1 | 0) == 13) break;
           switch (i1 << 24 >> 24) {
           case 9:
           case 10:
           case 21:
            break;
           default:
            {
             i36 = 181;
             break L296;
            }
           }
           i1 = i24 + 2 | 0;
           HEAP32[i33 >> 2] = i1;
           if ((i1 | 0) == (i38 | 0)) {
            i27 = -1;
            break L294;
           } else {
            i21 = i24;
            i24 = i1;
            i1 = i21;
           }
          }
          i1 = i24 + 2 | 0;
          HEAP32[i33 >> 2] = i1;
          if ((i1 | 0) == (i38 | 0)) {
           i27 = -1;
           break L294;
          } else i23 = i1;
          while (1) {
           i1 = HEAP8[i23 >> 0] | 0;
           switch (HEAP8[i23 + 1 >> 0] | 0) {
           case 0:
            {
             i29 = HEAPU8[i37 + (i1 & 255) >> 0] | 0;
             break;
            }
           case -37:
           case -38:
           case -39:
           case -40:
            {
             i29 = 7;
             break;
            }
           case -33:
           case -34:
           case -35:
           case -36:
            {
             i29 = 8;
             break;
            }
           case -1:
            {
             if ((i1 & 255) > 253) i29 = 0; else i36 = 187;
             break;
            }
           default:
            i36 = 187;
           }
           if ((i36 | 0) == 187) {
            i36 = 0;
            i29 = 29;
           }
           if ((i29 | 0) == (i2 | 0)) break;
           switch ((i29 & 255) << 24 >> 24) {
           case 8:
           case 1:
           case 0:
            {
             i36 = 196;
             break L296;
            }
           case 2:
            {
             i36 = 202;
             break L296;
            }
           case 5:
            {
             if ((i5 - i23 | 0) < 2) {
              i27 = -2;
              break L294;
             }
             i1 = i23 + 2 | 0;
             HEAP32[i33 >> 2] = i1;
             break;
            }
           case 6:
            {
             if ((i5 - i23 | 0) < 3) {
              i27 = -2;
              break L294;
             }
             i1 = i23 + 3 | 0;
             HEAP32[i33 >> 2] = i1;
             break;
            }
           case 7:
            {
             if ((i5 - i23 | 0) < 4) {
              i27 = -2;
              break L294;
             }
             i1 = i23 + 4 | 0;
             HEAP32[i33 >> 2] = i1;
             break;
            }
           case 3:
            {
             i30 = _little2_scanRef(i34, i23 + 2 | 0, i38, i33) | 0;
             if ((i30 | 0) < 1) {
              i36 = 200;
              break L296;
             }
             i1 = HEAP32[i33 >> 2] | 0;
             break;
            }
           default:
            {
             i1 = i23 + 2 | 0;
             HEAP32[i33 >> 2] = i1;
            }
           }
           if ((i1 | 0) == (i38 | 0)) {
            i27 = -1;
            break L294;
           } else i23 = i1;
          }
          i31 = i23 + 2 | 0;
          HEAP32[i33 >> 2] = i31;
          if ((i31 | 0) == (i38 | 0)) {
           i27 = -1;
           break L294;
          }
          if (HEAP8[i23 + 3 >> 0] | 0) {
           i36 = 208;
           break L296;
          }
          switch (HEAP8[i37 + (HEAPU8[i31 >> 0] | 0) >> 0] | 0) {
          case 11:
           {
            i32 = i31;
            i36 = 221;
            break L296;
           }
          case 17:
           {
            i35 = i31;
            i36 = 222;
            break L296;
           }
          case 10:
          case 9:
          case 21:
           break;
          default:
           {
            i36 = 208;
            break L296;
           }
          }
          i1 = i23 + 4 | 0;
          HEAP32[i33 >> 2] = i1;
          if ((i1 | 0) == (i38 | 0)) {
           i27 = -1;
           break L294;
          } else {
           i25 = i1;
           i1 = i31;
          }
          L352 : while (1) {
           i2 = HEAP8[i25 >> 0] | 0;
           switch (HEAP8[i1 + 3 >> 0] | 0) {
           case -33:
           case -34:
           case -35:
           case -36:
            {
             i36 = 227;
             break L296;
            }
           case -37:
           case -38:
           case -39:
           case -40:
            {
             i36 = 219;
             break L296;
            }
           case -1:
            {
             i36 = 210;
             break L352;
            }
           case 0:
            break;
           default:
            break L352;
           }
           switch (HEAP8[i37 + (i2 & 255) >> 0] | 0) {
           case 5:
            {
             i36 = 215;
             break L296;
            }
           case 6:
            {
             i36 = 217;
             break L296;
            }
           case 7:
            {
             i36 = 219;
             break L296;
            }
           case 11:
            {
             i32 = i25;
             i36 = 221;
             break L296;
            }
           case 17:
            {
             i35 = i25;
             i36 = 222;
             break L296;
            }
           case 24:
           case 22:
            {
             i20 = 0;
             i21 = i25;
             break L319;
            }
           case 29:
            break L352;
           case 10:
           case 9:
           case 21:
            break;
           default:
            {
             i36 = 227;
             break L296;
            }
           }
           i1 = i25 + 2 | 0;
           HEAP32[i33 >> 2] = i1;
           if ((i1 | 0) == (i38 | 0)) {
            i27 = -1;
            break L294;
           } else {
            i21 = i25;
            i25 = i1;
            i1 = i21;
           }
          }
          if ((i36 | 0) == 210) {
           i36 = 0;
           if ((i2 & 255) > 253) {
            i36 = 227;
            break L296;
           }
          }
          i21 = i2 & 255;
          if (!(HEAP32[25356 + ((HEAPU8[344737 + (HEAPU8[i25 + 1 >> 0] | 0) >> 0] << 3 | i21 >>> 5) << 2) >> 2] & 1 << (i21 & 31))) {
           i36 = 214;
           break L296;
          } else {
           i20 = 0;
           i21 = i25;
          }
         } while (0);
         i1 = i21 + 2 | 0;
         HEAP32[i33 >> 2] = i1;
         if ((i1 | 0) == (i38 | 0)) {
          i27 = -1;
          break L294;
         } else i3 = i20;
        }
        switch (i36 | 0) {
        case 150:
         {
          HEAP32[i39 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        case 152:
         {
          if ((i5 - i4 | 0) < 2) {
           i27 = -2;
           break L294;
          }
          HEAP32[i39 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        case 154:
         {
          if ((i5 - i4 | 0) < 3) {
           i27 = -2;
           break L294;
          }
          HEAP32[i39 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        case 156:
         {
          if ((i5 - i4 | 0) < 4) {
           i27 = -2;
           break L294;
          }
          HEAP32[i39 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        case 159:
         {
          HEAP32[i39 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        case 165:
         {
          HEAP32[i39 >> 2] = i28;
          i27 = 0;
          break L294;
         }
        case 166:
         {
          if ((i5 - i28 | 0) < 2) {
           i27 = -2;
           break L294;
          }
          HEAP32[i39 >> 2] = i28;
          i27 = 0;
          break L294;
         }
        case 168:
         {
          if ((i5 - i28 | 0) < 3) {
           i27 = -2;
           break L294;
          }
          HEAP32[i39 >> 2] = i28;
          i27 = 0;
          break L294;
         }
        case 170:
         {
          if ((i5 - i28 | 0) < 4) {
           i27 = -2;
           break L294;
          }
          HEAP32[i39 >> 2] = i28;
          i27 = 0;
          break L294;
         }
        case 172:
         {
          HEAP32[i39 >> 2] = i28;
          i27 = 0;
          break L294;
         }
        case 176:
         {
          HEAP32[i39 >> 2] = i26;
          i27 = 0;
          break L294;
         }
        case 181:
         {
          HEAP32[i39 >> 2] = i24;
          i27 = 0;
          break L294;
         }
        case 196:
         {
          HEAP32[i39 >> 2] = i23;
          i27 = 0;
          break L294;
         }
        case 200:
         {
          if (i30 | 0) {
           i27 = i30;
           break L294;
          }
          HEAP32[i39 >> 2] = HEAP32[i33 >> 2];
          i27 = 0;
          break L294;
         }
        case 202:
         {
          HEAP32[i39 >> 2] = i23;
          i27 = 0;
          break L294;
         }
        case 208:
         {
          HEAP32[i39 >> 2] = i31;
          i27 = 0;
          break L294;
         }
        case 214:
         {
          HEAP32[i39 >> 2] = i25;
          i27 = 0;
          break L294;
         }
        case 215:
         {
          if ((i5 - i25 | 0) < 2) {
           i27 = -2;
           break L294;
          }
          HEAP32[i39 >> 2] = i25;
          i27 = 0;
          break L294;
         }
        case 217:
         {
          if ((i5 - i25 | 0) < 3) {
           i27 = -2;
           break L294;
          }
          HEAP32[i39 >> 2] = i25;
          i27 = 0;
          break L294;
         }
        case 219:
         {
          if ((i5 - i25 | 0) < 4) {
           i27 = -2;
           break L294;
          }
          HEAP32[i39 >> 2] = i25;
          i27 = 0;
          break L294;
         }
        case 221:
         {
          HEAP32[i39 >> 2] = i32 + 2;
          i27 = 1;
          break L294;
         }
        case 222:
         {
          i2 = i35 + 2 | 0;
          HEAP32[i33 >> 2] = i2;
          i1 = i2;
          if ((i2 | 0) == (i38 | 0)) {
           i27 = -1;
           break L294;
          }
          if (!(HEAP8[i35 + 3 >> 0] | 0)) if ((HEAP8[i2 >> 0] | 0) == 62) {
           HEAP32[i39 >> 2] = i35 + 4;
           i27 = 3;
           break L294;
          }
          HEAP32[i39 >> 2] = i1;
          i27 = 0;
          break L294;
         }
        case 227:
         {
          HEAP32[i39 >> 2] = i25;
          i27 = 0;
          break L294;
         }
        case 229:
         {
          HEAP32[i39 >> 2] = i4;
          i27 = 0;
          break L294;
         }
        }
       } while (0);
       i39 = i27;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 109:
      {
       HEAP32[i39 >> 2] = i4;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 111:
      {
       if ((i38 - i4 | 0) < 2) {
        i39 = -2;
        STACKTOP = i40;
        return i39 | 0;
       }
       HEAP32[i39 >> 2] = i4;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 113:
      {
       if ((i38 - i4 | 0) < 3) {
        i39 = -2;
        STACKTOP = i40;
        return i39 | 0;
       }
       HEAP32[i39 >> 2] = i4;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 115:
      {
       if ((i38 - i4 | 0) < 4) {
        i39 = -2;
        STACKTOP = i40;
        return i39 | 0;
       }
       HEAP32[i39 >> 2] = i4;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 118:
      {
       HEAP32[i39 >> 2] = i4;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 125:
      {
       HEAP32[i39 >> 2] = i13;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 127:
      {
       if ((i38 - i13 | 0) < 2) {
        i39 = -2;
        STACKTOP = i40;
        return i39 | 0;
       }
       HEAP32[i39 >> 2] = i13;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 129:
      {
       if ((i38 - i13 | 0) < 3) {
        i39 = -2;
        STACKTOP = i40;
        return i39 | 0;
       }
       HEAP32[i39 >> 2] = i13;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 131:
      {
       if ((i38 - i13 | 0) < 4) {
        i39 = -2;
        STACKTOP = i40;
        return i39 | 0;
       }
       HEAP32[i39 >> 2] = i13;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 133:
      {
       HEAP32[i39 >> 2] = i13;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 244:
      {
       HEAP32[i39 >> 2] = i4;
       i39 = 0;
       STACKTOP = i40;
       return i39 | 0;
      }
     case 291:
      {
       STACKTOP = i40;
       return i19 | 0;
      }
     }
     if ((i36 | 0) == 238) {
      HEAP32[i39 >> 2] = i15 + 2;
      i39 = 2;
      STACKTOP = i40;
      return i39 | 0;
     }
     i1 = i16 + 2 | 0;
     if ((i1 | 0) == (i38 | 0)) {
      i39 = -1;
      STACKTOP = i40;
      return i39 | 0;
     }
     if (!(HEAP8[i16 + 3 >> 0] | 0)) if ((HEAP8[i1 >> 0] | 0) == 62) {
      HEAP32[i39 >> 2] = i16 + 4;
      i39 = 4;
      STACKTOP = i40;
      return i39 | 0;
     }
     HEAP32[i39 >> 2] = i1;
     i39 = 0;
     STACKTOP = i40;
     return i39 | 0;
    }
   case 3:
    {
     i39 = _little2_scanRef(i34, i14 + 2 | 0, i38, i39) | 0;
     STACKTOP = i40;
     return i39 | 0;
    }
   case 9:
    {
     i1 = i14 + 2 | 0;
     if ((i1 | 0) == (i38 | 0)) {
      i39 = -3;
      STACKTOP = i40;
      return i39 | 0;
     }
     if (!(HEAP8[i14 + 3 >> 0] | 0)) i1 = (HEAP8[i37 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) == 10 ? i14 + 4 | 0 : i1;
     HEAP32[i39 >> 2] = i1;
     i39 = 7;
     STACKTOP = i40;
     return i39 | 0;
    }
   case 10:
    {
     HEAP32[i39 >> 2] = i14 + 2;
     i39 = 7;
     STACKTOP = i40;
     return i39 | 0;
    }
   case 4:
    {
     i3 = i14 + 2 | 0;
     if ((i3 | 0) == (i38 | 0)) {
      i39 = -5;
      STACKTOP = i40;
      return i39 | 0;
     }
     if (HEAP8[i14 + 3 >> 0] | 0) break L7;
     if ((HEAP8[i3 >> 0] | 0) != 93) break L7;
     i2 = i14 + 4 | 0;
     if ((i2 | 0) == (i38 | 0)) {
      i39 = -5;
      STACKTOP = i40;
      return i39 | 0;
     }
     if (HEAP8[i14 + 5 >> 0] | 0) break L7;
     if ((HEAP8[i2 >> 0] | 0) != 62) break L7;
     HEAP32[i39 >> 2] = i2;
     i39 = 0;
     STACKTOP = i40;
     return i39 | 0;
    }
   case 5:
    if ((i38 - i4 | 0) < 2) {
     i39 = -2;
     STACKTOP = i40;
     return i39 | 0;
    } else {
     i3 = i14 + 2 | 0;
     break L7;
    }
   case 6:
    if ((i38 - i4 | 0) < 3) {
     i39 = -2;
     STACKTOP = i40;
     return i39 | 0;
    } else {
     i3 = i14 + 3 | 0;
     break L7;
    }
   default:
    {
     i36 = 265;
     break L7;
    }
   }
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i36 = 262;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i36 = 264;
   break;
  }
 case -1:
  {
   if ((i2 & 255) > 253) i36 = 264; else i36 = 265;
   break;
  }
 default:
  i36 = 265;
 } while (0);
 do if ((i36 | 0) == 262) if ((i38 - i4 | 0) < 4) {
  i39 = -2;
  STACKTOP = i40;
  return i39 | 0;
 } else {
  i3 = i14 + 4 | 0;
  break;
 } else if ((i36 | 0) == 264) {
  HEAP32[i39 >> 2] = i14;
  i39 = 0;
  STACKTOP = i40;
  return i39 | 0;
 } else if ((i36 | 0) == 265) i3 = i14 + 2 | 0; while (0);
 L460 : do if ((i3 | 0) != (i38 | 0)) {
  i4 = i34 + 76 | 0;
  i5 = i38;
  L462 : while (1) {
   i2 = HEAP8[i3 >> 0] | 0;
   L464 : do switch (HEAP8[i3 + 1 >> 0] | 0) {
   case -33:
   case -34:
   case -35:
   case -36:
    {
     i36 = 287;
     break L462;
    }
   case 0:
    switch (HEAP8[i4 + (i2 & 255) >> 0] | 0) {
    case 10:
    case 9:
    case 8:
    case 1:
    case 0:
    case 2:
    case 3:
     {
      i36 = 287;
      break L462;
     }
    case 7:
     {
      i36 = 277;
      break L464;
     }
    case 5:
     {
      if ((i5 - i3 | 0) < 2) {
       i36 = 272;
       break L462;
      }
      i1 = i3 + 2 | 0;
      break L464;
     }
    case 6:
     {
      if ((i5 - i3 | 0) < 3) {
       i36 = 275;
       break L462;
      }
      i1 = i3 + 3 | 0;
      break L464;
     }
    case 4:
     {
      i1 = i3 + 2 | 0;
      if ((i1 | 0) == (i38 | 0)) {
       i36 = 287;
       break L462;
      }
      if (HEAP8[i3 + 3 >> 0] | 0) break L464;
      if ((HEAP8[i1 >> 0] | 0) != 93) break L464;
      i6 = i3 + 4 | 0;
      if ((i6 | 0) == (i38 | 0)) {
       i36 = 287;
       break L462;
      }
      if (HEAP8[i3 + 5 >> 0] | 0) break L464;
      if ((HEAP8[i6 >> 0] | 0) == 62) {
       i36 = 286;
       break L462;
      } else break L464;
     }
    default:
     {
      i36 = 288;
      break L464;
     }
    }
   case -37:
   case -38:
   case -39:
   case -40:
    {
     i36 = 277;
     break;
    }
   case -1:
    {
     if ((i2 & 255) > 253) {
      i36 = 287;
      break L462;
     } else i36 = 288;
     break;
    }
   default:
    i36 = 288;
   } while (0);
   if ((i36 | 0) == 277) {
    i36 = 0;
    if ((i5 - i3 | 0) < 4) {
     i36 = 278;
     break;
    }
    i1 = i3 + 4 | 0;
   } else if ((i36 | 0) == 288) {
    i36 = 0;
    i1 = i3 + 2 | 0;
   }
   if ((i1 | 0) == (i38 | 0)) break L460; else i3 = i1;
  }
  if ((i36 | 0) == 272) {
   HEAP32[i39 >> 2] = i3;
   i39 = 6;
   STACKTOP = i40;
   return i39 | 0;
  } else if ((i36 | 0) == 275) {
   HEAP32[i39 >> 2] = i3;
   i39 = 6;
   STACKTOP = i40;
   return i39 | 0;
  } else if ((i36 | 0) == 278) {
   HEAP32[i39 >> 2] = i3;
   i39 = 6;
   STACKTOP = i40;
   return i39 | 0;
  } else if ((i36 | 0) == 286) {
   HEAP32[i39 >> 2] = i6;
   i39 = 0;
   STACKTOP = i40;
   return i39 | 0;
  } else if ((i36 | 0) == 287) {
   HEAP32[i39 >> 2] = i3;
   i39 = 6;
   STACKTOP = i40;
   return i39 | 0;
  }
 } while (0);
 HEAP32[i39 >> 2] = i38;
 i39 = 6;
 STACKTOP = i40;
 return i39 | 0;
}

function _inflate(i56, i1) {
 i56 = i56 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i57 = 0, i58 = 0;
 i57 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i45 = i57 + 16 | 0;
 i46 = i57 + 12 | 0;
 i47 = i57 + 8 | 0;
 i48 = i57 + 4 | 0;
 i49 = i57;
 if (!i56) {
  i56 = -2;
  STACKTOP = i57;
  return i56 | 0;
 }
 i50 = i56 + 28 | 0;
 i2 = HEAP32[i50 >> 2] | 0;
 if (!i2) {
  i56 = -2;
  STACKTOP = i57;
  return i56 | 0;
 }
 if (!(HEAP32[i56 >> 2] | 0)) {
  i56 = -2;
  STACKTOP = i57;
  return i56 | 0;
 }
 i52 = (i1 | 0) == 4 ? -5 : 0;
 i53 = i56 + 4 | 0;
 i54 = i56 + 8 | 0;
 i43 = i56 + 24 | 0;
 i41 = i56 + 32 | 0;
 i42 = i56 + 40 | 0;
 i40 = i56 + 36 | 0;
 i55 = i56 + 48 | 0;
 i1 = -5;
 i39 = i2;
 L10 : while (1) {
  i3 = i39 + 4 | 0;
  i4 = i39 + 16 | 0;
  i5 = i39 + 4 | 0;
  L12 : while (1) {
   L14 : do switch (HEAP32[i39 >> 2] | 0) {
   case 2:
    {
     i33 = 22;
     break L10;
    }
   case 3:
    {
     i33 = 25;
     break L10;
    }
   case 4:
    {
     i33 = 28;
     break L10;
    }
   case 5:
    {
     i33 = 31;
     break L10;
    }
   case 6:
    {
     i33 = 34;
     break L10;
    }
   case 12:
    {
     i1 = 1;
     i33 = 252;
     break L10;
    }
   case 13:
    {
     i33 = 253;
     break L10;
    }
   case 7:
    {
     i33 = 35;
     break L12;
    }
   case 8:
    {
     i2 = i39;
     i33 = 242;
     break L12;
    }
   case 9:
    {
     i33 = 9;
     break L12;
    }
   case 10:
    {
     i33 = 8;
     break L12;
    }
   case 11:
    {
     i33 = 7;
     break L12;
    }
   case 0:
    {
     i2 = HEAP32[i53 >> 2] | 0;
     if (!i2) {
      i33 = 252;
      break L10;
     }
     HEAP32[i53 >> 2] = i2 + -1;
     HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + 1;
     i1 = HEAP32[i56 >> 2] | 0;
     HEAP32[i56 >> 2] = i1 + 1;
     i1 = HEAPU8[i1 >> 0] | 0;
     HEAP32[i3 >> 2] = i1;
     if ((i1 & 15 | 0) != 8) {
      HEAP32[i39 >> 2] = 13;
      HEAP32[i43 >> 2] = 281062;
      HEAP32[i3 >> 2] = 5;
      i1 = i52;
      continue L12;
     }
     if (((i1 >>> 4) + 8 | 0) >>> 0 > (HEAP32[i4 >> 2] | 0) >>> 0) {
      HEAP32[i39 >> 2] = 13;
      HEAP32[i43 >> 2] = 281089;
      HEAP32[i3 >> 2] = 5;
      i1 = i52;
      continue L12;
     } else {
      HEAP32[i39 >> 2] = 1;
      i1 = i52;
      break L14;
     }
    }
   case 1:
    break;
   default:
    {
     i1 = -2;
     i33 = 255;
     break L10;
    }
   } while (0);
   i2 = HEAP32[i53 >> 2] | 0;
   if (!i2) {
    i33 = 252;
    break L10;
   }
   i2 = i2 + -1 | 0;
   HEAP32[i53 >> 2] = i2;
   HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + 1;
   i1 = HEAP32[i56 >> 2] | 0;
   HEAP32[i56 >> 2] = i1 + 1;
   i1 = HEAPU8[i1 >> 0] | 0;
   if (((HEAP32[i5 >> 2] << 8 | i1) >>> 0) % 31 | 0 | 0) {
    HEAP32[i39 >> 2] = 13;
    HEAP32[i43 >> 2] = 281109;
    HEAP32[i5 >> 2] = 5;
    i1 = i52;
    continue;
   }
   if (i1 & 32 | 0) {
    i33 = 21;
    break L10;
   }
   HEAP32[i39 >> 2] = 7;
   i1 = i52;
  }
  do if ((i33 | 0) == 7) {
   i33 = 0;
   i3 = HEAP32[i53 >> 2] | 0;
   i2 = i39;
  } else if ((i33 | 0) == 8) {
   i3 = HEAP32[i53 >> 2] | 0;
   i2 = i39;
   i33 = 246;
  } else if ((i33 | 0) == 9) {
   i3 = HEAP32[i53 >> 2] | 0;
   i2 = i39;
   i33 = 244;
  } else if ((i33 | 0) == 35) {
   i33 = 0;
   i35 = HEAP32[i39 + 20 >> 2] | 0;
   i36 = i35 + 32 | 0;
   i37 = i35 + 28 | 0;
   i38 = i35 + 52 | 0;
   i4 = HEAP32[i38 >> 2] | 0;
   i34 = i35 + 48 | 0;
   i2 = HEAP32[i34 >> 2] | 0;
   i3 = i4;
   if (i4 >>> 0 < i2 >>> 0) {
    i23 = i35 + 44 | 0;
    i2 = i2 + ~i3 | 0;
    i22 = i23;
   } else {
    i23 = i35 + 44 | 0;
    i2 = (HEAP32[i23 >> 2] | 0) - i3 | 0;
    i22 = i23;
   }
   i24 = i35 + 40 | 0;
   i25 = i35 + 4 | 0;
   i26 = i35 + 24 | 0;
   i27 = i35 + 4 | 0;
   i28 = i35 + 8 | 0;
   i29 = i35 + 20 | 0;
   i32 = i35 + 12 | 0;
   i30 = i35 + 36 | 0;
   i31 = i35 + 16 | 0;
   i21 = 0;
   i7 = i2;
   i3 = i4;
   i6 = HEAP32[i53 >> 2] | 0;
   i5 = HEAP32[i56 >> 2] | 0;
   i4 = HEAP32[i37 >> 2] | 0;
   i2 = HEAP32[i36 >> 2] | 0;
   L35 : while (1) {
    L37 : while (1) {
     L39 : while (1) {
      i9 = i7;
      i7 = HEAP32[i35 >> 2] | 0;
      while (1) {
       switch (i7 | 0) {
       case 7:
        {
         i33 = 225;
         break L35;
        }
       case 8:
        {
         i1 = i3;
         i33 = 228;
         break L35;
        }
       case 9:
        {
         i33 = 229;
         break L35;
        }
       case 3:
        {
         i33 = 43;
         break L37;
        }
       case 4:
        {
         i33 = 86;
         break L37;
        }
       case 5:
        {
         i33 = 105;
         break L37;
        }
       case 6:
        break L37;
       case 0:
        {
         i33 = 45;
         break L39;
        }
       case 1:
        {
         i33 = 44;
         break L39;
        }
       case 2:
        break;
       default:
        {
         i33 = 230;
         break L35;
        }
       }
       if (!i6) {
        i33 = 66;
        break L35;
       }
       do if (!i9) {
        if ((i3 | 0) == (HEAP32[i22 >> 2] | 0)) {
         i20 = HEAP32[i34 >> 2] | 0;
         i8 = HEAP32[i24 >> 2] | 0;
         i7 = (i8 >>> 0 < i20 >>> 0 ? i20 + -1 | 0 : i3) - i8 | 0;
         if ((i20 | 0) != (i8 | 0)) if (!i7) i3 = i8; else {
          i1 = i7;
          i3 = i8;
          break;
         }
        }
        HEAP32[i38 >> 2] = i3;
        i10 = _inflate_flush(i35, i56, i1) | 0;
        i3 = HEAP32[i38 >> 2] | 0;
        i7 = HEAP32[i34 >> 2] | 0;
        i1 = i3;
        i20 = HEAP32[i22 >> 2] | 0;
        i8 = i7;
        i9 = i20;
        i1 = i3 >>> 0 < i7 >>> 0 ? i8 + ~i1 | 0 : i9 - i1 | 0;
        if ((i3 | 0) == (i20 | 0)) {
         i20 = HEAP32[i24 >> 2] | 0;
         i19 = (i7 | 0) == (i20 | 0);
         i1 = i19 ? i1 : (i20 >>> 0 < i7 >>> 0 ? i8 + -1 | 0 : i9) - i20 | 0;
         i3 = i19 ? i3 : i20;
        }
        if (!i1) {
         i33 = 74;
         break L35;
        }
       } else i1 = i9; while (0);
       i20 = HEAP32[i25 >> 2] | 0;
       i20 = i20 >>> 0 > i6 >>> 0 ? i6 : i20;
       i20 = i20 >>> 0 > i1 >>> 0 ? i1 : i20;
       _memcpy(i3 | 0, i5 | 0, i20 | 0) | 0;
       i5 = i5 + i20 | 0;
       i6 = i6 - i20 | 0;
       i3 = i3 + i20 | 0;
       i7 = i1 - i20 | 0;
       i20 = (HEAP32[i25 >> 2] | 0) - i20 | 0;
       HEAP32[i25 >> 2] = i20;
       if (i20 | 0) {
        i1 = 0;
        continue L39;
       }
       i20 = HEAP32[i26 >> 2] | 0 ? 7 : 0;
       HEAP32[i35 >> 2] = i20;
       i1 = 0;
       i9 = i7;
       i7 = i20;
      }
     }
     L56 : do if ((i33 | 0) == 44) {
      i33 = 0;
      if (i4 >>> 0 < 32) {
       i7 = i5;
       while (1) {
        if (!i6) {
         i33 = 58;
         break L35;
        }
        i6 = i6 + -1 | 0;
        i5 = i7 + 1 | 0;
        i2 = (HEAPU8[i7 >> 0] | 0) << i4 | i2;
        i4 = i4 + 8 | 0;
        if (i4 >>> 0 < 32) {
         i7 = i5;
         i1 = 0;
        } else {
         i1 = 0;
         break;
        }
       }
      }
      i7 = i2 >>> 16 ^ 65535;
      if ((i7 | 0) != (i2 & 65535 | 0)) {
       i33 = 60;
       break L35;
      }
      HEAP32[i25 >> 2] = i7;
      if (!i7) {
       i4 = 0;
       i2 = 0;
       i7 = HEAP32[i26 >> 2] | 0 ? 7 : 0;
      } else {
       i4 = 0;
       i2 = 0;
       i7 = 2;
      }
     } else if ((i33 | 0) == 45) {
      i33 = 0;
      if (i4 >>> 0 < 3) {
       if (!i6) {
        i33 = 48;
        break L35;
       }
       i1 = 0;
       i6 = i6 + -1 | 0;
       i7 = i5 + 1 | 0;
       i8 = i4 + 8 | 0;
       i2 = (HEAPU8[i5 >> 0] | 0) << i4 | i2;
      } else {
       i7 = i5;
       i8 = i4;
      }
      HEAP32[i26 >> 2] = i2 & 1;
      switch (i2 >>> 1 & 3) {
      case 3:
       {
        i33 = 55;
        break L35;
       }
      case 0:
       {
        i4 = i8 + -3 | 0;
        i20 = i4 & 7;
        i5 = i7;
        i4 = i4 - i20 | 0;
        i2 = i2 >>> 3 >>> i20;
        i7 = 1;
        break L56;
       }
      case 1:
       {
        i4 = FUNCTION_TABLE_iiii[HEAP32[i41 >> 2] & 127](HEAP32[i42 >> 2] | 0, 1, 28) | 0;
        if (!i4) {
         i33 = 53;
         break L35;
        }
        HEAP32[i4 >> 2] = 0;
        HEAP8[i4 + 16 >> 0] = 9;
        HEAP8[i4 + 17 >> 0] = 5;
        HEAP32[i4 + 20 >> 2] = 12956;
        HEAP32[i4 + 24 >> 2] = 17052;
        HEAP32[i27 >> 2] = i4;
        i5 = i7;
        i4 = i8 + -3 | 0;
        i2 = i2 >>> 3;
        i7 = 6;
        break L56;
       }
      case 2:
       {
        i5 = i7;
        i4 = i8 + -3 | 0;
        i2 = i2 >>> 3;
        i7 = 3;
        break L56;
       }
      default:
       {
        i33 = 40;
        break L10;
       }
      }
     } while (0);
     HEAP32[i35 >> 2] = i7;
     i7 = i9;
    }
    if ((i33 | 0) == 43) {
     if (i4 >>> 0 < 14) {
      i7 = i5;
      while (1) {
       if (!i6) {
        i33 = 79;
        break L35;
       }
       i6 = i6 + -1 | 0;
       i5 = i7 + 1 | 0;
       i2 = (HEAPU8[i7 >> 0] | 0) << i4 | i2;
       i4 = i4 + 8 | 0;
       if (i4 >>> 0 < 14) {
        i7 = i5;
        i1 = 0;
       } else {
        i1 = 0;
        break;
       }
      }
     }
     HEAP32[i25 >> 2] = i2 & 16383;
     i7 = i2 & 31;
     if (i7 >>> 0 > 29) {
      i33 = 82;
      break;
     }
     i8 = i2 >>> 5 & 31;
     if (i8 >>> 0 > 29) {
      i33 = 82;
      break;
     }
     i33 = FUNCTION_TABLE_iiii[HEAP32[i41 >> 2] & 127](HEAP32[i42 >> 2] | 0, i7 + 258 + i8 | 0, 4) | 0;
     HEAP32[i32 >> 2] = i33;
     if (!i33) {
      i33 = 84;
      break;
     }
     HEAP32[i28 >> 2] = 0;
     HEAP32[i35 >> 2] = 4;
     i8 = i5;
     i4 = i4 + -14 | 0;
     i2 = i2 >>> 14;
     i7 = 0;
     i33 = 89;
    } else if ((i33 | 0) == 86) {
     i7 = HEAP32[i28 >> 2] | 0;
     if (i7 >>> 0 < (((HEAP32[i25 >> 2] | 0) >>> 10) + 4 | 0) >>> 0) {
      i8 = i5;
      i33 = 89;
     } else {
      i8 = HEAP32[i32 >> 2] | 0;
      i33 = 88;
     }
    } else if ((i33 | 0) == 105) {
     i8 = HEAP32[i28 >> 2] | 0;
     i33 = 106;
    }
    if ((i33 | 0) == 89) while (1) {
     if (i4 >>> 0 < 3) {
      if (!i6) {
       i33 = 92;
       break L35;
      }
      i6 = i6 + -1 | 0;
      i5 = i8 + 1 | 0;
      i9 = i4 + 8 | 0;
      i2 = (HEAPU8[i8 >> 0] | 0) << i4 | i2;
      i1 = 0;
     } else {
      i5 = i8;
      i9 = i4;
     }
     i8 = HEAP32[i32 >> 2] | 0;
     HEAP32[i28 >> 2] = i7 + 1;
     HEAP32[i8 + (HEAP32[17308 + (i7 << 2) >> 2] << 2) >> 2] = i2 & 7;
     i2 = i2 >>> 3;
     i4 = i9 + -3 | 0;
     i7 = HEAP32[i28 >> 2] | 0;
     if (i7 >>> 0 < (((HEAP32[i25 >> 2] | 0) >>> 10) + 4 | 0) >>> 0) {
      i8 = i5;
      i33 = 89;
     } else {
      i33 = 88;
      break;
     }
    }
    if ((i33 | 0) == 88) {
     if (i7 >>> 0 < 19) do {
      HEAP32[i28 >> 2] = i7 + 1;
      HEAP32[i8 + (HEAP32[17308 + (i7 << 2) >> 2] << 2) >> 2] = 0;
      i7 = HEAP32[i28 >> 2] | 0;
     } while (i7 >>> 0 < 19);
     HEAP32[i31 >> 2] = 7;
     i7 = HEAP32[i30 >> 2] | 0;
     HEAP32[i45 >> 2] = 0;
     i9 = FUNCTION_TABLE_iiii[HEAP32[i41 >> 2] & 127](HEAP32[i42 >> 2] | 0, 19, 4) | 0;
     if (!i9) {
      i33 = 96;
      break;
     }
     i7 = _huft_build(i8, 19, 19, 0, 0, i29, i31, i7, i45, i9) | 0;
     switch (i7 | 0) {
     case -5:
      {
       i1 = 281232;
       i33 = 100;
       break L35;
      }
     case -3:
      {
       i33 = 99;
       break L35;
      }
     default:
      {}
     }
     if (!(HEAP32[i31 >> 2] | 0)) {
      i1 = 281232;
      i33 = 100;
      break;
     }
     FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, i9);
     switch (i7 | 0) {
     case -3:
      {
       i33 = 102;
       break L35;
      }
     case 0:
      break;
     default:
      {
       i1 = i7;
       i33 = 103;
       break L35;
      }
     }
     HEAP32[i28 >> 2] = 0;
     HEAP32[i35 >> 2] = 5;
     i8 = 0;
     i33 = 106;
    }
    if ((i33 | 0) == 106) {
     i33 = 0;
     i7 = HEAP32[i27 >> 2] | 0;
     if (i8 >>> 0 < ((i7 & 31) + 258 + (i7 >>> 5 & 31) | 0) >>> 0) {
      i15 = i8;
      while (1) {
       i9 = HEAP32[i31 >> 2] | 0;
       if (i4 >>> 0 < i9 >>> 0) {
        i8 = i5;
        while (1) {
         if (!i6) {
          i33 = 111;
          break L35;
         }
         i6 = i6 + -1 | 0;
         i5 = i8 + 1 | 0;
         i2 = (HEAPU8[i8 >> 0] | 0) << i4 | i2;
         i4 = i4 + 8 | 0;
         if (i4 >>> 0 < i9 >>> 0) {
          i8 = i5;
          i1 = 0;
         } else {
          i1 = 0;
          break;
         }
        }
       }
       i20 = HEAP32[i29 >> 2] | 0;
       i12 = HEAP32[17384 + (i9 << 2) >> 2] & i2;
       i13 = HEAPU8[i20 + (i12 << 3) + 1 >> 0] | 0;
       i12 = HEAP32[i20 + (i12 << 3) + 4 >> 2] | 0;
       if (i12 >>> 0 < 16) {
        i10 = HEAP32[i32 >> 2] | 0;
        HEAP32[i28 >> 2] = i15 + 1;
        HEAP32[i10 + (i15 << 2) >> 2] = i12;
        i4 = i4 - i13 | 0;
        i2 = i2 >>> i13;
        i8 = HEAP32[i28 >> 2] | 0;
       } else {
        i14 = (i12 | 0) == 18;
        i10 = i14 ? 7 : i12 + -14 | 0;
        i14 = i14 ? 11 : 3;
        i9 = i10 + i13 | 0;
        if (i4 >>> 0 < i9 >>> 0) {
         i8 = i5;
         while (1) {
          if (!i6) {
           i33 = 118;
           break L35;
          }
          i6 = i6 + -1 | 0;
          i5 = i8 + 1 | 0;
          i2 = (HEAPU8[i8 >> 0] | 0) << i4 | i2;
          i4 = i4 + 8 | 0;
          if (i4 >>> 0 < i9 >>> 0) {
           i1 = 0;
           i8 = i5;
          } else {
           i1 = 0;
           break;
          }
         }
        }
        i2 = i2 >>> i13;
        i11 = HEAP32[17384 + (i10 << 2) >> 2] & i2;
        i8 = i11 + i14 | 0;
        i2 = i2 >>> i10;
        i4 = i4 - i13 - i10 | 0;
        i10 = HEAP32[i32 >> 2] | 0;
        if ((i8 + i15 | 0) >>> 0 > ((i7 & 31) + 258 + (i7 >>> 5 & 31) | 0) >>> 0) {
         i33 = 121;
         break L35;
        }
        i7 = (i12 | 0) == 16;
        if ((i15 | 0) == 0 & i7) {
         i33 = 121;
         break L35;
        }
        if (i7) i9 = HEAP32[i10 + (i15 + -1 << 2) >> 2] | 0; else i9 = 0;
        i7 = i8;
        i8 = i15;
        while (1) {
         HEAP32[i10 + (i8 << 2) >> 2] = i9;
         i7 = i7 + -1 | 0;
         if (!i7) break; else i8 = i8 + 1 | 0;
        }
        i8 = i14 + i15 + i11 | 0;
        HEAP32[i28 >> 2] = i8;
       }
       i7 = HEAP32[i27 >> 2] | 0;
       if (i8 >>> 0 < ((i7 & 31) + 258 + (i7 >>> 5 & 31) | 0) >>> 0) i15 = i8; else break;
      }
     } else i10 = HEAP32[i32 >> 2] | 0;
     HEAP32[i29 >> 2] = 0;
     HEAP32[i46 >> 2] = 9;
     HEAP32[i47 >> 2] = 6;
     i12 = i7 & 31;
     i9 = i12 + 257 | 0;
     i7 = (i7 >>> 5 & 31) + 1 | 0;
     i8 = HEAP32[i30 >> 2] | 0;
     HEAP32[i45 >> 2] = 0;
     i13 = FUNCTION_TABLE_iiii[HEAP32[i41 >> 2] & 127](HEAP32[i42 >> 2] | 0, 288, 4) | 0;
     L135 : do if (!i13) {
      i7 = -4;
      i33 = 144;
     } else {
      L138 : do switch (_huft_build(i10, i9, 257, 17452, 17576, i48, i46, i8, i45, i13) | 0) {
      case 0:
       {
        i11 = HEAP32[i46 >> 2] | 0;
        if (!i11) {
         i7 = 281369;
         i33 = 132;
        } else {
         switch (_huft_build(i10 + (i9 << 2) | 0, i7, 0, 17700, 17820, i49, i47, i8, i45, i13) | 0) {
         case 0:
          {
           i7 = HEAP32[i47 >> 2] | 0;
           if ((i12 | 0) != 0 & (i7 | 0) == 0) i33 = 137; else {
            FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, i13);
            break L138;
           }
           break;
          }
         case -3:
          {
           i7 = 281433;
           i33 = 138;
           break;
          }
         case -5:
          {
           i7 = 281462;
           i33 = 138;
           break;
          }
         case -4:
          {
           i7 = -4;
           break;
          }
         default:
          i33 = 137;
         }
         if ((i33 | 0) == 137) {
          i7 = 281400;
          i33 = 138;
         }
         if ((i33 | 0) == 138) {
          HEAP32[i43 >> 2] = i7;
          i7 = -3;
         }
         FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, i13);
         i33 = 141;
        }
        break;
       }
      case -3:
       {
        i7 = 281334;
        i33 = 132;
        break;
       }
      case -4:
       {
        i7 = -4;
        i33 = 133;
        break;
       }
      default:
       {
        i7 = 281369;
        i33 = 132;
       }
      } while (0);
      if ((i33 | 0) == 132) {
       HEAP32[i43 >> 2] = i7;
       i7 = -3;
       i33 = 133;
      }
      if ((i33 | 0) == 133) {
       FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, i13);
       i33 = 141;
      }
      L155 : do if ((i33 | 0) == 141) {
       i33 = 0;
       switch (i7 | 0) {
       case 0:
        {
         i11 = HEAP32[i46 >> 2] | 0;
         i7 = HEAP32[i47 >> 2] | 0;
         break L155;
        }
       case -3:
        {
         FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, HEAP32[i32 >> 2] | 0);
         HEAP32[i35 >> 2] = 9;
         i7 = -3;
         i33 = 144;
         break L135;
        }
       default:
        {
         i7 = -4;
         i33 = 144;
         break L135;
        }
       }
      } while (0);
      i8 = HEAP32[i48 >> 2] | 0;
      i9 = HEAP32[i49 >> 2] | 0;
      i10 = FUNCTION_TABLE_iiii[HEAP32[i41 >> 2] & 127](HEAP32[i42 >> 2] | 0, 1, 28) | 0;
      if (!i10) {
       HEAP32[i36 >> 2] = i2;
       HEAP32[i37 >> 2] = i4;
       HEAP32[i53 >> 2] = i6;
       HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
       HEAP32[i56 >> 2] = i5;
       HEAP32[i38 >> 2] = i3;
       i1 = -4;
       i8 = 0;
       i7 = _inflate_flush(i35, i56, -4) | 0;
       break;
      } else {
       HEAP32[i10 >> 2] = 0;
       HEAP8[i10 + 16 >> 0] = i11;
       HEAP8[i10 + 17 >> 0] = i7;
       HEAP32[i10 + 20 >> 2] = i8;
       HEAP32[i10 + 24 >> 2] = i9;
       HEAP32[i27 >> 2] = i10;
       i8 = 1;
       i7 = i21;
       break;
      }
     } while (0);
     if ((i33 | 0) == 144) {
      i33 = 0;
      HEAP32[i36 >> 2] = i2;
      HEAP32[i37 >> 2] = i4;
      HEAP32[i53 >> 2] = i6;
      HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
      HEAP32[i56 >> 2] = i5;
      HEAP32[i38 >> 2] = i3;
      i1 = i7;
      i8 = 0;
      i7 = _inflate_flush(i35, i56, i7) | 0;
     }
     if (!i8) {
      i1 = i7;
      break;
     }
     FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, HEAP32[i32 >> 2] | 0);
     HEAP32[i35 >> 2] = 6;
     i21 = i7;
    }
    HEAP32[i36 >> 2] = i2;
    HEAP32[i37 >> 2] = i4;
    HEAP32[i53 >> 2] = i6;
    HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
    HEAP32[i56 >> 2] = i5;
    HEAP32[i38 >> 2] = i3;
    i20 = HEAP32[i27 >> 2] | 0;
    i7 = HEAP32[i34 >> 2] | 0;
    i8 = i3;
    if (i3 >>> 0 < i7 >>> 0) i7 = i7 + ~i8 | 0; else i7 = (HEAP32[i23 >> 2] | 0) - i8 | 0;
    i12 = i20 + 16 | 0;
    i13 = i20 + 8 | 0;
    i14 = i20 + 12 | 0;
    i15 = i20 + 20 | 0;
    i16 = i20 + 8 | 0;
    i17 = i20 + 4 | 0;
    i18 = i20 + 17 | 0;
    i19 = i20 + 24 | 0;
    i8 = HEAP32[i20 >> 2] | 0;
    L173 : while (1) {
     switch (i8 | 0) {
     case 7:
      {
       i33 = 213;
       break L173;
      }
     case 8:
      {
       i1 = 1;
       i33 = 215;
       break L173;
      }
     case 9:
      {
       i33 = 216;
       break L173;
      }
     case 0:
      {
       i9 = HEAPU8[i12 >> 0] | 0;
       HEAP32[i14 >> 2] = i9;
       HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
       HEAP32[i20 >> 2] = 1;
       i33 = 159;
       break;
      }
     case 1:
      {
       i9 = HEAP32[i14 >> 2] | 0;
       i33 = 159;
       break;
      }
     case 2:
      {
       i8 = HEAP32[i16 >> 2] | 0;
       if (i4 >>> 0 < i8 >>> 0) while (1) {
        if (!i6) {
         i6 = 0;
         break L173;
        }
        i6 = i6 + -1 | 0;
        i1 = i5 + 1 | 0;
        i2 = (HEAPU8[i5 >> 0] | 0) << i4 | i2;
        i4 = i4 + 8 | 0;
        if (i4 >>> 0 < i8 >>> 0) {
         i5 = i1;
         i1 = 0;
        } else {
         i5 = i1;
         i1 = 0;
         break;
        }
       }
       HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[17384 + (i8 << 2) >> 2] & i2);
       i33 = HEAPU8[i18 >> 0] | 0;
       HEAP32[i14 >> 2] = i33;
       HEAP32[i16 >> 2] = HEAP32[i19 >> 2];
       HEAP32[i20 >> 2] = 3;
       i4 = i4 - i8 | 0;
       i2 = i2 >>> i8;
       i8 = i33;
       i33 = 175;
       break;
      }
     case 3:
      {
       i8 = HEAP32[i14 >> 2] | 0;
       i33 = 175;
       break;
      }
     case 4:
      {
       i8 = HEAP32[i16 >> 2] | 0;
       if (i4 >>> 0 < i8 >>> 0) while (1) {
        if (!i6) {
         i6 = 0;
         break L173;
        }
        i6 = i6 + -1 | 0;
        i1 = i5 + 1 | 0;
        i2 = (HEAPU8[i5 >> 0] | 0) << i4 | i2;
        i4 = i4 + 8 | 0;
        if (i4 >>> 0 < i8 >>> 0) {
         i5 = i1;
         i1 = 0;
        } else {
         i5 = i1;
         i1 = 0;
         break;
        }
       }
       i33 = (HEAP32[i14 >> 2] | 0) + (HEAP32[17384 + (i8 << 2) >> 2] & i2) | 0;
       HEAP32[i14 >> 2] = i33;
       HEAP32[i20 >> 2] = 5;
       i4 = i4 - i8 | 0;
       i2 = i2 >>> i8;
       i8 = i33;
       i33 = 187;
       break;
      }
     case 5:
      {
       i8 = HEAP32[i14 >> 2] | 0;
       i33 = 187;
       break;
      }
     case 6:
      {
       do if (!i7) {
        if ((i3 | 0) == (HEAP32[i22 >> 2] | 0)) {
         i11 = HEAP32[i34 >> 2] | 0;
         i8 = HEAP32[i24 >> 2] | 0;
         i7 = (i8 >>> 0 < i11 >>> 0 ? i11 + -1 | 0 : i3) - i8 | 0;
         if ((i11 | 0) != (i8 | 0)) if (!i7) i3 = i8; else {
          i3 = i8;
          break;
         }
        }
        HEAP32[i38 >> 2] = i3;
        i1 = _inflate_flush(i35, i56, i1) | 0;
        i3 = HEAP32[i38 >> 2] | 0;
        i8 = HEAP32[i34 >> 2] | 0;
        i7 = i3;
        i11 = HEAP32[i22 >> 2] | 0;
        i9 = i8;
        i10 = i11;
        i7 = i3 >>> 0 < i8 >>> 0 ? i9 + ~i7 | 0 : i10 - i7 | 0;
        if ((i3 | 0) == (i11 | 0)) {
         i11 = HEAP32[i24 >> 2] | 0;
         i58 = (i8 | 0) == (i11 | 0);
         i7 = i58 ? i7 : (i11 >>> 0 < i8 >>> 0 ? i9 + -1 | 0 : i10) - i11 | 0;
         i3 = i58 ? i3 : i11;
        }
        if (!i7) {
         i33 = 215;
         break L173;
        }
       } while (0);
       HEAP8[i3 >> 0] = HEAP32[i16 >> 2];
       HEAP32[i20 >> 2] = 0;
       i7 = i7 + -1 | 0;
       i3 = i3 + 1 | 0;
       i1 = 0;
       i8 = 0;
       continue L173;
      }
     default:
      {
       i1 = -2;
       break L173;
      }
     }
     if ((i33 | 0) == 159) {
      i33 = 0;
      if (i4 >>> 0 < i9 >>> 0) {
       i8 = i5;
       while (1) {
        if (!i6) {
         i6 = 0;
         i5 = i8;
         break L173;
        }
        i6 = i6 + -1 | 0;
        i5 = i8 + 1 | 0;
        i2 = (HEAPU8[i8 >> 0] | 0) << i4 | i2;
        i4 = i4 + 8 | 0;
        if (i4 >>> 0 < i9 >>> 0) {
         i8 = i5;
         i1 = 0;
        } else {
         i1 = 0;
         break;
        }
       }
      }
      i11 = HEAP32[i16 >> 2] | 0;
      i9 = HEAP32[17384 + (i9 << 2) >> 2] & i2;
      i10 = i11 + (i9 << 3) | 0;
      i58 = HEAPU8[i10 + 1 >> 0] | 0;
      i2 = i2 >>> i58;
      i4 = i4 - i58 | 0;
      i58 = HEAP8[i10 >> 0] | 0;
      i8 = i58 & 255;
      if (!(i58 << 24 >> 24)) {
       HEAP32[i16 >> 2] = HEAP32[i11 + (i9 << 3) + 4 >> 2];
       HEAP32[i20 >> 2] = 6;
       i11 = i3;
       i58 = i7;
       i8 = 6;
       i3 = i11;
       i7 = i58;
       continue;
      }
      if (i8 & 16 | 0) {
       HEAP32[i16 >> 2] = i8 & 15;
       HEAP32[i17 >> 2] = HEAP32[i11 + (i9 << 3) + 4 >> 2];
       HEAP32[i20 >> 2] = 2;
       i11 = i3;
       i58 = i7;
       i8 = 2;
       i3 = i11;
       i7 = i58;
       continue;
      }
      if (!(i8 & 64)) {
       HEAP32[i14 >> 2] = i8;
       HEAP32[i16 >> 2] = i10 + (HEAP32[i11 + (i9 << 3) + 4 >> 2] << 3);
       i11 = i3;
       i58 = i7;
       i8 = 1;
       i3 = i11;
       i7 = i58;
       continue;
      }
      if (!(i8 & 32)) {
       i33 = 170;
       break;
      }
      HEAP32[i20 >> 2] = 7;
      i11 = i3;
      i58 = i7;
      i8 = 7;
      i3 = i11;
      i7 = i58;
      continue;
     } else if ((i33 | 0) == 175) {
      i33 = 0;
      if (i4 >>> 0 < i8 >>> 0) while (1) {
       if (!i6) {
        i6 = 0;
        break L173;
       }
       i6 = i6 + -1 | 0;
       i1 = i5 + 1 | 0;
       i2 = (HEAPU8[i5 >> 0] | 0) << i4 | i2;
       i4 = i4 + 8 | 0;
       if (i4 >>> 0 < i8 >>> 0) {
        i5 = i1;
        i1 = 0;
       } else {
        i5 = i1;
        i1 = 0;
        break;
       }
      }
      i11 = HEAP32[i16 >> 2] | 0;
      i9 = HEAP32[17384 + (i8 << 2) >> 2] & i2;
      i10 = i11 + (i9 << 3) | 0;
      i8 = HEAPU8[i10 + 1 >> 0] | 0;
      i2 = i2 >>> i8;
      i4 = i4 - i8 | 0;
      i8 = HEAPU8[i10 >> 0] | 0;
      if (i8 & 16 | 0) {
       HEAP32[i16 >> 2] = i8 & 15;
       HEAP32[i14 >> 2] = HEAP32[i11 + (i9 << 3) + 4 >> 2];
       HEAP32[i20 >> 2] = 4;
       i11 = i3;
       i58 = i7;
       i8 = 4;
       i3 = i11;
       i7 = i58;
       continue;
      }
      if (i8 & 64 | 0) {
       i33 = 182;
       break;
      }
      HEAP32[i14 >> 2] = i8;
      HEAP32[i16 >> 2] = i10 + (HEAP32[i11 + (i9 << 3) + 4 >> 2] << 3);
      i11 = i3;
      i58 = i7;
      i8 = 3;
      i3 = i11;
      i7 = i58;
      continue;
     } else if ((i33 | 0) == 187) {
      i33 = 0;
      i8 = i3 + (0 - i8) | 0;
      i9 = HEAP32[i24 >> 2] | 0;
      if (i8 >>> 0 < i9 >>> 0) {
       i10 = (HEAP32[i23 >> 2] | 0) - i9 | 0;
       do i8 = i8 + i10 | 0; while (i8 >>> 0 < i9 >>> 0);
      }
      if (HEAP32[i17 >> 2] | 0) while (1) {
       do if (!i7) {
        if ((i3 | 0) == (HEAP32[i22 >> 2] | 0)) {
         i58 = HEAP32[i34 >> 2] | 0;
         i9 = HEAP32[i24 >> 2] | 0;
         i7 = (i9 >>> 0 < i58 >>> 0 ? i58 + -1 | 0 : i3) - i9 | 0;
         if ((i58 | 0) != (i9 | 0)) if (!i7) i3 = i9; else {
          i3 = i9;
          break;
         }
        }
        HEAP32[i38 >> 2] = i3;
        i1 = _inflate_flush(i35, i56, i1) | 0;
        i3 = HEAP32[i38 >> 2] | 0;
        i9 = HEAP32[i34 >> 2] | 0;
        i10 = i3;
        if (i3 >>> 0 < i9 >>> 0) {
         i11 = HEAP32[i22 >> 2] | 0;
         i7 = i9 + ~i10 | 0;
        } else {
         i7 = HEAP32[i23 >> 2] | 0;
         i11 = i7;
         i7 = i7 - i10 | 0;
        }
        if ((i3 | 0) == (i11 | 0)) {
         i58 = HEAP32[i24 >> 2] | 0;
         i11 = (i9 | 0) == (i58 | 0);
         i7 = i11 ? i7 : (i58 >>> 0 < i9 >>> 0 ? i9 + -1 | 0 : i10) - i58 | 0;
         i3 = i11 ? i3 : i58;
        }
        if (!i7) break L173;
       } while (0);
       i1 = i8 + 1 | 0;
       i9 = i3 + 1 | 0;
       HEAP8[i3 >> 0] = HEAP8[i8 >> 0] | 0;
       i7 = i7 + -1 | 0;
       if ((i1 | 0) == (HEAP32[i22 >> 2] | 0)) i1 = HEAP32[i24 >> 2] | 0;
       i58 = (HEAP32[i17 >> 2] | 0) + -1 | 0;
       HEAP32[i17 >> 2] = i58;
       if (!i58) {
        i3 = i9;
        i1 = 0;
        break;
       } else {
        i3 = i9;
        i8 = i1;
        i1 = 0;
       }
      }
      HEAP32[i20 >> 2] = 0;
      i8 = 0;
      continue;
     }
    }
    if ((i33 | 0) == 170) {
     i33 = 0;
     HEAP32[i20 >> 2] = 9;
     HEAP32[i43 >> 2] = 281487;
     i1 = -3;
    } else if ((i33 | 0) == 182) {
     i33 = 0;
     HEAP32[i20 >> 2] = 9;
     HEAP32[i43 >> 2] = 281515;
     i1 = -3;
    } else if ((i33 | 0) == 213) {
     i33 = 0;
     i58 = i4 >>> 0 > 7;
     i4 = i58 ? i4 + -8 | 0 : i4;
     i5 = i58 ? i5 + -1 | 0 : i5;
     i6 = i6 + (i58 & 1) | 0;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, i1) | 0;
     i3 = HEAP32[i38 >> 2] | 0;
     if ((HEAP32[i34 >> 2] | 0) == (i3 | 0)) {
      HEAP32[i20 >> 2] = 8;
      i1 = 1;
     }
    } else if ((i33 | 0) == 215) i33 = 0; else if ((i33 | 0) == 216) {
     i33 = 0;
     i1 = -3;
    }
    HEAP32[i36 >> 2] = i2;
    HEAP32[i37 >> 2] = i4;
    HEAP32[i53 >> 2] = i6;
    HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
    HEAP32[i56 >> 2] = i5;
    HEAP32[i38 >> 2] = i3;
    i1 = _inflate_flush(i35, i56, i1) | 0;
    if ((i1 | 0) != 1) {
     i33 = 218;
     break;
    }
    FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, HEAP32[i27 >> 2] | 0);
    i5 = HEAP32[i56 >> 2] | 0;
    i6 = HEAP32[i53 >> 2] | 0;
    i2 = HEAP32[i36 >> 2] | 0;
    i4 = HEAP32[i37 >> 2] | 0;
    i3 = HEAP32[i38 >> 2] | 0;
    i1 = HEAP32[i34 >> 2] | 0;
    i7 = i3;
    if (i3 >>> 0 < i1 >>> 0) i7 = i1 + ~i7 | 0; else i7 = (HEAP32[i23 >> 2] | 0) - i7 | 0;
    if (HEAP32[i26 >> 2] | 0) {
     i33 = 224;
     break;
    }
    HEAP32[i35 >> 2] = 0;
    i1 = 0;
   }
   switch (i33 | 0) {
   case 48:
    {
     i33 = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = 0;
     HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i5;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, i1) | 0;
     break;
    }
   case 53:
    {
     i33 = 0;
     HEAP32[i27 >> 2] = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i8;
     HEAP32[i53 >> 2] = i6;
     HEAP32[i54 >> 2] = i7 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i7;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, -4) | 0;
     break;
    }
   case 55:
    {
     i33 = 0;
     HEAP32[i35 >> 2] = 9;
     HEAP32[i43 >> 2] = 281148;
     HEAP32[i36 >> 2] = i2 >>> 3;
     HEAP32[i37 >> 2] = i8 + -3;
     HEAP32[i53 >> 2] = i6;
     HEAP32[i54 >> 2] = i7 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i7;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, -3) | 0;
     break;
    }
   case 58:
    {
     i33 = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = 0;
     HEAP32[i54 >> 2] = i7 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i7;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, i1) | 0;
     break;
    }
   case 60:
    {
     i33 = 0;
     HEAP32[i35 >> 2] = 9;
     HEAP32[i43 >> 2] = 281167;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = i6;
     HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i5;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, -3) | 0;
     break;
    }
   case 66:
    {
     i33 = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = 0;
     HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i5;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, i1) | 0;
     break;
    }
   case 74:
    {
     i33 = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = i6;
     HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i5;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, i10) | 0;
     break;
    }
   case 79:
    {
     i33 = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = 0;
     HEAP32[i54 >> 2] = i7 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i7;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, i1) | 0;
     break;
    }
   case 82:
    {
     i33 = 0;
     HEAP32[i35 >> 2] = 9;
     HEAP32[i43 >> 2] = 281196;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = i6;
     HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i5;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, -3) | 0;
     break;
    }
   case 84:
    {
     i33 = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = i6;
     HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i5;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, -4) | 0;
     break;
    }
   case 92:
    {
     i33 = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = 0;
     HEAP32[i54 >> 2] = i8 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i8;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, i1) | 0;
     break;
    }
   case 96:
    {
     i1 = -4;
     i33 = 103;
     break;
    }
   case 99:
    {
     i1 = 281268;
     i33 = 100;
     break;
    }
   case 111:
    {
     i33 = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = 0;
     HEAP32[i54 >> 2] = i8 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i8;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, i1) | 0;
     break;
    }
   case 118:
    {
     i33 = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = 0;
     HEAP32[i54 >> 2] = i8 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i8;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, i1) | 0;
     break;
    }
   case 121:
    {
     i33 = 0;
     FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, i10);
     HEAP32[i35 >> 2] = 9;
     HEAP32[i43 >> 2] = 281308;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = i6;
     HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i5;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, -3) | 0;
     break;
    }
   case 218:
    {
     i33 = 0;
     i1 = _inflate_flush(i35, i56, i1) | 0;
     break;
    }
   case 224:
    {
     HEAP32[i35 >> 2] = 7;
     i1 = 0;
     i33 = 225;
     break;
    }
   case 229:
    {
     i33 = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = i6;
     HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i5;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, -3) | 0;
     break;
    }
   case 230:
    {
     i33 = 0;
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = i6;
     HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i5;
     HEAP32[i38 >> 2] = i3;
     i1 = _inflate_flush(i35, i56, -2) | 0;
     break;
    }
   }
   do if ((i33 | 0) == 100) {
    HEAP32[i43 >> 2] = i1;
    FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, i9);
    i33 = 102;
   } else if ((i33 | 0) == 225) {
    i33 = 0;
    HEAP32[i38 >> 2] = i3;
    i3 = _inflate_flush(i35, i56, i1) | 0;
    i1 = HEAP32[i38 >> 2] | 0;
    if ((HEAP32[i34 >> 2] | 0) == (i1 | 0)) {
     HEAP32[i35 >> 2] = 8;
     i33 = 228;
     break;
    } else {
     HEAP32[i36 >> 2] = i2;
     HEAP32[i37 >> 2] = i4;
     HEAP32[i53 >> 2] = i6;
     HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
     HEAP32[i56 >> 2] = i5;
     i1 = _inflate_flush(i35, i56, i3) | 0;
     break;
    }
   } while (0);
   if ((i33 | 0) == 102) {
    FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, HEAP32[i32 >> 2] | 0);
    HEAP32[i35 >> 2] = 9;
    i1 = -3;
    i33 = 103;
   } else if ((i33 | 0) == 228) {
    i33 = 0;
    HEAP32[i36 >> 2] = i2;
    HEAP32[i37 >> 2] = i4;
    HEAP32[i53 >> 2] = i6;
    HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
    HEAP32[i56 >> 2] = i5;
    HEAP32[i38 >> 2] = i1;
    i1 = _inflate_flush(i35, i56, 1) | 0;
   }
   if ((i33 | 0) == 103) {
    HEAP32[i36 >> 2] = i2;
    HEAP32[i37 >> 2] = i4;
    HEAP32[i53 >> 2] = i6;
    HEAP32[i54 >> 2] = i5 - (HEAP32[i56 >> 2] | 0) + (HEAP32[i54 >> 2] | 0);
    HEAP32[i56 >> 2] = i5;
    HEAP32[i38 >> 2] = i3;
    i1 = _inflate_flush(i35, i56, i1) | 0;
   }
   switch (i1 | 0) {
   case 0:
    {
     i1 = i52;
     i33 = 255;
     break L10;
    }
   case -3:
    {
     i39 = HEAP32[i50 >> 2] | 0;
     HEAP32[i39 >> 2] = 13;
     HEAP32[i39 + 4 >> 2] = 0;
     i1 = -3;
     continue L10;
    }
   case 1:
    break;
   default:
    {
     i33 = 254;
     break L10;
    }
   }
   i1 = HEAP32[i50 >> 2] | 0;
   i2 = HEAP32[i1 + 20 >> 2] | 0;
   i3 = i2 + 60 | 0;
   HEAP32[i1 + 4 >> 2] = HEAP32[i3 >> 2];
   i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 & -2 | 0) == 4) {
    FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, HEAP32[i2 + 12 >> 2] | 0);
    i1 = HEAP32[i2 >> 2] | 0;
   }
   if ((i1 | 0) == 6) FUNCTION_TABLE_vii[HEAP32[i40 >> 2] & 63](HEAP32[i42 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0);
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 28 >> 2] = 0;
   HEAP32[i2 + 32 >> 2] = 0;
   i1 = HEAP32[i2 + 40 >> 2] | 0;
   HEAP32[i2 + 52 >> 2] = i1;
   HEAP32[i2 + 48 >> 2] = i1;
   i1 = HEAP32[i2 + 56 >> 2] | 0;
   if (i1 | 0) {
    i58 = FUNCTION_TABLE_iiii[i1 & 127](0, 0, 0) | 0;
    HEAP32[i3 >> 2] = i58;
    HEAP32[i55 >> 2] = i58;
   }
   i2 = HEAP32[i50 >> 2] | 0;
   if (!(HEAP32[i2 + 12 >> 2] | 0)) {
    HEAP32[i2 >> 2] = 8;
    i1 = i52;
    i33 = 242;
    break;
   } else {
    HEAP32[i2 >> 2] = 12;
    i1 = i52;
    i39 = i2;
    continue L10;
   }
  } while (0);
  if ((i33 | 0) == 242) {
   i3 = HEAP32[i53 >> 2] | 0;
   if (!i3) {
    i33 = 255;
    break;
   }
   i3 = i3 + -1 | 0;
   HEAP32[i53 >> 2] = i3;
   HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + 1;
   i1 = HEAP32[i56 >> 2] | 0;
   HEAP32[i56 >> 2] = i1 + 1;
   HEAP32[i2 + 8 >> 2] = (HEAPU8[i1 >> 0] | 0) << 24;
   HEAP32[i2 >> 2] = 9;
   i1 = i52;
   i33 = 244;
  }
  if ((i33 | 0) == 244) {
   if (!i3) {
    i33 = 255;
    break;
   }
   i3 = i3 + -1 | 0;
   HEAP32[i53 >> 2] = i3;
   HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + 1;
   i33 = HEAP32[i56 >> 2] | 0;
   HEAP32[i56 >> 2] = i33 + 1;
   i1 = i2 + 8 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + ((HEAPU8[i33 >> 0] | 0) << 16);
   HEAP32[i2 >> 2] = 10;
   i1 = i52;
   i33 = 246;
  }
  if ((i33 | 0) == 246) {
   if (!i3) {
    i33 = 255;
    break;
   }
   i3 = i3 + -1 | 0;
   HEAP32[i53 >> 2] = i3;
   HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + 1;
   i58 = HEAP32[i56 >> 2] | 0;
   HEAP32[i56 >> 2] = i58 + 1;
   i1 = i2 + 8 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + ((HEAPU8[i58 >> 0] | 0) << 8);
   HEAP32[i2 >> 2] = 11;
   i1 = i52;
  }
  if (!i3) {
   i33 = 255;
   break;
  }
  HEAP32[i53 >> 2] = i3 + -1;
  HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + 1;
  i58 = HEAP32[i56 >> 2] | 0;
  HEAP32[i56 >> 2] = i58 + 1;
  i1 = i2 + 8 | 0;
  i58 = (HEAP32[i1 >> 2] | 0) + (HEAPU8[i58 >> 0] | 0) | 0;
  HEAP32[i1 >> 2] = i58;
  i1 = i2 + 4 | 0;
  if ((HEAP32[i1 >> 2] | 0) == (i58 | 0)) {
   i33 = 251;
   break;
  }
  HEAP32[i2 >> 2] = 13;
  HEAP32[i43 >> 2] = 281537;
  HEAP32[i1 >> 2] = 5;
  i1 = i52;
  i39 = i2;
 }
 switch (i33 | 0) {
 case 21:
  {
   HEAP32[i39 >> 2] = 2;
   i1 = i52;
   i33 = 23;
   break;
  }
 case 22:
  {
   i2 = HEAP32[i53 >> 2] | 0;
   i33 = 23;
   break;
  }
 case 25:
  {
   i2 = HEAP32[i53 >> 2] | 0;
   i33 = 26;
   break;
  }
 case 28:
  {
   i2 = HEAP32[i53 >> 2] | 0;
   i33 = 29;
   break;
  }
 case 31:
  {
   i44 = i1;
   i51 = HEAP32[i53 >> 2] | 0;
   break;
  }
 case 34:
  {
   HEAP32[i39 >> 2] = 13;
   HEAP32[i43 >> 2] = 281132;
   HEAP32[i39 + 4 >> 2] = 0;
   i58 = -2;
   STACKTOP = i57;
   return i58 | 0;
  }
 case 40:
  break;
 case 251:
  {
   HEAP32[i2 >> 2] = 12;
   i58 = 1;
   STACKTOP = i57;
   return i58 | 0;
  }
 case 252:
  {
   i58 = i1;
   STACKTOP = i57;
   return i58 | 0;
  }
 case 253:
  {
   i58 = -3;
   STACKTOP = i57;
   return i58 | 0;
  }
 case 254:
  {
   i58 = i1;
   STACKTOP = i57;
   return i58 | 0;
  }
 case 255:
  {
   STACKTOP = i57;
   return i1 | 0;
  }
 }
 do if ((i33 | 0) == 23) if (!i2) {
  i58 = i1;
  STACKTOP = i57;
  return i58 | 0;
 } else {
  i2 = i2 + -1 | 0;
  HEAP32[i53 >> 2] = i2;
  HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + 1;
  i1 = HEAP32[i56 >> 2] | 0;
  HEAP32[i56 >> 2] = i1 + 1;
  HEAP32[i39 + 8 >> 2] = (HEAPU8[i1 >> 0] | 0) << 24;
  HEAP32[i39 >> 2] = 3;
  i1 = i52;
  i33 = 26;
  break;
 } while (0);
 do if ((i33 | 0) == 26) if (!i2) {
  i58 = i1;
  STACKTOP = i57;
  return i58 | 0;
 } else {
  i2 = i2 + -1 | 0;
  HEAP32[i53 >> 2] = i2;
  HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + 1;
  i33 = HEAP32[i56 >> 2] | 0;
  HEAP32[i56 >> 2] = i33 + 1;
  i1 = i39 + 8 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + ((HEAPU8[i33 >> 0] | 0) << 16);
  HEAP32[i39 >> 2] = 4;
  i1 = i52;
  i33 = 29;
  break;
 } while (0);
 do if ((i33 | 0) == 29) if (!i2) {
  i58 = i1;
  STACKTOP = i57;
  return i58 | 0;
 } else {
  i51 = i2 + -1 | 0;
  HEAP32[i53 >> 2] = i51;
  HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + 1;
  i58 = HEAP32[i56 >> 2] | 0;
  HEAP32[i56 >> 2] = i58 + 1;
  i44 = i39 + 8 | 0;
  HEAP32[i44 >> 2] = (HEAP32[i44 >> 2] | 0) + ((HEAPU8[i58 >> 0] | 0) << 8);
  HEAP32[i39 >> 2] = 5;
  i44 = i52;
  break;
 } while (0);
 if (!i51) {
  i58 = i44;
  STACKTOP = i57;
  return i58 | 0;
 }
 HEAP32[i53 >> 2] = i51 + -1;
 HEAP32[i54 >> 2] = (HEAP32[i54 >> 2] | 0) + 1;
 i58 = HEAP32[i56 >> 2] | 0;
 HEAP32[i56 >> 2] = i58 + 1;
 i56 = i39 + 8 | 0;
 i58 = (HEAP32[i56 >> 2] | 0) + (HEAPU8[i58 >> 0] | 0) | 0;
 HEAP32[i56 >> 2] = i58;
 HEAP32[i55 >> 2] = i58;
 HEAP32[i39 >> 2] = 6;
 i58 = 2;
 STACKTOP = i57;
 return i58 | 0;
}

function _afm_parser_parse(i34) {
 i34 = i34 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i39 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i35 = i39 + 32 | 0;
 i25 = i39;
 i37 = HEAP32[i34 >> 2] | 0;
 i36 = i34 + 8 | 0;
 i38 = HEAP32[i36 >> 2] | 0;
 if (!i38) {
  i38 = 6;
  STACKTOP = i39;
  return i38 | 0;
 }
 i33 = i34 + 4 | 0;
 i8 = HEAP32[i33 >> 2] | 0;
 i6 = i8 + 12 | 0;
 i7 = i8 + 8 | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 L4 : while (1) {
  do if ((i3 | 0) > 1) {
   i1 = HEAP32[i8 >> 2] | 0;
   i5 = HEAP32[i7 >> 2] | 0;
  } else {
   i1 = HEAP32[i8 >> 2] | 0;
   i5 = HEAP32[i7 >> 2] | 0;
   if ((i3 | 0) != 1) {
    L11 : do if (i1 >>> 0 < i5 >>> 0) {
     i2 = i1;
     L12 : while (1) {
      i1 = i2 + 1 | 0;
      HEAP32[i8 >> 2] = i1;
      switch (HEAP8[i2 >> 0] | 0) {
      case 26:
       {
        i2 = 3;
        i32 = 11;
        break L11;
       }
      case 10:
      case 13:
       {
        i32 = 9;
        break L12;
       }
      case 59:
       {
        i32 = 10;
        break L12;
       }
      case 9:
      case 32:
       break;
      default:
       {
        i2 = i3;
        break L11;
       }
      }
      if (i1 >>> 0 < i5 >>> 0) i2 = i1; else {
       i2 = 3;
       i32 = 11;
       break L11;
      }
     }
     if ((i32 | 0) == 9) {
      i2 = 2;
      i32 = 11;
      break;
     } else if ((i32 | 0) == 10) {
      i2 = 1;
      i32 = 11;
      break;
     }
    } else {
     i2 = 3;
     i32 = 11;
    } while (0);
    if ((i32 | 0) == 11) {
     i32 = 0;
     HEAP32[i6 >> 2] = i2;
    }
    if ((i2 | 0) > 1) break;
   }
   L21 : while (1) {
    if (i1 >>> 0 >= i5 >>> 0) {
     i32 = 15;
     break;
    }
    i2 = i1 + 1 | 0;
    HEAP32[i8 >> 2] = i2;
    switch (HEAP8[i1 >> 0] | 0) {
    case 26:
     {
      i1 = i2;
      i32 = 15;
      break L21;
     }
    case 10:
    case 13:
     {
      i3 = 2;
      i1 = i2;
      break L21;
     }
    default:
     i1 = i2;
    }
   }
   if ((i32 | 0) == 15) i3 = 3;
   HEAP32[i6 >> 2] = i3;
  } while (0);
  HEAP32[i6 >> 2] = 0;
  L28 : do if (i1 >>> 0 < i5 >>> 0) {
   L29 : while (1) {
    i2 = i1 + 1 | 0;
    HEAP32[i8 >> 2] = i2;
    switch (HEAP8[i1 >> 0] | 0) {
    case 26:
     {
      i1 = 3;
      i32 = 23;
      break L28;
     }
    case 10:
    case 13:
     {
      i32 = 21;
      break L29;
     }
    case 59:
     {
      i32 = 22;
      break L29;
     }
    case 9:
    case 32:
     break;
    default:
     {
      i32 = 19;
      break L29;
     }
    }
    if (i2 >>> 0 < i5 >>> 0) i1 = i2; else {
     i1 = 3;
     i32 = 23;
     break L28;
    }
   }
   if ((i32 | 0) == 19) {
    i32 = 0;
    i4 = i2;
    L34 : while (1) {
     if (i4 >>> 0 >= i5 >>> 0) {
      i32 = 28;
      break;
     }
     i3 = i4 + 1 | 0;
     HEAP32[i8 >> 2] = i3;
     i2 = i3;
     switch (HEAP8[i4 >> 0] | 0) {
     case 26:
      {
       i32 = 28;
       break L34;
      }
     case 9:
     case 32:
      {
       i3 = 0;
       break L34;
      }
     case 10:
     case 13:
      {
       i32 = 26;
       break L34;
      }
     case 59:
      {
       i32 = 27;
       break L34;
      }
     default:
      i4 = i3;
     }
    }
    if ((i32 | 0) == 26) {
     i32 = 0;
     HEAP32[i6 >> 2] = 2;
     i3 = 2;
    } else if ((i32 | 0) == 27) {
     i32 = 0;
     HEAP32[i6 >> 2] = 1;
     i3 = 1;
    } else if ((i32 | 0) == 28) {
     i32 = 0;
     HEAP32[i6 >> 2] = 3;
     i3 = 3;
    }
    if (!i1) {
     i1 = i3;
     break;
    } else break L4;
   } else if ((i32 | 0) == 21) {
    i1 = 2;
    i32 = 23;
    break;
   } else if ((i32 | 0) == 22) {
    i1 = 1;
    i32 = 23;
    break;
   }
  } else {
   i1 = 3;
   i32 = 23;
  } while (0);
  if ((i32 | 0) == 23) {
   i32 = 0;
   HEAP32[i6 >> 2] = i1;
  }
  if ((i1 | 0) == 2) i3 = 2; else {
   i1 = 2;
   i32 = 290;
   break;
  }
 }
 if ((i32 | 0) == 290) {
  STACKTOP = i39;
  return i1 | 0;
 }
 if ((i2 + ~i1 | 0) != 16) {
  i38 = 2;
  STACKTOP = i39;
  return i38 | 0;
 }
 if (_strncmp(i1, 284163, 16) | 0) {
  i38 = 2;
  STACKTOP = i39;
  return i38 | 0;
 }
 i10 = i35 + 4 | 0;
 i11 = i25 + 4 | 0;
 i12 = i25 + 8 | 0;
 i13 = i25 + 16 | 0;
 i14 = i25 + 24 | 0;
 i15 = i38 + 4 | 0;
 i16 = i25 + 12 | 0;
 i17 = i38 + 8 | 0;
 i18 = i25 + 20 | 0;
 i19 = i38 + 12 | 0;
 i20 = i25 + 28 | 0;
 i21 = i38 + 16 | 0;
 i22 = i38 + 20 | 0;
 i23 = i38 + 24 | 0;
 i24 = i35 + 4 | 0;
 i1 = 160;
 i2 = i3;
 L56 : while (1) {
  i6 = i8 + 12 | 0;
  i9 = i8 + 8 | 0;
  L58 : while (1) {
   do if ((i2 | 0) > 1) {
    i2 = HEAP32[i8 >> 2] | 0;
    i5 = HEAP32[i9 >> 2] | 0;
   } else {
    i3 = HEAP32[i8 >> 2] | 0;
    i5 = HEAP32[i9 >> 2] | 0;
    if ((i2 | 0) == 1) i2 = i3; else {
     L65 : do if (i3 >>> 0 < i5 >>> 0) {
      L66 : while (1) {
       i4 = i3 + 1 | 0;
       HEAP32[i8 >> 2] = i4;
       switch (HEAP8[i3 >> 0] | 0) {
       case 26:
        {
         i2 = 3;
         i3 = i4;
         i32 = 43;
         break L65;
        }
       case 10:
       case 13:
        {
         i32 = 41;
         break L66;
        }
       case 59:
        {
         i32 = 42;
         break L66;
        }
       case 9:
       case 32:
        break;
       default:
        {
         i3 = i4;
         break L65;
        }
       }
       if (i4 >>> 0 < i5 >>> 0) i3 = i4; else {
        i2 = 3;
        i3 = i4;
        i32 = 43;
        break L65;
       }
      }
      if ((i32 | 0) == 41) {
       i2 = 2;
       i3 = i4;
       i32 = 43;
       break;
      } else if ((i32 | 0) == 42) {
       i2 = 1;
       i3 = i4;
       i32 = 43;
       break;
      }
     } else {
      i2 = 3;
      i32 = 43;
     } while (0);
     if ((i32 | 0) == 43) {
      i32 = 0;
      HEAP32[i6 >> 2] = i2;
     }
     if ((i2 | 0) > 1) {
      i2 = i3;
      break;
     } else i2 = i3;
    }
    L75 : while (1) {
     if (i2 >>> 0 >= i5 >>> 0) {
      i32 = 47;
      break;
     }
     i3 = i2 + 1 | 0;
     HEAP32[i8 >> 2] = i3;
     switch (HEAP8[i2 >> 0] | 0) {
     case 26:
      {
       i2 = i3;
       i32 = 47;
       break L75;
      }
     case 10:
     case 13:
      {
       i4 = 2;
       i2 = i3;
       break L75;
      }
     default:
      i2 = i3;
     }
    }
    if ((i32 | 0) == 47) i4 = 3;
    HEAP32[i6 >> 2] = i4;
   } while (0);
   HEAP32[i6 >> 2] = 0;
   L82 : do if (i2 >>> 0 < i5 >>> 0) {
    i7 = i2;
    L83 : while (1) {
     i2 = i7 + 1 | 0;
     HEAP32[i8 >> 2] = i2;
     switch (HEAP8[i7 >> 0] | 0) {
     case 26:
      {
       i2 = 3;
       i32 = 55;
       break L82;
      }
     case 10:
     case 13:
      {
       i32 = 53;
       break L83;
      }
     case 59:
      {
       i32 = 54;
       break L83;
      }
     case 9:
     case 32:
      break;
     default:
      {
       i32 = 51;
       break L83;
      }
     }
     if (i2 >>> 0 < i5 >>> 0) i7 = i2; else {
      i2 = 3;
      i32 = 55;
      break L82;
     }
    }
    if ((i32 | 0) == 51) {
     i32 = 0;
     i3 = i2;
     L88 : while (1) {
      if (i2 >>> 0 >= i5 >>> 0) {
       i32 = 60;
       break;
      }
      i4 = i2 + 1 | 0;
      HEAP32[i8 >> 2] = i4;
      i3 = i4;
      switch (HEAP8[i2 >> 0] | 0) {
      case 26:
       {
        i32 = 60;
        break L88;
       }
      case 9:
      case 32:
       {
        i2 = 0;
        break L88;
       }
      case 10:
      case 13:
       {
        i32 = 58;
        break L88;
       }
      case 59:
       {
        i32 = 59;
        break L88;
       }
      default:
       i2 = i4;
      }
     }
     if ((i32 | 0) == 58) {
      i32 = 0;
      HEAP32[i6 >> 2] = 2;
      i2 = 2;
     } else if ((i32 | 0) == 59) {
      i32 = 0;
      HEAP32[i6 >> 2] = 1;
      i2 = 1;
     } else if ((i32 | 0) == 60) {
      i32 = 0;
      HEAP32[i6 >> 2] = 3;
      i2 = 3;
     }
     if (!i7) break; else break L58;
    } else if ((i32 | 0) == 53) {
     i2 = 2;
     i32 = 55;
     break;
    } else if ((i32 | 0) == 54) {
     i2 = 1;
     i32 = 55;
     break;
    }
   } else {
    i2 = 3;
    i32 = 55;
   } while (0);
   if ((i32 | 0) == 55) {
    i32 = 0;
    HEAP32[i6 >> 2] = i2;
   }
   if ((i2 | 0) == 2) i2 = 2; else break L56;
  }
  i5 = i3 + ~i7 | 0;
  i6 = HEAP8[i7 >> 0] | 0;
  i3 = 0;
  do {
   i4 = HEAP32[24360 + (i3 << 2) >> 2] | 0;
   if ((HEAP8[i4 >> 0] | 0) == i6 << 24 >> 24) {
    i32 = 65;
    break;
   }
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < 74);
  L105 : do if ((i32 | 0) == 65) {
   while (1) {
    i32 = 0;
    if (!(_strncmp(i4, i7, i5) | 0)) break;
    i3 = i3 + 1 | 0;
    if ((i3 | 0) >= 74) break L105;
    i4 = HEAP32[24360 + (i3 << 2) >> 2] | 0;
    if ((HEAP8[i4 >> 0] | 0) != i6 << 24 >> 24) break L105; else i32 = 65;
   }
   switch (i3 | 0) {
   case 49:
    {
     i32 = 149;
     break L56;
    }
   case 20:
    {
     i32 = 287;
     break L56;
    }
   case 40:
    {
     HEAP32[i35 >> 2] = 3;
     if ((_afm_parser_read_vals(i34, i35, 1) | 0) != 1) {
      i32 = 71;
      break L56;
     }
     switch (HEAP32[i10 >> 2] | 0) {
     case 0:
     case 2:
      break L105;
     default:
      {
       i1 = 7;
       i32 = 286;
       break L56;
      }
     }
    }
   case 30:
    {
     HEAP32[i25 >> 2] = 4;
     if ((_afm_parser_read_vals(i34, i25, 1) | 0) != 1) {
      i32 = 286;
      break L56;
     }
     HEAP8[i38 >> 0] = HEAP8[i11 >> 0] | 0;
     break L105;
    }
   case 26:
    {
     HEAP32[i25 >> 2] = 2;
     HEAP32[i12 >> 2] = 2;
     HEAP32[i13 >> 2] = 2;
     HEAP32[i14 >> 2] = 2;
     if ((_afm_parser_read_vals(i34, i25, 4) | 0) != 4) {
      i32 = 286;
      break L56;
     }
     HEAP32[i15 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i17 >> 2] = HEAP32[i16 >> 2];
     HEAP32[i19 >> 2] = HEAP32[i18 >> 2];
     HEAP32[i21 >> 2] = HEAP32[i20 >> 2];
     break L105;
    }
   case 0:
    {
     HEAP32[i25 >> 2] = 2;
     if ((_afm_parser_read_vals(i34, i25, 1) | 0) != 1) {
      i32 = 286;
      break L56;
     }
     HEAP32[i22 >> 2] = HEAP32[i11 >> 2];
     break L105;
    }
   case 14:
    {
     HEAP32[i25 >> 2] = 2;
     if ((_afm_parser_read_vals(i34, i25, 1) | 0) != 1) {
      i32 = 286;
      break L56;
     }
     HEAP32[i23 >> 2] = HEAP32[i11 >> 2];
     break L105;
    }
   case 45:
    {
     HEAP32[i35 >> 2] = 3;
     if ((_afm_parser_read_vals(i34, i35, 1) | 0) != 1) {
      i32 = 288;
      break L56;
     }
     i2 = HEAP32[i24 >> 2] | 0;
     i7 = HEAP32[i33 >> 2] | 0;
     i8 = i7 + 12 | 0;
     i1 = HEAP32[i8 >> 2] | 0;
     i9 = i7 + 8 | 0;
     if ((i2 | 0) > 0) do {
      i6 = i2;
      i2 = i2 + -1 | 0;
      L127 : while (1) {
       do if ((i1 | 0) > 1) {
        i1 = HEAP32[i7 >> 2] | 0;
        i4 = HEAP32[i9 >> 2] | 0;
       } else {
        i3 = HEAP32[i7 >> 2] | 0;
        i5 = HEAP32[i9 >> 2] | 0;
        if ((i1 | 0) == 1) i1 = i3; else {
         L134 : do if (i3 >>> 0 < i5 >>> 0) {
          i4 = i3;
          L135 : while (1) {
           i3 = i4 + 1 | 0;
           HEAP32[i7 >> 2] = i3;
           switch (HEAP8[i4 >> 0] | 0) {
           case 26:
            {
             i1 = 3;
             i32 = 93;
             break L134;
            }
           case 10:
           case 13:
            {
             i32 = 91;
             break L135;
            }
           case 59:
            {
             i32 = 92;
             break L135;
            }
           case 9:
           case 32:
            break;
           default:
            break L134;
           }
           if (i3 >>> 0 < i5 >>> 0) i4 = i3; else {
            i1 = 3;
            i32 = 93;
            break L134;
           }
          }
          if ((i32 | 0) == 91) {
           i1 = 2;
           i32 = 93;
           break;
          } else if ((i32 | 0) == 92) {
           i1 = 1;
           i32 = 93;
           break;
          }
         } else {
          i1 = 3;
          i32 = 93;
         } while (0);
         if ((i32 | 0) == 93) {
          i32 = 0;
          HEAP32[i8 >> 2] = i1;
         }
         if ((i1 | 0) > 1) {
          i1 = i3;
          i4 = i5;
          break;
         } else i1 = i3;
        }
        L144 : while (1) {
         if (i1 >>> 0 >= i5 >>> 0) {
          i4 = 3;
          break;
         }
         i3 = i1 + 1 | 0;
         HEAP32[i7 >> 2] = i3;
         switch (HEAP8[i1 >> 0] | 0) {
         case 26:
          {
           i4 = 3;
           i1 = i3;
           break L144;
          }
         case 10:
         case 13:
          {
           i32 = 97;
           break L144;
          }
         default:
          i1 = i3;
         }
        }
        if ((i32 | 0) == 97) {
         i4 = 2;
         i1 = i3;
        }
        HEAP32[i8 >> 2] = i4;
        i4 = i5;
       } while (0);
       HEAP32[i8 >> 2] = 0;
       L151 : do if (i1 >>> 0 < i4 >>> 0) {
        i5 = i1;
        L152 : while (1) {
         i1 = i5 + 1 | 0;
         HEAP32[i7 >> 2] = i1;
         switch (HEAP8[i5 >> 0] | 0) {
         case 26:
          {
           i1 = 3;
           i32 = 104;
           break L151;
          }
         case 10:
         case 13:
          {
           i32 = 102;
           break L152;
          }
         case 59:
          {
           i32 = 103;
           break L152;
          }
         case 9:
         case 32:
          break;
         default:
          {
           i32 = 105;
           break L152;
          }
         }
         if (i1 >>> 0 < i4 >>> 0) i5 = i1; else {
          i1 = 3;
          i32 = 104;
          break L151;
         }
        }
        if ((i32 | 0) == 102) {
         i1 = 2;
         i32 = 104;
         break;
        } else if ((i32 | 0) == 103) {
         i1 = 1;
         i32 = 104;
         break;
        } else if ((i32 | 0) == 105) {
         L156 : while (1) {
          i32 = 0;
          if (i1 >>> 0 >= i4 >>> 0) {
           i32 = 109;
           break;
          }
          i3 = i1 + 1 | 0;
          HEAP32[i7 >> 2] = i3;
          switch (HEAP8[i1 >> 0] | 0) {
          case 26:
           {
            i32 = 109;
            break L156;
           }
          case 9:
          case 32:
           {
            i1 = 0;
            break L156;
           }
          case 10:
          case 13:
           {
            i32 = 107;
            break L156;
           }
          case 59:
           {
            i32 = 108;
            break L156;
           }
          default:
           {
            i1 = i3;
            i32 = 105;
           }
          }
         }
         if ((i32 | 0) == 107) {
          i32 = 0;
          HEAP32[i8 >> 2] = 2;
          i1 = 2;
         } else if ((i32 | 0) == 108) {
          i32 = 0;
          HEAP32[i8 >> 2] = 1;
          i1 = 1;
         } else if ((i32 | 0) == 109) {
          i32 = 0;
          HEAP32[i8 >> 2] = 3;
          i1 = 3;
         }
         if (!i5) break; else break L127;
        }
       } else {
        i1 = 3;
        i32 = 104;
       } while (0);
       if ((i32 | 0) == 104) {
        i32 = 0;
        HEAP32[i8 >> 2] = i1;
       }
       if ((i1 | 0) == 2) i1 = 2; else {
        i32 = 148;
        break L56;
       }
      }
     } while ((i6 | 0) > 1);
     L170 : while (1) {
      L172 : while (1) {
       do if ((i1 | 0) > 1) {
        i1 = HEAP32[i7 >> 2] | 0;
        i4 = HEAP32[i9 >> 2] | 0;
       } else {
        i2 = HEAP32[i7 >> 2] | 0;
        i4 = HEAP32[i9 >> 2] | 0;
        if ((i1 | 0) == 1) i1 = i2; else {
         L179 : do if (i2 >>> 0 < i4 >>> 0) {
          i3 = i2;
          L180 : while (1) {
           i2 = i3 + 1 | 0;
           HEAP32[i7 >> 2] = i2;
           switch (HEAP8[i3 >> 0] | 0) {
           case 26:
            {
             i1 = 3;
             i32 = 121;
             break L179;
            }
           case 10:
           case 13:
            {
             i32 = 119;
             break L180;
            }
           case 59:
            {
             i32 = 120;
             break L180;
            }
           case 9:
           case 32:
            break;
           default:
            break L179;
           }
           if (i2 >>> 0 < i4 >>> 0) i3 = i2; else {
            i1 = 3;
            i32 = 121;
            break L179;
           }
          }
          if ((i32 | 0) == 119) {
           i1 = 2;
           i32 = 121;
           break;
          } else if ((i32 | 0) == 120) {
           i1 = 1;
           i32 = 121;
           break;
          }
         } else {
          i1 = 3;
          i32 = 121;
         } while (0);
         if ((i32 | 0) == 121) {
          i32 = 0;
          HEAP32[i8 >> 2] = i1;
         }
         if ((i1 | 0) > 1) {
          i1 = i2;
          break;
         } else i1 = i2;
        }
        L189 : while (1) {
         if (i1 >>> 0 >= i4 >>> 0) {
          i3 = 3;
          break;
         }
         i2 = i1 + 1 | 0;
         HEAP32[i7 >> 2] = i2;
         switch (HEAP8[i1 >> 0] | 0) {
         case 26:
          {
           i3 = 3;
           i1 = i2;
           break L189;
          }
         case 10:
         case 13:
          {
           i32 = 125;
           break L189;
          }
         default:
          i1 = i2;
         }
        }
        if ((i32 | 0) == 125) {
         i3 = 2;
         i1 = i2;
        }
        HEAP32[i8 >> 2] = i3;
       } while (0);
       HEAP32[i8 >> 2] = 0;
       L196 : do if (i1 >>> 0 < i4 >>> 0) {
        i6 = i1;
        L197 : while (1) {
         i1 = i6 + 1 | 0;
         HEAP32[i7 >> 2] = i1;
         switch (HEAP8[i6 >> 0] | 0) {
         case 26:
          {
           i1 = 3;
           i32 = 133;
           break L196;
          }
         case 10:
         case 13:
          {
           i32 = 131;
           break L197;
          }
         case 59:
          {
           i32 = 132;
           break L197;
          }
         case 9:
         case 32:
          break;
         default:
          {
           i32 = 129;
           break L197;
          }
         }
         if (i1 >>> 0 < i4 >>> 0) i6 = i1; else {
          i1 = 3;
          i32 = 133;
          break L196;
         }
        }
        if ((i32 | 0) == 129) {
         i32 = 0;
         i3 = i1;
         i2 = i1;
         L202 : while (1) {
          if (i3 >>> 0 >= i4 >>> 0) {
           i32 = 138;
           break;
          }
          i1 = i3 + 1 | 0;
          HEAP32[i7 >> 2] = i1;
          i2 = i1;
          switch (HEAP8[i3 >> 0] | 0) {
          case 26:
           {
            i32 = 138;
            break L202;
           }
          case 9:
          case 32:
           {
            i1 = 0;
            break L202;
           }
          case 10:
          case 13:
           {
            i32 = 136;
            break L202;
           }
          case 59:
           {
            i32 = 137;
            break L202;
           }
          default:
           i3 = i1;
          }
         }
         if ((i32 | 0) == 136) {
          i32 = 0;
          HEAP32[i8 >> 2] = 2;
          i1 = 2;
         } else if ((i32 | 0) == 137) {
          i32 = 0;
          HEAP32[i8 >> 2] = 1;
          i1 = 1;
         } else if ((i32 | 0) == 138) {
          i32 = 0;
          HEAP32[i8 >> 2] = 3;
          i1 = 3;
         }
         if (!i6) break; else break L172;
        } else if ((i32 | 0) == 131) {
         i1 = 2;
         i32 = 133;
         break;
        } else if ((i32 | 0) == 132) {
         i1 = 1;
         i32 = 133;
         break;
        }
       } else {
        i1 = 3;
        i32 = 133;
       } while (0);
       if ((i32 | 0) == 133) {
        i32 = 0;
        HEAP32[i8 >> 2] = i1;
       }
       if ((i1 | 0) == 2) i1 = 2; else {
        i32 = 148;
        break L56;
       }
      }
      i4 = i2 + ~i6 | 0;
      i5 = HEAP8[i6 >> 0] | 0;
      i2 = 0;
      while (1) {
       i3 = HEAP32[24360 + (i2 << 2) >> 2] | 0;
       if ((HEAP8[i3 >> 0] | 0) == i5 << 24 >> 24) break;
       i2 = i2 + 1 | 0;
       if ((i2 | 0) >= 74) continue L170;
      }
      while (1) {
       if (!(_strncmp(i3, i6, i4) | 0)) break;
       i2 = i2 + 1 | 0;
       if ((i2 | 0) >= 74) continue L170;
       i3 = HEAP32[24360 + (i2 << 2) >> 2] | 0;
       if ((HEAP8[i3 >> 0] | 0) != i5 << 24 >> 24) continue L170;
      }
      switch (i2 | 0) {
      case 17:
      case 20:
       {
        i1 = 0;
        break L105;
       }
      default:
       {}
      }
     }
    }
   default:
    break L105;
   }
  } while (0);
  i2 = HEAP32[i33 >> 2] | 0;
  i8 = i2;
  i2 = HEAP32[i2 + 12 >> 2] | 0;
 }
 L225 : do if ((i32 | 0) == 71) i32 = 286; else if ((i32 | 0) == 148) {
  i38 = 160;
  STACKTOP = i39;
  return i38 | 0;
 } else if ((i32 | 0) == 149) {
  i14 = i35 + 4 | 0;
  i15 = i35 + 8 | 0;
  i16 = i35 + 16 | 0;
  i17 = i35 + 24 | 0;
  i18 = i35 + 32 | 0;
  i19 = i35 + 4 | 0;
  i20 = i35 + 12 | 0;
  i21 = i35 + 20 | 0;
  i22 = i35 + 28 | 0;
  i23 = i35 + 36 | 0;
  i24 = i35 + 4 | 0;
  i25 = i35 + 8 | 0;
  i26 = i35 + 16 | 0;
  i27 = i35 + 24 | 0;
  i28 = i35 + 4 | 0;
  i29 = i35 + 12 | 0;
  i30 = i35 + 20 | 0;
  i31 = i35 + 28 | 0;
  L227 : while (1) {
   i7 = i8 + 12 | 0;
   i9 = i8 + 8 | 0;
   L229 : while (1) {
    L231 : while (1) {
     do if ((i2 | 0) > 1) {
      i1 = HEAP32[i8 >> 2] | 0;
      i5 = HEAP32[i9 >> 2] | 0;
     } else {
      i1 = HEAP32[i8 >> 2] | 0;
      i5 = HEAP32[i9 >> 2] | 0;
      if ((i2 | 0) != 1) {
       L238 : do if (i1 >>> 0 < i5 >>> 0) {
        i3 = i1;
        L239 : while (1) {
         i1 = i3 + 1 | 0;
         HEAP32[i8 >> 2] = i1;
         switch (HEAP8[i3 >> 0] | 0) {
         case 26:
          {
           i2 = 3;
           i32 = 160;
           break L238;
          }
         case 10:
         case 13:
          {
           i32 = 158;
           break L239;
          }
         case 59:
          {
           i32 = 159;
           break L239;
          }
         case 9:
         case 32:
          break;
         default:
          break L238;
         }
         if (i1 >>> 0 < i5 >>> 0) i3 = i1; else {
          i2 = 3;
          i32 = 160;
          break L238;
         }
        }
        if ((i32 | 0) == 158) {
         i2 = 2;
         i32 = 160;
         break;
        } else if ((i32 | 0) == 159) {
         i2 = 1;
         i32 = 160;
         break;
        }
       } else {
        i2 = 3;
        i32 = 160;
       } while (0);
       if ((i32 | 0) == 160) {
        i32 = 0;
        HEAP32[i7 >> 2] = i2;
       }
       if ((i2 | 0) > 1) break;
      }
      L248 : while (1) {
       if (i1 >>> 0 >= i5 >>> 0) {
        i3 = 3;
        break;
       }
       i2 = i1 + 1 | 0;
       HEAP32[i8 >> 2] = i2;
       switch (HEAP8[i1 >> 0] | 0) {
       case 26:
        {
         i3 = 3;
         i1 = i2;
         break L248;
        }
       case 10:
       case 13:
        {
         i32 = 164;
         break L248;
        }
       default:
        i1 = i2;
       }
      }
      if ((i32 | 0) == 164) {
       i3 = 2;
       i1 = i2;
      }
      HEAP32[i7 >> 2] = i3;
     } while (0);
     HEAP32[i7 >> 2] = 0;
     L255 : do if (i1 >>> 0 < i5 >>> 0) {
      L256 : while (1) {
       i2 = i1 + 1 | 0;
       HEAP32[i8 >> 2] = i2;
       switch (HEAP8[i1 >> 0] | 0) {
       case 26:
        {
         i2 = 3;
         i32 = 172;
         break L255;
        }
       case 10:
       case 13:
        {
         i32 = 170;
         break L256;
        }
       case 59:
        {
         i32 = 171;
         break L256;
        }
       case 9:
       case 32:
        break;
       default:
        {
         i32 = 168;
         break L256;
        }
       }
       if (i2 >>> 0 < i5 >>> 0) i1 = i2; else {
        i2 = 3;
        i32 = 172;
        break L255;
       }
      }
      if ((i32 | 0) == 168) {
       i32 = 0;
       i4 = i2;
       i3 = i2;
       L261 : while (1) {
        if (i4 >>> 0 >= i5 >>> 0) {
         i32 = 177;
         break;
        }
        i2 = i4 + 1 | 0;
        HEAP32[i8 >> 2] = i2;
        i3 = i2;
        switch (HEAP8[i4 >> 0] | 0) {
        case 26:
         {
          i32 = 177;
          break L261;
         }
        case 9:
        case 32:
         {
          i2 = 0;
          break L261;
         }
        case 10:
        case 13:
         {
          i32 = 175;
          break L261;
         }
        case 59:
         {
          i32 = 176;
          break L261;
         }
        default:
         i4 = i2;
        }
       }
       if ((i32 | 0) == 175) {
        i32 = 0;
        HEAP32[i7 >> 2] = 2;
        i2 = 2;
       } else if ((i32 | 0) == 176) {
        i32 = 0;
        HEAP32[i7 >> 2] = 1;
        i2 = 1;
       } else if ((i32 | 0) == 177) {
        i32 = 0;
        HEAP32[i7 >> 2] = 3;
        i2 = 3;
       }
       if (!i1) break; else break L231;
      } else if ((i32 | 0) == 170) {
       i2 = 2;
       i32 = 172;
       break;
      } else if ((i32 | 0) == 171) {
       i2 = 1;
       i32 = 172;
       break;
      }
     } else {
      i2 = 3;
      i32 = 172;
     } while (0);
     if ((i32 | 0) == 172) {
      i32 = 0;
      HEAP32[i7 >> 2] = i2;
     }
     if ((i2 | 0) == 2) i2 = 2; else {
      i1 = 160;
      i32 = 286;
      break L225;
     }
    }
    i5 = i3 + ~i1 | 0;
    i6 = HEAP8[i1 >> 0] | 0;
    i3 = 0;
    while (1) {
     i4 = HEAP32[24360 + (i3 << 2) >> 2] | 0;
     if ((HEAP8[i4 >> 0] | 0) == i6 << 24 >> 24) break;
     i3 = i3 + 1 | 0;
     if ((i3 | 0) >= 74) continue L229;
    }
    while (1) {
     if (!(_strncmp(i4, i1, i5) | 0)) break L229;
     i3 = i3 + 1 | 0;
     if ((i3 | 0) >= 74) continue L229;
     i4 = HEAP32[24360 + (i3 << 2) >> 2] | 0;
     if ((HEAP8[i4 >> 0] | 0) != i6 << 24 >> 24) continue L229;
    }
   }
   switch (i3 | 0) {
   case 20:
   case 21:
    {
     i32 = 287;
     break L225;
    }
   case 53:
    {
     i1 = HEAP32[i36 >> 2] | 0;
     HEAP32[i35 >> 2] = 3;
     if ((_afm_parser_read_vals(i34, i35, 1) | 0) != 1) {
      i32 = 188;
      break L227;
     }
     i2 = HEAP32[i14 >> 2] | 0;
     if ((i2 | 0) < 0) {
      i1 = 160;
      i32 = 286;
      break L225;
     }
     i11 = i1 + 32 | 0;
     HEAP32[i11 >> 2] = i2;
     if (!i2) i10 = i1 + 28 | 0; else {
      i13 = _ft_mem_realloc(HEAP32[i34 >> 2] | 0, 20, 0, i2, 0, i35) | 0;
      i2 = i1 + 28 | 0;
      HEAP32[i2 >> 2] = i13;
      i1 = HEAP32[i35 >> 2] | 0;
      if (!i1) i10 = i2; else {
       i32 = 286;
       break L225;
      }
     }
     i1 = -1;
     L291 : while (1) {
      i8 = HEAP32[i33 >> 2] | 0;
      i6 = i8 + 12 | 0;
      i9 = i8 + 8 | 0;
      i4 = HEAP32[i6 >> 2] | 0;
      L293 : while (1) {
       do if ((i4 | 0) > 1) {
        i2 = HEAP32[i8 >> 2] | 0;
        i5 = HEAP32[i9 >> 2] | 0;
       } else {
        i2 = HEAP32[i8 >> 2] | 0;
        i5 = HEAP32[i9 >> 2] | 0;
        if ((i4 | 0) != 1) {
         L300 : do if (i2 >>> 0 < i5 >>> 0) {
          i3 = i2;
          L301 : while (1) {
           i2 = i3 + 1 | 0;
           HEAP32[i8 >> 2] = i2;
           switch (HEAP8[i3 >> 0] | 0) {
           case 26:
            {
             i3 = 3;
             i32 = 203;
             break L300;
            }
           case 10:
           case 13:
            {
             i32 = 201;
             break L301;
            }
           case 59:
            {
             i32 = 202;
             break L301;
            }
           case 9:
           case 32:
            break;
           default:
            {
             i3 = i4;
             break L300;
            }
           }
           if (i2 >>> 0 < i5 >>> 0) i3 = i2; else {
            i3 = 3;
            i32 = 203;
            break L300;
           }
          }
          if ((i32 | 0) == 201) {
           i3 = 2;
           i32 = 203;
           break;
          } else if ((i32 | 0) == 202) {
           i3 = 1;
           i32 = 203;
           break;
          }
         } else {
          i3 = 3;
          i32 = 203;
         } while (0);
         if ((i32 | 0) == 203) {
          i32 = 0;
          HEAP32[i6 >> 2] = i3;
         }
         if ((i3 | 0) > 1) break;
        }
        L310 : while (1) {
         if (i2 >>> 0 >= i5 >>> 0) {
          i32 = 207;
          break;
         }
         i3 = i2 + 1 | 0;
         HEAP32[i8 >> 2] = i3;
         switch (HEAP8[i2 >> 0] | 0) {
         case 26:
          {
           i2 = i3;
           i32 = 207;
           break L310;
          }
         case 10:
         case 13:
          {
           i4 = 2;
           i2 = i3;
           break L310;
          }
         default:
          i2 = i3;
         }
        }
        if ((i32 | 0) == 207) i4 = 3;
        HEAP32[i6 >> 2] = i4;
       } while (0);
       HEAP32[i6 >> 2] = 0;
       L317 : do if (i2 >>> 0 < i5 >>> 0) {
        i7 = i2;
        L318 : while (1) {
         i2 = i7 + 1 | 0;
         HEAP32[i8 >> 2] = i2;
         switch (HEAP8[i7 >> 0] | 0) {
         case 26:
          {
           i2 = 3;
           i32 = 215;
           break L317;
          }
         case 10:
         case 13:
          {
           i32 = 213;
           break L318;
          }
         case 59:
          {
           i32 = 214;
           break L318;
          }
         case 9:
         case 32:
          break;
         default:
          {
           i32 = 211;
           break L318;
          }
         }
         if (i2 >>> 0 < i5 >>> 0) i7 = i2; else {
          i2 = 3;
          i32 = 215;
          break L317;
         }
        }
        if ((i32 | 0) == 211) {
         i32 = 0;
         i4 = i2;
         i3 = i2;
         L323 : while (1) {
          if (i4 >>> 0 >= i5 >>> 0) {
           i32 = 220;
           break;
          }
          i2 = i4 + 1 | 0;
          HEAP32[i8 >> 2] = i2;
          i3 = i2;
          switch (HEAP8[i4 >> 0] | 0) {
          case 26:
           {
            i32 = 220;
            break L323;
           }
          case 9:
          case 32:
           {
            i2 = 0;
            break L323;
           }
          case 10:
          case 13:
           {
            i32 = 218;
            break L323;
           }
          case 59:
           {
            i32 = 219;
            break L323;
           }
          default:
           i4 = i2;
          }
         }
         if ((i32 | 0) == 218) {
          i32 = 0;
          HEAP32[i6 >> 2] = 2;
          i2 = 2;
         } else if ((i32 | 0) == 219) {
          i32 = 0;
          HEAP32[i6 >> 2] = 1;
          i2 = 1;
         } else if ((i32 | 0) == 220) {
          i32 = 0;
          HEAP32[i6 >> 2] = 3;
          i2 = 3;
         }
         if (!i7) break; else break L293;
        } else if ((i32 | 0) == 213) {
         i2 = 2;
         i32 = 215;
         break;
        } else if ((i32 | 0) == 214) {
         i2 = 1;
         i32 = 215;
         break;
        }
       } else {
        i2 = 3;
        i32 = 215;
       } while (0);
       if ((i32 | 0) == 215) {
        i32 = 0;
        HEAP32[i6 >> 2] = i2;
       }
       if ((i2 | 0) == 2) i4 = 2; else {
        i1 = 160;
        i32 = 286;
        break L225;
       }
      }
      i5 = i3 + ~i7 | 0;
      i6 = HEAP8[i7 >> 0] | 0;
      i3 = 0;
      do {
       i4 = HEAP32[24360 + (i3 << 2) >> 2] | 0;
       if ((HEAP8[i4 >> 0] | 0) == i6 << 24 >> 24) {
        i32 = 225;
        break;
       }
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) < 74);
      L340 : do if ((i32 | 0) == 225) {
       while (1) {
        i32 = 0;
        if (!(_strncmp(i4, i7, i5) | 0)) break;
        i3 = i3 + 1 | 0;
        if ((i3 | 0) >= 74) break L340;
        i4 = HEAP32[24360 + (i3 << 2) >> 2] | 0;
        if ((HEAP8[i4 >> 0] | 0) != i6 << 24 >> 24) break L340; else i32 = 225;
       }
       switch (i3 | 0) {
       case 20:
       case 21:
       case 23:
        break L291;
       case 56:
        break;
       default:
        {
         i32 = 233;
         break L227;
        }
       }
       i1 = i1 + 1 | 0;
       if ((i1 | 0) >= (HEAP32[i11 >> 2] | 0)) {
        i32 = 233;
        break L227;
       }
       i2 = HEAP32[i10 >> 2] | 0;
       HEAP32[i35 >> 2] = 3;
       HEAP32[i15 >> 2] = 2;
       HEAP32[i16 >> 2] = 2;
       HEAP32[i17 >> 2] = 2;
       HEAP32[i18 >> 2] = 2;
       if ((_afm_parser_read_vals(i34, i35, 5) | 0) != 5) {
        i32 = 233;
        break L227;
       }
       HEAP32[i2 + (i1 * 20 | 0) >> 2] = HEAP32[i19 >> 2];
       HEAP32[i2 + (i1 * 20 | 0) + 4 >> 2] = HEAP32[i20 >> 2];
       HEAP32[i2 + (i1 * 20 | 0) + 8 >> 2] = HEAP32[i21 >> 2];
       HEAP32[i2 + (i1 * 20 | 0) + 12 >> 2] = HEAP32[i22 >> 2];
       HEAP32[i2 + (i1 * 20 | 0) + 16 >> 2] = HEAP32[i23 >> 2];
      } while (0);
     }
     HEAP32[i11 >> 2] = i1 + 1;
     continue L227;
    }
   case 51:
   case 50:
    {
     i1 = HEAP32[i36 >> 2] | 0;
     HEAP32[i35 >> 2] = 3;
     if ((_afm_parser_read_vals(i34, i35, 1) | 0) != 1) {
      i32 = 237;
      break L227;
     }
     i2 = HEAP32[i24 >> 2] | 0;
     if ((i2 | 0) < 0) {
      i1 = 160;
      i32 = 286;
      break L225;
     }
     i13 = i1 + 40 | 0;
     HEAP32[i13 >> 2] = i2;
     if (!i2) i2 = i1 + 36 | 0; else {
      i12 = _ft_mem_realloc(HEAP32[i34 >> 2] | 0, 16, 0, i2, 0, i35) | 0;
      i2 = i1 + 36 | 0;
      HEAP32[i2 >> 2] = i12;
      i1 = HEAP32[i35 >> 2] | 0;
      if (i1) {
       i32 = 286;
       break L225;
      }
     }
     i12 = 0;
     L358 : while (1) {
      i9 = HEAP32[i33 >> 2] | 0;
      i10 = i9 + 12 | 0;
      i11 = i9 + 8 | 0;
      i1 = HEAP32[i10 >> 2] | 0;
      L360 : while (1) {
       L362 : while (1) {
        do if ((i1 | 0) > 1) {
         i1 = HEAP32[i9 >> 2] | 0;
         i5 = HEAP32[i11 >> 2] | 0;
        } else {
         i3 = HEAP32[i9 >> 2] | 0;
         i5 = HEAP32[i11 >> 2] | 0;
         if ((i1 | 0) == 1) i1 = i3; else {
          L369 : do if (i3 >>> 0 < i5 >>> 0) {
           i4 = i3;
           L370 : while (1) {
            i3 = i4 + 1 | 0;
            HEAP32[i9 >> 2] = i3;
            switch (HEAP8[i4 >> 0] | 0) {
            case 26:
             {
              i1 = 3;
              i32 = 253;
              break L369;
             }
            case 10:
            case 13:
             {
              i32 = 251;
              break L370;
             }
            case 59:
             {
              i32 = 252;
              break L370;
             }
            case 9:
            case 32:
             break;
            default:
             break L369;
            }
            if (i3 >>> 0 < i5 >>> 0) i4 = i3; else {
             i1 = 3;
             i32 = 253;
             break L369;
            }
           }
           if ((i32 | 0) == 251) {
            i1 = 2;
            i32 = 253;
            break;
           } else if ((i32 | 0) == 252) {
            i1 = 1;
            i32 = 253;
            break;
           }
          } else {
           i1 = 3;
           i32 = 253;
          } while (0);
          if ((i32 | 0) == 253) {
           i32 = 0;
           HEAP32[i10 >> 2] = i1;
          }
          if ((i1 | 0) > 1) {
           i1 = i3;
           break;
          } else i1 = i3;
         }
         L379 : while (1) {
          if (i1 >>> 0 >= i5 >>> 0) {
           i32 = 257;
           break;
          }
          i3 = i1 + 1 | 0;
          HEAP32[i9 >> 2] = i3;
          switch (HEAP8[i1 >> 0] | 0) {
          case 26:
           {
            i1 = i3;
            i32 = 257;
            break L379;
           }
          case 10:
          case 13:
           {
            i4 = 2;
            i1 = i3;
            break L379;
           }
          default:
           i1 = i3;
          }
         }
         if ((i32 | 0) == 257) i4 = 3;
         HEAP32[i10 >> 2] = i4;
        } while (0);
        HEAP32[i10 >> 2] = 0;
        L386 : do if (i1 >>> 0 < i5 >>> 0) {
         i8 = i1;
         L387 : while (1) {
          i1 = i8 + 1 | 0;
          HEAP32[i9 >> 2] = i1;
          switch (HEAP8[i8 >> 0] | 0) {
          case 26:
           {
            i1 = 3;
            i32 = 265;
            break L386;
           }
          case 10:
          case 13:
           {
            i32 = 263;
            break L387;
           }
          case 59:
           {
            i32 = 264;
            break L387;
           }
          case 9:
          case 32:
           break;
          default:
           {
            i32 = 261;
            break L387;
           }
          }
          if (i1 >>> 0 < i5 >>> 0) i8 = i1; else {
           i1 = 3;
           i32 = 265;
           break L386;
          }
         }
         if ((i32 | 0) == 261) {
          i32 = 0;
          i4 = i1;
          i3 = i1;
          L392 : while (1) {
           if (i4 >>> 0 >= i5 >>> 0) {
            i32 = 270;
            break;
           }
           i1 = i4 + 1 | 0;
           HEAP32[i9 >> 2] = i1;
           i3 = i1;
           switch (HEAP8[i4 >> 0] | 0) {
           case 26:
            {
             i32 = 270;
             break L392;
            }
           case 9:
           case 32:
            {
             i1 = 0;
             break L392;
            }
           case 10:
           case 13:
            {
             i32 = 268;
             break L392;
            }
           case 59:
            {
             i32 = 269;
             break L392;
            }
           default:
            i4 = i1;
           }
          }
          if ((i32 | 0) == 268) {
           i32 = 0;
           HEAP32[i10 >> 2] = 2;
           i1 = 2;
          } else if ((i32 | 0) == 269) {
           i32 = 0;
           HEAP32[i10 >> 2] = 1;
           i1 = 1;
          } else if ((i32 | 0) == 270) {
           i32 = 0;
           HEAP32[i10 >> 2] = 3;
           i1 = 3;
          }
          if (!i8) break; else break L362;
         } else if ((i32 | 0) == 263) {
          i1 = 2;
          i32 = 265;
          break;
         } else if ((i32 | 0) == 264) {
          i1 = 1;
          i32 = 265;
          break;
         }
        } else {
         i1 = 3;
         i32 = 265;
        } while (0);
        if ((i32 | 0) == 265) {
         i32 = 0;
         HEAP32[i10 >> 2] = i1;
        }
        if ((i1 | 0) == 2) i1 = 2; else {
         i1 = 160;
         i32 = 286;
         break L225;
        }
       }
       i6 = i3 + ~i8 | 0;
       i7 = HEAP8[i8 >> 0] | 0;
       i3 = 0;
       while (1) {
        i5 = HEAP32[24360 + (i3 << 2) >> 2] | 0;
        if ((HEAP8[i5 >> 0] | 0) == i7 << 24 >> 24) {
         i4 = i3;
         i3 = i5;
         break;
        }
        i3 = i3 + 1 | 0;
        if ((i3 | 0) >= 74) continue L360;
       }
       while (1) {
        if (!(_strncmp(i3, i8, i6) | 0)) break L360;
        i4 = i4 + 1 | 0;
        if ((i4 | 0) >= 74) continue L360;
        i3 = HEAP32[24360 + (i4 << 2) >> 2] | 0;
        if ((HEAP8[i3 >> 0] | 0) != i7 << 24 >> 24) continue L360;
       }
      }
      switch (i4 | 0) {
      case 20:
      case 21:
      case 22:
       break L358;
      case 37:
      case 36:
      case 34:
       break;
      default:
       {
        i1 = 160;
        i32 = 286;
        break L225;
       }
      }
      if ((i12 | 0) >= (HEAP32[i13 >> 2] | 0)) {
       i32 = 283;
       break L227;
      }
      i1 = HEAP32[i2 >> 2] | 0;
      HEAP32[i35 >> 2] = 5;
      HEAP32[i25 >> 2] = 5;
      HEAP32[i26 >> 2] = 3;
      HEAP32[i27 >> 2] = 3;
      i3 = _afm_parser_read_vals(i34, i35, 4) | 0;
      if ((i3 | 0) < 3) {
       i32 = 283;
       break L227;
      }
      HEAP32[i1 + (i12 << 4) >> 2] = HEAP32[i28 >> 2];
      HEAP32[i1 + (i12 << 4) + 4 >> 2] = HEAP32[i29 >> 2];
      i9 = (i4 | 0) == 37;
      i10 = HEAP32[i30 >> 2] | 0;
      i11 = i9 ? i10 : (i4 | 0) == 34 & (i3 | 0) == 4 ? HEAP32[i31 >> 2] | 0 : 0;
      HEAP32[i1 + (i12 << 4) + 8 >> 2] = i9 ? 0 : i10;
      HEAP32[i1 + (i12 << 4) + 12 >> 2] = i11;
      i12 = i12 + 1 | 0;
     }
     HEAP32[i13 >> 2] = i12;
     _qsort(HEAP32[i2 >> 2] | 0, i12, 16, 190);
     i2 = HEAP32[i33 >> 2] | 0;
     i8 = i2;
     i2 = HEAP32[i2 + 12 >> 2] | 0;
     continue L227;
    }
   default:
    {
     i1 = 160;
     i32 = 286;
     break L225;
    }
   }
  }
  if ((i32 | 0) == 188) {
   i1 = 160;
   i32 = 286;
   break;
  } else if ((i32 | 0) == 233) {
   i1 = 160;
   i32 = 286;
   break;
  } else if ((i32 | 0) == 237) {
   i1 = 160;
   i32 = 286;
   break;
  } else if ((i32 | 0) == 283) {
   i1 = 160;
   i32 = 286;
   break;
  }
 } while (0);
 if ((i32 | 0) != 286) if ((i32 | 0) == 287) {
  i38 = 0;
  STACKTOP = i39;
  return i38 | 0;
 }
 i36 = i38 + 28 | 0;
 _ft_mem_free(i37, HEAP32[i36 >> 2] | 0);
 HEAP32[i36 >> 2] = 0;
 HEAP32[i38 + 32 >> 2] = 0;
 i36 = i38 + 36 | 0;
 _ft_mem_free(i37, HEAP32[i36 >> 2] | 0);
 HEAP32[i36 >> 2] = 0;
 HEAP32[i38 + 40 >> 2] = 0;
 HEAP8[i38 >> 0] = 0;
 i38 = i1;
 STACKTOP = i39;
 return i38 | 0;
}
function _doContent(i55, i75, i76, i1, i77, i78, i62) {
 i55 = i55 | 0;
 i75 = i75 | 0;
 i76 = i76 | 0;
 i1 = i1 | 0;
 i77 = i77 | 0;
 i78 = i78 | 0;
 i62 = i62 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i79 = 0, i80 = 0, i81 = 0;
 i81 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i79 = i81 + 40 | 0;
 i80 = i81 + 36 | 0;
 i63 = i81 + 32 | 0;
 i56 = i81 + 28 | 0;
 i57 = i81 + 24 | 0;
 i58 = i81;
 HEAP32[i63 >> 2] = i1;
 i59 = i55 + 356 | 0;
 i60 = HEAP32[i59 >> 2] | 0;
 i67 = i55 + 144 | 0;
 if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
  i68 = i55 + 288 | 0;
  i2 = i55 + 292 | 0;
  i64 = i68;
  i54 = i2;
  i66 = i55 + 300 | 0;
 } else {
  i66 = i55 + 300 | 0;
  i54 = HEAP32[i66 >> 2] | 0;
  i64 = i54;
  i54 = i54 + 4 | 0;
  i2 = i55 + 292 | 0;
  i68 = i55 + 288 | 0;
 }
 HEAP32[i64 >> 2] = i1;
 i21 = i76 + 4 | 0;
 i69 = i55 + 80 | 0;
 i65 = i76 + 72 | 0;
 i70 = i55 + 44 | 0;
 i71 = i76 + 60 | 0;
 i72 = i55 + 48 | 0;
 i73 = i55 + 4 | 0;
 i22 = i55 + 480 | 0;
 i23 = i76 + 48 | 0;
 i24 = i76 + 68 | 0;
 i25 = i60 + 80 | 0;
 i26 = i60 + 92 | 0;
 i27 = i60 + 88 | 0;
 i28 = i60 + 96 | 0;
 i29 = i60 + 8 | 0;
 i30 = i60 + 129 | 0;
 i31 = i55 + 112 | 0;
 i17 = i55 + 416 | 0;
 i18 = i55 + 428 | 0;
 i19 = i55 + 424 | 0;
 i20 = i55 + 472 | 0;
 i32 = i55 + 432 | 0;
 i33 = i55 + 116 | 0;
 i34 = i55 + 308 | 0;
 i35 = i55 + 120 | 0;
 i36 = i60 + 130 | 0;
 i16 = i55 + 496 | 0;
 i37 = i60 + 4 | 0;
 i61 = i55 + 60 | 0;
 i38 = i55 + 368 | 0;
 i39 = i55 + 12 | 0;
 i40 = i55 + 364 | 0;
 i41 = i76 + 32 | 0;
 i74 = i55 + 312 | 0;
 i42 = i55 + 52 | 0;
 i43 = i55 + 420 | 0;
 i44 = i55 + 416 | 0;
 i45 = i55 + 392 | 0;
 i46 = i55 + 16 | 0;
 i47 = i55 + 56 | 0;
 i48 = i55 + 104 | 0;
 i49 = i55 + 376 | 0;
 i50 = i55 + 236 | 0;
 i51 = i55 + 237 | 0;
 i52 = i76 + 44 | 0;
 i53 = i55 + 72 | 0;
 L5 : while (1) {
  i14 = HEAP32[i63 >> 2] | 0;
  HEAP32[i56 >> 2] = i14;
  i14 = FUNCTION_TABLE_iiiii[HEAP32[i21 >> 2] & 127](i76, i14, i77, i56) | 0;
  i5 = HEAP32[i56 >> 2] | 0;
  HEAP32[i54 >> 2] = i5;
  i1 = i5;
  L7 : do switch (i14 | 0) {
  case -3:
   {
    i15 = 6;
    break L5;
   }
  case -4:
   {
    i15 = 21;
    break L5;
   }
  case 0:
   {
    i15 = 26;
    break L5;
   }
  case -1:
   {
    i15 = 27;
    break L5;
   }
  case -2:
   {
    i15 = 29;
    break L5;
   }
  case -5:
   {
    i15 = 292;
    break L5;
   }
  case 12:
   {
    i1 = 17;
    i15 = 338;
    break L5;
   }
  case 9:
   {
    i14 = HEAP32[i24 >> 2] | 0;
    i14 = (FUNCTION_TABLE_iiii[HEAP32[i23 >> 2] & 127](i76, (HEAP32[i63 >> 2] | 0) + i14 | 0, i1 + (0 - i14) | 0) | 0) & 255;
    HEAP8[i57 >> 0] = i14;
    do if (!(i14 << 24 >> 24)) {
     i14 = HEAP32[i24 >> 2] | 0;
     i1 = (HEAP32[i56 >> 2] | 0) + (0 - i14) | 0;
     HEAP32[i79 >> 2] = (HEAP32[i63 >> 2] | 0) + i14;
     if (!(HEAP32[i26 >> 2] | 0)) if (!((_poolGrow(i25) | 0) << 24 >> 24)) {
      i15 = 46;
      break L5;
     }
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i1, i26, HEAP32[i27 >> 2] | 0);
      if ((HEAP32[i79 >> 2] | 0) == (i1 | 0)) break;
      if (!((_poolGrow(i25) | 0) << 24 >> 24)) {
       i15 = 46;
       break L5;
      }
     }
     if (!(HEAP32[i28 >> 2] | 0)) {
      i1 = 1;
      i15 = 159;
      break L5;
     }
     i1 = HEAP32[i26 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i27 >> 2] | 0)) {
      if (!((_poolGrow(i25) | 0) << 24 >> 24)) {
       i1 = 1;
       i15 = 159;
       break L5;
      }
      i1 = HEAP32[i26 >> 2] | 0;
     }
     HEAP32[i26 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i14 = HEAP32[i28 >> 2] | 0;
     i13 = i14;
     if (!i14) {
      i1 = 1;
      i15 = 159;
      break L5;
     }
     i11 = HEAP32[i29 >> 2] | 0;
     L34 : do if (!i11) i11 = 0; else {
      i1 = HEAP32[i16 >> 2] | 0;
      i12 = HEAP8[i14 >> 0] | 0;
      if (i12 << 24 >> 24) {
       i3 = i14;
       i4 = i12;
       do {
        i3 = i3 + 1 | 0;
        i1 = i1 * 1000003 ^ i4 & 255;
        i4 = HEAP8[i3 >> 0] | 0;
       } while (i4 << 24 >> 24 != 0);
      }
      i3 = i11 + -1 | 0;
      i4 = i1 & i3;
      i10 = HEAP32[i60 >> 2] | 0;
      i5 = HEAP32[i10 + (i4 << 2) >> 2] | 0;
      if (!i5) i11 = 0; else {
       i9 = i1 & 0 - i11;
       i8 = i3 >>> 2;
       i1 = 0;
       while (1) {
        i3 = HEAP32[i5 >> 2] | 0;
        if (i12 << 24 >> 24 == (HEAP8[i3 >> 0] | 0)) {
         i7 = i14;
         i6 = i12;
         do {
          if (!(i6 << 24 >> 24)) {
           i11 = i5;
           break L34;
          }
          i7 = i7 + 1 | 0;
          i3 = i3 + 1 | 0;
          i6 = HEAP8[i7 >> 0] | 0;
         } while (i6 << 24 >> 24 == (HEAP8[i3 >> 0] | 0));
        }
        if (!(i1 << 24 >> 24)) i1 = (i9 >>> ((HEAPU8[i37 >> 0] | 0) + -1 | 0) & i8 | 1) & 255;
        i5 = i1 & 255;
        i4 = (i4 >>> 0 < i5 >>> 0 ? i11 : 0) + (i4 - i5) | 0;
        i5 = HEAP32[i10 + (i4 << 2) >> 2] | 0;
        if (!i5) {
         i11 = 0;
         break;
        }
       }
      }
     } while (0);
     HEAP32[i26 >> 2] = i13;
     i1 = (i11 | 0) != 0;
     if (!(HEAP8[i30 >> 0] | 0)) i15 = 65; else if (!(HEAP8[i36 >> 0] | 0)) {
      if (!i1) {
       i1 = HEAP32[i35 >> 2] | 0;
       if (i1 | 0) {
        FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i14, 0);
        break;
       }
       i1 = HEAP32[i69 >> 2] | 0;
       if (!i1) break;
       i3 = HEAP32[i63 >> 2] | 0;
       i4 = HEAP32[i56 >> 2] | 0;
       HEAP32[i79 >> 2] = i3;
       if (!(HEAP8[i65 >> 0] | 0)) {
        if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
         i1 = i2;
         i3 = i68;
        } else {
         i3 = HEAP32[i66 >> 2] | 0;
         i1 = i3 + 4 | 0;
        }
        do {
         HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
         FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i4, i80, HEAP32[i72 >> 2] | 0);
         HEAP32[i1 >> 2] = HEAP32[i79 >> 2];
         i14 = HEAP32[i70 >> 2] | 0;
         FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
         HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
        } while ((HEAP32[i79 >> 2] | 0) != (i4 | 0));
       } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i3, i4 - i3 | 0);
       break;
      }
     } else i15 = 65;
     if ((i15 | 0) == 65) {
      i15 = 0;
      if (!i1) {
       i1 = 11;
       i15 = 159;
       break L5;
      }
      if (!(HEAP8[i11 + 34 >> 0] | 0)) {
       i1 = 24;
       i15 = 159;
       break L5;
      }
     }
     i10 = i11 + 32 | 0;
     if (HEAP8[i10 >> 0] | 0) {
      i1 = 12;
      i15 = 159;
      break L5;
     }
     if (HEAP32[i11 + 28 >> 2] | 0) {
      i1 = 15;
      i15 = 159;
      break L5;
     }
     if (HEAP32[i11 + 4 >> 2] | 0) {
      if (HEAP8[i34 >> 0] | 0) {
       i1 = _processInternalEntity(i55, i11, 0) | 0;
       if (!i1) break; else {
        i15 = 161;
        break L5;
       }
      }
      i1 = HEAP32[i35 >> 2] | 0;
      if (!i1) {
       i1 = HEAP32[i69 >> 2] | 0;
       if (i1 | 0) {
        i3 = HEAP32[i63 >> 2] | 0;
        i4 = HEAP32[i56 >> 2] | 0;
        HEAP32[i79 >> 2] = i3;
        if (!(HEAP8[i65 >> 0] | 0)) {
         if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
          i1 = i2;
          i3 = i68;
         } else {
          i3 = HEAP32[i66 >> 2] | 0;
          i1 = i3 + 4 | 0;
         }
         do {
          HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
          FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i4, i80, HEAP32[i72 >> 2] | 0);
          HEAP32[i1 >> 2] = HEAP32[i79 >> 2];
          i14 = HEAP32[i70 >> 2] | 0;
          FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
          HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
         } while ((HEAP32[i79 >> 2] | 0) != (i4 | 0));
        } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i3, i4 - i3 | 0);
       }
      } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0);
      break L7;
     }
     if (!(HEAP32[i31 >> 2] | 0)) {
      i1 = HEAP32[i69 >> 2] | 0;
      if (!i1) break;
      i3 = HEAP32[i63 >> 2] | 0;
      i4 = HEAP32[i56 >> 2] | 0;
      HEAP32[i79 >> 2] = i3;
      if (!(HEAP8[i65 >> 0] | 0)) {
       if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
        i1 = i2;
        i3 = i68;
       } else {
        i3 = HEAP32[i66 >> 2] | 0;
        i1 = i3 + 4 | 0;
       }
       do {
        HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
        FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i4, i80, HEAP32[i72 >> 2] | 0);
        HEAP32[i1 >> 2] = HEAP32[i79 >> 2];
        i14 = HEAP32[i70 >> 2] | 0;
        FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
        HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
       } while ((HEAP32[i79 >> 2] | 0) != (i4 | 0));
      } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i3, i4 - i3 | 0);
      break;
     }
     HEAP8[i10 >> 0] = 1;
     i9 = HEAP32[i59 >> 2] | 0;
     i5 = i9 + 156 | 0;
     if (!(HEAP32[i5 >> 2] | 0)) i1 = 0; else {
      i1 = HEAP32[i18 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i19 >> 2] | 0)) {
       if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
        i15 = 146;
        break L5;
       }
       i1 = HEAP32[i18 >> 2] | 0;
      }
      HEAP32[i18 >> 2] = i1 + 1;
      HEAP8[i1 >> 0] = 61;
      i3 = (((HEAP8[i20 >> 0] | 0) != 0) << 31 >> 31) + (HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0) | 0;
      if ((i3 | 0) > 0) {
       i4 = 0;
       while (1) {
        i1 = HEAP32[i18 >> 2] | 0;
        if ((i1 | 0) == (HEAP32[i19 >> 2] | 0)) {
         if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
          i15 = 146;
          break L5;
         }
         i1 = HEAP32[i18 >> 2] | 0;
        }
        i14 = HEAP8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + i4 >> 0] | 0;
        HEAP32[i18 >> 2] = i1 + 1;
        HEAP8[i1 >> 0] = i14;
        i4 = i4 + 1 | 0;
        if ((i4 | 0) >= (i3 | 0)) {
         i1 = 1;
         break;
        }
       }
      } else i1 = 1;
     }
     i3 = HEAP32[i9 + 60 >> 2] | 0;
     i8 = i3 + (HEAP32[i9 + 68 >> 2] << 2) | 0;
     L121 : while (1) {
      do {
       do {
        if ((i3 | 0) == (i8 | 0)) break L121;
        i4 = i3;
        i3 = i3 + 4 | 0;
        i4 = HEAP32[i4 >> 2] | 0;
       } while (!(i4 | 0));
       i7 = i4 + 4 | 0;
      } while ((HEAP32[i7 >> 2] | 0) == 0);
      if (i1 << 24 >> 24) {
       i1 = HEAP32[i18 >> 2] | 0;
       if ((i1 | 0) == (HEAP32[i19 >> 2] | 0)) {
        if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
         i15 = 146;
         break L5;
        }
        i1 = HEAP32[i18 >> 2] | 0;
       }
       HEAP32[i18 >> 2] = i1 + 1;
       HEAP8[i1 >> 0] = 12;
      }
      i6 = HEAP32[i4 >> 2] | 0;
      i4 = HEAP8[i6 >> 0] | 0;
      i1 = HEAP32[i18 >> 2] | 0;
      i5 = (i1 | 0) == (HEAP32[i19 >> 2] | 0);
      if (!(i4 << 24 >> 24)) i4 = i5; else while (1) {
       if (i5) {
        if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
         i15 = 146;
         break L5;
        }
        i1 = HEAP32[i18 >> 2] | 0;
        i4 = HEAP8[i6 >> 0] | 0;
       }
       HEAP32[i18 >> 2] = i1 + 1;
       HEAP8[i1 >> 0] = i4;
       i6 = i6 + 1 | 0;
       i4 = HEAP8[i6 >> 0] | 0;
       i1 = HEAP32[i18 >> 2] | 0;
       i5 = (i1 | 0) == (HEAP32[i19 >> 2] | 0);
       if (!(i4 << 24 >> 24)) {
        i4 = i5;
        break;
       }
      }
      if (i4) {
       if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
        i15 = 146;
        break L5;
       }
       i1 = HEAP32[i18 >> 2] | 0;
      }
      HEAP32[i18 >> 2] = i1 + 1;
      HEAP8[i1 >> 0] = 61;
      i5 = (((HEAP8[i20 >> 0] | 0) != 0) << 31 >> 31) + (HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) | 0;
      if ((i5 | 0) > 0) i1 = 0; else {
       i1 = 1;
       continue;
      }
      while (1) {
       i4 = HEAP32[i18 >> 2] | 0;
       if ((i4 | 0) == (HEAP32[i19 >> 2] | 0)) {
        if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
         i15 = 146;
         break L5;
        }
        i4 = HEAP32[i18 >> 2] | 0;
       }
       i14 = HEAP8[(HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) + i1 >> 0] | 0;
       HEAP32[i18 >> 2] = i4 + 1;
       HEAP8[i4 >> 0] = i14;
       i1 = i1 + 1 | 0;
       if ((i1 | 0) >= (i5 | 0)) {
        i1 = 1;
        continue L121;
       }
      }
     }
     i3 = HEAP32[i9 >> 2] | 0;
     i6 = i3 + (HEAP32[i9 + 8 >> 2] << 2) | 0;
     L156 : while (1) {
      do do {
       if ((i3 | 0) == (i6 | 0)) break L156;
       i4 = i3;
       i3 = i3 + 4 | 0;
       i4 = HEAP32[i4 >> 2] | 0;
      } while (!(i4 | 0)); while ((HEAP8[i4 + 32 >> 0] | 0) == 0);
      if (i1 << 24 >> 24) {
       i1 = HEAP32[i18 >> 2] | 0;
       if ((i1 | 0) == (HEAP32[i19 >> 2] | 0)) {
        if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
         i15 = 146;
         break L5;
        }
        i1 = HEAP32[i18 >> 2] | 0;
       }
       HEAP32[i18 >> 2] = i1 + 1;
       HEAP8[i1 >> 0] = 12;
      }
      i1 = HEAP32[i4 >> 2] | 0;
      i4 = HEAP8[i1 >> 0] | 0;
      if (!(i4 << 24 >> 24)) {
       i1 = 1;
       continue;
      }
      while (1) {
       i5 = HEAP32[i18 >> 2] | 0;
       if ((i5 | 0) == (HEAP32[i19 >> 2] | 0)) {
        if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
         i15 = 146;
         break L5;
        }
        i5 = HEAP32[i18 >> 2] | 0;
        i4 = HEAP8[i1 >> 0] | 0;
       }
       HEAP32[i18 >> 2] = i5 + 1;
       HEAP8[i5 >> 0] = i4;
       i1 = i1 + 1 | 0;
       i4 = HEAP8[i1 >> 0] | 0;
       if (!(i4 << 24 >> 24)) {
        i1 = 1;
        continue L156;
       }
      }
     }
     i1 = HEAP32[i18 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i19 >> 2] | 0)) {
      if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
       i15 = 146;
       break L5;
      }
      i1 = HEAP32[i18 >> 2] | 0;
     }
     HEAP32[i18 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i1 = HEAP32[i32 >> 2] | 0;
     HEAP8[i10 >> 0] = 0;
     if (!i1) {
      i1 = 1;
      i15 = 159;
      break L5;
     }
     if (!(FUNCTION_TABLE_iiiiii[HEAP32[i31 >> 2] & 127](HEAP32[i33 >> 2] | 0, i1, HEAP32[i11 + 20 >> 2] | 0, HEAP32[i11 + 16 >> 2] | 0, HEAP32[i11 + 24 >> 2] | 0) | 0)) {
      i1 = 21;
      i15 = 159;
      break L5;
     }
     HEAP32[i18 >> 2] = HEAP32[i32 >> 2];
    } else {
     i1 = HEAP32[i61 >> 2] | 0;
     if (i1 | 0) {
      FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i57, 1);
      break;
     }
     i1 = HEAP32[i69 >> 2] | 0;
     if (i1 | 0) {
      i3 = HEAP32[i63 >> 2] | 0;
      i4 = HEAP32[i56 >> 2] | 0;
      HEAP32[i79 >> 2] = i3;
      if (!(HEAP8[i65 >> 0] | 0)) {
       if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
        i1 = i2;
        i3 = i68;
       } else {
        i3 = HEAP32[i66 >> 2] | 0;
        i1 = i3 + 4 | 0;
       }
       do {
        HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
        FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i4, i80, HEAP32[i72 >> 2] | 0);
        HEAP32[i1 >> 2] = HEAP32[i79 >> 2];
        i14 = HEAP32[i70 >> 2] | 0;
        FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
        HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
       } while ((HEAP32[i79 >> 2] | 0) != (i4 | 0));
      } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i3, i4 - i3 | 0);
     }
    } while (0);
    break;
   }
  case 1:
  case 2:
   {
    i1 = HEAP32[i38 >> 2] | 0;
    if (!i1) {
     i1 = FUNCTION_TABLE_ii[HEAP32[i39 >> 2] & 63](48) | 0;
     if (!i1) {
      i1 = 1;
      i15 = 188;
      break L5;
     }
     i3 = FUNCTION_TABLE_ii[HEAP32[i39 >> 2] & 63](32) | 0;
     HEAP32[i1 + 36 >> 2] = i3;
     if (!i3) {
      i15 = 166;
      break L5;
     }
     HEAP32[i1 + 40 >> 2] = i3 + 32;
    } else HEAP32[i38 >> 2] = HEAP32[i1 >> 2];
    i10 = i1 + 44 | 0;
    HEAP32[i10 >> 2] = 0;
    HEAP32[i1 >> 2] = HEAP32[i40 >> 2];
    HEAP32[i40 >> 2] = i1;
    i11 = i1 + 12 | 0;
    HEAP32[i1 + 16 >> 2] = 0;
    HEAP32[i1 + 20 >> 2] = 0;
    i7 = (HEAP32[i63 >> 2] | 0) + (HEAP32[i24 >> 2] | 0) | 0;
    i8 = i1 + 4 | 0;
    HEAP32[i8 >> 2] = i7;
    i7 = FUNCTION_TABLE_iii[HEAP32[i41 >> 2] & 255](i76, i7) | 0;
    HEAP32[i1 + 8 >> 2] = i7;
    HEAP32[i74 >> 2] = (HEAP32[i74 >> 2] | 0) + 1;
    i8 = HEAP32[i8 >> 2] | 0;
    i7 = i8 + i7 | 0;
    HEAP32[i79 >> 2] = i8;
    i8 = i1 + 36 | 0;
    HEAP32[i57 >> 2] = HEAP32[i8 >> 2];
    i9 = i1 + 40 | 0;
    FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i7, i57, (HEAP32[i9 >> 2] | 0) + -1 | 0);
    i5 = HEAP32[i57 >> 2] | 0;
    i6 = HEAP32[i8 >> 2] | 0;
    i3 = i6;
    i4 = i5 - i3 | 0;
    if ((HEAP32[i79 >> 2] | 0) != (i7 | 0)) do {
     i5 = (HEAP32[i9 >> 2] | 0) - i3 << 1;
     i3 = FUNCTION_TABLE_iii[HEAP32[i46 >> 2] & 255](i6, i5) | 0;
     if (!i3) {
      i15 = 172;
      break L5;
     }
     HEAP32[i8 >> 2] = i3;
     i5 = i3 + i5 | 0;
     HEAP32[i9 >> 2] = i5;
     HEAP32[i57 >> 2] = i3 + i4;
     FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i7, i57, i5 + -1 | 0);
     i5 = HEAP32[i57 >> 2] | 0;
     i6 = HEAP32[i8 >> 2] | 0;
     i3 = i6;
     i4 = i5 - i3 | 0;
    } while ((HEAP32[i79 >> 2] | 0) != (i7 | 0));
    HEAP32[i1 + 24 >> 2] = i4;
    HEAP32[i11 >> 2] = i3;
    HEAP8[i5 >> 0] = 0;
    i1 = _storeAtts(i55, i76, HEAP32[i63 >> 2] | 0, i11, i10) | 0;
    if (i1 | 0) {
     i15 = 188;
     break L5;
    }
    i1 = HEAP32[i42 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i69 >> 2] | 0;
     if (i1 | 0) {
      i3 = HEAP32[i63 >> 2] | 0;
      i4 = HEAP32[i56 >> 2] | 0;
      HEAP32[i79 >> 2] = i3;
      if (!(HEAP8[i65 >> 0] | 0)) {
       if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
        i1 = i2;
        i3 = i68;
       } else {
        i3 = HEAP32[i66 >> 2] | 0;
        i1 = i3 + 4 | 0;
       }
       do {
        HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
        FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i4, i80, HEAP32[i72 >> 2] | 0);
        HEAP32[i1 >> 2] = HEAP32[i79 >> 2];
        i14 = HEAP32[i70 >> 2] | 0;
        FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
        HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
       } while ((HEAP32[i79 >> 2] | 0) != (i4 | 0));
      } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i3, i4 - i3 | 0);
     }
    } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i45 >> 2] | 0);
    i3 = HEAP32[i43 >> 2] | 0;
    i1 = HEAP32[i44 >> 2] | 0;
    if (!i3) i15 = 187; else if (i1 | 0) while (1) {
     i4 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = i3;
     if (!i4) {
      i15 = 187;
      break;
     } else {
      i3 = i1;
      i1 = i4;
     }
    }
    if ((i15 | 0) == 187) {
     i15 = 0;
     HEAP32[i43 >> 2] = i1;
    }
    HEAP32[i44 >> 2] = 0;
    HEAP32[i32 >> 2] = 0;
    HEAP32[i18 >> 2] = 0;
    HEAP32[i19 >> 2] = 0;
    break;
   }
  case 3:
  case 4:
   {
    i14 = (HEAP32[i63 >> 2] | 0) + (HEAP32[i24 >> 2] | 0) | 0;
    HEAP32[i57 >> 2] = 0;
    i1 = i14 + (FUNCTION_TABLE_iii[HEAP32[i41 >> 2] & 255](i76, i14) | 0) | 0;
    HEAP32[i79 >> 2] = i14;
    if (!(HEAP32[i18 >> 2] | 0)) if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
     i15 = 194;
     break L5;
    }
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i1, i18, HEAP32[i19 >> 2] | 0);
     if ((HEAP32[i79 >> 2] | 0) == (i1 | 0)) break;
     if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
      i15 = 194;
      break L5;
     }
    }
    if (!(HEAP32[i32 >> 2] | 0)) {
     i15 = 199;
     break L5;
    }
    i1 = HEAP32[i18 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i19 >> 2] | 0)) {
     if (!((_poolGrow(i17) | 0) << 24 >> 24)) {
      i15 = 199;
      break L5;
     }
     i1 = HEAP32[i18 >> 2] | 0;
    }
    HEAP32[i18 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = 0;
    i14 = HEAP32[i32 >> 2] | 0;
    HEAP32[i58 >> 2] = i14;
    if (!i14) {
     i1 = 1;
     break L5;
    }
    HEAP32[i32 >> 2] = HEAP32[i18 >> 2];
    i1 = _storeAtts(i55, i76, HEAP32[i63 >> 2] | 0, i58, i57) | 0;
    if (i1 | 0) break L5;
    HEAP32[i32 >> 2] = HEAP32[i18 >> 2];
    i1 = HEAP32[i42 >> 2] | 0;
    if (!i1) i3 = 1; else {
     FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, HEAP32[i58 >> 2] | 0, HEAP32[i45 >> 2] | 0);
     i3 = 0;
    }
    i1 = HEAP32[i47 >> 2] | 0;
    if (!i1) {
     if (i3 | 0) {
      i1 = HEAP32[i69 >> 2] | 0;
      if (i1 | 0) {
       i3 = HEAP32[i63 >> 2] | 0;
       i4 = HEAP32[i56 >> 2] | 0;
       HEAP32[i79 >> 2] = i3;
       if (!(HEAP8[i65 >> 0] | 0)) {
        if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
         i1 = i2;
         i3 = i68;
        } else {
         i3 = HEAP32[i66 >> 2] | 0;
         i1 = i3 + 4 | 0;
        }
        do {
         HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
         FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i4, i80, HEAP32[i72 >> 2] | 0);
         HEAP32[i1 >> 2] = HEAP32[i79 >> 2];
         i14 = HEAP32[i70 >> 2] | 0;
         FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
         HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
        } while ((HEAP32[i79 >> 2] | 0) != (i4 | 0));
       } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i3, i4 - i3 | 0);
      }
     }
    } else {
     if (HEAP32[i42 >> 2] | 0) {
      HEAP32[i64 >> 2] = HEAP32[i54 >> 2];
      i1 = HEAP32[i47 >> 2] | 0;
     }
     FUNCTION_TABLE_vii[i1 & 63](HEAP32[i73 >> 2] | 0, HEAP32[i58 >> 2] | 0);
    }
    i3 = HEAP32[i43 >> 2] | 0;
    i1 = HEAP32[i17 >> 2] | 0;
    if (!i3) i15 = 220; else if (i1 | 0) while (1) {
     i4 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = i3;
     if (!i4) {
      i15 = 220;
      break;
     } else {
      i3 = i1;
      i1 = i4;
     }
    }
    if ((i15 | 0) == 220) {
     i15 = 0;
     HEAP32[i43 >> 2] = i1;
    }
    HEAP32[i17 >> 2] = 0;
    HEAP32[i32 >> 2] = 0;
    HEAP32[i18 >> 2] = 0;
    HEAP32[i19 >> 2] = 0;
    i1 = HEAP32[i57 >> 2] | 0;
    if (i1 | 0) do {
     i3 = HEAP32[i48 >> 2] | 0;
     if (!i3) i3 = i1; else {
      FUNCTION_TABLE_vii[i3 & 63](HEAP32[i73 >> 2] | 0, HEAP32[HEAP32[i1 >> 2] >> 2] | 0);
      i3 = i1;
     }
     i13 = i1 + 4 | 0;
     i14 = i1;
     i1 = HEAP32[i13 >> 2] | 0;
     HEAP32[i57 >> 2] = i1;
     HEAP32[i13 >> 2] = HEAP32[i49 >> 2];
     HEAP32[i49 >> 2] = i14;
     HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = HEAP32[i14 + 8 >> 2];
    } while ((i1 | 0) != 0);
    if (!(HEAP32[i74 >> 2] | 0)) {
     i15 = 228;
     break L5;
    }
    break;
   }
  case 5:
   {
    if ((HEAP32[i74 >> 2] | 0) == (i75 | 0)) {
     i1 = 13;
     i15 = 338;
     break L5;
    }
    i7 = HEAP32[i40 >> 2] | 0;
    HEAP32[i40 >> 2] = HEAP32[i7 >> 2];
    HEAP32[i7 >> 2] = HEAP32[i38 >> 2];
    HEAP32[i38 >> 2] = i7;
    i1 = (HEAP32[i63 >> 2] | 0) + (HEAP32[i24 >> 2] << 1) | 0;
    i3 = FUNCTION_TABLE_iii[HEAP32[i41 >> 2] & 255](i76, i1) | 0;
    if ((i3 | 0) != (HEAP32[i7 + 8 >> 2] | 0)) {
     i15 = 232;
     break L5;
    }
    if (_memcmp(HEAP32[i7 + 4 >> 2] | 0, i1, i3) | 0) {
     i15 = 232;
     break L5;
    }
    HEAP32[i74 >> 2] = (HEAP32[i74 >> 2] | 0) + -1;
    i1 = HEAP32[i47 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i69 >> 2] | 0;
     if (i1 | 0) {
      i3 = HEAP32[i63 >> 2] | 0;
      i4 = HEAP32[i56 >> 2] | 0;
      HEAP32[i79 >> 2] = i3;
      if (!(HEAP8[i65 >> 0] | 0)) {
       if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
        i1 = i2;
        i3 = i68;
       } else {
        i3 = HEAP32[i66 >> 2] | 0;
        i1 = i3 + 4 | 0;
       }
       do {
        HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
        FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i4, i80, HEAP32[i72 >> 2] | 0);
        HEAP32[i1 >> 2] = HEAP32[i79 >> 2];
        i14 = HEAP32[i70 >> 2] | 0;
        FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
        HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
       } while ((HEAP32[i79 >> 2] | 0) != (i4 | 0));
      } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i3, i4 - i3 | 0);
     }
    } else {
     i5 = HEAP32[i7 + 16 >> 2] | 0;
     i6 = i7 + 12 | 0;
     if ((i5 | 0) != 0 & (HEAP8[i50 >> 0] | 0) != 0) {
      i1 = (HEAP32[i6 >> 2] | 0) + (HEAP32[i7 + 28 >> 2] | 0) | 0;
      i4 = HEAP8[i5 >> 0] | 0;
      if (i4 << 24 >> 24) while (1) {
       i5 = i5 + 1 | 0;
       i3 = i1 + 1 | 0;
       HEAP8[i1 >> 0] = i4;
       i4 = HEAP8[i5 >> 0] | 0;
       if (!(i4 << 24 >> 24)) {
        i1 = i3;
        break;
       } else i1 = i3;
      }
      i3 = HEAP32[i7 + 20 >> 2] | 0;
      if ((i3 | 0) != 0 & (HEAP8[i51 >> 0] | 0) != 0) {
       HEAP8[i1 >> 0] = HEAP8[i20 >> 0] | 0;
       i1 = i1 + 1 | 0;
       i4 = HEAP8[i3 >> 0] | 0;
       if (i4 << 24 >> 24) do {
        i3 = i3 + 1 | 0;
        HEAP8[i1 >> 0] = i4;
        i1 = i1 + 1 | 0;
        i4 = HEAP8[i3 >> 0] | 0;
       } while (i4 << 24 >> 24 != 0);
      }
      HEAP8[i1 >> 0] = 0;
      i1 = HEAP32[i47 >> 2] | 0;
     }
     FUNCTION_TABLE_vii[i1 & 63](HEAP32[i73 >> 2] | 0, HEAP32[i6 >> 2] | 0);
    }
    i5 = i7 + 44 | 0;
    i1 = HEAP32[i5 >> 2] | 0;
    if (i1 | 0) do {
     i3 = HEAP32[i48 >> 2] | 0;
     if (!i3) {
      i3 = i1;
      i4 = i1;
     } else {
      FUNCTION_TABLE_vii[i3 & 63](HEAP32[i73 >> 2] | 0, HEAP32[HEAP32[i1 >> 2] >> 2] | 0);
      i3 = i1;
      i4 = HEAP32[i5 >> 2] | 0;
     }
     i14 = i1;
     i1 = HEAP32[i4 + 4 >> 2] | 0;
     HEAP32[i5 >> 2] = i1;
     HEAP32[i14 + 4 >> 2] = HEAP32[i49 >> 2];
     HEAP32[i49 >> 2] = i14;
     HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = HEAP32[i14 + 8 >> 2];
    } while ((i1 | 0) != 0);
    if (!(HEAP32[i74 >> 2] | 0)) {
     i15 = 257;
     break L5;
    }
    break;
   }
  case 10:
   {
    i1 = FUNCTION_TABLE_iii[HEAP32[i52 >> 2] & 255](i76, HEAP32[i63 >> 2] | 0) | 0;
    if ((i1 | 0) < 0) {
     i1 = 14;
     i15 = 338;
     break L5;
    }
    i3 = HEAP32[i61 >> 2] | 0;
    if (i3 | 0) {
     i13 = HEAP32[i73 >> 2] | 0;
     i14 = _XmlUtf8Encode(i1, i79) | 0;
     FUNCTION_TABLE_viii[i3 & 31](i13, i79, i14);
     break L7;
    }
    i1 = HEAP32[i69 >> 2] | 0;
    if (i1 | 0) {
     i3 = HEAP32[i63 >> 2] | 0;
     i4 = HEAP32[i56 >> 2] | 0;
     HEAP32[i79 >> 2] = i3;
     if (!(HEAP8[i65 >> 0] | 0)) {
      if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
       i1 = i2;
       i3 = i68;
      } else {
       i3 = HEAP32[i66 >> 2] | 0;
       i1 = i3 + 4 | 0;
      }
      do {
       HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
       FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i4, i80, HEAP32[i72 >> 2] | 0);
       HEAP32[i1 >> 2] = HEAP32[i79 >> 2];
       i14 = HEAP32[i70 >> 2] | 0;
       FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
       HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
      } while ((HEAP32[i79 >> 2] | 0) != (i4 | 0));
     } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i3, i4 - i3 | 0);
    }
    break;
   }
  case 7:
   {
    i3 = HEAP32[i61 >> 2] | 0;
    if (i3 | 0) {
     HEAP8[i79 >> 0] = 10;
     FUNCTION_TABLE_viii[i3 & 31](HEAP32[i73 >> 2] | 0, i79, 1);
     break L7;
    }
    i3 = HEAP32[i69 >> 2] | 0;
    if (i3 | 0) {
     i4 = HEAP32[i63 >> 2] | 0;
     HEAP32[i79 >> 2] = i4;
     if (!(HEAP8[i65 >> 0] | 0)) {
      if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
       i3 = i2;
       i4 = i68;
      } else {
       i4 = HEAP32[i66 >> 2] | 0;
       i3 = i4 + 4 | 0;
      }
      do {
       HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
       FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i1, i80, HEAP32[i72 >> 2] | 0);
       HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
       i14 = HEAP32[i70 >> 2] | 0;
       FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
       HEAP32[i4 >> 2] = HEAP32[i79 >> 2];
      } while ((HEAP32[i79 >> 2] | 0) != (i1 | 0));
     } else FUNCTION_TABLE_viii[i3 & 31](HEAP32[i73 >> 2] | 0, i4, i5 - i4 | 0);
    }
    break;
   }
  case 8:
   {
    i3 = HEAP32[i53 >> 2] | 0;
    if (!i3) {
     i3 = HEAP32[i69 >> 2] | 0;
     if (i3 | 0) {
      i4 = HEAP32[i63 >> 2] | 0;
      HEAP32[i79 >> 2] = i4;
      if (!(HEAP8[i65 >> 0] | 0)) {
       if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
        i3 = i2;
        i4 = i68;
       } else {
        i4 = HEAP32[i66 >> 2] | 0;
        i3 = i4 + 4 | 0;
       }
       do {
        HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
        FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i1, i80, HEAP32[i72 >> 2] | 0);
        HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
        i14 = HEAP32[i70 >> 2] | 0;
        FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
        HEAP32[i4 >> 2] = HEAP32[i79 >> 2];
       } while ((HEAP32[i79 >> 2] | 0) != (i1 | 0));
      } else FUNCTION_TABLE_viii[i3 & 31](HEAP32[i73 >> 2] | 0, i4, i5 - i4 | 0);
     }
    } else FUNCTION_TABLE_vi[i3 & 127](HEAP32[i73 >> 2] | 0);
    i1 = _doCdataSection(i55, i76, i56, i77, i78, i62) | 0;
    if (i1 | 0) {
     i15 = 338;
     break L5;
    }
    if (!(HEAP32[i56 >> 2] | 0)) {
     i15 = 291;
     break L5;
    }
    break;
   }
  case 6:
   {
    i3 = HEAP32[i61 >> 2] | 0;
    if (i3 | 0) {
     if (HEAP8[i65 >> 0] | 0) {
      i14 = HEAP32[i63 >> 2] | 0;
      FUNCTION_TABLE_viii[i3 & 31](HEAP32[i73 >> 2] | 0, i14, i5 - i14 | 0);
      break L7;
     }
     while (1) {
      HEAP32[i79 >> 2] = HEAP32[i70 >> 2];
      FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i63, i1, i79, HEAP32[i72 >> 2] | 0);
      HEAP32[i54 >> 2] = HEAP32[i63 >> 2];
      i1 = HEAP32[i70 >> 2] | 0;
      FUNCTION_TABLE_viii[i3 & 31](HEAP32[i73 >> 2] | 0, i1, (HEAP32[i79 >> 2] | 0) - i1 | 0);
      i1 = HEAP32[i63 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i56 >> 2] | 0)) break;
      HEAP32[i64 >> 2] = i1;
      i1 = HEAP32[i56 >> 2] | 0;
     }
     break L7;
    }
    i3 = HEAP32[i69 >> 2] | 0;
    if (i3 | 0) {
     i4 = HEAP32[i63 >> 2] | 0;
     HEAP32[i79 >> 2] = i4;
     if (!(HEAP8[i65 >> 0] | 0)) {
      if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
       i3 = i2;
       i4 = i68;
      } else {
       i4 = HEAP32[i66 >> 2] | 0;
       i3 = i4 + 4 | 0;
      }
      do {
       HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
       FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i1, i80, HEAP32[i72 >> 2] | 0);
       HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
       i14 = HEAP32[i70 >> 2] | 0;
       FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
       HEAP32[i4 >> 2] = HEAP32[i79 >> 2];
      } while ((HEAP32[i79 >> 2] | 0) != (i1 | 0));
     } else FUNCTION_TABLE_viii[i3 & 31](HEAP32[i73 >> 2] | 0, i4, i5 - i4 | 0);
    }
    break;
   }
  case 11:
   {
    if (!(_reportProcessingInstruction(i55, i76, HEAP32[i63 >> 2] | 0, i1) | 0)) {
     i1 = 1;
     i15 = 338;
     break L5;
    }
    break;
   }
  case 13:
   {
    if (!(_reportComment(i55, i76, HEAP32[i63 >> 2] | 0, i1) | 0)) {
     i1 = 1;
     i15 = 338;
     break L5;
    }
    break;
   }
  default:
   {
    i3 = HEAP32[i69 >> 2] | 0;
    if (i3 | 0) {
     i4 = HEAP32[i63 >> 2] | 0;
     HEAP32[i79 >> 2] = i4;
     if (!(HEAP8[i65 >> 0] | 0)) {
      if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) {
       i3 = i2;
       i4 = i68;
      } else {
       i4 = HEAP32[i66 >> 2] | 0;
       i3 = i4 + 4 | 0;
      }
      do {
       HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
       FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i1, i80, HEAP32[i72 >> 2] | 0);
       HEAP32[i3 >> 2] = HEAP32[i79 >> 2];
       i14 = HEAP32[i70 >> 2] | 0;
       FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i14, (HEAP32[i80 >> 2] | 0) - i14 | 0);
       HEAP32[i4 >> 2] = HEAP32[i79 >> 2];
      } while ((HEAP32[i79 >> 2] | 0) != (i1 | 0));
     } else FUNCTION_TABLE_viii[i3 & 31](HEAP32[i73 >> 2] | 0, i4, i5 - i4 | 0);
    }
   }
  } while (0);
  i14 = HEAP32[i56 >> 2] | 0;
  HEAP32[i63 >> 2] = i14;
  HEAP32[i64 >> 2] = i14;
  switch (HEAP32[i22 >> 2] | 0) {
  case 3:
   {
    i15 = 336;
    break L5;
   }
  case 2:
   {
    i1 = 35;
    i15 = 338;
    break L5;
   }
  default:
   {}
  }
 }
 switch (i15 | 0) {
 case 6:
  {
   if (i62 << 24 >> 24) {
    HEAP32[i78 >> 2] = HEAP32[i63 >> 2];
    i80 = 0;
    STACKTOP = i81;
    return i80 | 0;
   }
   HEAP32[i54 >> 2] = i77;
   i1 = HEAP32[i61 >> 2] | 0;
   if (!i1) {
    i3 = HEAP32[i69 >> 2] | 0;
    if (i3 | 0) {
     i1 = HEAP32[i63 >> 2] | 0;
     HEAP32[i79 >> 2] = i1;
     if (!(HEAP8[i65 >> 0] | 0)) {
      if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) i1 = i68; else {
       i1 = HEAP32[i66 >> 2] | 0;
       i2 = i1 + 4 | 0;
      }
      do {
       HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
       FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i77, i80, HEAP32[i72 >> 2] | 0);
       HEAP32[i2 >> 2] = HEAP32[i79 >> 2];
       i68 = HEAP32[i70 >> 2] | 0;
       FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i68, (HEAP32[i80 >> 2] | 0) - i68 | 0);
       HEAP32[i1 >> 2] = HEAP32[i79 >> 2];
      } while ((HEAP32[i79 >> 2] | 0) != (i77 | 0));
     } else FUNCTION_TABLE_viii[i3 & 31](HEAP32[i73 >> 2] | 0, i1, i77 - i1 | 0);
    }
   } else {
    HEAP8[i79 >> 0] = 10;
    FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i79, 1);
   }
   if (!i75) {
    i80 = 3;
    STACKTOP = i81;
    return i80 | 0;
   }
   if ((HEAP32[i74 >> 2] | 0) != (i75 | 0)) {
    i80 = 13;
    STACKTOP = i81;
    return i80 | 0;
   }
   HEAP32[i78 >> 2] = i77;
   i80 = 0;
   STACKTOP = i81;
   return i80 | 0;
  }
 case 21:
  {
   if (i62 << 24 >> 24) {
    HEAP32[i78 >> 2] = HEAP32[i63 >> 2];
    i80 = 0;
    STACKTOP = i81;
    return i80 | 0;
   }
   if ((i75 | 0) <= 0) {
    i80 = 3;
    STACKTOP = i81;
    return i80 | 0;
   }
   if ((HEAP32[i74 >> 2] | 0) != (i75 | 0)) {
    i80 = 13;
    STACKTOP = i81;
    return i80 | 0;
   }
   HEAP32[i78 >> 2] = HEAP32[i63 >> 2];
   i80 = 0;
   STACKTOP = i81;
   return i80 | 0;
  }
 case 26:
  {
   HEAP32[i64 >> 2] = i5;
   i80 = 4;
   STACKTOP = i81;
   return i80 | 0;
  }
 case 27:
  {
   if (!(i62 << 24 >> 24)) {
    i80 = 5;
    STACKTOP = i81;
    return i80 | 0;
   }
   HEAP32[i78 >> 2] = HEAP32[i63 >> 2];
   i80 = 0;
   STACKTOP = i81;
   return i80 | 0;
  }
 case 29:
  {
   if (!(i62 << 24 >> 24)) {
    i80 = 6;
    STACKTOP = i81;
    return i80 | 0;
   }
   HEAP32[i78 >> 2] = HEAP32[i63 >> 2];
   i80 = 0;
   STACKTOP = i81;
   return i80 | 0;
  }
 case 46:
  {
   i1 = 1;
   i15 = 159;
   break;
  }
 case 146:
  {
   HEAP8[i10 >> 0] = 0;
   i1 = 1;
   i15 = 159;
   break;
  }
 case 161:
  {
   i80 = i1;
   STACKTOP = i81;
   return i80 | 0;
  }
 case 166:
  {
   FUNCTION_TABLE_vi[HEAP32[i55 + 20 >> 2] & 127](i1);
   i1 = 1;
   i15 = 188;
   break;
  }
 case 172:
  {
   i1 = 1;
   i15 = 188;
   break;
  }
 case 194:
  {
   i15 = 199;
   break;
  }
 case 228:
  {
   i80 = _epilogProcessor(i55, HEAP32[i56 >> 2] | 0, i77, i78) | 0;
   STACKTOP = i81;
   return i80 | 0;
  }
 case 232:
  {
   HEAP32[i64 >> 2] = i1;
   i80 = 7;
   STACKTOP = i81;
   return i80 | 0;
  }
 case 257:
  {
   i80 = _epilogProcessor(i55, HEAP32[i56 >> 2] | 0, i77, i78) | 0;
   STACKTOP = i81;
   return i80 | 0;
  }
 case 291:
  {
   HEAP32[i55 + 280 >> 2] = 80;
   i80 = 0;
   STACKTOP = i81;
   return i80 | 0;
  }
 case 292:
  {
   if (i62 << 24 >> 24) {
    HEAP32[i78 >> 2] = HEAP32[i63 >> 2];
    i80 = 0;
    STACKTOP = i81;
    return i80 | 0;
   }
   i1 = HEAP32[i61 >> 2] | 0;
   do if (!i1) {
    i3 = HEAP32[i69 >> 2] | 0;
    if (i3 | 0) {
     i1 = HEAP32[i63 >> 2] | 0;
     HEAP32[i79 >> 2] = i1;
     if (!(HEAP8[i65 >> 0] | 0)) {
      if ((HEAP32[i67 >> 2] | 0) == (i76 | 0)) i1 = i68; else {
       i1 = HEAP32[i66 >> 2] | 0;
       i2 = i1 + 4 | 0;
      }
      do {
       HEAP32[i80 >> 2] = HEAP32[i70 >> 2];
       FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i79, i77, i80, HEAP32[i72 >> 2] | 0);
       HEAP32[i2 >> 2] = HEAP32[i79 >> 2];
       i68 = HEAP32[i70 >> 2] | 0;
       FUNCTION_TABLE_viii[HEAP32[i69 >> 2] & 31](HEAP32[i73 >> 2] | 0, i68, (HEAP32[i80 >> 2] | 0) - i68 | 0);
       HEAP32[i1 >> 2] = HEAP32[i79 >> 2];
      } while ((HEAP32[i79 >> 2] | 0) != (i77 | 0));
     } else FUNCTION_TABLE_viii[i3 & 31](HEAP32[i73 >> 2] | 0, i1, i77 - i1 | 0);
    }
   } else if (!(HEAP8[i65 >> 0] | 0)) {
    HEAP32[i79 >> 2] = HEAP32[i70 >> 2];
    FUNCTION_TABLE_viiiii[HEAP32[i71 >> 2] & 31](i76, i63, i77, i79, HEAP32[i72 >> 2] | 0);
    i80 = HEAP32[i70 >> 2] | 0;
    FUNCTION_TABLE_viii[HEAP32[i61 >> 2] & 31](HEAP32[i73 >> 2] | 0, i80, (HEAP32[i79 >> 2] | 0) - i80 | 0);
    break;
   } else {
    i80 = HEAP32[i63 >> 2] | 0;
    FUNCTION_TABLE_viii[i1 & 31](HEAP32[i73 >> 2] | 0, i80, i77 - i80 | 0);
    break;
   } while (0);
   if (!i75) {
    HEAP32[i64 >> 2] = i77;
    i80 = 3;
    STACKTOP = i81;
    return i80 | 0;
   }
   if ((HEAP32[i74 >> 2] | 0) == (i75 | 0)) {
    HEAP32[i78 >> 2] = i77;
    i80 = 0;
    STACKTOP = i81;
    return i80 | 0;
   } else {
    HEAP32[i64 >> 2] = i77;
    i80 = 13;
    STACKTOP = i81;
    return i80 | 0;
   }
  }
 case 336:
  {
   HEAP32[i78 >> 2] = HEAP32[i56 >> 2];
   i80 = 0;
   STACKTOP = i81;
   return i80 | 0;
  }
 case 338:
  {
   STACKTOP = i81;
   return i1 | 0;
  }
 }
 if ((i15 | 0) == 159) {
  i80 = i1;
  STACKTOP = i81;
  return i80 | 0;
 } else if ((i15 | 0) == 188) {
  i80 = i1;
  STACKTOP = i81;
  return i80 | 0;
 } else if ((i15 | 0) == 199) {
  HEAP32[i58 >> 2] = 0;
  i1 = 1;
 }
 i80 = i1;
 STACKTOP = i81;
 return i80 | 0;
}

function _pcf_load_font(i19, i23) {
 i19 = i19 | 0;
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0;
 i26 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i21 = i26 + 24 | 0;
 i15 = i26 + 8 | 0;
 i25 = i26;
 i20 = i23 + 100 | 0;
 i24 = HEAP32[i20 >> 2] | 0;
 i1 = i23 + 184 | 0;
 i22 = _FT_Stream_Seek(i19, 0) | 0;
 HEAP32[i21 >> 2] = i22;
 L1 : do if (!i22) {
  i22 = _FT_Stream_ReadFields(i19, 117128, i1) | 0;
  HEAP32[i21 >> 2] = i22;
  if (!i22) if ((HEAP32[i1 >> 2] | 0) == 1885562369) {
   i17 = i23 + 188 | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   if ((i1 + -1 | 0) >>> 0 > 134217726) {
    i1 = 3;
    i22 = 32;
   } else {
    i1 = _ft_mem_realloc(i24, 16, 0, i1, 0, i21) | 0;
    i16 = i23 + 192 | 0;
    HEAP32[i16 >> 2] = i1;
    if (!(HEAP32[i21 >> 2] | 0)) {
     L7 : do if (!(HEAP32[i17 >> 2] | 0)) {
      i3 = 0;
      i22 = 11;
     } else {
      i2 = 0;
      while (1) {
       i22 = _FT_Stream_ReadFields(i19, 117144, i1) | 0;
       HEAP32[i21 >> 2] = i22;
       if (i22 | 0) {
        i22 = 34;
        break L7;
       }
       i2 = i2 + 1 | 0;
       i3 = HEAP32[i17 >> 2] | 0;
       if (i2 >>> 0 >= i3 >>> 0) break; else i1 = i1 + 16 | 0;
      }
      i1 = HEAP32[i16 >> 2] | 0;
      if ((i3 | 0) == 1) {
       i2 = i1;
       i3 = 1;
       i5 = HEAP32[i19 + 4 >> 2] | 0;
       i22 = 28;
      } else i22 = 11;
     } while (0);
     L13 : do if ((i22 | 0) == 11) {
      i12 = i1 + 12 | 0;
      i11 = 0;
      L15 : while (1) {
       i10 = ~i11;
       i11 = i11 + 1 | 0;
       if ((i3 | 0) == (i11 | 0)) {
        i22 = 14;
        break;
       }
       i5 = 0;
       i9 = 0;
       i2 = HEAP32[i12 >> 2] | 0;
       while (1) {
        i8 = i9;
        i9 = i9 + 1 | 0;
        i7 = i1 + (i9 << 4) + 12 | 0;
        i4 = HEAP32[i7 >> 2] | 0;
        i3 = i1 + (i9 << 4) | 0;
        i6 = i1 + (i8 << 4) | 0;
        if (i2 >>> 0 > i4 >>> 0) {
         HEAP32[i15 >> 2] = HEAP32[i6 >> 2];
         HEAP32[i15 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
         HEAP32[i15 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
         HEAP32[i15 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
         HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
         HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
         HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
         HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
         HEAP32[i3 >> 2] = HEAP32[i15 >> 2];
         HEAP32[i3 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
         HEAP32[i3 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
         HEAP32[i3 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
         i5 = 1;
         i4 = HEAP32[i7 >> 2] | 0;
        }
        i2 = HEAP32[i1 + (i8 << 4) + 8 >> 2] | 0;
        if (i4 >>> 0 < i2 >>> 0) {
         i22 = 20;
         break L15;
        }
        if ((HEAP32[i1 + (i8 << 4) + 12 >> 2] | 0) >>> 0 > (i4 - i2 | 0) >>> 0) {
         i22 = 20;
         break L15;
        }
        i3 = HEAP32[i17 >> 2] | 0;
        if (i9 >>> 0 >= (i3 + i10 | 0) >>> 0) break; else i2 = i4;
       }
       if (!((i5 | 0) != 0 & i11 >>> 0 < (i3 + -1 | 0) >>> 0)) {
        i22 = 22;
        break;
       }
      }
      if ((i22 | 0) == 14) {
       i1 = HEAP32[i16 >> 2] | 0;
       i5 = HEAP32[i19 + 4 >> 2] | 0;
      } else if ((i22 | 0) == 20) {
       HEAP32[i21 >> 2] = 9;
       i22 = 34;
       break;
      } else if ((i22 | 0) == 22) {
       i1 = HEAP32[i16 >> 2] | 0;
       i5 = HEAP32[i19 + 4 >> 2] | 0;
       if ((i3 | 0) == 1) {
        i2 = i1;
        i3 = 1;
        i22 = 28;
        break;
       }
      }
      i7 = i3 + -1 | 0;
      i2 = i1;
      i6 = 0;
      while (1) {
       i4 = HEAP32[i2 + 8 >> 2] | 0;
       if (i5 >>> 0 < i4 >>> 0) break;
       if ((HEAP32[i2 + 12 >> 2] | 0) >>> 0 > (i5 - i4 | 0) >>> 0) break;
       i2 = i2 + 16 | 0;
       i6 = i6 + 1 | 0;
       if (i6 >>> 0 >= i7 >>> 0) {
        i22 = 28;
        break L13;
       }
      }
      HEAP32[i21 >> 2] = 8;
      i22 = 34;
     } while (0);
     do if ((i22 | 0) == 28) {
      i4 = HEAP32[i2 + 12 >> 2] | 0;
      if (i5 >>> 0 < i4 >>> 0) {
       HEAP32[i21 >> 2] = 8;
       i22 = 34;
       break;
      }
      i6 = i2 + 8 | 0;
      i2 = i5 - i4 | 0;
      if ((HEAP32[i6 >> 2] | 0) >>> 0 > i2 >>> 0) HEAP32[i6 >> 2] = i2;
      HEAP32[i25 >> 2] = 0;
     } while (0);
     if ((i22 | 0) == 34) {
      _ft_mem_free(i24, HEAP32[i16 >> 2] | 0);
      HEAP32[i16 >> 2] = 0;
      i18 = HEAP32[i21 >> 2] | 0;
      HEAP32[i25 >> 2] = i18;
      if (i18 | 0) break;
      i3 = HEAP32[i17 >> 2] | 0;
      i1 = 0;
     }
     i9 = HEAP32[i20 >> 2] | 0;
     L48 : do if (!i3) {
      i1 = 3;
      i22 = 41;
     } else {
      i2 = 0;
      while (1) {
       if ((HEAP32[i1 + (i2 << 4) >> 2] | 0) == 1) break;
       i2 = i2 + 1 | 0;
       if (i2 >>> 0 >= i3 >>> 0) {
        i1 = 3;
        i22 = 41;
        break L48;
       }
      }
      i3 = HEAP32[i19 + 8 >> 2] | 0;
      i4 = HEAP32[i1 + (i2 << 4) + 12 >> 2] | 0;
      if (i4 >>> 0 < i3 >>> 0) {
       i1 = 83;
       i22 = 41;
      } else if (!(_FT_Stream_Skip(i19, i4 - i3 | 0) | 0)) {
       i4 = HEAP32[i1 + (i2 << 4) + 8 >> 2] | 0;
       HEAP32[i21 >> 2] = 0;
       i1 = _FT_Stream_ReadULongLE(i19, i21) | 0;
       if (i1 >>> 0 < 256 & (HEAP32[i21 >> 2] | 0) == 0) {
        i3 = (i1 & 4 | 0) == 0;
        if (i3) i8 = _FT_Stream_ReadULongLE(i19, i21) | 0; else i8 = _FT_Stream_ReadULong(i19, i21) | 0;
        if (!(HEAP32[i21 >> 2] | 0)) {
         if (i8 >>> 0 > ((i4 >>> 0) / 9 | 0) >>> 0) {
          HEAP32[i21 >> 2] = 8;
          i2 = 0;
          i1 = 0;
          break;
         }
         HEAP32[i23 + 280 >> 2] = i8;
         i1 = _ft_mem_realloc(i9, 12, 0, i8, 0, i21) | 0;
         if (!(HEAP32[i21 >> 2] | 0)) {
          i7 = (i8 | 0) == 0;
          do if (!i7) {
           if (i3) {
            i2 = 0;
            do {
             i18 = _FT_Stream_ReadFields(i19, 117168, i1 + (i2 * 12 | 0) | 0) | 0;
             HEAP32[i21 >> 2] = i18;
             if (i18 | 0) {
              i2 = 0;
              break L48;
             }
             i2 = i2 + 1 | 0;
            } while (i2 >>> 0 < i8 >>> 0);
           } else {
            i2 = 0;
            do {
             i18 = _FT_Stream_ReadFields(i19, 117188, i1 + (i2 * 12 | 0) | 0) | 0;
             HEAP32[i21 >> 2] = i18;
             if (i18 | 0) {
              i2 = 0;
              break L48;
             }
             i2 = i2 + 1 | 0;
            } while (i2 >>> 0 < i8 >>> 0);
           }
           i2 = i8 & 3;
           if (i2 | 0) {
            i18 = _FT_Stream_Skip(i19, 4 - i2 | 0) | 0;
            HEAP32[i21 >> 2] = i18;
            if (!i18) break;
            HEAP32[i21 >> 2] = 83;
            i2 = 0;
            break L48;
           }
          } while (0);
          if (i3) i6 = _FT_Stream_ReadULongLE(i19, i21) | 0; else i6 = _FT_Stream_ReadULong(i19, i21) | 0;
          if (!(HEAP32[i21 >> 2] | 0)) {
           if (i6 >>> 0 > ((Math_imul(i8, -9) | 0) + i4 | 0) >>> 0) {
            HEAP32[i21 >> 2] = 8;
            i2 = 0;
            break;
           }
           i2 = _ft_mem_realloc(i9, 1, 0, i6 + 1 | 0, 0, i21) | 0;
           if (HEAP32[i21 >> 2] | 0) break;
           i18 = _FT_Stream_Read(i19, i2, i6) | 0;
           HEAP32[i21 >> 2] = i18;
           if (i18 | 0) break;
           i5 = _ft_mem_realloc(i9, 12, 0, i8, 0, i21) | 0;
           if (HEAP32[i21 >> 2] | 0) break;
           HEAP32[i23 + 284 >> 2] = i5;
           L89 : do if (!i7) {
            i4 = 0;
            while (1) {
             i3 = HEAP32[i1 + (i4 * 12 | 0) >> 2] | 0;
             if ((i3 | 0) < 0 | i3 >>> 0 > i6 >>> 0) {
              i22 = 70;
              break;
             }
             i18 = _ft_mem_strdup(i9, i2 + i3 | 0, i21) | 0;
             HEAP32[i5 + (i4 * 12 | 0) >> 2] = i18;
             if (HEAP32[i21 >> 2] | 0) break L48;
             i18 = HEAP8[i1 + (i4 * 12 | 0) + 4 >> 0] | 0;
             HEAP8[i5 + (i4 * 12 | 0) + 4 >> 0] = i18;
             i3 = HEAP32[i1 + (i4 * 12 | 0) + 8 >> 2] | 0;
             if (!(i18 << 24 >> 24)) HEAP32[i5 + (i4 * 12 | 0) + 8 >> 2] = i3; else {
              if ((i3 | 0) < 0 | i3 >>> 0 > i6 >>> 0) {
               i22 = 74;
               break;
              }
              i18 = _ft_mem_strdup(i9, i2 + i3 | 0, i21) | 0;
              HEAP32[i5 + (i4 * 12 | 0) + 8 >> 2] = i18;
              if (HEAP32[i21 >> 2] | 0) break L48;
             }
             i4 = i4 + 1 | 0;
             if (i4 >>> 0 >= i8 >>> 0) break L89;
            }
            if ((i22 | 0) == 70) {
             HEAP32[i21 >> 2] = 9;
             break L48;
            } else if ((i22 | 0) == 74) {
             HEAP32[i21 >> 2] = 9;
             break L48;
            }
           } while (0);
           HEAP32[i21 >> 2] = 0;
          } else i2 = 0;
         } else i2 = 0;
        } else {
         i2 = 0;
         i1 = 0;
        }
       } else {
        i2 = 0;
        i1 = 0;
       }
      } else {
       i1 = 83;
       i22 = 41;
      }
     } while (0);
     if ((i22 | 0) == 41) {
      HEAP32[i21 >> 2] = i1;
      i2 = 0;
      i1 = 0;
     }
     _ft_mem_free(i9, i1);
     _ft_mem_free(i9, i2);
     i18 = HEAP32[i21 >> 2] | 0;
     HEAP32[i25 >> 2] = i18;
     if (!i18) {
      i3 = HEAP32[i16 >> 2] | 0;
      i1 = HEAP32[i17 >> 2] | 0;
      L107 : do if (!i1) i22 = 84; else {
       i2 = 0;
       while (1) {
        if ((HEAP32[i3 + (i2 << 4) >> 2] | 0) == 256) break;
        i2 = i2 + 1 | 0;
        if (i2 >>> 0 >= i1 >>> 0) {
         i22 = 84;
         break L107;
        }
       }
       i4 = i15;
       i14 = 1;
       i22 = 86;
      } while (0);
      if ((i22 | 0) == 84) {
       i18 = _pcf_get_accel(i19, i23, 2) | 0;
       HEAP32[i25 >> 2] = i18;
       if (i18 | 0) break;
       i1 = HEAP32[i17 >> 2] | 0;
       if (!i1) {
        i1 = 3;
        i22 = 91;
       } else {
        i3 = HEAP32[i16 >> 2] | 0;
        i4 = i15;
        i14 = 0;
        i22 = 86;
       }
      }
      L115 : do if ((i22 | 0) == 86) {
       i11 = HEAP32[i20 >> 2] | 0;
       i2 = 0;
       while (1) {
        if ((HEAP32[i3 + (i2 << 4) >> 2] | 0) == 4) break;
        i2 = i2 + 1 | 0;
        if (i2 >>> 0 >= i1 >>> 0) {
         i1 = 3;
         i22 = 91;
         break L115;
        }
       }
       i13 = i19 + 8 | 0;
       i1 = HEAP32[i13 >> 2] | 0;
       i4 = HEAP32[i3 + (i2 << 4) + 12 >> 2] | 0;
       if (i4 >>> 0 < i1 >>> 0) {
        i1 = 83;
        i22 = 91;
       } else if (!(_FT_Stream_Skip(i19, i4 - i1 | 0) | 0)) {
        i3 = HEAP32[i3 + (i2 << 4) + 8 >> 2] | 0;
        HEAP32[i15 >> 2] = 0;
        i2 = _FT_Stream_ReadULongLE(i19, i15) | 0;
        i1 = HEAP32[i15 >> 2] | 0;
        if (!i1) {
         switch (i2 & -256 | 0) {
         case 256:
         case 0:
          break;
         default:
          {
           i1 = 3;
           break L115;
          }
         }
         i4 = i2 >>> 0 < 256;
         i1 = (i2 & 4 | 0) != 0;
         do if (i4) if (i1) {
          i10 = _FT_Stream_ReadULong(i19, i15) | 0;
          break;
         } else {
          i10 = _FT_Stream_ReadULongLE(i19, i15) | 0;
          break;
         } else if (i1) {
          i10 = (_FT_Stream_ReadUShort(i19, i15) | 0) & 65535;
          break;
         } else {
          i10 = (_FT_Stream_ReadUShortLE(i19, i15) | 0) & 65535;
          break;
         } while (0);
         if (!(HEAP32[i15 >> 2] | 0)) {
          i18 = i23 + 288 | 0;
          HEAP32[i18 >> 2] = i10;
          if (!i10) i1 = 8; else {
           if (i4) {
            if (i10 >>> 0 > ((i3 >>> 0) / 12 | 0) >>> 0) {
             i1 = 8;
             break;
            }
           } else if (i10 >>> 0 > ((i3 >>> 0) / 5 | 0) >>> 0) {
            i1 = 8;
            break;
           }
           i2 = _ft_mem_realloc(i11, 16, 0, i10, 0, i15) | 0;
           i12 = i23 + 292 | 0;
           HEAP32[i12 >> 2] = i2;
           if (!(HEAP32[i15 >> 2] | 0)) {
            i5 = i1 ? 117208 : 117240;
            i6 = i21 + 1 | 0;
            i7 = i21 + 2 | 0;
            i8 = i21 + 3 | 0;
            i9 = i21 + 4 | 0;
            L142 : do if (i4) {
             i3 = 0;
             while (1) {
              i9 = _FT_Stream_ReadFields(i19, i5, i2) | 0;
              HEAP32[i15 >> 2] = i9;
              HEAP32[i2 + 12 >> 2] = 0;
              if (i9 | 0) {
               i22 = 122;
               break L142;
              }
              if ((HEAP16[i2 + 2 >> 1] | 0) < (HEAP16[i2 >> 1] | 0)) {
               i1 = i2 + 8 | 0;
               i22 = 112;
              } else {
               i1 = i2 + 8 | 0;
               if (((HEAP16[i1 >> 1] | 0) + (HEAP16[i2 + 6 >> 1] | 0) | 0) < 0) i22 = 112;
              }
              if ((i22 | 0) == 112) {
               i22 = 0;
               i9 = i2;
               HEAP32[i9 >> 2] = 0;
               HEAP32[i9 + 4 >> 2] = 0;
               HEAP16[i1 >> 1] = 0;
              }
              i3 = i3 + 1 | 0;
              if (i3 >>> 0 >= i10 >>> 0) {
               i22 = 121;
               break;
              } else i2 = i2 + 16 | 0;
             }
            } else {
             i4 = 0;
             while (1) {
              i1 = _FT_Stream_ReadFields(i19, 117272, i21) | 0;
              if (i1 | 0) break;
              HEAP16[i2 >> 1] = (HEAPU8[i21 >> 0] | 0) + 65408;
              i5 = i2 + 2 | 0;
              HEAP16[i5 >> 1] = (HEAPU8[i6 >> 0] | 0) + 65408;
              HEAP16[i2 + 4 >> 1] = (HEAPU8[i7 >> 0] | 0) + 65408;
              i1 = (HEAPU8[i8 >> 0] | 0) + 65408 | 0;
              HEAP16[i2 + 6 >> 1] = i1;
              i3 = (HEAPU8[i9 >> 0] | 0) + 65408 | 0;
              HEAP16[i2 + 8 >> 1] = i3;
              HEAP16[i2 + 10 >> 1] = 0;
              HEAP32[i15 >> 2] = 0;
              HEAP32[i2 + 12 >> 2] = 0;
              if ((HEAP16[i5 >> 1] | 0) < (HEAP16[i2 >> 1] | 0)) i22 = 118; else if (((i3 << 16 >> 16) + (i1 << 16 >> 16) | 0) < 0) i22 = 118;
              if ((i22 | 0) == 118) {
               i22 = 0;
               HEAP32[i2 >> 2] = 0;
               HEAP32[i2 + 4 >> 2] = 0;
               HEAP16[i2 + 8 >> 1] = 0;
              }
              i4 = i4 + 1 | 0;
              if (i4 >>> 0 >= i10 >>> 0) {
               i22 = 121;
               break L142;
              } else i2 = i2 + 16 | 0;
             }
             HEAP32[i15 >> 2] = i1;
             HEAP32[i2 + 12 >> 2] = 0;
             i22 = 122;
            } while (0);
            if ((i22 | 0) == 121) HEAP32[i25 >> 2] = 0; else if ((i22 | 0) == 122) {
             _ft_mem_free(i11, HEAP32[i12 >> 2] | 0);
             HEAP32[i12 >> 2] = 0;
             i15 = HEAP32[i15 >> 2] | 0;
             HEAP32[i25 >> 2] = i15;
             if (i15 | 0) break L1;
            }
            i8 = HEAP32[i20 >> 2] | 0;
            i4 = HEAP32[i16 >> 2] | 0;
            i2 = HEAP32[i17 >> 2] | 0;
            L165 : do if (!i2) {
             i1 = 3;
             i22 = 128;
            } else {
             i1 = 0;
             while (1) {
              if ((HEAP32[i4 + (i1 << 4) >> 2] | 0) == 8) break;
              i1 = i1 + 1 | 0;
              if (i1 >>> 0 >= i2 >>> 0) {
               i1 = 3;
               i22 = 128;
               break L165;
              }
             }
             i2 = HEAP32[i13 >> 2] | 0;
             i3 = HEAP32[i4 + (i1 << 4) + 12 >> 2] | 0;
             if (i3 >>> 0 < i2 >>> 0) {
              i1 = 83;
              i22 = 128;
              break;
             }
             if (_FT_Stream_Skip(i19, i3 - i2 | 0) | 0) {
              i1 = 83;
              i22 = 128;
              break;
             }
             i7 = HEAP32[i4 + (i1 << 4) + 8 >> 2] | 0;
             i1 = _FT_Stream_EnterFrame(i19, 8) | 0;
             HEAP32[i21 >> 2] = i1;
             if (i1 | 0) break;
             i5 = _FT_Stream_GetULongLE(i19) | 0;
             i3 = (i5 & 4 | 0) == 0;
             if (i3) i4 = _FT_Stream_GetULongLE(i19) | 0; else i4 = _FT_Stream_GetULong(i19) | 0;
             _FT_Stream_ExitFrame(i19);
             if (i5 >>> 0 >= 256) {
              i1 = 3;
              break;
             }
             if ((i4 | 0) != (HEAP32[i18 >> 2] | 0)) {
              i1 = 3;
              break;
             }
             i6 = _ft_mem_realloc(i8, 4, 0, i4, 0, i21) | 0;
             i1 = HEAP32[i21 >> 2] | 0;
             if (i1 | 0) break;
             i2 = (i4 | 0) == 0;
             if (!i2) if (i3) {
              i1 = 0;
              do {
               i15 = _FT_Stream_ReadULongLE(i19, i21) | 0;
               HEAP32[i6 + (i1 << 2) >> 2] = i15;
               i1 = i1 + 1 | 0;
              } while ((i1 | 0) != (i4 | 0));
             } else {
              i1 = 0;
              do {
               i15 = _FT_Stream_ReadULong(i19, i21) | 0;
               HEAP32[i6 + (i1 << 2) >> 2] = i15;
               i1 = i1 + 1 | 0;
              } while ((i1 | 0) != (i4 | 0));
             }
             do if (!(HEAP32[i21 >> 2] | 0)) {
              if (i3) {
               _FT_Stream_ReadULongLE(i19, i21) | 0;
               if (HEAP32[i21 >> 2] | 0) break;
               _FT_Stream_ReadULongLE(i19, i21) | 0;
               if (HEAP32[i21 >> 2] | 0) break;
               _FT_Stream_ReadULongLE(i19, i21) | 0;
               if (HEAP32[i21 >> 2] | 0) break;
               _FT_Stream_ReadULongLE(i19, i21) | 0;
               if (HEAP32[i21 >> 2] | 0) break;
              } else {
               _FT_Stream_ReadULong(i19, i21) | 0;
               if (HEAP32[i21 >> 2] | 0) break;
               _FT_Stream_ReadULong(i19, i21) | 0;
               if (HEAP32[i21 >> 2] | 0) break;
               _FT_Stream_ReadULong(i19, i21) | 0;
               if (HEAP32[i21 >> 2] | 0) break;
               _FT_Stream_ReadULong(i19, i21) | 0;
               if (HEAP32[i21 >> 2] | 0) break;
              }
              if (!i2) {
               i1 = 0;
               do {
                i2 = HEAP32[i6 + (i1 << 2) >> 2] | 0;
                if (!((i2 | 0) < 0 | i2 >>> 0 > i7 >>> 0)) HEAP32[(HEAP32[i12 >> 2] | 0) + (i1 << 4) + 12 >> 2] = (HEAP32[i13 >> 2] | 0) + i2;
                i1 = i1 + 1 | 0;
               } while ((i1 | 0) != (i4 | 0));
              }
              HEAP32[i23 + 308 >> 2] = i5;
             } while (0);
             _ft_mem_free(i8, i6);
             i15 = HEAP32[i21 >> 2] | 0;
             HEAP32[i25 >> 2] = i15;
             if (i15 | 0) break L1;
             i11 = HEAP32[i20 >> 2] | 0;
             i3 = HEAP32[i16 >> 2] | 0;
             i2 = HEAP32[i17 >> 2] | 0;
             L209 : do if (!i2) {
              i1 = 3;
              i22 = 162;
             } else {
              i1 = 0;
              while (1) {
               if ((HEAP32[i3 + (i1 << 4) >> 2] | 0) == 32) break;
               i1 = i1 + 1 | 0;
               if (i1 >>> 0 >= i2 >>> 0) {
                i1 = 3;
                i22 = 162;
                break L209;
               }
              }
              i2 = HEAP32[i13 >> 2] | 0;
              i1 = HEAP32[i3 + (i1 << 4) + 12 >> 2] | 0;
              if (i1 >>> 0 < i2 >>> 0) {
               i1 = 83;
               i22 = 162;
               break;
              }
              if (_FT_Stream_Skip(i19, i1 - i2 | 0) | 0) {
               i1 = 83;
               i22 = 162;
               break;
              }
              i1 = _FT_Stream_EnterFrame(i19, 14) | 0;
              HEAP32[i21 >> 2] = i1;
              if (i1 | 0) break;
              i2 = _FT_Stream_GetULongLE(i19) | 0;
              i3 = (i2 & 4 | 0) == 0;
              if (i3) {
               i10 = (_FT_Stream_GetUShortLE(i19) | 0) << 16 >> 16;
               i9 = (_FT_Stream_GetUShortLE(i19) | 0) << 16 >> 16;
               i4 = (_FT_Stream_GetUShortLE(i19) | 0) << 16 >> 16;
               i8 = (_FT_Stream_GetUShortLE(i19) | 0) << 16 >> 16;
               i1 = _FT_Stream_GetUShortLE(i19) | 0;
              } else {
               i10 = (_FT_Stream_GetUShort(i19) | 0) << 16 >> 16;
               i9 = (_FT_Stream_GetUShort(i19) | 0) << 16 >> 16;
               i4 = (_FT_Stream_GetUShort(i19) | 0) << 16 >> 16;
               i8 = (_FT_Stream_GetUShort(i19) | 0) << 16 >> 16;
               i1 = _FT_Stream_GetUShort(i19) | 0;
              }
              HEAP16[i23 + 304 >> 1] = i1;
              _FT_Stream_ExitFrame(i19);
              if (i2 >>> 0 >= 256) {
               i1 = 3;
               break;
              }
              if ((i10 | 0) < 0) {
               i1 = 8;
               break;
              }
              if ((i9 | 0) < (i10 | 0) | (i9 | 0) > 255 | (i4 | 0) < 0) {
               i1 = 8;
               break;
              }
              if ((i8 | 0) < (i4 | 0) | (i8 | 0) > 255) {
               i1 = 8;
               break;
              }
              i7 = Math_imul(1 - i4 + i8 | 0, 1 - i10 + i9 | 0) | 0;
              i1 = _ft_mem_realloc(i11, 8, 0, i7, 0, i21) | 0;
              if (HEAP32[i21 >> 2] | 0) {
               i1 = 64;
               break;
              }
              i17 = _FT_Stream_EnterFrame(i19, i7 << 1) | 0;
              HEAP32[i21 >> 2] = i17;
              do if (!i17) {
               if (i3) {
                i2 = 0;
                while (1) {
                 i6 = i4 << 8;
                 i5 = i10;
                 while (1) {
                  i3 = _FT_Stream_GetUShortLE(i19) | 0;
                  if (i3 << 16 >> 16 > -1) {
                   HEAP32[i1 + (i2 << 3) >> 2] = i5 + i6;
                   HEAP16[i1 + (i2 << 3) + 4 >> 1] = i3;
                   i2 = i2 + 1 | 0;
                  }
                  if ((i5 | 0) < (i9 | 0)) i5 = i5 + 1 | 0; else break;
                 }
                 if ((i4 | 0) < (i8 | 0)) i4 = i4 + 1 | 0; else break;
                }
               } else {
                i2 = 0;
                while (1) {
                 i6 = i4 << 8;
                 i5 = i10;
                 while (1) {
                  i3 = _FT_Stream_GetUShort(i19) | 0;
                  if (i3 << 16 >> 16 > -1) {
                   HEAP32[i1 + (i2 << 3) >> 2] = i5 + i6;
                   HEAP16[i1 + (i2 << 3) + 4 >> 1] = i3;
                   i2 = i2 + 1 | 0;
                  }
                  if ((i5 | 0) < (i9 | 0)) i5 = i5 + 1 | 0; else break;
                 }
                 if ((i4 | 0) < (i8 | 0)) i4 = i4 + 1 | 0; else break;
                }
               }
               _FT_Stream_ExitFrame(i19);
               i1 = _ft_mem_realloc(i11, 8, i7, i2, i1, i21) | 0;
               if (HEAP32[i21 >> 2] | 0) {
                i22 = 187;
                break;
               }
               HEAP32[i23 + 296 >> 2] = i2;
               HEAP32[i23 + 300 >> 2] = i1;
               HEAP32[i25 >> 2] = 0;
              } else i22 = 187; while (0);
              if ((i22 | 0) == 187) {
               _ft_mem_free(i11, i1);
               i17 = HEAP32[i21 >> 2] | 0;
               HEAP32[i25 >> 2] = i17;
               if (i17 | 0) break L1;
              }
              if (i14) {
               i19 = _pcf_get_accel(i19, i23, 256) | 0;
               HEAP32[i25 >> 2] = i19;
               if (i19 | 0) break L1;
              }
              HEAP32[i23 >> 2] = 1;
              HEAP32[i23 + 4 >> 2] = 0;
              i1 = i23 + 8 | 0;
              i2 = HEAP32[i1 >> 2] | 0;
              HEAP32[i1 >> 2] = i2 | 146;
              if (HEAP8[i23 + 199 >> 0] | 0) HEAP32[i1 >> 2] = i2 | 150;
              HEAP32[i21 >> 2] = 0;
              i14 = HEAP32[i20 >> 2] | 0;
              i5 = i23 + 12 | 0;
              HEAP32[i5 >> 2] = 0;
              i15 = i23 + 284 | 0;
              i7 = HEAP32[i15 >> 2] | 0;
              i16 = i23 + 280 | 0;
              i8 = HEAP32[i16 >> 2] | 0;
              if ((i8 | 0) < 1) {
               i5 = 0;
               i1 = 0;
               i2 = 0;
               i3 = 0;
               i9 = 0;
               i6 = 0;
               i8 = 0;
               i7 = 1;
               i22 = 218;
              } else {
               i1 = 0;
               do {
                i2 = (_strcmp(HEAP32[i7 + (i1 * 12 | 0) >> 2] | 0, 281574) | 0) == 0;
                i1 = i1 + 1 | 0;
               } while (!((i1 | 0) >= (i8 | 0) | i2));
               i1 = i7 + (i1 * 12 | 0) + -12 | 0;
               L260 : do if (i2) {
                if (!(HEAP8[i1 + 4 >> 0] | 0)) {
                 i3 = 0;
                 i4 = 2;
                 break;
                }
                i1 = HEAP32[i1 + 8 >> 2] | 0;
                switch (HEAP8[i1 >> 0] | 0) {
                case 105:
                case 73:
                case 111:
                case 79:
                 break;
                default:
                 {
                  i3 = 0;
                  i4 = 2;
                  break L260;
                 }
                }
                HEAP32[i5 >> 2] = 1;
                i3 = (HEAP8[i1 >> 0] | 32) << 24 >> 24 == 111 ? 281580 : 355515;
                i4 = 3;
               } else {
                i3 = 0;
                i4 = 2;
               } while (0);
               i1 = 0;
               do {
                i2 = (_strcmp(HEAP32[i7 + (i1 * 12 | 0) >> 2] | 0, 281588) | 0) == 0;
                i1 = i1 + 1 | 0;
               } while (!((i1 | 0) >= (i8 | 0) | i2));
               i1 = i7 + (i1 * 12 | 0) + -12 | 0;
               L268 : do if (i2) {
                if (!(HEAP8[i1 + 4 >> 0] | 0)) {
                 i6 = 0;
                 break;
                }
                switch (HEAP8[HEAP32[i1 + 8 >> 2] >> 0] | 0) {
                case 98:
                case 66:
                 break;
                default:
                 {
                  i6 = 0;
                  break L268;
                 }
                }
                HEAP32[i5 >> 2] = i4;
                i6 = 355510;
               } else i6 = 0; while (0);
               i1 = 0;
               do {
                i2 = (_strcmp(HEAP32[i7 + (i1 * 12 | 0) >> 2] | 0, 350221) | 0) == 0;
                i1 = i1 + 1 | 0;
               } while (!((i1 | 0) >= (i8 | 0) | i2));
               i1 = i7 + (i1 * 12 | 0) + -12 | 0;
               L276 : do if (i2) {
                if (!(HEAP8[i1 + 4 >> 0] | 0)) {
                 i1 = 0;
                 break;
                }
                i1 = HEAP32[i1 + 8 >> 2] | 0;
                switch (HEAP8[i1 >> 0] | 0) {
                case 110:
                case 78:
                case 0:
                 {
                  i1 = 0;
                  break L276;
                 }
                default:
                 {}
                }
               } else i1 = 0; while (0);
               i2 = 0;
               do {
                i4 = (_strcmp(HEAP32[i7 + (i2 * 12 | 0) >> 2] | 0, 281600) | 0) == 0;
                i2 = i2 + 1 | 0;
               } while (!((i2 | 0) >= (i8 | 0) | i4));
               i2 = i7 + (i2 * 12 | 0) + -12 | 0;
               L284 : do if (i4) {
                if (!(HEAP8[i2 + 4 >> 0] | 0)) {
                 i4 = 0;
                 i10 = 0;
                 i11 = 0;
                 break;
                }
                i2 = HEAP32[i2 + 8 >> 2] | 0;
                switch (HEAP8[i2 >> 0] | 0) {
                case 110:
                case 78:
                case 0:
                 {
                  i4 = 0;
                  i10 = 0;
                  i11 = 0;
                  break L284;
                 }
                default:
                 {}
                }
                if (!i2) {
                 i4 = 0;
                 i10 = 0;
                 i11 = 0;
                 break;
                }
                i11 = _strlen(i2) | 0;
                i4 = i11 + 1 | 0;
                i10 = i2;
               } else {
                i4 = 0;
                i10 = 0;
                i11 = 0;
               } while (0);
               if (!i6) {
                i7 = 1;
                i6 = 0;
                i9 = 0;
               } else {
                i9 = _strlen(i6) | 0;
                i4 = i4 + 1 + i9 | 0;
                i7 = 0;
               }
               if (!i3) {
                i5 = 0;
                i8 = 0;
               } else {
                i5 = _strlen(i3) | 0;
                i4 = i4 + 1 + i5 | 0;
                i8 = i3;
               }
               if (!i1) i2 = 0; else {
                i2 = _strlen(i1) | 0;
                i4 = i4 + 1 + i2 | 0;
               }
               if (!i4) i22 = 218; else {
                i12 = i5;
                i13 = i1;
                i5 = i10;
               }
              }
              if ((i22 | 0) == 218) {
               i4 = 8;
               i12 = i5;
               i13 = i1;
               i5 = 281615;
               i11 = 7;
              }
              i1 = _ft_mem_alloc(i14, i4, i21) | 0;
              i10 = i23 + 24 | 0;
              HEAP32[i10 >> 2] = i1;
              i4 = HEAP32[i21 >> 2] | 0;
              if (i4 | 0) {
               HEAP32[i25 >> 2] = i4;
               break L1;
              }
              if (i5) {
               _memcpy(i1 | 0, i5 | 0, i11 | 0) | 0;
               if (i11 | 0) {
                i4 = 0;
                do {
                 i5 = i1 + i4 | 0;
                 if ((HEAP8[i5 >> 0] | 0) == 32) HEAP8[i5 >> 0] = 45;
                 i4 = i4 + 1 | 0;
                } while ((i4 | 0) != (i11 | 0));
               }
               i1 = i1 + i11 | 0;
              }
              if (i7) i3 = i8; else {
               if ((i1 | 0) != (HEAP32[i10 >> 2] | 0)) {
                HEAP8[i1 >> 0] = 32;
                i1 = i1 + 1 | 0;
               }
               _memcpy(i1 | 0, i6 | 0, i9 | 0) | 0;
               i1 = i1 + i9 | 0;
              }
              if (i3) {
               if ((i1 | 0) != (HEAP32[i10 >> 2] | 0)) {
                HEAP8[i1 >> 0] = 32;
                i1 = i1 + 1 | 0;
               }
               _memcpy(i1 | 0, i3 | 0, i12 | 0) | 0;
               i1 = i1 + i12 | 0;
              }
              if (i13) {
               if ((i1 | 0) != (HEAP32[i10 >> 2] | 0)) {
                HEAP8[i1 >> 0] = 32;
                i1 = i1 + 1 | 0;
               }
               _memcpy(i1 | 0, i13 | 0, i2 | 0) | 0;
               if (!i2) i2 = 0; else {
                i3 = 0;
                do {
                 i4 = i1 + i3 | 0;
                 if ((HEAP8[i4 >> 0] | 0) == 32) HEAP8[i4 >> 0] = 45;
                 i3 = i3 + 1 | 0;
                } while ((i3 | 0) != (i2 | 0));
               }
               i1 = i1 + i2 | 0;
              }
              HEAP8[i1 >> 0] = 0;
              i21 = HEAP32[i21 >> 2] | 0;
              HEAP32[i25 >> 2] = i21;
              if (i21 | 0) break L1;
              i2 = HEAP32[i15 >> 2] | 0;
              i3 = HEAP32[i16 >> 2] | 0;
              do if ((i3 | 0) < 1) i22 = 255; else {
               i1 = 0;
               do {
                i4 = (_strcmp(HEAP32[i2 + (i1 * 12 | 0) >> 2] | 0, 281562) | 0) == 0;
                i1 = i1 + 1 | 0;
               } while (!((i1 | 0) >= (i3 | 0) | i4));
               i1 = i2 + (i1 * 12 | 0) + -12 | 0;
               if (!i4) {
                i22 = 255;
                break;
               }
               if (!(HEAP8[i1 + 4 >> 0] | 0)) {
                i22 = 255;
                break;
               }
               i21 = _ft_mem_strdup(i24, HEAP32[i1 + 8 >> 2] | 0, i25) | 0;
               HEAP32[i23 + 20 >> 2] = i21;
               if (HEAP32[i25 >> 2] | 0) break L1;
              } while (0);
              if ((i22 | 0) == 255) HEAP32[i23 + 20 >> 2] = 0;
              HEAP32[i23 + 16 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
              HEAP32[i23 + 28 >> 2] = 1;
              i7 = _ft_mem_realloc(i24, 16, 0, 1, 0, i25) | 0;
              HEAP32[i23 + 32 >> 2] = i7;
              if (HEAP32[i25 >> 2] | 0) break L1;
              HEAP32[i7 >> 2] = 0;
              HEAP32[i7 + 4 >> 2] = 0;
              HEAP32[i7 + 8 >> 2] = 0;
              HEAP32[i7 + 12 >> 2] = 0;
              i3 = (HEAP32[i23 + 208 >> 2] | 0) + (HEAP32[i23 + 204 >> 2] | 0) | 0;
              HEAP16[i7 >> 1] = i3;
              i9 = HEAP32[i15 >> 2] | 0;
              i8 = HEAP32[i16 >> 2] | 0;
              i6 = (i8 | 0) < 1;
              do if (i6) i22 = 261; else {
               i1 = 0;
               do {
                i2 = (_strcmp(HEAP32[i9 + (i1 * 12 | 0) >> 2] | 0, 281623) | 0) == 0;
                i1 = i1 + 1 | 0;
               } while (!((i1 | 0) >= (i8 | 0) | i2));
               if (!i2) {
                i22 = 261;
                break;
               }
               i1 = ((HEAP32[i9 + (i1 * 12 | 0) + -12 + 8 >> 2] | 0) + 5 | 0) / 10 | 0;
              } while (0);
              if ((i22 | 0) == 261) i1 = (i3 << 16 >> 15 | 0) / 3 | 0;
              HEAP16[i7 + 2 >> 1] = i1;
              if (i6) {
               HEAP32[i7 + 12 >> 2] = 0;
               HEAP32[i7 + 8 >> 2] = 0;
               i25 = 0;
               STACKTOP = i26;
               return i25 | 0;
              } else i1 = 0;
              do {
               i2 = (_strcmp(HEAP32[i9 + (i1 * 12 | 0) >> 2] | 0, 281637) | 0) == 0;
               i1 = i1 + 1 | 0;
              } while (!((i1 | 0) >= (i8 | 0) | i2));
              if (i2) {
               i1 = (((HEAP32[i9 + (i1 * 12 | 0) + -12 + 8 >> 2] | 0) * 460800 | 0) + 36135 | 0) / 72270 | 0;
               HEAP32[i7 + 4 >> 2] = i1;
              } else i1 = 0;
              i2 = 0;
              do {
               i3 = (_strcmp(HEAP32[i9 + (i2 * 12 | 0) >> 2] | 0, 350468) | 0) == 0;
               i2 = i2 + 1 | 0;
              } while (!((i2 | 0) >= (i8 | 0) | i3));
              if (i3) {
               i5 = HEAP32[i9 + (i2 * 12 | 0) + -12 + 8 >> 2] << 16 >> 10;
               HEAP32[i7 + 12 >> 2] = i5;
              } else i5 = 0;
              i2 = 0;
              do {
               i3 = (_strcmp(HEAP32[i9 + (i2 * 12 | 0) >> 2] | 0, 281648) | 0) == 0;
               i2 = i2 + 1 | 0;
              } while (!((i2 | 0) >= (i8 | 0) | i3));
              if (i3) i4 = HEAP32[i9 + (i2 * 12 | 0) + -12 + 8 >> 2] << 16 >> 16; else i4 = 0;
              i2 = 0;
              do {
               i3 = (_strcmp(HEAP32[i9 + (i2 * 12 | 0) >> 2] | 0, 281661) | 0) == 0;
               i2 = i2 + 1 | 0;
              } while (!((i2 | 0) >= (i8 | 0) | i3));
              if (i3) i3 = HEAP32[i9 + (i2 * 12 | 0) + -12 + 8 >> 2] & 65535; else i3 = 0;
              i2 = i7 + 12 | 0;
              do if (!i5) {
               HEAP32[i2 >> 2] = i1;
               if (!(i3 << 16 >> 16)) break;
               i1 = (Math_imul(i1, i3 << 16 >> 16) | 0) / 72 | 0;
               HEAP32[i2 >> 2] = i1;
               i22 = 282;
              } else {
               i1 = i5;
               i22 = 282;
              } while (0);
              do if ((i22 | 0) == 282) {
               if ((i4 | 0) == 0 | i3 << 16 >> 16 == 0) break;
               i1 = (Math_imul(i1, i4) | 0) / (i3 << 16 >> 16 | 0) | 0;
              } while (0);
              HEAP32[i7 + 8 >> 2] = i1;
              if (i6) {
               i25 = 0;
               STACKTOP = i26;
               return i25 | 0;
              } else i1 = 0;
              do {
               i2 = (_strcmp(HEAP32[i9 + (i1 * 12 | 0) >> 2] | 0, 283096) | 0) == 0;
               i1 = i1 + 1 | 0;
              } while (!((i1 | 0) >= (i8 | 0) | i2));
              i2 = i2 ? i9 + (i1 * 12 | 0) + -12 | 0 : 0;
              i1 = 0;
              do {
               i3 = (_strcmp(HEAP32[i9 + (i1 * 12 | 0) >> 2] | 0, 283113) | 0) == 0;
               i1 = i1 + 1 | 0;
              } while (!((i1 | 0) >= (i8 | 0) | i3));
              i1 = i3 ? i9 + (i1 * 12 | 0) + -12 | 0 : 0;
              if (!i2) {
               i25 = 0;
               STACKTOP = i26;
               return i25 | 0;
              }
              if (!(i3 & (HEAP8[i2 + 4 >> 0] | 0) != 0)) {
               i25 = 0;
               STACKTOP = i26;
               return i25 | 0;
              }
              if (!(HEAP8[i1 + 4 >> 0] | 0)) {
               i25 = 0;
               STACKTOP = i26;
               return i25 | 0;
              }
              i21 = _ft_mem_strdup(i24, HEAP32[i1 + 8 >> 2] | 0, i25) | 0;
              HEAP32[i23 + 176 >> 2] = i21;
              if (HEAP32[i25 >> 2] | 0) break L1;
              i24 = _ft_mem_strdup(i24, HEAP32[i2 + 8 >> 2] | 0, i25) | 0;
              HEAP32[i23 + 180 >> 2] = i24;
              if (!(HEAP32[i25 >> 2] | 0)) i1 = 0; else break L1;
              STACKTOP = i26;
              return i1 | 0;
             } while (0);
             if ((i22 | 0) == 162) HEAP32[i21 >> 2] = i1;
             HEAP32[i25 >> 2] = i1;
             break L1;
            } while (0);
            if ((i22 | 0) == 128) HEAP32[i21 >> 2] = i1;
            HEAP32[i25 >> 2] = i1;
            break L1;
           } else i1 = 64;
          }
         } else i1 = 3;
        }
       } else {
        i1 = 83;
        i22 = 91;
       }
      } while (0);
      if ((i22 | 0) == 91) HEAP32[i15 >> 2] = i1;
      HEAP32[i25 >> 2] = i1;
     }
    } else {
     i1 = 64;
     i22 = 32;
    }
   }
  } else {
   i1 = 3;
   i22 = 32;
  } else {
   i1 = 1;
   i22 = 32;
  }
 } else {
  i1 = 1;
  i22 = 32;
 } while (0);
 if ((i22 | 0) == 32) HEAP32[i25 >> 2] = i1;
 HEAP32[i25 >> 2] = 3;
 i25 = 3;
 STACKTOP = i26;
 return i25 | 0;
}

function _t1_decoder_parse_charstrings(i39, i1, i5) {
 i39 = i39 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i40 = 0, i41 = 0, i42 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i41 = i42 + 4 | 0;
 i4 = i42;
 i35 = i42 + 8 | 0;
 HEAP32[i41 >> 2] = i39;
 HEAP32[i4 >> 2] = i1;
 i6 = i4 ^ i41 ^ i35;
 i6 = (i6 >>> 10 ^ i6 ^ i6 >> 20) & 65535;
 HEAP32[i35 >> 2] = (i6 | 0) == 0 ? 29572 : i6;
 HEAP32[i39 + 1136 >> 2] = i39 + 112;
 i6 = i39 + 1140 | 0;
 HEAP32[i39 + 1344 >> 2] = i6;
 i34 = i39 + 64 | 0;
 HEAP32[i34 >> 2] = 0;
 i40 = HEAP32[i39 + 72 >> 2] | 0;
 i2 = HEAP32[i39 + 1488 >> 2] | 0;
 if (i2) {
  i3 = HEAP32[i39 + 1492 >> 2] | 0;
  if (i3) {
   _memset(i2 | 0, 0, i3 << 2 | 0) | 0;
   i1 = HEAP32[i4 >> 2] | 0;
  }
 }
 HEAP32[i39 + 1144 >> 2] = i1;
 i2 = i1 + i5 | 0;
 HEAP32[i39 + 1148 >> 2] = i2;
 HEAP32[i6 >> 2] = i1;
 i32 = i39 + 24 | 0;
 i4 = HEAP32[i32 >> 2] | 0;
 i33 = i39 + 28 | 0;
 i3 = HEAP32[i33 >> 2] | 0;
 i37 = (i40 | 0) != 0;
 if (i37) FUNCTION_TABLE_vi[HEAP32[i40 + 4 >> 2] & 127](HEAP32[i40 >> 2] | 0);
 if ((i5 | 0) <= 0) {
  i41 = 0;
  STACKTOP = i42;
  return i41 | 0;
 }
 i38 = i39 + 12 | 0;
 i36 = i39 + 20 | 0;
 i23 = i39 + 68 | 0;
 i24 = i40 + 20 | 0;
 i25 = i39 + 32 | 0;
 i26 = i39 + 40 | 0;
 i27 = i39 + 44 | 0;
 i28 = i39 + 70 | 0;
 i29 = i39 + 36 | 0;
 i30 = i40 + 12 | 0;
 i31 = i40 + 16 | 0;
 i18 = i4;
 i19 = i3;
 i22 = i4;
 i3 = 0;
 i4 = 0;
 i5 = 0;
 L11 : while (1) {
  while (1) {
   i16 = HEAP32[i41 >> 2] | 0;
   i13 = i16 + 1136 | 0;
   i14 = i16 + 112 | 0;
   i15 = HEAP32[i13 >> 2] | 0;
   while (1) {
    i11 = i1 + 1 | 0;
    i9 = HEAP8[i1 >> 0] | 0;
    L17 : do switch (i9 << 24 >> 24) {
    case 1:
     {
      i12 = 16;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 3:
     {
      i12 = 18;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 4:
     {
      i12 = 14;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 5:
     {
      i12 = 9;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 6:
     {
      i12 = 6;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 7:
     {
      i12 = 13;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 8:
     {
      i12 = 11;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 9:
     {
      i12 = 5;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 10:
     {
      i12 = 22;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 11:
     {
      i12 = 24;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 13:
     {
      i12 = 2;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 14:
     {
      i12 = 1;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 15:
     {
      i12 = 26;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 21:
     {
      i12 = 10;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 22:
     {
      i12 = 7;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 30:
     {
      i12 = 12;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 31:
     {
      i12 = 8;
      i10 = i5;
      i9 = 0;
      i20 = i11;
      break;
     }
    case 12:
     {
      if (i11 >>> 0 > i2 >>> 0) {
       i1 = 160;
       i21 = 259;
       break L11;
      }
      i1 = i1 + 2 | 0;
      switch (HEAP8[i11 >> 0] | 0) {
      case 0:
       {
        i12 = 15;
        i10 = i5;
        i9 = 0;
        i20 = i1;
        break L17;
       }
      case 1:
       {
        i12 = 19;
        i10 = i5;
        i9 = 0;
        i20 = i1;
        break L17;
       }
      case 2:
       {
        i12 = 17;
        i10 = i5;
        i9 = 0;
        i20 = i1;
        break L17;
       }
      case 6:
       {
        i12 = 3;
        i10 = i5;
        i9 = 0;
        i20 = i1;
        break L17;
       }
      case 7:
       {
        i12 = 4;
        i10 = i5;
        i9 = 0;
        i20 = i1;
        break L17;
       }
      case 12:
       {
        i12 = 20;
        i10 = i5;
        i9 = 0;
        i20 = i1;
        break L17;
       }
      case 16:
       {
        i12 = 21;
        i10 = i5;
        i9 = 0;
        i20 = i1;
        break L17;
       }
      case 17:
       {
        i12 = 23;
        i10 = i5;
        i9 = 0;
        i20 = i1;
        break L17;
       }
      case 33:
       {
        i12 = 25;
        i10 = i5;
        i9 = 0;
        i20 = i1;
        break L17;
       }
      default:
       {
        i1 = 160;
        i21 = 259;
        break L11;
       }
      }
     }
    case -1:
     {
      i8 = i1 + 5 | 0;
      if (i8 >>> 0 > i2 >>> 0) {
       i1 = 160;
       i21 = 259;
       break L11;
      }
      i1 = HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i11 >> 0] << 24 | HEAPU8[i1 + 3 >> 0] << 8 | HEAPU8[i1 + 4 >> 0];
      i7 = i5 << 24 >> 24 != 0;
      if ((i1 + 32e3 | 0) >>> 0 > 64e3) {
       i12 = 0;
       i10 = i7 ? i5 : 1;
       i9 = i1;
       i20 = i8;
       break L17;
      } else {
       i12 = 0;
       i10 = i5;
       i9 = i7 ? i1 : i1 << 16;
       i20 = i8;
       break L17;
      }
     }
    default:
     {
      i8 = i9 & 255;
      if ((i9 & 255) <= 31) {
       i1 = 160;
       i21 = 259;
       break L11;
      }
      do if ((i9 & 255) < 247) {
       i7 = i8 + -139 | 0;
       i1 = i11;
      } else {
       i10 = i1 + 2 | 0;
       if (i10 >>> 0 > i2 >>> 0) {
        i1 = 160;
        i21 = 259;
        break L11;
       }
       i7 = HEAPU8[i11 >> 0] | 0;
       i1 = i8 << 8;
       if ((i9 & 255) < 251) {
        i7 = (i7 | i1 + -63232) + 108 | 0;
        i1 = i10;
        break;
       } else {
        i7 = -108 - (i7 | i1 + -64256) | 0;
        i1 = i10;
        break;
       }
      } while (0);
      i12 = 0;
      i10 = i5;
      i9 = i5 << 24 >> 24 == 0 ? i7 << 16 : i7;
      i20 = i1;
     }
    } while (0);
    L61 : do if ((i4 | 0) > 0) {
     switch (i12 & 31) {
     case 23:
     case 0:
     case 24:
     case 22:
      break L61;
     default:
      {}
     }
     i4 = 0;
    } while (0);
    i17 = (i12 | 0) == 0;
    i5 = (i12 | 0) == 20 | (i17 | i10 << 24 >> 24 == 0) ? i10 : 0;
    i8 = i15;
    if (!i17) break;
    if ((i8 - i14 | 0) > 1020) {
     i1 = 160;
     i21 = 259;
     break L11;
    }
    i7 = i15 + 4 | 0;
    HEAP32[i15 >> 2] = i9;
    HEAP32[i13 >> 2] = i7;
    if (i20 >>> 0 >= i2 >>> 0) {
     i1 = 0;
     i21 = 259;
     break L11;
    } else {
     i1 = i20;
     i15 = i7;
    }
   }
   if ((i12 | 0) != 21) break;
   i1 = i16 + 112 | 0;
   i7 = i1;
   if ((i8 - i7 | 0) < 8) {
    i1 = 161;
    i21 = 259;
    break L11;
   }
   i3 = i15 + -8 | 0;
   i8 = HEAP32[i15 + -4 >> 2] >> 16;
   i4 = HEAP32[i3 >> 2] >> 16;
   if ((i4 | 0) > (i3 - i7 >> 2 | 0)) {
    i1 = 161;
    i21 = 259;
    break L11;
   }
   i13 = i3 + (0 - i4 << 2) | 0;
   L71 : do switch (i8 | 0) {
   case 0:
    {
     if ((i4 | 0) != 3) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     if (!(HEAP32[i16 + 1400 >> 2] | 0)) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     if ((HEAP32[i16 + 1404 >> 2] | 0) != 7) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     HEAP32[i13 >> 2] = i18;
     HEAP32[i13 + 4 >> 2] = i19;
     i1 = i13;
     i3 = 2;
     i4 = 0;
     i21 = 112;
     break;
    }
   case 1:
    {
     if (i4 | 0) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     HEAP32[i16 + 1400 >> 2] = 1;
     HEAP32[i16 + 1404 >> 2] = 0;
     i1 = _t1_builder_start_point(i39, i18, i19) | 0;
     if (i1 | 0) {
      i21 = 259;
      break L11;
     }
     i1 = HEAP32[i38 >> 2] | 0;
     if (((HEAP16[i1 + 22 >> 1] | 0) + 6 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
      i1 = _FT_GlyphLoader_CheckPoints(i1, 6, 0) | 0;
      if (!i1) {
       i1 = i13;
       i3 = 0;
       i4 = 0;
       i21 = 112;
      } else {
       i21 = 259;
       break L11;
      }
     } else {
      i1 = i13;
      i3 = 0;
      i4 = 0;
      i21 = 112;
     }
     break;
    }
   case 2:
    {
     if (!i4) if (!(HEAP32[i16 + 1400 >> 2] | 0)) i1 = 13; else {
      i17 = i16 + 1404 | 0;
      i1 = HEAP32[i17 >> 2] | 0;
      HEAP32[i17 >> 2] = i1 + 1;
      if ((i1 + -1 | 0) >>> 0 < 6) {
       i3 = HEAP32[i36 >> 2] | 0;
       if (!(HEAP8[i23 >> 0] | 0)) i1 = i3 + 2 | 0; else {
        i14 = HEAP32[i3 + 4 >> 2] | 0;
        i17 = i3 + 2 | 0;
        i15 = HEAP16[i17 >> 1] | 0;
        i16 = (HEAP32[i3 + 8 >> 2] | 0) + i15 | 0;
        i12 = (_FT_RoundFix(i18) | 0) >> 16;
        HEAP32[i14 + (i15 << 3) >> 2] = i12;
        i12 = (_FT_RoundFix(i19) | 0) >> 16;
        HEAP32[i14 + (i15 << 3) + 4 >> 2] = i12;
        HEAP8[i16 >> 0] = (i1 | 0) == 3 | (i1 | 0) == 6 ? 1 : 2;
        i1 = i17;
       }
       HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
       i1 = 0;
      } else i1 = 0;
     } else i1 = 32;
     switch (i1 & 63) {
     case 32:
      {
       i1 = 160;
       i21 = 259;
       break L11;
      }
     case 0:
      {
       i1 = i13;
       i3 = 0;
       i4 = 0;
       i21 = 112;
       break L71;
      }
     default:
      {}
     }
     if (!i1) {
      i3 = 0;
      i4 = 0;
     } else {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     break;
    }
   case 3:
    {
     if ((i4 | 0) != 1) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     if (i37) {
      FUNCTION_TABLE_vii[HEAP32[i24 >> 2] & 63](HEAP32[i40 >> 2] | 0, HEAP16[(HEAP32[i36 >> 2] | 0) + 2 >> 1] | 0);
      i1 = i13;
      i3 = 1;
      i4 = 0;
      i21 = 112;
     } else {
      i1 = i13;
      i3 = 1;
      i4 = 0;
      i21 = 112;
     }
     break;
    }
   case 13:
   case 12:
    {
     i3 = 0;
     i4 = 0;
     i21 = 112;
     break;
    }
   case 18:
   case 17:
   case 16:
   case 15:
   case 14:
    {
     i12 = HEAP32[i16 + 1464 >> 2] | 0;
     if (!i12) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     i3 = i8 + -13 + ((i8 | 0) == 18 & 1) | 0;
     i1 = HEAP32[i12 >> 2] | 0;
     if ((i4 | 0) != (Math_imul(i1, i3) | 0)) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     if (!i3) {
      i1 = i13;
      i3 = 0;
      i4 = 0;
      i21 = 112;
     } else {
      i11 = i12 + 136 | 0;
      i9 = i13;
      i7 = i13 + (i3 << 2) | 0;
      i10 = 0;
      while (1) {
       i4 = HEAP32[i9 >> 2] | 0;
       if (i1 >>> 0 > 1) {
        i8 = 1;
        i1 = i7;
        while (1) {
         i7 = i1 + 4 | 0;
         i4 = (_FT_MulFix(HEAP32[i1 >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + (i8 << 2) >> 2] | 0) | 0) + i4 | 0;
         i8 = i8 + 1 | 0;
         i1 = HEAP32[i12 >> 2] | 0;
         if (i8 >>> 0 >= i1 >>> 0) break; else i1 = i7;
        }
       }
       HEAP32[i9 >> 2] = i4;
       i10 = i10 + 1 | 0;
       if ((i10 | 0) == (i3 | 0)) {
        i1 = i13;
        i4 = 0;
        i21 = 112;
        break;
       } else i9 = i9 + 4 | 0;
      }
     }
     break;
    }
   case 19:
    {
     i7 = HEAP32[i16 + 1464 >> 2] | 0;
     if ((i4 | 0) != 1 | (i7 | 0) == 0) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     i1 = HEAP32[i13 >> 2] >> 16;
     if ((i1 | 0) < 0) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     i3 = HEAP32[i7 >> 2] | 0;
     if ((i3 + i1 | 0) >>> 0 > (HEAP32[i16 + 1492 >> 2] | 0) >>> 0) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     _memcpy((HEAP32[i16 + 1488 >> 2] | 0) + (i1 << 2) | 0, HEAP32[i7 + 136 >> 2] | 0, i3 << 2 | 0) | 0;
     i1 = i13;
     i3 = 0;
     i4 = 0;
     i21 = 112;
     break;
    }
   case 20:
    {
     if ((i4 | 0) != 2) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i13 + 4 >> 2] | 0);
     i1 = i13;
     i3 = 1;
     i4 = 0;
     i21 = 112;
     break;
    }
   case 21:
    {
     if ((i4 | 0) != 2) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[i13 + 4 >> 2] | 0);
     i1 = i13;
     i3 = 1;
     i4 = 0;
     i21 = 112;
     break;
    }
   case 22:
    {
     if ((i4 | 0) != 2) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     i1 = _FT_MulFix(HEAP32[i13 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0) | 0;
     HEAP32[i13 >> 2] = i1;
     i1 = i13;
     i3 = 1;
     i4 = 0;
     i21 = 112;
     break;
    }
   case 23:
    {
     if ((i4 | 0) != 2) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     i1 = HEAP32[i13 + 4 >> 2] | 0;
     if (!i1) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     i1 = _FT_DivFix(HEAP32[i13 >> 2] | 0, i1) | 0;
     HEAP32[i13 >> 2] = i1;
     i1 = i13;
     i3 = 1;
     i4 = 0;
     i21 = 112;
     break;
    }
   case 24:
    {
     if ((i4 | 0) != 2 | (HEAP32[i16 + 1464 >> 2] | 0) == 0) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     i1 = HEAP32[i13 + 4 >> 2] >> 16;
     if ((i1 | 0) < 0) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     if (i1 >>> 0 >= (HEAP32[i16 + 1492 >> 2] | 0) >>> 0) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     HEAP32[(HEAP32[i16 + 1488 >> 2] | 0) + (i1 << 2) >> 2] = HEAP32[i13 >> 2];
     i1 = i13;
     i3 = 0;
     i4 = 0;
     i21 = 112;
     break;
    }
   case 25:
    {
     if ((i4 | 0) != 1 | (HEAP32[i16 + 1464 >> 2] | 0) == 0) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     i1 = HEAP32[i13 >> 2] >> 16;
     if ((i1 | 0) < 0) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     if (i1 >>> 0 >= (HEAP32[i16 + 1492 >> 2] | 0) >>> 0) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     HEAP32[i13 >> 2] = HEAP32[(HEAP32[i16 + 1488 >> 2] | 0) + (i1 << 2) >> 2];
     i1 = i13;
     i3 = 1;
     i4 = 0;
     i21 = 112;
     break;
    }
   case 27:
    {
     if ((i4 | 0) != 4) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     if ((HEAP32[i13 + 8 >> 2] | 0) > (HEAP32[i13 + 12 >> 2] | 0)) {
      HEAP32[i13 >> 2] = HEAP32[i13 + 4 >> 2];
      i1 = i13;
      i3 = 1;
      i4 = 0;
      i21 = 112;
     } else {
      i1 = i13;
      i3 = 1;
      i4 = 0;
      i21 = 112;
     }
     break;
    }
   case 28:
    {
     if (i4 | 0) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     i1 = HEAP32[i35 >> 2] | 0;
     HEAP32[i13 >> 2] = ((i1 | 0) > 32767 & 1) + i1;
     i1 = HEAP32[i35 >> 2] | 0;
     i1 = _FT_MulFix(i1, 65536 - i1 | 0) | 0;
     HEAP32[i35 >> 2] = (i1 | 0) == 0 ? i1 + 10355 | 0 : i1;
     i1 = i13;
     i3 = 1;
     i4 = 0;
     i21 = 112;
     break;
    }
   default:
    if ((i4 | i8 | 0) > -1) {
     i1 = i13;
     i3 = 0;
     i21 = 112;
    } else {
     i1 = 160;
     i21 = 259;
     break L11;
    }
   } while (0);
   if ((i21 | 0) == 112) {
    i21 = 0;
    HEAP32[(HEAP32[i41 >> 2] | 0) + 1136 >> 2] = i1 + (i3 << 2);
   }
   if (i20 >>> 0 < i2 >>> 0) i1 = i20; else {
    i1 = 0;
    i21 = 259;
    break L11;
   }
  }
  i1 = HEAP32[24240 + (i12 << 2) >> 2] | 0;
  if ((i8 - (i16 + 112) >> 2 | 0) < (i1 | 0)) {
   i1 = 161;
   i21 = 259;
   break;
  }
  i17 = i15 + (0 - i1 << 2) | 0;
  L136 : do switch (i12 & 31) {
  case 1:
   {
    i21 = 117;
    break L11;
   }
  case 3:
   {
    i21 = 134;
    break L11;
   }
  case 2:
   {
    HEAP32[i34 >> 2] = 1;
    HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
    HEAP32[i26 >> 2] = HEAP32[i17 + 4 >> 2];
    HEAP32[i27 >> 2] = 0;
    i1 = (HEAP32[i17 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) | 0;
    if (!(HEAP8[i28 >> 0] | 0)) {
     i12 = i1;
     i9 = i17;
     i8 = i1;
     i7 = HEAP32[i33 >> 2] | 0;
     i1 = i20;
    } else {
     i1 = 0;
     i21 = 259;
     break L11;
    }
    break;
   }
  case 4:
   {
    HEAP32[i34 >> 2] = 1;
    HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
    i1 = i17 + 4 | 0;
    HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
    HEAP32[i26 >> 2] = HEAP32[i17 + 8 >> 2];
    HEAP32[i27 >> 2] = HEAP32[i17 + 12 >> 2];
    if (!(HEAP8[i28 >> 0] | 0)) {
     i12 = i22;
     i9 = i17;
     i8 = (HEAP32[i17 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) | 0;
     i7 = (HEAP32[i1 >> 2] | 0) + (HEAP32[i33 >> 2] | 0) | 0;
     i1 = i20;
    } else {
     i1 = 0;
     i21 = 259;
     break L11;
    }
    break;
   }
  case 5:
   {
    do if ((HEAP32[i34 >> 2] & -2 | 0) == 2) {
     i11 = HEAP32[i36 >> 2] | 0;
     if (i11 | 0) {
      i12 = HEAP16[i11 >> 1] | 0;
      if (i12 << 16 >> 16 < 2) i14 = 0; else i14 = (HEAP16[(HEAP32[i11 + 12 >> 2] | 0) + ((i12 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
      i13 = i11 + 2 | 0;
      i10 = HEAP16[i13 >> 1] | 0;
      i1 = i10 << 16 >> 16;
      if (i10 << 16 >> 16 > 1) {
       i7 = HEAP32[i11 + 4 >> 2] | 0;
       i8 = i7 + (i1 << 3) + -8 | 0;
       i9 = (HEAP32[i11 + 8 >> 2] | 0) + i1 + -1 | 0;
       if ((HEAP32[i7 + (i14 << 3) >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) if ((HEAP32[i7 + (i14 << 3) + 4 >> 2] | 0) == (HEAP32[i8 + 4 >> 2] | 0)) {
        i1 = i10 + -1 << 16 >> 16;
        if ((HEAP8[i9 >> 0] | 0) == 1) HEAP16[i13 >> 1] = i1; else i1 = i10;
       } else i1 = i10; else i1 = i10;
      } else i1 = i10;
      i7 = i12 << 16 >> 16;
      if (i12 << 16 >> 16 > 0) {
       i8 = (i1 << 16 >> 16) + -1 | 0;
       if ((i14 | 0) == (i8 | 0)) {
        HEAP16[i11 >> 1] = i12 + -1 << 16 >> 16;
        HEAP16[i13 >> 1] = i1 + -1 << 16 >> 16;
        break;
       } else {
        HEAP16[(HEAP32[i11 + 12 >> 2] | 0) + (i7 + -1 << 1) >> 1] = i8;
        break;
       }
      }
     }
    } while (0);
    HEAP32[i34 >> 2] = 1;
    i12 = i22;
    i9 = i17;
    i8 = i18;
    i7 = i19;
    i1 = i20;
    break;
   }
  case 6:
   {
    i1 = _t1_builder_start_point(i39, i18, i19) | 0;
    if (i1 | 0) {
     i21 = 259;
     break L11;
    }
    i8 = (HEAP32[i17 >> 2] | 0) + i18 | 0;
    i7 = i19;
    i21 = 194;
    break;
   }
  case 7:
   {
    i1 = (HEAP32[i17 >> 2] | 0) + i18 | 0;
    if (!(HEAP32[i16 + 1400 >> 2] | 0)) {
     if (!(HEAP32[i34 >> 2] | 0)) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     HEAP32[i34 >> 2] = 2;
     i12 = i22;
     i9 = i17;
     i8 = i1;
     i7 = i19;
     i1 = i20;
    } else {
     i12 = i22;
     i9 = i17;
     i8 = i1;
     i7 = i19;
     i1 = i20;
    }
    break;
   }
  case 8:
   {
    i1 = _t1_builder_start_point(i39, i18, i19) | 0;
    if (i1 | 0) {
     i21 = 259;
     break L11;
    }
    i1 = HEAP32[i38 >> 2] | 0;
    if (((HEAP16[i1 + 22 >> 1] | 0) + 3 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
     i1 = _FT_GlyphLoader_CheckPoints(i1, 3, 0) | 0;
     if (i1 | 0) {
      i21 = 259;
      break L11;
     }
    }
    i8 = (HEAP32[i17 >> 2] | 0) + i18 | 0;
    i1 = HEAP32[i36 >> 2] | 0;
    if (!(HEAP8[i23 >> 0] | 0)) {
     i7 = i1 + 2 | 0;
     i9 = 0;
    } else {
     i16 = HEAP32[i1 + 4 >> 2] | 0;
     i7 = i1 + 2 | 0;
     i18 = HEAP16[i7 >> 1] | 0;
     i9 = (HEAP32[i1 + 8 >> 2] | 0) + i18 | 0;
     i1 = (_FT_RoundFix(i8) | 0) >> 16;
     HEAP32[i16 + (i18 << 3) >> 2] = i1;
     i1 = (_FT_RoundFix(i19) | 0) >> 16;
     HEAP32[i16 + (i18 << 3) + 4 >> 2] = i1;
     HEAP8[i9 >> 0] = 2;
     i9 = HEAP8[i23 >> 0] | 0;
     i1 = HEAP32[i36 >> 2] | 0;
    }
    HEAP16[i7 >> 1] = (HEAP16[i7 >> 1] | 0) + 1 << 16 >> 16;
    i10 = (HEAP32[i17 + 4 >> 2] | 0) + i8 | 0;
    i8 = (HEAP32[i17 + 8 >> 2] | 0) + i19 | 0;
    if (!(i9 << 24 >> 24)) {
     i7 = i1 + 2 | 0;
     i9 = 0;
    } else {
     i18 = HEAP32[i1 + 4 >> 2] | 0;
     i7 = i1 + 2 | 0;
     i19 = HEAP16[i7 >> 1] | 0;
     i9 = (HEAP32[i1 + 8 >> 2] | 0) + i19 | 0;
     i1 = (_FT_RoundFix(i10) | 0) >> 16;
     HEAP32[i18 + (i19 << 3) >> 2] = i1;
     i1 = (_FT_RoundFix(i8) | 0) >> 16;
     HEAP32[i18 + (i19 << 3) + 4 >> 2] = i1;
     HEAP8[i9 >> 0] = 2;
     i9 = HEAP8[i23 >> 0] | 0;
     i1 = HEAP32[i36 >> 2] | 0;
    }
    HEAP16[i7 >> 1] = (HEAP16[i7 >> 1] | 0) + 1 << 16 >> 16;
    i7 = (HEAP32[i17 + 12 >> 2] | 0) + i8 | 0;
    if (!(i9 << 24 >> 24)) i1 = i1 + 2 | 0; else {
     i16 = HEAP32[i1 + 4 >> 2] | 0;
     i19 = i1 + 2 | 0;
     i18 = HEAP16[i19 >> 1] | 0;
     i1 = (HEAP32[i1 + 8 >> 2] | 0) + i18 | 0;
     i15 = (_FT_RoundFix(i10) | 0) >> 16;
     HEAP32[i16 + (i18 << 3) >> 2] = i15;
     i15 = (_FT_RoundFix(i7) | 0) >> 16;
     HEAP32[i16 + (i18 << 3) + 4 >> 2] = i15;
     HEAP8[i1 >> 0] = 1;
     i1 = i19;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i12 = i22;
    i9 = i17;
    i8 = i10;
    i1 = i20;
    break;
   }
  case 9:
   {
    i1 = _t1_builder_start_point(i39, i18, i19) | 0;
    if (i1 | 0) {
     i21 = 259;
     break L11;
    }
    i8 = (HEAP32[i17 >> 2] | 0) + i18 | 0;
    i7 = (HEAP32[i17 + 4 >> 2] | 0) + i19 | 0;
    i21 = 194;
    break;
   }
  case 10:
   {
    i1 = (HEAP32[i17 >> 2] | 0) + i18 | 0;
    i7 = (HEAP32[i17 + 4 >> 2] | 0) + i19 | 0;
    if (!(HEAP32[i16 + 1400 >> 2] | 0)) {
     if (!(HEAP32[i34 >> 2] | 0)) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     HEAP32[i34 >> 2] = 2;
     i12 = i22;
     i9 = i17;
     i8 = i1;
     i1 = i20;
    } else {
     i12 = i22;
     i9 = i17;
     i8 = i1;
     i1 = i20;
    }
    break;
   }
  case 11:
   {
    i1 = _t1_builder_start_point(i39, i18, i19) | 0;
    if (i1 | 0) {
     i21 = 259;
     break L11;
    }
    i1 = HEAP32[i38 >> 2] | 0;
    if (((HEAP16[i1 + 22 >> 1] | 0) + 3 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
     i1 = _FT_GlyphLoader_CheckPoints(i1, 3, 0) | 0;
     if (i1 | 0) {
      i21 = 259;
      break L11;
     }
    }
    i8 = (HEAP32[i17 >> 2] | 0) + i18 | 0;
    i9 = (HEAP32[i17 + 4 >> 2] | 0) + i19 | 0;
    i1 = HEAP32[i36 >> 2] | 0;
    if (!(HEAP8[i23 >> 0] | 0)) {
     i7 = i1 + 2 | 0;
     i10 = 0;
    } else {
     i18 = HEAP32[i1 + 4 >> 2] | 0;
     i7 = i1 + 2 | 0;
     i19 = HEAP16[i7 >> 1] | 0;
     i10 = (HEAP32[i1 + 8 >> 2] | 0) + i19 | 0;
     i1 = (_FT_RoundFix(i8) | 0) >> 16;
     HEAP32[i18 + (i19 << 3) >> 2] = i1;
     i1 = (_FT_RoundFix(i9) | 0) >> 16;
     HEAP32[i18 + (i19 << 3) + 4 >> 2] = i1;
     HEAP8[i10 >> 0] = 2;
     i10 = HEAP8[i23 >> 0] | 0;
     i1 = HEAP32[i36 >> 2] | 0;
    }
    HEAP16[i7 >> 1] = (HEAP16[i7 >> 1] | 0) + 1 << 16 >> 16;
    i8 = (HEAP32[i17 + 8 >> 2] | 0) + i8 | 0;
    i9 = (HEAP32[i17 + 12 >> 2] | 0) + i9 | 0;
    if (!(i10 << 24 >> 24)) {
     i7 = i1 + 2 | 0;
     i10 = 0;
    } else {
     i18 = HEAP32[i1 + 4 >> 2] | 0;
     i7 = i1 + 2 | 0;
     i19 = HEAP16[i7 >> 1] | 0;
     i10 = (HEAP32[i1 + 8 >> 2] | 0) + i19 | 0;
     i1 = (_FT_RoundFix(i8) | 0) >> 16;
     HEAP32[i18 + (i19 << 3) >> 2] = i1;
     i1 = (_FT_RoundFix(i9) | 0) >> 16;
     HEAP32[i18 + (i19 << 3) + 4 >> 2] = i1;
     HEAP8[i10 >> 0] = 2;
     i10 = HEAP8[i23 >> 0] | 0;
     i1 = HEAP32[i36 >> 2] | 0;
    }
    HEAP16[i7 >> 1] = (HEAP16[i7 >> 1] | 0) + 1 << 16 >> 16;
    i8 = (HEAP32[i17 + 16 >> 2] | 0) + i8 | 0;
    i7 = (HEAP32[i17 + 20 >> 2] | 0) + i9 | 0;
    if (!(i10 << 24 >> 24)) i1 = i1 + 2 | 0; else {
     i16 = HEAP32[i1 + 4 >> 2] | 0;
     i19 = i1 + 2 | 0;
     i18 = HEAP16[i19 >> 1] | 0;
     i1 = (HEAP32[i1 + 8 >> 2] | 0) + i18 | 0;
     i15 = (_FT_RoundFix(i8) | 0) >> 16;
     HEAP32[i16 + (i18 << 3) >> 2] = i15;
     i15 = (_FT_RoundFix(i7) | 0) >> 16;
     HEAP32[i16 + (i18 << 3) + 4 >> 2] = i15;
     HEAP8[i1 >> 0] = 1;
     i1 = i19;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i12 = i22;
    i9 = i17;
    i1 = i20;
    break;
   }
  case 12:
   {
    i1 = _t1_builder_start_point(i39, i18, i19) | 0;
    if (i1 | 0) {
     i21 = 259;
     break L11;
    }
    i1 = HEAP32[i38 >> 2] | 0;
    if (((HEAP16[i1 + 22 >> 1] | 0) + 3 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
     i1 = _FT_GlyphLoader_CheckPoints(i1, 3, 0) | 0;
     if (i1 | 0) {
      i21 = 259;
      break L11;
     }
    }
    i8 = (HEAP32[i17 >> 2] | 0) + i19 | 0;
    i1 = HEAP32[i36 >> 2] | 0;
    if (!(HEAP8[i23 >> 0] | 0)) {
     i7 = i1 + 2 | 0;
     i10 = 0;
    } else {
     i16 = HEAP32[i1 + 4 >> 2] | 0;
     i7 = i1 + 2 | 0;
     i19 = HEAP16[i7 >> 1] | 0;
     i10 = (HEAP32[i1 + 8 >> 2] | 0) + i19 | 0;
     i1 = (_FT_RoundFix(i18) | 0) >> 16;
     HEAP32[i16 + (i19 << 3) >> 2] = i1;
     i1 = (_FT_RoundFix(i8) | 0) >> 16;
     HEAP32[i16 + (i19 << 3) + 4 >> 2] = i1;
     HEAP8[i10 >> 0] = 2;
     i10 = HEAP8[i23 >> 0] | 0;
     i1 = HEAP32[i36 >> 2] | 0;
    }
    HEAP16[i7 >> 1] = (HEAP16[i7 >> 1] | 0) + 1 << 16 >> 16;
    i9 = (HEAP32[i17 + 4 >> 2] | 0) + i18 | 0;
    i11 = (HEAP32[i17 + 8 >> 2] | 0) + i8 | 0;
    if (!(i10 << 24 >> 24)) {
     i7 = i1 + 2 | 0;
     i8 = 0;
    } else {
     i18 = HEAP32[i1 + 4 >> 2] | 0;
     i7 = i1 + 2 | 0;
     i19 = HEAP16[i7 >> 1] | 0;
     i8 = (HEAP32[i1 + 8 >> 2] | 0) + i19 | 0;
     i1 = (_FT_RoundFix(i9) | 0) >> 16;
     HEAP32[i18 + (i19 << 3) >> 2] = i1;
     i1 = (_FT_RoundFix(i11) | 0) >> 16;
     HEAP32[i18 + (i19 << 3) + 4 >> 2] = i1;
     HEAP8[i8 >> 0] = 2;
     i8 = HEAP8[i23 >> 0] | 0;
     i1 = HEAP32[i36 >> 2] | 0;
    }
    HEAP16[i7 >> 1] = (HEAP16[i7 >> 1] | 0) + 1 << 16 >> 16;
    i7 = (HEAP32[i17 + 12 >> 2] | 0) + i9 | 0;
    if (!(i8 << 24 >> 24)) i1 = i1 + 2 | 0; else {
     i16 = HEAP32[i1 + 4 >> 2] | 0;
     i19 = i1 + 2 | 0;
     i18 = HEAP16[i19 >> 1] | 0;
     i1 = (HEAP32[i1 + 8 >> 2] | 0) + i18 | 0;
     i15 = (_FT_RoundFix(i7) | 0) >> 16;
     HEAP32[i16 + (i18 << 3) >> 2] = i15;
     i15 = (_FT_RoundFix(i11) | 0) >> 16;
     HEAP32[i16 + (i18 << 3) + 4 >> 2] = i15;
     HEAP8[i1 >> 0] = 1;
     i1 = i19;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i12 = i22;
    i9 = i17;
    i8 = i7;
    i7 = i11;
    i1 = i20;
    break;
   }
  case 13:
   {
    i1 = _t1_builder_start_point(i39, i18, i19) | 0;
    if (i1 | 0) {
     i21 = 259;
     break L11;
    }
    i8 = i18;
    i7 = (HEAP32[i17 >> 2] | 0) + i19 | 0;
    i21 = 194;
    break;
   }
  case 14:
   {
    i7 = (HEAP32[i17 >> 2] | 0) + i19 | 0;
    if (!(HEAP32[i16 + 1400 >> 2] | 0)) {
     if (!(HEAP32[i34 >> 2] | 0)) {
      i1 = 160;
      i21 = 259;
      break L11;
     }
     HEAP32[i34 >> 2] = 2;
     i12 = i22;
     i9 = i17;
     i8 = i18;
     i1 = i20;
    } else {
     i12 = i22;
     i9 = i17;
     i8 = i18;
     i1 = i20;
    }
    break;
   }
  case 20:
   {
    i9 = i17 + 4 | 0;
    i12 = _FT_DivFix(HEAP32[i17 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
    HEAP32[i17 >> 2] = i12;
    i12 = i22;
    i8 = i18;
    i7 = i19;
    i5 = 0;
    i1 = i20;
    break;
   }
  case 22:
   {
    i9 = HEAP32[i17 >> 2] >> 16;
    if ((i9 | 0) < 0) {
     i1 = 160;
     i21 = 259;
     break L11;
    }
    if ((i9 | 0) >= (HEAP32[i16 + 1364 >> 2] | 0)) {
     i1 = 160;
     i21 = 259;
     break L11;
    }
    if ((i6 - (i16 + 1140) | 0) > 180) {
     i1 = 160;
     i21 = 259;
     break L11;
    }
    HEAP32[i6 >> 2] = i20;
    i11 = i6 + 12 | 0;
    i10 = HEAP32[i41 >> 2] | 0;
    i2 = HEAP32[i10 + 1368 >> 2] | 0;
    i1 = HEAP32[i2 + (i9 << 2) >> 2] | 0;
    i7 = i6 + 16 | 0;
    HEAP32[i7 >> 2] = i1;
    i8 = HEAP32[i10 + 1372 >> 2] | 0;
    if (!i8) {
     i20 = HEAP32[i10 + 1360 >> 2] | 0;
     i1 = i1 + ((i20 | 0) > 0 ? i20 : 0) | 0;
     HEAP32[i7 >> 2] = i1;
     i2 = HEAP32[i2 + (i9 + 1 << 2) >> 2] | 0;
    } else i2 = i1 + (HEAP32[i8 + (i9 << 2) >> 2] | 0) | 0;
    HEAP32[i6 + 20 >> 2] = i2;
    HEAP32[i11 >> 2] = i1;
    if (!i1) {
     i1 = 160;
     i21 = 259;
     break L11;
    }
    HEAP32[i10 + 1344 >> 2] = i11;
    i12 = i22;
    i9 = i17;
    i6 = i11;
    i8 = i18;
    i7 = i19;
    break;
   }
  case 23:
   {
    if ((i3 | 0) > 0) {
     i12 = i22;
     i9 = i17;
     i8 = i18;
     i7 = i19;
     i1 = i20;
     i3 = i3 + -1 | 0;
     break L136;
    }
    if (!i4) {
     i1 = 160;
     i21 = 259;
     break L11;
    }
    i12 = i22;
    i9 = i17 + 4 | 0;
    i8 = i18;
    i7 = i19;
    i1 = i20;
    i4 = i4 + -1 | 0;
    break;
   }
  case 24:
   {
    if (i6 >>> 0 <= (i16 + 1140 | 0) >>> 0) {
     i1 = 160;
     i21 = 259;
     break L11;
    }
    i8 = i6 + -12 | 0;
    i1 = HEAP32[i8 >> 2] | 0;
    i2 = HEAP32[i6 + -4 >> 2] | 0;
    HEAP32[i16 + 1344 >> 2] = i8;
    i12 = i22;
    i9 = i17;
    i6 = i8;
    i8 = i18;
    i7 = i19;
    break;
   }
  case 26:
  case 15:
   {
    i12 = i22;
    i9 = i17;
    i8 = i18;
    i7 = i19;
    i1 = i20;
    break;
   }
  case 16:
   {
    if (i37) {
     FUNCTION_TABLE_viii[HEAP32[i30 >> 2] & 31](HEAP32[i40 >> 2] | 0, 1, i17);
     i12 = i22;
     i9 = i17;
     i8 = i18;
     i7 = i19;
     i1 = i20;
    } else {
     i12 = i22;
     i9 = i17;
     i8 = i18;
     i7 = i19;
     i1 = i20;
    }
    break;
   }
  case 17:
   {
    if (i37) {
     FUNCTION_TABLE_viii[HEAP32[i31 >> 2] & 31](HEAP32[i40 >> 2] | 0, 1, i17);
     i12 = i22;
     i9 = i17;
     i8 = i18;
     i7 = i19;
     i1 = i20;
    } else {
     i12 = i22;
     i9 = i17;
     i8 = i18;
     i7 = i19;
     i1 = i20;
    }
    break;
   }
  case 18:
   {
    if (i37) {
     HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + i22;
     FUNCTION_TABLE_viii[HEAP32[i30 >> 2] & 31](HEAP32[i40 >> 2] | 0, 0, i17);
     i12 = i22;
     i9 = i17;
     i8 = i18;
     i7 = i19;
     i1 = i20;
    } else {
     i12 = i22;
     i9 = i17;
     i8 = i18;
     i7 = i19;
     i1 = i20;
    }
    break;
   }
  case 19:
   {
    if (i37) {
     HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + i22;
     i12 = i17 + 8 | 0;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i22;
     i12 = i17 + 16 | 0;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i22;
     FUNCTION_TABLE_viii[HEAP32[i31 >> 2] & 31](HEAP32[i40 >> 2] | 0, 0, i17);
     i12 = i22;
     i9 = i17;
     i8 = i18;
     i7 = i19;
     i1 = i20;
    } else {
     i12 = i22;
     i9 = i17;
     i8 = i18;
     i7 = i19;
     i1 = i20;
    }
    break;
   }
  case 25:
   {
    i8 = HEAP32[i17 >> 2] | 0;
    i7 = HEAP32[i17 + 4 >> 2] | 0;
    HEAP32[i16 + 1400 >> 2] = 0;
    i12 = i22;
    i9 = i17;
    i1 = i20;
    break;
   }
  default:
   {
    i1 = 160;
    i21 = 259;
    break L11;
   }
  } while (0);
  if ((i21 | 0) == 194) {
   i21 = 0;
   i1 = HEAP32[i38 >> 2] | 0;
   if (((HEAP16[i1 + 22 >> 1] | 0) + 1 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
    i1 = _FT_GlyphLoader_CheckPoints(i1, 1, 0) | 0;
    if (i1 | 0) {
     i21 = 259;
     break;
    }
   }
   i1 = HEAP32[i36 >> 2] | 0;
   if (!(HEAP8[i23 >> 0] | 0)) i1 = i1 + 2 | 0; else {
    i16 = HEAP32[i1 + 4 >> 2] | 0;
    i19 = i1 + 2 | 0;
    i18 = HEAP16[i19 >> 1] | 0;
    i1 = (HEAP32[i1 + 8 >> 2] | 0) + i18 | 0;
    i15 = (_FT_RoundFix(i8) | 0) >> 16;
    HEAP32[i16 + (i18 << 3) >> 2] = i15;
    i15 = (_FT_RoundFix(i7) | 0) >> 16;
    HEAP32[i16 + (i18 << 3) + 4 >> 2] = i15;
    HEAP8[i1 >> 0] = 1;
    i1 = i19;
   }
   HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
   i12 = i22;
   i9 = i17;
   i1 = i20;
  }
  HEAP32[(HEAP32[i41 >> 2] | 0) + 1136 >> 2] = i9;
  if (i1 >>> 0 < i2 >>> 0) {
   i18 = i8;
   i19 = i7;
   i22 = i12;
  } else {
   i1 = 0;
   i21 = 259;
   break;
  }
 }
 if ((i21 | 0) == 117) {
  i6 = HEAP32[i36 >> 2] | 0;
  do if (i6 | 0) {
   i7 = HEAP16[i6 >> 1] | 0;
   if (i7 << 16 >> 16 < 2) i9 = 0; else i9 = (HEAP16[(HEAP32[i6 + 12 >> 2] | 0) + ((i7 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
   i8 = i6 + 2 | 0;
   i5 = HEAP16[i8 >> 1] | 0;
   i1 = i5 << 16 >> 16;
   if (i5 << 16 >> 16 > 1) {
    i2 = HEAP32[i6 + 4 >> 2] | 0;
    i3 = i2 + (i1 << 3) + -8 | 0;
    i4 = (HEAP32[i6 + 8 >> 2] | 0) + i1 + -1 | 0;
    if ((HEAP32[i2 + (i9 << 3) >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) if ((HEAP32[i2 + (i9 << 3) + 4 >> 2] | 0) == (HEAP32[i3 + 4 >> 2] | 0)) {
     i1 = i5 + -1 << 16 >> 16;
     if ((HEAP8[i4 >> 0] | 0) == 1) HEAP16[i8 >> 1] = i1; else i1 = i5;
    } else i1 = i5; else i1 = i5;
   } else i1 = i5;
   i2 = i7 << 16 >> 16;
   if (i7 << 16 >> 16 > 0) {
    i3 = (i1 << 16 >> 16) + -1 | 0;
    if ((i9 | 0) == (i3 | 0)) {
     HEAP16[i6 >> 1] = i7 + -1 << 16 >> 16;
     HEAP16[i8 >> 1] = i1 + -1 << 16 >> 16;
     break;
    } else {
     HEAP16[(HEAP32[i6 + 12 >> 2] | 0) + (i2 + -1 << 1) >> 1] = i3;
     break;
    }
   }
  } while (0);
  if (i37) {
   if (FUNCTION_TABLE_iii[HEAP32[i40 + 8 >> 2] & 255](HEAP32[i40 >> 2] | 0, HEAP16[i6 + 2 >> 1] | 0) | 0) {
    i41 = 160;
    STACKTOP = i42;
    return i41 | 0;
   }
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i40 + 24 >> 2] & 127](HEAP32[i40 >> 2] | 0, HEAP32[i36 >> 2] | 0, HEAP32[i39 + 76 >> 2] | 0, HEAP32[(HEAP32[i41 >> 2] | 0) + 1468 >> 2] | 0) | 0;
   if (i1 | 0) {
    i41 = i1;
    STACKTOP = i42;
    return i41 | 0;
   }
  }
  _FT_GlyphLoader_Add(HEAP32[i38 >> 2] | 0);
  i41 = 0;
  STACKTOP = i42;
  return i41 | 0;
 } else if ((i21 | 0) == 134) {
  i14 = HEAP32[i17 >> 2] | 0;
  i15 = HEAP32[i17 + 8 >> 2] | 0;
  i2 = HEAP32[i17 + 12 >> 2] >> 16;
  i10 = HEAP32[i17 + 16 >> 2] >> 16;
  i11 = i16 + 1496 | 0;
  if (HEAP8[i11 >> 0] | 0) {
   i41 = 160;
   STACKTOP = i42;
   return i41 | 0;
  }
  if (HEAP8[i16 + 70 >> 0] | 0) {
   i41 = 160;
   STACKTOP = i42;
   return i41 | 0;
  }
  i12 = i16 + 32 | 0;
  i13 = (HEAP32[i12 >> 2] | 0) + (HEAP32[i17 + 4 >> 2] | 0) | 0;
  i8 = i16 + 1356 | 0;
  i1 = (HEAP32[(HEAP32[(HEAP32[i16 + 4 >> 2] | 0) + 128 >> 2] | 0) + 48 >> 2] | 0) != 0;
  if (!((HEAP32[i8 >> 2] | 0) != 0 | i1)) {
   i41 = 160;
   STACKTOP = i42;
   return i41 | 0;
  }
  L296 : do if (i1) i4 = i2; else {
   i7 = i16 + 1348 | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   L298 : do if (i2 >>> 0 > 255) i6 = -1; else {
    i2 = FUNCTION_TABLE_ii[HEAP32[i1 + 20 >> 2] & 63](HEAPU16[(HEAP32[i1 + 24 >> 2] | 0) + (i2 << 1) >> 1] | 0) | 0;
    i3 = HEAP32[i16 + 1352 >> 2] | 0;
    if (!i3) i6 = -1; else {
     i4 = HEAP32[i8 >> 2] | 0;
     i1 = 0;
     while (1) {
      i5 = HEAP32[i4 + (i1 << 2) >> 2] | 0;
      if (i5 | 0) if ((HEAP8[i5 >> 0] | 0) == (HEAP8[i2 >> 0] | 0)) if (!(_strcmp(i5, i2) | 0)) {
       i6 = i1;
       break L298;
      }
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i3 >>> 0) {
       i6 = -1;
       break;
      }
     }
    }
   } while (0);
   i1 = HEAP32[i7 >> 2] | 0;
   if (i10 >>> 0 > 255) {
    i4 = i6;
    i10 = -1;
   } else {
    i4 = FUNCTION_TABLE_ii[HEAP32[i1 + 20 >> 2] & 63](HEAPU16[(HEAP32[i1 + 24 >> 2] | 0) + (i10 << 1) >> 1] | 0) | 0;
    i5 = HEAP32[i16 + 1352 >> 2] | 0;
    if (!i5) {
     i4 = i6;
     i10 = -1;
    } else {
     i1 = HEAP32[i8 >> 2] | 0;
     i3 = 0;
     while (1) {
      i2 = HEAP32[i1 + (i3 << 2) >> 2] | 0;
      if (i2 | 0) if ((HEAP8[i2 >> 0] | 0) == (HEAP8[i4 >> 0] | 0)) if (!(_strcmp(i2, i4) | 0)) {
       i4 = i6;
       i10 = i3;
       break L296;
      }
      i3 = i3 + 1 | 0;
      if (i3 >>> 0 >= i5 >>> 0) {
       i4 = i6;
       i10 = -1;
       break;
      }
     }
    }
   }
  } while (0);
  if ((i4 | i10 | 0) < 0) {
   i41 = 160;
   STACKTOP = i42;
   return i41 | 0;
  }
  if (HEAP8[i16 + 69 >> 0] | 0) {
   i1 = HEAP32[i16 + 8 >> 2] | 0;
   i2 = HEAP32[HEAP32[i1 + 156 >> 2] >> 2] | 0;
   i3 = _FT_GlyphLoader_CheckSubGlyphs(i2, 2) | 0;
   if (i3 | 0) {
    i41 = i3;
    STACKTOP = i42;
    return i41 | 0;
   }
   i41 = HEAP32[i2 + 88 >> 2] | 0;
   HEAP32[i41 >> 2] = i4;
   HEAP16[i41 + 4 >> 1] = 514;
   HEAP32[i41 + 8 >> 2] = 0;
   HEAP32[i41 + 12 >> 2] = 0;
   HEAP32[i41 + 32 >> 2] = i10;
   HEAP16[i41 + 36 >> 1] = 2;
   i40 = (_FT_RoundFix(i13 - i14 | 0) | 0) >> 16;
   HEAP32[i41 + 40 >> 2] = i40;
   i40 = (_FT_RoundFix(i15) | 0) >> 16;
   HEAP32[i41 + 44 >> 2] = i40;
   HEAP32[i1 + 128 >> 2] = 2;
   HEAP32[i1 + 132 >> 2] = HEAP32[i2 + 52 >> 2];
   HEAP32[i1 + 72 >> 2] = 1668246896;
   HEAP32[i2 + 84 >> 2] = 2;
   i41 = 0;
   STACKTOP = i42;
   return i41 | 0;
  }
  _FT_GlyphLoader_Prepare(HEAP32[i16 + 12 >> 2] | 0);
  HEAP8[i11 >> 0] = 1;
  i9 = i16 + 1472 | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 255](i16, i4) | 0;
  HEAP8[i11 >> 0] = 0;
  if (i1 | 0) {
   i41 = i1;
   STACKTOP = i42;
   return i41 | 0;
  }
  i4 = i12;
  i3 = HEAP32[i4 >> 2] | 0;
  i4 = HEAP32[i4 + 4 >> 2] | 0;
  i5 = i16 + 40 | 0;
  i7 = i5;
  i6 = HEAP32[i7 >> 2] | 0;
  i7 = HEAP32[i7 + 4 >> 2] | 0;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i16 + 36 >> 2] = 0;
  i8 = i16 + 24 | 0;
  HEAP32[i8 >> 2] = i13 - i14;
  i2 = i16 + 28 | 0;
  HEAP32[i2 >> 2] = i15;
  HEAP8[i11 >> 0] = 1;
  i1 = FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 255](i16, i10) | 0;
  HEAP8[i11 >> 0] = 0;
  if (i1 | 0) {
   i41 = i1;
   STACKTOP = i42;
   return i41 | 0;
  }
  i41 = i12;
  HEAP32[i41 >> 2] = i3;
  HEAP32[i41 + 4 >> 2] = i4;
  i41 = i5;
  HEAP32[i41 >> 2] = i6;
  HEAP32[i41 + 4 >> 2] = i7;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  i41 = 0;
  STACKTOP = i42;
  return i41 | 0;
 } else if ((i21 | 0) == 259) {
  STACKTOP = i42;
  return i1 | 0;
 }
 return 0;
}

function _cff_face_init(i19, i35, i28, i3, i4) {
 i19 = i19 | 0;
 i35 = i35 | 0;
 i28 = i28 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i36 = 0, i37 = 0, i38 = 0;
 i38 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i37 = i38 + 80 | 0;
 i29 = i38 + 48 | 0;
 i30 = i38 + 44 | 0;
 i23 = i38 + 40 | 0;
 i24 = i38 + 8 | 0;
 i36 = i38;
 i1 = i35 + 96 | 0;
 i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0;
 i2 = _FT_Get_Module_Interface(i7, 283071) | 0;
 if (!i2) {
  HEAP32[i36 >> 2] = 11;
  i37 = 11;
  STACKTOP = i38;
  return i37 | 0;
 }
 i25 = _ft_module_get_service(HEAP32[i1 >> 2] | 0, 284871) | 0;
 i22 = _FT_Get_Module_Interface(i7, 283988) | 0;
 i1 = _FT_Stream_Seek(i19, 0) | 0;
 HEAP32[i36 >> 2] = i1;
 if (i1 | 0) {
  i37 = i1;
  STACKTOP = i38;
  return i37 | 0;
 }
 i34 = FUNCTION_TABLE_iiiiii[HEAP32[i2 + 4 >> 2] & 127](i19, i35, i28, i3, i4) | 0;
 HEAP32[i36 >> 2] = i34;
 do if (!i34) {
  if ((HEAP32[i35 + 148 >> 2] | 0) != 1330926671) {
   HEAP32[i36 >> 2] = 2;
   i37 = 2;
   STACKTOP = i38;
   return i37 | 0;
  }
  if ((i28 | 0) < 0) {
   i37 = 0;
   STACKTOP = i38;
   return i37 | 0;
  }
  i5 = i35 + 508 | 0;
  i34 = FUNCTION_TABLE_iiiii[HEAP32[i5 >> 2] & 127](i35, 1751474532, i19, 0) | 0;
  HEAP32[i36 >> 2] = i34;
  if (!i34) {
   i1 = FUNCTION_TABLE_iiiiii[HEAP32[i2 + 8 >> 2] & 127](i19, i35, i28, i3, i4) | 0;
   HEAP32[i36 >> 2] = i1;
   if (!i1) i2 = 0; else {
    i37 = i1;
    STACKTOP = i38;
    return i37 | 0;
   }
  } else {
   i1 = FUNCTION_TABLE_iii[HEAP32[i2 + 32 >> 2] & 255](i35, i19) | 0;
   HEAP32[i36 >> 2] = i1;
   if (!i1) i2 = 1; else {
    i37 = i1;
    STACKTOP = i38;
    return i37 | 0;
   }
  }
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i5 >> 2] & 127](i35, 1128678944, i19, 0) | 0;
  HEAP32[i36 >> 2] = i1;
  if (!i1) i33 = 1; else {
   i37 = i1;
   STACKTOP = i38;
   return i37 | 0;
  }
 } else {
  i1 = _FT_Stream_Seek(i19, 0) | 0;
  HEAP32[i36 >> 2] = i1;
  if (!i1) {
   HEAP32[i36 >> 2] = 0;
   i33 = 0;
   i2 = 1;
   break;
  } else {
   i37 = i1;
   STACKTOP = i38;
   return i37 | 0;
  }
 } while (0);
 i32 = HEAP32[i35 + 100 >> 2] | 0;
 i34 = _ft_mem_alloc(i32, 2980, i36) | 0;
 i1 = HEAP32[i36 >> 2] | 0;
 if (i1 | 0) {
  i37 = i1;
  STACKTOP = i38;
  return i37 | 0;
 }
 HEAP32[i35 + 656 >> 2] = i34;
 i18 = i19 + 28 | 0;
 i4 = HEAP32[i18 >> 2] | 0;
 i27 = i34 + 8 | 0;
 _memset(i27 | 0, 0, 2972) | 0;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 HEAP32[i24 + 12 >> 2] = 0;
 HEAP32[i24 + 16 >> 2] = 0;
 HEAP32[i24 + 20 >> 2] = 0;
 HEAP32[i24 + 24 >> 2] = 0;
 HEAP32[i24 + 28 >> 2] = 0;
 HEAP32[i34 >> 2] = i19;
 HEAP32[i34 + 4 >> 2] = i4;
 i26 = i34 + 1324 | 0;
 i17 = _FT_Stream_Pos(i19) | 0;
 i21 = _FT_Stream_ReadFields(i19, 115160, i34) | 0;
 HEAP32[i23 >> 2] = i21;
 L32 : do if (!i21) {
  if ((HEAP8[i34 + 16 >> 0] | 0) == 1) {
   i21 = HEAP8[i34 + 18 >> 0] | 0;
   i1 = i21 & 255;
   if ((i21 & 255) >= 4) if ((HEAPU8[i34 + 19 >> 0] | 0) <= 4) {
    i21 = _FT_Stream_Skip(i19, i1 + -4 | 0) | 0;
    HEAP32[i23 >> 2] = i21;
    if (i21 | 0) break;
    i21 = i34 + 20 | 0;
    i20 = _cff_index_init(i21, i19, 0) | 0;
    HEAP32[i23 >> 2] = i20;
    if (i20 | 0) break;
    i3 = i34 + 1208 | 0;
    i20 = _cff_index_init(i3, i19, 0) | 0;
    HEAP32[i23 >> 2] = i20;
    if (i20 | 0) break;
    i20 = _cff_index_init(i24, i19, 1) | 0;
    HEAP32[i23 >> 2] = i20;
    if (i20 | 0) break;
    i8 = i34 + 84 | 0;
    i20 = _cff_index_init(i8, i19, 1) | 0;
    HEAP32[i23 >> 2] = i20;
    if (i20 | 0) break;
    i20 = _cff_index_get_pointers(i24, i34 + 1316 | 0, i34 + 1320 | 0) | 0;
    HEAP32[i23 >> 2] = i20;
    if (i20 | 0) break;
    HEAP32[i34 + 1312 >> 2] = HEAP32[i24 + 8 >> 2];
    i1 = HEAP32[i34 + 28 >> 2] | 0;
    do if (!(i2 << 24 >> 24)) if (i1 >>> 0 > 1) {
     HEAP32[i23 >> 2] = 3;
     break L32;
    } else i20 = 0; else if (i1 >>> 0 > i28 >>> 0) {
     HEAP32[i27 >> 2] = i1;
     i20 = i28;
     break;
    } else {
     HEAP32[i23 >> 2] = 6;
     break L32;
    } while (0);
    if ((i28 | 0) < 0) break;
    i16 = _cff_subfont_load(i26, i3, i20, i19, i17, i7) | 0;
    HEAP32[i23 >> 2] = i16;
    if (i16 | 0) break;
    i6 = i34 + 1436 | 0;
    i16 = _FT_Stream_Seek(i19, (HEAP32[i6 >> 2] | 0) + i17 | 0) | 0;
    HEAP32[i23 >> 2] = i16;
    if (i16 | 0) break;
    i16 = _cff_index_init(i34 + 1176 | 0, i19, 0) | 0;
    HEAP32[i23 >> 2] = i16;
    if (i16 | 0) break;
    i16 = i34 + 1456 | 0;
    L56 : do if ((HEAP32[i16 >> 2] | 0) == 65535) HEAP32[i34 + 1896 >> 2] = 0; else {
     i15 = _FT_Stream_Seek(i19, (HEAP32[i34 + 1488 >> 2] | 0) + i17 | 0) | 0;
     HEAP32[i23 >> 2] = i15;
     do if (!i15) {
      i15 = _cff_index_init(i29, i19, 0) | 0;
      HEAP32[i23 >> 2] = i15;
      if (i15 | 0) break;
      i5 = i29 + 8 | 0;
      i1 = HEAP32[i5 >> 2] | 0;
      L62 : do if (i1 >>> 0 > 256) i1 = 0; else {
       HEAP32[i34 + 1896 >> 2] = i1;
       i4 = _ft_mem_realloc(i4, 572, 0, i1, 0, i23) | 0;
       i1 = HEAP32[i23 >> 2] | 0;
       if (i1 | 0) break;
       i3 = HEAP32[i5 >> 2] | 0;
       if (i3 | 0) {
        i1 = 0;
        do {
         HEAP32[i34 + 1900 + (i1 << 2) >> 2] = i4 + (i1 * 572 | 0);
         i1 = i1 + 1 | 0;
        } while ((i1 | 0) != (i3 | 0));
        i3 = 0;
        do {
         i1 = _cff_subfont_load(HEAP32[i34 + 1900 + (i3 << 2) >> 2] | 0, i29, i3, i19, i17, i7) | 0;
         HEAP32[i23 >> 2] = i1;
         i3 = i3 + 1 | 0;
         if (i1 | 0) break L62;
        } while (i3 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0);
       }
       i1 = HEAP32[i34 + 1184 >> 2] | 0;
       i3 = _FT_Stream_Seek(i19, (HEAP32[i34 + 1492 >> 2] | 0) + i17 | 0) | 0;
       HEAP32[i37 >> 2] = i3;
       L72 : do if (!i3) {
        i3 = _FT_Stream_ReadChar(i19, i37) | 0;
        i4 = HEAP32[i37 >> 2] | 0;
        if (i4 | 0) {
         i1 = i4;
         break;
        }
        HEAP8[i34 + 2924 >> 0] = i3;
        HEAP32[i34 + 2944 >> 2] = 0;
        switch (i3 << 24 >> 24) {
        case 0:
         break;
        case 3:
         {
          i31 = 48;
          break;
         }
        default:
         {
          HEAP32[i37 >> 2] = 3;
          i1 = 3;
          break L72;
         }
        }
        do if ((i31 | 0) == 48) {
         i3 = _FT_Stream_ReadUShort(i19, i37) | 0;
         i1 = HEAP32[i37 >> 2] | 0;
         if (i1 | 0) break L72;
         if (!(i3 << 16 >> 16)) {
          HEAP32[i37 >> 2] = 3;
          i1 = 3;
          break L72;
         } else {
          i1 = ((i3 & 65535) * 3 | 0) + 2 | 0;
          break;
         }
        } while (0);
        HEAP32[i34 + 2936 >> 2] = i1;
        i1 = _FT_Stream_ExtractFrame(i19, i1, i34 + 2932 | 0) | 0;
        HEAP32[i37 >> 2] = i1;
       } else i1 = i3; while (0);
       HEAP32[i23 >> 2] = i1;
      } while (0);
      i4 = HEAP32[i29 >> 2] | 0;
      if (i4) {
       i1 = HEAP32[i4 + 28 >> 2] | 0;
       i3 = i29 + 28 | 0;
       if (HEAP32[i3 >> 2] | 0) _FT_Stream_ReleaseFrame(i4, i3);
       _ft_mem_free(i1, HEAP32[i29 + 24 >> 2] | 0);
       HEAP32[i29 >> 2] = 0;
       HEAP32[i29 + 4 >> 2] = 0;
       HEAP32[i29 + 8 >> 2] = 0;
       HEAP32[i29 + 12 >> 2] = 0;
       HEAP32[i29 + 16 >> 2] = 0;
       HEAP32[i29 + 20 >> 2] = 0;
       HEAP32[i29 + 24 >> 2] = 0;
       HEAP32[i29 + 28 >> 2] = 0;
       i1 = HEAP32[i23 >> 2] | 0;
      }
      if (i1 | 0) break;
      break L56;
     } while (0);
     break L32;
    } while (0);
    if (!(HEAP32[i6 >> 2] | 0)) {
     HEAP32[i23 >> 2] = 3;
     break;
    }
    i15 = i34 + 12 | 0;
    HEAP32[i15 >> 2] = HEAP32[i34 + 1184 >> 2];
    i14 = _cff_index_get_pointers(i8, i34 + 1308 | 0, 0) | 0;
    HEAP32[i23 >> 2] = i14;
    if (i14 | 0) break;
    i12 = HEAP32[i15 >> 2] | 0;
    L99 : do if (i12 | 0) {
     i10 = i2 << 24 >> 24 != 0;
     i11 = (HEAP32[i16 >> 2] | 0) != 65535;
     i13 = i34 + 1152 | 0;
     i3 = HEAP32[i34 + 1428 >> 2] | 0;
     i14 = HEAP32[i18 >> 2] | 0;
     HEAP32[i29 >> 2] = 0;
     L101 : do if (i3 >>> 0 > 2) {
      i31 = i3 + i17 | 0;
      i1 = i34 + 1156 | 0;
      HEAP32[i1 >> 2] = i31;
      i31 = _FT_Stream_Seek(i19, i31) | 0;
      HEAP32[i29 >> 2] = i31;
      if (i31 | 0) {
       i31 = 114;
       break;
      }
      i31 = (_FT_Stream_ReadChar(i19, i29) | 0) & 255;
      HEAP32[i13 >> 2] = i31;
      if (HEAP32[i29 >> 2] | 0) {
       i31 = 114;
       break;
      }
      i3 = _ft_mem_realloc(i14, 2, 0, i12, 0, i29) | 0;
      i9 = i34 + 1160 | 0;
      HEAP32[i9 >> 2] = i3;
      if (HEAP32[i29 >> 2] | 0) {
       i31 = 114;
       break;
      }
      HEAP16[i3 >> 1] = 0;
      switch (HEAP32[i13 >> 2] | 0) {
      case 0:
       {
        i31 = _FT_Stream_EnterFrame(i19, (i12 << 1) + -2 | 0) | 0;
        HEAP32[i29 >> 2] = i31;
        if (i31 | 0) {
         i31 = 114;
         break L101;
        }
        if (i12 >>> 0 > 1) {
         i1 = 1;
         do {
          i31 = _FT_Stream_GetUShort(i19) | 0;
          HEAP16[(HEAP32[i9 >> 2] | 0) + (i1 << 1) >> 1] = i31;
          i1 = i1 + 1 | 0;
         } while ((i1 | 0) != (i12 | 0));
        }
        _FT_Stream_ExitFrame(i19);
        i31 = 100;
        break L101;
       }
      case 2:
      case 1:
       {
        if (i12 >>> 0 > 1) i3 = 1; else {
         i31 = 100;
         break L101;
        }
        while (1) {
         i7 = _FT_Stream_ReadUShort(i19, i29) | 0;
         if (HEAP32[i29 >> 2] | 0) {
          i31 = 114;
          break L101;
         }
         if ((HEAP32[i13 >> 2] | 0) == 2) {
          i4 = (_FT_Stream_ReadUShort(i19, i29) | 0) & 65535;
          if (HEAP32[i29 >> 2] | 0) {
           i31 = 114;
           break L101;
          }
         } else {
          i4 = (_FT_Stream_ReadChar(i19, i29) | 0) & 255;
          if (HEAP32[i29 >> 2] | 0) {
           i31 = 114;
           break L101;
          }
         }
         i5 = i7 & 65535;
         i5 = i5 >>> 0 > (i4 ^ 65535) >>> 0 ? i5 ^ 65535 : i4;
         if (i3 >>> 0 < i12 >>> 0) {
          i8 = HEAP32[i9 >> 2] | 0;
          i6 = 0;
          i4 = i7;
          while (1) {
           HEAP16[i8 + (i3 << 1) >> 1] = i4;
           i6 = i6 + 1 | 0;
           i3 = i3 + 1 | 0;
           if (i6 >>> 0 > i5 >>> 0 | i3 >>> 0 >= i12 >>> 0) break; else i4 = i4 + 1 << 16 >> 16;
          }
         }
         if (i3 >>> 0 >= i12 >>> 0) {
          i31 = 100;
          break;
         }
        }
        break;
       }
      default:
       {
        HEAP32[i29 >> 2] = 3;
        i31 = 114;
        break L101;
       }
      }
     } else {
      i1 = i34 + 1156 | 0;
      HEAP32[i1 >> 2] = i3;
      switch (i3 | 0) {
      case 0:
       {
        if (i12 >>> 0 > 229) {
         HEAP32[i29 >> 2] = 3;
         i31 = 114;
         break L101;
        }
        i3 = _ft_mem_realloc(i14, 2, 0, i12, 0, i29) | 0;
        HEAP32[i34 + 1160 >> 2] = i3;
        if (HEAP32[i29 >> 2] | 0) {
         i31 = 114;
         break L101;
        }
        _memcpy(i3 | 0, 115184, i12 << 1 | 0) | 0;
        i31 = 100;
        break L101;
       }
      case 1:
       {
        if (i12 >>> 0 > 166) {
         HEAP32[i29 >> 2] = 3;
         i31 = 114;
         break L101;
        }
        i3 = _ft_mem_realloc(i14, 2, 0, i12, 0, i29) | 0;
        HEAP32[i34 + 1160 >> 2] = i3;
        if (HEAP32[i29 >> 2] | 0) {
         i31 = 114;
         break L101;
        }
        _memcpy(i3 | 0, 115642, i12 << 1 | 0) | 0;
        i31 = 100;
        break L101;
       }
      case 2:
       {
        if (i12 >>> 0 > 87) {
         HEAP32[i29 >> 2] = 3;
         i31 = 114;
         break L101;
        }
        i3 = _ft_mem_realloc(i14, 2, 0, i12, 0, i29) | 0;
        HEAP32[i34 + 1160 >> 2] = i3;
        if (HEAP32[i29 >> 2] | 0) {
         i31 = 114;
         break L101;
        }
        _memcpy(i3 | 0, 115974, i12 << 1 | 0) | 0;
        i31 = 100;
        break L101;
       }
      default:
       {
        HEAP32[i29 >> 2] = 3;
        i31 = 114;
        break L101;
       }
      }
     } while (0);
     do if ((i31 | 0) == 100) {
      if (i10 & i11) {
       HEAP32[i37 >> 2] = 0;
       i7 = i34 + 1168 | 0;
       do if (!(HEAP32[i7 >> 2] | 0)) {
        i6 = i34 + 1160 | 0;
        i4 = HEAP32[i6 >> 2] | 0;
        i1 = 0;
        i3 = 0;
        do {
         i11 = HEAP16[i4 + (i1 << 1) >> 1] | 0;
         i3 = (i11 & 65535) > (i3 & 65535) ? i11 : i3;
         i1 = i1 + 1 | 0;
        } while ((i1 | 0) != (i12 | 0));
        i4 = i3 & 65535;
        i5 = _ft_mem_realloc(i14, 2, 0, i4 + 1 | 0, 0, i37) | 0;
        HEAP32[i34 + 1164 >> 2] = i5;
        i1 = HEAP32[i37 >> 2] | 0;
        if (i1 | 0) break;
        if ((i12 | 0) > 0) {
         i3 = HEAP32[i6 >> 2] | 0;
         i1 = i12;
         do {
          i11 = i1;
          i1 = i1 + -1 | 0;
          HEAP16[i5 + (HEAPU16[i3 + (i1 << 1) >> 1] << 1) >> 1] = i1;
         } while ((i11 | 0) > 1);
        }
        HEAP32[i7 >> 2] = i4;
        HEAP32[i34 + 1172 >> 2] = i12;
        i1 = 0;
       } else i1 = 0; while (0);
       HEAP32[i29 >> 2] = i1;
      } else i1 = HEAP32[i29 >> 2] | 0;
      if (!i1) {
       HEAP32[i23 >> 2] = 0;
       break;
      } else {
       i1 = i34 + 1156 | 0;
       i31 = 114;
       break;
      }
     } while (0);
     if ((i31 | 0) == 114) {
      i12 = i34 + 1160 | 0;
      _ft_mem_free(i14, HEAP32[i12 >> 2] | 0);
      HEAP32[i12 >> 2] = 0;
      i11 = i34 + 1164 | 0;
      _ft_mem_free(i14, HEAP32[i11 >> 2] | 0);
      HEAP32[i11 >> 2] = 0;
      HEAP32[i13 >> 2] = 0;
      HEAP32[i1 >> 2] = 0;
      HEAP32[i12 >> 2] = 0;
      i14 = HEAP32[i29 >> 2] | 0;
      HEAP32[i23 >> 2] = i14;
      if (i14 | 0) break L32;
     }
     if ((HEAP32[i16 >> 2] | 0) != 65535) break;
     i11 = HEAP32[i15 >> 2] | 0;
     i3 = HEAP32[i34 + 1432 >> 2] | 0;
     HEAP32[i29 >> 2] = 0;
     i10 = i34 + 1160 | 0;
     L170 : do if (!(HEAP32[i10 >> 2] | 0)) {
      HEAP32[i29 >> 2] = 3;
      i1 = 3;
     } else {
      i1 = 0;
      do {
       HEAP16[i34 + 128 + (i1 << 1) >> 1] = 0;
       HEAP16[i34 + 640 + (i1 << 1) >> 1] = 0;
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) != 256);
      L175 : do if (i3 >>> 0 > 1) {
       i1 = i3 + i17 | 0;
       HEAP32[i34 + 120 >> 2] = i1;
       i1 = _FT_Stream_Seek(i19, i1) | 0;
       HEAP32[i29 >> 2] = i1;
       if (i1 | 0) break L170;
       i1 = (_FT_Stream_ReadChar(i19, i29) | 0) & 255;
       i9 = i34 + 116 | 0;
       HEAP32[i9 >> 2] = i1;
       i1 = HEAP32[i29 >> 2] | 0;
       if (i1 | 0) break L170;
       i3 = _FT_Stream_ReadChar(i19, i29) | 0;
       i8 = i3 & 255;
       i1 = HEAP32[i29 >> 2] | 0;
       if (i1 | 0) break L170;
       L180 : do switch (HEAP32[i9 >> 2] & 127) {
       case 0:
        {
         HEAP32[i34 + 124 >> 2] = i8 + 1;
         i1 = _FT_Stream_EnterFrame(i19, i8) | 0;
         HEAP32[i29 >> 2] = i1;
         if (i1 | 0) break L170;
         if (i3 << 24 >> 24) {
          i1 = HEAP32[i19 + 32 >> 2] | 0;
          i3 = 1;
          while (1) {
           i4 = HEAPU8[i1 >> 0] | 0;
           if (i3 >>> 0 < i11 >>> 0) {
            HEAP16[i34 + 640 + (i4 << 1) >> 1] = i3;
            HEAP16[i34 + 128 + (i4 << 1) >> 1] = HEAP16[(HEAP32[i10 >> 2] | 0) + (i3 << 1) >> 1] | 0;
           }
           i3 = i3 + 1 | 0;
           if (i3 >>> 0 > i8 >>> 0) break; else i1 = i1 + 1 | 0;
          }
         }
         _FT_Stream_ExitFrame(i19);
         break;
        }
       case 1:
        {
         i7 = i34 + 124 | 0;
         HEAP32[i7 >> 2] = 0;
         if (!(i3 << 24 >> 24)) break L180; else {
          i5 = 1;
          i6 = 0;
         }
         do {
          i4 = (_FT_Stream_ReadChar(i19, i29) | 0) & 255;
          i1 = HEAP32[i29 >> 2] | 0;
          if (i1 | 0) break L170;
          i3 = _FT_Stream_ReadChar(i19, i29) | 0;
          i1 = HEAP32[i29 >> 2] | 0;
          if (i1 | 0) break L170;
          i1 = (i3 & 255) + 1 | 0;
          if (i1 >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) HEAP32[i7 >> 2] = i1;
          i3 = i5;
          i5 = i1 + i5 | 0;
          if (i3 >>> 0 < i5 >>> 0) {
           i1 = i4;
           while (1) {
            if (i3 >>> 0 < i11 >>> 0 & i1 >>> 0 < 256) {
             HEAP16[i34 + 640 + (i1 << 1) >> 1] = i3;
             HEAP16[i34 + 128 + (i1 << 1) >> 1] = HEAP16[(HEAP32[i10 >> 2] | 0) + (i3 << 1) >> 1] | 0;
            }
            i3 = i3 + 1 | 0;
            if ((i3 | 0) == (i5 | 0)) break; else i1 = i1 + 1 | 0;
           }
          }
          i6 = i6 + 1 | 0;
         } while (i6 >>> 0 < i8 >>> 0);
         if ((HEAP32[i7 >> 2] | 0) >>> 0 <= 256) break L180;
         HEAP32[i7 >> 2] = 256;
         break;
        }
       default:
        {
         HEAP32[i29 >> 2] = 3;
         i1 = 3;
         break L170;
        }
       } while (0);
       do if (!(HEAP32[i9 >> 2] & 128)) i1 = HEAP32[i29 >> 2] | 0; else {
        i18 = _FT_Stream_ReadChar(i19, i29) | 0;
        i7 = i18 & 255;
        i1 = HEAP32[i29 >> 2] | 0;
        if (!(i18 << 24 >> 24 != 0 & (i1 | 0) == 0)) break;
        if (!i11) {
         i4 = 0;
         while (1) {
          i5 = (_FT_Stream_ReadChar(i19, i29) | 0) & 255;
          i1 = HEAP32[i29 >> 2] | 0;
          if (i1 | 0) break L170;
          i3 = _FT_Stream_ReadUShort(i19, i29) | 0;
          i1 = HEAP32[i29 >> 2] | 0;
          if (i1 | 0) break L170;
          HEAP16[i34 + 128 + (i5 << 1) >> 1] = i3;
          i4 = i4 + 1 | 0;
          if (i4 >>> 0 >= i7 >>> 0) break L175;
         }
        } else i5 = 0;
        while (1) {
         i6 = (_FT_Stream_ReadChar(i19, i29) | 0) & 255;
         i1 = HEAP32[i29 >> 2] | 0;
         if (i1 | 0) break L170;
         i4 = _FT_Stream_ReadUShort(i19, i29) | 0;
         i1 = HEAP32[i29 >> 2] | 0;
         if (i1 | 0) break L170;
         HEAP16[i34 + 128 + (i6 << 1) >> 1] = i4;
         i3 = HEAP32[i10 >> 2] | 0;
         i1 = 0;
         do {
          if ((HEAP16[i3 + (i1 << 1) >> 1] | 0) == i4 << 16 >> 16) {
           i31 = 153;
           break;
          }
          i1 = i1 + 1 | 0;
         } while (i1 >>> 0 < i11 >>> 0);
         if ((i31 | 0) == 153) {
          i31 = 0;
          HEAP16[i34 + 640 + (i6 << 1) >> 1] = i1;
         }
         i5 = i5 + 1 | 0;
         if (i5 >>> 0 >= i7 >>> 0) break L175;
        }
       } while (0);
       HEAP32[i23 >> 2] = i1;
       if (!i1) break L99; else break L32;
      } else {
       switch (i3 | 0) {
       case 0:
        {
         _memcpy(i34 + 128 | 0, 114648, 512) | 0;
         break;
        }
       case 1:
        {
         _memcpy(i34 + 128 | 0, 116148, 512) | 0;
         break;
        }
       default:
        {
         HEAP32[i29 >> 2] = 3;
         i1 = 3;
         break L170;
        }
       }
       i8 = i34 + 124 | 0;
       HEAP32[i8 >> 2] = 0;
       i5 = HEAP32[i18 >> 2] | 0;
       HEAP32[i37 >> 2] = 0;
       i6 = i34 + 1168 | 0;
       i1 = HEAP32[i6 >> 2] | 0;
       if (!i1) {
        if (!i11) i7 = 0; else {
         i4 = HEAP32[i10 >> 2] | 0;
         i1 = 0;
         i3 = 0;
         do {
          i19 = HEAP16[i4 + (i1 << 1) >> 1] | 0;
          i3 = (i19 & 65535) > (i3 & 65535) ? i19 : i3;
          i1 = i1 + 1 | 0;
         } while ((i1 | 0) != (i11 | 0));
         i7 = i3 & 65535;
        }
        i4 = _ft_mem_realloc(i5, 2, 0, i7 + 1 | 0, 0, i37) | 0;
        i5 = i34 + 1164 | 0;
        HEAP32[i5 >> 2] = i4;
        i1 = HEAP32[i37 >> 2] | 0;
        if (i1 | 0) {
         HEAP32[i29 >> 2] = i1;
         break L170;
        }
        if ((i11 | 0) > 0) {
         i3 = HEAP32[i10 >> 2] | 0;
         i1 = i11;
         do {
          i19 = i1;
          i1 = i1 + -1 | 0;
          HEAP16[i4 + (HEAPU16[i3 + (i1 << 1) >> 1] << 1) >> 1] = i1;
         } while ((i19 | 0) > 1);
        }
        HEAP32[i6 >> 2] = i7;
        HEAP32[i34 + 1172 >> 2] = i11;
       } else {
        i5 = i34 + 1164 | 0;
        i7 = i1;
       }
       HEAP32[i29 >> 2] = 0;
       i1 = 0;
       do {
        i6 = i34 + 128 + (i1 << 1) | 0;
        i3 = HEAP16[i6 >> 1] | 0;
        do if (!(i3 << 16 >> 16)) i31 = 176; else {
         i3 = i3 & 65535;
         if (i7 >>> 0 < i3 >>> 0) {
          i31 = 176;
          break;
         }
         i4 = HEAP16[(HEAP32[i5 >> 2] | 0) + (i3 << 1) >> 1] | 0;
         i3 = i1 + 1 | 0;
         if (!(i4 << 16 >> 16)) {
          i31 = 179;
          break;
         }
         HEAP16[i34 + 640 + (i1 << 1) >> 1] = i4;
         HEAP32[i8 >> 2] = i3;
         i1 = i3;
        } while (0);
        if ((i31 | 0) == 176) {
         i3 = i1 + 1 | 0;
         i31 = 179;
        }
        if ((i31 | 0) == 179) {
         i31 = 0;
         HEAP16[i34 + 640 + (i1 << 1) >> 1] = 0;
         HEAP16[i6 >> 1] = 0;
         i1 = i3;
        }
       } while (i1 >>> 0 < 256);
      } while (0);
      HEAP32[i23 >> 2] = 0;
      break L99;
     } while (0);
     HEAP32[i23 >> 2] = i1;
     break L32;
    } while (0);
    i1 = HEAP32[(HEAP32[i21 >> 2] | 0) + 28 >> 2] | 0;
    i20 = _cff_index_access_element(i21, i20, i37, i29) | 0;
    HEAP32[i30 >> 2] = i20;
    do if (!i20) {
     i3 = HEAP32[i29 >> 2] | 0;
     i1 = _ft_mem_alloc(i1, i3 + 1 | 0, i30) | 0;
     if (!(HEAP32[i30 >> 2] | 0)) {
      _memcpy(i1 | 0, HEAP32[i37 >> 2] | 0, i3 | 0) | 0;
      HEAP8[i1 + i3 >> 0] = 0;
     }
     if (HEAP32[i34 + 48 >> 2] | 0) break;
     _FT_Stream_ReleaseFrame(HEAP32[i21 >> 2] | 0, i37);
    } else i1 = 0; while (0);
    HEAP32[i34 + 1304 >> 2] = i1;
    break;
   }
  }
  HEAP32[i23 >> 2] = 2;
 } while (0);
 i1 = HEAP32[i24 >> 2] | 0;
 if (i1 | 0) {
  i3 = HEAP32[i1 + 28 >> 2] | 0;
  i4 = i24 + 28 | 0;
  if (HEAP32[i4 >> 2] | 0) _FT_Stream_ReleaseFrame(i1, i4);
  _ft_mem_free(i3, HEAP32[i24 + 24 >> 2] | 0);
  HEAP32[i24 >> 2] = 0;
  HEAP32[i24 + 4 >> 2] = 0;
  HEAP32[i24 + 8 >> 2] = 0;
  HEAP32[i24 + 12 >> 2] = 0;
  HEAP32[i24 + 16 >> 2] = 0;
  HEAP32[i24 + 20 >> 2] = 0;
  HEAP32[i24 + 24 >> 2] = 0;
  HEAP32[i24 + 28 >> 2] = 0;
 }
 i1 = HEAP32[i23 >> 2] | 0;
 HEAP32[i36 >> 2] = i1;
 if (i1 | 0) {
  i37 = i1;
  STACKTOP = i38;
  return i37 | 0;
 }
 HEAP32[i34 + 2952 >> 2] = i22;
 i14 = i34 + 2956 | 0;
 HEAP32[i14 >> 2] = i25;
 HEAP32[i35 + 4 >> 2] = i28;
 i12 = i35 + 16 | 0;
 HEAP32[i12 >> 2] = HEAP32[i34 + 12 >> 2];
 i15 = i34 + 1456 | 0;
 if (!((i25 | 0) != 0 | (HEAP32[i15 >> 2] | 0) != 65535)) {
  HEAP32[i36 >> 2] = 11;
  i37 = 11;
  STACKTOP = i38;
  return i37 | 0;
 }
 i10 = i34 + 1388 | 0;
 if (!(HEAP8[i10 >> 0] | 0)) {
  if (!(i2 << 24 >> 24)) i1 = HEAPU16[i35 + 68 >> 1] | 0; else i1 = 1e3;
  i11 = i34 + 1392 | 0;
  HEAP32[i11 >> 2] = i1;
 } else i11 = i34 + 1392 | 0;
 i8 = i34 + 1372 | 0;
 i9 = i34 + 1396 | 0;
 i1 = i34 + 1384 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
 if ((i3 | 0) == 65536) {
  i4 = i34 + 1400 | 0;
  i1 = i4;
  i3 = i9;
  i4 = HEAP32[i4 >> 2] | 0;
 } else {
  i4 = _FT_DivFix(HEAP32[i11 >> 2] | 0, i3) | 0;
  HEAP32[i11 >> 2] = i4;
  i4 = _FT_DivFix(HEAP32[i8 >> 2] | 0, i3) | 0;
  HEAP32[i8 >> 2] = i4;
  i4 = i34 + 1380 | 0;
  i25 = _FT_DivFix(HEAP32[i4 >> 2] | 0, i3) | 0;
  HEAP32[i4 >> 2] = i25;
  i4 = i34 + 1376 | 0;
  i25 = _FT_DivFix(HEAP32[i4 >> 2] | 0, i3) | 0;
  HEAP32[i4 >> 2] = i25;
  i4 = _FT_DivFix(HEAP32[i1 >> 2] | 0, i3) | 0;
  HEAP32[i1 >> 2] = i4;
  i1 = _FT_DivFix(HEAP32[i9 >> 2] | 0, i3) | 0;
  HEAP32[i9 >> 2] = i1;
  i1 = i34 + 1400 | 0;
  i4 = _FT_DivFix(HEAP32[i1 >> 2] | 0, i3) | 0;
  HEAP32[i1 >> 2] = i4;
  i3 = i9;
 }
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] >> 16;
 HEAP32[i1 >> 2] = i4 >> 16;
 i1 = HEAP32[i34 + 1896 >> 2] | 0;
 if (i1 | 0) {
  i7 = i34 + 1900 | 0;
  do {
   i1 = i1 + -1 | 0;
   i6 = HEAP32[i7 + (i1 << 2) >> 2] | 0;
   do if (!(HEAP8[i6 + 64 >> 0] | 0)) {
    i24 = i6 + 48 | 0;
    HEAP32[i24 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i24 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
    HEAP32[i24 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
    HEAP32[i24 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
    i24 = i9;
    i25 = HEAP32[i24 + 4 >> 2] | 0;
    i3 = i6 + 72 | 0;
    HEAP32[i3 >> 2] = HEAP32[i24 >> 2];
    HEAP32[i3 + 4 >> 2] = i25;
    i3 = i6 + 68 | 0;
    HEAP32[i3 >> 2] = HEAP32[i11 >> 2];
   } else {
    if (!(HEAP8[i10 >> 0] | 0)) {
     i3 = i6 + 68 | 0;
     break;
    }
    i3 = HEAP32[i11 >> 2] | 0;
    i5 = i6 + 68 | 0;
    if (i3 >>> 0 > 1) {
     i4 = HEAP32[i5 >> 2] | 0;
     if (i4 >>> 0 > 1) i3 = HEAP32[(i3 >>> 0 < i4 >>> 0 ? i26 : i6) + 68 >> 2] | 0; else i3 = 1;
    } else i3 = 1;
    _FT_Matrix_Multiply_Scaled(i8, i6 + 48 | 0, i3);
    _FT_Vector_Transform_Scaled(i6 + 72 | 0, i8, i3);
    i3 = _FT_MulDiv(HEAP32[i5 >> 2] | 0, HEAP32[i11 >> 2] | 0, i3) | 0;
    HEAP32[i5 >> 2] = i3;
    i3 = i5;
   } while (0);
   i4 = i6 + 60 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   i5 = (i5 | 0) < 0 ? 0 - i5 | 0 : i5;
   if ((i5 | 0) == 65536) {
    i5 = i6 + 76 | 0;
    i3 = i6 + 72 | 0;
    i4 = i5;
    i5 = HEAP32[i5 >> 2] | 0;
   } else {
    i25 = _FT_DivFix(HEAP32[i3 >> 2] | 0, i5) | 0;
    HEAP32[i3 >> 2] = i25;
    i3 = i6 + 48 | 0;
    i25 = _FT_DivFix(HEAP32[i3 >> 2] | 0, i5) | 0;
    HEAP32[i3 >> 2] = i25;
    i3 = i6 + 56 | 0;
    i25 = _FT_DivFix(HEAP32[i3 >> 2] | 0, i5) | 0;
    HEAP32[i3 >> 2] = i25;
    i3 = i6 + 52 | 0;
    i25 = _FT_DivFix(HEAP32[i3 >> 2] | 0, i5) | 0;
    HEAP32[i3 >> 2] = i25;
    i3 = _FT_DivFix(HEAP32[i4 >> 2] | 0, i5) | 0;
    HEAP32[i4 >> 2] = i3;
    i3 = i6 + 72 | 0;
    i4 = _FT_DivFix(HEAP32[i3 >> 2] | 0, i5) | 0;
    HEAP32[i3 >> 2] = i4;
    i4 = i6 + 76 | 0;
    i5 = _FT_DivFix(HEAP32[i4 >> 2] | 0, i5) | 0;
    HEAP32[i4 >> 2] = i5;
   }
   HEAP32[i3 >> 2] = HEAP32[i3 >> 2] >> 16;
   HEAP32[i4 >> 2] = i5 >> 16;
  } while ((i1 | 0) != 0);
 }
 i13 = i2 << 24 >> 24 == 0;
 if (!i13) {
  HEAP32[i35 >> 2] = HEAP32[i27 >> 2];
  if ((HEAP32[i15 >> 2] | 0) == 65535) i1 = HEAP32[i34 + 1184 >> 2] | 0; else i1 = (HEAP32[i34 + 1168 >> 2] | 0) + 1 | 0;
  HEAP32[i12 >> 2] = i1;
  HEAP32[i35 + 52 >> 2] = HEAP32[i34 + 1408 >> 2] >> 16;
  i1 = HEAP32[i34 + 1412 >> 2] >> 16;
  HEAP32[i35 + 56 >> 2] = i1;
  HEAP32[i35 + 60 >> 2] = (HEAP32[i34 + 1416 >> 2] | 0) + 65535 >> 16;
  i27 = (HEAP32[i34 + 1420 >> 2] | 0) + 65535 >> 16;
  HEAP32[i35 + 64 >> 2] = i27;
  i3 = HEAP32[i11 >> 2] | 0;
  HEAP16[i35 + 68 >> 1] = i3;
  HEAP16[i35 + 70 >> 1] = i27;
  HEAP16[i35 + 72 >> 1] = i1;
  i3 = (((i3 & 65535) * 12 | 0) >>> 0) / 10 | 0;
  i1 = i27 - i1 | 0;
  HEAP16[i35 + 74 >> 1] = (i3 << 16 >> 16 | 0) < (i1 | 0) ? i1 : i3;
  HEAP16[i35 + 80 >> 1] = (HEAP32[i34 + 1356 >> 2] | 0) >>> 16;
  HEAP16[i35 + 82 >> 1] = (HEAP32[i34 + 1360 >> 2] | 0) >>> 16;
  i3 = i34 + 20 | 0;
  i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0;
  i28 = _cff_index_access_element(i3, i28, i37, i29) | 0;
  HEAP32[i30 >> 2] = i28;
  if (!i28) {
   i2 = HEAP32[i29 >> 2] | 0;
   i1 = _ft_mem_alloc(i1, i2 + 1 | 0, i30) | 0;
   if (!(HEAP32[i30 >> 2] | 0)) {
    _memcpy(i1 | 0, HEAP32[i37 >> 2] | 0, i2 | 0) | 0;
    HEAP8[i1 + i2 >> 0] = 0;
   }
   if (!(HEAP32[i34 + 48 >> 2] | 0)) {
    _FT_Stream_ReleaseFrame(HEAP32[i3 >> 2] | 0, i37);
    i3 = i1;
   } else i3 = i1;
  } else i3 = 0;
  i12 = i35 + 20 | 0;
  HEAP32[i12 >> 2] = i3;
  L334 : do if (!i3) {
   i1 = HEAP32[i34 + 1496 >> 2] | 0;
   if ((i1 | 0) == 65535) i31 = 276; else {
    if (i1 >>> 0 > 390) {
     i1 = i1 + -391 | 0;
     if ((HEAP32[i34 + 1312 >> 2] | 0) >>> 0 <= i1 >>> 0) {
      i31 = 276;
      break;
     }
     i1 = HEAP32[(HEAP32[i34 + 1316 >> 2] | 0) + (i1 << 2) >> 2] | 0;
    } else {
     i2 = HEAP32[i14 >> 2] | 0;
     if (!i2) {
      i31 = 276;
      break;
     }
     i1 = FUNCTION_TABLE_ii[HEAP32[i2 + 20 >> 2] & 63](i1) | 0;
    }
    if (!i1) i31 = 276; else {
     i31 = _ft_mem_strdup(i32, i1, i37) | 0;
     HEAP32[i12 >> 2] = i31;
     i31 = 276;
    }
   }
  } else {
   i1 = HEAP32[i34 + 1336 >> 2] | 0;
   do if ((i1 | 0) == 65535) {
    i11 = 0;
    i2 = i3;
   } else if (i1 >>> 0 > 390) {
    i1 = i1 + -391 | 0;
    if ((HEAP32[i34 + 1312 >> 2] | 0) >>> 0 <= i1 >>> 0) {
     i11 = 0;
     i2 = i3;
     break;
    }
    i11 = HEAP32[(HEAP32[i34 + 1316 >> 2] | 0) + (i1 << 2) >> 2] | 0;
    i2 = i3;
    break;
   } else {
    i2 = HEAP32[i14 >> 2] | 0;
    if (!i2) {
     i11 = 0;
     i2 = i3;
     break;
    }
    i11 = FUNCTION_TABLE_ii[HEAP32[i2 + 20 >> 2] & 63](i1) | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    break;
   } while (0);
   i1 = _strlen(i2) | 0;
   i5 = i2 + 6 | 0;
   i6 = i2 + 1 | 0;
   i7 = i2 + 2 | 0;
   i8 = i2 + 3 | 0;
   i9 = i2 + 4 | 0;
   i10 = i2 + 5 | 0;
   L353 : do if ((i1 | 0) > 5) {
    i4 = 1;
    i3 = i1 + 1 | 0;
    do {
     if ((HEAP8[i5 >> 0] | 0) != 43) break L353;
     i4 = ((HEAP8[i10 >> 0] | 0) + -65 & 255) < 26 & (((HEAP8[i9 >> 0] | 0) + -65 & 255) < 26 & (((HEAP8[i8 >> 0] | 0) + -65 & 255) < 26 & (((HEAP8[i7 >> 0] | 0) + -65 & 255) < 26 & (((HEAP8[i2 >> 0] | 0) + -65 & 255) < 26 ? ((HEAP8[i6 >> 0] | 0) + -65 & 255) < 26 : 0)))) ? i4 : 0;
     if (!(i4 << 24 >> 24)) break L353;
     if ((i3 | 0) > 7) {
      i1 = 7;
      do {
       HEAP8[i2 + (i1 + -7) >> 0] = HEAP8[i2 + i1 >> 0] | 0;
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) != (i3 | 0));
     }
     i3 = i3 + -7 | 0;
    } while ((i3 | 0) > 6);
   } while (0);
   i3 = HEAP32[i34 + 1340 >> 2] | 0;
   if ((i3 | 0) < 65535) switch (i3 | 0) {
   case 0:
    break;
   default:
    i31 = 244;
   } else switch (i3 | 0) {
   case 65535:
    {
     i1 = 0;
     i31 = 249;
     break;
    }
   default:
    i31 = 244;
   }
   do if ((i31 | 0) == 244) if (i3 >>> 0 > 390) {
    i1 = i3 + -391 | 0;
    if ((HEAP32[i34 + 1312 >> 2] | 0) >>> 0 <= i1 >>> 0) {
     i1 = 0;
     i31 = 249;
     break;
    }
    i1 = HEAP32[(HEAP32[i34 + 1316 >> 2] | 0) + (i1 << 2) >> 2] | 0;
    i31 = 249;
    break;
   } else {
    i1 = HEAP32[i14 >> 2] | 0;
    if (!i1) {
     i1 = 0;
     i31 = 249;
     break;
    }
    i1 = FUNCTION_TABLE_ii[HEAP32[i1 + 20 >> 2] & 63](i3) | 0;
    i31 = 249;
    break;
   } while (0);
   if ((i31 | 0) == 249) i2 = (i1 | 0) == 0 ? i2 : i1;
   if (!((i11 | 0) != 0 & (i2 | 0) != 0)) {
    i31 = 276;
    break;
   }
   i3 = HEAP8[i11 >> 0] | 0;
   if (!(i3 << 24 >> 24)) {
    i31 = 276;
    break;
   } else i1 = i11;
   L378 : while (1) {
    i5 = i3 << 24 >> 24 == 0;
    L380 : while (1) {
     i4 = HEAP8[i2 >> 0] | 0;
     if (i3 << 24 >> 24 == i4 << 24 >> 24) {
      i31 = 254;
      break;
     }
     switch (i3 << 24 >> 24) {
     case 45:
     case 32:
      break L380;
     default:
      {}
     }
     switch (i4 << 24 >> 24) {
     case 0:
      break L378;
     case 45:
     case 32:
      break;
     default:
      {
       i31 = 276;
       break L334;
      }
     }
     if (i5) {
      i31 = 276;
      break L334;
     } else i2 = i2 + 1 | 0;
    }
    if ((i31 | 0) == 254) {
     i31 = 0;
     i2 = i2 + 1 | 0;
    }
    i1 = i1 + 1 | 0;
    i3 = HEAP8[i1 >> 0] | 0;
    if (!(i3 << 24 >> 24)) {
     i31 = 276;
     break L334;
    }
   }
   i1 = _ft_mem_strdup(i32, i1, i37) | 0;
   i5 = HEAP32[i12 >> 2] | 0;
   i3 = _strlen(i5) | 0;
   i4 = _strlen(i1) | 0;
   L389 : do if ((i3 | 0) > (i4 | 0)) {
    if ((i4 | 0) >= 1) {
     i2 = 1;
     while (1) {
      if ((HEAP8[i5 + (i3 - i2) >> 0] | 0) != (HEAP8[i1 + (i4 - i2) >> 0] | 0)) break L334;
      if ((i4 | 0) > (i2 | 0)) i2 = i2 + 1 | 0; else break;
     }
    }
    i2 = i3 - i4 | 0;
    if ((i2 | 0) <= 1) break;
    L396 : while (1) {
     i3 = i2 + -1 | 0;
     switch (HEAP8[i5 + i3 >> 0] | 0) {
     case 43:
     case 95:
     case 32:
     case 45:
      break;
     default:
      break L396;
     }
     if ((i3 | 0) > 1) i2 = i3; else break L389;
    }
    HEAP8[i5 + i2 >> 0] = 0;
   } while (0);
   if (!i1) i31 = 276;
  } while (0);
  if ((i31 | 0) == 276) i1 = _ft_mem_strdup(i32, 281615, i37) | 0;
  i4 = i35 + 24 | 0;
  HEAP32[i4 >> 2] = i1;
  i3 = i33 << 24 >> 24 == 0 ? 2065 : 2073;
  i1 = i35 + 8 | 0;
  HEAP32[i1 >> 2] = ((HEAP8[i34 + 1348 >> 0] | 0) == 0 ? i3 : i3 | 4) | HEAP32[i1 >> 2];
  i1 = (HEAP32[i34 + 1352 >> 2] | 0) != 0 & 1;
  i3 = HEAP32[i34 + 1344 >> 2] | 0;
  do if ((i3 | 0) != 65535) {
   if (i3 >>> 0 > 390) {
    i2 = i3 + -391 | 0;
    if ((HEAP32[i34 + 1312 >> 2] | 0) >>> 0 <= i2 >>> 0) break;
    i2 = HEAP32[(HEAP32[i34 + 1316 >> 2] | 0) + (i2 << 2) >> 2] | 0;
   } else {
    i2 = HEAP32[i14 >> 2] | 0;
    if (!i2) break;
    i2 = FUNCTION_TABLE_ii[HEAP32[i2 + 20 >> 2] & 63](i3) | 0;
   }
   if (i2) {
    if (_strcmp(i2, 355510) | 0) if (_strcmp(i2, 280361) | 0) break;
    i1 = i1 | 2;
   }
  } while (0);
  do if (!(i1 & 2)) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2) {
    if (_strncmp(i2, 355510, 4) | 0) if (_strncmp(i2, 280361, 5) | 0) break;
    i1 = i1 | 2;
   }
  } while (0);
  HEAP32[i35 + 12 >> 2] = i1;
 }
 i1 = (HEAP32[i15 >> 2] | 0) == 65535;
 if (i1 | i13 ^ 1) {
  i33 = i35 + 8 | 0;
  HEAP32[i33 >> 2] = HEAP32[i33 >> 2] | (i1 ? 512 : 4096);
 }
 i5 = i35 + 36 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 L428 : do if (!i2) {
  i2 = 0;
  i31 = 300;
 } else {
  i3 = HEAP32[i35 + 40 >> 2] | 0;
  i1 = 0;
  while (1) {
   i4 = HEAP32[i3 + (i1 << 2) >> 2] | 0;
   switch (HEAP16[i4 + 8 >> 1] | 0) {
   case 0:
    {
     i31 = 306;
     break L428;
    }
   case 3:
    {
     if ((HEAP16[i4 + 10 >> 1] | 0) == 1) {
      i31 = 306;
      break L428;
     }
     break;
    }
   default:
    {}
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i2 >>> 0) {
    i31 = 300;
    break L428;
   }
  }
 } while (0);
 do if ((i31 | 0) == 300) {
  if (!i13) if ((HEAP32[i15 >> 2] | 0) != 65535) break;
  HEAP32[i37 >> 2] = i35;
  HEAP16[i37 + 8 >> 1] = 3;
  HEAP16[i37 + 10 >> 1] = 1;
  HEAP32[i37 + 4 >> 2] = 1970170211;
  i33 = _FT_CMap_New(7820, 0, i37, 0) | 0;
  HEAP32[i36 >> 2] = i33;
  if ((i33 | 0) == 0 | (i33 & 255 | 0) == 163) {
   HEAP32[i36 >> 2] = 0;
   i1 = i35 + 92 | 0;
   if (!(HEAP32[i1 >> 2] | 0)) if ((i2 | 0) == (HEAP32[i5 >> 2] | 0)) i31 = 306; else {
    HEAP32[i1 >> 2] = HEAP32[(HEAP32[i35 + 40 >> 2] | 0) + (i2 << 2) >> 2];
    i31 = 306;
   } else i31 = 306;
  }
 } while (0);
 if ((i31 | 0) == 306) if (HEAP32[i34 + 124 >> 2] | 0) {
  HEAP32[i37 >> 2] = i35;
  HEAP16[i37 + 8 >> 1] = 7;
  i1 = HEAP32[i34 + 120 >> 2] | 0;
  do if (!i1) {
   HEAP16[i37 + 10 >> 1] = 0;
   i1 = 1094995778;
  } else {
   i2 = i37 + 10 | 0;
   if ((i1 | 0) == 1) {
    HEAP16[i2 >> 1] = 1;
    i1 = 1094992453;
    break;
   } else {
    HEAP16[i2 >> 1] = 2;
    i1 = 1094992451;
    break;
   }
  } while (0);
  HEAP32[i37 + 4 >> 2] = i1;
  i37 = _FT_CMap_New(7860, 0, i37, 0) | 0;
  HEAP32[i36 >> 2] = i37;
 }
 i37 = HEAP32[i36 >> 2] | 0;
 STACKTOP = i38;
 return i37 | 0;
}

function _normal_contentTok(i34, i3, i36, i37) {
 i34 = i34 | 0;
 i3 = i3 | 0;
 i36 = i36 | 0;
 i37 = i37 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i35 = 0, i38 = 0;
 i38 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i33 = i38;
 if ((i3 | 0) == (i36 | 0)) {
  i37 = -4;
  STACKTOP = i38;
  return i37 | 0;
 }
 i35 = i34 + 76 | 0;
 L4 : do switch (HEAP8[i35 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0) {
 case 2:
  {
   i7 = i3 + 1 | 0;
   if ((i7 | 0) == (i36 | 0)) {
    i37 = -1;
    STACKTOP = i38;
    return i37 | 0;
   }
   switch (HEAP8[i35 + (HEAPU8[i7 >> 0] | 0) >> 0] | 0) {
   case 29:
    {
     HEAP32[i37 >> 2] = i7;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 24:
   case 22:
    {
     i8 = 1;
     break;
    }
   case 5:
    {
     if ((i36 - i7 | 0) < 2) {
      i37 = -2;
      STACKTOP = i38;
      return i37 | 0;
     }
     if (!(FUNCTION_TABLE_iii[HEAP32[i34 + 344 >> 2] & 255](i34, i7) | 0)) {
      HEAP32[i37 >> 2] = i7;
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     } else i8 = 2;
     break;
    }
   case 6:
    {
     if ((i36 - i7 | 0) < 3) {
      i37 = -2;
      STACKTOP = i38;
      return i37 | 0;
     }
     if (!(FUNCTION_TABLE_iii[HEAP32[i34 + 348 >> 2] & 255](i34, i7) | 0)) {
      HEAP32[i37 >> 2] = i7;
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     } else i8 = 3;
     break;
    }
   case 7:
    {
     if ((i36 - i7 | 0) < 4) {
      i37 = -2;
      STACKTOP = i38;
      return i37 | 0;
     }
     if (!(FUNCTION_TABLE_iii[HEAP32[i34 + 352 >> 2] & 255](i34, i7) | 0)) {
      HEAP32[i37 >> 2] = i7;
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     } else i8 = 4;
     break;
    }
   case 16:
    {
     i1 = i3 + 2 | 0;
     if ((i1 | 0) == (i36 | 0)) {
      i37 = -1;
      STACKTOP = i38;
      return i37 | 0;
     }
     switch (HEAP8[i35 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
     case 27:
      {
       i37 = _normal_scanComment(i34, i3 + 3 | 0, i36, i37) | 0;
       STACKTOP = i38;
       return i37 | 0;
      }
     case 20:
      {
       i1 = i3 + 3 | 0;
       if ((i36 - i1 | 0) < 6) {
        i37 = -1;
        STACKTOP = i38;
        return i37 | 0;
       }
       if ((HEAP8[i1 >> 0] | 0) == 67) {
        i1 = i3 + 4 | 0;
        if ((HEAP8[i1 >> 0] | 0) == 68) {
         i1 = i3 + 5 | 0;
         if ((HEAP8[i1 >> 0] | 0) == 65) {
          i1 = i3 + 6 | 0;
          if ((HEAP8[i1 >> 0] | 0) == 84) {
           i1 = i3 + 7 | 0;
           if ((HEAP8[i1 >> 0] | 0) == 65) {
            i1 = i3 + 8 | 0;
            i36 = (HEAP8[i1 >> 0] | 0) == 91;
            i2 = i36 ? 8 : 0;
            i1 = i36 ? i3 + 9 | 0 : i1;
           } else i2 = 0;
          } else i2 = 0;
         } else i2 = 0;
        } else i2 = 0;
       } else i2 = 0;
       HEAP32[i37 >> 2] = i1;
       i37 = i2;
       STACKTOP = i38;
       return i37 | 0;
      }
     default:
      {
       HEAP32[i37 >> 2] = i1;
       i37 = 0;
       STACKTOP = i38;
       return i37 | 0;
      }
     }
    }
   case 15:
    {
     i37 = _normal_scanPi(i34, i3 + 2 | 0, i36, i37) | 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 17:
    {
     i2 = i3 + 2 | 0;
     if ((i2 | 0) == (i36 | 0)) {
      i37 = -1;
      STACKTOP = i38;
      return i37 | 0;
     }
     switch (HEAP8[i35 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
     case 29:
      {
       HEAP32[i37 >> 2] = i2;
       i37 = 0;
       STACKTOP = i38;
       return i37 | 0;
      }
     case 24:
     case 22:
      {
       i1 = 1;
       break;
      }
     case 5:
      {
       if ((i36 - i2 | 0) < 2) {
        i37 = -2;
        STACKTOP = i38;
        return i37 | 0;
       }
       if (!(FUNCTION_TABLE_iii[HEAP32[i34 + 344 >> 2] & 255](i34, i2) | 0)) {
        HEAP32[i37 >> 2] = i2;
        i37 = 0;
        STACKTOP = i38;
        return i37 | 0;
       } else i1 = 2;
       break;
      }
     case 6:
      {
       if ((i36 - i2 | 0) < 3) {
        i37 = -2;
        STACKTOP = i38;
        return i37 | 0;
       }
       if (!(FUNCTION_TABLE_iii[HEAP32[i34 + 348 >> 2] & 255](i34, i2) | 0)) {
        HEAP32[i37 >> 2] = i2;
        i37 = 0;
        STACKTOP = i38;
        return i37 | 0;
       } else i1 = 3;
       break;
      }
     case 7:
      {
       if ((i36 - i2 | 0) < 4) {
        i37 = -2;
        STACKTOP = i38;
        return i37 | 0;
       }
       if (!(FUNCTION_TABLE_iii[HEAP32[i34 + 352 >> 2] & 255](i34, i2) | 0)) {
        HEAP32[i37 >> 2] = i2;
        i37 = 0;
        STACKTOP = i38;
        return i37 | 0;
       } else i1 = 4;
       break;
      }
     default:
      {
       HEAP32[i37 >> 2] = i2;
       i37 = 0;
       STACKTOP = i38;
       return i37 | 0;
      }
     }
     i3 = i2 + i1 | 0;
     if ((i3 | 0) == (i36 | 0)) {
      i37 = -1;
      STACKTOP = i38;
      return i37 | 0;
     }
     i2 = i36;
     i4 = i34 + 332 | 0;
     i5 = i34 + 336 | 0;
     i6 = i34 + 340 | 0;
     L87 : while (1) {
      switch (HEAP8[i35 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0) {
      case 29:
       {
        i10 = 45;
        break L87;
       }
      case 10:
      case 9:
      case 21:
       {
        i10 = 44;
        break L87;
       }
      case 11:
       {
        i10 = 60;
        break L87;
       }
      case 23:
      case 27:
      case 26:
      case 25:
      case 24:
      case 22:
       {
        i1 = 1;
        break;
       }
      case 5:
       {
        if ((i2 - i3 | 0) < 2) {
         i16 = -2;
         i10 = 256;
         break L87;
        }
        if (!(FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i34, i3) | 0)) {
         i10 = 48;
         break L87;
        } else i1 = 2;
        break;
       }
      case 6:
       {
        if ((i2 - i3 | 0) < 3) {
         i16 = -2;
         i10 = 256;
         break L87;
        }
        if (!(FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i34, i3) | 0)) {
         i10 = 51;
         break L87;
        } else i1 = 3;
        break;
       }
      case 7:
       {
        if ((i2 - i3 | 0) < 4) {
         i16 = -2;
         i10 = 256;
         break L87;
        }
        if (!(FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i34, i3) | 0)) {
         i10 = 54;
         break L87;
        } else i1 = 4;
        break;
       }
      default:
       {
        i10 = 61;
        break L87;
       }
      }
      i1 = i3 + i1 | 0;
      if ((i1 | 0) == (i36 | 0)) {
       i16 = -1;
       i10 = 256;
       break;
      } else i3 = i1;
     }
     if ((i10 | 0) == 44) {
      i1 = i3 + 1 | 0;
      if ((i1 | 0) == (i36 | 0)) {
       i37 = -1;
       STACKTOP = i38;
       return i37 | 0;
      } else i2 = i1;
      L105 : while (1) {
       switch (HEAP8[i35 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
       case 11:
        {
         i10 = 57;
         break L105;
        }
       case 10:
       case 9:
       case 21:
        break;
       default:
        {
         i10 = 58;
         break L105;
        }
       }
       i1 = i2 + 1 | 0;
       if ((i1 | 0) == (i36 | 0)) {
        i16 = -1;
        i10 = 256;
        break;
       } else {
        i3 = i2;
        i2 = i1;
       }
      }
      if ((i10 | 0) == 57) {
       HEAP32[i37 >> 2] = i3 + 2;
       i37 = 5;
       STACKTOP = i38;
       return i37 | 0;
      } else if ((i10 | 0) == 58) {
       HEAP32[i37 >> 2] = i2;
       i37 = 0;
       STACKTOP = i38;
       return i37 | 0;
      } else if ((i10 | 0) == 256) {
       STACKTOP = i38;
       return i16 | 0;
      }
     } else if ((i10 | 0) == 45) {
      HEAP32[i37 >> 2] = i3;
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     } else if ((i10 | 0) == 48) {
      HEAP32[i37 >> 2] = i3;
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     } else if ((i10 | 0) == 51) {
      HEAP32[i37 >> 2] = i3;
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     } else if ((i10 | 0) == 54) {
      HEAP32[i37 >> 2] = i3;
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     } else if ((i10 | 0) == 60) {
      HEAP32[i37 >> 2] = i3 + 1;
      i37 = 5;
      STACKTOP = i38;
      return i37 | 0;
     } else if ((i10 | 0) == 61) {
      HEAP32[i37 >> 2] = i3;
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     } else if ((i10 | 0) == 256) {
      STACKTOP = i38;
      return i16 | 0;
     }
     break;
    }
   default:
    {
     HEAP32[i37 >> 2] = i7;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   }
   i1 = i7 + i8 | 0;
   if ((i1 | 0) == (i36 | 0)) {
    i37 = -1;
    STACKTOP = i38;
    return i37 | 0;
   }
   i7 = i36;
   i8 = i34 + 332 | 0;
   i11 = i34 + 336 | 0;
   i12 = i34 + 340 | 0;
   i13 = i34 + 344 | 0;
   i14 = i34 + 348 | 0;
   i15 = i34 + 352 | 0;
   i2 = 0;
   i3 = i1;
   L130 : while (1) {
    L132 : do switch (HEAP8[i35 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0) {
    case 29:
     {
      i10 = 67;
      break L130;
     }
    case 10:
    case 9:
    case 21:
     {
      i10 = 66;
      break L130;
     }
    case 11:
     {
      i17 = i3;
      i10 = 203;
      break L130;
     }
    case 17:
     {
      i19 = i3;
      break L130;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 22:
     {
      i1 = 1;
      break;
     }
    case 5:
     {
      if ((i7 - i3 | 0) < 2) {
       i16 = -2;
       i10 = 256;
       break L130;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i8 >> 2] & 255](i34, i3) | 0)) {
       i10 = 70;
       break L130;
      } else i1 = 2;
      break;
     }
    case 6:
     {
      if ((i7 - i3 | 0) < 3) {
       i16 = -2;
       i10 = 256;
       break L130;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i11 >> 2] & 255](i34, i3) | 0)) {
       i10 = 73;
       break L130;
      } else i1 = 3;
      break;
     }
    case 7:
     {
      if ((i7 - i3 | 0) < 4) {
       i16 = -2;
       i10 = 256;
       break L130;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i12 >> 2] & 255](i34, i3) | 0)) {
       i10 = 76;
       break L130;
      } else i1 = 4;
      break;
     }
    case 23:
     {
      if (i2 | 0) {
       i10 = 78;
       break L130;
      }
      i9 = i3 + 1 | 0;
      if ((i9 | 0) == (i36 | 0)) {
       i16 = -1;
       i10 = 256;
       break L130;
      }
      switch (HEAP8[i35 + (HEAPU8[i9 >> 0] | 0) >> 0] | 0) {
      case 29:
       {
        i10 = 81;
        break L130;
       }
      case 24:
      case 22:
       {
        i2 = 1;
        i1 = 2;
        break L132;
       }
      case 5:
       {
        if ((i7 - i9 | 0) < 2) {
         i16 = -2;
         i10 = 256;
         break L130;
        }
        if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 255](i34, i9) | 0)) {
         i10 = 85;
         break L130;
        } else {
         i2 = 1;
         i1 = 3;
         break L132;
        }
       }
      case 6:
       {
        if ((i7 - i9 | 0) < 3) {
         i16 = -2;
         i10 = 256;
         break L130;
        }
        if (!(FUNCTION_TABLE_iii[HEAP32[i14 >> 2] & 255](i34, i9) | 0)) {
         i10 = 88;
         break L130;
        } else {
         i2 = 1;
         i1 = 4;
         break L132;
        }
       }
      case 7:
       {
        if ((i7 - i9 | 0) < 4) {
         i16 = -2;
         i10 = 256;
         break L130;
        }
        if (!(FUNCTION_TABLE_iii[HEAP32[i15 >> 2] & 255](i34, i9) | 0)) {
         i10 = 91;
         break L130;
        } else {
         i2 = 1;
         i1 = 5;
         break L132;
        }
       }
      default:
       {
        i10 = 92;
        break L130;
       }
      }
     }
    default:
     {
      i10 = 208;
      break L130;
     }
    } while (0);
    i1 = i3 + i1 | 0;
    if ((i1 | 0) == (i36 | 0)) {
     i16 = -1;
     i10 = 256;
     break;
    } else i3 = i1;
   }
   L150 : switch (i10 | 0) {
   case 66:
    {
     i1 = i3 + 1 | 0;
     if ((i1 | 0) == (i36 | 0)) {
      i37 = -1;
      STACKTOP = i38;
      return i37 | 0;
     } else i2 = i1;
     L158 : while (1) {
      switch (HEAP8[i35 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
      case 11:
       {
        i17 = i2;
        i10 = 203;
        break L150;
       }
      case 17:
       {
        i19 = i2;
        break L150;
       }
      case 29:
       {
        i10 = 95;
        break L158;
       }
      case 24:
      case 22:
       {
        i18 = 2;
        break L158;
       }
      case 5:
       {
        i10 = 96;
        break L158;
       }
      case 6:
       {
        i10 = 99;
        break L158;
       }
      case 7:
       {
        i10 = 102;
        break L158;
       }
      case 10:
      case 9:
      case 21:
       break;
      default:
       {
        i10 = 105;
        break L158;
       }
      }
      i1 = i2 + 1 | 0;
      if ((i1 | 0) == (i36 | 0)) {
       i16 = -1;
       i10 = 256;
       break;
      } else {
       i3 = i2;
       i2 = i1;
      }
     }
     if ((i10 | 0) == 95) {
      HEAP32[i37 >> 2] = i2;
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     } else if ((i10 | 0) == 96) {
      if ((i7 - i2 | 0) < 2) {
       i37 = -2;
       STACKTOP = i38;
       return i37 | 0;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 255](i34, i2) | 0)) {
       HEAP32[i37 >> 2] = i2;
       i37 = 0;
       STACKTOP = i38;
       return i37 | 0;
      } else i18 = 3;
     } else if ((i10 | 0) == 99) {
      if ((i7 - i2 | 0) < 3) {
       i37 = -2;
       STACKTOP = i38;
       return i37 | 0;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i14 >> 2] & 255](i34, i2) | 0)) {
       HEAP32[i37 >> 2] = i2;
       i37 = 0;
       STACKTOP = i38;
       return i37 | 0;
      } else i18 = 4;
     } else if ((i10 | 0) == 102) {
      if ((i7 - i2 | 0) < 4) {
       i37 = -2;
       STACKTOP = i38;
       return i37 | 0;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i15 >> 2] & 255](i34, i2) | 0)) {
       HEAP32[i37 >> 2] = i2;
       i37 = 0;
       STACKTOP = i38;
       return i37 | 0;
      } else i18 = 5;
     } else if ((i10 | 0) == 105) {
      HEAP32[i37 >> 2] = i2;
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     } else if ((i10 | 0) == 256) {
      STACKTOP = i38;
      return i16 | 0;
     }
     i1 = i3 + i18 | 0;
     HEAP32[i33 >> 2] = i1;
     L186 : do if ((i1 | 0) == (i36 | 0)) i26 = -1; else {
      i4 = i34 + 356 | 0;
      i5 = i34 + 360 | 0;
      i6 = i34 + 364 | 0;
      i2 = 0;
      i3 = i1;
      L188 : while (1) {
       L190 : do switch (HEAP8[i35 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0) {
       case 29:
        {
         i10 = 111;
         break L188;
        }
       case 27:
       case 26:
       case 25:
       case 24:
       case 22:
        {
         i28 = i3 + 1 | 0;
         HEAP32[i33 >> 2] = i28;
         i25 = i2;
         break;
        }
       case 5:
        {
         if ((i7 - i3 | 0) < 2) {
          i26 = -2;
          break L186;
         }
         if (!(FUNCTION_TABLE_iii[HEAP32[i8 >> 2] & 255](i34, i3) | 0)) {
          i10 = 115;
          break L188;
         }
         i28 = i3 + 2 | 0;
         HEAP32[i33 >> 2] = i28;
         i25 = i2;
         break;
        }
       case 6:
        {
         if ((i7 - i3 | 0) < 3) {
          i26 = -2;
          break L186;
         }
         if (!(FUNCTION_TABLE_iii[HEAP32[i11 >> 2] & 255](i34, i3) | 0)) {
          i10 = 119;
          break L188;
         }
         i28 = i3 + 3 | 0;
         HEAP32[i33 >> 2] = i28;
         i25 = i2;
         break;
        }
       case 7:
        {
         if ((i7 - i3 | 0) < 4) {
          i26 = -2;
          break L186;
         }
         if (!(FUNCTION_TABLE_iii[HEAP32[i12 >> 2] & 255](i34, i3) | 0)) {
          i10 = 123;
          break L188;
         }
         i28 = i3 + 4 | 0;
         HEAP32[i33 >> 2] = i28;
         i25 = i2;
         break;
        }
       case 23:
        {
         if (i2 | 0) {
          i10 = 126;
          break L188;
         }
         i27 = i3 + 1 | 0;
         HEAP32[i33 >> 2] = i27;
         if ((i27 | 0) == (i36 | 0)) {
          i26 = -1;
          break L186;
         }
         switch (HEAP8[i35 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0) {
         case 29:
          {
           i10 = 129;
           break L188;
          }
         case 24:
         case 22:
          {
           i28 = i3 + 2 | 0;
           HEAP32[i33 >> 2] = i28;
           i25 = 1;
           break L190;
          }
         case 5:
          {
           if ((i7 - i27 | 0) < 2) {
            i26 = -2;
            break L186;
           }
           if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 255](i34, i27) | 0)) {
            i10 = 134;
            break L188;
           }
           i28 = i3 + 3 | 0;
           HEAP32[i33 >> 2] = i28;
           i25 = 1;
           break L190;
          }
         case 6:
          {
           if ((i7 - i27 | 0) < 3) {
            i26 = -2;
            break L186;
           }
           if (!(FUNCTION_TABLE_iii[HEAP32[i14 >> 2] & 255](i34, i27) | 0)) {
            i10 = 138;
            break L188;
           }
           i28 = i3 + 4 | 0;
           HEAP32[i33 >> 2] = i28;
           i25 = 1;
           break L190;
          }
         case 7:
          {
           if ((i7 - i27 | 0) < 4) {
            i26 = -2;
            break L186;
           }
           if (!(FUNCTION_TABLE_iii[HEAP32[i15 >> 2] & 255](i34, i27) | 0)) {
            i10 = 142;
            break L188;
           }
           i28 = i3 + 5 | 0;
           HEAP32[i33 >> 2] = i28;
           i25 = 1;
           break L190;
          }
         default:
          {
           i10 = 144;
           break L188;
          }
         }
        }
       case 10:
       case 9:
       case 21:
        {
         i1 = i3 + 1 | 0;
         HEAP32[i33 >> 2] = i1;
         if ((i1 | 0) == (i36 | 0)) {
          i26 = -1;
          break L186;
         } else i22 = i1;
         while (1) {
          switch (HEAP8[i35 + (HEAPU8[i22 >> 0] | 0) >> 0] | 0) {
          case 14:
           {
            i21 = i22;
            i10 = 110;
            break L190;
           }
          case 9:
          case 10:
          case 21:
           break;
          default:
           {
            i10 = 147;
            break L188;
           }
          }
          i1 = i22 + 1 | 0;
          HEAP32[i33 >> 2] = i1;
          if ((i1 | 0) == (i36 | 0)) {
           i26 = -1;
           break L186;
          } else i22 = i1;
         }
        }
       case 14:
        {
         i21 = i3;
         i10 = 110;
         break;
        }
       default:
        {
         i10 = 201;
         break L188;
        }
       } while (0);
       do if ((i10 | 0) == 110) {
        i1 = i21 + 1 | 0;
        HEAP32[i33 >> 2] = i1;
        if ((i1 | 0) == (i36 | 0)) {
         i26 = -1;
         break L186;
        } else {
         i24 = i1;
         i1 = i21;
        }
        while (1) {
         i2 = HEAP8[i35 + (HEAPU8[i24 >> 0] | 0) >> 0] | 0;
         if ((i2 | 1) << 24 >> 24 == 13) break;
         switch (i2 << 24 >> 24) {
         case 9:
         case 10:
         case 21:
          break;
         default:
          {
           i10 = 151;
           break L188;
          }
         }
         i1 = i24 + 1 | 0;
         HEAP32[i33 >> 2] = i1;
         if ((i1 | 0) == (i36 | 0)) {
          i26 = -1;
          break L186;
         } else {
          i19 = i24;
          i24 = i1;
          i1 = i19;
         }
        }
        i1 = i1 + 2 | 0;
        HEAP32[i33 >> 2] = i1;
        if ((i1 | 0) == (i36 | 0)) {
         i26 = -1;
         break L186;
        } else i20 = i1;
        while (1) {
         i1 = HEAP8[i35 + (HEAPU8[i20 >> 0] | 0) >> 0] | 0;
         if (i1 << 24 >> 24 == i2 << 24 >> 24) break;
         switch (i1 << 24 >> 24) {
         case 8:
         case 1:
         case 0:
          {
           i10 = 167;
           break L188;
          }
         case 2:
          {
           i10 = 173;
           break L188;
          }
         case 5:
          {
           if ((i7 - i20 | 0) < 2) {
            i26 = -2;
            break L186;
           }
           if (FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i34, i20) | 0) {
            i10 = 157;
            break L188;
           }
           i1 = i20 + 2 | 0;
           HEAP32[i33 >> 2] = i1;
           break;
          }
         case 6:
          {
           if ((i7 - i20 | 0) < 3) {
            i26 = -2;
            break L186;
           }
           if (FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i34, i20) | 0) {
            i10 = 161;
            break L188;
           }
           i1 = i20 + 3 | 0;
           HEAP32[i33 >> 2] = i1;
           break;
          }
         case 7:
          {
           if ((i7 - i20 | 0) < 4) {
            i26 = -2;
            break L186;
           }
           if (FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i34, i20) | 0) {
            i10 = 165;
            break L188;
           }
           i1 = i20 + 4 | 0;
           HEAP32[i33 >> 2] = i1;
           break;
          }
         case 3:
          {
           i29 = _normal_scanRef(i34, i20 + 1 | 0, i36, i33) | 0;
           if ((i29 | 0) < 1) {
            i10 = 171;
            break L188;
           }
           i1 = HEAP32[i33 >> 2] | 0;
           break;
          }
         default:
          {
           i1 = i20 + 1 | 0;
           HEAP32[i33 >> 2] = i1;
          }
         }
         if ((i1 | 0) == (i36 | 0)) {
          i26 = -1;
          break L186;
         } else i20 = i1;
        }
        i30 = i20 + 1 | 0;
        HEAP32[i33 >> 2] = i30;
        if ((i30 | 0) == (i36 | 0)) {
         i26 = -1;
         break L186;
        }
        switch (HEAP8[i35 + (HEAPU8[i30 >> 0] | 0) >> 0] | 0) {
        case 11:
         {
          i31 = i30;
          i10 = 195;
          break L188;
         }
        case 17:
         {
          i32 = i30;
          i10 = 196;
          break L188;
         }
        case 10:
        case 9:
        case 21:
         break;
        default:
         {
          i10 = 178;
          break L188;
         }
        }
        i1 = i20 + 2 | 0;
        HEAP32[i33 >> 2] = i1;
        if ((i1 | 0) == (i36 | 0)) {
         i26 = -1;
         break L186;
        } else i23 = i1;
        L246 : while (1) {
         switch (HEAP8[i35 + (HEAPU8[i23 >> 0] | 0) >> 0] | 0) {
         case 29:
          {
           i10 = 181;
           break L188;
          }
         case 11:
          {
           i31 = i23;
           i10 = 195;
           break L188;
          }
         case 17:
          {
           i32 = i23;
           i10 = 196;
           break L188;
          }
         case 24:
         case 22:
          {
           i10 = 182;
           break L246;
          }
         case 5:
          {
           i10 = 183;
           break L246;
          }
         case 6:
          {
           i10 = 187;
           break L246;
          }
         case 7:
          {
           i10 = 191;
           break L246;
          }
         case 10:
         case 9:
         case 21:
          break;
         default:
          {
           i10 = 200;
           break L188;
          }
         }
         i1 = i23 + 1 | 0;
         HEAP32[i33 >> 2] = i1;
         if ((i1 | 0) == (i36 | 0)) {
          i26 = -1;
          break L186;
         } else i23 = i1;
        }
        if ((i10 | 0) == 182) {
         i10 = 0;
         i28 = i23 + 1 | 0;
         HEAP32[i33 >> 2] = i28;
         i25 = 0;
         break;
        } else if ((i10 | 0) == 183) {
         i10 = 0;
         if ((i7 - i23 | 0) < 2) {
          i26 = -2;
          break L186;
         }
         if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 255](i34, i23) | 0)) {
          i10 = 185;
          break L188;
         }
         i28 = i23 + 2 | 0;
         HEAP32[i33 >> 2] = i28;
         i25 = 0;
         break;
        } else if ((i10 | 0) == 187) {
         i10 = 0;
         if ((i7 - i23 | 0) < 3) {
          i26 = -2;
          break L186;
         }
         if (!(FUNCTION_TABLE_iii[HEAP32[i14 >> 2] & 255](i34, i23) | 0)) {
          i10 = 189;
          break L188;
         }
         i28 = i23 + 3 | 0;
         HEAP32[i33 >> 2] = i28;
         i25 = 0;
         break;
        } else if ((i10 | 0) == 191) {
         i10 = 0;
         if ((i7 - i23 | 0) < 4) {
          i26 = -2;
          break L186;
         }
         if (!(FUNCTION_TABLE_iii[HEAP32[i15 >> 2] & 255](i34, i23) | 0)) {
          i10 = 193;
          break L188;
         }
         i28 = i23 + 4 | 0;
         HEAP32[i33 >> 2] = i28;
         i25 = 0;
         break;
        }
       } while (0);
       if ((i28 | 0) == (i36 | 0)) {
        i26 = -1;
        break L186;
       } else {
        i2 = i25;
        i3 = i28;
       }
      }
      switch (i10 | 0) {
      case 111:
       {
        HEAP32[i37 >> 2] = i3;
        i26 = 0;
        break L186;
       }
      case 115:
       {
        HEAP32[i37 >> 2] = i3;
        i26 = 0;
        break L186;
       }
      case 119:
       {
        HEAP32[i37 >> 2] = i3;
        i26 = 0;
        break L186;
       }
      case 123:
       {
        HEAP32[i37 >> 2] = i3;
        i26 = 0;
        break L186;
       }
      case 126:
       {
        HEAP32[i37 >> 2] = i3;
        i26 = 0;
        break L186;
       }
      case 129:
       {
        HEAP32[i37 >> 2] = i27;
        i26 = 0;
        break L186;
       }
      case 134:
       {
        HEAP32[i37 >> 2] = i27;
        i26 = 0;
        break L186;
       }
      case 138:
       {
        HEAP32[i37 >> 2] = i27;
        i26 = 0;
        break L186;
       }
      case 142:
       {
        HEAP32[i37 >> 2] = i27;
        i26 = 0;
        break L186;
       }
      case 144:
       {
        HEAP32[i37 >> 2] = i27;
        i26 = 0;
        break L186;
       }
      case 147:
       {
        HEAP32[i37 >> 2] = i22;
        i26 = 0;
        break L186;
       }
      case 151:
       {
        HEAP32[i37 >> 2] = i24;
        i26 = 0;
        break L186;
       }
      case 157:
       {
        HEAP32[i37 >> 2] = i20;
        i26 = 0;
        break L186;
       }
      case 161:
       {
        HEAP32[i37 >> 2] = i20;
        i26 = 0;
        break L186;
       }
      case 165:
       {
        HEAP32[i37 >> 2] = i20;
        i26 = 0;
        break L186;
       }
      case 167:
       {
        HEAP32[i37 >> 2] = i20;
        i26 = 0;
        break L186;
       }
      case 171:
       {
        if (i29 | 0) {
         i26 = i29;
         break L186;
        }
        HEAP32[i37 >> 2] = HEAP32[i33 >> 2];
        i26 = 0;
        break L186;
       }
      case 173:
       {
        HEAP32[i37 >> 2] = i20;
        i26 = 0;
        break L186;
       }
      case 178:
       {
        HEAP32[i37 >> 2] = i30;
        i26 = 0;
        break L186;
       }
      case 181:
       {
        HEAP32[i37 >> 2] = i23;
        i26 = 0;
        break L186;
       }
      case 185:
       {
        HEAP32[i37 >> 2] = i23;
        i26 = 0;
        break L186;
       }
      case 189:
       {
        HEAP32[i37 >> 2] = i23;
        i26 = 0;
        break L186;
       }
      case 193:
       {
        HEAP32[i37 >> 2] = i23;
        i26 = 0;
        break L186;
       }
      case 195:
       {
        HEAP32[i37 >> 2] = i31 + 1;
        i26 = 1;
        break L186;
       }
      case 196:
       {
        i1 = i32 + 1 | 0;
        HEAP32[i33 >> 2] = i1;
        if ((i1 | 0) == (i36 | 0)) {
         i26 = -1;
         break L186;
        }
        if ((HEAP8[i1 >> 0] | 0) == 62) {
         HEAP32[i37 >> 2] = i32 + 2;
         i26 = 3;
         break L186;
        } else {
         HEAP32[i37 >> 2] = i1;
         i26 = 0;
         break L186;
        }
       }
      case 200:
       {
        HEAP32[i37 >> 2] = i23;
        i26 = 0;
        break L186;
       }
      case 201:
       {
        HEAP32[i37 >> 2] = i3;
        i26 = 0;
        break L186;
       }
      }
     } while (0);
     i37 = i26;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 67:
    {
     HEAP32[i37 >> 2] = i3;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 70:
    {
     HEAP32[i37 >> 2] = i3;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 73:
    {
     HEAP32[i37 >> 2] = i3;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 76:
    {
     HEAP32[i37 >> 2] = i3;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 78:
    {
     HEAP32[i37 >> 2] = i3;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 81:
    {
     HEAP32[i37 >> 2] = i9;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 85:
    {
     HEAP32[i37 >> 2] = i9;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 88:
    {
     HEAP32[i37 >> 2] = i9;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 91:
    {
     HEAP32[i37 >> 2] = i9;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 92:
    {
     HEAP32[i37 >> 2] = i9;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 208:
    {
     HEAP32[i37 >> 2] = i3;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   case 256:
    {
     STACKTOP = i38;
     return i16 | 0;
    }
   }
   if ((i10 | 0) == 203) {
    HEAP32[i37 >> 2] = i17 + 1;
    i37 = 2;
    STACKTOP = i38;
    return i37 | 0;
   }
   i1 = i19 + 1 | 0;
   if ((i1 | 0) == (i36 | 0)) {
    i37 = -1;
    STACKTOP = i38;
    return i37 | 0;
   }
   if ((HEAP8[i1 >> 0] | 0) == 62) {
    HEAP32[i37 >> 2] = i19 + 2;
    i37 = 4;
    STACKTOP = i38;
    return i37 | 0;
   } else {
    HEAP32[i37 >> 2] = i1;
    i37 = 0;
    STACKTOP = i38;
    return i37 | 0;
   }
  }
 case 3:
  {
   i37 = _normal_scanRef(i34, i3 + 1 | 0, i36, i37) | 0;
   STACKTOP = i38;
   return i37 | 0;
  }
 case 9:
  {
   i1 = i3 + 1 | 0;
   if ((i1 | 0) == (i36 | 0)) {
    i37 = -3;
    STACKTOP = i38;
    return i37 | 0;
   }
   HEAP32[i37 >> 2] = (HEAP8[i35 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) == 10 ? i3 + 2 | 0 : i1;
   i37 = 7;
   STACKTOP = i38;
   return i37 | 0;
  }
 case 10:
  {
   HEAP32[i37 >> 2] = i3 + 1;
   i37 = 7;
   STACKTOP = i38;
   return i37 | 0;
  }
 case 4:
  {
   i2 = i3 + 1 | 0;
   if ((i2 | 0) == (i36 | 0)) {
    i37 = -5;
    STACKTOP = i38;
    return i37 | 0;
   }
   if ((HEAP8[i2 >> 0] | 0) == 93) {
    i1 = i3 + 2 | 0;
    if ((i1 | 0) == (i36 | 0)) {
     i37 = -5;
     STACKTOP = i38;
     return i37 | 0;
    }
    if ((HEAP8[i1 >> 0] | 0) == 62) {
     HEAP32[i37 >> 2] = i1;
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   }
   break;
  }
 case 5:
  {
   if ((i36 - i3 | 0) < 2) {
    i37 = -2;
    STACKTOP = i38;
    return i37 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i34 + 356 >> 2] & 255](i34, i3) | 0)) {
    i2 = i3 + 2 | 0;
    break L4;
   }
   HEAP32[i37 >> 2] = i3;
   i37 = 0;
   STACKTOP = i38;
   return i37 | 0;
  }
 case 6:
  {
   if ((i36 - i3 | 0) < 3) {
    i37 = -2;
    STACKTOP = i38;
    return i37 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i34 + 360 >> 2] & 255](i34, i3) | 0)) {
    i2 = i3 + 3 | 0;
    break L4;
   }
   HEAP32[i37 >> 2] = i3;
   i37 = 0;
   STACKTOP = i38;
   return i37 | 0;
  }
 case 7:
  {
   if ((i36 - i3 | 0) < 4) {
    i37 = -2;
    STACKTOP = i38;
    return i37 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i34 + 364 >> 2] & 255](i34, i3) | 0)) {
    i2 = i3 + 4 | 0;
    break L4;
   }
   HEAP32[i37 >> 2] = i3;
   i37 = 0;
   STACKTOP = i38;
   return i37 | 0;
  }
 case 8:
 case 1:
 case 0:
  {
   HEAP32[i37 >> 2] = i3;
   i37 = 0;
   STACKTOP = i38;
   return i37 | 0;
  }
 default:
  i2 = i3 + 1 | 0;
 } while (0);
 L380 : do if ((i2 | 0) != (i36 | 0)) {
  i3 = i36;
  i4 = i34 + 356 | 0;
  i5 = i34 + 360 | 0;
  i6 = i34 + 364 | 0;
  L382 : while (1) {
   switch (HEAP8[i35 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
   case 10:
   case 9:
   case 8:
   case 1:
   case 0:
   case 2:
   case 3:
    {
     i10 = 252;
     break L382;
    }
   case 5:
    {
     if ((i3 - i2 | 0) < 2) {
      i10 = 237;
      break L382;
     }
     if (FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i34, i2) | 0) {
      i10 = 237;
      break L382;
     }
     i2 = i2 + 2 | 0;
     break;
    }
   case 6:
    {
     if ((i3 - i2 | 0) < 3) {
      i10 = 241;
      break L382;
     }
     if (FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i34, i2) | 0) {
      i10 = 241;
      break L382;
     }
     i2 = i2 + 3 | 0;
     break;
    }
   case 7:
    {
     if ((i3 - i2 | 0) < 4) {
      i10 = 245;
      break L382;
     }
     if (FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i34, i2) | 0) {
      i10 = 245;
      break L382;
     }
     i2 = i2 + 4 | 0;
     break;
    }
   case 4:
    {
     i1 = i2 + 1 | 0;
     if ((i1 | 0) == (i36 | 0)) {
      i10 = 252;
      break L382;
     }
     if ((HEAP8[i1 >> 0] | 0) == 93) {
      i7 = i2 + 2 | 0;
      if ((i7 | 0) == (i36 | 0)) {
       i10 = 252;
       break L382;
      }
      if ((HEAP8[i7 >> 0] | 0) == 62) {
       i10 = 251;
       break L382;
      } else i2 = i1;
     } else i2 = i1;
     break;
    }
   default:
    i2 = i2 + 1 | 0;
   }
   if ((i2 | 0) == (i36 | 0)) break L380;
  }
  if ((i10 | 0) == 237) {
   HEAP32[i37 >> 2] = i2;
   i37 = 6;
   STACKTOP = i38;
   return i37 | 0;
  } else if ((i10 | 0) == 241) {
   HEAP32[i37 >> 2] = i2;
   i37 = 6;
   STACKTOP = i38;
   return i37 | 0;
  } else if ((i10 | 0) == 245) {
   HEAP32[i37 >> 2] = i2;
   i37 = 6;
   STACKTOP = i38;
   return i37 | 0;
  } else if ((i10 | 0) == 251) {
   HEAP32[i37 >> 2] = i7;
   i37 = 0;
   STACKTOP = i38;
   return i37 | 0;
  } else if ((i10 | 0) == 252) {
   HEAP32[i37 >> 2] = i2;
   i37 = 6;
   STACKTOP = i38;
   return i37 | 0;
  }
 } while (0);
 HEAP32[i37 >> 2] = i36;
 i37 = 6;
 STACKTOP = i38;
 return i37 | 0;
}
function _FcFreeTypeQueryFace(i63, i39, i41, i58) {
 i63 = i63 | 0;
 i39 = i39 | 0;
 i41 = i41 | 0;
 i58 = i58 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i40 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i64 = 0, i65 = 0, i66 = 0;
 i66 = STACKTOP;
 STACKTOP = STACKTOP + 544 | 0;
 i56 = i66 + 160 | 0;
 i55 = i66 + 152 | 0;
 i54 = i66 + 144 | 0;
 i53 = i66 + 136 | 0;
 i51 = i66 + 128 | 0;
 i49 = i66 + 120 | 0;
 i46 = i66 + 112 | 0;
 i44 = i66 + 104 | 0;
 i43 = i66 + 96 | 0;
 i38 = i66 + 88 | 0;
 i36 = i66 + 80 | 0;
 i34 = i66 + 72 | 0;
 i32 = i66 + 48 | 0;
 i33 = i66 + 24 | 0;
 i31 = i66;
 i64 = i66 + 272 | 0;
 i47 = i66 + 264 | 0;
 i48 = i66 + 260 | 0;
 i60 = i66 + 256 | 0;
 i50 = i66 + 224 | 0;
 i59 = i66 + 216 | 0;
 i26 = i66 + 200 | 0;
 i37 = i66 + 192 | 0;
 i27 = i66 + 188 | 0;
 i35 = i66 + 184 | 0;
 i28 = i66 + 180 | 0;
 i29 = i66 + 176 | 0;
 i30 = i66 + 172 | 0;
 i52 = i66 + 168 | 0;
 i40 = i66 + 280 | 0;
 HEAP32[i37 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i35 >> 2] = 0;
 HEAP32[i28 >> 2] = 0;
 HEAP32[i29 >> 2] = 0;
 HEAP32[i30 >> 2] = 0;
 HEAP32[i52 >> 2] = 0;
 _FcInitDebug();
 i65 = _FcPatternCreate() | 0;
 if (!i65) {
  i65 = 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 i61 = i63 + 8 | 0;
 i1 = HEAP32[i61 >> 2] | 0;
 if (_FcPatternAddBool(i65, 354939, i1 & 1) | 0) if (_FcPatternAddBool(i65, 349645, i1 >>> 14 & 1) | 0) if (_FcPatternAddBool(i65, 349651, (i1 & 16385 | 0) != 0 & 1) | 0) {
  i45 = _FT_Get_Sfnt_Table(i63, 2) | 0;
  i42 = (i45 | 0) != 0;
  L8 : do if (i42) {
   switch (HEAP16[i45 >> 1] | 0) {
   case -1:
   case 0:
    {
     i62 = 0;
     break L8;
    }
   default:
    {}
   }
   i1 = i45 + 60 | 0;
   if (!(HEAP8[i1 >> 0] | 0)) i62 = 0; else {
    i62 = _malloc(5) | 0;
    i57 = HEAPU8[i1 >> 0] | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24;
    HEAP8[i62 >> 0] = i57;
    HEAP8[i62 + 1 >> 0] = i57 >> 8;
    HEAP8[i62 + 2 >> 0] = i57 >> 16;
    HEAP8[i62 + 3 >> 0] = i57 >> 24;
    HEAP8[i62 + 4 >> 0] = 0;
   }
  } else i62 = 0; while (0);
  if (HEAP32[91917] & 256 | 0) _putchar(10) | 0;
  i18 = _FT_Get_Sfnt_Name_Count(i63) | 0;
  i19 = (i18 | 0) == 0;
  i20 = i26 + 6 | 0;
  i21 = i26 + 2 | 0;
  i22 = i26 + 4 | 0;
  i23 = i26 + 12 | 0;
  i24 = i26 + 8 | 0;
  i15 = 0;
  i3 = i62;
  L16 : while (1) {
   i25 = (i15 | 0) != 3;
   if (i25) i17 = HEAPU16[119970 + (i15 << 1) >> 1] | 0; else i17 = 65535;
   i16 = 0;
   do {
    i14 = HEAP16[119976 + (i16 << 1) >> 1] | 0;
    if (!i19) {
     i13 = 0;
     do {
      i57 = (_FT_Get_Sfnt_Name(i63, i13, i26) | 0) == 0;
      L26 : do if (i57 & (HEAP16[i20 >> 1] | 0) == i14 << 16 >> 16) {
       i4 = HEAP16[i26 >> 1] | 0;
       if (i25) {
        if ((i4 & 65535 | 0) != (i17 | 0)) break;
       } else switch (i4 << 16 >> 16) {
       case 1:
       case 0:
       case 3:
        break L26;
       default:
        {}
       }
       i5 = HEAP16[i21 >> 1] | 0;
       i1 = 0;
       while (1) {
        if ((HEAP16[119996 + (i1 << 4) >> 1] | 0) == i4 << 16 >> 16) {
         if (!i1) {
          i1 = 0;
          i57 = 26;
          break;
         }
         if ((HEAP16[119996 + (i1 << 4) + 2 >> 1] | 0) == i5 << 16 >> 16) {
          i57 = 26;
          break;
         }
        }
        i1 = i1 + 1 | 0;
        if ((i1 | 0) >= 14) {
         i57 = 25;
         break;
        }
       }
       if ((i57 | 0) == 25) {
        i57 = 0;
        if ((i1 | 0) == 14) i1 = 0; else i57 = 26;
       }
       L40 : do if ((i57 | 0) == 26) {
        i57 = 0;
        i1 = 119996 + (i1 << 4) + 4 | 0;
        do if (!(_strcmp(i1, 349660) | 0)) {
         i9 = HEAP16[i22 >> 1] | 0;
         if (!(i9 << 16 >> 16)) {
          i6 = HEAP32[i23 >> 2] | 0;
          L46 : do if ((i6 | 0) > 0) {
           i5 = 0;
           i7 = HEAP32[i24 >> 2] | 0;
           i4 = 0;
           while (1) {
            while (1) {
             i8 = i6 + -1 | 0;
             i12 = i7;
             i7 = i7 + 1 | 0;
             if ((HEAP8[i12 >> 0] | 0) < 0) break;
             i5 = i5 + 1 | 0;
             if ((i6 | 0) <= 1) break L46; else i6 = i8;
            }
            i4 = i4 + 1 | 0;
            if ((i6 | 0) > 1) i6 = i8; else break;
           }
          } else {
           i5 = 0;
           i4 = 0;
          } while (0);
          if ((i4 << 1 | 0) > (i5 | 0)) {
           i1 = 349670;
           break;
          }
         }
         if ((i9 & 65535) <= 255) break;
         switch (i9 << 16 >> 16) {
         case 1041:
          {
           i1 = 0;
           break;
          }
         case 1033:
          {
           i1 = 1;
           break;
          }
         default:
          {
           i1 = 0;
           break L40;
          }
         }
         i1 = 120220 + (i1 * 14 | 0) + 2 | 0;
        } while (0);
        do if (!(_strcmp(i1, 349675) | 0)) i57 = 41; else {
         if (!(_strcmp(i1, 349683) | 0)) {
          i57 = 41;
          break;
         }
         do if (!(_strcmp(i1, 349692) | 0)) i57 = 49; else {
          if (!(_strcmp(i1, 349698) | 0)) {
           i57 = 49;
           break;
          }
          if (_strcmp(i1, 349660) | 0) {
           i1 = 0;
           break L40;
          }
          i6 = HEAP32[i24 >> 2] | 0;
          i5 = HEAP32[i23 >> 2] | 0;
          i1 = _malloc((i5 * 3 | 0) + 1 | 0) | 0;
          if (!i1) {
           i1 = 0;
           break L40;
          }
          if ((i5 | 0) > 0) {
           i4 = i1;
           i7 = i6;
          } else {
           i4 = i1;
           break;
          }
          while (1) {
           i12 = HEAP8[i7 >> 0] | 0;
           i6 = i12 & 255;
           if (i12 << 24 >> 24 < 0) i6 = HEAPU16[120248 + (i6 + -128 << 1) >> 1] | 0;
           i4 = i4 + (_FcUcs4ToUtf8(i6, i4) | 0) | 0;
           if ((i5 | 0) > 1) {
            i5 = i5 + -1 | 0;
            i7 = i7 + 1 | 0;
           } else break;
          }
         } while (0);
         do if ((i57 | 0) == 49) {
          i57 = 0;
          i6 = HEAP32[i24 >> 2] | 0;
          i5 = HEAP32[i23 >> 2] | 0;
          i1 = _malloc(i5 << 1 | 1) | 0;
          if (!i1) {
           i1 = 0;
           break L40;
          }
          if ((i5 | 0) > 0) i4 = i1; else {
           i4 = i1;
           break;
          }
          while (1) {
           i4 = i4 + (_FcUcs4ToUtf8(HEAPU8[i6 >> 0] | 0, i4) | 0) | 0;
           if ((i5 | 0) > 1) {
            i5 = i5 + -1 | 0;
            i6 = i6 + 1 | 0;
           } else break;
          }
         } while (0);
         HEAP8[i4 >> 0] = 0;
        } while (0);
        L80 : do if ((i57 | 0) == 41) {
         i57 = 0;
         i6 = HEAP32[i24 >> 2] | 0;
         i5 = HEAP32[i23 >> 2] | 0;
         do if (_FcUtf16Len(i6, 0, i5, i64, i47) | 0) {
          i1 = _malloc((HEAP32[i64 >> 2] | 0) * 6 | 1) | 0;
          if (!i1) break;
          i7 = _FcUtf16ToUcs4(i6, 0, i48, i5) | 0;
          if ((i7 | 0) > 0) {
           i4 = i1;
           do {
            i5 = i5 - i7 | 0;
            i6 = i6 + i7 | 0;
            i4 = i4 + (_FcUcs4ToUtf8(HEAP32[i48 >> 2] | 0, i4) | 0) | 0;
            i7 = _FcUtf16ToUcs4(i6, 0, i48, i5) | 0;
           } while ((i7 | 0) > 0);
          } else i4 = i1;
          HEAP8[i4 >> 0] = 0;
          break L80;
         } while (0);
         i1 = 0;
         break L40;
        } while (0);
        if (!(_FcStrCmpIgnoreBlanksAndCase(i1, 369704) | 0)) {
         _free(i1);
         i1 = 0;
        }
       } while (0);
       i10 = HEAP16[i26 >> 1] | 0;
       i11 = HEAP16[i22 >> 1] | 0;
       i12 = HEAP16[i21 >> 1] | 0;
       if (i10 << 16 >> 16 == 1 & i12 << 16 >> 16 == 0) {
        i6 = HEAP32[i23 >> 2] | 0;
        L95 : do if ((i6 | 0) > 0) {
         i5 = 0;
         i7 = HEAP32[i24 >> 2] | 0;
         i4 = 0;
         while (1) {
          while (1) {
           i8 = i6 + -1 | 0;
           i9 = i7;
           i7 = i7 + 1 | 0;
           if ((HEAP8[i9 >> 0] | 0) < 0) break;
           i5 = i5 + 1 | 0;
           if ((i6 | 0) <= 1) break L95; else i6 = i8;
          }
          i4 = i4 + 1 | 0;
          if ((i6 | 0) > 1) i6 = i8; else break;
         }
        } else {
         i5 = 0;
         i4 = 0;
        } while (0);
        i5 = (i4 << 1 | 0) > (i5 | 0) ? 11 : i11;
       } else i5 = i11;
       i4 = 0;
       while (1) {
        if ((HEAP16[120504 + (i4 * 12 | 0) >> 1] | 0) == i10 << 16 >> 16) {
         if (!i4) {
          i9 = 0;
          break;
         }
         if ((HEAP16[120504 + (i4 * 12 | 0) + 2 >> 1] | 0) == i5 << 16 >> 16) {
          i57 = 73;
          break;
         }
        }
        i4 = i4 + 1 | 0;
        if ((i4 | 0) >= 334) {
         i9 = 0;
         break;
        }
       }
       if ((i57 | 0) == 73) {
        i57 = 0;
        i9 = 120504 + (i4 * 12 | 0) + 4 | 0;
       }
       if (i1) {
        i8 = HEAP16[i20 >> 1] | 0;
        i4 = i8 & 65535;
        switch (i8 << 16 >> 16) {
        case 1:
        case 16:
        case 21:
         {
          if (!(HEAP32[91917] & 256)) {
           i4 = i27;
           i5 = i37;
           i6 = 349864;
           i7 = 354977;
          } else {
           HEAP32[i31 >> 2] = i4;
           HEAP32[i31 + 4 >> 2] = i10 & 65535;
           HEAP32[i31 + 8 >> 2] = i12 & 65535;
           HEAP32[i31 + 12 >> 2] = i11 & 65535;
           HEAP32[i31 + 16 >> 2] = i1;
           _printf(349709, i31) | 0;
           i4 = i27;
           i5 = i37;
           i6 = 349864;
           i7 = 354977;
          }
          break;
         }
        case 4:
        case 18:
         {
          if (!(HEAP32[91917] & 256)) {
           i4 = i30;
           i5 = i29;
           i6 = 349851;
           i7 = 354984;
          } else {
           HEAP32[i33 >> 2] = i4;
           HEAP32[i33 + 4 >> 2] = i10 & 65535;
           HEAP32[i33 + 8 >> 2] = i12 & 65535;
           HEAP32[i33 + 12 >> 2] = i11 & 65535;
           HEAP32[i33 + 16 >> 2] = i1;
           _printf(349753, i33) | 0;
           i4 = i30;
           i5 = i29;
           i6 = 349851;
           i7 = 354984;
          }
          break;
         }
        case 2:
        case 17:
        case 22:
         {
          i4 = i1;
          while (1) if ((HEAP8[i4 >> 0] | 0) == 32) i4 = i4 + 1 | 0; else break;
          i5 = _strlen(i4) | 0;
          _memmove(i1 | 0, i4 | 0, i5 + 1 | 0) | 0;
          i5 = i1 + i5 | 0;
          while (1) {
           i4 = i5 + -1 | 0;
           if ((HEAP8[i4 >> 0] | 0) == 32) i5 = i4; else break;
          }
          HEAP8[i5 >> 0] = 0;
          if (!(HEAP32[91917] & 256)) {
           i4 = i28;
           i5 = i35;
           i6 = 349841;
           i7 = 354680;
          } else {
           i6 = HEAPU16[i26 >> 1] | 0;
           i5 = HEAPU16[i21 >> 1] | 0;
           i4 = HEAPU16[i22 >> 1] | 0;
           HEAP32[i32 >> 2] = HEAPU16[i20 >> 1];
           HEAP32[i32 + 4 >> 2] = i6;
           HEAP32[i32 + 8 >> 2] = i5;
           HEAP32[i32 + 12 >> 2] = i4;
           HEAP32[i32 + 16 >> 2] = i1;
           _printf(349797, i32) | 0;
           i4 = i28;
           i5 = i35;
           i6 = 349841;
           i7 = 354680;
          }
          break;
         }
        case 8:
        case 7:
         {
          if (!i3) {
           i3 = _FcNoticeFoundry(i1) | 0;
           i57 = 100;
          } else i57 = 100;
          break;
         }
        default:
         i57 = 100;
        }
        if ((i57 | 0) == 100) {
         _free(i1);
         break;
        }
        L132 : do if (!(_FcPatternGetString(i65, i7, 0, i64) | 0)) {
         i8 = 0;
         while (1) {
          i8 = i8 + 1 | 0;
          if (!(_FcStrCmpIgnoreBlanksAndCase(HEAP32[i64 >> 2] | 0, i1) | 0)) break;
          if (_FcPatternGetString(i65, i7, i8, i64) | 0) break L132;
         }
         _free(i1);
         break L26;
        } while (0);
        i12 = (_FcPatternAddString(i65, i7, i1) | 0) == 0;
        _free(i1);
        if (i12) break L16;
        if (i9 | 0) {
         if ((HEAP32[i4 >> 2] | 0) < (HEAP32[i5 >> 2] | 0)) do {
          if (!(_FcPatternAddString(i65, i6, 349875) | 0)) break L16;
          i12 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
          HEAP32[i4 >> 2] = i12;
         } while ((i12 | 0) < (HEAP32[i5 >> 2] | 0));
         if (!(_FcPatternAddString(i65, i6, i9) | 0)) break L16;
         HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
        }
        HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
       }
      } while (0);
      i13 = i13 + 1 | 0;
     } while (i13 >>> 0 < i18 >>> 0);
    }
    i16 = i16 + 1 | 0;
   } while (i16 >>> 0 < 10);
   i15 = i15 + 1 | 0;
   if (i15 >>> 0 >= 4) {
    i57 = 104;
    break;
   }
  }
  L151 : do if ((i57 | 0) == 104) {
   i1 = HEAP32[i37 >> 2] | 0;
   if (!i1) {
    i1 = i63 + 20 | 0;
    i4 = HEAP32[i1 >> 2] | 0;
    if (!i4) i1 = 0; else if (!(_FcStrCmpIgnoreBlanksAndCase(i4, 369704) | 0)) i1 = 0; else {
     if (HEAP32[91917] & 256 | 0) {
      HEAP32[i34 >> 2] = HEAP32[i1 >> 2];
      _printf(349879, i34) | 0;
     }
     if (!(_FcPatternAddString(i65, 354977, HEAP32[i1 >> 2] | 0) | 0)) break;
     HEAP32[i37 >> 2] = 1;
     i1 = 1;
    }
   }
   if (!(HEAP32[i35 >> 2] | 0)) {
    i4 = i63 + 24 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if (i5 | 0) if (_FcStrCmpIgnoreBlanksAndCase(i5, 369704) | 0) {
     if (HEAP32[91917] & 256 | 0) {
      HEAP32[i36 >> 2] = HEAP32[i4 >> 2];
      _printf(349907, i36) | 0;
     }
     if (!(_FcPatternAddString(i65, 354680, HEAP32[i4 >> 2] | 0) | 0)) break;
     HEAP32[i35 >> 2] = 1;
    }
   }
   i6 = (i39 | 0) != 0;
   if (i6 & (i1 | 0) == 0) if (HEAP8[i39 >> 0] | 0) {
    i4 = _strrchr(i39, 47) | 0;
    i4 = (i4 | 0) == 0 ? i39 : i4 + 1 | 0;
    i1 = _strrchr(i4, 46) | 0;
    if (!i1) i1 = i4 + (_strlen(i4) | 0) | 0;
    i36 = i1 - i4 | 0;
    i1 = _malloc(i36 + 1 | 0) | 0;
    _strncpy(i1, i4, i36) | 0;
    HEAP8[i1 + i36 >> 0] = 0;
    if (HEAP32[91917] & 256 | 0) {
     HEAP32[i38 >> 2] = i1;
     _printf(349934, i38) | 0;
    }
    i38 = (_FcPatternAddString(i65, 354977, i1) | 0) == 0;
    _free(i1);
    if (i38) break;
    HEAP32[i37 >> 2] = 1;
   }
   i1 = _FT_Get_Postscript_Name(i63) | 0;
   if (!i1) {
    HEAP32[i47 >> 2] = 0;
    L184 : do if (!(_FcPatternObjectGetString(i65, 2, 0, i47) | 0)) {
     i1 = 0;
     do {
      if (!(_FcStrCmp(HEAP32[i47 >> 2] | 0, 349964) | 0)) break L184;
      i1 = i1 + 1 | 0;
      HEAP32[i47 >> 2] = 0;
     } while ((_FcPatternObjectGetString(i65, 2, i1, i47) | 0) == 0);
    } else i1 = 0; while (0);
    if (_FcPatternObjectGetString(i65, 1, (HEAP32[i47 >> 2] | 0) == 0 ? 0 : i1, i64) | 0) break;
    i4 = HEAP32[i64 >> 2] | 0;
    i5 = _strlen(i4) | 0;
    if (!i5) i1 = 0; else {
     i1 = 0;
     do {
      i38 = HEAP8[i4 + i1 >> 0] | 0;
      i37 = (_memchr(349967, i38 & 255, 16) | 0) == 0;
      HEAP8[i40 + i1 >> 0] = i37 ? i38 : 45;
      i1 = i1 + 1 | 0;
     } while (i1 >>> 0 < i5 >>> 0 & (i1 | 0) < 255);
    }
    HEAP8[i40 + i1 >> 0] = 0;
   } else {
    _strncpy(i40, i1, 255) | 0;
    HEAP8[i40 + 255 >> 0] = 0;
   }
   if (_FcPatternAddString(i65, 354993, i40) | 0) {
    if (i6) if (HEAP8[i39 >> 0] | 0) if (!(_FcPatternAddString(i65, 354972, i39) | 0)) break;
    if (_FcPatternAddInteger(i65, 354966, i41) | 0) {
     i1 = _FT_Get_Sfnt_Table(i63, 0) | 0;
     if (!i1) {
      if (!(_FcPatternAddInteger(i65, 349983, 0) | 0)) break;
     } else if (!(_FcPatternAddInteger(i65, 349983, HEAP32[i1 + 4 >> 2] | 0) | 0)) break;
     L208 : do if (i42) {
      L210 : do switch (HEAP16[i45 >> 1] | 0) {
      case -1:
       {
        i4 = -1;
        i6 = -1;
        i12 = 0;
        break;
       }
      case 0:
       {
        i1 = 0;
        i57 = 147;
        break;
       }
      default:
       {
        i6 = HEAP32[i45 + 80 >> 2] | 0;
        i4 = (i6 & 131072 | 0) == 0;
        i1 = i4 ? 350003 : 0;
        if ((i6 & 393216 | 0) == 393216) i57 = 147; else {
         i4 = (i6 & 262144 | 0) == 0 ? (i4 ? 0 : 349996) : i1;
         i5 = (i6 & 524288 | 0) == 0;
         i57 = (i4 | 0) == 0;
         i1 = i57 ? 350010 : 0;
         if (!(i57 | i5)) {
          i57 = 147;
          break L210;
         }
         i1 = i5 ? i4 : i1;
         i1 = (i6 & 1048576 | 0) == 0 ? i1 : (i1 | 0) == 0 ? 350017 : 0;
         i57 = 147;
        }
       }
      } while (0);
      L214 : do if ((i57 | 0) == 147) {
       i5 = i45 + 4 | 0;
       i4 = _FcWeightFromOpenType(HEAPU16[i5 >> 1] | 0) | 0;
       if ((i4 | 0) != -1 & (HEAP32[91917] & 256 | 0) != 0) {
        HEAP32[i43 >> 2] = HEAPU16[i5 >> 1];
        HEAP32[i43 + 4 >> 2] = i4;
        _printf(350023, i43) | 0;
       }
       i5 = HEAP16[i45 + 6 >> 1] | 0;
       switch (i5 << 16 >> 16) {
       case 1:
        {
         i6 = 50;
         break;
        }
       case 2:
        {
         i6 = 63;
         break;
        }
       case 3:
        {
         i6 = 75;
         break;
        }
       case 4:
        {
         i6 = 87;
         break;
        }
       case 5:
        {
         i6 = 100;
         break;
        }
       case 6:
        {
         i6 = 113;
         break;
        }
       case 7:
        {
         i6 = 125;
         break;
        }
       case 8:
        {
         i6 = 150;
         break;
        }
       case 9:
        {
         i6 = 200;
         break;
        }
       default:
        {
         i6 = -1;
         i12 = i1;
         break L214;
        }
       }
       if (!(HEAP32[91917] & 256)) {
        i12 = i1;
        break;
       }
       HEAP32[i44 >> 2] = i5 & 65535;
       HEAP32[i44 + 4 >> 2] = i6;
       _printf(350063, i44) | 0;
       i12 = i1;
      } while (0);
      HEAP32[i64 >> 2] = 0;
      HEAP32[i47 >> 2] = 0;
      HEAP32[i48 >> 2] = 0;
      i7 = (_FT_Load_Sfnt_Table(i63, 1399417958, 0, 0, i64) | 0) == 0;
      i1 = _GetScriptTags(i63, 1196445523, i48) | 0;
      i5 = _GetScriptTags(i63, 1196643650, i47) | 0;
      i8 = i5 | i1;
      do if (i7 | (i8 & 65535) << 16 >> 16 != 0) {
       i10 = i1 & 65535;
       i9 = i5 & 65535;
       i11 = _malloc(((i9 + i10 | 0) * 14 | 0) + (i7 ? 13 : 0) | 0) | 0;
       if (!i11) {
        i1 = 0;
        break;
       }
       HEAP8[i11 >> 0] = 0;
       if (i7) {
        i1 = i11;
        i5 = 350101;
        i7 = i1 + 13 | 0;
        do {
         HEAP8[i1 >> 0] = HEAP8[i5 >> 0] | 0;
         i1 = i1 + 1 | 0;
         i5 = i5 + 1 | 0;
        } while ((i1 | 0) < (i7 | 0));
       }
       L237 : do if (i8 & 65535 | 0) {
        i1 = 0;
        i8 = 0;
        i5 = (i9 | 0) != 0;
        while (1) {
         if ((i8 | 0) == (i9 | 0)) break;
         L242 : do if (i5) {
          i5 = HEAP32[(HEAP32[i47 >> 2] | 0) + (i8 << 2) >> 2] | 0;
          if ((i1 | 0) == (i10 | 0)) {
           i1 = i10;
           i57 = 177;
           break;
          }
          while (1) {
           i7 = HEAP32[(HEAP32[i48 >> 2] | 0) + (i1 << 2) >> 2] | 0;
           if (i5 >>> 0 < i7 >>> 0) {
            i57 = 177;
            break L242;
           }
           if ((i5 | 0) == (i7 | 0)) {
            i57 = 180;
            break L242;
           }
           _addtag(i11, i7);
           i1 = i1 + 1 | 0;
           i5 = HEAP32[(HEAP32[i47 >> 2] | 0) + (i8 << 2) >> 2] | 0;
           if ((i1 | 0) == (i10 | 0)) {
            i1 = i10;
            i57 = 177;
            break;
           }
          }
         } else while (1) {
          i5 = HEAP32[(HEAP32[i47 >> 2] | 0) + (i8 << 2) >> 2] | 0;
          if ((i1 | 0) == (i10 | 0)) {
           i1 = i10;
           i57 = 177;
           break L242;
          }
          i7 = HEAP32[(HEAP32[i48 >> 2] | 0) + (i1 << 2) >> 2] | 0;
          if (i5 >>> 0 < i7 >>> 0) {
           i57 = 177;
           break L242;
          }
          if ((i5 | 0) == (i7 | 0)) {
           i57 = 180;
           break L242;
          }
          _addtag(i11, i7);
          i1 = i1 + 1 | 0;
          if ((i1 | 0) >= (i10 | 0)) break L237;
         } while (0);
         if ((i57 | 0) == 177) {
          i57 = 0;
          _addtag(i11, i5);
         } else if ((i57 | 0) == 180) {
          i57 = 0;
          _addtag(i11, i5);
          i1 = i1 + 1 | 0;
         }
         i8 = i8 + 1 | 0;
         i5 = (i8 | 0) < (i9 | 0);
         if (!(i5 | (i1 | 0) < (i10 | 0))) break L237;
        }
        if (i5) while (1) {
         _addtag(i11, HEAP32[(HEAP32[i48 >> 2] | 0) + (i1 << 2) >> 2] | 0);
         i1 = i1 + 1 | 0;
        } else do {
         _addtag(i11, HEAP32[(HEAP32[i48 >> 2] | 0) + (i1 << 2) >> 2] | 0);
         i1 = i1 + 1 | 0;
        } while ((i1 | 0) < (i10 | 0));
       } while (0);
       if (!(HEAP32[91917] & 256)) {
        i1 = i11;
        break;
       }
       HEAP32[i46 >> 2] = i11;
       _printf(350114, i46) | 0;
       i1 = i11;
      } else i1 = 0; while (0);
      _free(HEAP32[i47 >> 2] | 0);
      _free(HEAP32[i48 >> 2] | 0);
      if (i1 | 0) {
       i48 = (_FcPatternAddString(i65, 350150, i1) | 0) == 0;
       _free(i1);
       if (i48) break L151;
      }
      switch (HEAP16[i45 >> 1] | 0) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case -1:
       {
        i1 = i6;
        break L208;
       }
      default:
       {}
      }
      i47 = _FcRangeCreateDouble(+(HEAPU16[i45 + 98 >> 1] | 0) / 20.0, +(HEAPU16[i45 + 100 >> 1] | 0) / 20.0) | 0;
      i48 = (_FcPatternAddRange(i65, 350161, i47) | 0) == 0;
      _FcRangeDestroy(i47);
      if (i48) break L151; else i1 = i6;
     } else {
      i4 = -1;
      i1 = -1;
      i12 = 0;
     } while (0);
     do if (!(_FT_Get_PS_Font_Info(i63, i50) | 0)) {
      do if ((i4 | 0) == -1) {
       i6 = i50 + 16 | 0;
       i5 = HEAP32[i6 >> 2] | 0;
       if (!i5) {
        i4 = -1;
        break;
       } else i4 = 0;
       while (1) {
        if (!(_FcStrCmpIgnoreBlanksAndCase(i5, HEAP32[67688 + (i4 << 3) >> 2] | 0) | 0)) {
         i57 = 192;
         break;
        }
        i4 = i4 + 1 | 0;
        if ((i4 | 0) >= 23) {
         i4 = -1;
         break;
        }
       }
       if ((i57 | 0) == 192) i4 = HEAP32[67688 + (i4 << 3) + 4 >> 2] | 0;
       if (!(HEAP32[91917] & 256)) break;
       HEAP32[i49 >> 2] = HEAP32[i6 >> 2];
       HEAP32[i49 + 4 >> 2] = i4;
       _printf(350166, i49) | 0;
      } while (0);
      if (i3 | 0) {
       i9 = i3;
       break;
      }
      i3 = _FcNoticeFoundry(HEAP32[i50 + 4 >> 2] | 0) | 0;
      i57 = 198;
     } else i57 = 198; while (0);
     do if ((i57 | 0) == 198) if (!i3) {
      if (_FT_Get_BDF_Property(i63, 350195, i59) | 0) {
       i9 = 0;
       break;
      }
      if ((HEAP32[i59 >> 2] | 0) != 1) {
       i9 = 0;
       break;
      }
      i9 = HEAP32[i59 + 4 >> 2] | 0;
     } else i9 = i3; while (0);
     L290 : do if ((i1 | 0) == -1) {
      L292 : do if (!(_FT_Get_BDF_Property(i63, 350203, i59) | 0)) {
       if ((HEAP32[i59 >> 2] & -2 | 0) != 2) break;
       switch (((HEAP32[i59 + 4 >> 2] | 0) + 5 | 0) / 10 | 0 | 0) {
       case 1:
        {
         i1 = 50;
         break L290;
        }
       case 2:
        {
         i1 = 63;
         break L290;
        }
       case 3:
        {
         i1 = 75;
         break L290;
        }
       case 4:
        {
         i1 = 87;
         break L290;
        }
       case 5:
        {
         i1 = 100;
         break L290;
        }
       case 6:
        {
         i1 = 113;
         break L290;
        }
       case 7:
        {
         i1 = 125;
         break L290;
        }
       case 8:
        {
         i1 = 150;
         break L290;
        }
       case 9:
        {
         i1 = 200;
         break L290;
        }
       default:
        break L292;
       }
      } while (0);
      if (_FT_Get_BDF_Property(i63, 350221, i59) | 0) {
       i1 = -1;
       break;
      }
      if ((HEAP32[i59 >> 2] | 0) != 1) {
       i1 = -1;
       break;
      }
      i3 = i59 + 4 | 0;
      i1 = HEAP32[i3 >> 2] | 0;
      if (!i1) {
       i1 = -1;
       break;
      }
      do if (!(_FcStrCmpIgnoreBlanksAndCase(i1, 350235) | 0)) {
       i1 = 0;
       i57 = 218;
      } else {
       if (!(_FcStrCmpIgnoreBlanksAndCase(i1, 350250) | 0)) {
        i1 = 1;
        i57 = 218;
        break;
       }
       if (!(_FcStrCmpIgnoreBlanksAndCase(i1, 350559) | 0)) {
        i1 = 2;
        i57 = 218;
        break;
       }
       if (!(_FcStrCmpIgnoreBlanksAndCase(i1, 350573) | 0)) {
        i1 = 3;
        i57 = 218;
        break;
       }
       if (!(_FcStrCmpIgnoreBlanksAndCase(i1, 350583) | 0)) {
        i1 = 4;
        i57 = 218;
        break;
       }
       if (!(_FcStrCmpIgnoreBlanksAndCase(i1, 350590) | 0)) {
        i1 = 5;
        i57 = 218;
        break;
       }
       if (!(_FcStrCmpIgnoreBlanksAndCase(i1, 350603) | 0)) {
        i1 = 6;
        i57 = 218;
        break;
       }
       if (!(_FcStrCmpIgnoreBlanksAndCase(i1, 350617) | 0)) {
        i1 = 7;
        i57 = 218;
        break;
       }
       if (!(_FcStrCmpIgnoreBlanksAndCase(i1, 350631) | 0)) {
        i1 = 8;
        i57 = 218;
        break;
       }
       if (!(_FcStrCmpIgnoreBlanksAndCase(i1, 350640) | 0)) {
        i1 = 9;
        i57 = 218;
       } else i1 = -1;
      } while (0);
      if ((i57 | 0) == 218) i1 = HEAP32[67872 + (i1 << 3) + 4 >> 2] | 0;
      if (!(HEAP32[91917] & 256)) break;
      HEAP32[i51 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i51 + 4 >> 2] = i1;
      _printf(350265, i51) | 0;
     } while (0);
     i3 = (i4 | 0) == -1;
     do if (!(_FcPatternGetString(i65, 354680, 0, i52) | 0)) {
      i7 = -1;
      i5 = 0;
      i8 = 0;
      while (1) {
       do if (i3) {
        i6 = HEAP32[i52 >> 2] | 0;
        i3 = 0;
        while (1) {
         i4 = HEAP32[67688 + (i3 << 3) >> 2] | 0;
         if ((HEAP8[i4 >> 0] | 0) == 60) {
          if (_FcStrContainsWord(i6, i4 + 1 | 0) | 0) {
           i57 = 229;
           break;
          }
         } else if (_FcStrContainsIgnoreBlanksAndCase(i6, i4) | 0) {
          i57 = 229;
          break;
         }
         i3 = i3 + 1 | 0;
         if ((i3 | 0) >= 23) {
          i4 = -1;
          break;
         }
        }
        if ((i57 | 0) == 229) {
         i57 = 0;
         i4 = HEAP32[67688 + (i3 << 3) + 4 >> 2] | 0;
        }
        if (!(HEAP32[91917] & 256)) break;
        HEAP32[i53 >> 2] = HEAP32[i52 >> 2];
        HEAP32[i53 + 4 >> 2] = i4;
        _printf(350290, i53) | 0;
       } while (0);
       do if ((i1 | 0) == -1) {
        i6 = HEAP32[i52 >> 2] | 0;
        i1 = 0;
        while (1) {
         i3 = HEAP32[67872 + (i1 << 3) >> 2] | 0;
         if ((HEAP8[i3 >> 0] | 0) == 60) {
          if (_FcStrContainsWord(i6, i3 + 1 | 0) | 0) {
           i57 = 238;
           break;
          }
         } else if (_FcStrContainsIgnoreBlanksAndCase(i6, i3) | 0) {
          i57 = 238;
          break;
         }
         i1 = i1 + 1 | 0;
         if ((i1 | 0) >= 10) {
          i1 = -1;
          break;
         }
        }
        if ((i57 | 0) == 238) {
         i57 = 0;
         i1 = HEAP32[67872 + (i1 << 3) + 4 >> 2] | 0;
        }
        if (!(HEAP32[91917] & 256)) break;
        HEAP32[i54 >> 2] = HEAP32[i52 >> 2];
        HEAP32[i54 + 4 >> 2] = i1;
        _printf(350319, i54) | 0;
       } while (0);
       do if ((i7 | 0) == -1) {
        i3 = HEAP32[i52 >> 2] | 0;
        do if (!(_FcStrContainsIgnoreBlanksAndCase(i3, 350347) | 0)) {
         if (_FcStrContainsIgnoreBlanksAndCase(i3, 350507) | 0) {
          i3 = 1;
          i57 = 243;
          break;
         }
         if (!(_FcStrContainsIgnoreBlanksAndCase(i3, 350514) | 0)) i3 = -1; else {
          i3 = 2;
          i57 = 243;
         }
        } else {
         i3 = 0;
         i57 = 243;
        } while (0);
        if ((i57 | 0) == 243) {
         i57 = 0;
         i3 = HEAP32[67952 + (i3 << 3) + 4 >> 2] | 0;
        }
        if (!(HEAP32[91917] & 256)) {
         i6 = i3;
         break;
        }
        HEAP32[i55 >> 2] = HEAP32[i52 >> 2];
        HEAP32[i55 + 4 >> 2] = i3;
        _printf(350354, i55) | 0;
        i6 = i3;
       } else i6 = i7; while (0);
       do if (!i5) {
        i3 = HEAP32[i52 >> 2] | 0;
        do if (!(_FcStrContainsIgnoreBlanksAndCase(i3, 350382) | 0)) {
         if (_FcStrContainsIgnoreBlanksAndCase(i3, 350522) | 0) {
          i3 = 1;
          i57 = 248;
          break;
         }
         if (_FcStrContainsIgnoreBlanksAndCase(i3, 350527) | 0) {
          i3 = 2;
          i57 = 248;
          break;
         }
         if (_FcStrContainsIgnoreBlanksAndCase(i3, 350535) | 0) {
          i3 = 3;
          i57 = 248;
          break;
         }
         if (_FcStrContainsIgnoreBlanksAndCase(i3, 350543) | 0) {
          i3 = 4;
          i57 = 248;
          break;
         }
         if (!(_FcStrContainsIgnoreBlanksAndCase(i3, 350551) | 0)) i3 = -1; else {
          i3 = 5;
          i57 = 248;
         }
        } else {
         i3 = 0;
         i57 = 248;
        } while (0);
        if ((i57 | 0) == 248) {
         i57 = 0;
         i3 = HEAP32[67976 + (i3 << 3) + 4 >> 2] | 0;
        }
        i5 = (i3 | 0) > 0 & 1;
        if (!(HEAP32[91917] & 256)) break;
        HEAP32[i56 >> 2] = HEAP32[i52 >> 2];
        HEAP32[i56 + 4 >> 2] = i5;
        _printf(350389, i56) | 0;
       } while (0);
       i8 = i8 + 1 | 0;
       i3 = (i4 | 0) == -1;
       if (_FcPatternGetString(i65, 354680, i8, i52) | 0) break; else i7 = i6;
      }
      if ((i6 | 0) == -1) {
       i6 = i4;
       i57 = 253;
       break;
      }
      if (i3) {
       i3 = i6;
       i57 = 255;
      } else i3 = i6;
     } else {
      i5 = 0;
      i6 = i4;
      i57 = 253;
     } while (0);
     if ((i57 | 0) == 253) {
      i4 = HEAP32[i63 + 12 >> 2] & 1 | 0 ? 100 : 0;
      if (i3) {
       i3 = i4;
       i57 = 255;
      } else {
       i3 = i4;
       i4 = i6;
      }
     }
     if ((i57 | 0) == 255) i4 = HEAP32[i63 + 12 >> 2] & 2 | 0 ? 200 : 100;
     if (!(_FcPatternAddInteger(i65, 354947, i3) | 0)) break;
     if (!(_FcPatternAddInteger(i65, 354959, i4) | 0)) break;
     if (!(_FcPatternAddInteger(i65, 354953, (i1 | 0) == -1 ? 100 : i1) | 0)) break;
     if (!(_FcPatternAddString(i65, 350422, (i9 | 0) == 0 ? 354148 : i9) | 0)) break;
     if (!(_FcPatternAddBool(i65, 350430, i5) | 0)) break;
     i7 = _FcFreeTypeCharSetAndSpacing(i63, i58, i60) | 0;
     if (!i7) break;
     i1 = HEAP32[i63 + 92 >> 2] | 0;
     if (!i1) i1 = 0; else i1 = (HEAP32[i1 + 4 >> 2] | 0) == 1937337698;
     if (!(_FcPatternAddBool(i65, 350441, i1 & 1) | 0)) break;
     L392 : do if (!(_FT_Get_BDF_Property(i63, 350448, i59) | 0)) {
      if ((HEAP32[i59 >> 2] | 0) != 1) break;
      i3 = HEAP32[i59 + 4 >> 2] | 0;
      if (!i3) break;
      do if (_strcmp(i3, 350456) | 0) {
       if (!(_strcmp(i3, 350458) | 0)) break;
       do if (_strcmp(i3, 350460) | 0) {
        if (!(_strcmp(i3, 350462) | 0)) break;
        if (_strcmp(i3, 350464) | 0) if (_strcmp(i3, 350466) | 0) break L392;
        HEAP32[i60 >> 2] = 0;
        break L392;
       } while (0);
       HEAP32[i60 >> 2] = 100;
       break L392;
      } while (0);
      HEAP32[i60 >> 2] = 110;
     } while (0);
     if (!(_FcCharSetCount(i7) | 0)) {
      if (_FT_Get_BDF_Property(i63, 350468, i59) | 0) i57 = 279;
     } else i57 = 279;
     L410 : do if ((i57 | 0) == 279) {
      if (!(_FcPatternAddCharSet(i65, 355024, i7) | 0)) break;
      if (i1) i1 = _FcLangSetCreate() | 0; else {
       i1 = _FcFreeTypeLangSet(i7, i12) | 0;
       if (!i1) break;
      }
      i59 = (_FcPatternAddLangSet(i65, 355019, i1) | 0) == 0;
      _FcLangSetDestroy(i1);
      if (i59) break;
      i1 = HEAP32[i60 >> 2] | 0;
      if (i1 | 0) if (!(_FcPatternAddInteger(i65, 350479, i1) | 0)) break;
      if (!(HEAP32[i61 >> 2] & 1)) {
       i4 = i63 + 28 | 0;
       i1 = HEAP32[i4 >> 2] | 0;
       if ((i1 | 0) > 0) {
        i5 = i64 + 4 | 0;
        i6 = i63 + 32 | 0;
        i3 = 0;
        do {
         do if ((i1 | 0) == 1) {
          i61 = (_FT_Get_BDF_Property(i63, 350468, i64) | 0) == 0;
          if (i61 & (HEAP32[i64 >> 2] | 0) == 2) {
           d2 = +(HEAP32[i5 >> 2] | 0);
           break;
          } else {
           i57 = 294;
           break;
          }
         } else i57 = 294; while (0);
         if ((i57 | 0) == 294) {
          i57 = 0;
          d2 = +(HEAP32[(HEAP32[i6 >> 2] | 0) + (i3 << 4) + 12 >> 2] | 0) * .015625;
         }
         i3 = i3 + 1 | 0;
         if (!(_FcPatternAddDouble(i65, 350487, d2) | 0)) break L410;
         i1 = HEAP32[i4 >> 2] | 0;
        } while ((i3 | 0) < (i1 | 0));
       }
       if (!(_FcPatternAddBool(i65, 350497, 0) | 0)) break;
      }
      i1 = _FT_Get_X11_Font_Format(i63) | 0;
      if (i1 | 0) if (!(_FcPatternAddString(i65, 355051, i1) | 0)) break;
      _FcCharSetDestroy(i7);
      STACKTOP = i66;
      return i65 | 0;
     } while (0);
     _FcCharSetDestroy(i7);
    }
   }
  } while (0);
  _FcPatternDestroy(i65);
  if (!i62) {
   i65 = 0;
   STACKTOP = i66;
   return i65 | 0;
  }
  _free(i62);
  i65 = 0;
  STACKTOP = i66;
  return i65 | 0;
 }
 _FcPatternDestroy(i65);
 i65 = 0;
 STACKTOP = i66;
 return i65 | 0;
}

function _big2_prologTok(i14, i22, i2, i27) {
 i14 = i14 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 if ((i22 | 0) == (i2 | 0)) {
  i27 = -4;
  return i27 | 0;
 }
 i4 = i22;
 i26 = i2 - i4 | 0;
 i3 = (i26 & 1 | 0) == 0;
 i26 = i26 & -2;
 i23 = (i26 | 0) == 0;
 i26 = i3 | i23 ? i2 : i22 + i26 | 0;
 if (!(i3 | i23 ^ 1)) {
  i27 = -1;
  return i27 | 0;
 }
 i3 = HEAP8[i22 >> 0] | 0;
 L7 : do switch (i3 << 24 >> 24) {
 case 0:
  {
   i23 = i14 + 76 | 0;
   i2 = HEAP8[i22 + 1 >> 0] | 0;
   do switch (HEAP8[i23 + (i2 & 255) >> 0] | 0) {
   case 7:
    {
     i24 = 156;
     break L7;
    }
   case 23:
   case 27:
   case 26:
   case 25:
    {
     i5 = 19;
     break L7;
    }
   case 29:
    {
     i6 = i2;
     i24 = 161;
     break L7;
    }
   case 12:
    {
     i1 = i22 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) {
      i27 = -1;
      return i27 | 0;
     }
     i3 = i26;
     L15 : while (1) {
      L17 : while (1) {
       i2 = HEAP8[i1 + 1 >> 0] | 0;
       L19 : do switch (HEAP8[i1 >> 0] | 0) {
       case -33:
       case -34:
       case -35:
       case -36:
        {
         i24 = 16;
         break L15;
        }
       case -37:
       case -38:
       case -39:
       case -40:
        {
         i24 = 24;
         break L17;
        }
       case 0:
        {
         i2 = HEAP8[i23 + (i2 & 255) >> 0] | 0;
         switch (i2 << 24 >> 24) {
         case 8:
         case 1:
         case 0:
          {
           i24 = 16;
           break L15;
          }
         case 7:
          {
           i24 = 24;
           break L17;
          }
         case 5:
          {
           i24 = 14;
           break L17;
          }
         case 6:
          {
           i24 = 15;
           break L17;
          }
         case 13:
         case 12:
          break;
         default:
          {
           i24 = 23;
           break L19;
          }
         }
         i12 = i1 + 2 | 0;
         if (i2 << 24 >> 24 == 12) {
          i24 = 19;
          break L15;
         } else i8 = i12;
         break;
        }
       case -1:
        {
         if ((i2 & 255) > 253) {
          i24 = 16;
          break L15;
         } else i24 = 23;
         break;
        }
       default:
        i24 = 23;
       } while (0);
       if ((i24 | 0) == 23) {
        i24 = 0;
        i8 = i1 + 2 | 0;
       }
       if ((i8 | 0) == (i26 | 0)) {
        i25 = -1;
        i24 = 206;
        break L15;
       } else i1 = i8;
      }
      if ((i24 | 0) == 14) {
       i24 = 0;
       if ((i3 - i1 | 0) < 2) {
        i25 = -2;
        i24 = 206;
        break;
       } else i10 = i1 + 2 | 0;
      } else if ((i24 | 0) == 15) {
       i24 = 0;
       if ((i3 - i1 | 0) < 3) {
        i25 = -2;
        i24 = 206;
        break;
       } else i10 = i1 + 3 | 0;
      } else if ((i24 | 0) == 24) {
       i24 = 0;
       if ((i3 - i1 | 0) < 4) {
        i25 = -2;
        i24 = 206;
        break;
       } else i10 = i1 + 4 | 0;
      }
      if ((i10 | 0) == (i26 | 0)) {
       i25 = -1;
       i24 = 206;
       break;
      } else i1 = i10;
     }
     if ((i24 | 0) == 16) {
      HEAP32[i27 >> 2] = i1;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 19) {
      if ((i12 | 0) == (i26 | 0)) {
       i27 = -27;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i12;
      L43 : do if (!(HEAP8[i12 >> 0] | 0)) {
       switch (HEAP8[i23 + (HEAPU8[i1 + 3 >> 0] | 0) >> 0] | 0) {
       case 20:
       case 30:
       case 11:
       case 10:
       case 9:
       case 21:
        {
         i25 = 27;
         break;
        }
       default:
        break L43;
       }
       return i25 | 0;
      } while (0);
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 206) return i25 | 0;
     break;
    }
   case 13:
    {
     i1 = i22 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) {
      i27 = -1;
      return i27 | 0;
     }
     i3 = i26;
     L52 : while (1) {
      L54 : while (1) {
       i2 = HEAP8[i1 + 1 >> 0] | 0;
       L56 : do switch (HEAP8[i1 >> 0] | 0) {
       case -33:
       case -34:
       case -35:
       case -36:
        {
         i24 = 34;
         break L52;
        }
       case -37:
       case -38:
       case -39:
       case -40:
        {
         i24 = 42;
         break L54;
        }
       case 0:
        {
         i2 = HEAP8[i23 + (i2 & 255) >> 0] | 0;
         switch (i2 << 24 >> 24) {
         case 8:
         case 1:
         case 0:
          {
           i24 = 34;
           break L52;
          }
         case 7:
          {
           i24 = 42;
           break L54;
          }
         case 5:
          {
           i24 = 32;
           break L54;
          }
         case 6:
          {
           i24 = 33;
           break L54;
          }
         case 13:
         case 12:
          break;
         default:
          {
           i24 = 41;
           break L56;
          }
         }
         i13 = i1 + 2 | 0;
         if (i2 << 24 >> 24 == 13) {
          i24 = 37;
          break L52;
         } else i9 = i13;
         break;
        }
       case -1:
        {
         if ((i2 & 255) > 253) {
          i24 = 34;
          break L52;
         } else i24 = 41;
         break;
        }
       default:
        i24 = 41;
       } while (0);
       if ((i24 | 0) == 41) {
        i24 = 0;
        i9 = i1 + 2 | 0;
       }
       if ((i9 | 0) == (i26 | 0)) {
        i25 = -1;
        i24 = 206;
        break L52;
       } else i1 = i9;
      }
      if ((i24 | 0) == 32) {
       i24 = 0;
       if ((i3 - i1 | 0) < 2) {
        i25 = -2;
        i24 = 206;
        break;
       } else i11 = i1 + 2 | 0;
      } else if ((i24 | 0) == 33) {
       i24 = 0;
       if ((i3 - i1 | 0) < 3) {
        i25 = -2;
        i24 = 206;
        break;
       } else i11 = i1 + 3 | 0;
      } else if ((i24 | 0) == 42) {
       i24 = 0;
       if ((i3 - i1 | 0) < 4) {
        i25 = -2;
        i24 = 206;
        break;
       } else i11 = i1 + 4 | 0;
      }
      if ((i11 | 0) == (i26 | 0)) {
       i25 = -1;
       i24 = 206;
       break;
      } else i1 = i11;
     }
     if ((i24 | 0) == 34) {
      HEAP32[i27 >> 2] = i1;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 37) {
      if ((i13 | 0) == (i26 | 0)) {
       i27 = -27;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i13;
      L80 : do if (!(HEAP8[i13 >> 0] | 0)) {
       switch (HEAP8[i23 + (HEAPU8[i1 + 3 >> 0] | 0) >> 0] | 0) {
       case 20:
       case 30:
       case 11:
       case 10:
       case 9:
       case 21:
        {
         i25 = 27;
         break;
        }
       default:
        break L80;
       }
       return i25 | 0;
      } while (0);
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 206) return i25 | 0;
     break;
    }
   case 2:
    {
     i1 = i22 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) {
      i27 = -1;
      return i27 | 0;
     }
     i2 = HEAP8[i22 + 3 >> 0] | 0;
     L89 : do switch (HEAP8[i1 >> 0] | 0) {
     case 0:
      {
       switch (HEAP8[i23 + (i2 & 255) >> 0] | 0) {
       case 7:
       case 6:
       case 5:
       case 29:
       case 24:
       case 22:
        {
         i24 = 90;
         break L89;
        }
       case 16:
        break;
       case 15:
        {
         i27 = _big2_scanPi(i14, i22 + 4 | 0, i26, i27) | 0;
         return i27 | 0;
        }
       default:
        {
         i24 = 91;
         break L89;
        }
       }
       i2 = i22 + 4 | 0;
       if ((i2 | 0) == (i26 | 0)) {
        i27 = -1;
        return i27 | 0;
       }
       L98 : do if (!(HEAP8[i2 >> 0] | 0)) switch (HEAP8[i23 + (HEAPU8[i22 + 5 >> 0] | 0) >> 0] | 0) {
       case 27:
        {
         i4 = i22 + 6 | 0;
         if ((i4 | 0) == (i26 | 0)) {
          i27 = -1;
          return i27 | 0;
         }
         if (!(HEAP8[i4 >> 0] | 0)) if ((HEAP8[i22 + 7 >> 0] | 0) == 45) {
          i1 = i22 + 8 | 0;
          if ((i1 | 0) == (i26 | 0)) {
           i27 = -1;
           return i27 | 0;
          }
          i3 = i26;
          i2 = i1;
          L111 : while (1) {
           i1 = HEAP8[i2 + 1 >> 0] | 0;
           L113 : do switch (HEAP8[i2 >> 0] | 0) {
           case -33:
           case -34:
           case -35:
           case -36:
            {
             i24 = 67;
             break L111;
            }
           case 0:
            switch (HEAP8[i23 + (i1 & 255) >> 0] | 0) {
            case 8:
            case 1:
            case 0:
             {
              i24 = 67;
              break L111;
             }
            case 7:
             {
              i24 = 65;
              break L113;
             }
            case 5:
             {
              if ((i3 - i2 | 0) < 2) {
               i25 = -2;
               i24 = 206;
               break L111;
              }
              i15 = i2 + 2 | 0;
              break L113;
             }
            case 6:
             {
              if ((i3 - i2 | 0) < 3) {
               i25 = -2;
               i24 = 206;
               break L111;
              }
              i15 = i2 + 3 | 0;
              break L113;
             }
            case 27:
             {
              i1 = i2 + 2 | 0;
              if ((i1 | 0) == (i26 | 0)) {
               i25 = -1;
               i24 = 206;
               break L111;
              }
              if (HEAP8[i1 >> 0] | 0) {
               i15 = i1;
               break L113;
              }
              if ((HEAP8[i2 + 3 >> 0] | 0) == 45) {
               i24 = 72;
               break L111;
              } else {
               i15 = i1;
               break L113;
              }
             }
            default:
             {
              i24 = 77;
              break L113;
             }
            }
           case -37:
           case -38:
           case -39:
           case -40:
            {
             i24 = 65;
             break;
            }
           case -1:
            {
             if ((i1 & 255) > 253) {
              i24 = 67;
              break L111;
             } else i24 = 77;
             break;
            }
           default:
            i24 = 77;
           } while (0);
           if ((i24 | 0) == 65) {
            i24 = 0;
            if ((i3 - i2 | 0) < 4) {
             i25 = -2;
             i24 = 206;
             break;
            }
            i15 = i2 + 4 | 0;
           } else if ((i24 | 0) == 77) {
            i24 = 0;
            i15 = i2 + 2 | 0;
           }
           if ((i15 | 0) == (i26 | 0)) {
            i25 = -1;
            i24 = 206;
            break;
           } else i2 = i15;
          }
          if ((i24 | 0) == 67) {
           HEAP32[i27 >> 2] = i2;
           i27 = 0;
           return i27 | 0;
          } else if ((i24 | 0) == 72) {
           i1 = i2 + 4 | 0;
           if ((i1 | 0) == (i26 | 0)) {
            i27 = -1;
            return i27 | 0;
           }
           if (!(HEAP8[i1 >> 0] | 0)) if ((HEAP8[i2 + 5 >> 0] | 0) == 62) {
            HEAP32[i27 >> 2] = i2 + 6;
            i27 = 13;
            return i27 | 0;
           }
           HEAP32[i27 >> 2] = i1;
           i27 = 0;
           return i27 | 0;
          } else if ((i24 | 0) == 206) return i25 | 0;
         }
         HEAP32[i27 >> 2] = i4;
         i27 = 0;
         return i27 | 0;
        }
       case 20:
        {
         HEAP32[i27 >> 2] = i22 + 6;
         i27 = 33;
         return i27 | 0;
        }
       case 24:
       case 22:
        {
         i1 = i22 + 6 | 0;
         if ((i1 | 0) == (i26 | 0)) {
          i27 = -1;
          return i27 | 0;
         } else i3 = i1;
         L154 : while (1) {
          if (HEAP8[i3 >> 0] | 0) {
           i24 = 88;
           break;
          }
          switch (HEAP8[i23 + (HEAPU8[i2 + 3 >> 0] | 0) >> 0] | 0) {
          case 30:
           {
            i24 = 83;
            break L154;
           }
          case 10:
          case 9:
          case 21:
           break L154;
          case 24:
          case 22:
           break;
          default:
           {
            i24 = 88;
            break L154;
           }
          }
          i1 = i3 + 2 | 0;
          if ((i1 | 0) == (i26 | 0)) {
           i25 = -1;
           i24 = 206;
           break;
          } else {
           i2 = i3;
           i3 = i1;
          }
         }
         L158 : do if ((i24 | 0) == 83) {
          i1 = i2 + 4 | 0;
          if ((i1 | 0) == (i26 | 0)) {
           i27 = -1;
           return i27 | 0;
          }
          if (!(HEAP8[i1 >> 0] | 0)) {
           switch (HEAP8[i23 + (HEAPU8[i2 + 5 >> 0] | 0) >> 0] | 0) {
           case 30:
           case 10:
           case 9:
           case 21:
            break;
           default:
            break L158;
           }
           HEAP32[i27 >> 2] = i3;
           i27 = 0;
           return i27 | 0;
          }
         } else if ((i24 | 0) == 88) {
          HEAP32[i27 >> 2] = i3;
          i27 = 0;
          return i27 | 0;
         } else if ((i24 | 0) == 206) return i25 | 0; while (0);
         HEAP32[i27 >> 2] = i3;
         i27 = 16;
         return i27 | 0;
        }
       default:
        break L98;
       } while (0);
       HEAP32[i27 >> 2] = i2;
       i27 = 0;
       return i27 | 0;
      }
     case -1:
      {
       if ((i2 & 255) > 253) i24 = 91; else i24 = 90;
       break;
      }
     case -36:
     case -35:
     case -34:
     case -33:
      {
       i24 = 91;
       break;
      }
     default:
      i24 = 90;
     } while (0);
     if ((i24 | 0) == 90) {
      HEAP32[i27 >> 2] = i22;
      i27 = 29;
      return i27 | 0;
     } else if ((i24 | 0) == 91) {
      HEAP32[i27 >> 2] = i1;
      i27 = 0;
      return i27 | 0;
     }
     break;
    }
   case 9:
    {
     if ((i22 + 2 | 0) == (i26 | 0)) {
      HEAP32[i27 >> 2] = i26;
      i27 = -15;
      return i27 | 0;
     }
     break;
    }
   case 10:
   case 21:
    break;
   case 30:
    {
     i27 = _big2_scanPercent(i14, i22 + 2 | 0, i26, i27) | 0;
     return i27 | 0;
    }
   case 35:
    {
     HEAP32[i27 >> 2] = i22 + 2;
     i27 = 38;
     return i27 | 0;
    }
   case 20:
    {
     HEAP32[i27 >> 2] = i22 + 2;
     i27 = 25;
     return i27 | 0;
    }
   case 4:
    {
     i1 = i22 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) {
      i27 = -26;
      return i27 | 0;
     }
     if (!(HEAP8[i1 >> 0] | 0)) if ((HEAP8[i22 + 3 >> 0] | 0) == 93) {
      i2 = i22 + 4 | 0;
      if ((i2 | 0) == (i26 | 0)) {
       i27 = -1;
       return i27 | 0;
      }
      if (!(HEAP8[i2 >> 0] | 0)) if ((HEAP8[i22 + 5 >> 0] | 0) == 62) {
       HEAP32[i27 >> 2] = i22 + 6;
       i27 = 34;
       return i27 | 0;
      }
     }
     HEAP32[i27 >> 2] = i1;
     i27 = 26;
     return i27 | 0;
    }
   case 31:
    {
     HEAP32[i27 >> 2] = i22 + 2;
     i27 = 23;
     return i27 | 0;
    }
   case 32:
    {
     i1 = i22 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) {
      i27 = -24;
      return i27 | 0;
     }
     L209 : do if (!(HEAP8[i1 >> 0] | 0)) switch (HEAP8[i23 + (HEAPU8[i22 + 3 >> 0] | 0) >> 0] | 0) {
     case 33:
      {
       HEAP32[i27 >> 2] = i22 + 4;
       i27 = 36;
       return i27 | 0;
      }
     case 15:
      {
       HEAP32[i27 >> 2] = i22 + 4;
       i27 = 35;
       return i27 | 0;
      }
     case 34:
      {
       HEAP32[i27 >> 2] = i22 + 4;
       i27 = 37;
       return i27 | 0;
      }
     case 32:
     case 36:
     case 35:
     case 11:
     case 21:
     case 10:
     case 9:
      {
       HEAP32[i27 >> 2] = i1;
       i27 = 24;
       return i27 | 0;
      }
     default:
      break L209;
     } while (0);
     HEAP32[i27 >> 2] = i1;
     i27 = 0;
     return i27 | 0;
    }
   case 36:
    {
     HEAP32[i27 >> 2] = i22 + 2;
     i27 = 21;
     return i27 | 0;
    }
   case 11:
    {
     HEAP32[i27 >> 2] = i22 + 2;
     i27 = 17;
     return i27 | 0;
    }
   case 19:
    {
     i5 = i22 + 2 | 0;
     if ((i5 | 0) == (i26 | 0)) {
      i27 = -1;
      return i27 | 0;
     }
     i3 = HEAP8[i5 >> 0] | 0;
     L230 : do switch (i3 << 24 >> 24) {
     case 0:
      {
       i2 = HEAP8[i22 + 3 >> 0] | 0;
       switch (HEAP8[i23 + (i2 & 255) >> 0] | 0) {
       case 29:
        {
         i7 = i2;
         i24 = 128;
         break L230;
        }
       case 24:
       case 22:
        break L230;
       case 7:
        {
         i24 = 134;
         break L230;
        }
       case 5:
        {
         if ((i26 - i5 | 0) < 2) {
          i27 = -2;
          return i27 | 0;
         }
         HEAP32[i27 >> 2] = i5;
         i27 = 0;
         return i27 | 0;
        }
       case 6:
        {
         if ((i26 - i5 | 0) < 3) {
          i27 = -2;
          return i27 | 0;
         }
         HEAP32[i27 >> 2] = i5;
         i27 = 0;
         return i27 | 0;
        }
       default:
        {
         i24 = 136;
         break L230;
        }
       }
      }
     case -37:
     case -38:
     case -39:
     case -40:
      {
       i24 = 134;
       break;
      }
     case -33:
     case -34:
     case -35:
     case -36:
      {
       i24 = 136;
       break;
      }
     case -1:
      {
       i2 = HEAP8[i22 + 3 >> 0] | 0;
       if ((i2 & 255) > 253) i24 = 136; else {
        i7 = i2;
        i24 = 128;
       }
       break;
      }
     default:
      {
       i7 = HEAP8[i22 + 3 >> 0] | 0;
       i24 = 128;
      }
     } while (0);
     if ((i24 | 0) == 128) {
      i21 = i7 & 255;
      if (!(1 << (i21 & 31) & HEAP32[25356 + ((HEAPU8[344737 + (i3 & 255) >> 0] << 3 | i21 >>> 5) << 2) >> 2])) {
       HEAP32[i27 >> 2] = i5;
       i27 = 0;
       return i27 | 0;
      }
     } else if ((i24 | 0) == 134) {
      if ((i26 - i5 | 0) < 4) {
       i27 = -2;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i5;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 136) {
      HEAP32[i27 >> 2] = i5;
      i27 = 0;
      return i27 | 0;
     }
     i2 = i22 + 4 | 0;
     if ((i2 | 0) == (i26 | 0)) {
      i27 = -20;
      return i27 | 0;
     } else {
      i4 = i2;
      i2 = i5;
     }
     L259 : while (1) {
      i3 = HEAP8[i4 >> 0] | 0;
      switch (i3 << 24 >> 24) {
      case -37:
      case -38:
      case -39:
      case -40:
       {
        i24 = 148;
        break L259;
       }
      case -33:
      case -34:
      case -35:
      case -36:
       {
        i24 = 151;
        break L259;
       }
      case 0:
       {
        i2 = HEAP8[i2 + 3 >> 0] | 0;
        switch (HEAP8[i23 + (i2 & 255) >> 0] | 0) {
        case 7:
         {
          i24 = 148;
          break L259;
         }
        case 5:
         {
          i24 = 144;
          break L259;
         }
        case 6:
         {
          i24 = 146;
          break L259;
         }
        case 36:
        case 30:
        case 11:
        case 32:
        case 21:
        case 10:
        case 9:
         {
          i24 = 150;
          break L259;
         }
        case 29:
         {
          i1 = i2;
          i24 = 141;
          break;
         }
        case 27:
        case 26:
        case 25:
        case 24:
        case 22:
         break;
        default:
         {
          i24 = 151;
          break L259;
         }
        }
        break;
       }
      case -1:
       {
        i1 = HEAP8[i2 + 3 >> 0] | 0;
        if ((i1 & 255) > 253) {
         i24 = 151;
         break L259;
        } else i24 = 141;
        break;
       }
      default:
       {
        i1 = HEAP8[i2 + 3 >> 0] | 0;
        i24 = 141;
       }
      }
      if ((i24 | 0) == 141) {
       i24 = 0;
       i21 = i1 & 255;
       if (!(1 << (i21 & 31) & HEAP32[25356 + ((HEAPU8[344993 + (i3 & 255) >> 0] << 3 | i21 >>> 5) << 2) >> 2])) {
        i24 = 143;
        break;
       }
      }
      i2 = i4 + 2 | 0;
      if ((i2 | 0) == (i26 | 0)) {
       i25 = -20;
       i24 = 206;
       break;
      } else {
       i21 = i4;
       i4 = i2;
       i2 = i21;
      }
     }
     if ((i24 | 0) == 143) {
      HEAP32[i27 >> 2] = i4;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 144) {
      if ((i26 - i4 | 0) < 2) {
       i27 = -2;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i4;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 146) {
      if ((i26 - i4 | 0) < 3) {
       i27 = -2;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i4;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 148) {
      if ((i26 - i4 | 0) < 4) {
       i27 = -2;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i4;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 150) {
      HEAP32[i27 >> 2] = i4;
      i27 = 20;
      return i27 | 0;
     } else if ((i24 | 0) == 151) {
      HEAP32[i27 >> 2] = i4;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 206) return i25 | 0;
     break;
    }
   case 5:
    {
     if ((i26 - i4 | 0) < 2) {
      i27 = -2;
      return i27 | 0;
     }
     HEAP32[i27 >> 2] = i22;
     i27 = 0;
     return i27 | 0;
    }
   case 6:
    {
     if ((i26 - i4 | 0) < 3) {
      i27 = -2;
      return i27 | 0;
     }
     HEAP32[i27 >> 2] = i22;
     i27 = 0;
     return i27 | 0;
    }
   case 24:
   case 22:
    {
     i5 = 18;
     break L7;
    }
   default:
    {
     i24 = 163;
     break L7;
    }
   } while (0);
   i2 = i22 + 2 | 0;
   L303 : do if ((i2 | 0) != (i26 | 0)) {
    i1 = i22;
    L304 : while (1) {
     if (HEAP8[i2 >> 0] | 0) break;
     switch (HEAP8[i23 + (HEAPU8[i1 + 3 >> 0] | 0) >> 0] | 0) {
     case 10:
     case 21:
      break;
     case 9:
      {
       if ((i1 + 4 | 0) == (i26 | 0)) break L304;
       break;
      }
     default:
      break L304;
     }
     i1 = i2 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) break L303; else {
      i25 = i2;
      i2 = i1;
      i1 = i25;
     }
    }
    HEAP32[i27 >> 2] = i2;
    i27 = 15;
    return i27 | 0;
   } while (0);
   HEAP32[i27 >> 2] = i26;
   i27 = 15;
   return i27 | 0;
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i24 = 156;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i24 = 163;
   break;
  }
 case -1:
  {
   i1 = HEAP8[i22 + 1 >> 0] | 0;
   if ((i1 & 255) > 253) i24 = 163; else {
    i6 = i1;
    i24 = 161;
   }
   break;
  }
 default:
  {
   i6 = HEAP8[i22 + 1 >> 0] | 0;
   i24 = 161;
  }
 } while (0);
 if ((i24 | 0) == 156) {
  if ((i26 - i4 | 0) < 4) {
   i27 = -2;
   return i27 | 0;
  }
  HEAP32[i27 >> 2] = i22;
  i27 = 0;
  return i27 | 0;
 } else if ((i24 | 0) == 161) {
  i3 = i3 & 255;
  i2 = i6 & 255;
  i1 = i2 >>> 5;
  i2 = 1 << (i2 & 31);
  if (!(i2 & HEAP32[25356 + ((i1 | HEAPU8[344737 + i3 >> 0] << 3) << 2) >> 2])) if (!(HEAP32[25356 + ((HEAPU8[344993 + i3 >> 0] << 3 | i1) << 2) >> 2] & i2)) i24 = 163; else i5 = 19; else i5 = 18;
 }
 if ((i24 | 0) == 163) {
  HEAP32[i27 >> 2] = i22;
  i27 = 0;
  return i27 | 0;
 }
 i1 = i22 + 2 | 0;
 L327 : do if ((i1 | 0) == (i26 | 0)) i19 = i5; else {
  i6 = i14 + 76 | 0;
  i3 = i1;
  L329 : while (1) {
   i4 = HEAP8[i3 >> 0] | 0;
   L331 : do switch (i4 << 24 >> 24) {
   case -37:
   case -38:
   case -39:
   case -40:
    {
     i24 = 175;
     break L329;
    }
   case -33:
   case -34:
   case -35:
   case -36:
    {
     i24 = 204;
     break L329;
    }
   case 0:
    {
     i1 = HEAP8[i3 + 1 >> 0] | 0;
     switch (HEAP8[i6 + (i1 & 255) >> 0] | 0) {
     case 7:
      {
       i24 = 175;
       break L329;
      }
     case 5:
      {
       i24 = 171;
       break L329;
      }
     case 6:
      {
       i24 = 173;
       break L329;
      }
     case 10:
     case 9:
     case 21:
     case 30:
     case 20:
     case 36:
     case 35:
     case 32:
     case 11:
      {
       i24 = 177;
       break L329;
      }
     case 34:
      {
       i24 = 195;
       break L329;
      }
     case 33:
      {
       i24 = 198;
       break L329;
      }
     case 15:
      {
       i24 = 201;
       break L329;
      }
     case 29:
      {
       i18 = i1;
       i24 = 168;
       break L331;
      }
     case 27:
     case 26:
     case 25:
     case 24:
     case 22:
      {
       i24 = 170;
       break L331;
      }
     case 23:
      break;
     default:
      {
       i24 = 204;
       break L329;
      }
     }
     i20 = i3 + 2 | 0;
     switch (i5 & 63) {
     case 18:
      break;
     case 41:
      {
       i16 = 19;
       i17 = i20;
       break L331;
      }
     default:
      {
       i16 = i5;
       i17 = i20;
       break L331;
      }
     }
     if ((i20 | 0) == (i26 | 0)) {
      i25 = -1;
      i24 = 206;
      break L329;
     }
     i2 = HEAP8[i20 >> 0] | 0;
     switch (i2 << 24 >> 24) {
     case -37:
     case -38:
     case -39:
     case -40:
      {
       i24 = 191;
       break L329;
      }
     case -33:
     case -34:
     case -35:
     case -36:
      {
       i16 = 19;
       i17 = i20;
       break L331;
      }
     case 0:
      {
       i1 = HEAP8[i3 + 3 >> 0] | 0;
       switch (HEAP8[i6 + (i1 & 255) >> 0] | 0) {
       case 7:
        {
         i24 = 191;
         break L329;
        }
       case 5:
        {
         i24 = 187;
         break L329;
        }
       case 6:
        {
         i24 = 189;
         break L329;
        }
       case 29:
        {
         i21 = i1;
         i24 = 184;
         break;
        }
       case 27:
       case 26:
       case 25:
       case 24:
       case 22:
        break;
       default:
        {
         i16 = 19;
         i17 = i20;
         break L331;
        }
       }
       break;
      }
     case -1:
      {
       i1 = HEAP8[i3 + 3 >> 0] | 0;
       if ((i1 & 255) > 253) {
        i16 = 19;
        i17 = i20;
        break L331;
       } else {
        i21 = i1;
        i24 = 184;
       }
       break;
      }
     default:
      {
       i21 = HEAP8[i3 + 3 >> 0] | 0;
       i24 = 184;
      }
     }
     if ((i24 | 0) == 184) {
      i24 = 0;
      i23 = i21 & 255;
      if (!(1 << (i23 & 31) & HEAP32[25356 + ((i23 >>> 5 | HEAPU8[344993 + (i2 & 255) >> 0] << 3) << 2) >> 2])) {
       i24 = 185;
       break L329;
      }
     }
     i16 = 41;
     i17 = i3 + 4 | 0;
     break;
    }
   case -1:
    {
     i1 = HEAP8[i3 + 1 >> 0] | 0;
     if ((i1 & 255) > 253) {
      i24 = 204;
      break L329;
     } else {
      i18 = i1;
      i24 = 168;
     }
     break;
    }
   default:
    {
     i18 = HEAP8[i3 + 1 >> 0] | 0;
     i24 = 168;
    }
   } while (0);
   if ((i24 | 0) == 168) {
    i24 = i18 & 255;
    if (!(1 << (i24 & 31) & HEAP32[25356 + ((i24 >>> 5 | HEAPU8[344993 + (i4 & 255) >> 0] << 3) << 2) >> 2])) {
     i24 = 169;
     break;
    } else i24 = 170;
   }
   if ((i24 | 0) == 170) {
    i24 = 0;
    i16 = i5;
    i17 = i3 + 2 | 0;
   }
   if ((i17 | 0) == (i26 | 0)) {
    i19 = i16;
    break L327;
   } else {
    i5 = i16;
    i3 = i17;
   }
  }
  switch (i24 | 0) {
  case 169:
   {
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   }
  case 171:
   {
    if ((i26 - i3 | 0) < 2) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   }
  case 173:
   {
    if ((i26 - i3 | 0) < 3) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   }
  case 175:
   {
    if ((i26 - i3 | 0) < 4) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   }
  case 177:
   {
    HEAP32[i27 >> 2] = i3;
    i27 = i5;
    return i27 | 0;
   }
  case 185:
   {
    HEAP32[i27 >> 2] = i20;
    i27 = 0;
    return i27 | 0;
   }
  case 187:
   {
    if ((i26 - i20 | 0) < 2) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i20;
    i27 = 0;
    return i27 | 0;
   }
  case 189:
   {
    if ((i26 - i20 | 0) < 3) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i20;
    i27 = 0;
    return i27 | 0;
   }
  case 191:
   {
    if ((i26 - i20 | 0) < 4) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i20;
    i27 = 0;
    return i27 | 0;
   }
  case 195:
   if ((i5 | 0) == 19) {
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   } else {
    HEAP32[i27 >> 2] = i3 + 2;
    i27 = 32;
    return i27 | 0;
   }
  case 198:
   if ((i5 | 0) == 19) {
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   } else {
    HEAP32[i27 >> 2] = i3 + 2;
    i27 = 31;
    return i27 | 0;
   }
  case 201:
   if ((i5 | 0) == 19) {
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   } else {
    HEAP32[i27 >> 2] = i3 + 2;
    i27 = 30;
    return i27 | 0;
   }
  case 204:
   {
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   }
  case 206:
   return i25 | 0;
  }
 } while (0);
 i27 = 0 - i19 | 0;
 return i27 | 0;
}

function _little2_prologTok(i14, i22, i2, i27) {
 i14 = i14 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 if ((i22 | 0) == (i2 | 0)) {
  i27 = -4;
  return i27 | 0;
 }
 i4 = i22;
 i26 = i2 - i4 | 0;
 i3 = (i26 & 1 | 0) == 0;
 i26 = i26 & -2;
 i23 = (i26 | 0) == 0;
 i26 = i3 | i23 ? i2 : i22 + i26 | 0;
 if (!(i3 | i23 ^ 1)) {
  i27 = -1;
  return i27 | 0;
 }
 i3 = HEAP8[i22 + 1 >> 0] | 0;
 L7 : do switch (i3 << 24 >> 24) {
 case 0:
  {
   i23 = i14 + 76 | 0;
   i2 = HEAP8[i22 >> 0] | 0;
   do switch (HEAP8[i23 + (i2 & 255) >> 0] | 0) {
   case 7:
    {
     i24 = 156;
     break L7;
    }
   case 23:
   case 27:
   case 26:
   case 25:
    {
     i5 = 19;
     break L7;
    }
   case 29:
    {
     i6 = i2;
     i24 = 161;
     break L7;
    }
   case 12:
    {
     i1 = i22 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) {
      i27 = -1;
      return i27 | 0;
     }
     i3 = i26;
     L15 : while (1) {
      L17 : while (1) {
       i2 = HEAP8[i1 >> 0] | 0;
       L19 : do switch (HEAP8[i1 + 1 >> 0] | 0) {
       case -33:
       case -34:
       case -35:
       case -36:
        {
         i24 = 16;
         break L15;
        }
       case -37:
       case -38:
       case -39:
       case -40:
        {
         i24 = 24;
         break L17;
        }
       case 0:
        {
         i2 = HEAP8[i23 + (i2 & 255) >> 0] | 0;
         switch (i2 << 24 >> 24) {
         case 8:
         case 1:
         case 0:
          {
           i24 = 16;
           break L15;
          }
         case 7:
          {
           i24 = 24;
           break L17;
          }
         case 5:
          {
           i24 = 14;
           break L17;
          }
         case 6:
          {
           i24 = 15;
           break L17;
          }
         case 13:
         case 12:
          break;
         default:
          {
           i24 = 23;
           break L19;
          }
         }
         i12 = i1 + 2 | 0;
         if (i2 << 24 >> 24 == 12) {
          i24 = 19;
          break L15;
         } else i8 = i12;
         break;
        }
       case -1:
        {
         if ((i2 & 255) > 253) {
          i24 = 16;
          break L15;
         } else i24 = 23;
         break;
        }
       default:
        i24 = 23;
       } while (0);
       if ((i24 | 0) == 23) {
        i24 = 0;
        i8 = i1 + 2 | 0;
       }
       if ((i8 | 0) == (i26 | 0)) {
        i25 = -1;
        i24 = 206;
        break L15;
       } else i1 = i8;
      }
      if ((i24 | 0) == 14) {
       i24 = 0;
       if ((i3 - i1 | 0) < 2) {
        i25 = -2;
        i24 = 206;
        break;
       } else i10 = i1 + 2 | 0;
      } else if ((i24 | 0) == 15) {
       i24 = 0;
       if ((i3 - i1 | 0) < 3) {
        i25 = -2;
        i24 = 206;
        break;
       } else i10 = i1 + 3 | 0;
      } else if ((i24 | 0) == 24) {
       i24 = 0;
       if ((i3 - i1 | 0) < 4) {
        i25 = -2;
        i24 = 206;
        break;
       } else i10 = i1 + 4 | 0;
      }
      if ((i10 | 0) == (i26 | 0)) {
       i25 = -1;
       i24 = 206;
       break;
      } else i1 = i10;
     }
     if ((i24 | 0) == 16) {
      HEAP32[i27 >> 2] = i1;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 19) {
      if ((i12 | 0) == (i26 | 0)) {
       i27 = -27;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i12;
      L43 : do if (!(HEAP8[i1 + 3 >> 0] | 0)) {
       switch (HEAP8[i23 + (HEAPU8[i12 >> 0] | 0) >> 0] | 0) {
       case 20:
       case 30:
       case 11:
       case 10:
       case 9:
       case 21:
        {
         i25 = 27;
         break;
        }
       default:
        break L43;
       }
       return i25 | 0;
      } while (0);
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 206) return i25 | 0;
     break;
    }
   case 13:
    {
     i1 = i22 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) {
      i27 = -1;
      return i27 | 0;
     }
     i3 = i26;
     L52 : while (1) {
      L54 : while (1) {
       i2 = HEAP8[i1 >> 0] | 0;
       L56 : do switch (HEAP8[i1 + 1 >> 0] | 0) {
       case -33:
       case -34:
       case -35:
       case -36:
        {
         i24 = 34;
         break L52;
        }
       case -37:
       case -38:
       case -39:
       case -40:
        {
         i24 = 42;
         break L54;
        }
       case 0:
        {
         i2 = HEAP8[i23 + (i2 & 255) >> 0] | 0;
         switch (i2 << 24 >> 24) {
         case 8:
         case 1:
         case 0:
          {
           i24 = 34;
           break L52;
          }
         case 7:
          {
           i24 = 42;
           break L54;
          }
         case 5:
          {
           i24 = 32;
           break L54;
          }
         case 6:
          {
           i24 = 33;
           break L54;
          }
         case 13:
         case 12:
          break;
         default:
          {
           i24 = 41;
           break L56;
          }
         }
         i13 = i1 + 2 | 0;
         if (i2 << 24 >> 24 == 13) {
          i24 = 37;
          break L52;
         } else i9 = i13;
         break;
        }
       case -1:
        {
         if ((i2 & 255) > 253) {
          i24 = 34;
          break L52;
         } else i24 = 41;
         break;
        }
       default:
        i24 = 41;
       } while (0);
       if ((i24 | 0) == 41) {
        i24 = 0;
        i9 = i1 + 2 | 0;
       }
       if ((i9 | 0) == (i26 | 0)) {
        i25 = -1;
        i24 = 206;
        break L52;
       } else i1 = i9;
      }
      if ((i24 | 0) == 32) {
       i24 = 0;
       if ((i3 - i1 | 0) < 2) {
        i25 = -2;
        i24 = 206;
        break;
       } else i11 = i1 + 2 | 0;
      } else if ((i24 | 0) == 33) {
       i24 = 0;
       if ((i3 - i1 | 0) < 3) {
        i25 = -2;
        i24 = 206;
        break;
       } else i11 = i1 + 3 | 0;
      } else if ((i24 | 0) == 42) {
       i24 = 0;
       if ((i3 - i1 | 0) < 4) {
        i25 = -2;
        i24 = 206;
        break;
       } else i11 = i1 + 4 | 0;
      }
      if ((i11 | 0) == (i26 | 0)) {
       i25 = -1;
       i24 = 206;
       break;
      } else i1 = i11;
     }
     if ((i24 | 0) == 34) {
      HEAP32[i27 >> 2] = i1;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 37) {
      if ((i13 | 0) == (i26 | 0)) {
       i27 = -27;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i13;
      L80 : do if (!(HEAP8[i1 + 3 >> 0] | 0)) {
       switch (HEAP8[i23 + (HEAPU8[i13 >> 0] | 0) >> 0] | 0) {
       case 20:
       case 30:
       case 11:
       case 10:
       case 9:
       case 21:
        {
         i25 = 27;
         break;
        }
       default:
        break L80;
       }
       return i25 | 0;
      } while (0);
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 206) return i25 | 0;
     break;
    }
   case 2:
    {
     i1 = i22 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) {
      i27 = -1;
      return i27 | 0;
     }
     i2 = HEAP8[i1 >> 0] | 0;
     L89 : do switch (HEAP8[i22 + 3 >> 0] | 0) {
     case 0:
      {
       switch (HEAP8[i23 + (i2 & 255) >> 0] | 0) {
       case 7:
       case 6:
       case 5:
       case 29:
       case 24:
       case 22:
        {
         i24 = 90;
         break L89;
        }
       case 16:
        break;
       case 15:
        {
         i27 = _little2_scanPi(i14, i22 + 4 | 0, i26, i27) | 0;
         return i27 | 0;
        }
       default:
        {
         i24 = 91;
         break L89;
        }
       }
       i2 = i22 + 4 | 0;
       if ((i2 | 0) == (i26 | 0)) {
        i27 = -1;
        return i27 | 0;
       }
       L98 : do if (!(HEAP8[i22 + 5 >> 0] | 0)) switch (HEAP8[i23 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
       case 27:
        {
         i4 = i22 + 6 | 0;
         if ((i4 | 0) == (i26 | 0)) {
          i27 = -1;
          return i27 | 0;
         }
         if (!(HEAP8[i22 + 7 >> 0] | 0)) if ((HEAP8[i4 >> 0] | 0) == 45) {
          i1 = i22 + 8 | 0;
          if ((i1 | 0) == (i26 | 0)) {
           i27 = -1;
           return i27 | 0;
          }
          i3 = i26;
          i2 = i1;
          L111 : while (1) {
           i1 = HEAP8[i2 >> 0] | 0;
           L113 : do switch (HEAP8[i2 + 1 >> 0] | 0) {
           case -33:
           case -34:
           case -35:
           case -36:
            {
             i24 = 67;
             break L111;
            }
           case 0:
            switch (HEAP8[i23 + (i1 & 255) >> 0] | 0) {
            case 8:
            case 1:
            case 0:
             {
              i24 = 67;
              break L111;
             }
            case 7:
             {
              i24 = 65;
              break L113;
             }
            case 5:
             {
              if ((i3 - i2 | 0) < 2) {
               i25 = -2;
               i24 = 206;
               break L111;
              }
              i15 = i2 + 2 | 0;
              break L113;
             }
            case 6:
             {
              if ((i3 - i2 | 0) < 3) {
               i25 = -2;
               i24 = 206;
               break L111;
              }
              i15 = i2 + 3 | 0;
              break L113;
             }
            case 27:
             {
              i1 = i2 + 2 | 0;
              if ((i1 | 0) == (i26 | 0)) {
               i25 = -1;
               i24 = 206;
               break L111;
              }
              if (HEAP8[i2 + 3 >> 0] | 0) {
               i15 = i1;
               break L113;
              }
              if ((HEAP8[i1 >> 0] | 0) == 45) {
               i24 = 72;
               break L111;
              } else {
               i15 = i1;
               break L113;
              }
             }
            default:
             {
              i24 = 77;
              break L113;
             }
            }
           case -37:
           case -38:
           case -39:
           case -40:
            {
             i24 = 65;
             break;
            }
           case -1:
            {
             if ((i1 & 255) > 253) {
              i24 = 67;
              break L111;
             } else i24 = 77;
             break;
            }
           default:
            i24 = 77;
           } while (0);
           if ((i24 | 0) == 65) {
            i24 = 0;
            if ((i3 - i2 | 0) < 4) {
             i25 = -2;
             i24 = 206;
             break;
            }
            i15 = i2 + 4 | 0;
           } else if ((i24 | 0) == 77) {
            i24 = 0;
            i15 = i2 + 2 | 0;
           }
           if ((i15 | 0) == (i26 | 0)) {
            i25 = -1;
            i24 = 206;
            break;
           } else i2 = i15;
          }
          if ((i24 | 0) == 67) {
           HEAP32[i27 >> 2] = i2;
           i27 = 0;
           return i27 | 0;
          } else if ((i24 | 0) == 72) {
           i1 = i2 + 4 | 0;
           if ((i1 | 0) == (i26 | 0)) {
            i27 = -1;
            return i27 | 0;
           }
           if (!(HEAP8[i2 + 5 >> 0] | 0)) if ((HEAP8[i1 >> 0] | 0) == 62) {
            HEAP32[i27 >> 2] = i2 + 6;
            i27 = 13;
            return i27 | 0;
           }
           HEAP32[i27 >> 2] = i1;
           i27 = 0;
           return i27 | 0;
          } else if ((i24 | 0) == 206) return i25 | 0;
         }
         HEAP32[i27 >> 2] = i4;
         i27 = 0;
         return i27 | 0;
        }
       case 20:
        {
         HEAP32[i27 >> 2] = i22 + 6;
         i27 = 33;
         return i27 | 0;
        }
       case 24:
       case 22:
        {
         i1 = i22 + 6 | 0;
         if ((i1 | 0) == (i26 | 0)) {
          i27 = -1;
          return i27 | 0;
         } else i3 = i1;
         L154 : while (1) {
          if (HEAP8[i2 + 3 >> 0] | 0) {
           i24 = 88;
           break;
          }
          switch (HEAP8[i23 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0) {
          case 30:
           {
            i24 = 83;
            break L154;
           }
          case 10:
          case 9:
          case 21:
           break L154;
          case 24:
          case 22:
           break;
          default:
           {
            i24 = 88;
            break L154;
           }
          }
          i1 = i3 + 2 | 0;
          if ((i1 | 0) == (i26 | 0)) {
           i25 = -1;
           i24 = 206;
           break;
          } else {
           i2 = i3;
           i3 = i1;
          }
         }
         L158 : do if ((i24 | 0) == 83) {
          i1 = i2 + 4 | 0;
          if ((i1 | 0) == (i26 | 0)) {
           i27 = -1;
           return i27 | 0;
          }
          if (!(HEAP8[i2 + 5 >> 0] | 0)) {
           switch (HEAP8[i23 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
           case 30:
           case 10:
           case 9:
           case 21:
            break;
           default:
            break L158;
           }
           HEAP32[i27 >> 2] = i3;
           i27 = 0;
           return i27 | 0;
          }
         } else if ((i24 | 0) == 88) {
          HEAP32[i27 >> 2] = i3;
          i27 = 0;
          return i27 | 0;
         } else if ((i24 | 0) == 206) return i25 | 0; while (0);
         HEAP32[i27 >> 2] = i3;
         i27 = 16;
         return i27 | 0;
        }
       default:
        break L98;
       } while (0);
       HEAP32[i27 >> 2] = i2;
       i27 = 0;
       return i27 | 0;
      }
     case -1:
      {
       if ((i2 & 255) > 253) i24 = 91; else i24 = 90;
       break;
      }
     case -36:
     case -35:
     case -34:
     case -33:
      {
       i24 = 91;
       break;
      }
     default:
      i24 = 90;
     } while (0);
     if ((i24 | 0) == 90) {
      HEAP32[i27 >> 2] = i22;
      i27 = 29;
      return i27 | 0;
     } else if ((i24 | 0) == 91) {
      HEAP32[i27 >> 2] = i1;
      i27 = 0;
      return i27 | 0;
     }
     break;
    }
   case 9:
    {
     if ((i22 + 2 | 0) == (i26 | 0)) {
      HEAP32[i27 >> 2] = i26;
      i27 = -15;
      return i27 | 0;
     }
     break;
    }
   case 10:
   case 21:
    break;
   case 30:
    {
     i27 = _little2_scanPercent(i14, i22 + 2 | 0, i26, i27) | 0;
     return i27 | 0;
    }
   case 35:
    {
     HEAP32[i27 >> 2] = i22 + 2;
     i27 = 38;
     return i27 | 0;
    }
   case 20:
    {
     HEAP32[i27 >> 2] = i22 + 2;
     i27 = 25;
     return i27 | 0;
    }
   case 4:
    {
     i1 = i22 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) {
      i27 = -26;
      return i27 | 0;
     }
     if (!(HEAP8[i22 + 3 >> 0] | 0)) if ((HEAP8[i1 >> 0] | 0) == 93) {
      i2 = i22 + 4 | 0;
      if ((i2 | 0) == (i26 | 0)) {
       i27 = -1;
       return i27 | 0;
      }
      if (!(HEAP8[i22 + 5 >> 0] | 0)) if ((HEAP8[i2 >> 0] | 0) == 62) {
       HEAP32[i27 >> 2] = i22 + 6;
       i27 = 34;
       return i27 | 0;
      }
     }
     HEAP32[i27 >> 2] = i1;
     i27 = 26;
     return i27 | 0;
    }
   case 31:
    {
     HEAP32[i27 >> 2] = i22 + 2;
     i27 = 23;
     return i27 | 0;
    }
   case 32:
    {
     i1 = i22 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) {
      i27 = -24;
      return i27 | 0;
     }
     L209 : do if (!(HEAP8[i22 + 3 >> 0] | 0)) switch (HEAP8[i23 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
     case 33:
      {
       HEAP32[i27 >> 2] = i22 + 4;
       i27 = 36;
       return i27 | 0;
      }
     case 15:
      {
       HEAP32[i27 >> 2] = i22 + 4;
       i27 = 35;
       return i27 | 0;
      }
     case 34:
      {
       HEAP32[i27 >> 2] = i22 + 4;
       i27 = 37;
       return i27 | 0;
      }
     case 32:
     case 36:
     case 35:
     case 11:
     case 21:
     case 10:
     case 9:
      {
       HEAP32[i27 >> 2] = i1;
       i27 = 24;
       return i27 | 0;
      }
     default:
      break L209;
     } while (0);
     HEAP32[i27 >> 2] = i1;
     i27 = 0;
     return i27 | 0;
    }
   case 36:
    {
     HEAP32[i27 >> 2] = i22 + 2;
     i27 = 21;
     return i27 | 0;
    }
   case 11:
    {
     HEAP32[i27 >> 2] = i22 + 2;
     i27 = 17;
     return i27 | 0;
    }
   case 19:
    {
     i5 = i22 + 2 | 0;
     if ((i5 | 0) == (i26 | 0)) {
      i27 = -1;
      return i27 | 0;
     }
     i3 = HEAP8[i22 + 3 >> 0] | 0;
     L230 : do switch (i3 << 24 >> 24) {
     case 0:
      {
       i2 = HEAP8[i5 >> 0] | 0;
       switch (HEAP8[i23 + (i2 & 255) >> 0] | 0) {
       case 29:
        {
         i7 = i2;
         i24 = 128;
         break L230;
        }
       case 24:
       case 22:
        break L230;
       case 7:
        {
         i24 = 134;
         break L230;
        }
       case 5:
        {
         if ((i26 - i5 | 0) < 2) {
          i27 = -2;
          return i27 | 0;
         }
         HEAP32[i27 >> 2] = i5;
         i27 = 0;
         return i27 | 0;
        }
       case 6:
        {
         if ((i26 - i5 | 0) < 3) {
          i27 = -2;
          return i27 | 0;
         }
         HEAP32[i27 >> 2] = i5;
         i27 = 0;
         return i27 | 0;
        }
       default:
        {
         i24 = 136;
         break L230;
        }
       }
      }
     case -37:
     case -38:
     case -39:
     case -40:
      {
       i24 = 134;
       break;
      }
     case -33:
     case -34:
     case -35:
     case -36:
      {
       i24 = 136;
       break;
      }
     case -1:
      {
       i2 = HEAP8[i5 >> 0] | 0;
       if ((i2 & 255) > 253) i24 = 136; else {
        i7 = i2;
        i24 = 128;
       }
       break;
      }
     default:
      {
       i7 = HEAP8[i5 >> 0] | 0;
       i24 = 128;
      }
     } while (0);
     if ((i24 | 0) == 128) {
      i21 = i7 & 255;
      if (!(1 << (i21 & 31) & HEAP32[25356 + ((HEAPU8[344737 + (i3 & 255) >> 0] << 3 | i21 >>> 5) << 2) >> 2])) {
       HEAP32[i27 >> 2] = i5;
       i27 = 0;
       return i27 | 0;
      }
     } else if ((i24 | 0) == 134) {
      if ((i26 - i5 | 0) < 4) {
       i27 = -2;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i5;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 136) {
      HEAP32[i27 >> 2] = i5;
      i27 = 0;
      return i27 | 0;
     }
     i2 = i22 + 4 | 0;
     if ((i2 | 0) == (i26 | 0)) {
      i27 = -20;
      return i27 | 0;
     } else {
      i4 = i2;
      i2 = i5;
     }
     L259 : while (1) {
      i3 = HEAP8[i2 + 3 >> 0] | 0;
      switch (i3 << 24 >> 24) {
      case -37:
      case -38:
      case -39:
      case -40:
       {
        i24 = 148;
        break L259;
       }
      case -33:
      case -34:
      case -35:
      case -36:
       {
        i24 = 151;
        break L259;
       }
      case 0:
       {
        i2 = HEAP8[i4 >> 0] | 0;
        switch (HEAP8[i23 + (i2 & 255) >> 0] | 0) {
        case 7:
         {
          i24 = 148;
          break L259;
         }
        case 5:
         {
          i24 = 144;
          break L259;
         }
        case 6:
         {
          i24 = 146;
          break L259;
         }
        case 36:
        case 30:
        case 11:
        case 32:
        case 21:
        case 10:
        case 9:
         {
          i24 = 150;
          break L259;
         }
        case 29:
         {
          i1 = i2;
          i24 = 141;
          break;
         }
        case 27:
        case 26:
        case 25:
        case 24:
        case 22:
         break;
        default:
         {
          i24 = 151;
          break L259;
         }
        }
        break;
       }
      case -1:
       {
        i1 = HEAP8[i4 >> 0] | 0;
        if ((i1 & 255) > 253) {
         i24 = 151;
         break L259;
        } else i24 = 141;
        break;
       }
      default:
       {
        i1 = HEAP8[i4 >> 0] | 0;
        i24 = 141;
       }
      }
      if ((i24 | 0) == 141) {
       i24 = 0;
       i21 = i1 & 255;
       if (!(1 << (i21 & 31) & HEAP32[25356 + ((HEAPU8[344993 + (i3 & 255) >> 0] << 3 | i21 >>> 5) << 2) >> 2])) {
        i24 = 143;
        break;
       }
      }
      i2 = i4 + 2 | 0;
      if ((i2 | 0) == (i26 | 0)) {
       i25 = -20;
       i24 = 206;
       break;
      } else {
       i21 = i4;
       i4 = i2;
       i2 = i21;
      }
     }
     if ((i24 | 0) == 143) {
      HEAP32[i27 >> 2] = i4;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 144) {
      if ((i26 - i4 | 0) < 2) {
       i27 = -2;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i4;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 146) {
      if ((i26 - i4 | 0) < 3) {
       i27 = -2;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i4;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 148) {
      if ((i26 - i4 | 0) < 4) {
       i27 = -2;
       return i27 | 0;
      }
      HEAP32[i27 >> 2] = i4;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 150) {
      HEAP32[i27 >> 2] = i4;
      i27 = 20;
      return i27 | 0;
     } else if ((i24 | 0) == 151) {
      HEAP32[i27 >> 2] = i4;
      i27 = 0;
      return i27 | 0;
     } else if ((i24 | 0) == 206) return i25 | 0;
     break;
    }
   case 5:
    {
     if ((i26 - i4 | 0) < 2) {
      i27 = -2;
      return i27 | 0;
     }
     HEAP32[i27 >> 2] = i22;
     i27 = 0;
     return i27 | 0;
    }
   case 6:
    {
     if ((i26 - i4 | 0) < 3) {
      i27 = -2;
      return i27 | 0;
     }
     HEAP32[i27 >> 2] = i22;
     i27 = 0;
     return i27 | 0;
    }
   case 24:
   case 22:
    {
     i5 = 18;
     break L7;
    }
   default:
    {
     i24 = 163;
     break L7;
    }
   } while (0);
   i2 = i22 + 2 | 0;
   L303 : do if ((i2 | 0) != (i26 | 0)) {
    i1 = i22;
    L304 : while (1) {
     if (HEAP8[i1 + 3 >> 0] | 0) break;
     switch (HEAP8[i23 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
     case 10:
     case 21:
      break;
     case 9:
      {
       if ((i1 + 4 | 0) == (i26 | 0)) break L304;
       break;
      }
     default:
      break L304;
     }
     i1 = i2 + 2 | 0;
     if ((i1 | 0) == (i26 | 0)) break L303; else {
      i25 = i2;
      i2 = i1;
      i1 = i25;
     }
    }
    HEAP32[i27 >> 2] = i2;
    i27 = 15;
    return i27 | 0;
   } while (0);
   HEAP32[i27 >> 2] = i26;
   i27 = 15;
   return i27 | 0;
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i24 = 156;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i24 = 163;
   break;
  }
 case -1:
  {
   i1 = HEAP8[i22 >> 0] | 0;
   if ((i1 & 255) > 253) i24 = 163; else {
    i6 = i1;
    i24 = 161;
   }
   break;
  }
 default:
  {
   i6 = HEAP8[i22 >> 0] | 0;
   i24 = 161;
  }
 } while (0);
 if ((i24 | 0) == 156) {
  if ((i26 - i4 | 0) < 4) {
   i27 = -2;
   return i27 | 0;
  }
  HEAP32[i27 >> 2] = i22;
  i27 = 0;
  return i27 | 0;
 } else if ((i24 | 0) == 161) {
  i3 = i3 & 255;
  i2 = i6 & 255;
  i1 = i2 >>> 5;
  i2 = 1 << (i2 & 31);
  if (!(i2 & HEAP32[25356 + ((i1 | HEAPU8[344737 + i3 >> 0] << 3) << 2) >> 2])) if (!(HEAP32[25356 + ((HEAPU8[344993 + i3 >> 0] << 3 | i1) << 2) >> 2] & i2)) i24 = 163; else i5 = 19; else i5 = 18;
 }
 if ((i24 | 0) == 163) {
  HEAP32[i27 >> 2] = i22;
  i27 = 0;
  return i27 | 0;
 }
 i1 = i22 + 2 | 0;
 L327 : do if ((i1 | 0) == (i26 | 0)) i19 = i5; else {
  i6 = i14 + 76 | 0;
  i3 = i1;
  L329 : while (1) {
   i4 = HEAP8[i3 + 1 >> 0] | 0;
   L331 : do switch (i4 << 24 >> 24) {
   case -37:
   case -38:
   case -39:
   case -40:
    {
     i24 = 175;
     break L329;
    }
   case -33:
   case -34:
   case -35:
   case -36:
    {
     i24 = 204;
     break L329;
    }
   case 0:
    {
     i1 = HEAP8[i3 >> 0] | 0;
     switch (HEAP8[i6 + (i1 & 255) >> 0] | 0) {
     case 7:
      {
       i24 = 175;
       break L329;
      }
     case 5:
      {
       i24 = 171;
       break L329;
      }
     case 6:
      {
       i24 = 173;
       break L329;
      }
     case 10:
     case 9:
     case 21:
     case 30:
     case 20:
     case 36:
     case 35:
     case 32:
     case 11:
      {
       i24 = 177;
       break L329;
      }
     case 34:
      {
       i24 = 195;
       break L329;
      }
     case 33:
      {
       i24 = 198;
       break L329;
      }
     case 15:
      {
       i24 = 201;
       break L329;
      }
     case 29:
      {
       i18 = i1;
       i24 = 168;
       break L331;
      }
     case 27:
     case 26:
     case 25:
     case 24:
     case 22:
      {
       i24 = 170;
       break L331;
      }
     case 23:
      break;
     default:
      {
       i24 = 204;
       break L329;
      }
     }
     i20 = i3 + 2 | 0;
     switch (i5 & 63) {
     case 18:
      break;
     case 41:
      {
       i16 = 19;
       i17 = i20;
       break L331;
      }
     default:
      {
       i16 = i5;
       i17 = i20;
       break L331;
      }
     }
     if ((i20 | 0) == (i26 | 0)) {
      i25 = -1;
      i24 = 206;
      break L329;
     }
     i2 = HEAP8[i3 + 3 >> 0] | 0;
     switch (i2 << 24 >> 24) {
     case -37:
     case -38:
     case -39:
     case -40:
      {
       i24 = 191;
       break L329;
      }
     case -33:
     case -34:
     case -35:
     case -36:
      {
       i16 = 19;
       i17 = i20;
       break L331;
      }
     case 0:
      {
       i1 = HEAP8[i20 >> 0] | 0;
       switch (HEAP8[i6 + (i1 & 255) >> 0] | 0) {
       case 7:
        {
         i24 = 191;
         break L329;
        }
       case 5:
        {
         i24 = 187;
         break L329;
        }
       case 6:
        {
         i24 = 189;
         break L329;
        }
       case 29:
        {
         i21 = i1;
         i24 = 184;
         break;
        }
       case 27:
       case 26:
       case 25:
       case 24:
       case 22:
        break;
       default:
        {
         i16 = 19;
         i17 = i20;
         break L331;
        }
       }
       break;
      }
     case -1:
      {
       i1 = HEAP8[i20 >> 0] | 0;
       if ((i1 & 255) > 253) {
        i16 = 19;
        i17 = i20;
        break L331;
       } else {
        i21 = i1;
        i24 = 184;
       }
       break;
      }
     default:
      {
       i21 = HEAP8[i20 >> 0] | 0;
       i24 = 184;
      }
     }
     if ((i24 | 0) == 184) {
      i24 = 0;
      i23 = i21 & 255;
      if (!(1 << (i23 & 31) & HEAP32[25356 + ((i23 >>> 5 | HEAPU8[344993 + (i2 & 255) >> 0] << 3) << 2) >> 2])) {
       i24 = 185;
       break L329;
      }
     }
     i16 = 41;
     i17 = i3 + 4 | 0;
     break;
    }
   case -1:
    {
     i1 = HEAP8[i3 >> 0] | 0;
     if ((i1 & 255) > 253) {
      i24 = 204;
      break L329;
     } else {
      i18 = i1;
      i24 = 168;
     }
     break;
    }
   default:
    {
     i18 = HEAP8[i3 >> 0] | 0;
     i24 = 168;
    }
   } while (0);
   if ((i24 | 0) == 168) {
    i24 = i18 & 255;
    if (!(1 << (i24 & 31) & HEAP32[25356 + ((i24 >>> 5 | HEAPU8[344993 + (i4 & 255) >> 0] << 3) << 2) >> 2])) {
     i24 = 169;
     break;
    } else i24 = 170;
   }
   if ((i24 | 0) == 170) {
    i24 = 0;
    i16 = i5;
    i17 = i3 + 2 | 0;
   }
   if ((i17 | 0) == (i26 | 0)) {
    i19 = i16;
    break L327;
   } else {
    i5 = i16;
    i3 = i17;
   }
  }
  switch (i24 | 0) {
  case 169:
   {
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   }
  case 171:
   {
    if ((i26 - i3 | 0) < 2) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   }
  case 173:
   {
    if ((i26 - i3 | 0) < 3) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   }
  case 175:
   {
    if ((i26 - i3 | 0) < 4) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   }
  case 177:
   {
    HEAP32[i27 >> 2] = i3;
    i27 = i5;
    return i27 | 0;
   }
  case 185:
   {
    HEAP32[i27 >> 2] = i20;
    i27 = 0;
    return i27 | 0;
   }
  case 187:
   {
    if ((i26 - i20 | 0) < 2) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i20;
    i27 = 0;
    return i27 | 0;
   }
  case 189:
   {
    if ((i26 - i20 | 0) < 3) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i20;
    i27 = 0;
    return i27 | 0;
   }
  case 191:
   {
    if ((i26 - i20 | 0) < 4) {
     i27 = -2;
     return i27 | 0;
    }
    HEAP32[i27 >> 2] = i20;
    i27 = 0;
    return i27 | 0;
   }
  case 195:
   if ((i5 | 0) == 19) {
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   } else {
    HEAP32[i27 >> 2] = i3 + 2;
    i27 = 32;
    return i27 | 0;
   }
  case 198:
   if ((i5 | 0) == 19) {
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   } else {
    HEAP32[i27 >> 2] = i3 + 2;
    i27 = 31;
    return i27 | 0;
   }
  case 201:
   if ((i5 | 0) == 19) {
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   } else {
    HEAP32[i27 >> 2] = i3 + 2;
    i27 = 30;
    return i27 | 0;
   }
  case 204:
   {
    HEAP32[i27 >> 2] = i3;
    i27 = 0;
    return i27 | 0;
   }
  case 206:
   return i25 | 0;
  }
 } while (0);
 i27 = 0 - i19 | 0;
 return i27 | 0;
}

function _ps_hints_apply(i19, i17, i32, i20) {
 i19 = i19 | 0;
 i17 = i17 | 0;
 i32 = i32 | 0;
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i39 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i33 = i39 + 136 | 0;
 i34 = i39 + 128 | 0;
 i38 = i39;
 i4 = i17 + 2 | 0;
 i3 = HEAP16[i4 >> 1] | 0;
 if (!(i3 << 16 >> 16)) {
  i38 = 0;
  STACKTOP = i39;
  return i38 | 0;
 }
 if (!(HEAP16[i17 >> 1] | 0)) {
  i38 = 0;
  STACKTOP = i39;
  return i38 | 0;
 }
 i1 = i38;
 i2 = i1 + 128 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i18 = HEAP32[i32 >> 2] | 0;
 i37 = i38 + 16 | 0;
 HEAP32[i37 >> 2] = i18;
 i2 = _ft_mem_realloc(i18, 40, 0, i3 << 16 >> 16, 0, i33) | 0;
 i36 = i38 + 8 | 0;
 HEAP32[i36 >> 2] = i2;
 i2 = HEAP32[i33 >> 2] | 0;
 if (!i2) {
  i1 = _ft_mem_realloc(i18, 8, 0, HEAP16[i17 >> 1] | 0, 0, i33) | 0;
  i35 = i38 + 12 | 0;
  HEAP32[i35 >> 2] = i1;
  i2 = HEAP32[i33 >> 2] | 0;
  if (!i2) {
   i11 = HEAP16[i4 >> 1] | 0;
   HEAP32[i38 >> 2] = i11 << 16 >> 16;
   i30 = HEAP16[i17 >> 1] | 0;
   i9 = i30 << 16 >> 16;
   i4 = i38 + 4 | 0;
   HEAP32[i4 >> 2] = i9;
   i12 = HEAP32[i36 >> 2] | 0;
   if (i30 << 16 >> 16) {
    i10 = HEAP32[i17 + 12 >> 2] | 0;
    i8 = 0;
    i6 = 0;
    while (1) {
     i2 = i6;
     i6 = (HEAP16[i10 + (i8 << 1) >> 1] | 0) + 1 | 0;
     i3 = i6 - i2 | 0;
     i7 = i12 + (i2 * 40 | 0) | 0;
     HEAP32[i1 >> 2] = i7;
     HEAP32[i1 + 4 >> 2] = i3;
     if (i3 | 0) {
      HEAP32[i7 >> 2] = i12 + (i6 * 40 | 0) + -40;
      HEAP32[i12 + (i2 * 40 | 0) + 8 >> 2] = i1;
      if ((i3 | 0) == 1) i2 = i7; else {
       i5 = i7;
       while (1) {
        i2 = i5 + 40 | 0;
        HEAP32[i5 + 4 >> 2] = i2;
        HEAP32[i2 >> 2] = i5;
        HEAP32[i5 + 48 >> 2] = i1;
        i3 = i3 + -1 | 0;
        if (i3 >>> 0 <= 1) break; else i5 = i2;
       }
      }
      HEAP32[i2 + 4 >> 2] = i7;
     }
     i8 = i8 + 1 | 0;
     if (i8 >>> 0 >= i9 >>> 0) break; else i1 = i1 + 8 | 0;
    }
   }
   i16 = i17 + 4 | 0;
   i15 = HEAP32[i16 >> 2] | 0;
   if (!(i11 << 16 >> 16)) {
    HEAP32[i38 + 20 >> 2] = i17;
    HEAP32[i38 + 24 >> 2] = i32;
   } else {
    i13 = i12;
    i14 = i17 + 8 | 0;
    i11 = i12;
    i12 = 0;
    while (1) {
     i1 = ((HEAP32[i11 >> 2] | 0) - i13 | 0) / 40 | 0;
     i5 = ((HEAP32[i11 + 4 >> 2] | 0) - i13 | 0) / 40 | 0;
     if (!(HEAP8[(HEAP32[i14 >> 2] | 0) + i12 >> 0] & 1)) HEAP32[i11 + 12 >> 2] = 1;
     i3 = HEAP32[i15 + (i12 << 3) >> 2] | 0;
     i10 = i3 - (HEAP32[i15 + (i1 << 3) >> 2] | 0) | 0;
     i6 = HEAP32[i15 + (i12 << 3) + 4 >> 2] | 0;
     i9 = i6 - (HEAP32[i15 + (i1 << 3) + 4 >> 2] | 0) | 0;
     i1 = (i10 | 0) < 0 ? 0 - i10 | 0 : i10;
     i2 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
     if ((i2 * 12 | 0) < (i1 | 0)) i8 = i10 >> 31 & -4 | 2; else i8 = (i1 * 12 | 0) < (i2 | 0) ? (i9 >> 31 & 2) + -1 | 0 : 4;
     HEAP8[i11 + 20 >> 0] = i8;
     i7 = (HEAP32[i15 + (i5 << 3) >> 2] | 0) - i3 | 0;
     i5 = (HEAP32[i15 + (i5 << 3) + 4 >> 2] | 0) - i6 | 0;
     i1 = (i7 | 0) < 0 ? 0 - i7 | 0 : i7;
     i2 = (i5 | 0) < 0 ? 0 - i5 | 0 : i5;
     if ((i2 * 12 | 0) < (i1 | 0)) i2 = i7 >> 31 & -4 | 2; else i2 = (i1 * 12 | 0) < (i2 | 0) ? (i5 >> 31 & 2) + -1 | 0 : 4;
     HEAP8[i11 + 21 >> 0] = i2;
     i3 = i11 + 12 | 0;
     i1 = HEAP32[i3 >> 2] | 0;
     do if (!(i1 & 1)) {
      if ((i8 | 0) == (i2 | 0)) {
       if ((i8 | 0) == 4) {
        if (!(_ft_corner_is_flat(i10, i9, i7, i5) | 0)) break;
        i1 = HEAP32[i3 >> 2] | 0;
       }
       HEAP32[i3 >> 2] = i1 | 2;
      }
     } else HEAP32[i3 >> 2] = i1 | 2; while (0);
     i12 = i12 + 1 | 0;
     i1 = HEAP32[i38 >> 2] | 0;
     if (i12 >>> 0 >= i1 >>> 0) break; else i11 = i11 + 40 | 0;
    }
    i3 = HEAP32[i36 >> 2] | 0;
    i2 = HEAP32[i16 >> 2] | 0;
    HEAP32[i38 + 20 >> 2] = i17;
    HEAP32[i38 + 24 >> 2] = i32;
    if (i1 | 0) while (1) {
     HEAP32[i3 + 16 >> 2] = 0;
     HEAP32[i3 + 24 >> 2] = 0;
     i30 = HEAP32[i2 + 4 >> 2] | 0;
     HEAP32[i3 + 28 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i3 + 32 >> 2] = i30;
     i1 = i1 + -1 | 0;
     if (!i1) break; else {
      i3 = i3 + 40 | 0;
      i2 = i2 + 8 | 0;
     }
    }
   }
   if (HEAP32[i4 >> 2] | 0) {
    i14 = 0;
    do {
     i1 = HEAP32[i35 >> 2] | 0;
     L54 : do if ((HEAP32[i1 + (i14 << 3) + 4 >> 2] | 0) >>> 0 >= 4) {
      i5 = HEAP32[i1 + (i14 << 3) >> 2] | 0;
      i1 = i5 + 28 | 0;
      i3 = i5 + 32 | 0;
      i2 = i5;
      while (1) {
       i2 = HEAP32[i2 + 4 >> 2] | 0;
       if ((i2 | 0) == (i5 | 0)) break L54;
       i8 = (HEAP32[i2 + 28 >> 2] | 0) - (HEAP32[i1 >> 2] | 0) | 0;
       i9 = (HEAP32[i2 + 32 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
       if (i9 | i8 | 0) {
        i1 = i5;
        break;
       }
      }
      while (1) {
       while (1) {
        i3 = HEAP32[i1 >> 2] | 0;
        if ((i3 | 0) == (i5 | 0)) break L54;
        i10 = (HEAP32[i1 + 28 >> 2] | 0) - (HEAP32[i3 + 28 >> 2] | 0) | 0;
        i7 = (HEAP32[i1 + 32 >> 2] | 0) - (HEAP32[i3 + 32 >> 2] | 0) | 0;
        if (!(i7 | i10)) i1 = i3; else break;
       }
       i6 = _ft_corner_orientation(i8, i9, i10, i7) | 0;
       if (!i6) i1 = i3; else {
        i5 = i1;
        break;
       }
      }
      while (1) {
       i3 = 0;
       do {
        i13 = i2;
        i9 = HEAP32[i2 + 28 >> 2] | 0;
        i8 = HEAP32[i2 + 32 >> 2] | 0;
        while (1) {
         i2 = HEAP32[i13 + 4 >> 2] | 0;
         i3 = (i2 | 0) == (i1 | 0) ? 1 : i3;
         i11 = i9;
         i9 = HEAP32[i2 + 28 >> 2] | 0;
         i11 = i9 - i11 | 0;
         i12 = i8;
         i8 = HEAP32[i2 + 32 >> 2] | 0;
         i12 = i8 - i12 | 0;
         if (i12 | i11 | 0) break; else i13 = i2;
        }
        i8 = _ft_corner_orientation(i10, i7, i11, i12) | 0;
       } while ((i8 | 0) == 0);
       if ((i8 ^ i6 | 0) < 0) {
        do {
         i30 = i5 + 12 | 0;
         HEAP32[i30 >> 2] = HEAP32[i30 >> 2] | 4;
         i5 = HEAP32[i5 + 4 >> 2] | 0;
        } while ((i5 | 0) != (i13 | 0));
        i30 = i13 + 12 | 0;
        HEAP32[i30 >> 2] = HEAP32[i30 >> 2] | 4;
       }
       if (!i3) {
        i5 = i13;
        i6 = i8;
        i7 = i12;
        i10 = i11;
       } else break;
      }
     } while (0);
     i14 = i14 + 1 | 0;
    } while (i14 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0);
   }
   i2 = _psh_hint_table_init(i38 + 28 | 0, i19 + 16 | 0, i19 + 28 | 0, i18) | 0;
   HEAP32[i33 >> 2] = i2;
   if (!i2) {
    i2 = _psh_hint_table_init(i38 + 68 | 0, i19 + 52 | 0, i19 + 64 | 0, i18) | 0;
    if (!i2) {
     i28 = i38 + 24 | 0;
     i30 = HEAP32[i28 >> 2] | 0;
     i29 = HEAP32[i30 + 200 >> 2] | 0;
     i30 = HEAP32[i30 + 404 >> 2] | 0;
     i1 = _FT_MulFix(HEAP32[i32 + 416 >> 2] | 0, i30) | 0;
     i2 = i1 + 32 & -64;
     if ((i2 | 0) == 0 | (i1 | 0) == (i2 | 0)) i27 = 1; else {
      i3 = _FT_MulDiv(i30, i2, i1) | 0;
      if ((i2 | 0) < (i1 | 0)) i1 = i29 - ((i29 | 0) / 50 | 0) | 0; else i1 = i29;
      _psh_globals_set_scale(HEAP32[i28 >> 2] | 0, i1, i3, 0, 0);
      i27 = 0;
     }
     HEAP8[i38 + 120 >> 0] = 1;
     HEAP8[i38 + 121 >> 0] = 1;
     HEAP8[i38 + 122 >> 0] = (i20 | 1 | 0) == 3 & 1;
     HEAP8[i38 + 123 >> 0] = ((i20 | 0) == 2 | (i20 | 0) == 4) & 1;
     HEAP8[i38 + 124 >> 0] = (i20 | 0) != 1 & 1;
     i20 = i38 + 20 | 0;
     i21 = i32 + 412 | 0;
     i22 = i32 + 416 | 0;
     i23 = i32 + 928 | 0;
     i24 = i32 + 2488 | 0;
     i25 = i32 + 2492 | 0;
     i26 = i32 + 2484 | 0;
     i19 = 0;
     while (1) {
      i12 = HEAP32[i38 >> 2] | 0;
      i13 = HEAP32[i36 >> 2] | 0;
      i1 = HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] | 0;
      if (i12 | 0) if (!i19) {
       i3 = i13;
       i2 = i12;
       while (1) {
        HEAP32[i3 + 16 >> 2] = 0;
        HEAP32[i3 + 24 >> 2] = 0;
        i18 = HEAP32[i1 + 4 >> 2] | 0;
        HEAP32[i3 + 28 >> 2] = HEAP32[i1 >> 2];
        HEAP32[i3 + 32 >> 2] = i18;
        i2 = i2 + -1 | 0;
        if (!i2) break; else {
         i3 = i3 + 40 | 0;
         i1 = i1 + 8 | 0;
        }
       }
      } else {
       i3 = i13;
       i2 = i12;
       while (1) {
        HEAP32[i3 + 16 >> 2] = 0;
        HEAP32[i3 + 24 >> 2] = 0;
        i18 = HEAP32[i1 >> 2] | 0;
        HEAP32[i3 + 28 >> 2] = HEAP32[i1 + 4 >> 2];
        HEAP32[i3 + 32 >> 2] = i18;
        i2 = i2 + -1 | 0;
        if (!i2) break; else {
         i3 = i3 + 40 | 0;
         i1 = i1 + 8 | 0;
        }
       }
      }
      i10 = HEAP32[i4 >> 2] | 0;
      L98 : do if (!i10) i1 = 0; else {
       i11 = HEAP32[i35 >> 2] | 0;
       i1 = 0;
       while (1) {
        i2 = HEAP32[i11 + (i1 << 3) >> 2] | 0;
        L102 : do if (HEAP32[i11 + (i1 << 3) + 4 >> 2] | 0) {
         i3 = i2 + 28 | 0;
         i5 = i2;
         do {
          i5 = HEAP32[i5 >> 2] | 0;
          if ((i5 | 0) == (i2 | 0)) {
           i31 = 91;
           break L98;
          }
         } while ((HEAP32[i5 + 28 >> 2] | 0) == (HEAP32[i3 >> 2] | 0));
         i9 = HEAP32[i5 + 4 >> 2] | 0;
         i2 = i9;
         while (1) {
          i3 = i2 + 28 | 0;
          i8 = i2;
          do {
           i8 = HEAP32[i8 + 4 >> 2] | 0;
           if ((i8 | 0) == (i9 | 0)) break L102;
           i6 = HEAP32[i8 + 28 >> 2] | 0;
           i7 = HEAP32[i3 >> 2] | 0;
          } while ((i6 | 0) == (i7 | 0));
          if ((HEAP32[i5 + 28 >> 2] | 0) < (i7 | 0)) {
           if ((i6 | 0) < (i7 | 0)) i31 = 77;
          } else if ((i6 | 0) > (i7 | 0)) i31 = 77;
          if ((i31 | 0) == 77) while (1) {
           i31 = 0;
           i18 = i2 + 16 | 0;
           HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 64;
           i2 = HEAP32[i2 + 4 >> 2] | 0;
           if ((i2 | 0) == (i8 | 0)) break; else i31 = 77;
          }
          i2 = i8;
          i5 = HEAP32[i8 >> 2] | 0;
         }
        } while (0);
        i1 = i1 + 1 | 0;
        if (i1 >>> 0 >= i10 >>> 0) {
         i1 = 0;
         break;
        }
       }
      } while (0);
      L122 : while (1) {
       if ((i31 | 0) == 91) {
        i31 = 0;
        i1 = i1 + 1 | 0;
       }
       if (i1 >>> 0 >= i12 >>> 0) break;
       i5 = i13 + (i1 * 40 | 0) | 0;
       i6 = i13 + (i1 * 40 | 0) + 16 | 0;
       i7 = HEAP32[i6 >> 2] | 0;
       if (!(i7 & 64)) {
        i31 = 91;
        continue;
       }
       i3 = i13 + (i1 * 40 | 0) + 32 | 0;
       i2 = i5;
       while (1) {
        i2 = HEAP32[i2 >> 2] | 0;
        if ((i2 | 0) == (i5 | 0)) {
         i31 = 91;
         continue L122;
        }
        i8 = HEAP32[i2 + 32 >> 2] | 0;
        i9 = HEAP32[i3 >> 2] | 0;
        if ((i8 | 0) != (i9 | 0)) {
         i2 = i5;
         break;
        }
       }
       while (1) {
        i2 = HEAP32[i2 + 4 >> 2] | 0;
        if ((i2 | 0) == (i5 | 0)) {
         i31 = 91;
         continue L122;
        }
        i3 = HEAP32[i2 + 32 >> 2] | 0;
        if ((i3 | 0) != (i9 | 0)) break;
       }
       if ((i8 | 0) < (i9 | 0) & (i3 | 0) > (i9 | 0)) {
        HEAP32[i6 >> 2] = i7 | 128;
        i31 = 91;
        continue;
       }
       if (!((i8 | 0) > (i9 | 0) & (i3 | 0) < (i9 | 0))) {
        i31 = 91;
        continue;
       }
       HEAP32[i6 >> 2] = i7 | 256;
       i31 = 91;
      }
      i12 = i38 + 28 + (i19 * 40 | 0) | 0;
      i3 = HEAP32[i28 >> 2] | 0;
      i1 = HEAP32[i12 >> 2] | 0;
      if (i1) {
       i2 = HEAP32[i38 + 28 + (i19 * 40 | 0) + 8 >> 2] | 0;
       while (1) {
        _psh_hint_align(i2, i3, i19, i38);
        i1 = i1 + -1 | 0;
        if (!i1) break; else i2 = i2 + 28 | 0;
       }
       i3 = HEAP32[i28 >> 2] | 0;
      }
      i10 = i38 + 28 + (i19 * 40 | 0) + 32 | 0;
      i5 = HEAP32[i10 >> 2] | 0;
      i7 = HEAP32[i5 + 8 >> 2] | 0;
      i5 = HEAP32[i5 >> 2] | 0;
      i18 = (i19 | 0) == 0;
      i11 = i18 ? 1 : 2;
      i9 = _FT_DivFix(32, HEAP32[i3 + 4 + (i19 * 204 | 0) + 196 >> 2] | 0) | 0;
      i9 = (i9 | 0) < 30 ? i9 : 30;
      L146 : do if (i5 >>> 0 > 1) {
       i6 = HEAP32[i38 >> 2] | 0;
       if (!i6) {
        i3 = 1;
        i7 = 0;
       } else {
        i8 = HEAP32[i7 + 12 >> 2] | 0;
        i2 = i38 + 28 + (i19 * 40 | 0) + 4 | 0;
        i1 = i38 + 28 + (i19 * 40 | 0) + 12 | 0;
        i3 = i5;
        i8 = i8 >>> 0 > i6 >>> 0 ? i6 : i8;
        i5 = i6;
        while (1) {
         i6 = i7 + 16 | 0;
         i31 = HEAP32[i7 + 28 >> 2] | 0;
         i5 = i31 >>> 0 < i5 >>> 0 ? i31 : i5;
         if (i5 >>> 0 > i8 >>> 0) {
          i31 = (HEAP32[i36 >> 2] | 0) + (i8 * 40 | 0) | 0;
          _psh_hint_table_activate_mask(i12, HEAP32[i6 >> 2] | 0, HEAP32[i7 + 24 >> 2] | 0);
          _psh_hint_table_find_strong_points(HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] | 0, i31, i5 - i8 | 0, i9, i11);
         }
         i3 = i3 + -1 | 0;
         if (i3 >>> 0 <= 1) {
          i31 = 105;
          break L146;
         }
         i8 = i5;
         i7 = i6;
         i5 = HEAP32[i38 >> 2] | 0;
        }
       }
      } else if ((i5 | 0) == 1) {
       i2 = i38 + 28 + (i19 * 40 | 0) + 4 | 0;
       i1 = i38 + 28 + (i19 * 40 | 0) + 12 | 0;
       i31 = 105;
      } else i31 = 106; while (0);
      if ((i31 | 0) == 105) {
       i17 = HEAP32[i38 >> 2] | 0;
       i16 = HEAP32[i36 >> 2] | 0;
       i15 = HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0;
       _psh_hint_table_activate_mask(i12, HEAP32[i15 >> 2] | 0, HEAP32[i15 + 8 >> 2] | 0);
       _psh_hint_table_find_strong_points(HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] | 0, i16, i17, i9, i11);
       i31 = 106;
      }
      if ((i31 | 0) == 106) {
       i31 = 0;
       i7 = HEAP32[i38 >> 2] | 0;
       i3 = (i7 | 0) == 0;
       if (i3) {
        i3 = 1;
        i7 = 0;
       } else {
        i1 = i7;
        i2 = HEAP32[i36 >> 2] | 0;
        while (1) {
         do if (HEAP32[i2 + 24 >> 2] | 0) {
          i5 = i2 + 16 | 0;
          i6 = HEAP32[i5 >> 2] | 0;
          if (i6 & 16 | 0) break;
          HEAP32[i5 >> 2] = i6 | 16;
         } while (0);
         i1 = i1 + -1 | 0;
         if (!i1) break; else i2 = i2 + 40 | 0;
        }
       }
      }
      L169 : do if ((i19 | 0) == 1) if (i3) i1 = 0; else {
       i1 = HEAP32[i36 >> 2] | 0;
       i12 = i7;
       i13 = i1;
       while (1) {
        switch (HEAP8[i13 + 20 >> 0] | 0) {
        case -2:
        case 2:
         {
          i31 = 118;
          break;
         }
        default:
         switch (HEAP8[i13 + 21 >> 0] | 0) {
         case -2:
         case 2:
          {
           i31 = 118;
           break;
          }
         default:
          {}
         }
        }
        L176 : do if ((i31 | 0) == 118) {
         i31 = 0;
         i14 = i13 + 16 | 0;
         i5 = HEAP32[i14 >> 2] | 0;
         if (i5 & 16 | 0) break;
         i15 = HEAP32[i13 + 28 >> 2] | 0;
         i2 = HEAP32[i21 >> 2] | 0;
         L179 : do if (i2) {
          i9 = HEAP32[i24 >> 2] | 0;
          i10 = 0 - i9 | 0;
          i11 = i13 + 36 | 0;
          i8 = i22;
          while (1) {
           i6 = i15 - (HEAP32[i8 + 12 >> 2] | 0) | 0;
           if ((i6 | 0) < (i10 | 0)) break L179;
           do if ((i15 | 0) <= ((HEAP32[i8 + 8 >> 2] | 0) + i9 | 0)) {
            if (!(HEAP8[i25 >> 0] | 0)) if ((i6 | 0) > (HEAP32[i26 >> 2] | 0)) break;
            HEAP32[i11 >> 2] = HEAP32[i8 + 24 >> 2];
            i5 = i5 | 48;
            HEAP32[i14 >> 2] = i5;
           } while (0);
           i2 = i2 + -1 | 0;
           if (!i2) break; else i8 = i8 + 32 | 0;
          }
         } while (0);
         i2 = HEAP32[i23 >> 2] | 0;
         if (!i2) break;
         i9 = HEAP32[i24 >> 2] | 0;
         i10 = 0 - i9 | 0;
         i11 = i13 + 36 | 0;
         i8 = i2;
         i6 = i32 + 932 + (i2 << 5) | 0;
         do {
          i2 = (HEAP32[i6 + -24 >> 2] | 0) - i15 | 0;
          if ((i2 | 0) < (i10 | 0)) break L176;
          do if ((i15 | 0) >= ((HEAP32[i6 + -20 >> 2] | 0) - i9 | 0)) {
           if (!(HEAP8[i25 >> 0] | 0)) if ((i2 | 0) >= (HEAP32[i26 >> 2] | 0)) break;
           HEAP32[i11 >> 2] = HEAP32[i6 + -4 >> 2];
           i5 = i5 | 48;
           HEAP32[i14 >> 2] = i5;
          } while (0);
          i6 = i6 + -32 | 0;
          i8 = i8 + -1 | 0;
         } while ((i8 | 0) != 0);
        } while (0);
        i12 = i12 + -1 | 0;
        if (!i12) {
         i31 = 136;
         break L169;
        } else i13 = i13 + 40 | 0;
       }
      } else {
       i1 = HEAP32[i36 >> 2] | 0;
       i31 = 136;
      } while (0);
      if ((i31 | 0) == 136) {
       i31 = 0;
       i10 = HEAP32[(HEAP32[i28 >> 2] | 0) + 4 + (i19 * 204 | 0) + 196 >> 2] | 0;
       if (i3) i1 = 0; else {
        while (1) {
         i5 = HEAP32[i1 + 24 >> 2] | 0;
         if (i5 | 0) {
          i9 = i1 + 16 | 0;
          i3 = HEAP32[i9 >> 2] | 0;
          i2 = HEAP32[i5 + 8 >> 2] | 0;
          do if (!(i3 & 512)) {
           if (i3 & 1024 | 0) {
            i2 = (HEAP32[i5 + 12 >> 2] | 0) + i2 | 0;
            break;
           }
           i6 = (HEAP32[i1 + 28 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0;
           if ((i6 | 0) < 1) {
            i2 = (_FT_MulFix(i6, i10) | 0) + i2 | 0;
            break;
           }
           i8 = HEAP32[i5 + 4 >> 2] | 0;
           i3 = HEAP32[i5 + 12 >> 2] | 0;
           if ((i6 | 0) < (i8 | 0)) {
            i2 = (_FT_MulDiv(i6, i3, i8) | 0) + i2 | 0;
            break;
           } else {
            i2 = i3 + i2 + (_FT_MulFix(i6 - i8 | 0, i10) | 0) | 0;
            break;
           }
          } while (0);
          HEAP32[i1 + 36 >> 2] = i2;
          HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 32;
         }
         i7 = i7 + -1 | 0;
         if (!i7) break; else i1 = i1 + 40 | 0;
        }
        i1 = HEAP32[i38 >> 2] | 0;
       }
      }
      i12 = HEAP32[(HEAP32[i28 >> 2] | 0) + 4 + (i19 * 204 | 0) + 196 >> 2] | 0;
      i13 = HEAP32[i37 >> 2] | 0;
      i9 = HEAP32[i36 >> 2] | 0;
      i14 = i9 + (i1 * 40 | 0) | 0;
      do if ((i1 | 0) > 0) {
       i1 = i9;
       i2 = 0;
       do {
        i2 = ((HEAP32[i1 + 16 >> 2] | 0) >>> 4 & 1) + i2 | 0;
        i1 = i1 + 40 | 0;
       } while (i1 >>> 0 < i14 >>> 0);
       if (i2 | 0) {
        if (i2 >>> 0 < 17) i1 = i33; else {
         i1 = _ft_mem_realloc(i13, 4, 0, i2, 0, i34) | 0;
         if (HEAP32[i34 >> 2] | 0) break;
        }
        i8 = i9;
        i7 = 0;
        do {
         if (HEAP32[i8 + 16 >> 2] & 16) {
          i2 = i1 + (i7 << 2) | 0;
          L236 : do if ((i7 | 0) > 0) {
           i6 = HEAP32[i8 + 28 >> 2] | 0;
           while (1) {
            i3 = i2 + -4 | 0;
            i5 = HEAP32[i3 >> 2] | 0;
            if ((HEAP32[i5 + 28 >> 2] | 0) <= (i6 | 0)) break L236;
            HEAP32[i2 >> 2] = i5;
            if (i3 >>> 0 > i1 >>> 0) i2 = i3; else {
             i2 = i3;
             break;
            }
           }
          } while (0);
          HEAP32[i2 >> 2] = i8;
          i7 = i7 + 1 | 0;
         }
         i8 = i8 + 40 | 0;
        } while (i8 >>> 0 < i14 >>> 0);
        i11 = i1 + (i7 + -1 << 2) | 0;
        if (!i7) {
         i2 = i9;
         do {
          i3 = i2 + 16 | 0;
          i5 = HEAP32[i3 >> 2] | 0;
          do if (!(i5 & 16)) {
           i6 = i2 + 12 | 0;
           i7 = HEAP32[i6 >> 2] | 0;
           if (i7 & 2 | 0) {
            i8 = HEAP8[i2 + 20 >> 0] | 0;
            if (i8 << 24 >> 24 == 4) break;
            if (i8 << 24 >> 24 != (HEAP8[i2 + 21 >> 0] | 0)) break;
            if (!(i7 & 4 | i5 & 64)) break;
            HEAP32[i6 >> 2] = i7 & -3;
           }
           i16 = HEAP32[i1 >> 2] | 0;
           i17 = HEAP32[i16 + 36 >> 2] | 0;
           i17 = (_FT_MulFix((HEAP32[i2 + 28 >> 2] | 0) - (HEAP32[i16 + 28 >> 2] | 0) | 0, i12) | 0) + i17 | 0;
           HEAP32[i2 + 36 >> 2] = i17;
           HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 32;
          } while (0);
          i2 = i2 + 40 | 0;
         } while (i2 >>> 0 < i14 >>> 0);
        } else do {
         i10 = i9 + 16 | 0;
         i2 = HEAP32[i10 >> 2] | 0;
         do if (!(i2 & 16)) {
          i3 = i9 + 12 | 0;
          i5 = HEAP32[i3 >> 2] | 0;
          if (i5 & 2 | 0) {
           i6 = HEAP8[i9 + 20 >> 0] | 0;
           if (i6 << 24 >> 24 == 4) break;
           if (i6 << 24 >> 24 != (HEAP8[i9 + 21 >> 0] | 0)) break;
           if (!(i5 & 4 | i2 & 64)) break;
           HEAP32[i3 >> 2] = i5 & -3;
          }
          i8 = HEAP32[i9 + 28 >> 2] | 0;
          i2 = 0;
          while (1) {
           if ((HEAP32[(HEAP32[i1 + (i2 << 2) >> 2] | 0) + 28 >> 2] | 0) > (i8 | 0)) {
            i31 = 180;
            break;
           }
           i2 = i2 + 1 | 0;
           if (i2 >>> 0 >= i7 >>> 0) {
            i31 = 182;
            break;
           }
          }
          do if ((i31 | 0) == 180) {
           i31 = 0;
           if (i2 | 0) {
            i31 = 182;
            break;
           }
           i17 = HEAP32[i1 >> 2] | 0;
           i2 = HEAP32[i17 + 36 >> 2] | 0;
           i2 = (_FT_MulFix(i8 - (HEAP32[i17 + 28 >> 2] | 0) | 0, i12) | 0) + i2 | 0;
          } while (0);
          do if ((i31 | 0) == 182) {
           i31 = 0;
           i6 = HEAP32[i1 + (i2 + -1 << 2) >> 2] | 0;
           i2 = i7;
           while (1) {
            if (!i2) {
             i2 = 0;
             break;
            }
            i3 = i2 + -1 | 0;
            if ((HEAP32[(HEAP32[i1 + (i3 << 2) >> 2] | 0) + 28 >> 2] | 0) < (i8 | 0)) break; else i2 = i3;
           }
           if ((i2 | 0) == (i7 | 0)) {
            i17 = HEAP32[i11 >> 2] | 0;
            i2 = HEAP32[i17 + 36 >> 2] | 0;
            i2 = (_FT_MulFix(i8 - (HEAP32[i17 + 28 >> 2] | 0) | 0, i12) | 0) + i2 | 0;
            break;
           }
           i2 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
           i3 = HEAP32[i6 + 28 >> 2] | 0;
           if ((i8 | 0) == (i3 | 0)) {
            i2 = HEAP32[i6 + 36 >> 2] | 0;
            break;
           }
           i5 = HEAP32[i2 + 28 >> 2] | 0;
           i2 = HEAP32[i2 + 36 >> 2] | 0;
           if ((i8 | 0) == (i5 | 0)) break;
           i17 = HEAP32[i6 + 36 >> 2] | 0;
           i2 = (_FT_MulDiv(i8 - i3 | 0, i2 - i17 | 0, i5 - i3 | 0) | 0) + i17 | 0;
          } while (0);
          HEAP32[i9 + 36 >> 2] = i2;
          HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 32;
         } while (0);
         i9 = i9 + 40 | 0;
        } while (i9 >>> 0 < i14 >>> 0);
        if ((i1 | 0) == (i33 | 0)) break;
        _ft_mem_free(i13, i1);
       }
      } while (0);
      i2 = HEAP32[i4 >> 2] | 0;
      i1 = HEAP32[i28 >> 2] | 0;
      i17 = HEAP32[i1 + 4 + (i19 * 204 | 0) + 196 >> 2] | 0;
      if (i2 | 0) {
       i1 = HEAP32[i1 + 4 + (i19 * 204 | 0) + 200 >> 2] | 0;
       i16 = HEAP32[i35 >> 2] | 0;
       while (1) {
        i3 = HEAP32[i16 >> 2] | 0;
        i15 = HEAP32[i16 + 4 >> 2] | 0;
        i7 = i3 + (i15 * 40 | 0) | 0;
        L294 : do if ((i15 | 0) > 0) {
         i5 = 0;
         i6 = i3;
         i15 = 0;
         do {
          i14 = (HEAP32[i6 + 16 >> 2] & 32 | 0) == 0;
          i15 = i14 ? i15 : (i15 | 0) == 0 ? i6 : i15;
          i5 = ((i14 ^ 1) & 1) + i5 | 0;
          i6 = i6 + 40 | 0;
         } while (i6 >>> 0 < i7 >>> 0);
         if (i5 >>> 0 < 2) {
          if ((i5 | 0) == 1) {
           i1 = HEAP32[i15 + 36 >> 2] | 0;
           i1 = i1 - (_FT_MulFix(HEAP32[i15 + 28 >> 2] | 0, i17) | 0) | 0;
          }
          while (1) {
           if ((i3 | 0) != (i15 | 0)) {
            i14 = (_FT_MulFix(HEAP32[i3 + 28 >> 2] | 0, i17) | 0) + i1 | 0;
            HEAP32[i3 + 36 >> 2] = i14;
           }
           i3 = i3 + 40 | 0;
           if (i3 >>> 0 >= i7 >>> 0) break L294;
          }
         } else i3 = i15;
         do {
          i5 = i3;
          while (1) {
           i10 = i5 + 4 | 0;
           i11 = HEAP32[i10 >> 2] | 0;
           if ((i11 | 0) == (i15 | 0)) break L294;
           if (!(HEAP32[i11 + 16 >> 2] & 32)) {
            i3 = i11;
            break;
           } else i5 = i11;
          }
          do i3 = HEAP32[i3 + 4 >> 2] | 0; while (!(HEAP32[i3 + 16 >> 2] & 32 | 0));
          i7 = HEAP32[i5 + 28 >> 2] | 0;
          i8 = HEAP32[i3 + 28 >> 2] | 0;
          i5 = HEAP32[i5 + 36 >> 2] | 0;
          i6 = HEAP32[i3 + 36 >> 2] | 0;
          if ((i7 | 0) > (i8 | 0)) {
           i9 = i5 - i6 | 0;
           i5 = i6;
           i14 = i7 - i8 | 0;
           i13 = i8;
          } else {
           i9 = i6 - i5 | 0;
           i14 = i8 - i7 | 0;
           i13 = i7;
          }
          if ((i14 | 0) > 0) {
           i12 = _FT_DivFix(i9, i14) | 0;
           i6 = HEAP32[i10 >> 2] | 0;
          } else {
           i12 = 65536;
           i6 = i11;
          }
          i9 = i9 + i5 | 0;
          do {
           i7 = (HEAP32[i6 + 28 >> 2] | 0) - i13 | 0;
           do if ((i7 | 0) < 1) {
            i8 = i5;
            i7 = _FT_MulFix(i7, i17) | 0;
           } else if ((i7 | 0) < (i14 | 0)) {
            i8 = i5;
            i7 = _FT_MulFix(i7, i12) | 0;
            break;
           } else {
            i8 = i9;
            i7 = _FT_MulFix(i7 - i14 | 0, i17) | 0;
            break;
           } while (0);
           HEAP32[i6 + 36 >> 2] = i8 + i7;
           i6 = HEAP32[i6 + 4 >> 2] | 0;
          } while ((i6 | 0) != (i3 | 0));
         } while ((i3 | 0) != (i15 | 0));
        } while (0);
        i2 = i2 + -1 | 0;
        if (!i2) break; else i16 = i16 + 8 | 0;
       }
      }
      i1 = HEAP32[i36 >> 2] | 0;
      i6 = HEAP32[i20 >> 2] | 0;
      i5 = HEAP32[i6 + 4 >> 2] | 0;
      i6 = HEAP32[i6 + 8 >> 2] | 0;
      i2 = HEAP32[i38 >> 2] | 0;
      if (i2 | 0) {
       i7 = i18 ? 32 : 64;
       if (i18) {
        i3 = 0;
        while (1) {
         HEAP32[i5 + (i3 << 3) >> 2] = HEAP32[i1 + 36 >> 2];
         if (HEAP32[i1 + 16 >> 2] & 16) {
          i2 = i6 + i3 | 0;
          HEAP8[i2 >> 0] = HEAPU8[i2 >> 0] | i7;
          i2 = HEAP32[i38 >> 2] | 0;
         }
         i3 = i3 + 1 | 0;
         if (i3 >>> 0 >= i2 >>> 0) break; else i1 = i1 + 40 | 0;
        }
       } else {
        i3 = 0;
        while (1) {
         HEAP32[i5 + (i3 << 3) + 4 >> 2] = HEAP32[i1 + 36 >> 2];
         if (HEAP32[i1 + 16 >> 2] & 16) {
          i2 = i6 + i3 | 0;
          HEAP8[i2 >> 0] = HEAPU8[i2 >> 0] | i7;
          i2 = HEAP32[i38 >> 2] | 0;
         }
         i3 = i3 + 1 | 0;
         if (i3 >>> 0 >= i2 >>> 0) break; else i1 = i1 + 40 | 0;
        }
       }
      }
      if (!i27) _psh_globals_set_scale(HEAP32[i28 >> 2] | 0, i29, i30, 0, 0);
      i19 = i19 + 1 | 0;
      if ((i19 | 0) == 2) {
       i1 = i35;
       i5 = i38;
       i3 = i35;
       i2 = 0;
       break;
      }
     }
    } else {
     i1 = i35;
     i5 = i38;
     i3 = i35;
    }
   } else {
    i3 = i35;
    i1 = i35;
    i31 = 53;
   }
  } else {
   i3 = i35;
   i1 = i35;
   i31 = 53;
  }
 } else {
  i1 = i38 + 12 | 0;
  i3 = i1;
  i31 = 53;
 }
 if ((i31 | 0) == 53) {
  i5 = i38;
  i4 = i38 + 4 | 0;
 }
 i35 = HEAP32[i37 >> 2] | 0;
 i34 = i38 + 92 | 0;
 _ft_mem_free(i35, HEAP32[i34 >> 2] | 0);
 HEAP32[i34 >> 2] = 0;
 HEAP32[i38 + 88 >> 2] = 0;
 HEAP32[i38 + 96 >> 2] = 0;
 i34 = i38 + 80 | 0;
 _ft_mem_free(i35, HEAP32[i34 >> 2] | 0);
 HEAP32[i34 >> 2] = 0;
 i34 = i38 + 76 | 0;
 _ft_mem_free(i35, HEAP32[i34 >> 2] | 0);
 HEAP32[i34 >> 2] = 0;
 HEAP32[i38 + 72 >> 2] = 0;
 HEAP32[i38 + 68 >> 2] = 0;
 HEAP32[i38 + 84 >> 2] = 0;
 i34 = i38 + 52 | 0;
 _ft_mem_free(i35, HEAP32[i34 >> 2] | 0);
 HEAP32[i34 >> 2] = 0;
 HEAP32[i38 + 48 >> 2] = 0;
 HEAP32[i38 + 56 >> 2] = 0;
 i34 = i38 + 40 | 0;
 _ft_mem_free(i35, HEAP32[i34 >> 2] | 0);
 HEAP32[i34 >> 2] = 0;
 i34 = i38 + 36 | 0;
 _ft_mem_free(i35, HEAP32[i34 >> 2] | 0);
 HEAP32[i34 >> 2] = 0;
 HEAP32[i38 + 32 >> 2] = 0;
 HEAP32[i38 + 28 >> 2] = 0;
 HEAP32[i38 + 44 >> 2] = 0;
 _ft_mem_free(i35, HEAP32[i36 >> 2] | 0);
 HEAP32[i36 >> 2] = 0;
 _ft_mem_free(i35, HEAP32[i1 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i37 >> 2] = 0;
 i38 = i2;
 STACKTOP = i39;
 return i38 | 0;
}

function _load_truetype_glyph(i44, i22, i24, i6) {
 i44 = i44 | 0;
 i22 = i22 | 0;
 i24 = i24 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0;
 i48 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i39 = i48 + 88 | 0;
 i41 = i48 + 84 | 0;
 i46 = i48 + 80 | 0;
 i4 = i48 + 40 | 0;
 i47 = i48 + 32 | 0;
 i19 = i48;
 i18 = i48 + 8 | 0;
 HEAP32[i46 >> 2] = 0;
 i23 = HEAP32[i44 >> 2] | 0;
 i38 = i44 + 12 | 0;
 i29 = HEAP32[i38 >> 2] | 0;
 if (i24 >>> 0 > 1) if ((HEAPU16[i23 + 290 >> 1] | 0) >>> 0 < i24 >>> 0) HEAP32[i46 >> 2] = 21; else i43 = 4; else i43 = 4;
 do if ((i43 | 0) == 4) {
  i14 = i44 + 20 | 0;
  HEAP32[i14 >> 2] = i22;
  i40 = i44 + 16 | 0;
  if (!(HEAP32[i40 >> 2] & 1)) {
   i28 = HEAP32[i44 + 4 >> 2] | 0;
   i27 = HEAP32[i28 + 48 >> 2] | 0;
   i28 = HEAP32[i28 + 52 >> 2] | 0;
  } else {
   i27 = 65536;
   i28 = 65536;
  }
  i45 = i23 + 128 | 0;
  i1 = HEAP32[(HEAP32[i45 >> 2] | 0) + 48 >> 2] | 0;
  if (!i1) {
   i5 = i44 + 28 | 0;
   i3 = _tt_face_get_location(i23, i22, i5) | 0;
   i42 = 0;
  } else {
   i42 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i1 >> 2] >> 2] & 127](HEAP32[i1 + 4 >> 2] | 0, i22, i47) | 0;
   HEAP32[i46 >> 2] = i42;
   if (i42 | 0) break;
   i1 = HEAP32[i47 + 4 >> 2] | 0;
   i5 = i44 + 28 | 0;
   HEAP32[i5 >> 2] = i1;
   i2 = i4;
   i3 = i2 + 40 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i3 | 0));
   _FT_Stream_OpenMemory(i4, HEAP32[i47 >> 2] | 0, i1);
   HEAP32[i44 + 24 >> 2] = i4;
   i3 = 0;
   i42 = 1;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  do if ((i1 | 0) > 0) {
   i2 = HEAP32[i44 + 84 >> 2] | 0;
   if (!i2) if (!(HEAP32[(HEAP32[i45 >> 2] | 0) + 48 >> 2] | 0)) {
    HEAP32[i46 >> 2] = 8;
    break;
   }
   i37 = FUNCTION_TABLE_iiiii[HEAP32[i23 + 512 >> 2] & 127](i44, i22, i2 + i3 | 0, i1) | 0;
   HEAP32[i46 >> 2] = i37;
   if (!i37) {
    i43 = FUNCTION_TABLE_ii[HEAP32[i23 + 520 >> 2] & 63](i44) | 0;
    HEAP32[i46 >> 2] = i43;
    if (!i43) {
     i43 = _tt_get_metrics(i44, i22) | 0;
     HEAP32[i46 >> 2] = i43;
     if (i6 << 24 >> 24 != 0 | (i43 | 0) != 0) i43 = 127; else {
      i20 = 1;
      i1 = HEAP32[i5 >> 2] | 0;
      i43 = 18;
     }
    } else i43 = 127;
   }
  } else {
   i20 = 0;
   i43 = 18;
  } while (0);
  L23 : do if ((i43 | 0) == 18) {
   do if (!i1) i43 = 20; else {
    i11 = i44 + 32 | 0;
    i1 = HEAP16[i11 >> 1] | 0;
    if (!(i1 << 16 >> 16)) i43 = 20; else {
     i3 = i44 + 52 | 0;
     i2 = HEAP32[i3 >> 2] | 0;
     i18 = (HEAP32[i44 + 36 >> 2] | 0) - i2 | 0;
     i34 = i44 + 68 | 0;
     HEAP32[i34 >> 2] = i18;
     i17 = i44 + 72 | 0;
     HEAP32[i17 >> 2] = 0;
     i8 = i44 + 56 | 0;
     i4 = HEAP32[i8 >> 2] | 0;
     i35 = i44 + 76 | 0;
     HEAP32[i35 >> 2] = i4 + i18;
     i18 = i44 + 80 | 0;
     HEAP32[i18 >> 2] = 0;
     i36 = i44 + 184 | 0;
     HEAP32[i36 >> 2] = 0;
     i9 = i44 + 176 | 0;
     i6 = (HEAP32[i9 >> 2] | 0) + (HEAP32[i44 + 48 >> 2] | 0) | 0;
     i19 = i44 + 188 | 0;
     HEAP32[i19 >> 2] = i6;
     i37 = i44 + 192 | 0;
     HEAP32[i37 >> 2] = 0;
     i10 = i44 + 180 | 0;
     i21 = i44 + 196 | 0;
     HEAP32[i21 >> 2] = i6 - (HEAP32[i10 >> 2] | 0);
     i6 = HEAP32[(HEAP32[(HEAP32[i44 >> 2] | 0) + 128 >> 2] | 0) + 48 >> 2] | 0;
     if (i6) {
      i7 = HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0;
      if (i7) {
       HEAP32[i39 >> 2] = i2;
       HEAP32[i39 + 4 >> 2] = 0;
       i1 = i39 + 8 | 0;
       HEAP32[i1 >> 2] = i4;
       HEAP32[i39 + 12 >> 2] = 0;
       if (!(FUNCTION_TABLE_iiiii[i7 & 127](HEAP32[i6 + 4 >> 2] | 0, i22, 0, i39) | 0)) {
        i2 = HEAP32[i1 >> 2] | 0;
        HEAP32[i3 >> 2] = HEAP32[i39 >> 2] << 16 >> 16;
        i2 = i2 & 65535;
        HEAP32[i8 >> 2] = i2;
        HEAP32[i9 >> 2] = 0;
        HEAP32[i10 >> 2] = 0;
        i1 = i44 + 64 | 0;
        if (!(HEAP8[i1 >> 0] | 0)) {
         HEAP8[i1 >> 0] = 1;
         HEAP32[i44 + 60 >> 2] = i2;
        }
       }
       i1 = HEAP16[i11 >> 1] | 0;
      }
     }
     if (i1 << 16 >> 16 > 0) {
      i41 = FUNCTION_TABLE_ii[HEAP32[i23 + 524 >> 2] & 63](i44) | 0;
      HEAP32[i46 >> 2] = i41;
      if (i41 | 0) break;
      FUNCTION_TABLE_vi[HEAP32[i23 + 516 >> 2] & 127](i44);
      i3 = HEAP32[i38 >> 2] | 0;
      i4 = i3 + 56 | 0;
      i5 = i3 + 58 | 0;
      i8 = HEAP16[i5 >> 1] | 0;
      i9 = i8 << 16 >> 16;
      i10 = i3 + 60 | 0;
      i7 = i34;
      i1 = HEAP32[i7 + 4 >> 2] | 0;
      i11 = (HEAP32[i10 >> 2] | 0) + (i9 << 3) | 0;
      HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
      HEAP32[i11 + 4 >> 2] = i1;
      i11 = i9 + 1 | 0;
      i1 = i35;
      i7 = HEAP32[i1 + 4 >> 2] | 0;
      i12 = (HEAP32[i10 >> 2] | 0) + (i11 << 3) | 0;
      HEAP32[i12 >> 2] = HEAP32[i1 >> 2];
      HEAP32[i12 + 4 >> 2] = i7;
      i12 = i9 + 2 | 0;
      i7 = i36;
      i1 = HEAP32[i7 + 4 >> 2] | 0;
      i13 = (HEAP32[i10 >> 2] | 0) + (i12 << 3) | 0;
      HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
      HEAP32[i13 + 4 >> 2] = i1;
      i13 = i9 + 3 | 0;
      i1 = i37;
      i7 = HEAP32[i1 + 4 >> 2] | 0;
      i6 = (HEAP32[i10 >> 2] | 0) + (i13 << 3) | 0;
      HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
      HEAP32[i6 + 4 >> 2] = i7;
      i6 = i3 + 64 | 0;
      HEAP8[(HEAP32[i6 >> 2] | 0) + i9 >> 0] = 0;
      HEAP8[(HEAP32[i6 >> 2] | 0) + i11 >> 0] = 0;
      HEAP8[(HEAP32[i6 >> 2] | 0) + i12 >> 0] = 0;
      HEAP8[(HEAP32[i6 >> 2] | 0) + i13 >> 0] = 0;
      i7 = i9 + 4 | 0;
      i1 = HEAP32[i44 >> 2] | 0;
      i2 = HEAP8[i1 + 672 >> 0] | 0;
      if (i2 << 24 >> 24) {
       i1 = _TT_Vary_Apply_Glyph_Deltas(HEAP32[i1 + 104 >> 2] | 0, i2, HEAP32[i1 + 676 >> 2] | 0, HEAP32[i14 >> 2] | 0, i4, i7) | 0;
       if (i1 | 0) {
        HEAP32[i46 >> 2] = i1;
        break L23;
       }
      }
      i1 = HEAP32[i40 >> 2] | 0;
      if (!(i1 & 2)) {
       i1 = HEAP16[i5 >> 1] | 0;
       HEAP16[i44 + 132 >> 1] = i1;
       HEAP16[i44 + 134 >> 1] = HEAP16[i4 >> 1] | 0;
       HEAP32[i44 + 136 >> 2] = HEAP32[i3 + 76 >> 2];
       i41 = HEAP32[i10 >> 2] | 0;
       HEAP32[i44 + 140 >> 2] = i41;
       i39 = HEAP32[i3 + 80 >> 2] | 0;
       HEAP32[i44 + 144 >> 2] = i39;
       HEAP32[i44 + 148 >> 2] = HEAP32[i6 >> 2];
       HEAP32[i44 + 152 >> 2] = HEAP32[i3 + 68 >> 2];
       HEAP16[i44 + 156 >> 1] = 0;
       _memcpy(i39 | 0, i41 | 0, ((i1 & 65535) << 3) + 32 | 0) | 0;
       i1 = HEAP32[i40 >> 2] | 0;
      }
      i2 = HEAP32[i10 >> 2] | 0;
      i3 = i2 + (i7 << 3) | 0;
      if (!(i1 & 1)) {
       i5 = HEAP32[i44 + 4 >> 2] | 0;
       i4 = HEAP32[i5 + 48 >> 2] | 0;
       i5 = HEAP32[i5 + 52 >> 2] | 0;
       if (i8 << 16 >> 16 > -4) {
        do {
         i41 = _FT_MulFix(HEAP32[i2 >> 2] | 0, i4) | 0;
         HEAP32[i2 >> 2] = i41;
         i41 = i2 + 4 | 0;
         i39 = _FT_MulFix(HEAP32[i41 >> 2] | 0, i5) | 0;
         HEAP32[i41 >> 2] = i39;
         i2 = i2 + 8 | 0;
        } while (i2 >>> 0 < i3 >>> 0);
        i1 = HEAP32[i40 >> 2] | 0;
        i2 = HEAP32[i10 >> 2] | 0;
       }
       i41 = i2 + (i9 << 3) | 0;
       i40 = HEAP32[i41 + 4 >> 2] | 0;
       i39 = i34;
       HEAP32[i39 >> 2] = HEAP32[i41 >> 2];
       HEAP32[i39 + 4 >> 2] = i40;
       i39 = (HEAP32[i10 >> 2] | 0) + (i11 << 3) | 0;
       i40 = HEAP32[i39 + 4 >> 2] | 0;
       i41 = i35;
       HEAP32[i41 >> 2] = HEAP32[i39 >> 2];
       HEAP32[i41 + 4 >> 2] = i40;
       i41 = (HEAP32[i10 >> 2] | 0) + (i12 << 3) | 0;
       i40 = HEAP32[i41 + 4 >> 2] | 0;
       i39 = i36;
       HEAP32[i39 >> 2] = HEAP32[i41 >> 2];
       HEAP32[i39 + 4 >> 2] = i40;
       i39 = (HEAP32[i10 >> 2] | 0) + (i13 << 3) | 0;
       i40 = HEAP32[i39 + 4 >> 2] | 0;
       i41 = i37;
       HEAP32[i41 >> 2] = HEAP32[i39 >> 2];
       HEAP32[i41 + 4 >> 2] = i40;
      }
      if (!(i1 & 2)) {
       i41 = i44 + 132 | 0;
       HEAP16[i41 >> 1] = (HEAPU16[i41 >> 1] | 0) + 4;
       i44 = _TT_Hint_Glyph(i44, 0) | 0;
       HEAP32[i46 >> 2] = i44;
       if (i44 | 0) break L23;
      } else HEAP32[i46 >> 2] = 0;
      _FT_GlyphLoader_Add(i29);
      break L23;
     }
     if (i1 << 16 >> 16 != -1) {
      HEAP32[i46 >> 2] = 20;
      break;
     }
     i25 = i29 + 22 | 0;
     i32 = HEAP16[i25 >> 1] | 0;
     i31 = i32 << 16 >> 16;
     i33 = HEAP16[i29 + 20 >> 1] | 0;
     i30 = FUNCTION_TABLE_ii[HEAP32[i23 + 528 >> 2] & 63](i44) | 0;
     HEAP32[i46 >> 2] = i30;
     if (!i30) {
      i30 = i44 + 168 | 0;
      i26 = HEAP32[i30 >> 2] | 0;
      FUNCTION_TABLE_vi[HEAP32[i23 + 516 >> 2] & 127](i44);
      i10 = i23 + 672 | 0;
      if (HEAP8[i10 >> 0] | 0) {
       i15 = HEAP32[i23 + 100 >> 2] | 0;
       i14 = HEAP32[i29 + 84 >> 2] | 0;
       i1 = i14 + 4 | 0;
       i16 = i1 & 65535;
       HEAP16[i39 + 2 >> 1] = i16;
       HEAP16[i39 >> 1] = i16;
       i16 = _ft_mem_realloc(i15, 8, 0, i1 << 16 >> 16, 0, i46) | 0;
       do if (!(HEAP32[i46 >> 2] | 0)) {
        i9 = i1 << 16 >> 16;
        i2 = _ft_mem_realloc(i15, 1, 0, i9, 0, i46) | 0;
        if (!(HEAP32[i46 >> 2] | 0)) {
         i1 = _ft_mem_realloc(i15, 2, 0, i9, 0, i46) | 0;
         if (!(HEAP32[i46 >> 2] | 0)) {
          i12 = i29 + 88 | 0;
          i13 = i29 + 48 | 0;
          i11 = (i14 | 0) == 0;
          if (i11) {
           i6 = 0;
           i3 = 1;
           i4 = 0;
          } else {
           i3 = i14 + 1 | 0;
           i6 = (HEAP32[i12 >> 2] | 0) + (HEAP32[i13 >> 2] << 5) | 0;
           i4 = 0;
           i7 = 0;
           i8 = 1;
           while (1) {
            HEAP32[i16 + (i4 << 3) >> 2] = HEAP32[i6 + 8 >> 2];
            HEAP32[i16 + (i4 << 3) + 4 >> 2] = HEAP32[i6 + 12 >> 2];
            HEAP8[i2 + i4 >> 0] = 1;
            HEAP16[i1 + (i4 << 1) >> 1] = i7;
            i4 = i8 + 1 | 0;
            if ((i4 | 0) == (i3 | 0)) break; else {
             i20 = i8;
             i6 = i6 + 32 | 0;
             i7 = i8 & 65535;
             i8 = i4;
             i4 = i20;
            }
           }
           i6 = i14;
           i4 = i14 & 65535;
          }
          HEAP32[i16 + (i6 << 3) >> 2] = HEAP32[i34 >> 2];
          HEAP32[i16 + (i6 << 3) + 4 >> 2] = HEAP32[i17 >> 2];
          HEAP8[i2 + i6 >> 0] = 1;
          HEAP16[i1 + (i6 << 1) >> 1] = i4;
          HEAP32[i16 + (i3 << 3) >> 2] = HEAP32[i35 >> 2];
          HEAP32[i16 + (i3 << 3) + 4 >> 2] = HEAP32[i18 >> 2];
          HEAP8[i2 + i3 >> 0] = 1;
          HEAP16[i1 + (i3 << 1) >> 1] = i3;
          i20 = i6 + 2 | 0;
          HEAP32[i16 + (i20 << 3) >> 2] = HEAP32[i36 >> 2];
          HEAP32[i16 + (i20 << 3) + 4 >> 2] = HEAP32[i19 >> 2];
          HEAP8[i2 + i20 >> 0] = 1;
          HEAP16[i1 + (i20 << 1) >> 1] = i20;
          i20 = i6 + 3 | 0;
          HEAP32[i16 + (i20 << 3) >> 2] = HEAP32[i37 >> 2];
          HEAP32[i16 + (i20 << 3) + 4 >> 2] = HEAP32[i21 >> 2];
          HEAP8[i2 + i20 >> 0] = 1;
          HEAP16[i1 + (i20 << 1) >> 1] = i20;
          HEAP32[i39 + 4 >> 2] = i16;
          HEAP32[i39 + 8 >> 2] = i2;
          HEAP32[i39 + 12 >> 2] = i1;
          i23 = _TT_Vary_Apply_Glyph_Deltas(HEAP32[i23 + 104 >> 2] | 0, HEAP8[i10 >> 0] | 0, HEAP32[i23 + 676 >> 2] | 0, i22, i39, i9) | 0;
          HEAP32[i46 >> 2] = i23;
          if (i23 | 0) break;
          i4 = HEAP32[i16 >> 2] | 0;
          i6 = HEAP32[i16 + 4 >> 2] | 0;
          if (i11) {
           i7 = 0;
           i3 = 1;
          } else {
           i3 = i14 + 1 | 0;
           i8 = (HEAP32[i12 >> 2] | 0) + (HEAP32[i13 >> 2] << 5) | 0;
           i7 = 1;
           while (1) {
            HEAP32[i8 + 8 >> 2] = i4 << 16 >> 16;
            HEAP32[i8 + 12 >> 2] = i6 << 16 >> 16;
            i4 = HEAP32[i16 + (i7 << 3) >> 2] | 0;
            i6 = HEAP32[i16 + (i7 << 3) + 4 >> 2] | 0;
            i7 = i7 + 1 | 0;
            if ((i7 | 0) == (i3 | 0)) {
             i7 = i14;
             break;
            } else i8 = i8 + 32 | 0;
           }
          }
          HEAP32[i34 >> 2] = i4;
          HEAP32[i17 >> 2] = i6;
          HEAP32[i35 >> 2] = HEAP32[i16 + (i3 << 3) >> 2];
          HEAP32[i18 >> 2] = HEAP32[i16 + (i3 << 3) + 4 >> 2];
          i23 = i7 + 2 | 0;
          HEAP32[i36 >> 2] = HEAP32[i16 + (i23 << 3) >> 2];
          HEAP32[i19 >> 2] = HEAP32[i16 + (i23 << 3) + 4 >> 2];
          i23 = i7 + 3 | 0;
          HEAP32[i37 >> 2] = HEAP32[i16 + (i23 << 3) >> 2];
          HEAP32[i21 >> 2] = HEAP32[i16 + (i23 << 3) + 4 >> 2];
         } else {
          i2 = 0;
          i1 = 0;
         }
        } else {
         i2 = 0;
         i1 = 0;
        }
       } else {
        i2 = 0;
        i1 = 0;
       } while (0);
       _ft_mem_free(i15, i16);
       _ft_mem_free(i15, i2);
       _ft_mem_free(i15, i1);
       if (HEAP32[i46 >> 2] | 0) break L23;
      }
      i1 = HEAP32[i40 >> 2] | 0;
      if (!(i1 & 1)) {
       i1 = _FT_MulFix(HEAP32[i34 >> 2] | 0, i27) | 0;
       HEAP32[i34 >> 2] = i1;
       i1 = _FT_MulFix(HEAP32[i35 >> 2] | 0, i27) | 0;
       HEAP32[i35 >> 2] = i1;
       i1 = _FT_MulFix(HEAP32[i36 >> 2] | 0, i27) | 0;
       HEAP32[i36 >> 2] = i1;
       i1 = _FT_MulFix(HEAP32[i19 >> 2] | 0, i28) | 0;
       HEAP32[i19 >> 2] = i1;
       i1 = _FT_MulFix(HEAP32[i37 >> 2] | 0, i27) | 0;
       HEAP32[i37 >> 2] = i1;
       i1 = _FT_MulFix(HEAP32[i21 >> 2] | 0, i28) | 0;
       HEAP32[i21 >> 2] = i1;
       i1 = HEAP32[i40 >> 2] | 0;
      }
      if (i1 & 1024 | 0) {
       _FT_GlyphLoader_Add(i29);
       HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 72 >> 2] = 1668246896;
       break L23;
      }
      i19 = HEAP32[i29 + 84 >> 2] | 0;
      i20 = HEAP32[i29 + 48 >> 2] | 0;
      i23 = i44 + 24 | 0;
      i21 = HEAP32[i23 >> 2] | 0;
      i22 = HEAP32[i5 >> 2] | 0;
      _FT_GlyphLoader_Add(i29);
      L89 : do if (!i19) {
       i2 = i31;
       i1 = 0;
      } else {
       i18 = i29 + 52 | 0;
       i16 = i24 + 1 | 0;
       i17 = i44 + 4 | 0;
       i2 = i31;
       i15 = 0;
       L91 : while (1) {
        i1 = (HEAP32[i18 >> 2] | 0) + (i20 << 5) + (i15 << 5) | 0;
        i4 = i34;
        i3 = HEAP32[i4 >> 2] | 0;
        i4 = HEAP32[i4 + 4 >> 2] | 0;
        i7 = i35;
        i6 = HEAP32[i7 >> 2] | 0;
        i7 = HEAP32[i7 + 4 >> 2] | 0;
        i9 = i36;
        i8 = HEAP32[i9 >> 2] | 0;
        i9 = HEAP32[i9 + 4 >> 2] | 0;
        i11 = i37;
        i10 = HEAP32[i11 >> 2] | 0;
        i11 = HEAP32[i11 + 4 >> 2] | 0;
        i12 = HEAP16[i25 >> 1] | 0;
        i14 = i12 << 16 >> 16;
        i29 = _load_truetype_glyph(i44, HEAP32[i1 >> 2] | 0, i16, 0) | 0;
        HEAP32[i46 >> 2] = i29;
        do if (!i29) {
         i1 = (HEAP32[i18 >> 2] | 0) + (i20 << 5) + (i15 << 5) | 0;
         i13 = i1 + 4 | 0;
         if (!(HEAP16[i13 >> 1] & 512)) {
          i29 = i34;
          HEAP32[i29 >> 2] = i3;
          HEAP32[i29 + 4 >> 2] = i4;
          i29 = i35;
          HEAP32[i29 >> 2] = i6;
          HEAP32[i29 + 4 >> 2] = i7;
          i29 = i36;
          HEAP32[i29 >> 2] = i8;
          HEAP32[i29 + 4 >> 2] = i9;
          i29 = i37;
          HEAP32[i29 >> 2] = i10;
          HEAP32[i29 + 4 >> 2] = i11;
         }
         i29 = HEAP16[i25 >> 1] | 0;
         i2 = i29 << 16 >> 16;
         if (i29 << 16 >> 16 == i12 << 16 >> 16) {
          i3 = 24;
          break;
         }
         i29 = HEAP32[i38 >> 2] | 0;
         i8 = i29 + 24 | 0;
         i11 = HEAP32[i8 >> 2] | 0;
         i29 = HEAP16[i29 + 22 >> 1] | 0;
         i10 = i29 << 16 >> 16;
         i3 = HEAP16[i13 >> 1] | 0;
         i7 = (i3 & 200) == 0;
         if ((i29 & 65535) > (i12 & 65535) & (i7 ^ 1)) {
          i4 = i1 + 16 | 0;
          i3 = i14;
          do {
           _FT_Vector_Transform(i11 + (i3 << 3) | 0, i4);
           i3 = i3 + 1 | 0;
          } while ((i3 | 0) != (i10 | 0));
          i3 = HEAP16[i13 >> 1] | 0;
         }
         i6 = i3 & 65535;
         i4 = HEAP32[i1 + 12 >> 2] | 0;
         i3 = HEAP32[i1 + 8 >> 2] | 0;
         do if (!(i6 & 2)) {
          i6 = i3 + i31 | 0;
          i3 = i4 + i14 | 0;
          if (!(i3 >>> 0 < i10 >>> 0 & i6 >>> 0 < i14 >>> 0)) {
           i3 = 21;
           break;
          }
          i4 = HEAP32[i8 >> 2] | 0;
          i9 = (HEAP32[i4 + (i6 << 3) >> 2] | 0) - (HEAP32[i4 + (i3 << 3) >> 2] | 0) | 0;
          i4 = (HEAP32[i4 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i4 + (i3 << 3) + 4 >> 2] | 0) | 0;
          i43 = 94;
         } else {
          if (!(i3 | i4)) {
           i3 = 0;
           break;
          }
          if (!(i7 | (i6 & 2048 | 0) == 0)) {
           i29 = _FT_Hypot(HEAP32[i1 + 16 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0) | 0;
           i43 = _FT_Hypot(HEAP32[i1 + 28 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0) | 0;
           i3 = _FT_MulFix(i3, i29) | 0;
           i4 = _FT_MulFix(i4, i43) | 0;
          }
          if (HEAP32[i40 >> 2] & 1 | 0) {
           i9 = i3;
           i43 = 94;
           break;
          }
          i9 = HEAP32[i17 >> 2] | 0;
          i43 = HEAP32[i9 + 52 >> 2] | 0;
          i9 = _FT_MulFix(i3, HEAP32[i9 + 48 >> 2] | 0) | 0;
          i4 = _FT_MulFix(i4, i43) | 0;
          i43 = (HEAP16[i13 >> 1] & 4) == 0;
          i9 = i43 ? i9 : i9 + 32 & -64;
          i4 = i43 ? i4 : i4 + 32 & -64;
          i43 = 94;
         } while (0);
         do if ((i43 | 0) == 94) {
          i43 = 0;
          if (!(i9 | i4)) {
           i3 = 0;
           break;
          }
          i8 = i10 - i14 | 0;
          i7 = i11 + (i14 << 3) | 0;
          i6 = (i8 | 0) != 0;
          if (i6 & (i9 | 0) != 0) {
           i3 = 0;
           do {
            i29 = i7 + (i3 << 3) | 0;
            HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + i9;
            i3 = i3 + 1 | 0;
           } while ((i3 | 0) != (i8 | 0));
          }
          if (i6 & (i4 | 0) != 0) i3 = 0; else {
           i3 = 0;
           break;
          }
          do {
           i29 = i7 + (i3 << 3) + 4 | 0;
           HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + i4;
           i3 = i3 + 1 | 0;
          } while ((i3 | 0) != (i8 | 0));
          i3 = 0;
         } while (0);
         HEAP32[i46 >> 2] = i3;
         i3 = (i3 | 0) == 0 ? 0 : 2;
        } else i3 = 2; while (0);
        switch (i3 & 31) {
        case 2:
         break L23;
        case 24:
        case 0:
         break;
        default:
         {
          i1 = 0;
          break L91;
         }
        }
        i15 = i15 + 1 | 0;
        if (i15 >>> 0 >= i19 >>> 0) break L89;
       }
       STACKTOP = i48;
       return i1 | 0;
      } while (0);
      HEAP32[i23 >> 2] = i21;
      HEAP32[i5 >> 2] = i22;
      HEAP32[i30 >> 2] = i26;
      if (HEAP32[i40 >> 2] & 2 | 0) break L23;
      if (!(i2 >>> 0 > i31 >>> 0 ? (HEAP16[i1 + 4 >> 1] & 256) != 0 : 0)) break L23;
      i4 = HEAP32[i38 >> 2] | 0;
      i6 = i4 + 22 | 0;
      i1 = HEAP16[i6 >> 1] | 0;
      i2 = i1 << 16 >> 16;
      i3 = i2 + 4 | 0;
      do if (!i3) i43 = 106; else {
       if ((i3 + i2 + (HEAP16[i4 + 58 >> 1] | 0) | 0) >>> 0 <= (HEAP32[i4 + 4 >> 2] | 0) >>> 0) {
        i43 = 106;
        break;
       }
       i1 = _FT_GlyphLoader_CheckPoints(i4, i3, 0) | 0;
       HEAP32[i41 >> 2] = i1;
       if (i1 | 0) break;
       i1 = HEAP16[i6 >> 1] | 0;
       i43 = 109;
      } while (0);
      if ((i43 | 0) == 106) {
       HEAP32[i41 >> 2] = 0;
       i43 = 109;
      }
      L136 : do if ((i43 | 0) == 109) {
       i7 = i4 + 24 | 0;
       i29 = i34;
       i34 = HEAP32[i29 + 4 >> 2] | 0;
       i40 = (HEAP32[i7 >> 2] | 0) + (i1 << 16 >> 16 << 3) | 0;
       HEAP32[i40 >> 2] = HEAP32[i29 >> 2];
       HEAP32[i40 + 4 >> 2] = i34;
       i40 = HEAP32[i35 + 4 >> 2] | 0;
       i1 = (HEAP32[i7 >> 2] | 0) + ((HEAP16[i6 >> 1] | 0) + 1 << 3) | 0;
       HEAP32[i1 >> 2] = HEAP32[i35 >> 2];
       HEAP32[i1 + 4 >> 2] = i40;
       i1 = HEAP32[i36 + 4 >> 2] | 0;
       i40 = (HEAP32[i7 >> 2] | 0) + ((HEAP16[i6 >> 1] | 0) + 2 << 3) | 0;
       HEAP32[i40 >> 2] = HEAP32[i36 >> 2];
       HEAP32[i40 + 4 >> 2] = i1;
       i40 = i37;
       i1 = HEAP32[i40 + 4 >> 2] | 0;
       i7 = (HEAP32[i7 >> 2] | 0) + ((HEAP16[i6 >> 1] | 0) + 3 << 3) | 0;
       HEAP32[i7 >> 2] = HEAP32[i40 >> 2];
       HEAP32[i7 + 4 >> 2] = i1;
       i7 = i4 + 28 | 0;
       HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP16[i6 >> 1] | 0) >> 0] = 0;
       HEAP8[(HEAP32[i7 >> 2] | 0) + ((HEAP16[i6 >> 1] | 0) + 1) >> 0] = 0;
       HEAP8[(HEAP32[i7 >> 2] | 0) + ((HEAP16[i6 >> 1] | 0) + 2) >> 0] = 0;
       HEAP8[(HEAP32[i7 >> 2] | 0) + ((HEAP16[i6 >> 1] | 0) + 3) >> 0] = 0;
       i7 = HEAP32[i23 >> 2] | 0;
       i1 = _FT_Stream_Seek(i7, HEAP32[i30 >> 2] | 0) | 0;
       HEAP32[i41 >> 2] = i1;
       if (i1 | 0) break;
       i2 = _FT_Stream_ReadUShort(i7, i41) | 0;
       i1 = HEAP32[i41 >> 2] | 0;
       if (i1 | 0) break;
       i6 = i2 & 65535;
       do if ((i2 & 65535) > (HEAPU16[(HEAP32[i44 >> 2] | 0) + 286 >> 1] | 0)) {
        if ((i6 | 0) > (HEAP32[i5 >> 2] | 0)) {
         i1 = 22;
         break L136;
        }
        i2 = i44 + 160 | 0;
        i4 = HEAP32[i2 >> 2] | 0;
        i3 = HEAP32[i4 + 388 >> 2] | 0;
        i1 = i4 + 392 | 0;
        if (i3 >>> 0 < i6 >>> 0) {
         i4 = _ft_mem_realloc(HEAP32[i4 + 8 >> 2] | 0, 1, i3, i6, HEAP32[i1 >> 2] | 0, i39) | 0;
         HEAP32[i1 >> 2] = i4;
         i4 = HEAP32[i39 >> 2] | 0;
         i1 = i4;
         i3 = (i4 | 0) == 0 ? i6 : i3;
         i4 = HEAP32[i2 >> 2] | 0;
        } else i1 = 0;
        HEAP32[i41 >> 2] = i1;
        HEAP32[i4 + 388 >> 2] = i3 & 65535;
        if (!i1) i1 = i4; else break L136;
       } else if (!(i2 << 16 >> 16)) {
        HEAP32[i46 >> 2] = 0;
        break L23;
       } else {
        i1 = i44 + 160 | 0;
        i2 = i1;
        i1 = HEAP32[i1 >> 2] | 0;
        break;
       } while (0);
       i1 = _FT_Stream_Read(i7, HEAP32[i1 + 392 >> 2] | 0, i6) | 0;
       HEAP32[i41 >> 2] = i1;
       if (i1 | 0) break;
       i40 = HEAP32[i44 + 8 >> 2] | 0;
       HEAP32[i40 + 136 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 392 >> 2];
       HEAP32[i40 + 140 >> 2] = i6;
       i40 = HEAP32[i38 >> 2] | 0;
       i2 = (HEAPU16[i40 + 22 >> 1] | 0) - i31 | 0;
       i41 = i2 & 65535;
       i4 = i44 + 132 | 0;
       HEAP16[i4 >> 1] = i41;
       HEAP16[i44 + 134 >> 1] = (HEAPU16[i40 + 20 >> 1] | 0) - i33;
       HEAP32[i44 + 136 >> 2] = (HEAP32[i40 + 40 >> 2] | 0) + (i31 << 3);
       HEAP32[i44 + 140 >> 2] = (HEAP32[i40 + 24 >> 2] | 0) + (i31 << 3);
       HEAP32[i44 + 144 >> 2] = (HEAP32[i40 + 44 >> 2] | 0) + (i31 << 3);
       i1 = (HEAP32[i40 + 28 >> 2] | 0) + i31 | 0;
       i3 = i44 + 148 | 0;
       HEAP32[i3 >> 2] = i1;
       HEAP32[i44 + 152 >> 2] = (HEAP32[i40 + 32 >> 2] | 0) + (i33 << 1);
       HEAP16[i44 + 156 >> 1] = i32;
       do if (!(i41 << 16 >> 16)) i1 = i2 & 65535; else {
        HEAP8[i1 >> 0] = HEAP8[i1 >> 0] & -25;
        i1 = HEAP16[i4 >> 1] | 0;
        if ((i1 & 65535) > 1) i2 = 1; else {
         i1 = i1 & 65535;
         break;
        }
        do {
         i1 = (HEAP32[i3 >> 2] | 0) + i2 | 0;
         HEAP8[i1 >> 0] = HEAP8[i1 >> 0] & -25;
         i2 = i2 + 1 | 0;
         i1 = HEAPU16[i4 >> 1] | 0;
        } while (i2 >>> 0 < i1 >>> 0);
       } while (0);
       HEAP16[i4 >> 1] = i1 + 4;
       i44 = _TT_Hint_Glyph(i44, 1) | 0;
       HEAP32[i46 >> 2] = i44;
       break L23;
      } while (0);
      HEAP32[i46 >> 2] = i1;
      break L23;
     }
    }
   } while (0);
   L158 : do if ((i43 | 0) == 20) {
    i1 = i44 + 36 | 0;
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 0;
    i38 = _tt_get_metrics(i44, i22) | 0;
    HEAP32[i46 >> 2] = i38;
    if (!(i6 << 24 >> 24 != 0 | (i38 | 0) != 0)) {
     i6 = i44 + 52 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
     i14 = (HEAP32[i1 >> 2] | 0) - i4 | 0;
     i11 = i44 + 68 | 0;
     HEAP32[i11 >> 2] = i14;
     i12 = i44 + 72 | 0;
     HEAP32[i12 >> 2] = 0;
     i7 = i44 + 56 | 0;
     i5 = HEAP32[i7 >> 2] | 0;
     i13 = i44 + 76 | 0;
     HEAP32[i13 >> 2] = i5 + i14;
     i14 = i44 + 80 | 0;
     HEAP32[i14 >> 2] = 0;
     i15 = i44 + 184 | 0;
     HEAP32[i15 >> 2] = 0;
     i8 = i44 + 176 | 0;
     i1 = (HEAP32[i8 >> 2] | 0) + (HEAP32[i44 + 48 >> 2] | 0) | 0;
     i16 = i44 + 188 | 0;
     HEAP32[i16 >> 2] = i1;
     i17 = i44 + 192 | 0;
     HEAP32[i17 >> 2] = 0;
     i9 = i44 + 180 | 0;
     i10 = i44 + 196 | 0;
     HEAP32[i10 >> 2] = i1 - (HEAP32[i9 >> 2] | 0);
     i1 = HEAP32[i44 >> 2] | 0;
     i2 = HEAP32[(HEAP32[i1 + 128 >> 2] | 0) + 48 >> 2] | 0;
     if (i2) {
      i3 = HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] | 0;
      if (i3) {
       HEAP32[i39 >> 2] = i4;
       HEAP32[i39 + 4 >> 2] = 0;
       i1 = i39 + 8 | 0;
       HEAP32[i1 >> 2] = i5;
       HEAP32[i39 + 12 >> 2] = 0;
       if (!(FUNCTION_TABLE_iiiii[i3 & 127](HEAP32[i2 + 4 >> 2] | 0, i22, 0, i39) | 0)) {
        i2 = HEAP32[i1 >> 2] | 0;
        HEAP32[i6 >> 2] = HEAP32[i39 >> 2] << 16 >> 16;
        i2 = i2 & 65535;
        HEAP32[i7 >> 2] = i2;
        HEAP32[i8 >> 2] = 0;
        HEAP32[i9 >> 2] = 0;
        i1 = i44 + 64 | 0;
        if (!(HEAP8[i1 >> 0] | 0)) {
         HEAP8[i1 >> 0] = 1;
         HEAP32[i44 + 60 >> 2] = i2;
        }
       }
       i1 = HEAP32[i44 >> 2] | 0;
      }
     }
     i2 = i1 + 672 | 0;
     do if (HEAP8[i2 >> 0] | 0) {
      HEAP32[i41 >> 2] = 16843009;
      i3 = i19;
      HEAP32[i3 >> 2] = 65536;
      HEAP32[i3 + 4 >> 2] = 196610;
      HEAP32[i39 >> 2] = HEAP32[i11 >> 2];
      i3 = i39 + 4 | 0;
      HEAP32[i3 >> 2] = HEAP32[i12 >> 2];
      i4 = i39 + 8 | 0;
      HEAP32[i4 >> 2] = HEAP32[i13 >> 2];
      i5 = i39 + 12 | 0;
      HEAP32[i5 >> 2] = HEAP32[i14 >> 2];
      i6 = i39 + 16 | 0;
      HEAP32[i6 >> 2] = HEAP32[i15 >> 2];
      i7 = i39 + 20 | 0;
      HEAP32[i7 >> 2] = HEAP32[i16 >> 2];
      i8 = i39 + 24 | 0;
      HEAP32[i8 >> 2] = HEAP32[i17 >> 2];
      i9 = i39 + 28 | 0;
      HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
      HEAP16[i18 + 2 >> 1] = 4;
      HEAP16[i18 >> 1] = 4;
      HEAP32[i18 + 4 >> 2] = i39;
      HEAP32[i18 + 8 >> 2] = i41;
      HEAP32[i18 + 12 >> 2] = i19;
      i41 = _TT_Vary_Apply_Glyph_Deltas(HEAP32[i1 + 104 >> 2] | 0, HEAP8[i2 >> 0] | 0, HEAP32[i1 + 676 >> 2] | 0, i22, i18, 4) | 0;
      HEAP32[i46 >> 2] = i41;
      if (!i41) {
       HEAP32[i11 >> 2] = HEAP32[i39 >> 2];
       HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
       HEAP32[i13 >> 2] = HEAP32[i4 >> 2];
       HEAP32[i14 >> 2] = HEAP32[i5 >> 2];
       HEAP32[i15 >> 2] = HEAP32[i6 >> 2];
       HEAP32[i16 >> 2] = HEAP32[i7 >> 2];
       HEAP32[i17 >> 2] = HEAP32[i8 >> 2];
       HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
       break;
      } else break L158;
     } while (0);
     if (!(HEAP32[i40 >> 2] & 1)) {
      i41 = _FT_MulFix(HEAP32[i11 >> 2] | 0, i27) | 0;
      HEAP32[i11 >> 2] = i41;
      i41 = _FT_MulFix(HEAP32[i13 >> 2] | 0, i27) | 0;
      HEAP32[i13 >> 2] = i41;
      i41 = _FT_MulFix(HEAP32[i15 >> 2] | 0, i27) | 0;
      HEAP32[i15 >> 2] = i41;
      i41 = _FT_MulFix(HEAP32[i16 >> 2] | 0, i28) | 0;
      HEAP32[i16 >> 2] = i41;
      i41 = _FT_MulFix(HEAP32[i17 >> 2] | 0, i27) | 0;
      HEAP32[i17 >> 2] = i41;
      i41 = _FT_MulFix(HEAP32[i10 >> 2] | 0, i28) | 0;
      HEAP32[i10 >> 2] = i41;
     }
     HEAP32[i46 >> 2] = 0;
    }
   } while (0);
   if (i20 << 24 >> 24) i43 = 127;
  } while (0);
  if ((i43 | 0) == 127) FUNCTION_TABLE_vi[HEAP32[i23 + 516 >> 2] & 127](i44);
  if (i42 << 24 >> 24) {
   i45 = HEAP32[(HEAP32[i45 >> 2] | 0) + 48 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i45 >> 2] | 0) + 4 >> 2] & 63](HEAP32[i45 + 4 >> 2] | 0, i47);
  }
 } while (0);
 i47 = HEAP32[i46 >> 2] | 0;
 STACKTOP = i48;
 return i47 | 0;
}
function __bdf_parse_glyphs(i10, i3, i1, i2, i21) {
 i10 = i10 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i20 + 4 | 0;
 i19 = i20;
 HEAP32[i19 >> 2] = 0;
 i6 = i21 + 32 | 0;
 i17 = HEAP32[i6 >> 2] | 0;
 i18 = HEAP32[i17 + 278664 >> 2] | 0;
 L1 : do if (!(_strncmp(i10, 281687, 7) | 0)) {
  i7 = i10 + 7 | 0;
  i1 = HEAP8[i7 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   break;
  default:
   {
    i11 = 6;
    break L1;
   }
  }
  i6 = i1 << 24 >> 24 == 0;
  i3 = (i6 ? -7 : -8) + i3 | 0;
  HEAP32[i8 >> 2] = 0;
  i4 = i17 + 88 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 1 | 0;
  i1 = i17 + 84 | 0;
  i2 = _ft_mem_realloc(i18, 1, i2, i2 + i5 | 0, HEAP32[i1 >> 2] | 0, i8) | 0;
  HEAP32[i1 >> 2] = i2;
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) {
   i1 = i2 + (HEAP32[i4 >> 2] | 0) | 0;
   _memcpy(i1 | 0, (i6 ? i7 : i10 + 8 | 0) | 0, i3 | 0) | 0;
   HEAP8[i1 + i3 >> 0] = 10;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i5;
   i1 = HEAP32[i8 >> 2] | 0;
  }
  HEAP32[i19 >> 2] = i1;
  i11 = 198;
 } else i11 = 6; while (0);
 L7 : do if ((i11 | 0) == 6) {
  i2 = HEAP32[i21 >> 2] | 0;
  L9 : do if (!(i2 & 32)) {
   L11 : do if (!(_strncmp(i10, 281944, 5) | 0)) {
    switch (HEAP8[i10 + 5 >> 0] | 0) {
    case 9:
    case 13:
    case 10:
    case 0:
    case 32:
     break;
    default:
     break L11;
    }
    i2 = i21 + 139304 | 0;
    i1 = __bdf_list_split(i2, 281721, i10, i3) | 0;
    HEAP32[i19 >> 2] = i1;
    if (i1 | 0) {
     i2 = i21;
     break L7;
    }
    i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0;
    L15 : do if (!i1) i11 = 17; else {
     i2 = HEAP8[i1 >> 0] | 0;
     L17 : do switch (i2 << 24 >> 24) {
     case 0:
      {
       i11 = 17;
       break L15;
      }
     case 48:
      {
       switch (HEAP8[i1 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i5 = 281756;
         i6 = 10;
         i2 = 48;
         break L17;
        }
       }
       i2 = i1 + 2 | 0;
       i1 = i2;
       i5 = 281724;
       i6 = 16;
       i2 = HEAP8[i2 >> 0] | 0;
       break;
      }
     default:
      {
       i5 = 281756;
       i6 = 10;
      }
     } while (0);
     i3 = i2 << 24 >> 24;
     if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i3 & 7))) i11 = 17; else {
      i4 = 0;
      i2 = i3;
      do {
       i16 = Math_imul(i4, i6) | 0;
       i4 = (HEAPU8[281788 + i2 >> 0] | 0) + i16 | 0;
       i1 = i1 + 1 | 0;
       i16 = HEAP8[i1 >> 0] | 0;
       i2 = i16 << 24 >> 24;
      } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i16 & 255) >>> 3) >> 0] | 0) != 0);
      i1 = i17 + 48 | 0;
      HEAP32[i1 >> 2] = i4;
      HEAP32[i21 + 4 >> 2] = i4;
      if (!i4) i11 = 19; else if (i4 >>> 0 > 1114111) {
       HEAP32[i19 >> 2] = 6;
       i2 = i21;
       i1 = 6;
       break L7;
      } else i1 = i4;
     }
    } while (0);
    if ((i11 | 0) == 17) {
     i1 = i17 + 48 | 0;
     HEAP32[i1 >> 2] = 0;
     HEAP32[i21 + 4 >> 2] = 0;
     i11 = 19;
    }
    if ((i11 | 0) == 19) {
     HEAP32[i1 >> 2] = 64;
     i1 = 64;
    }
    i1 = _ft_mem_realloc(i18, 36, 0, i1, 0, i19) | 0;
    HEAP32[i17 + 56 >> 2] = i1;
    i1 = HEAP32[i19 >> 2] | 0;
    if (i1 | 0) {
     i2 = i21;
     break L7;
    }
    HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 32;
    break L9;
   } while (0);
   HEAP32[i19 >> 2] = 180;
   i2 = i21;
   i1 = 180;
   break L7;
  } else {
   L34 : do if (!(_strncmp(i10, 281979, 7) | 0)) {
    switch (HEAP8[i10 + 7 >> 0] | 0) {
    case 9:
    case 13:
    case 10:
    case 0:
    case 32:
     break;
    default:
     break L34;
    }
    if (!(i2 & 4032)) {
     _qsort(HEAP32[i17 + 56 >> 2] | 0, HEAP32[i17 + 52 >> 2] | 0, 36, 185);
     HEAP32[i21 >> 2] = HEAP32[i21 >> 2] & -2;
     break L9;
    } else {
     HEAP32[i19 >> 2] = 186;
     i2 = i21;
     i1 = 186;
     break L7;
    }
   } while (0);
   L41 : do if (!(_strncmp(i10, 281987, 7) | 0)) {
    switch (HEAP8[i10 + 7 >> 0] | 0) {
    case 9:
    case 13:
    case 10:
    case 0:
    case 32:
     break;
    default:
     break L41;
    }
    HEAP32[i21 + 28 >> 2] = 0;
    HEAP32[i21 >> 2] = i2 & -4033;
    break L9;
   } while (0);
   i1 = (i2 & 64 | 0) == 0;
   if (!i1) if ((HEAP32[i21 + 28 >> 2] | 0) == -1) if (!(HEAP32[(HEAP32[i21 + 36 >> 2] | 0) + 4 >> 2] | 0)) break;
   L49 : do if (!(_strncmp(i10, 281995, 9) | 0)) {
    switch (HEAP8[i10 + 9 >> 0] | 0) {
    case 9:
    case 13:
    case 10:
    case 0:
    case 32:
     break;
    default:
     break L49;
    }
    i9 = i21 + 24 | 0;
    _ft_mem_free(i18, HEAP32[i9 >> 2] | 0);
    HEAP32[i9 >> 2] = 0;
    i8 = i21 + 139304 | 0;
    i1 = __bdf_list_split(i8, 281721, i10, i3) | 0;
    HEAP32[i19 >> 2] = i1;
    if (i1 | 0) {
     i2 = i21;
     break L7;
    }
    i7 = i21 + 139312 | 0;
    i1 = HEAP32[i7 >> 2] | 0;
    L53 : do switch (i1 | 0) {
    case 0:
     break;
    case 1:
     {
      HEAP32[i7 >> 2] = 0;
      break;
     }
    default:
     {
      i5 = i1 + -1 | 0;
      i1 = 1;
      i2 = 0;
      while (1) {
       i17 = HEAP32[i8 >> 2] | 0;
       HEAP32[i17 + (i2 << 2) >> 2] = HEAP32[i17 + (i1 << 2) >> 2];
       i2 = i2 + 1 | 0;
       if ((i2 | 0) == (i5 | 0)) break; else i1 = i1 + 1 | 0;
      }
      HEAP32[i7 >> 2] = i5;
      if (i5 | 0) {
       i4 = HEAP32[HEAP32[i8 >> 2] >> 2] | 0;
       i2 = 0;
       i6 = 0;
       i3 = i4;
       while (1) {
        i1 = HEAP8[i3 >> 0] | 0;
        if (!(i1 << 24 >> 24)) {
         i1 = i2;
         i2 = i5;
        } else {
         do {
          i3 = i3 + 1 | 0;
          i17 = i2;
          i2 = i2 + 1 | 0;
          HEAP8[i4 + i17 >> 0] = i1;
          i1 = HEAP8[i3 >> 0] | 0;
         } while (i1 << 24 >> 24 != 0);
         i1 = i2;
         i2 = HEAP32[i7 >> 2] | 0;
        }
        i3 = i6 + 1 | 0;
        if (i3 >>> 0 < i2 >>> 0) {
         HEAP8[i4 + i1 >> 0] = 32;
         i1 = i1 + 1 | 0;
         i5 = HEAP32[i7 >> 2] | 0;
        } else i5 = i2;
        if (i3 >>> 0 >= i5 >>> 0) break;
        i2 = i1;
        i6 = i3;
        i3 = HEAP32[(HEAP32[i8 >> 2] | 0) + (i3 << 2) >> 2] | 0;
       }
       if ((i4 | 0) == 369704) i4 = 369704; else {
        HEAP8[i4 + i1 >> 0] = 0;
        if (!i4) break L53;
       }
       i2 = i1 + 1 | 0;
       i3 = _ft_mem_realloc(i18, 1, 0, i2, 0, i19) | 0;
       HEAP32[i9 >> 2] = i3;
       i1 = HEAP32[i19 >> 2] | 0;
       if (i1 | 0) {
        i2 = i21;
        break L7;
       }
       _memcpy(i3 | 0, i4 | 0, i2 | 0) | 0;
       HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 64;
       break L9;
      }
     }
    } while (0);
    HEAP32[i19 >> 2] = 3;
    i2 = i21;
    i1 = 3;
    break L7;
   } while (0);
   L78 : do if (!(_strncmp(i10, 282005, 8) | 0)) {
    switch (HEAP8[i10 + 8 >> 0] | 0) {
    case 9:
    case 13:
    case 10:
    case 0:
    case 32:
     break;
    default:
     break L78;
    }
    if (i1) {
     HEAP32[i19 >> 2] = 181;
     i2 = i21;
     i1 = 181;
     break L7;
    }
    i2 = i21 + 139304 | 0;
    i1 = __bdf_list_split(i2, 281721, i10, i3) | 0;
    HEAP32[i19 >> 2] = i1;
    if (i1 | 0) {
     i2 = i21;
     break L7;
    }
    i8 = HEAP32[i2 >> 2] | 0;
    i2 = HEAP32[i8 + 4 >> 2] | 0;
    L85 : do if (!i2) i11 = 68; else {
     i1 = HEAP8[i2 >> 0] | 0;
     if (!(i1 << 24 >> 24)) i11 = 68; else {
      i7 = i1 << 24 >> 24 == 45;
      i1 = i7 ? i2 + 1 | 0 : i2;
      i2 = HEAP8[i1 >> 0] | 0;
      L88 : do if (i2 << 24 >> 24 == 48) {
       switch (HEAP8[i1 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i5 = 281756;
         i6 = 10;
         i3 = i1;
         i2 = 48;
         break L88;
        }
       }
       i2 = i1 + 2 | 0;
       i5 = 281724;
       i6 = 16;
       i3 = i2;
       i2 = HEAP8[i2 >> 0] | 0;
      } else {
       i5 = 281756;
       i6 = 10;
       i3 = i1;
      } while (0);
      i4 = i2 << 24 >> 24;
      if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
       i1 = 0;
       i2 = i4;
       do {
        i1 = Math_imul(i1, i6) | 0;
        i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 | 0;
        i3 = i3 + 1 | 0;
        i16 = HEAP8[i3 >> 0] | 0;
        i2 = i16 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i16 & 255) >>> 3) >> 0] | 0) != 0);
      }
      i16 = i7 ? 0 - i1 | 0 : i1;
      i2 = i21 + 28 | 0;
      i1 = (i16 | 0) > -1 ? i16 : -1;
      HEAP32[i2 >> 2] = i1;
      do if ((i16 | 0) < 0) if ((HEAP32[i21 + 139312 >> 2] | 0) >>> 0 > 2) {
       i3 = HEAP32[i8 + 8 >> 2] | 0;
       if (!i3) {
        i11 = 83;
        break L85;
       }
       i1 = HEAP8[i3 >> 0] | 0;
       if (!(i1 << 24 >> 24)) {
        i11 = 83;
        break L85;
       }
       i8 = i1 << 24 >> 24 == 45;
       i1 = i8 ? i3 + 1 | 0 : i3;
       i3 = HEAP8[i1 >> 0] | 0;
       L101 : do if (i3 << 24 >> 24 == 48) {
        switch (HEAP8[i1 + 1 >> 0] | 0) {
        case 88:
        case 120:
         break;
        default:
         {
          i6 = 281756;
          i7 = 10;
          i4 = i1;
          i3 = 48;
          break L101;
         }
        }
        i3 = i1 + 2 | 0;
        i6 = 281724;
        i7 = 16;
        i4 = i3;
        i3 = HEAP8[i3 >> 0] | 0;
       } else {
        i6 = 281756;
        i7 = 10;
        i4 = i1;
       } while (0);
       i5 = i3 << 24 >> 24;
       if (!(HEAPU8[i6 + ((i3 & 255) >>> 3) >> 0] & 1 << (i5 & 7))) i1 = 0; else {
        i1 = 0;
        i3 = i5;
        do {
         i1 = Math_imul(i1, i7) | 0;
         i1 = (HEAPU8[281788 + i3 >> 0] | 0) + i1 | 0;
         i4 = i4 + 1 | 0;
         i16 = HEAP8[i4 >> 0] | 0;
         i3 = i16 << 24 >> 24;
        } while ((1 << (i3 & 7) & HEAPU8[i6 + ((i16 & 255) >>> 3) >> 0] | 0) != 0);
       }
       i1 = i8 ? 0 - i1 | 0 : i1;
       HEAP32[i2 >> 2] = i1;
       if ((i1 | 0) >= -1) break;
       HEAP32[i2 >> 2] = -1;
       i11 = 91;
       break L85;
      } while (0);
      if ((i1 | 0) > 0 & i1 >>> 0 > 1114111) {
       HEAP32[i19 >> 2] = 3;
       i2 = i21;
       i1 = 3;
       break L7;
      } else if ((i1 | 0) > -1) {
       i11 = 84;
       break;
      } else {
       i11 = 91;
       break;
      }
     }
    } while (0);
    if ((i11 | 0) == 68) {
     i2 = i21 + 28 | 0;
     i11 = 83;
    }
    if ((i11 | 0) == 83) {
     HEAP32[i2 >> 2] = 0;
     i1 = 0;
     i11 = 84;
    }
    do if ((i11 | 0) == 84) {
     i3 = i21 + 40 + (i1 >>> 5 << 2) | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i5 = 1 << (i1 & 31);
     if (i4 & i5 | 0) {
      HEAP32[i2 >> 2] = -1;
      HEAP16[i17 + 278660 >> 1] = 1;
      i11 = 91;
      break;
     }
     HEAP32[i3 >> 2] = i4 | i5;
     i6 = i17 + 52 | 0;
     i3 = HEAP32[i6 >> 2] | 0;
     i5 = i17 + 48 | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) {
      i1 = i17 + 56 | 0;
      i4 = _ft_mem_realloc(i18, 36, i3, i3 + 64 | 0, HEAP32[i1 >> 2] | 0, i19) | 0;
      HEAP32[i1 >> 2] = i4;
      i1 = HEAP32[i19 >> 2] | 0;
      if (i1 | 0) {
       i2 = i21;
       break L7;
      }
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 64;
      i3 = HEAP32[i6 >> 2] | 0;
      i1 = HEAP32[i2 >> 2] | 0;
     } else i4 = HEAP32[i17 + 56 >> 2] | 0;
     HEAP32[i6 >> 2] = i3 + 1;
     i17 = i21 + 24 | 0;
     HEAP32[i4 + (i3 * 36 | 0) >> 2] = HEAP32[i17 >> 2];
     HEAP32[i4 + (i3 * 36 | 0) + 4 >> 2] = i1;
     i1 = i17;
    } while (0);
    do if ((i11 | 0) == 91) {
     if (!(HEAP32[(HEAP32[i21 + 36 >> 2] | 0) + 4 >> 2] | 0)) {
      i1 = i21 + 24 | 0;
      _ft_mem_free(i18, HEAP32[i1 >> 2] | 0);
      HEAP32[i1 >> 2] = 0;
      break;
     }
     i4 = i17 + 64 | 0;
     i1 = HEAP32[i4 >> 2] | 0;
     i3 = i17 + 60 | 0;
     if ((i1 | 0) == (HEAP32[i3 >> 2] | 0)) {
      i17 = i17 + 68 | 0;
      i2 = _ft_mem_realloc(i18, 36, i1, i1 + 4 | 0, HEAP32[i17 >> 2] | 0, i19) | 0;
      HEAP32[i17 >> 2] = i2;
      i1 = HEAP32[i19 >> 2] | 0;
      if (i1 | 0) {
       i2 = i21;
       break L7;
      }
      HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
      i1 = HEAP32[i4 >> 2] | 0;
     } else i2 = HEAP32[i17 + 68 >> 2] | 0;
     i17 = i21 + 24 | 0;
     HEAP32[i2 + (i1 * 36 | 0) >> 2] = HEAP32[i17 >> 2];
     HEAP32[i4 >> 2] = i1 + 1;
     HEAP32[i2 + (i1 * 36 | 0) + 4 >> 2] = i1;
     i1 = i17;
    } while (0);
    HEAP32[i1 >> 2] = 0;
    HEAP32[i21 >> 2] = HEAP32[i21 >> 2] & 1073741695 | 128;
    break L9;
   } while (0);
   i13 = i21 + 28 | 0;
   i16 = (HEAP32[i13 >> 2] | 0) == -1;
   i14 = i17 + 64 | 0;
   i15 = HEAP32[(i16 ? i17 + 68 | 0 : i17 + 56 | 0) >> 2] | 0;
   i16 = (HEAP32[(i16 ? i14 : i17 + 52 | 0) >> 2] | 0) + -1 | 0;
   if (i2 & 2048 | 0) {
    i5 = i21 + 8 | 0;
    i1 = HEAP32[i5 >> 2] | 0;
    if (i1 >>> 0 >= (HEAPU16[i15 + (i16 * 36 | 0) + 14 >> 1] | 0) >>> 0) {
     if ((i2 | 0) < 0) break;
     HEAP32[i21 >> 2] = i2 | -2147483648;
     HEAP16[i17 + 278660 >> 1] = 1;
     break;
    }
    i3 = HEAP32[i15 + (i16 * 36 | 0) + 28 >> 2] | 0;
    i4 = i3 << 1;
    i3 = (HEAP32[i15 + (i16 * 36 | 0) + 24 >> 2] | 0) + (Math_imul(i3, i1) | 0) | 0;
    i1 = 0;
    L146 : while (1) {
     i2 = i1;
     while (1) {
      if (i2 >>> 0 >= i4 >>> 0) break L146;
      i14 = HEAP8[i10 + i2 >> 0] | 0;
      i1 = i14 << 24 >> 24;
      if (!(1 << (i1 & 7) & HEAPU8[281724 + ((i14 & 255) >>> 3) >> 0])) {
       i11 = 109;
       break L146;
      }
      HEAP8[i3 >> 0] = (HEAPU8[i3 >> 0] << 4) + (HEAPU8[281788 + i1 >> 0] | 0);
      i1 = i2 + 1 | 0;
      if (i1 >>> 0 >= i4 >>> 0 | (i2 & 1 | 0) == 0) i2 = i1; else break;
     }
     i14 = i3 + 1 | 0;
     HEAP8[i14 >> 0] = 0;
     i3 = i14;
    }
    if ((i11 | 0) == 109) {
     i1 = HEAP32[i21 >> 2] | 0;
     if (!(i1 & 1073741824)) {
      HEAP32[i21 >> 2] = i1 | 1073741824;
      HEAP16[i17 + 278660 >> 1] = 1;
     }
    }
    i1 = HEAP16[i15 + (i16 * 36 | 0) + 12 >> 1] | 0;
    if (i1 << 16 >> 16) {
     i16 = 282014 + ((Math_imul(HEAPU16[(HEAP32[i6 >> 2] | 0) + 278662 >> 1] | 0, i1 & 65535) | 0) & 7) | 0;
     HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & HEAP8[i16 >> 0];
    }
    if ((i2 | 0) == (i4 | 0)) {
     i16 = HEAP8[i10 + i4 >> 0] | 0;
     if (1 << (i16 & 7) & HEAPU8[281724 + ((i16 & 255) >>> 3) >> 0] | 0) {
      i1 = HEAP32[i21 >> 2] | 0;
      if (!(i1 & 1073741824)) {
       HEAP32[i21 >> 2] = i1 | 1073741824;
       HEAP16[i17 + 278660 >> 1] = 1;
      }
     }
    }
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
    break;
   }
   L166 : do if (!(_strncmp(i10, 282022, 6) | 0)) {
    switch (HEAP8[i10 + 6 >> 0] | 0) {
    case 9:
    case 13:
    case 10:
    case 0:
    case 32:
     break;
    default:
     {
      i11 = 130;
      break L166;
     }
    }
    if (i2 & 128 | 0) {
     i2 = i21 + 139304 | 0;
     i1 = __bdf_list_split(i2, 281721, i10, i3) | 0;
     HEAP32[i19 >> 2] = i1;
     if (i1 | 0) {
      i2 = i21;
      break L7;
     }
     i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0;
     L171 : do if (!i1) i1 = 0; else {
      i2 = HEAP8[i1 >> 0] | 0;
      L173 : do switch (i2 << 24 >> 24) {
      case 0:
       {
        i1 = 0;
        break L171;
       }
      case 48:
       {
        switch (HEAP8[i1 + 1 >> 0] | 0) {
        case 88:
        case 120:
         break;
        default:
         {
          i5 = 281756;
          i6 = 10;
          i2 = 48;
          break L173;
         }
        }
        i2 = i1 + 2 | 0;
        i1 = i2;
        i5 = 281724;
        i6 = 16;
        i2 = HEAP8[i2 >> 0] | 0;
        break;
       }
      default:
       {
        i5 = 281756;
        i6 = 10;
       }
      } while (0);
      i4 = i2 << 24 >> 24;
      if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
       i3 = 0;
       i2 = i4;
       do {
        i17 = Math_imul(i3, i6) | 0;
        i3 = (HEAPU8[281788 + i2 >> 0] | 0) + i17 | 0;
        i1 = i1 + 1 | 0;
        i17 = HEAP8[i1 >> 0] | 0;
        i2 = i17 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i17 & 255) >>> 3) >> 0] | 0) != 0);
       i1 = i3 & 65535;
      }
     } while (0);
     HEAP16[i15 + (i16 * 36 | 0) + 8 >> 1] = i1;
     HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 256;
     break L9;
    }
   } else i11 = 130; while (0);
   L181 : do if ((i11 | 0) == 130) {
    L183 : do if (!(_strncmp(i10, 282029, 6) | 0)) {
     switch (HEAP8[i10 + 6 >> 0] | 0) {
     case 9:
     case 13:
     case 10:
     case 0:
     case 32:
      break;
     default:
      break L183;
     }
     if (!(i2 & 128)) break L181;
     i2 = i21 + 139304 | 0;
     i1 = __bdf_list_split(i2, 281721, i10, i3) | 0;
     HEAP32[i19 >> 2] = i1;
     if (i1 | 0) {
      i2 = i21;
      break L7;
     }
     i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0;
     L188 : do if (!i1) i2 = 0; else {
      i2 = HEAP8[i1 >> 0] | 0;
      L190 : do switch (i2 << 24 >> 24) {
      case 0:
       {
        i2 = 0;
        break L188;
       }
      case 48:
       {
        switch (HEAP8[i1 + 1 >> 0] | 0) {
        case 88:
        case 120:
         break;
        default:
         {
          i4 = 281756;
          i5 = 10;
          i2 = 48;
          break L190;
         }
        }
        i2 = i1 + 2 | 0;
        i1 = i2;
        i4 = 281724;
        i5 = 16;
        i2 = HEAP8[i2 >> 0] | 0;
        break;
       }
      default:
       {
        i4 = 281756;
        i5 = 10;
       }
      } while (0);
      i3 = i2 << 24 >> 24;
      if (!(HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i3 & 7))) i2 = 0; else {
       i2 = 0;
       do {
        i2 = Math_imul(i2, i5) | 0;
        i2 = (HEAPU8[281788 + i3 >> 0] | 0) + i2 | 0;
        i1 = i1 + 1 | 0;
        i14 = HEAP8[i1 >> 0] | 0;
        i3 = i14 << 24 >> 24;
       } while ((1 << (i3 & 7) & HEAPU8[i4 + ((i14 & 255) >>> 3) >> 0] | 0) != 0);
      }
     } while (0);
     HEAP16[i15 + (i16 * 36 | 0) + 10 >> 1] = i2;
     i1 = HEAP32[i21 >> 2] | 0;
     if (!(i1 & 256)) {
      i1 = (_FT_MulDiv(i2 & 65535, 72e3, Math_imul(HEAP32[i17 + 20 >> 2] | 0, HEAP32[i17 + 16 >> 2] | 0) | 0) | 0) & 65535;
      HEAP16[i15 + (i16 * 36 | 0) + 8 >> 1] = i1;
      i1 = HEAP32[i21 >> 2] | 0;
     }
     HEAP32[i21 >> 2] = i1 | 512;
     break L9;
    } while (0);
    L201 : do if (!(_strncmp(i10, 282036, 3) | 0)) {
     switch (HEAP8[i10 + 3 >> 0] | 0) {
     case 9:
     case 13:
     case 10:
     case 0:
     case 32:
      break;
     default:
      break L201;
     }
     if (!(i2 & 128)) break L181;
     i2 = i21 + 139304 | 0;
     i1 = __bdf_list_split(i2, 281721, i10, i3) | 0;
     HEAP32[i19 >> 2] = i1;
     if (i1 | 0) {
      i2 = i21;
      break L7;
     }
     i11 = HEAP32[i2 >> 2] | 0;
     i1 = HEAP32[i11 + 4 >> 2] | 0;
     L206 : do if (!i1) i12 = 0; else {
      i2 = HEAP8[i1 >> 0] | 0;
      L208 : do switch (i2 << 24 >> 24) {
      case 0:
       {
        i12 = 0;
        break L206;
       }
      case 48:
       {
        switch (HEAP8[i1 + 1 >> 0] | 0) {
        case 88:
        case 120:
         break;
        default:
         {
          i5 = 281756;
          i6 = 10;
          i2 = 48;
          break L208;
         }
        }
        i2 = i1 + 2 | 0;
        i1 = i2;
        i5 = 281724;
        i6 = 16;
        i2 = HEAP8[i2 >> 0] | 0;
        break;
       }
      default:
       {
        i5 = 281756;
        i6 = 10;
       }
      } while (0);
      i4 = i2 << 24 >> 24;
      if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i12 = 0; else {
       i3 = 0;
       i2 = i4;
       do {
        i12 = Math_imul(i3 & 65535, i6) | 0;
        i3 = (HEAPU8[281788 + i2 >> 0] | 0) + i12 | 0;
        i1 = i1 + 1 | 0;
        i12 = HEAP8[i1 >> 0] | 0;
        i2 = i12 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i12 & 255) >>> 3) >> 0] | 0) != 0);
       i12 = i3 & 65535;
      }
     } while (0);
     HEAP16[i15 + (i16 * 36 | 0) + 12 >> 1] = i12;
     i1 = HEAP32[i11 + 8 >> 2] | 0;
     L216 : do if (!i1) i10 = 0; else {
      i2 = HEAP8[i1 >> 0] | 0;
      L218 : do switch (i2 << 24 >> 24) {
      case 0:
       {
        i10 = 0;
        break L216;
       }
      case 48:
       {
        switch (HEAP8[i1 + 1 >> 0] | 0) {
        case 88:
        case 120:
         break;
        default:
         {
          i5 = 281756;
          i6 = 10;
          i2 = 48;
          break L218;
         }
        }
        i2 = i1 + 2 | 0;
        i1 = i2;
        i5 = 281724;
        i6 = 16;
        i2 = HEAP8[i2 >> 0] | 0;
        break;
       }
      default:
       {
        i5 = 281756;
        i6 = 10;
       }
      } while (0);
      i4 = i2 << 24 >> 24;
      if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) {
       i10 = 0;
       break;
      } else {
       i3 = 0;
       i2 = i4;
      }
      do {
       i10 = Math_imul(i3 & 65535, i6) | 0;
       i3 = (HEAPU8[281788 + i2 >> 0] | 0) + i10 | 0;
       i1 = i1 + 1 | 0;
       i10 = HEAP8[i1 >> 0] | 0;
       i2 = i10 << 24 >> 24;
      } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i10 & 255) >>> 3) >> 0] | 0) != 0);
      i10 = i3 & 65535;
     } while (0);
     HEAP16[i15 + (i16 * 36 | 0) + 14 >> 1] = i10;
     i2 = HEAP32[i11 + 12 >> 2] | 0;
     do if (!i2) i9 = 0; else {
      i1 = HEAP8[i2 >> 0] | 0;
      if (!(i1 << 24 >> 24)) {
       i9 = 0;
       break;
      }
      i7 = i1 << 24 >> 24 == 45;
      i1 = i7 ? i2 + 1 | 0 : i2;
      i2 = HEAP8[i1 >> 0] | 0;
      L229 : do if (i2 << 24 >> 24 == 48) {
       switch (HEAP8[i1 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i5 = 281756;
         i6 = 10;
         i2 = 48;
         break L229;
        }
       }
       i2 = i1 + 2 | 0;
       i5 = 281724;
       i6 = 16;
       i1 = i2;
       i2 = HEAP8[i2 >> 0] | 0;
      } else {
       i5 = 281756;
       i6 = 10;
      } while (0);
      i4 = i2 << 24 >> 24;
      if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
       i3 = i1;
       i1 = 0;
       i2 = i4;
       do {
        i1 = Math_imul(i1, i6) | 0;
        i3 = i3 + 1 | 0;
        i9 = HEAP8[i3 >> 0] | 0;
        i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 << 16 >> 16;
        i2 = i9 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i9 & 255) >>> 3) >> 0] | 0) != 0);
      }
      i9 = (i7 ? 0 - i1 | 0 : i1) & 65535;
     } while (0);
     i8 = i15 + (i16 * 36 | 0) + 16 | 0;
     HEAP16[i8 >> 1] = i9;
     i2 = HEAP32[i11 + 16 >> 2] | 0;
     do if (!i2) i1 = 0; else {
      i1 = HEAP8[i2 >> 0] | 0;
      if (!(i1 << 24 >> 24)) {
       i1 = 0;
       break;
      }
      i7 = i1 << 24 >> 24 == 45;
      i1 = i7 ? i2 + 1 | 0 : i2;
      i2 = HEAP8[i1 >> 0] | 0;
      L241 : do if (i2 << 24 >> 24 == 48) {
       switch (HEAP8[i1 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i5 = 281756;
         i6 = 10;
         i2 = 48;
         break L241;
        }
       }
       i2 = i1 + 2 | 0;
       i5 = 281724;
       i6 = 16;
       i1 = i2;
       i2 = HEAP8[i2 >> 0] | 0;
      } else {
       i5 = 281756;
       i6 = 10;
      } while (0);
      i4 = i2 << 24 >> 24;
      if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
       i3 = i1;
       i1 = 0;
       i2 = i4;
       do {
        i1 = Math_imul(i1, i6) | 0;
        i3 = i3 + 1 | 0;
        i11 = HEAP8[i3 >> 0] | 0;
        i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 << 16 >> 16;
        i2 = i11 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i11 & 255) >>> 3) >> 0] | 0) != 0);
      }
      i1 = (i7 ? 0 - i1 | 0 : i1) & 65535;
     } while (0);
     HEAP16[i15 + (i16 * 36 | 0) + 18 >> 1] = i1;
     i1 = i1 & 65535;
     i11 = (i10 & 65535) + i1 & 65535;
     HEAP16[i15 + (i16 * 36 | 0) + 20 >> 1] = i11;
     i1 = 0 - i1 & 65535;
     HEAP16[i15 + (i16 * 36 | 0) + 22 >> 1] = i1;
     i7 = i21 + 18 | 0;
     i10 = HEAP16[i7 >> 1] | 0;
     HEAP16[i7 >> 1] = i11 << 16 >> 16 > i10 << 16 >> 16 ? i11 : i10;
     i7 = i21 + 20 | 0;
     i10 = HEAP16[i7 >> 1] | 0;
     HEAP16[i7 >> 1] = i1 << 16 >> 16 > i10 << 16 >> 16 ? i1 : i10;
     i7 = (i9 << 16 >> 16) + (i12 & 65535) | 0;
     i10 = i7 & 65535;
     HEAP16[i21 + 22 >> 1] = i10;
     i1 = i21 + 16 | 0;
     i11 = HEAP16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = (i7 << 16 >> 16 | 0) > (i11 << 16 >> 16 | 0) ? i10 : i11;
     i1 = i21 + 12 | 0;
     i11 = HEAP16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = i9 << 16 >> 16 < i11 << 16 >> 16 ? HEAP16[i8 >> 1] | 0 : i11;
     i1 = i21 + 14 | 0;
     i11 = HEAP16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = i9 << 16 >> 16 > i11 << 16 >> 16 ? i9 : i11;
     i1 = HEAP32[i21 >> 2] | 0;
     if (!(i1 & 512)) HEAP16[i15 + (i16 * 36 | 0) + 10 >> 1] = i12;
     do if (HEAP32[HEAP32[i21 + 36 >> 2] >> 2] | 0) {
      i2 = _FT_MulDiv(HEAPU16[i15 + (i16 * 36 | 0) + 10 >> 1] | 0, 72e3, Math_imul(HEAP32[i17 + 20 >> 2] | 0, HEAP32[i17 + 16 >> 2] | 0) | 0) | 0;
      i1 = i15 + (i16 * 36 | 0) + 8 | 0;
      i2 = i2 & 65535;
      if ((HEAP16[i1 >> 1] | 0) == i2 << 16 >> 16) {
       i1 = HEAP32[i21 >> 2] | 0;
       break;
      }
      HEAP16[i1 >> 1] = i2;
      if ((HEAP32[i13 >> 2] | 0) == -1) {
       i2 = (HEAP32[i14 >> 2] | 0) + -1 | 0;
       i1 = i2;
       i2 = i17 + 139396 + (i2 >>> 5 << 2) | 0;
      } else {
       i2 = HEAP32[i15 + (i16 * 36 | 0) + 4 >> 2] | 0;
       i1 = i2;
       i2 = i17 + 132 + (i2 >> 5 << 2) | 0;
      }
      HEAP32[i2 >> 2] = 1 << (i1 & 31) | HEAP32[i2 >> 2];
      i1 = HEAP32[i21 >> 2] | 4096;
      HEAP32[i21 >> 2] = i1;
      HEAP16[i17 + 278660 >> 1] = 1;
     } while (0);
     HEAP32[i21 >> 2] = i1 | 1024;
     break L9;
    } while (0);
    L264 : do if (!(_strncmp(i10, 282040, 6) | 0)) {
     switch (HEAP8[i10 + 6 >> 0] | 0) {
     case 9:
     case 13:
     case 10:
     case 0:
     case 32:
      break;
     default:
      break L264;
     }
     if (!(i2 & 1024)) {
      HEAP32[i19 >> 2] = 183;
      i2 = i21;
      i1 = 183;
      break L7;
     }
     i17 = (Math_imul(HEAPU16[i17 + 278662 >> 1] | 0, HEAPU16[i15 + (i16 * 36 | 0) + 12 >> 1] | 0) | 0) + 7 | 0;
     i1 = i17 >>> 3;
     HEAP32[i15 + (i16 * 36 | 0) + 28 >> 2] = i1;
     i1 = Math_imul(i1, HEAPU16[i15 + (i16 * 36 | 0) + 14 >> 1] | 0) | 0;
     if (i17 >>> 0 > 524287 | i1 >>> 0 > 65535) {
      HEAP32[i19 >> 2] = 184;
      i2 = i21;
      i1 = 184;
      break L7;
     }
     HEAP16[i15 + (i16 * 36 | 0) + 32 >> 1] = i1;
     i1 = _ft_mem_realloc(i18, 1, 0, i1 & 65535, 0, i19) | 0;
     HEAP32[i15 + (i16 * 36 | 0) + 24 >> 2] = i1;
     i1 = HEAP32[i19 >> 2] | 0;
     if (i1 | 0) {
      i2 = i21;
      break L7;
     }
     HEAP32[i21 + 8 >> 2] = 0;
     HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2048;
     break L9;
    } while (0);
    HEAP32[i19 >> 2] = 3;
    i2 = i21;
    i1 = 3;
    break L7;
   } while (0);
   HEAP32[i19 >> 2] = 182;
   i2 = i21;
   i1 = 182;
   break L7;
  } while (0);
  i1 = HEAP32[i19 >> 2] | 0;
  i11 = 198;
 } while (0);
 do if ((i11 | 0) == 198) if (!i1) {
  i21 = 0;
  STACKTOP = i20;
  return i21 | 0;
 } else {
  i2 = i21;
  break;
 } while (0);
 if (!(HEAP32[i2 >> 2] & 64)) {
  i21 = i1;
  STACKTOP = i20;
  return i21 | 0;
 }
 i21 = i21 + 24 | 0;
 _ft_mem_free(i18, HEAP32[i21 >> 2] | 0);
 HEAP32[i21 >> 2] = 0;
 i21 = HEAP32[i19 >> 2] | 0;
 STACKTOP = i20;
 return i21 | 0;
}

function _FcConfigEvaluate(i40, i30, i29, i28, i18) {
 i40 = i40 | 0;
 i30 = i30 | 0;
 i29 = i29 | 0;
 i28 = i28 | 0;
 i18 = i18 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i41 = 0, i42 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 960 | 0;
 i39 = i42 + 944 | 0;
 i41 = i42 + 672 | 0;
 i38 = i42 + 640 | 0;
 i37 = i42 + 608 | 0;
 i24 = i42 + 336 | 0;
 i33 = i42 + 64 | 0;
 i2 = i42 + 928 | 0;
 i31 = i42 + 16 | 0;
 i22 = i42 + 912 | 0;
 i25 = i42 + 896 | 0;
 i26 = i42 + 880 | 0;
 i27 = i42 + 864 | 0;
 i32 = i42 + 848 | 0;
 i3 = i42 + 832 | 0;
 i4 = i42 + 816 | 0;
 i5 = i42 + 800 | 0;
 i23 = i42 + 784 | 0;
 i19 = i42 + 768 | 0;
 i20 = i42 + 752 | 0;
 i21 = i42 + 736 | 0;
 i7 = i42 + 720 | 0;
 i8 = i42 + 704 | 0;
 i9 = i42 + 688 | 0;
 i10 = i42 + 656 | 0;
 i13 = i42 + 624 | 0;
 i14 = i42 + 592 | 0;
 i15 = i42 + 320 | 0;
 i16 = i42 + 48 | 0;
 i17 = i42;
 i36 = HEAP32[i18 >> 2] | 0;
 i35 = i36 & 65535;
 i36 = i36 & 65535;
 do switch (i36 << 16 >> 16) {
 case 0:
  {
   HEAP32[i41 >> 2] = 1;
   HEAP32[i41 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 1:
  {
   HEAP32[i41 >> 2] = 2;
   HEAPF64[i41 + 8 >> 3] = +HEAPF64[i18 + 8 >> 3];
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 2:
  {
   HEAP32[i41 >> 2] = 3;
   HEAP32[i41 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i39 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   _FcValueSave(i2, i39);
   HEAP32[i41 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i41 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i41 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i41 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 3:
  {
   HEAP32[i41 >> 2] = 5;
   i7 = i18 + 8 | 0;
   _FcConfigEvaluate(i22, i30, i29, i28, HEAP32[HEAP32[i7 >> 2] >> 2] | 0);
   i2 = HEAP32[i41 >> 2] | 0;
   i3 = HEAP32[i22 >> 2] | 0;
   d1 = +HEAPF64[i22 + 8 >> 3];
   HEAPF64[i39 >> 3] = d1;
   L11 : do switch (i3 | 0) {
   case 1:
    {
     HEAPF64[tempDoublePtr >> 3] = d1;
     HEAPF64[i39 >> 3] = +(HEAP32[tempDoublePtr >> 2] | 0);
     i8 = 2;
     break;
    }
   case 0:
    switch (i2 | 0) {
    case 5:
     {
      HEAP32[i39 >> 2] = 1024;
      i8 = 5;
      break L11;
     }
    case 8:
     {
      i8 = _FcLangSetPromote(0, 0) | 0;
      HEAP32[i39 >> 2] = i8;
      i8 = 8;
      break L11;
     }
    case 6:
     {
      i8 = _FcCharSetPromote(0) | 0;
      HEAP32[i39 >> 2] = i8;
      i8 = 6;
      break L11;
     }
    default:
     {
      i8 = 0;
      break L11;
     }
    }
   default:
    i8 = i3;
   } while (0);
   d12 = +HEAPF64[i39 >> 3];
   _FcConfigEvaluate(i25, i30, i29, i28, HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0);
   i2 = HEAP32[i41 >> 2] | 0;
   i3 = HEAP32[i25 >> 2] | 0;
   d1 = +HEAPF64[i25 + 8 >> 3];
   HEAPF64[i39 >> 3] = d1;
   L19 : do switch (i3 | 0) {
   case 1:
    {
     HEAPF64[tempDoublePtr >> 3] = d1;
     HEAPF64[i39 >> 3] = +(HEAP32[tempDoublePtr >> 2] | 0);
     i5 = 2;
     break;
    }
   case 0:
    switch (i2 | 0) {
    case 5:
     {
      HEAP32[i39 >> 2] = 1024;
      i5 = 5;
      break L19;
     }
    case 8:
     {
      i5 = _FcLangSetPromote(0, 0) | 0;
      HEAP32[i39 >> 2] = i5;
      i5 = 8;
      break L19;
     }
    case 6:
     {
      i5 = _FcCharSetPromote(0) | 0;
      HEAP32[i39 >> 2] = i5;
      i5 = 6;
      break L19;
     }
    default:
     {
      i5 = 0;
      break L19;
     }
    }
   default:
    i5 = i3;
   } while (0);
   d11 = +HEAPF64[i39 >> 3];
   _FcConfigEvaluate(i26, i30, i29, i28, HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0);
   i2 = HEAP32[i41 >> 2] | 0;
   i3 = HEAP32[i26 >> 2] | 0;
   d1 = +HEAPF64[i26 + 8 >> 3];
   HEAPF64[i39 >> 3] = d1;
   L27 : do switch (i3 | 0) {
   case 1:
    {
     HEAPF64[tempDoublePtr >> 3] = d1;
     HEAPF64[i39 >> 3] = +(HEAP32[tempDoublePtr >> 2] | 0);
     i4 = 2;
     break;
    }
   case 0:
    switch (i2 | 0) {
    case 5:
     {
      HEAP32[i39 >> 2] = 1024;
      i4 = 5;
      break L27;
     }
    case 8:
     {
      i4 = _FcLangSetPromote(0, 0) | 0;
      HEAP32[i39 >> 2] = i4;
      i4 = 8;
      break L27;
     }
    case 6:
     {
      i4 = _FcCharSetPromote(0) | 0;
      HEAP32[i39 >> 2] = i4;
      i4 = 6;
      break L27;
     }
    default:
     {
      i4 = 0;
      break L27;
     }
    }
   default:
    i4 = i3;
   } while (0);
   d6 = +HEAPF64[i39 >> 3];
   _FcConfigEvaluate(i27, i30, i29, i28, HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0);
   i3 = HEAP32[i41 >> 2] | 0;
   i2 = HEAP32[i27 >> 2] | 0;
   d1 = +HEAPF64[i27 + 8 >> 3];
   HEAPF64[i39 >> 3] = d1;
   L35 : do switch (i2 | 0) {
   case 1:
    {
     HEAPF64[tempDoublePtr >> 3] = d1;
     HEAPF64[i39 >> 3] = +(HEAP32[tempDoublePtr >> 2] | 0);
     i2 = 2;
     break;
    }
   case 0:
    switch (i3 | 0) {
    case 5:
     {
      HEAP32[i39 >> 2] = 1024;
      i2 = 5;
      break L35;
     }
    case 8:
     {
      i2 = _FcLangSetPromote(0, 0) | 0;
      HEAP32[i39 >> 2] = i2;
      i2 = 8;
      break L35;
     }
    case 6:
     {
      i2 = _FcCharSetPromote(0) | 0;
      HEAP32[i39 >> 2] = i2;
      i2 = 6;
      break L35;
     }
    default:
     {
      i2 = 0;
      break L35;
     }
    }
   default:
    {}
   } while (0);
   d1 = +HEAPF64[i39 >> 3];
   if ((i8 | 0) == 2 & (i5 | 0) == 2 & (i4 | 0) == 2 & (i2 | 0) == 2) {
    HEAPF64[i31 >> 3] = d12;
    HEAPF64[i31 + 8 >> 3] = d11;
    HEAPF64[i31 + 16 >> 3] = d6;
    HEAPF64[i31 + 24 >> 3] = d1;
    HEAP32[i41 + 8 >> 2] = i31;
   } else HEAP32[i41 >> 2] = 0;
   HEAP32[i39 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   _FcValueSave(i32, i39);
   HEAP32[i41 >> 2] = HEAP32[i32 >> 2];
   HEAP32[i41 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
   HEAP32[i41 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
   HEAP32[i41 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 6:
  {
   HEAP32[i41 >> 2] = 6;
   HEAP32[i41 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i39 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   _FcValueSave(i3, i39);
   HEAP32[i41 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i41 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   HEAP32[i41 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
   HEAP32[i41 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 7:
  {
   HEAP32[i41 >> 2] = 8;
   HEAP32[i41 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i39 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   _FcValueSave(i4, i39);
   HEAP32[i41 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i41 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i41 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i41 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 4:
  {
   HEAP32[i41 >> 2] = 9;
   HEAP32[i41 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i39 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   _FcValueSave(i5, i39);
   HEAP32[i41 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i41 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i41 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i41 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 5:
  {
   HEAP32[i41 >> 2] = 4;
   HEAP32[i41 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 9:
  {
   switch (i28 | 0) {
   case 1:
    {
     i2 = i18 + 8 | 0;
     if (!(HEAP32[i2 + 4 >> 2] | 0)) {
      if (_FcPatternObjectGet(i29, HEAP32[i2 >> 2] | 0, 0, i41) | 0) HEAP32[i41 >> 2] = 0;
     } else i34 = 44;
     break;
    }
   case 0:
    {
     i2 = i18 + 8 | 0;
     if ((HEAP32[i2 + 4 >> 2] | 0) == 1) {
      _fwrite(349072, 80, 1, HEAP32[22811] | 0) | 0;
      HEAP32[i41 >> 2] = 0;
     } else i34 = 44;
     break;
    }
   default:
    {
     i2 = i18 + 8 | 0;
     i34 = 44;
    }
   }
   if ((i34 | 0) == 44) if (_FcPatternObjectGet(i30, HEAP32[i2 >> 2] | 0, 0, i41) | 0) HEAP32[i41 >> 2] = 0;
   HEAP32[i39 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   _FcValueSave(i23, i39);
   HEAP32[i41 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i41 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
   HEAP32[i41 + 8 >> 2] = HEAP32[i23 + 8 >> 2];
   HEAP32[i41 + 12 >> 2] = HEAP32[i23 + 12 >> 2];
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 10:
  {
   i39 = (_FcNameConstant(HEAP32[i18 + 8 >> 2] | 0, i41 + 8 | 0) | 0) != 0 & 1;
   HEAP32[i41 >> 2] = i39;
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 19:
  {
   i2 = i18 + 8 | 0;
   _FcConfigEvaluate(i19, i30, i29, i28, HEAP32[i2 >> 2] | 0);
   HEAP32[i38 >> 2] = HEAP32[i19 >> 2];
   HEAP32[i38 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
   HEAP32[i38 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
   HEAP32[i38 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
   do if ((HEAP32[i38 >> 2] | 0) == 4) {
    i2 = (HEAP32[i2 + 4 >> 2] | 0) + 8 | 0;
    if (!(HEAP32[i38 + 8 >> 2] | 0)) {
     _FcConfigEvaluate(i21, i30, i29, i28, HEAP32[i2 + 4 >> 2] | 0);
     HEAP32[i41 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i41 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
     HEAP32[i41 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
     HEAP32[i41 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
     break;
    } else {
     _FcConfigEvaluate(i20, i30, i29, i28, HEAP32[i2 >> 2] | 0);
     HEAP32[i41 >> 2] = HEAP32[i20 >> 2];
     HEAP32[i41 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
     HEAP32[i41 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
     HEAP32[i41 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
     break;
    }
   } else HEAP32[i41 >> 2] = 0; while (0);
   HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
   _FcValueDestroy(i39);
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 25:
 case 26:
 case 24:
 case 30:
 case 29:
 case 28:
 case 27:
 case 23:
 case 22:
  {
   i36 = i18 + 8 | 0;
   _FcConfigEvaluate(i7, i30, i29, i28, HEAP32[i36 >> 2] | 0);
   HEAP32[i38 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i38 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i38 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i38 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   _FcConfigEvaluate(i8, i30, i29, i28, HEAP32[i36 + 4 >> 2] | 0);
   HEAP32[i37 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i37 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i37 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i37 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
   HEAP32[i41 >> 2] = 4;
   i36 = _FcConfigCompareValue(i38, HEAP32[i18 >> 2] | 0, i37) | 0;
   HEAP32[i41 + 8 >> 2] = i36;
   HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
   _FcValueDestroy(i39);
   HEAP32[i39 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i37 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i37 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i37 + 12 >> 2];
   _FcValueDestroy(i39);
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 34:
 case 33:
 case 32:
 case 31:
 case 21:
 case 20:
  {
   i5 = i18 + 8 | 0;
   _FcConfigEvaluate(i9, i30, i29, i28, HEAP32[i5 >> 2] | 0);
   HEAP32[i38 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i38 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i38 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i38 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
   _FcConfigEvaluate(i10, i30, i29, i28, HEAP32[i5 + 4 >> 2] | 0);
   HEAP32[i37 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i37 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i37 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i37 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
   i5 = HEAP32[i37 >> 2] | 0;
   i2 = HEAP32[i38 >> 2] | 0;
   d1 = +HEAPF64[i38 + 8 >> 3];
   HEAPF64[i39 >> 3] = d1;
   HEAPF64[tempDoublePtr >> 3] = d1;
   i3 = HEAP32[tempDoublePtr >> 2] | 0;
   i4 = i3;
   L83 : do switch (i2 | 0) {
   case 1:
    {
     d1 = +(i3 | 0);
     HEAPF64[i39 >> 3] = d1;
     i2 = 2;
     i34 = 63;
     break;
    }
   case 0:
    switch (i5 | 0) {
    case 5:
     {
      HEAP32[i39 >> 2] = 1024;
      i2 = 5;
      break L83;
     }
    case 8:
     {
      i2 = _FcLangSetPromote(0, i24) | 0;
      HEAP32[i39 >> 2] = i2;
      i2 = 8;
      break L83;
     }
    case 6:
     {
      i2 = _FcCharSetPromote(i24) | 0;
      HEAP32[i39 >> 2] = i2;
      i2 = 6;
      break L83;
     }
    default:
     {
      i2 = 0;
      break L83;
     }
    }
   case 3:
    {
     if ((i5 | 0) == 8) {
      i2 = _FcLangSetPromote(i4, i24) | 0;
      HEAP32[i39 >> 2] = i2;
      i2 = 8;
     } else i2 = 3;
     break;
    }
   default:
    i34 = 63;
   } while (0);
   if ((i34 | 0) == 63) if ((i5 | 0) == 9 & (i2 | 0) == 2) {
    i2 = _FcRangePromote(d1, i24) | 0;
    HEAP32[i39 >> 2] = i2;
    i2 = 9;
   }
   d6 = +HEAPF64[i39 >> 3];
   i3 = HEAP32[i37 >> 2] | 0;
   d1 = +HEAPF64[i37 + 8 >> 3];
   HEAPF64[i39 >> 3] = d1;
   HEAPF64[tempDoublePtr >> 3] = d1;
   i4 = HEAP32[tempDoublePtr >> 2] | 0;
   i5 = i4;
   HEAPF64[tempDoublePtr >> 3] = d6;
   i13 = HEAP32[tempDoublePtr >> 2] | 0;
   i14 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
   i15 = i13;
   i16 = i13;
   i18 = i13;
   i17 = i13;
   L96 : do switch (i3 | 0) {
   case 1:
    {
     d1 = +(i4 | 0);
     HEAPF64[i39 >> 3] = d1;
     i3 = 2;
     i34 = 73;
     break;
    }
   case 0:
    switch (i2 | 0) {
    case 5:
     {
      HEAP32[i39 >> 2] = 1024;
      i3 = 5;
      break L96;
     }
    case 8:
     {
      i3 = _FcLangSetPromote(0, i33) | 0;
      HEAP32[i39 >> 2] = i3;
      i3 = 8;
      break L96;
     }
    case 6:
     {
      i3 = _FcCharSetPromote(i33) | 0;
      HEAP32[i39 >> 2] = i3;
      i3 = 6;
      break L96;
     }
    default:
     {
      i3 = 0;
      break L96;
     }
    }
   case 3:
    {
     if ((i2 | 0) == 8) {
      i3 = _FcLangSetPromote(i5, i33) | 0;
      HEAP32[i39 >> 2] = i3;
      i3 = 8;
     } else i3 = 3;
     break;
    }
   default:
    i34 = 73;
   } while (0);
   if ((i34 | 0) == 73) if ((i2 | 0) == 9 & (i3 | 0) == 2) {
    i3 = _FcRangePromote(d1, i33) | 0;
    HEAP32[i39 >> 2] = i3;
    i3 = 9;
   }
   d1 = +HEAPF64[i39 >> 3];
   HEAPF64[tempDoublePtr >> 3] = d1;
   i4 = HEAP32[tempDoublePtr >> 2] | 0;
   i5 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
   i7 = i4;
   i8 = i4;
   i10 = i4;
   i9 = i4;
   L109 : do if ((i2 | 0) == (i3 | 0)) switch (i2 | 0) {
   case 2:
    {
     switch (i36 << 16 >> 16) {
     case 31:
      {
       HEAP32[i41 >> 2] = 2;
       i4 = i41;
       d1 = d6 + d1;
       break;
      }
     case 32:
      {
       HEAP32[i41 >> 2] = 2;
       i4 = i41;
       d1 = d6 - d1;
       break;
      }
     case 33:
      {
       HEAP32[i41 >> 2] = 2;
       i4 = i41;
       d1 = d6 * d1;
       break;
      }
     case 34:
      {
       HEAP32[i41 >> 2] = 2;
       i4 = i41;
       d1 = d6 / d1;
       break;
      }
     default:
      {
       HEAP32[i41 >> 2] = 0;
       break L109;
      }
     }
     HEAPF64[i41 + 8 >> 3] = d1;
     i2 = i41 + 8 | 0;
     d12 = +HEAPF64[i2 >> 3];
     i3 = ~~d12;
     if (!(d12 == +(i3 | 0))) break L109;
     HEAP32[i4 >> 2] = 1;
     HEAP32[i2 >> 2] = i3;
     break L109;
    }
   case 4:
    switch (i36 << 16 >> 16) {
    case 20:
     {
      HEAP32[i41 >> 2] = 4;
      HEAP32[i41 + 8 >> 2] = (i4 | i13 | 0) != 0 & 1;
      break L109;
     }
    case 21:
     {
      HEAP32[i41 >> 2] = 4;
      HEAP32[i41 + 8 >> 2] = (i13 | 0) != 0 & (i4 | 0) != 0 & 1;
      break L109;
     }
    default:
     {
      HEAP32[i41 >> 2] = 0;
      break L109;
     }
    }
   case 3:
    {
     if ((i35 | 0) == 31) {
      HEAP32[i41 >> 2] = 3;
      i35 = _FcStrPlus(i17, i9) | 0;
      i34 = ___strdup(i35) | 0;
      i36 = i41 + 8 | 0;
      HEAP32[i36 >> 2] = i34;
      _FcStrFree(i35);
      if (HEAP32[i36 >> 2] | 0) break L109;
     }
     HEAP32[i41 >> 2] = 0;
     break L109;
    }
   case 5:
    {
     if ((i35 | 0) != 33) {
      HEAP32[i41 >> 2] = 0;
      break L109;
     }
     HEAP32[i41 >> 2] = 5;
     i2 = _malloc(32) | 0;
     if (!i2) {
      HEAP32[i41 >> 2] = 0;
      break L109;
     } else {
      _FcMatrixMultiply(i2, i18, i10);
      HEAP32[i41 + 8 >> 2] = i2;
      break L109;
     }
    }
   case 6:
    switch (i36 << 16 >> 16) {
    case 31:
     {
      HEAP32[i41 >> 2] = 6;
      i36 = _FcCharSetUnion(i16, i8) | 0;
      HEAP32[i41 + 8 >> 2] = i36;
      if (i36 | 0) break L109;
      HEAP32[i41 >> 2] = 0;
      break L109;
     }
    case 32:
     {
      HEAP32[i41 >> 2] = 6;
      i36 = _FcCharSetSubtract(i16, i8) | 0;
      HEAP32[i41 + 8 >> 2] = i36;
      if (i36 | 0) break L109;
      HEAP32[i41 >> 2] = 0;
      break L109;
     }
    default:
     {
      HEAP32[i41 >> 2] = 0;
      break L109;
     }
    }
   case 8:
    switch (i36 << 16 >> 16) {
    case 31:
     {
      HEAP32[i41 >> 2] = 8;
      i36 = _FcLangSetUnion(i15, i7) | 0;
      HEAP32[i41 + 8 >> 2] = i36;
      if (i36 | 0) break L109;
      HEAP32[i41 >> 2] = 0;
      break L109;
     }
    case 32:
     {
      HEAP32[i41 >> 2] = 8;
      i36 = _FcLangSetSubtract(i15, i7) | 0;
      HEAP32[i41 + 8 >> 2] = i36;
      if (i36 | 0) break L109;
      HEAP32[i41 >> 2] = 0;
      break L109;
     }
    default:
     {
      HEAP32[i41 >> 2] = 0;
      break L109;
     }
    }
   default:
    {
     HEAP32[i41 >> 2] = 0;
     break L109;
    }
   } else HEAP32[i41 >> 2] = 0; while (0);
   HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
   _FcValueDestroy(i39);
   HEAP32[i39 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i37 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i37 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i37 + 12 >> 2];
   _FcValueDestroy(i39);
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 35:
  {
   _FcConfigEvaluate(i13, i30, i29, i28, HEAP32[i18 + 8 >> 2] | 0);
   HEAP32[i38 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i38 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i38 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i38 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   if ((HEAP32[i38 >> 2] | 0) == 4) {
    HEAP32[i41 >> 2] = 4;
    HEAP32[i41 + 8 >> 2] = (HEAP32[i38 + 8 >> 2] | 0) == 0 & 1;
   } else HEAP32[i41 >> 2] = 0;
   HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
   _FcValueDestroy(i39);
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 37:
  {
   _FcConfigEvaluate(i14, i30, i29, i28, HEAP32[i18 + 8 >> 2] | 0);
   HEAP32[i38 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i38 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i38 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i38 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
   switch (HEAP32[i38 >> 2] | 0) {
   case 1:
    {
     HEAP32[i41 >> 2] = HEAP32[i38 >> 2];
     HEAP32[i41 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
     HEAP32[i41 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
     HEAP32[i41 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
     break;
    }
   case 2:
    {
     HEAP32[i41 >> 2] = 1;
     d1 = +HEAPF64[i38 + 8 >> 3];
     if (!(d1 >= 0.0)) {
      d12 = -d1;
      i2 = 0 - ~~(+(~~d12 | 0) == d12 ? d12 : 1.0 - d1) | 0;
     } else i2 = ~~d1;
     HEAP32[i41 + 8 >> 2] = i2;
     break;
    }
   default:
    HEAP32[i41 >> 2] = 0;
   }
   HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
   _FcValueDestroy(i39);
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 38:
  {
   _FcConfigEvaluate(i15, i30, i29, i28, HEAP32[i18 + 8 >> 2] | 0);
   HEAP32[i38 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i38 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[i38 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
   HEAP32[i38 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
   switch (HEAP32[i38 >> 2] | 0) {
   case 1:
    {
     HEAP32[i41 >> 2] = HEAP32[i38 >> 2];
     HEAP32[i41 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
     HEAP32[i41 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
     HEAP32[i41 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
     break;
    }
   case 2:
    {
     HEAP32[i41 >> 2] = 1;
     d1 = +HEAPF64[i38 + 8 >> 3];
     if (!(d1 >= 0.0)) i2 = 0 - ~~-d1 | 0; else i2 = ~~(+(~~d1 | 0) == d1 ? d1 : d1 + 1.0);
     HEAP32[i41 + 8 >> 2] = i2;
     break;
    }
   default:
    HEAP32[i41 >> 2] = 0;
   }
   HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
   _FcValueDestroy(i39);
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 39:
  {
   _FcConfigEvaluate(i16, i30, i29, i28, HEAP32[i18 + 8 >> 2] | 0);
   HEAP32[i38 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i38 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
   HEAP32[i38 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
   HEAP32[i38 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
   switch (HEAP32[i38 >> 2] | 0) {
   case 1:
    {
     HEAP32[i41 >> 2] = HEAP32[i38 >> 2];
     HEAP32[i41 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
     HEAP32[i41 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
     HEAP32[i41 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
     break;
    }
   case 2:
    {
     HEAP32[i41 >> 2] = 1;
     d1 = +HEAPF64[i38 + 8 >> 3] + .5;
     if (!(d1 >= 0.0)) {
      d12 = -d1;
      i2 = 0 - ~~(+(~~d12 | 0) == d12 ? d12 : 1.0 - d1) | 0;
     } else i2 = ~~d1;
     HEAP32[i41 + 8 >> 2] = i2;
     break;
    }
   default:
    HEAP32[i41 >> 2] = 0;
   }
   HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
   _FcValueDestroy(i39);
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 case 40:
  {
   _FcConfigEvaluate(i17, i30, i29, i28, HEAP32[i18 + 8 >> 2] | 0);
   HEAP32[i38 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i38 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i38 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
   HEAP32[i38 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
   switch (HEAP32[i38 >> 2] | 0) {
   case 1:
    {
     HEAP32[i41 >> 2] = HEAP32[i38 >> 2];
     HEAP32[i41 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
     HEAP32[i41 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
     HEAP32[i41 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
     break;
    }
   case 2:
    {
     HEAP32[i41 >> 2] = 1;
     d1 = +HEAPF64[i38 + 8 >> 3];
     if (!(d1 >= 0.0)) i2 = 0 - ~~-d1 | 0; else i2 = ~~d1;
     HEAP32[i41 + 8 >> 2] = i2;
     break;
    }
   default:
    HEAP32[i41 >> 2] = 0;
   }
   HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
   HEAP32[i39 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
   HEAP32[i39 + 8 >> 2] = HEAP32[i38 + 8 >> 2];
   HEAP32[i39 + 12 >> 2] = HEAP32[i38 + 12 >> 2];
   _FcValueDestroy(i39);
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 default:
  {
   HEAP32[i41 >> 2] = 0;
   HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i40 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i40 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i40 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   STACKTOP = i42;
   return;
  }
 } while (0);
}

function _malloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i15;
 do if (i1 >>> 0 < 245) {
  i10 = i1 >>> 0 < 11 ? 16 : i1 + 11 & -8;
  i1 = i10 >>> 3;
  i12 = HEAP32[91947] | 0;
  i2 = i12 >>> i1;
  if (i2 & 3 | 0) {
   i1 = (i2 & 1 ^ 1) + i1 | 0;
   i2 = 367828 + (i1 << 1 << 2) | 0;
   i3 = i2 + 8 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   i5 = i4 + 8 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   if ((i2 | 0) == (i6 | 0)) HEAP32[91947] = i12 & ~(1 << i1); else {
    HEAP32[i6 + 12 >> 2] = i2;
    HEAP32[i3 >> 2] = i6;
   }
   i14 = i1 << 3;
   HEAP32[i4 + 4 >> 2] = i14 | 3;
   i14 = i4 + i14 + 4 | 0;
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
   i14 = i5;
   STACKTOP = i15;
   return i14 | 0;
  }
  i11 = HEAP32[91949] | 0;
  if (i10 >>> 0 > i11 >>> 0) {
   if (i2 | 0) {
    i7 = 2 << i1;
    i1 = i2 << i1 & (i7 | 0 - i7);
    i1 = (i1 & 0 - i1) + -1 | 0;
    i7 = i1 >>> 12 & 16;
    i1 = i1 >>> i7;
    i3 = i1 >>> 5 & 8;
    i1 = i1 >>> i3;
    i5 = i1 >>> 2 & 4;
    i1 = i1 >>> i5;
    i2 = i1 >>> 1 & 2;
    i1 = i1 >>> i2;
    i4 = i1 >>> 1 & 1;
    i4 = (i3 | i7 | i5 | i2 | i4) + (i1 >>> i4) | 0;
    i1 = 367828 + (i4 << 1 << 2) | 0;
    i2 = i1 + 8 | 0;
    i5 = HEAP32[i2 >> 2] | 0;
    i7 = i5 + 8 | 0;
    i3 = HEAP32[i7 >> 2] | 0;
    if ((i1 | 0) == (i3 | 0)) {
     i2 = i12 & ~(1 << i4);
     HEAP32[91947] = i2;
    } else {
     HEAP32[i3 + 12 >> 2] = i1;
     HEAP32[i2 >> 2] = i3;
     i2 = i12;
    }
    i6 = (i4 << 3) - i10 | 0;
    HEAP32[i5 + 4 >> 2] = i10 | 3;
    i4 = i5 + i10 | 0;
    HEAP32[i4 + 4 >> 2] = i6 | 1;
    HEAP32[i4 + i6 >> 2] = i6;
    if (i11 | 0) {
     i5 = HEAP32[91952] | 0;
     i1 = i11 >>> 3;
     i3 = 367828 + (i1 << 1 << 2) | 0;
     i1 = 1 << i1;
     if (!(i2 & i1)) {
      HEAP32[91947] = i2 | i1;
      i1 = i3;
      i2 = i3 + 8 | 0;
     } else {
      i2 = i3 + 8 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
     }
     HEAP32[i2 >> 2] = i5;
     HEAP32[i1 + 12 >> 2] = i5;
     HEAP32[i5 + 8 >> 2] = i1;
     HEAP32[i5 + 12 >> 2] = i3;
    }
    HEAP32[91949] = i6;
    HEAP32[91952] = i4;
    i14 = i7;
    STACKTOP = i15;
    return i14 | 0;
   }
   i8 = HEAP32[91948] | 0;
   if (!i8) i12 = i10; else {
    i2 = (i8 & 0 - i8) + -1 | 0;
    i7 = i2 >>> 12 & 16;
    i2 = i2 >>> i7;
    i6 = i2 >>> 5 & 8;
    i2 = i2 >>> i6;
    i9 = i2 >>> 2 & 4;
    i2 = i2 >>> i9;
    i3 = i2 >>> 1 & 2;
    i2 = i2 >>> i3;
    i1 = i2 >>> 1 & 1;
    i1 = HEAP32[368092 + ((i6 | i7 | i9 | i3 | i1) + (i2 >>> i1) << 2) >> 2] | 0;
    i2 = (HEAP32[i1 + 4 >> 2] & -8) - i10 | 0;
    i3 = HEAP32[i1 + 16 + (((HEAP32[i1 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!i3) {
     i9 = i1;
     i6 = i2;
    } else {
     do {
      i7 = (HEAP32[i3 + 4 >> 2] & -8) - i10 | 0;
      i9 = i7 >>> 0 < i2 >>> 0;
      i2 = i9 ? i7 : i2;
      i1 = i9 ? i3 : i1;
      i3 = HEAP32[i3 + 16 + (((HEAP32[i3 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
     } while ((i3 | 0) != 0);
     i9 = i1;
     i6 = i2;
    }
    i7 = i9 + i10 | 0;
    if (i9 >>> 0 < i7 >>> 0) {
     i5 = HEAP32[i9 + 24 >> 2] | 0;
     i1 = HEAP32[i9 + 12 >> 2] | 0;
     do if ((i1 | 0) == (i9 | 0)) {
      i2 = i9 + 20 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i2 = i9 + 16 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i3 = 0;
        break;
       }
      }
      while (1) {
       i3 = i1 + 20 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (i4 | 0) {
        i1 = i4;
        i2 = i3;
        continue;
       }
       i3 = i1 + 16 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (!i4) break; else {
        i1 = i4;
        i2 = i3;
       }
      }
      HEAP32[i2 >> 2] = 0;
      i3 = i1;
     } else {
      i3 = HEAP32[i9 + 8 >> 2] | 0;
      HEAP32[i3 + 12 >> 2] = i1;
      HEAP32[i1 + 8 >> 2] = i3;
      i3 = i1;
     } while (0);
     do if (i5 | 0) {
      i1 = HEAP32[i9 + 28 >> 2] | 0;
      i2 = 368092 + (i1 << 2) | 0;
      if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
       HEAP32[i2 >> 2] = i3;
       if (!i3) {
        HEAP32[91948] = i8 & ~(1 << i1);
        break;
       }
      } else {
       HEAP32[i5 + 16 + (((HEAP32[i5 + 16 >> 2] | 0) != (i9 | 0) & 1) << 2) >> 2] = i3;
       if (!i3) break;
      }
      HEAP32[i3 + 24 >> 2] = i5;
      i1 = HEAP32[i9 + 16 >> 2] | 0;
      if (i1 | 0) {
       HEAP32[i3 + 16 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i3;
      }
      i1 = HEAP32[i9 + 20 >> 2] | 0;
      if (i1 | 0) {
       HEAP32[i3 + 20 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i3;
      }
     } while (0);
     if (i6 >>> 0 < 16) {
      i14 = i6 + i10 | 0;
      HEAP32[i9 + 4 >> 2] = i14 | 3;
      i14 = i9 + i14 + 4 | 0;
      HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
     } else {
      HEAP32[i9 + 4 >> 2] = i10 | 3;
      HEAP32[i7 + 4 >> 2] = i6 | 1;
      HEAP32[i7 + i6 >> 2] = i6;
      if (i11 | 0) {
       i4 = HEAP32[91952] | 0;
       i1 = i11 >>> 3;
       i3 = 367828 + (i1 << 1 << 2) | 0;
       i1 = 1 << i1;
       if (!(i12 & i1)) {
        HEAP32[91947] = i12 | i1;
        i1 = i3;
        i2 = i3 + 8 | 0;
       } else {
        i2 = i3 + 8 | 0;
        i1 = HEAP32[i2 >> 2] | 0;
       }
       HEAP32[i2 >> 2] = i4;
       HEAP32[i1 + 12 >> 2] = i4;
       HEAP32[i4 + 8 >> 2] = i1;
       HEAP32[i4 + 12 >> 2] = i3;
      }
      HEAP32[91949] = i6;
      HEAP32[91952] = i7;
     }
     i14 = i9 + 8 | 0;
     STACKTOP = i15;
     return i14 | 0;
    } else i12 = i10;
   }
  } else i12 = i10;
 } else if (i1 >>> 0 > 4294967231) i12 = -1; else {
  i1 = i1 + 11 | 0;
  i10 = i1 & -8;
  i9 = HEAP32[91948] | 0;
  if (!i9) i12 = i10; else {
   i3 = 0 - i10 | 0;
   i1 = i1 >>> 8;
   if (!i1) i7 = 0; else if (i10 >>> 0 > 16777215) i7 = 31; else {
    i12 = (i1 + 1048320 | 0) >>> 16 & 8;
    i14 = i1 << i12;
    i11 = (i14 + 520192 | 0) >>> 16 & 4;
    i14 = i14 << i11;
    i7 = (i14 + 245760 | 0) >>> 16 & 2;
    i7 = 14 - (i11 | i12 | i7) + (i14 << i7 >>> 15) | 0;
    i7 = i10 >>> (i7 + 7 | 0) & 1 | i7 << 1;
   }
   i2 = HEAP32[368092 + (i7 << 2) >> 2] | 0;
   L74 : do if (!i2) {
    i2 = 0;
    i1 = 0;
    i14 = 57;
   } else {
    i1 = 0;
    i6 = i10 << ((i7 | 0) == 31 ? 0 : 25 - (i7 >>> 1) | 0);
    i5 = 0;
    while (1) {
     i4 = (HEAP32[i2 + 4 >> 2] & -8) - i10 | 0;
     if (i4 >>> 0 < i3 >>> 0) if (!i4) {
      i1 = i2;
      i3 = 0;
      i4 = i2;
      i14 = 61;
      break L74;
     } else {
      i1 = i2;
      i3 = i4;
     }
     i4 = HEAP32[i2 + 20 >> 2] | 0;
     i2 = HEAP32[i2 + 16 + (i6 >>> 31 << 2) >> 2] | 0;
     i5 = (i4 | 0) == 0 | (i4 | 0) == (i2 | 0) ? i5 : i4;
     i4 = (i2 | 0) == 0;
     if (i4) {
      i2 = i5;
      i14 = 57;
      break;
     } else i6 = i6 << ((i4 ^ 1) & 1);
    }
   } while (0);
   if ((i14 | 0) == 57) {
    if ((i2 | 0) == 0 & (i1 | 0) == 0) {
     i1 = 2 << i7;
     i1 = i9 & (i1 | 0 - i1);
     if (!i1) {
      i12 = i10;
      break;
     }
     i12 = (i1 & 0 - i1) + -1 | 0;
     i7 = i12 >>> 12 & 16;
     i12 = i12 >>> i7;
     i6 = i12 >>> 5 & 8;
     i12 = i12 >>> i6;
     i8 = i12 >>> 2 & 4;
     i12 = i12 >>> i8;
     i11 = i12 >>> 1 & 2;
     i12 = i12 >>> i11;
     i2 = i12 >>> 1 & 1;
     i1 = 0;
     i2 = HEAP32[368092 + ((i6 | i7 | i8 | i11 | i2) + (i12 >>> i2) << 2) >> 2] | 0;
    }
    if (!i2) {
     i8 = i1;
     i6 = i3;
    } else {
     i4 = i2;
     i14 = 61;
    }
   }
   if ((i14 | 0) == 61) while (1) {
    i14 = 0;
    i2 = (HEAP32[i4 + 4 >> 2] & -8) - i10 | 0;
    i12 = i2 >>> 0 < i3 >>> 0;
    i2 = i12 ? i2 : i3;
    i1 = i12 ? i4 : i1;
    i4 = HEAP32[i4 + 16 + (((HEAP32[i4 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!i4) {
     i8 = i1;
     i6 = i2;
     break;
    } else {
     i3 = i2;
     i14 = 61;
    }
   }
   if (!i8) i12 = i10; else if (i6 >>> 0 < ((HEAP32[91949] | 0) - i10 | 0) >>> 0) {
    i7 = i8 + i10 | 0;
    if (i8 >>> 0 >= i7 >>> 0) {
     i14 = 0;
     STACKTOP = i15;
     return i14 | 0;
    }
    i5 = HEAP32[i8 + 24 >> 2] | 0;
    i1 = HEAP32[i8 + 12 >> 2] | 0;
    do if ((i1 | 0) == (i8 | 0)) {
     i2 = i8 + 20 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i2 = i8 + 16 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i1 = 0;
       break;
      }
     }
     while (1) {
      i3 = i1 + 20 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (i4 | 0) {
       i1 = i4;
       i2 = i3;
       continue;
      }
      i3 = i1 + 16 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (!i4) break; else {
       i1 = i4;
       i2 = i3;
      }
     }
     HEAP32[i2 >> 2] = 0;
    } else {
     i14 = HEAP32[i8 + 8 >> 2] | 0;
     HEAP32[i14 + 12 >> 2] = i1;
     HEAP32[i1 + 8 >> 2] = i14;
    } while (0);
    do if (!i5) i4 = i9; else {
     i2 = HEAP32[i8 + 28 >> 2] | 0;
     i3 = 368092 + (i2 << 2) | 0;
     if ((i8 | 0) == (HEAP32[i3 >> 2] | 0)) {
      HEAP32[i3 >> 2] = i1;
      if (!i1) {
       i4 = i9 & ~(1 << i2);
       HEAP32[91948] = i4;
       break;
      }
     } else {
      HEAP32[i5 + 16 + (((HEAP32[i5 + 16 >> 2] | 0) != (i8 | 0) & 1) << 2) >> 2] = i1;
      if (!i1) {
       i4 = i9;
       break;
      }
     }
     HEAP32[i1 + 24 >> 2] = i5;
     i2 = HEAP32[i8 + 16 >> 2] | 0;
     if (i2 | 0) {
      HEAP32[i1 + 16 >> 2] = i2;
      HEAP32[i2 + 24 >> 2] = i1;
     }
     i2 = HEAP32[i8 + 20 >> 2] | 0;
     if (!i2) i4 = i9; else {
      HEAP32[i1 + 20 >> 2] = i2;
      HEAP32[i2 + 24 >> 2] = i1;
      i4 = i9;
     }
    } while (0);
    do if (i6 >>> 0 < 16) {
     i14 = i6 + i10 | 0;
     HEAP32[i8 + 4 >> 2] = i14 | 3;
     i14 = i8 + i14 + 4 | 0;
     HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
    } else {
     HEAP32[i8 + 4 >> 2] = i10 | 3;
     HEAP32[i7 + 4 >> 2] = i6 | 1;
     HEAP32[i7 + i6 >> 2] = i6;
     i1 = i6 >>> 3;
     if (i6 >>> 0 < 256) {
      i3 = 367828 + (i1 << 1 << 2) | 0;
      i2 = HEAP32[91947] | 0;
      i1 = 1 << i1;
      if (!(i2 & i1)) {
       HEAP32[91947] = i2 | i1;
       i1 = i3;
       i2 = i3 + 8 | 0;
      } else {
       i2 = i3 + 8 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
      }
      HEAP32[i2 >> 2] = i7;
      HEAP32[i1 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i1;
      HEAP32[i7 + 12 >> 2] = i3;
      break;
     }
     i1 = i6 >>> 8;
     if (!i1) i1 = 0; else if (i6 >>> 0 > 16777215) i1 = 31; else {
      i13 = (i1 + 1048320 | 0) >>> 16 & 8;
      i14 = i1 << i13;
      i12 = (i14 + 520192 | 0) >>> 16 & 4;
      i14 = i14 << i12;
      i1 = (i14 + 245760 | 0) >>> 16 & 2;
      i1 = 14 - (i12 | i13 | i1) + (i14 << i1 >>> 15) | 0;
      i1 = i6 >>> (i1 + 7 | 0) & 1 | i1 << 1;
     }
     i3 = 368092 + (i1 << 2) | 0;
     HEAP32[i7 + 28 >> 2] = i1;
     i2 = i7 + 16 | 0;
     HEAP32[i2 + 4 >> 2] = 0;
     HEAP32[i2 >> 2] = 0;
     i2 = 1 << i1;
     if (!(i4 & i2)) {
      HEAP32[91948] = i4 | i2;
      HEAP32[i3 >> 2] = i7;
      HEAP32[i7 + 24 >> 2] = i3;
      HEAP32[i7 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i7;
      break;
     }
     i2 = i6 << ((i1 | 0) == 31 ? 0 : 25 - (i1 >>> 1) | 0);
     i3 = HEAP32[i3 >> 2] | 0;
     while (1) {
      if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i6 | 0)) {
       i14 = 97;
       break;
      }
      i4 = i3 + 16 + (i2 >>> 31 << 2) | 0;
      i1 = HEAP32[i4 >> 2] | 0;
      if (!i1) {
       i14 = 96;
       break;
      } else {
       i2 = i2 << 1;
       i3 = i1;
      }
     }
     if ((i14 | 0) == 96) {
      HEAP32[i4 >> 2] = i7;
      HEAP32[i7 + 24 >> 2] = i3;
      HEAP32[i7 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i7;
      break;
     } else if ((i14 | 0) == 97) {
      i13 = i3 + 8 | 0;
      i14 = HEAP32[i13 >> 2] | 0;
      HEAP32[i14 + 12 >> 2] = i7;
      HEAP32[i13 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i14;
      HEAP32[i7 + 12 >> 2] = i3;
      HEAP32[i7 + 24 >> 2] = 0;
      break;
     }
    } while (0);
    i14 = i8 + 8 | 0;
    STACKTOP = i15;
    return i14 | 0;
   } else i12 = i10;
  }
 } while (0);
 i3 = HEAP32[91949] | 0;
 if (i3 >>> 0 >= i12 >>> 0) {
  i1 = i3 - i12 | 0;
  i2 = HEAP32[91952] | 0;
  if (i1 >>> 0 > 15) {
   i14 = i2 + i12 | 0;
   HEAP32[91952] = i14;
   HEAP32[91949] = i1;
   HEAP32[i14 + 4 >> 2] = i1 | 1;
   HEAP32[i14 + i1 >> 2] = i1;
   HEAP32[i2 + 4 >> 2] = i12 | 3;
  } else {
   HEAP32[91949] = 0;
   HEAP32[91952] = 0;
   HEAP32[i2 + 4 >> 2] = i3 | 3;
   i14 = i2 + i3 + 4 | 0;
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
  }
  i14 = i2 + 8 | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i7 = HEAP32[91950] | 0;
 if (i7 >>> 0 > i12 >>> 0) {
  i11 = i7 - i12 | 0;
  HEAP32[91950] = i11;
  i14 = HEAP32[91953] | 0;
  i13 = i14 + i12 | 0;
  HEAP32[91953] = i13;
  HEAP32[i13 + 4 >> 2] = i11 | 1;
  HEAP32[i14 + 4 >> 2] = i12 | 3;
  i14 = i14 + 8 | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (!(HEAP32[92065] | 0)) {
  HEAP32[92067] = 4096;
  HEAP32[92066] = 4096;
  HEAP32[92068] = -1;
  HEAP32[92069] = -1;
  HEAP32[92070] = 0;
  HEAP32[92058] = 0;
  i1 = i13 & -16 ^ 1431655768;
  HEAP32[i13 >> 2] = i1;
  HEAP32[92065] = i1;
  i1 = 4096;
 } else i1 = HEAP32[92067] | 0;
 i8 = i12 + 48 | 0;
 i9 = i12 + 47 | 0;
 i6 = i1 + i9 | 0;
 i4 = 0 - i1 | 0;
 i10 = i6 & i4;
 if (i10 >>> 0 <= i12 >>> 0) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[92057] | 0;
 if (i1 | 0) {
  i11 = HEAP32[92055] | 0;
  i13 = i11 + i10 | 0;
  if (i13 >>> 0 <= i11 >>> 0 | i13 >>> 0 > i1 >>> 0) {
   i14 = 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 }
 L167 : do if (!(HEAP32[92058] & 4)) {
  i2 = HEAP32[91953] | 0;
  L169 : do if (!i2) i14 = 118; else {
   i3 = 368236;
   while (1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (i1 >>> 0 <= i2 >>> 0) {
     i5 = i3 + 4 | 0;
     if ((i1 + (HEAP32[i5 >> 2] | 0) | 0) >>> 0 > i2 >>> 0) break;
    }
    i1 = HEAP32[i3 + 8 >> 2] | 0;
    if (!i1) {
     i14 = 118;
     break L169;
    } else i3 = i1;
   }
   i1 = i6 - i7 & i4;
   if (i1 >>> 0 < 2147483647) {
    i4 = _sbrk(i1 | 0) | 0;
    if ((i4 | 0) == ((HEAP32[i3 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0)) {
     if ((i4 | 0) != (-1 | 0)) {
      i7 = i1;
      i14 = 135;
      break L167;
     }
    } else i14 = 126;
   } else i1 = 0;
  } while (0);
  do if ((i14 | 0) == 118) {
   i4 = _sbrk(0) | 0;
   if ((i4 | 0) == (-1 | 0)) i1 = 0; else {
    i1 = i4;
    i2 = HEAP32[92066] | 0;
    i3 = i2 + -1 | 0;
    i1 = ((i3 & i1 | 0) == 0 ? 0 : (i3 + i1 & 0 - i2) - i1 | 0) + i10 | 0;
    i2 = HEAP32[92055] | 0;
    i3 = i1 + i2 | 0;
    if (i1 >>> 0 > i12 >>> 0 & i1 >>> 0 < 2147483647) {
     i5 = HEAP32[92057] | 0;
     if (i5 | 0) if (i3 >>> 0 <= i2 >>> 0 | i3 >>> 0 > i5 >>> 0) {
      i1 = 0;
      break;
     }
     i2 = _sbrk(i1 | 0) | 0;
     if ((i2 | 0) == (i4 | 0)) {
      i7 = i1;
      i14 = 135;
      break L167;
     } else {
      i4 = i2;
      i14 = 126;
     }
    } else i1 = 0;
   }
  } while (0);
  do if ((i14 | 0) == 126) {
   i3 = 0 - i1 | 0;
   if (!(i8 >>> 0 > i1 >>> 0 & (i1 >>> 0 < 2147483647 & (i4 | 0) != (-1 | 0)))) if ((i4 | 0) == (-1 | 0)) {
    i1 = 0;
    break;
   } else {
    i7 = i1;
    i14 = 135;
    break L167;
   }
   i2 = HEAP32[92067] | 0;
   i2 = i9 - i1 + i2 & 0 - i2;
   if (i2 >>> 0 >= 2147483647) {
    i7 = i1;
    i14 = 135;
    break L167;
   }
   if ((_sbrk(i2 | 0) | 0) == (-1 | 0)) {
    _sbrk(i3 | 0) | 0;
    i1 = 0;
    break;
   } else {
    i7 = i2 + i1 | 0;
    i14 = 135;
    break L167;
   }
  } while (0);
  HEAP32[92058] = HEAP32[92058] | 4;
  i14 = 133;
 } else {
  i1 = 0;
  i14 = 133;
 } while (0);
 if ((i14 | 0) == 133) if (i10 >>> 0 < 2147483647) {
  i4 = _sbrk(i10 | 0) | 0;
  i13 = _sbrk(0) | 0;
  i2 = i13 - i4 | 0;
  i3 = i2 >>> 0 > (i12 + 40 | 0) >>> 0;
  if (!((i4 | 0) == (-1 | 0) | i3 ^ 1 | i4 >>> 0 < i13 >>> 0 & ((i4 | 0) != (-1 | 0) & (i13 | 0) != (-1 | 0)) ^ 1)) {
   i7 = i3 ? i2 : i1;
   i14 = 135;
  }
 }
 if ((i14 | 0) == 135) {
  i1 = (HEAP32[92055] | 0) + i7 | 0;
  HEAP32[92055] = i1;
  if (i1 >>> 0 > (HEAP32[92056] | 0) >>> 0) HEAP32[92056] = i1;
  i9 = HEAP32[91953] | 0;
  do if (!i9) {
   i14 = HEAP32[91951] | 0;
   if ((i14 | 0) == 0 | i4 >>> 0 < i14 >>> 0) HEAP32[91951] = i4;
   HEAP32[92059] = i4;
   HEAP32[92060] = i7;
   HEAP32[92062] = 0;
   HEAP32[91956] = HEAP32[92065];
   HEAP32[91955] = -1;
   i1 = 0;
   do {
    i14 = 367828 + (i1 << 1 << 2) | 0;
    HEAP32[i14 + 12 >> 2] = i14;
    HEAP32[i14 + 8 >> 2] = i14;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 32);
   i14 = i4 + 8 | 0;
   i14 = (i14 & 7 | 0) == 0 ? 0 : 0 - i14 & 7;
   i13 = i4 + i14 | 0;
   i14 = i7 + -40 - i14 | 0;
   HEAP32[91953] = i13;
   HEAP32[91950] = i14;
   HEAP32[i13 + 4 >> 2] = i14 | 1;
   HEAP32[i13 + i14 + 4 >> 2] = 40;
   HEAP32[91954] = HEAP32[92069];
  } else {
   i1 = 368236;
   do {
    i2 = HEAP32[i1 >> 2] | 0;
    i3 = i1 + 4 | 0;
    i5 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (i2 + i5 | 0)) {
     i14 = 145;
     break;
    }
    i1 = HEAP32[i1 + 8 >> 2] | 0;
   } while ((i1 | 0) != 0);
   if ((i14 | 0) == 145) if (!(HEAP32[i1 + 12 >> 2] & 8)) if (i9 >>> 0 < i4 >>> 0 & i9 >>> 0 >= i2 >>> 0) {
    HEAP32[i3 >> 2] = i5 + i7;
    i14 = i9 + 8 | 0;
    i14 = (i14 & 7 | 0) == 0 ? 0 : 0 - i14 & 7;
    i13 = i9 + i14 | 0;
    i14 = (HEAP32[91950] | 0) + (i7 - i14) | 0;
    HEAP32[91953] = i13;
    HEAP32[91950] = i14;
    HEAP32[i13 + 4 >> 2] = i14 | 1;
    HEAP32[i13 + i14 + 4 >> 2] = 40;
    HEAP32[91954] = HEAP32[92069];
    break;
   }
   if (i4 >>> 0 < (HEAP32[91951] | 0) >>> 0) HEAP32[91951] = i4;
   i2 = i4 + i7 | 0;
   i1 = 368236;
   do {
    if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) {
     i14 = 153;
     break;
    }
    i1 = HEAP32[i1 + 8 >> 2] | 0;
   } while ((i1 | 0) != 0);
   if ((i14 | 0) == 153) if (!(HEAP32[i1 + 12 >> 2] & 8)) {
    HEAP32[i1 >> 2] = i4;
    i11 = i1 + 4 | 0;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i7;
    i11 = i4 + 8 | 0;
    i11 = i4 + ((i11 & 7 | 0) == 0 ? 0 : 0 - i11 & 7) | 0;
    i1 = i2 + 8 | 0;
    i1 = i2 + ((i1 & 7 | 0) == 0 ? 0 : 0 - i1 & 7) | 0;
    i10 = i11 + i12 | 0;
    i8 = i1 - i11 - i12 | 0;
    HEAP32[i11 + 4 >> 2] = i12 | 3;
    do if ((i1 | 0) == (i9 | 0)) {
     i14 = (HEAP32[91950] | 0) + i8 | 0;
     HEAP32[91950] = i14;
     HEAP32[91953] = i10;
     HEAP32[i10 + 4 >> 2] = i14 | 1;
    } else {
     if ((i1 | 0) == (HEAP32[91952] | 0)) {
      i14 = (HEAP32[91949] | 0) + i8 | 0;
      HEAP32[91949] = i14;
      HEAP32[91952] = i10;
      HEAP32[i10 + 4 >> 2] = i14 | 1;
      HEAP32[i10 + i14 >> 2] = i14;
      break;
     }
     i2 = HEAP32[i1 + 4 >> 2] | 0;
     if ((i2 & 3 | 0) == 1) {
      i7 = i2 & -8;
      i4 = i2 >>> 3;
      L237 : do if (i2 >>> 0 < 256) {
       i2 = HEAP32[i1 + 8 >> 2] | 0;
       i3 = HEAP32[i1 + 12 >> 2] | 0;
       if ((i3 | 0) == (i2 | 0)) {
        HEAP32[91947] = HEAP32[91947] & ~(1 << i4);
        break;
       } else {
        HEAP32[i2 + 12 >> 2] = i3;
        HEAP32[i3 + 8 >> 2] = i2;
        break;
       }
      } else {
       i6 = HEAP32[i1 + 24 >> 2] | 0;
       i2 = HEAP32[i1 + 12 >> 2] | 0;
       do if ((i2 | 0) == (i1 | 0)) {
        i4 = i1 + 16 | 0;
        i3 = i4 + 4 | 0;
        i2 = HEAP32[i3 >> 2] | 0;
        if (!i2) {
         i2 = HEAP32[i4 >> 2] | 0;
         if (!i2) {
          i2 = 0;
          break;
         } else i3 = i4;
        }
        while (1) {
         i4 = i2 + 20 | 0;
         i5 = HEAP32[i4 >> 2] | 0;
         if (i5 | 0) {
          i2 = i5;
          i3 = i4;
          continue;
         }
         i4 = i2 + 16 | 0;
         i5 = HEAP32[i4 >> 2] | 0;
         if (!i5) break; else {
          i2 = i5;
          i3 = i4;
         }
        }
        HEAP32[i3 >> 2] = 0;
       } else {
        i14 = HEAP32[i1 + 8 >> 2] | 0;
        HEAP32[i14 + 12 >> 2] = i2;
        HEAP32[i2 + 8 >> 2] = i14;
       } while (0);
       if (!i6) break;
       i3 = HEAP32[i1 + 28 >> 2] | 0;
       i4 = 368092 + (i3 << 2) | 0;
       do if ((i1 | 0) == (HEAP32[i4 >> 2] | 0)) {
        HEAP32[i4 >> 2] = i2;
        if (i2 | 0) break;
        HEAP32[91948] = HEAP32[91948] & ~(1 << i3);
        break L237;
       } else {
        HEAP32[i6 + 16 + (((HEAP32[i6 + 16 >> 2] | 0) != (i1 | 0) & 1) << 2) >> 2] = i2;
        if (!i2) break L237;
       } while (0);
       HEAP32[i2 + 24 >> 2] = i6;
       i3 = i1 + 16 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (i4 | 0) {
        HEAP32[i2 + 16 >> 2] = i4;
        HEAP32[i4 + 24 >> 2] = i2;
       }
       i3 = HEAP32[i3 + 4 >> 2] | 0;
       if (!i3) break;
       HEAP32[i2 + 20 >> 2] = i3;
       HEAP32[i3 + 24 >> 2] = i2;
      } while (0);
      i1 = i1 + i7 | 0;
      i5 = i7 + i8 | 0;
     } else i5 = i8;
     i1 = i1 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -2;
     HEAP32[i10 + 4 >> 2] = i5 | 1;
     HEAP32[i10 + i5 >> 2] = i5;
     i1 = i5 >>> 3;
     if (i5 >>> 0 < 256) {
      i3 = 367828 + (i1 << 1 << 2) | 0;
      i2 = HEAP32[91947] | 0;
      i1 = 1 << i1;
      if (!(i2 & i1)) {
       HEAP32[91947] = i2 | i1;
       i1 = i3;
       i2 = i3 + 8 | 0;
      } else {
       i2 = i3 + 8 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
      }
      HEAP32[i2 >> 2] = i10;
      HEAP32[i1 + 12 >> 2] = i10;
      HEAP32[i10 + 8 >> 2] = i1;
      HEAP32[i10 + 12 >> 2] = i3;
      break;
     }
     i1 = i5 >>> 8;
     do if (!i1) i1 = 0; else {
      if (i5 >>> 0 > 16777215) {
       i1 = 31;
       break;
      }
      i13 = (i1 + 1048320 | 0) >>> 16 & 8;
      i14 = i1 << i13;
      i12 = (i14 + 520192 | 0) >>> 16 & 4;
      i14 = i14 << i12;
      i1 = (i14 + 245760 | 0) >>> 16 & 2;
      i1 = 14 - (i12 | i13 | i1) + (i14 << i1 >>> 15) | 0;
      i1 = i5 >>> (i1 + 7 | 0) & 1 | i1 << 1;
     } while (0);
     i4 = 368092 + (i1 << 2) | 0;
     HEAP32[i10 + 28 >> 2] = i1;
     i2 = i10 + 16 | 0;
     HEAP32[i2 + 4 >> 2] = 0;
     HEAP32[i2 >> 2] = 0;
     i2 = HEAP32[91948] | 0;
     i3 = 1 << i1;
     if (!(i2 & i3)) {
      HEAP32[91948] = i2 | i3;
      HEAP32[i4 >> 2] = i10;
      HEAP32[i10 + 24 >> 2] = i4;
      HEAP32[i10 + 12 >> 2] = i10;
      HEAP32[i10 + 8 >> 2] = i10;
      break;
     }
     i2 = i5 << ((i1 | 0) == 31 ? 0 : 25 - (i1 >>> 1) | 0);
     i3 = HEAP32[i4 >> 2] | 0;
     while (1) {
      if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
       i14 = 194;
       break;
      }
      i4 = i3 + 16 + (i2 >>> 31 << 2) | 0;
      i1 = HEAP32[i4 >> 2] | 0;
      if (!i1) {
       i14 = 193;
       break;
      } else {
       i2 = i2 << 1;
       i3 = i1;
      }
     }
     if ((i14 | 0) == 193) {
      HEAP32[i4 >> 2] = i10;
      HEAP32[i10 + 24 >> 2] = i3;
      HEAP32[i10 + 12 >> 2] = i10;
      HEAP32[i10 + 8 >> 2] = i10;
      break;
     } else if ((i14 | 0) == 194) {
      i13 = i3 + 8 | 0;
      i14 = HEAP32[i13 >> 2] | 0;
      HEAP32[i14 + 12 >> 2] = i10;
      HEAP32[i13 >> 2] = i10;
      HEAP32[i10 + 8 >> 2] = i14;
      HEAP32[i10 + 12 >> 2] = i3;
      HEAP32[i10 + 24 >> 2] = 0;
      break;
     }
    } while (0);
    i14 = i11 + 8 | 0;
    STACKTOP = i15;
    return i14 | 0;
   }
   i2 = 368236;
   while (1) {
    i1 = HEAP32[i2 >> 2] | 0;
    if (i1 >>> 0 <= i9 >>> 0) {
     i3 = i1 + (HEAP32[i2 + 4 >> 2] | 0) | 0;
     if (i3 >>> 0 > i9 >>> 0) break;
    }
    i2 = HEAP32[i2 + 8 >> 2] | 0;
   }
   i6 = i3 + -47 | 0;
   i2 = i6 + 8 | 0;
   i2 = i6 + ((i2 & 7 | 0) == 0 ? 0 : 0 - i2 & 7) | 0;
   i6 = i9 + 16 | 0;
   i2 = i2 >>> 0 < i6 >>> 0 ? i9 : i2;
   i1 = i2 + 8 | 0;
   i5 = i4 + 8 | 0;
   i5 = (i5 & 7 | 0) == 0 ? 0 : 0 - i5 & 7;
   i14 = i4 + i5 | 0;
   i5 = i7 + -40 - i5 | 0;
   HEAP32[91953] = i14;
   HEAP32[91950] = i5;
   HEAP32[i14 + 4 >> 2] = i5 | 1;
   HEAP32[i14 + i5 + 4 >> 2] = 40;
   HEAP32[91954] = HEAP32[92069];
   i5 = i2 + 4 | 0;
   HEAP32[i5 >> 2] = 27;
   HEAP32[i1 >> 2] = HEAP32[92059];
   HEAP32[i1 + 4 >> 2] = HEAP32[92060];
   HEAP32[i1 + 8 >> 2] = HEAP32[92061];
   HEAP32[i1 + 12 >> 2] = HEAP32[92062];
   HEAP32[92059] = i4;
   HEAP32[92060] = i7;
   HEAP32[92062] = 0;
   HEAP32[92061] = i1;
   i1 = i2 + 24 | 0;
   do {
    i14 = i1;
    i1 = i1 + 4 | 0;
    HEAP32[i1 >> 2] = 7;
   } while ((i14 + 8 | 0) >>> 0 < i3 >>> 0);
   if ((i2 | 0) != (i9 | 0)) {
    i7 = i2 - i9 | 0;
    HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -2;
    HEAP32[i9 + 4 >> 2] = i7 | 1;
    HEAP32[i2 >> 2] = i7;
    i1 = i7 >>> 3;
    if (i7 >>> 0 < 256) {
     i3 = 367828 + (i1 << 1 << 2) | 0;
     i2 = HEAP32[91947] | 0;
     i1 = 1 << i1;
     if (!(i2 & i1)) {
      HEAP32[91947] = i2 | i1;
      i1 = i3;
      i2 = i3 + 8 | 0;
     } else {
      i2 = i3 + 8 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
     }
     HEAP32[i2 >> 2] = i9;
     HEAP32[i1 + 12 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i1;
     HEAP32[i9 + 12 >> 2] = i3;
     break;
    }
    i1 = i7 >>> 8;
    if (!i1) i3 = 0; else if (i7 >>> 0 > 16777215) i3 = 31; else {
     i13 = (i1 + 1048320 | 0) >>> 16 & 8;
     i14 = i1 << i13;
     i11 = (i14 + 520192 | 0) >>> 16 & 4;
     i14 = i14 << i11;
     i3 = (i14 + 245760 | 0) >>> 16 & 2;
     i3 = 14 - (i11 | i13 | i3) + (i14 << i3 >>> 15) | 0;
     i3 = i7 >>> (i3 + 7 | 0) & 1 | i3 << 1;
    }
    i4 = 368092 + (i3 << 2) | 0;
    HEAP32[i9 + 28 >> 2] = i3;
    HEAP32[i9 + 20 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
    i1 = HEAP32[91948] | 0;
    i2 = 1 << i3;
    if (!(i1 & i2)) {
     HEAP32[91948] = i1 | i2;
     HEAP32[i4 >> 2] = i9;
     HEAP32[i9 + 24 >> 2] = i4;
     HEAP32[i9 + 12 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i9;
     break;
    }
    i2 = i7 << ((i3 | 0) == 31 ? 0 : 25 - (i3 >>> 1) | 0);
    i3 = HEAP32[i4 >> 2] | 0;
    while (1) {
     if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i7 | 0)) {
      i14 = 216;
      break;
     }
     i4 = i3 + 16 + (i2 >>> 31 << 2) | 0;
     i1 = HEAP32[i4 >> 2] | 0;
     if (!i1) {
      i14 = 215;
      break;
     } else {
      i2 = i2 << 1;
      i3 = i1;
     }
    }
    if ((i14 | 0) == 215) {
     HEAP32[i4 >> 2] = i9;
     HEAP32[i9 + 24 >> 2] = i3;
     HEAP32[i9 + 12 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i9;
     break;
    } else if ((i14 | 0) == 216) {
     i13 = i3 + 8 | 0;
     i14 = HEAP32[i13 >> 2] | 0;
     HEAP32[i14 + 12 >> 2] = i9;
     HEAP32[i13 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i14;
     HEAP32[i9 + 12 >> 2] = i3;
     HEAP32[i9 + 24 >> 2] = 0;
     break;
    }
   }
  } while (0);
  i1 = HEAP32[91950] | 0;
  if (i1 >>> 0 > i12 >>> 0) {
   i11 = i1 - i12 | 0;
   HEAP32[91950] = i11;
   i14 = HEAP32[91953] | 0;
   i13 = i14 + i12 | 0;
   HEAP32[91953] = i13;
   HEAP32[i13 + 4 >> 2] = i11 | 1;
   HEAP32[i14 + 4 >> 2] = i12 | 3;
   i14 = i14 + 8 | 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 }
 i14 = ___errno_location() | 0;
 HEAP32[i14 >> 2] = 12;
 i14 = 0;
 STACKTOP = i15;
 return i14 | 0;
}

function _Render_Single_Pass(i25, i1) {
 i25 = i25 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0;
 i53 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i36 = i53 + 14 | 0;
 i47 = i53 + 12 | 0;
 i49 = i53 + 8 | 0;
 i50 = i53 + 4 | 0;
 i51 = i53;
 i52 = i25 + 1020 | 0;
 i2 = HEAP32[i52 >> 2] | 0;
 if ((i2 | 0) <= -1) {
  i52 = 0;
  STACKTOP = i53;
  return i52 | 0;
 }
 i26 = i25 + 4 | 0;
 i27 = i25 + 80 | 0;
 i28 = i25 + 76 | 0;
 i29 = i25 + 28 | 0;
 i30 = i25 + 40 | 0;
 i31 = i25 + 44 | 0;
 i32 = i25 + 92 | 0;
 i33 = i25 + 87 | 0;
 i34 = i25 + 86 | 0;
 i35 = i25 + 32 | 0;
 i37 = i25 + 36 | 0;
 i38 = i25 + 48 | 0;
 i39 = i25 + 88 | 0;
 i40 = i25 + 84 | 0;
 i41 = i25 + 128 | 0;
 i42 = i25 + 100 | 0;
 i43 = i25 + 96 | 0;
 i44 = i25 + 140 | 0;
 i45 = i25 + 132 | 0;
 i46 = i25 + 24 | 0;
 i48 = i25 + 8 | 0;
 i16 = i1 << 24 >> 24 != 0;
 i17 = i25 + 136 | 0;
 i18 = i25 + 68 | 0;
 i19 = i25 + 72 | 0;
 i20 = i25 + 176 | 0;
 i21 = i25 + 160 | 0;
 i22 = i25 + 172 | 0;
 i23 = i25 + 168 | 0;
 i24 = i25 + 164 | 0;
 i1 = i2;
 L4 : while (1) {
  i2 = HEAP32[i26 >> 2] | 0;
  i14 = Math_imul(HEAP16[i25 + 956 + (i1 << 2) + 2 >> 1] | 0, i2) | 0;
  HEAP32[i27 >> 2] = i14;
  i2 = Math_imul(HEAP16[i25 + 956 + (i1 << 2) >> 1] | 0, i2) | 0;
  HEAP32[i28 >> 2] = i2;
  i2 = HEAP32[i29 >> 2] | 0;
  HEAP32[i30 >> 2] = i2;
  HEAP32[i31 >> 2] = 0;
  HEAP32[i32 >> 2] = 0;
  HEAP8[i33 >> 0] = 0;
  HEAP8[i34 >> 0] = 0;
  i1 = (HEAP32[i35 >> 2] | 0) + -32 | 0;
  HEAP32[i37 >> 2] = i1;
  HEAP32[i38 >> 2] = 0;
  HEAP32[i39 >> 2] = i2;
  HEAP32[i2 + 8 >> 2] = i2;
  HEAP16[i40 >> 1] = 0;
  L6 : do if ((HEAP16[i41 >> 1] | 0) > 0) {
   i9 = 0;
   i13 = 0;
   i8 = HEAP32[i44 >> 2] | 0;
   i10 = HEAP32[i48 >> 2] | 0;
   while (1) {
    HEAP32[i42 >> 2] = 0;
    HEAP32[i43 >> 2] = 0;
    i14 = HEAP32[i45 >> 2] | 0;
    i7 = HEAPU16[i8 + (i13 << 1) >> 1] | 0;
    i4 = i14 + (i7 << 3) | 0;
    i1 = i9 & 65535;
    i9 = i14 + (i1 << 3) | 0;
    i2 = HEAP32[i46 >> 2] | 0;
    i3 = (HEAP32[i9 >> 2] << i2) - i10 | 0;
    i6 = (HEAP32[i14 + (i1 << 3) + 4 >> 2] << i2) - i10 | 0;
    i5 = (HEAP32[i4 >> 2] << i2) - i10 | 0;
    i2 = (HEAP32[i14 + (i7 << 3) + 4 >> 2] << i2) - i10 | 0;
    i8 = i16 ? i6 : i3;
    i10 = i16 ? i3 : i6;
    i6 = i16 ? i2 : i5;
    i2 = i16 ? i5 : i2;
    i5 = HEAP32[i17 >> 2] | 0;
    i1 = i5 + i1 | 0;
    i3 = HEAP8[i1 >> 0] | 0;
    if (i3 & 4) {
     HEAP8[i20 >> 0] = (i3 & 255) >>> 5;
     i3 = HEAP8[i1 >> 0] | 0;
    }
    switch (i3 & 3) {
    case 2:
     {
      i15 = 35;
      break L4;
     }
    case 0:
     {
      if ((HEAP8[i5 + i7 >> 0] & 3) == 1) {
       i4 = i4 + -8 | 0;
       i3 = i6;
      } else {
       i3 = (i6 + i8 | 0) / 2 | 0;
       i2 = (i2 + i10 | 0) / 2 | 0;
      }
      i5 = i9 + -8 | 0;
      i1 = i1 + -1 | 0;
      i12 = i3;
      i11 = i2;
      break;
     }
    default:
     {
      i5 = i9;
      i12 = i8;
      i11 = i10;
     }
    }
    HEAP32[i18 >> 2] = i12;
    HEAP32[i19 >> 2] = i11;
    L20 : do if (i5 >>> 0 < i4 >>> 0) {
     L21 : while (1) {
      i3 = i5 + 8 | 0;
      i6 = i1 + 1 | 0;
      L23 : do switch (HEAP8[i6 >> 0] & 3) {
      case 1:
       {
        i9 = HEAP32[i46 >> 2] | 0;
        i14 = HEAP32[i48 >> 2] | 0;
        i10 = (HEAP32[i3 >> 2] << i9) - i14 | 0;
        i14 = (HEAP32[i5 + 12 >> 2] << i9) - i14 | 0;
        if (!((_Line_To(i25, i16 ? i14 : i10, i16 ? i10 : i14) | 0) << 24 >> 24)) {
         i2 = i3;
         i1 = i6;
        } else {
         i15 = 83;
         break L6;
        }
        break;
       }
      case 0:
       {
        i14 = HEAP32[i46 >> 2] | 0;
        i1 = HEAP32[i48 >> 2] | 0;
        i2 = (HEAP32[i3 >> 2] << i14) - i1 | 0;
        i1 = (HEAP32[i5 + 12 >> 2] << i14) - i1 | 0;
        if (i16) {
         i5 = i2;
         while (1) {
          if (i3 >>> 0 >= i4 >>> 0) {
           i2 = i1;
           i1 = i5;
           break L21;
          }
          i2 = i3 + 8 | 0;
          i8 = i6 + 1 | 0;
          i10 = HEAP32[i46 >> 2] | 0;
          i14 = HEAP32[i48 >> 2] | 0;
          i7 = (HEAP32[i2 >> 2] << i10) - i14 | 0;
          i3 = (HEAP32[i3 + 12 >> 2] << i10) - i14 | 0;
          switch (HEAP8[i8 >> 0] & 3) {
          case 1:
           {
            i6 = (_Conic_To(i25, i1, i5, i3, i7) | 0) << 24 >> 24 == 0;
            i6 = i6 ? 7 : 12;
            break;
           }
          case 0:
           {
            i14 = (_Conic_To(i25, i1, i5, (i3 + i1 | 0) / 2 | 0, (i7 + i5 | 0) / 2 | 0) | 0) << 24 >> 24 == 0;
            i6 = i14 ? 15 : 12;
            i1 = i14 ? i3 : i1;
            i5 = i14 ? i7 : i5;
            break;
           }
          default:
           {
            i15 = 35;
            break L4;
           }
          }
          switch (i6 & 15) {
          case 6:
           {
            i15 = 35;
            break L4;
           }
          case 12:
           {
            i15 = 83;
            break L6;
           }
          case 7:
           {
            i1 = i8;
            break L23;
           }
          case 15:
           {
            i3 = i2;
            i6 = i8;
            break;
           }
          default:
           break L20;
          }
         }
        } else {
         i5 = i6;
         while (1) {
          if (i3 >>> 0 >= i4 >>> 0) break L21;
          i7 = i3 + 8 | 0;
          i8 = i5 + 1 | 0;
          i10 = HEAP32[i46 >> 2] | 0;
          i14 = HEAP32[i48 >> 2] | 0;
          i5 = (HEAP32[i7 >> 2] << i10) - i14 | 0;
          i3 = (HEAP32[i3 + 12 >> 2] << i10) - i14 | 0;
          switch (HEAP8[i8 >> 0] & 3) {
          case 1:
           {
            i6 = (_Conic_To(i25, i2, i1, i5, i3) | 0) << 24 >> 24 == 0;
            i6 = i6 ? 7 : 12;
            break;
           }
          case 0:
           {
            i14 = (_Conic_To(i25, i2, i1, (i5 + i2 | 0) / 2 | 0, (i3 + i1 | 0) / 2 | 0) | 0) << 24 >> 24 == 0;
            i6 = i14 ? 15 : 12;
            i2 = i14 ? i5 : i2;
            i1 = i14 ? i3 : i1;
            break;
           }
          default:
           {
            i15 = 35;
            break L4;
           }
          }
          switch (i6 & 15) {
          case 6:
           {
            i15 = 35;
            break L4;
           }
          case 12:
           {
            i15 = 83;
            break L6;
           }
          case 7:
           {
            i2 = i7;
            i1 = i8;
            break L23;
           }
          case 15:
           {
            i3 = i7;
            i5 = i8;
            break;
           }
          default:
           break L20;
          }
         }
        }
       }
      default:
       {
        if ((i5 + 16 | 0) >>> 0 > i4 >>> 0) {
         i15 = 35;
         break L4;
        }
        if ((HEAP8[i1 + 2 >> 0] & 3) != 2) {
         i15 = 35;
         break L4;
        }
        i10 = i5 + 24 | 0;
        i2 = HEAP32[i46 >> 2] | 0;
        i3 = HEAP32[i48 >> 2] | 0;
        i8 = (HEAP32[i5 + 8 >> 2] << i2) - i3 | 0;
        i7 = (HEAP32[i5 + 12 >> 2] << i2) - i3 | 0;
        i14 = (HEAP32[i5 + 16 >> 2] << i2) - i3 | 0;
        i9 = (HEAP32[i5 + 20 >> 2] << i2) - i3 | 0;
        i6 = i16 ? i7 : i8;
        i7 = i16 ? i8 : i7;
        i8 = i16 ? i9 : i14;
        i9 = i16 ? i14 : i9;
        if (i10 >>> 0 > i4 >>> 0) {
         i3 = 18;
         i2 = _Cubic_To(i25, i6, i7, i8, i9, i12, i11) | 0;
        } else {
         i14 = (HEAP32[i10 >> 2] << i2) - i3 | 0;
         i2 = (HEAP32[i5 + 28 >> 2] << i2) - i3 | 0;
         i3 = 7;
         i2 = _Cubic_To(i25, i6, i7, i8, i9, i16 ? i2 : i14, i16 ? i14 : i2) | 0;
        }
        switch ((i2 << 24 >> 24 == 0 ? i3 : 12) & 31) {
        case 6:
         {
          i15 = 35;
          break L4;
         }
        case 12:
         {
          i15 = 83;
          break L6;
         }
        case 7:
         {
          i2 = i10;
          i1 = i1 + 3 | 0;
          break;
         }
        default:
         break L20;
        }
       }
      } while (0);
      if (i2 >>> 0 < i4 >>> 0) i5 = i2; else {
       i15 = 34;
       break L20;
      }
     }
     if ((_Conic_To(i25, i2, i1, i12, i11) | 0) << 24 >> 24) {
      i15 = 83;
      break L6;
     }
    } else i15 = 34; while (0);
    if ((i15 | 0) == 34) {
     i15 = 0;
     if ((_Line_To(i25, i12, i11) | 0) << 24 >> 24) {
      i15 = 83;
      break L6;
     }
    }
    i8 = HEAP32[i44 >> 2] | 0;
    i9 = (HEAPU16[i8 + (i13 << 1) >> 1] | 0) + 1 | 0;
    i4 = HEAP32[i19 >> 2] | 0;
    i3 = HEAP32[i26 >> 2] | 0;
    i5 = i3 + -1 | 0;
    i1 = i5 & i4;
    if (!i1) if ((i4 | 0) >= (HEAP32[i28 >> 2] | 0)) if ((i4 | 0) <= (HEAP32[i27 >> 2] | 0)) {
     i2 = HEAP32[i43 >> 2] | 0;
     if (i2 | 0) if (!((HEAP16[(HEAP32[i39 >> 2] | 0) + 12 >> 1] ^ HEAP16[i2 + 12 >> 1]) & 8)) HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + -4;
    }
    i7 = HEAP32[i39 >> 2] | 0;
    i2 = HEAP32[i30 >> 2] | 0;
    i14 = HEAP32[i7 + 8 >> 2] | 0;
    i10 = HEAP32[i48 >> 2] | 0;
    i3 = 0 - i3 | 0;
    i6 = i14;
    if ((i2 | 0) == (i14 | 0)) i15 = 44; else if (!(HEAP16[i7 + 12 >> 1] & 8)) i15 = 44;
    if ((i15 | 0) == 44) {
     i15 = 0;
     i1 = (i5 + i4 & i3) - i4 | 0;
    }
    i3 = (i1 | 0) < (i10 | 0);
    i1 = i2 - i6 | 0;
    if ((i1 | 0) < 0) {
     i15 = 46;
     break L4;
    }
    if (i1) {
     HEAP32[i7 + 16 >> 2] = i1 >> 2;
     if (!i3) {
      i14 = i7 + 12 | 0;
      i12 = HEAPU16[i14 >> 1] | 0;
      HEAP16[i14 >> 1] = (i12 << 1 & 16 ^ 16) + 16 | i12;
     }
     HEAP32[i39 >> 2] = i2;
     i14 = i2 + 32 | 0;
     HEAP32[i30 >> 2] = i14;
     HEAP32[i2 + 16 >> 2] = 0;
     HEAP32[i2 + 8 >> 2] = i14;
     HEAP32[i7 + 28 >> 2] = i2;
     HEAP16[i40 >> 1] = (HEAP16[i40 >> 1] | 0) + 1 << 16 >> 16;
     i2 = i14;
    }
    i1 = HEAP32[i37 >> 2] | 0;
    if (i2 >>> 0 >= i1 >>> 0) break;
    HEAP8[i33 >> 0] = 0;
    i3 = HEAP32[i43 >> 2] | 0;
    if (i3 | 0) HEAP32[i7 + 28 >> 2] = i3;
    i13 = i13 + 1 | 0;
    if ((i13 | 0) >= (HEAP16[i41 >> 1] | 0)) {
     i15 = 55;
     break;
    }
   }
   L76 : do if ((i15 | 0) == 55) {
    i4 = HEAP16[i40 >> 1] | 0;
    i3 = HEAP32[i32 >> 2] | 0;
    if (!((i4 & 65535) > 1 & (i3 | 0) != 0)) {
     i15 = 81;
     break L6;
    }
    i14 = HEAP32[i35 >> 2] | 0;
    i8 = i3;
    while (1) {
     i5 = HEAP32[i8 + 16 >> 2] | 0;
     if (i4 << 16 >> 16 == 1) i13 = 0; else i13 = (HEAP32[i8 + 8 >> 2] | 0) + (i5 << 2) | 0;
     HEAP32[i8 + 4 >> 2] = i13;
     i6 = i8 + 20 | 0;
     i7 = HEAP32[i6 >> 2] | 0;
     if (!(HEAP16[i8 + 12 >> 1] & 8)) {
      i15 = i7 - i5 + 1 | 0;
      HEAP32[i6 >> 2] = i15;
      i12 = i8 + 8 | 0;
      HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (i5 + -1 << 2);
      i12 = i7;
      i5 = i15;
     } else {
      i12 = i5 + -1 + i7 | 0;
      i5 = i7;
     }
     i11 = HEAP32[i38 >> 2] | 0;
     i10 = i14 + (0 - i11 << 2) | 0;
     i9 = i11;
     while (1) {
      i6 = i9 + -1 | 0;
      if ((i9 | 0) <= 0) {
       i15 = 68;
       break;
      }
      i8 = i10 + (i6 << 2) | 0;
      i7 = HEAP32[i8 >> 2] | 0;
      if ((i7 | 0) > (i5 | 0)) i9 = i6; else {
       i15 = 65;
       break;
      }
     }
     if ((i15 | 0) == 65) if ((i7 | 0) < (i5 | 0)) {
      HEAP32[i8 >> 2] = i5;
      i6 = i9 + -2 | 0;
      if ((i9 | 0) > 1) while (1) {
       i15 = i10 + (i6 << 2) | 0;
       i5 = HEAP32[i15 >> 2] | 0;
       HEAP32[i15 >> 2] = i7;
       if ((i6 | 0) > 0) {
        i6 = i6 + -1 | 0;
        i7 = i5;
       } else {
        i15 = 69;
        break;
       }
      } else {
       i5 = i7;
       i15 = 68;
      }
     } else i15 = 68;
     if ((i15 | 0) == 68) {
      i15 = 0;
      if ((i6 | 0) < 0) i15 = 69;
     }
     if ((i15 | 0) == 69) {
      i1 = i1 + -4 | 0;
      HEAP32[i37 >> 2] = i1;
      if (i1 >>> 0 <= i2 >>> 0) break L76;
      i15 = i11 + 1 | 0;
      HEAP32[i38 >> 2] = i15;
      HEAP32[i14 + (~i11 << 2) >> 2] = i5;
      i11 = i15;
     }
     i5 = i12 + 1 | 0;
     i10 = i14 + (0 - i11 << 2) | 0;
     i9 = i11;
     while (1) {
      i6 = i9 + -1 | 0;
      if ((i9 | 0) <= 0) {
       i15 = 77;
       break;
      }
      i8 = i10 + (i6 << 2) | 0;
      i7 = HEAP32[i8 >> 2] | 0;
      if ((i7 | 0) > (i5 | 0)) i9 = i6; else {
       i15 = 74;
       break;
      }
     }
     if ((i15 | 0) == 74) if ((i7 | 0) > (i12 | 0)) i15 = 77; else {
      HEAP32[i8 >> 2] = i5;
      i6 = i9 + -2 | 0;
      if ((i9 | 0) > 1) while (1) {
       i15 = i10 + (i6 << 2) | 0;
       i5 = HEAP32[i15 >> 2] | 0;
       HEAP32[i15 >> 2] = i7;
       if ((i6 | 0) > 0) {
        i6 = i6 + -1 | 0;
        i7 = i5;
       } else {
        i15 = 78;
        break;
       }
      } else {
       i5 = i7;
       i15 = 77;
      }
     }
     if ((i15 | 0) == 77) {
      i15 = 0;
      if ((i6 | 0) < 0) i15 = 78;
     }
     if ((i15 | 0) == 78) {
      i1 = i1 + -4 | 0;
      HEAP32[i37 >> 2] = i1;
      if (i1 >>> 0 <= i2 >>> 0) break L76;
      HEAP32[i38 >> 2] = i11 + 1;
      HEAP32[i14 + (~i11 << 2) >> 2] = i5;
     }
     i4 = i4 + -1 << 16 >> 16;
     if (!(i4 << 16 >> 16)) {
      i15 = 82;
      break L6;
     } else i8 = i13;
    }
   } while (0);
   HEAP32[i31 >> 2] = 98;
   i15 = 85;
  } else i15 = 81; while (0);
  if ((i15 | 0) == 81) {
   HEAP32[i32 >> 2] = 0;
   i3 = 0;
   i15 = 82;
  }
  if ((i15 | 0) == 82) {
   i15 = 0;
   if (i2 >>> 0 < i1 >>> 0) if (!i3) i1 = -1; else {
    HEAP32[i49 >> 2] = 0;
    HEAP32[i50 >> 2] = 0;
    HEAP32[i51 >> 2] = 0;
    i5 = HEAP32[i25 >> 2] | 0;
    i6 = HEAP32[i28 >> 2] >> i5 & 65535;
    HEAP16[i47 >> 1] = i6;
    i5 = HEAP32[i27 >> 2] >> i5 & 65535;
    HEAP16[i36 >> 1] = i5;
    while (1) {
     i8 = i3 + 4 | 0;
     i7 = i3;
     i3 = HEAP32[i8 >> 2] | 0;
     i1 = HEAP32[i7 + 20 >> 2] | 0;
     i2 = i1 + 65535 + (HEAP32[i7 + 16 >> 2] | 0) | 0;
     i4 = i2 & 65535;
     if ((i5 << 16 >> 16 | 0) > (i1 << 16 >> 16 | 0)) {
      i5 = i1 & 65535;
      HEAP16[i36 >> 1] = i5;
     }
     if ((i6 << 16 >> 16 | 0) < (i2 << 16 >> 16 | 0)) HEAP16[i47 >> 1] = i4; else i4 = i6;
     HEAP32[i7 >> 2] = 0;
     i1 = HEAP32[i49 >> 2] | 0;
     L131 : do if (!i1) {
      i2 = i49;
      i1 = 0;
     } else {
      i2 = i49;
      while (1) {
       if ((HEAP32[i1 >> 2] | 0) > 0) break L131;
       i2 = i1 + 4 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i1 = 0;
        break;
       }
      }
     } while (0);
     HEAP32[i8 >> 2] = i1;
     HEAP32[i2 >> 2] = i7;
     if (!i3) break; else i6 = i4;
    }
    if (!(HEAP32[i38 >> 2] | 0)) {
     i15 = 99;
     break;
    }
    FUNCTION_TABLE_viii[HEAP32[i21 >> 2] & 31](i25, i36, i47);
    i2 = HEAP32[i49 >> 2] | 0;
    i1 = HEAP16[i36 >> 1] | 0;
    if (i2 | 0) {
     i3 = i1 << 16 >> 16;
     do {
      HEAP32[i2 + 24 >> 2] = (HEAP32[i2 + 20 >> 2] | 0) - i3;
      i2 = HEAP32[i2 + 4 >> 2] | 0;
     } while ((i2 | 0) != 0);
    }
    i3 = HEAP32[i38 >> 2] | 0;
    if ((i3 | 0) > 0) {
     i4 = i3 + -1 | 0;
     if ((HEAP32[(HEAP32[i35 >> 2] | 0) + (0 - i3 << 2) >> 2] | 0) == (i1 << 16 >> 16 | 0)) {
      HEAP32[i38 >> 2] = i4;
      i2 = 0;
     } else {
      i2 = 0;
      i15 = 106;
     }
    } else {
     i2 = 0;
     i4 = i3;
    }
    L146 : while (1) {
     if ((i15 | 0) == 106) {
      i15 = 0;
      i4 = HEAP32[i38 >> 2] | 0;
     }
     if ((i4 | 0) <= 0) break;
     i3 = HEAP32[i49 >> 2] | 0;
     if (i3 | 0) {
      i9 = i2 << 16 >> 16;
      do {
       i8 = i3 + 4 | 0;
       i7 = i3;
       i3 = HEAP32[i8 >> 2] | 0;
       i13 = i7 + 24 | 0;
       i14 = (HEAP32[i13 >> 2] | 0) - i9 | 0;
       HEAP32[i13 >> 2] = i14;
       if (!i14) {
        i2 = HEAP32[i49 >> 2] | 0;
        i5 = i49;
        while (1) {
         if (!i2) break;
         i6 = i2 + 4 | 0;
         i14 = i2;
         i2 = HEAP32[i6 >> 2] | 0;
         if ((i14 | 0) == (i7 | 0)) {
          i15 = 115;
          break;
         } else i5 = i6;
        }
        if ((i15 | 0) == 115) {
         i15 = 0;
         HEAP32[i5 >> 2] = i2;
        }
        i6 = HEAP32[i7 >> 2] | 0;
        L163 : do if (!(HEAP16[i7 + 12 >> 1] & 8)) {
         i2 = HEAP32[i51 >> 2] | 0;
         if (!i2) {
          i5 = i51;
          i2 = 0;
         } else {
          i5 = i51;
          while (1) {
           if ((i6 | 0) < (HEAP32[i2 >> 2] | 0)) break L163;
           i5 = i2 + 4 | 0;
           i2 = HEAP32[i5 >> 2] | 0;
           if (!i2) {
            i2 = 0;
            break;
           }
          }
         }
        } else {
         i2 = HEAP32[i50 >> 2] | 0;
         if (!i2) {
          i5 = i50;
          i2 = 0;
         } else {
          i5 = i50;
          while (1) {
           if ((i6 | 0) < (HEAP32[i2 >> 2] | 0)) break L163;
           i5 = i2 + 4 | 0;
           i2 = HEAP32[i5 >> 2] | 0;
           if (!i2) {
            i2 = 0;
            break;
           }
          }
         }
        } while (0);
        HEAP32[i8 >> 2] = i2;
        HEAP32[i5 >> 2] = i7;
       }
      } while ((i3 | 0) != 0);
     }
     i5 = HEAP32[i50 >> 2] | 0;
     if (i5 | 0) {
      i2 = i5;
      do {
       i14 = i2 + 8 | 0;
       i13 = HEAP32[i14 >> 2] | 0;
       HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
       HEAP32[i14 >> 2] = i13 + (((HEAP16[i2 + 12 >> 1] & 8) >>> 2) + -1 << 2);
       i14 = i2 + 16 | 0;
       HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
       i2 = HEAP32[i2 + 4 >> 2] | 0;
      } while ((i2 | 0) != 0);
      i2 = i5 + 4 | 0;
      i6 = HEAP32[i2 >> 2] | 0;
      if (i6 | 0) {
       i3 = i50;
       do {
        if ((HEAP32[i5 >> 2] | 0) > (HEAP32[i6 >> 2] | 0)) {
         HEAP32[i3 >> 2] = i6;
         i3 = i6 + 4 | 0;
         HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
         HEAP32[i3 >> 2] = i5;
         i3 = i50;
         i5 = HEAP32[i50 >> 2] | 0;
        } else {
         i3 = i2;
         i5 = i6;
        }
        i2 = i5 + 4 | 0;
        i6 = HEAP32[i2 >> 2] | 0;
       } while ((i6 | 0) != 0);
      }
     }
     i7 = HEAP32[i51 >> 2] | 0;
     if (!i7) i2 = 0; else {
      i2 = i7;
      do {
       i14 = i2 + 8 | 0;
       i13 = HEAP32[i14 >> 2] | 0;
       HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
       HEAP32[i14 >> 2] = i13 + (((HEAP16[i2 + 12 >> 1] & 8) >>> 2) + -1 << 2);
       i14 = i2 + 16 | 0;
       HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
       i2 = HEAP32[i2 + 4 >> 2] | 0;
      } while ((i2 | 0) != 0);
      i2 = i7 + 4 | 0;
      i5 = HEAP32[i2 >> 2] | 0;
      if (!i5) i2 = i7; else {
       i3 = i7;
       i6 = i51;
       i8 = i5;
       i5 = i7;
       do {
        if ((HEAP32[i5 >> 2] | 0) > (HEAP32[i8 >> 2] | 0)) {
         HEAP32[i6 >> 2] = i8;
         i3 = i8 + 4 | 0;
         HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
         HEAP32[i3 >> 2] = i5;
         i5 = HEAP32[i51 >> 2] | 0;
         i3 = i5;
         i6 = i51;
        } else {
         i6 = i2;
         i5 = i8;
        }
        i2 = i5 + 4 | 0;
        i8 = HEAP32[i2 >> 2] | 0;
       } while ((i8 | 0) != 0);
       i2 = i3;
      }
     }
     i12 = HEAP32[i35 >> 2] | 0;
     HEAP32[i38 >> 2] = i4 + -1;
     i12 = HEAP32[i12 + (0 - i4 << 2) >> 2] << 16 >> 16;
     i13 = i12 - (i1 & 65535) | 0;
     L195 : do if ((i1 << 16 >> 16 | 0) < (i12 | 0)) {
      i5 = i2;
      L196 : while (1) {
       i2 = HEAP32[i50 >> 2] | 0;
       i11 = (i2 | 0) == 0;
       if (!i11) {
        i4 = 0;
        i3 = i2;
        while (1) {
         i8 = HEAP32[i3 >> 2] | 0;
         i7 = HEAP32[i5 >> 2] | 0;
         i10 = (i8 | 0) > (i7 | 0);
         i6 = i10 ? i7 : i8;
         i7 = i10 ? i8 : i7;
         i8 = HEAP32[i26 >> 2] | 0;
         i10 = 0 - i8 | 0;
         i9 = i6 & i10;
         i10 = i8 + -1 + i7 & i10;
         do if ((i7 - i6 | 0) > (i8 | 0) | (i9 | 0) == (i6 | 0) | (i10 | 0) == (i7 | 0)) i15 = 144; else {
          if (!((i9 | 0) > (i10 | 0) | (i10 | 0) == (i9 + i8 | 0))) {
           i15 = 144;
           break;
          }
          if ((HEAP16[i3 + 12 >> 1] & 7) == 2) break;
          HEAP32[i3 >> 2] = i6;
          HEAP32[i5 >> 2] = i7;
          HEAP32[i3 + 24 >> 2] = 1;
          i4 = i4 + 1 << 16 >> 16;
         } while (0);
         if ((i15 | 0) == 144) {
          i15 = 0;
          FUNCTION_TABLE_viiiiii[HEAP32[i24 >> 2] & 7](i25, i1, i6, i7, i3, i5);
         }
         i3 = HEAP32[i3 + 4 >> 2] | 0;
         if (!i3) break;
         i5 = HEAP32[i5 + 4 >> 2] | 0;
        }
        if (i4 << 16 >> 16 >= 1) {
         i5 = i2;
         i3 = i51;
         while (1) {
          i3 = HEAP32[i3 >> 2] | 0;
          i4 = i5 + 24 | 0;
          if (HEAP32[i4 >> 2] | 0) {
           HEAP32[i4 >> 2] = 0;
           FUNCTION_TABLE_viiiiii[HEAP32[i23 >> 2] & 7](i25, i1, HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0, i5, i3);
          }
          i5 = HEAP32[i5 + 4 >> 2] | 0;
          if (!i5) break; else i3 = i3 + 4 | 0;
         }
        }
       }
       FUNCTION_TABLE_vi[HEAP32[i22 >> 2] & 127](i25);
       i1 = i1 + 1 << 16 >> 16;
       if ((i1 << 16 >> 16 | 0) >= (i12 | 0)) break L195;
       do if (!i11) {
        i3 = i2;
        do {
         i14 = i3 + 8 | 0;
         i11 = HEAP32[i14 >> 2] | 0;
         HEAP32[i3 >> 2] = HEAP32[i11 >> 2];
         HEAP32[i14 >> 2] = i11 + (((HEAP16[i3 + 12 >> 1] & 8) >>> 2) + -1 << 2);
         i14 = i3 + 16 | 0;
         HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
         i3 = HEAP32[i3 + 4 >> 2] | 0;
        } while ((i3 | 0) != 0);
        i3 = i2 + 4 | 0;
        i5 = HEAP32[i3 >> 2] | 0;
        if (!i5) break; else i4 = i50;
        do {
         if ((HEAP32[i2 >> 2] | 0) > (HEAP32[i5 >> 2] | 0)) {
          HEAP32[i4 >> 2] = i5;
          i4 = i5 + 4 | 0;
          HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
          HEAP32[i4 >> 2] = i2;
          i4 = i50;
          i2 = HEAP32[i50 >> 2] | 0;
         } else {
          i4 = i3;
          i2 = i5;
         }
         i3 = i2 + 4 | 0;
         i5 = HEAP32[i3 >> 2] | 0;
        } while ((i5 | 0) != 0);
       } while (0);
       i5 = HEAP32[i51 >> 2] | 0;
       if (!i5) {
        i5 = 0;
        continue;
       } else i2 = i5;
       do {
        i14 = i2 + 8 | 0;
        i11 = HEAP32[i14 >> 2] | 0;
        HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
        HEAP32[i14 >> 2] = i11 + (((HEAP16[i2 + 12 >> 1] & 8) >>> 2) + -1 << 2);
        i14 = i2 + 16 | 0;
        HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
        i2 = HEAP32[i2 + 4 >> 2] | 0;
       } while ((i2 | 0) != 0);
       i2 = i5 + 4 | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if (!i3) continue; else {
        i4 = i5;
        i6 = i51;
        i7 = i3;
        i3 = i5;
       }
       while (1) {
        if ((HEAP32[i3 >> 2] | 0) > (HEAP32[i7 >> 2] | 0)) {
         HEAP32[i6 >> 2] = i7;
         i4 = i7 + 4 | 0;
         HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
         HEAP32[i4 >> 2] = i3;
         i3 = HEAP32[i51 >> 2] | 0;
         i4 = i3;
         i6 = i51;
        } else {
         i6 = i2;
         i3 = i7;
        }
        i2 = i3 + 4 | 0;
        i5 = HEAP32[i2 >> 2] | 0;
        if (!i5) {
         i5 = i4;
         continue L196;
        } else i7 = i5;
       }
      }
     } else i2 = HEAP32[i50 >> 2] | 0; while (0);
     if (i2 | 0) do {
      i5 = i2;
      i2 = HEAP32[i2 + 4 >> 2] | 0;
      L240 : do if (!(HEAP32[i5 + 16 >> 2] | 0)) {
       i3 = HEAP32[i50 >> 2] | 0;
       i4 = i50;
       while (1) {
        if (!i3) break L240;
        i6 = i3 + 4 | 0;
        i15 = i3;
        i3 = HEAP32[i6 >> 2] | 0;
        if ((i15 | 0) == (i5 | 0)) break; else i4 = i6;
       }
       HEAP32[i4 >> 2] = i3;
      } while (0);
     } while ((i2 | 0) != 0);
     i2 = HEAP32[i51 >> 2] | 0;
     if (!i2) {
      i2 = i13;
      i15 = 106;
      continue;
     }
     while (1) {
      i5 = HEAP32[i2 + 4 >> 2] | 0;
      L250 : do if (!(HEAP32[i2 + 16 >> 2] | 0)) {
       i3 = HEAP32[i51 >> 2] | 0;
       i4 = i51;
       while (1) {
        if (!i3) break L250;
        i6 = i3 + 4 | 0;
        i15 = i3;
        i3 = HEAP32[i6 >> 2] | 0;
        if ((i15 | 0) == (i2 | 0)) break; else i4 = i6;
       }
       HEAP32[i4 >> 2] = i3;
      } while (0);
      if (!i5) {
       i2 = i13;
       i15 = 106;
       continue L146;
      } else i2 = i5;
     }
    }
    if (i1 << 16 >> 16 <= (HEAP16[i47 >> 1] | 0)) do {
     FUNCTION_TABLE_vi[HEAP32[i22 >> 2] & 127](i25);
     i1 = i1 + 1 << 16 >> 16;
    } while (i1 << 16 >> 16 <= (HEAP16[i47 >> 1] | 0));
    i1 = -1;
   } else i15 = 83;
  }
  if ((i15 | 0) == 83) if ((HEAP32[i31 >> 2] | 0) == 98) i15 = 85; else {
   i1 = 1;
   i15 = 181;
   break;
  }
  if ((i15 | 0) == 85) {
   i15 = 0;
   HEAP32[i31 >> 2] = 0;
   i1 = HEAP32[i52 >> 2] | 0;
   i2 = HEAP16[i25 + 956 + (i1 << 2) + 2 >> 1] | 0;
   i14 = HEAP16[i25 + 956 + (i1 << 2) >> 1] | 0;
   i3 = ((i2 << 16 >> 16) + i14 | 0) / 2 | 0;
   if ((i1 | 0) > 6 | (i3 | 0) < (i14 | 0)) {
    i15 = 86;
    break;
   }
   HEAP16[i25 + 956 + (i1 + 1 << 2) >> 1] = i3;
   HEAP16[i25 + 956 + ((HEAP32[i52 >> 2] | 0) + 1 << 2) + 2 >> 1] = i2;
   HEAP16[i25 + 956 + (HEAP32[i52 >> 2] << 2) + 2 >> 1] = i3 + 65535;
   i1 = 1;
  }
  i1 = (HEAP32[i52 >> 2] | 0) + i1 | 0;
  HEAP32[i52 >> 2] = i1;
  if ((i1 | 0) <= -1) {
   i1 = 0;
   i15 = 181;
   break;
  }
 }
 if ((i15 | 0) == 35) {
  HEAP32[i31 >> 2] = 20;
  i52 = 1;
  STACKTOP = i53;
  return i52 | 0;
 } else if ((i15 | 0) == 46) {
  HEAP32[i31 >> 2] = 99;
  i52 = 1;
  STACKTOP = i53;
  return i52 | 0;
 } else if ((i15 | 0) == 86) {
  HEAP32[i52 >> 2] = 0;
  HEAP32[i31 >> 2] = 20;
  i52 = 20;
  STACKTOP = i53;
  return i52 | 0;
 } else if ((i15 | 0) == 99) {
  HEAP32[i31 >> 2] = 20;
  i52 = 20;
  STACKTOP = i53;
  return i52 | 0;
 } else if ((i15 | 0) == 181) {
  STACKTOP = i53;
  return i1 | 0;
 }
 return 0;
}

function _pfr_face_init(i23, i27, i25, i1, i2) {
 i23 = i23 | 0;
 i27 = i27 | 0;
 i25 = i25 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i26 = 0, i28 = 0, i29 = 0;
 i29 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i26 = i29 + 8 | 0;
 i22 = i29 + 4 | 0;
 i28 = i29;
 i2 = i27 + 132 | 0;
 i1 = _FT_Stream_Seek(i23, 0) | 0;
 if (!i1) {
  i1 = _FT_Stream_ReadFields(i23, 116660, i2) | 0;
  if (!i1) {
   i3 = i27 + 204 | 0;
   i21 = i27 + 168 | 0;
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + (HEAP32[i3 >> 2] << 16);
   HEAP32[i28 >> 2] = 0;
   if ((HEAP32[i2 >> 2] | 0) == 1346785840) if ((HEAP32[i27 + 136 >> 2] | 0) >>> 0 <= 4) if ((HEAP32[i27 + 144 >> 2] | 0) >>> 0 >= 58) if ((HEAP32[i27 + 140 >> 2] | 0) == 3338) {
    i4 = i27 + 152 | 0;
    i1 = _FT_Stream_Seek(i23, HEAP32[i4 >> 2] | 0) | 0;
    HEAP32[i26 >> 2] = i1;
    if (i1 | 0) {
     HEAP32[i28 >> 2] = i1;
     i28 = i1;
     STACKTOP = i29;
     return i28 | 0;
    }
    i1 = _FT_Stream_ReadUShort(i23, i26) | 0;
    i2 = HEAP32[i26 >> 2] | 0;
    HEAP32[i28 >> 2] = i2;
    if (i2 | 0) {
     i28 = i2;
     STACKTOP = i29;
     return i28 | 0;
    }
    i1 = i1 & 65535;
    HEAP32[i27 >> 2] = i1;
    if ((i25 | 0) < 0) {
     i28 = 0;
     STACKTOP = i29;
     return i28 | 0;
    }
    if ((i1 | 0) <= (i25 | 0)) {
     HEAP32[i28 >> 2] = 6;
     i28 = 6;
     STACKTOP = i29;
     return i28 | 0;
    }
    i9 = i27 + 240 | 0;
    i8 = (HEAP32[i3 >> 2] | 0) == 0;
    i1 = _FT_Stream_Seek(i23, HEAP32[i4 >> 2] | 0) | 0;
    HEAP32[i26 >> 2] = i1;
    do if (!i1) {
     i2 = _FT_Stream_ReadUShort(i23, i26) | 0;
     i1 = HEAP32[i26 >> 2] | 0;
     if (!i1) if ((i2 & 65535) >>> 0 > i25 >>> 0) {
      i1 = _FT_Stream_Skip(i23, i25 * 5 | 0) | 0;
      HEAP32[i26 >> 2] = i1;
      if (!i1) {
       i4 = _FT_Stream_ReadUShort(i23, i26) | 0;
       i3 = i4 & 65535;
       i1 = HEAP32[i26 >> 2] | 0;
       if (!i1) {
        i2 = _FT_Stream_ReadUOffset(i23, i26) | 0;
        i1 = HEAP32[i26 >> 2] | 0;
        if (!i1) {
         HEAP32[i9 >> 2] = i3;
         HEAP32[i27 + 244 >> 2] = i2;
         i1 = _FT_Stream_Seek(i23, i2) | 0;
         HEAP32[i26 >> 2] = i1;
         if (!i1) {
          i1 = _FT_Stream_EnterFrame(i23, i3) | 0;
          HEAP32[i26 >> 2] = i1;
          if (i1 | 0) break;
          i19 = i23 + 32 | 0;
          i5 = HEAP32[i19 >> 2] | 0;
          i7 = i5 + i3 | 0;
          L32 : do if ((i4 & 65535) < 13) i24 = 49; else {
           HEAP32[i9 + 8 >> 2] = HEAPU8[i5 + 1 >> 0] << 8 | HEAPU8[i5 >> 0] << 16 | HEAPU8[i5 + 2 >> 0];
           HEAP32[i9 + 12 >> 2] = HEAPU8[i5 + 4 >> 0] << 8 | HEAPU8[i5 + 3 >> 0] << 16 | HEAPU8[i5 + 5 >> 0];
           HEAP32[i9 + 16 >> 2] = HEAPU8[i5 + 7 >> 0] << 8 | HEAPU8[i5 + 6 >> 0] << 16 | HEAPU8[i5 + 8 >> 0];
           HEAP32[i9 + 20 >> 2] = HEAPU8[i5 + 10 >> 0] << 8 | HEAPU8[i5 + 9 >> 0] << 16 | HEAPU8[i5 + 11 >> 0];
           i2 = i5 + 13 | 0;
           i6 = HEAPU8[i5 + 12 >> 0] | 0;
           i1 = (i6 & 4 | 0) != 0;
           i21 = i6 >>> 3 & 1;
           i3 = (i6 & 3 | 0) == 0;
           i4 = (i6 & 16 | 0) != 0;
           if ((i2 + ((i1 ? (i3 ? i21 | 4 : i21 + 1 | 0) : 0) + (i4 ? (i6 >>> 5 & 1) + 1 | 0 : 0)) | 0) >>> 0 > i7 >>> 0) {
            i24 = 49;
            break;
           }
           do if (i1) {
            if (!(i6 & 8)) {
             i1 = i5 + 14 | 0;
             i2 = HEAPU8[i2 >> 0] | 0;
            } else {
             i1 = i5 + 15 | 0;
             i2 = (HEAPU8[i2 >> 0] << 8 | HEAPU8[i5 + 14 >> 0]) << 16 >> 16;
            }
            HEAP32[i9 + 28 >> 2] = i2;
            if (!i3) break;
            HEAP32[i9 + 36 >> 2] = HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 >> 0] << 16 | HEAPU8[i1 + 2 >> 0];
            i1 = i1 + 3 | 0;
           } else i1 = i2; while (0);
           if (i4) {
            if (!(i6 & 32)) {
             i2 = i1 + 1 | 0;
             i1 = HEAPU8[i1 >> 0] | 0;
            } else {
             i2 = i1 + 2 | 0;
             i1 = (HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0]) << 16 >> 16;
            }
            HEAP32[i9 + 32 >> 2] = i1;
            i1 = i2;
           }
           L50 : do if (i6 & 64) {
            i2 = i1 + 1 | 0;
            L52 : do if (i2 >>> 0 <= i7 >>> 0) {
             i1 = HEAP8[i1 >> 0] | 0;
             if (!(i1 << 24 >> 24)) i1 = i2; else {
              i3 = i1 & 255;
              i1 = i2;
              do {
               i2 = i1 + 2 | 0;
               if (i2 >>> 0 > i7 >>> 0) break L52;
               i1 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
               if (i1 >>> 0 > i7 >>> 0) break L52;
               i3 = i3 + -1 | 0;
              } while ((i3 | 0) != 0);
             }
             HEAP32[i26 >> 2] = 0;
             break L50;
            } while (0);
            HEAP32[i26 >> 2] = 8;
            break L32;
           } while (0);
           i2 = i1 + 5 | 0;
           if (i2 >>> 0 > i7 >>> 0) {
            i24 = 49;
            break;
           }
           i3 = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
           i4 = i9 + 40 | 0;
           HEAP32[i4 >> 2] = i3;
           HEAP32[i9 + 44 >> 2] = HEAPU8[i1 + 3 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 4 >> 0];
           if (i8) break;
           if ((i1 + 6 | 0) >>> 0 > i7 >>> 0) {
            i24 = 49;
            break;
           }
           HEAP32[i4 >> 2] = HEAPU8[i2 >> 0] << 16 | i3;
          } while (0);
          if ((i24 | 0) == 49) HEAP32[i26 >> 2] = 8;
          _FT_Stream_ExitFrame(i23);
          i1 = HEAP32[i26 >> 2] | 0;
          HEAP32[i28 >> 2] = i1;
          if (i1 | 0) {
           i28 = i1;
           STACKTOP = i29;
           return i28 | 0;
          }
          i21 = i27 + 288 | 0;
          i15 = HEAP32[i9 + 44 >> 2] | 0;
          i3 = HEAP32[i9 + 40 >> 2] | 0;
          i14 = HEAP32[i23 + 28 >> 2] | 0;
          HEAP32[i21 >> 2] = i14;
          HEAP32[i21 + 4 >> 2] = i15;
          i1 = i21 + 136 | 0;
          HEAP32[i1 >> 2] = 0;
          HEAP32[i21 + 140 >> 2] = i1;
          i1 = _FT_Stream_Seek(i23, i15) | 0;
          HEAP32[i22 >> 2] = i1;
          L72 : do if (!i1) {
           i1 = _FT_Stream_EnterFrame(i23, i3) | 0;
           HEAP32[i22 >> 2] = i1;
           if (i1 | 0) break;
           i2 = HEAP32[i19 >> 2] | 0;
           i20 = i21 + 148 | 0;
           HEAP32[i20 >> 2] = i2;
           i16 = i2 + i3 | 0;
           L75 : do if ((i3 | 0) < 15) i24 = 144; else {
            HEAP32[i21 + 8 >> 2] = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
            HEAP32[i21 + 12 >> 2] = HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0];
            HEAP32[i21 + 16 >> 2] = HEAPU8[i2 + 4 >> 0] << 8 | HEAPU8[i2 + 5 >> 0];
            HEAP32[i21 + 20 >> 2] = (HEAPU8[i2 + 6 >> 0] << 8 | HEAPU8[i2 + 7 >> 0]) << 16 >> 16;
            HEAP32[i21 + 24 >> 2] = (HEAPU8[i2 + 8 >> 0] << 8 | HEAPU8[i2 + 9 >> 0]) << 16 >> 16;
            HEAP32[i21 + 28 >> 2] = (HEAPU8[i2 + 10 >> 0] << 8 | HEAPU8[i2 + 11 >> 0]) << 16 >> 16;
            HEAP32[i21 + 32 >> 2] = (HEAPU8[i2 + 12 >> 0] << 8 | HEAPU8[i2 + 13 >> 0]) << 16 >> 16;
            i1 = i2 + 15 | 0;
            i17 = HEAPU8[i2 + 14 >> 0] | 0;
            HEAP32[i21 + 36 >> 2] = i17;
            i18 = (i17 & 4 | 0) != 0;
            if (!i18) {
             if ((i3 | 0) < 17) {
              i24 = 144;
              break;
             }
             HEAP32[i21 + 40 >> 2] = (HEAPU8[i1 >> 0] << 8 | HEAPU8[i2 + 16 >> 0]) << 16 >> 16;
             i1 = i2 + 17 | 0;
            }
            L81 : do if (i17 & 128) {
             i2 = i1 + 1 | 0;
             L83 : do if (i2 >>> 0 > i16 >>> 0) i1 = 8; else {
              i1 = HEAP8[i1 >> 0] | 0;
              L85 : do if (!(i1 << 24 >> 24)) i1 = i2; else {
               i4 = i1 & 255;
               i1 = i2;
               while (1) {
                i2 = i1 + 2 | 0;
                if (i2 >>> 0 > i16 >>> 0) {
                 i1 = 8;
                 break L83;
                }
                i3 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
                if (i3 >>> 0 > i16 >>> 0) {
                 i1 = 8;
                 break L83;
                }
                switch (HEAP8[i1 + 1 >> 0] | 0) {
                case 1:
                 {
                  i1 = 78;
                  i24 = 68;
                  break;
                 }
                case 2:
                 {
                  i1 = 79;
                  i24 = 68;
                  break;
                 }
                case 3:
                 {
                  i1 = 80;
                  i24 = 68;
                  break;
                 }
                case 4:
                 {
                  i1 = 81;
                  i24 = 68;
                  break;
                 }
                default:
                 {}
                }
                if ((i24 | 0) == 68) {
                 i24 = 0;
                 i1 = FUNCTION_TABLE_iiii[i1 & 127](i2, i3, i21) | 0;
                 if (i1 | 0) break L83;
                }
                i4 = i4 + -1 | 0;
                if (!i4) {
                 i1 = i3;
                 break L85;
                } else i1 = i3;
               }
              } while (0);
              HEAP32[i22 >> 2] = 0;
              break L81;
             } while (0);
             HEAP32[i22 >> 2] = i1;
             break L75;
            } while (0);
            i2 = i1 + 3 | 0;
            if (i2 >>> 0 > i16 >>> 0) {
             i24 = 144;
             break;
            }
            i1 = HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 >> 0] << 16 | HEAPU8[i1 + 2 >> 0];
            L102 : do if (!i1) i1 = i2; else {
             i8 = i2 + i1 | 0;
             if (i8 >>> 0 > i16 >>> 0) {
              i24 = 144;
              break L75;
             }
             i9 = i21 + 84 | 0;
             i10 = i21 + 44 | 0;
             i11 = i21 + 48 | 0;
             i12 = i21 + 52 | 0;
             i13 = i21 + 88 | 0;
             i7 = i1;
             L105 : while (1) {
              i5 = i2 + 4 | 0;
              if (i5 >>> 0 > i8 >>> 0) {
               i1 = i8;
               break L102;
              }
              i6 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
              if (i6 >>> 0 < 4 | i7 >>> 0 < i6 >>> 0) {
               i1 = i8;
               break L102;
              }
              L109 : do switch (((HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0]) & 65535) << 16 >> 16) {
              case 1:
               {
                i1 = i6 + -4 | 0;
                HEAP32[i26 >> 2] = 0;
                i3 = i6 + -5 | 0;
                L111 : do if (i1 | 0) {
                 if (!(HEAP8[i5 + i3 >> 0] | 0)) {
                  if (!i3) break;
                 } else i3 = i1;
                 i1 = 0;
                 do {
                  i4 = HEAP8[i5 + i1 >> 0] | 0;
                  i1 = i1 + 1 | 0;
                  if ((i4 & 255) < 32 | i4 << 24 >> 24 < 0) break L111;
                 } while (i1 >>> 0 < i3 >>> 0);
                 i4 = _ft_mem_alloc(i14, i3 + 1 | 0, i26) | 0;
                 i1 = HEAP32[i26 >> 2] | 0;
                 if (i1 | 0) {
                  i24 = 86;
                  break L105;
                 }
                 _memcpy(i4 | 0, i5 | 0, i3 | 0) | 0;
                 HEAP8[i4 + i3 >> 0] = 0;
                 i1 = HEAP32[i26 >> 2] | 0;
                 HEAP32[i9 >> 2] = i4;
                 HEAP32[i22 >> 2] = i1;
                 if (!i1) break L109; else break L72;
                } while (0);
                HEAP32[i9 >> 2] = 0;
                HEAP32[i22 >> 2] = 0;
                break;
               }
              case 2:
               {
                if (i6 >>> 0 < 36) break L109;
                HEAP32[i10 >> 2] = (HEAPU8[i2 + 14 >> 0] << 8 | HEAPU8[i2 + 15 >> 0]) << 16 >> 16;
                HEAP32[i11 >> 2] = (HEAPU8[i2 + 16 >> 0] << 8 | HEAPU8[i2 + 17 >> 0]) << 16 >> 16;
                HEAP32[i12 >> 2] = (HEAPU8[i2 + 18 >> 0] << 8 | HEAPU8[i2 + 19 >> 0]) << 16 >> 16;
                break;
               }
              case 3:
               {
                i1 = i6 + -4 | 0;
                HEAP32[i26 >> 2] = 0;
                i3 = i6 + -5 | 0;
                L125 : do if (i1 | 0) {
                 if (!(HEAP8[i5 + i3 >> 0] | 0)) {
                  if (!i3) break;
                 } else i3 = i1;
                 i1 = 0;
                 do {
                  i4 = HEAP8[i5 + i1 >> 0] | 0;
                  i1 = i1 + 1 | 0;
                  if ((i4 & 255) < 32 | i4 << 24 >> 24 < 0) break L125;
                 } while (i1 >>> 0 < i3 >>> 0);
                 i4 = _ft_mem_alloc(i14, i3 + 1 | 0, i26) | 0;
                 i1 = HEAP32[i26 >> 2] | 0;
                 if (i1 | 0) {
                  i24 = 98;
                  break L105;
                 }
                 _memcpy(i4 | 0, i5 | 0, i3 | 0) | 0;
                 HEAP8[i4 + i3 >> 0] = 0;
                 i1 = HEAP32[i26 >> 2] | 0;
                 HEAP32[i13 >> 2] = i4;
                 HEAP32[i22 >> 2] = i1;
                 if (!i1) break L109; else break L72;
                } while (0);
                HEAP32[i13 >> 2] = 0;
                HEAP32[i22 >> 2] = 0;
                break;
               }
              default:
               {}
              } while (0);
              i2 = i2 + i6 | 0;
              i7 = i7 - i6 | 0;
              if (!i7) {
               i1 = i8;
               break L102;
              }
             }
             if ((i24 | 0) == 86) {
              HEAP32[i9 >> 2] = i4;
              HEAP32[i22 >> 2] = i1;
              break L72;
             } else if ((i24 | 0) == 98) {
              HEAP32[i13 >> 2] = i4;
              HEAP32[i22 >> 2] = i1;
              break L72;
             }
            } while (0);
            i2 = i1 + 1 | 0;
            if (i2 >>> 0 > i16 >>> 0) {
             i24 = 144;
             break;
            }
            i1 = HEAP8[i1 >> 0] | 0;
            i3 = i1 & 255;
            HEAP32[i21 + 104 >> 2] = i3;
            i4 = i2 + (i3 << 1) | 0;
            if (i4 >>> 0 > i16 >>> 0) {
             i24 = 144;
             break;
            }
            i5 = _ft_mem_realloc(i14, 4, 0, i3, 0, i22) | 0;
            HEAP32[i21 + 108 >> 2] = i5;
            if (HEAP32[i22 >> 2] | 0) break;
            if (i1 << 24 >> 24) {
             i1 = 0;
             while (1) {
              HEAP32[i5 + (i1 << 2) >> 2] = (HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0]) << 16 >> 16;
              i1 = i1 + 1 | 0;
              if ((i1 | 0) == (i3 | 0)) {
               i2 = i4;
               break;
              } else i2 = i2 + 2 | 0;
             }
            }
            i3 = i2 + 8 | 0;
            if (i3 >>> 0 > i16 >>> 0) {
             i24 = 144;
             break;
            }
            HEAP32[i21 + 112 >> 2] = HEAPU8[i2 >> 0];
            HEAP32[i21 + 116 >> 2] = HEAPU8[i2 + 1 >> 0];
            HEAP32[i21 + 68 >> 2] = HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0];
            HEAP32[i21 + 56 >> 2] = HEAPU8[i2 + 4 >> 0] << 8 | HEAPU8[i2 + 5 >> 0];
            i1 = i3;
            i11 = HEAPU8[i2 + 6 >> 0] << 8 | HEAPU8[i2 + 7 >> 0];
            HEAP32[i21 + 120 >> 2] = i11;
            HEAP32[i21 + 124 >> 2] = i1 + i15 - (HEAP32[i19 >> 2] | 0);
            i7 = _ft_mem_realloc(i14, 16, 0, i11, 0, i22) | 0;
            HEAP32[i21 + 128 >> 2] = i7;
            if (HEAP32[i22 >> 2] | 0) break;
            i15 = i17 & 8;
            i8 = (i15 | 0) != 0;
            i14 = i17 & 16;
            i9 = (i14 | 0) == 0;
            i19 = i17 & 32;
            i10 = (i19 | 0) == 0;
            if ((i3 + (Math_imul(i11, (i14 >>> 4) + (i15 >>> 3) + (i19 >>> 5) + (i17 >>> 1 & 3 | 4) | 0) | 0) | 0) >>> 0 > i16 >>> 0) {
             i24 = 144;
             break;
            }
            if (!i11) break;
            i2 = i21 + 40 | 0;
            if (!(i17 & 2)) {
             if (i18) {
              i5 = 0;
              while (1) {
               HEAP32[i7 + (i5 << 4) >> 2] = HEAPU8[i1 >> 0];
               HEAP32[i7 + (i5 << 4) + 4 >> 2] = (HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0]) << 16 >> 16;
               i1 = i8 ? i1 + 4 | 0 : i1 + 3 | 0;
               if (i9) {
                i4 = i1 + 1 | 0;
                i1 = HEAPU8[i1 >> 0] | 0;
               } else {
                i4 = i1 + 2 | 0;
                i1 = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
               }
               HEAP32[i7 + (i5 << 4) + 8 >> 2] = i1;
               if (i10) {
                i2 = HEAPU8[i4 >> 0] << 8;
                i3 = 1;
                i1 = i4 + 2 | 0;
               } else {
                i2 = HEAPU8[i4 + 1 >> 0] << 8 | HEAPU8[i4 >> 0] << 16;
                i3 = 2;
                i1 = i4 + 3 | 0;
               }
               HEAP32[i7 + (i5 << 4) + 12 >> 2] = HEAPU8[i4 + i3 >> 0] | i2;
               i5 = i5 + 1 | 0;
               if ((i5 | 0) == (i11 | 0)) break L75;
              }
             }
             i6 = HEAP32[i2 >> 2] | 0;
             i5 = 0;
             do {
              HEAP32[i7 + (i5 << 4) >> 2] = HEAPU8[i1 >> 0];
              HEAP32[i7 + (i5 << 4) + 4 >> 2] = i6;
              i1 = i8 ? i1 + 2 | 0 : i1 + 1 | 0;
              if (i9) {
               i4 = i1 + 1 | 0;
               i1 = HEAPU8[i1 >> 0] | 0;
              } else {
               i4 = i1 + 2 | 0;
               i1 = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
              }
              HEAP32[i7 + (i5 << 4) + 8 >> 2] = i1;
              if (i10) {
               i2 = HEAPU8[i4 >> 0] << 8;
               i3 = 1;
               i1 = i4 + 2 | 0;
              } else {
               i2 = HEAPU8[i4 + 1 >> 0] << 8 | HEAPU8[i4 >> 0] << 16;
               i3 = 2;
               i1 = i4 + 3 | 0;
              }
              HEAP32[i7 + (i5 << 4) + 12 >> 2] = HEAPU8[i4 + i3 >> 0] | i2;
              i5 = i5 + 1 | 0;
             } while ((i5 | 0) != (i11 | 0));
            } else {
             if (i18) {
              i5 = 0;
              while (1) {
               HEAP32[i7 + (i5 << 4) >> 2] = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
               HEAP32[i7 + (i5 << 4) + 4 >> 2] = (HEAPU8[i1 + 2 >> 0] << 8 | HEAPU8[i1 + 3 >> 0]) << 16 >> 16;
               i1 = i8 ? i1 + 5 | 0 : i1 + 4 | 0;
               if (i9) {
                i4 = i1 + 1 | 0;
                i1 = HEAPU8[i1 >> 0] | 0;
               } else {
                i4 = i1 + 2 | 0;
                i1 = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
               }
               HEAP32[i7 + (i5 << 4) + 8 >> 2] = i1;
               if (i10) {
                i2 = HEAPU8[i4 >> 0] << 8;
                i3 = 1;
                i1 = i4 + 2 | 0;
               } else {
                i2 = HEAPU8[i4 + 1 >> 0] << 8 | HEAPU8[i4 >> 0] << 16;
                i3 = 2;
                i1 = i4 + 3 | 0;
               }
               HEAP32[i7 + (i5 << 4) + 12 >> 2] = HEAPU8[i4 + i3 >> 0] | i2;
               i5 = i5 + 1 | 0;
               if ((i5 | 0) == (i11 | 0)) break L75;
              }
             }
             i6 = HEAP32[i2 >> 2] | 0;
             i5 = 0;
             do {
              HEAP32[i7 + (i5 << 4) >> 2] = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
              HEAP32[i7 + (i5 << 4) + 4 >> 2] = i6;
              i1 = i8 ? i1 + 3 | 0 : i1 + 2 | 0;
              if (i9) {
               i4 = i1 + 1 | 0;
               i1 = HEAPU8[i1 >> 0] | 0;
              } else {
               i4 = i1 + 2 | 0;
               i1 = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
              }
              HEAP32[i7 + (i5 << 4) + 8 >> 2] = i1;
              if (i10) {
               i2 = HEAPU8[i4 >> 0] << 8;
               i3 = 1;
               i1 = i4 + 2 | 0;
              } else {
               i2 = HEAPU8[i4 + 1 >> 0] << 8 | HEAPU8[i4 >> 0] << 16;
               i3 = 2;
               i1 = i4 + 3 | 0;
              }
              HEAP32[i7 + (i5 << 4) + 12 >> 2] = HEAPU8[i4 + i3 >> 0] | i2;
              i5 = i5 + 1 | 0;
             } while ((i5 | 0) != (i11 | 0));
            }
           } while (0);
           if ((i24 | 0) == 144) HEAP32[i22 >> 2] = 8;
           _FT_Stream_ExitFrame(i23);
           i1 = _FT_Stream_Pos(i23) | 0;
           HEAP32[i21 + 144 >> 2] = i1;
           HEAP32[i20 >> 2] = 0;
           i1 = HEAP32[i22 >> 2] | 0;
           HEAP32[i28 >> 2] = i1;
           if (i1 | 0) {
            i28 = i1;
            STACKTOP = i29;
            return i28 | 0;
           }
           HEAP32[i27 + 4 >> 2] = i25;
           i10 = i21 + 120 | 0;
           i3 = HEAP32[i10 >> 2] | 0;
           HEAP32[i27 + 16 >> 2] = i3 + 1;
           i11 = i27 + 8 | 0;
           i4 = HEAP32[i11 >> 2] | 1;
           HEAP32[i11 >> 2] = i4;
           L205 : do if (!i3) i1 = 0; else {
            i2 = HEAP32[i21 + 128 >> 2] | 0;
            i1 = 0;
            do {
             if (HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0) break L205;
             i1 = i1 + 1 | 0;
            } while (i1 >>> 0 < i3 >>> 0);
           } while (0);
           do if ((i1 | 0) == (i3 | 0)) {
            if (HEAP32[i21 + 92 >> 2] | 0) {
             HEAP32[i11 >> 2] = 0;
             i1 = 0;
             break;
            }
            HEAP32[i28 >> 2] = 3;
            i28 = 3;
            STACKTOP = i29;
            return i28 | 0;
           } else i1 = i4; while (0);
           i6 = i21 + 36 | 0;
           i3 = HEAP32[i6 >> 2] | 0;
           if (!(i3 & 4)) {
            i1 = i1 | 4;
            HEAP32[i11 >> 2] = i1;
           }
           i1 = i1 | (i3 << 4 & 16) + 16;
           HEAP32[i11 >> 2] = i1;
           i5 = HEAP32[i21 + 92 >> 2] | 0;
           i2 = (i5 | 0) == 0;
           if (!i2) {
            i1 = i1 | 2;
            HEAP32[i11 >> 2] = i1;
           }
           i9 = i21 + 132 | 0;
           if (HEAP32[i9 >> 2] | 0) HEAP32[i11 >> 2] = i1 | 64;
           i25 = HEAP32[i21 + 84 >> 2] | 0;
           i1 = i27 + 20 | 0;
           HEAP32[i1 >> 2] = i25;
           if (!i25) HEAP32[i1 >> 2] = HEAP32[i21 + 80 >> 2];
           HEAP32[i27 + 24 >> 2] = HEAP32[i21 + 88 >> 2];
           i4 = i27 + 28 | 0;
           HEAP32[i4 >> 2] = 0;
           i1 = i27 + 32 | 0;
           HEAP32[i1 >> 2] = 0;
           i25 = i27 + 52 | 0;
           i7 = i21 + 20 | 0;
           HEAP32[i25 >> 2] = HEAP32[i7 >> 2];
           HEAP32[i25 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
           HEAP32[i25 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
           HEAP32[i25 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
           i25 = HEAP32[i21 + 12 >> 2] | 0;
           i7 = i27 + 68 | 0;
           HEAP16[i7 >> 1] = i25;
           i23 = HEAP32[i21 + 32 >> 2] | 0;
           HEAP16[i27 + 70 >> 1] = i23;
           i24 = HEAP32[i21 + 24 >> 2] | 0;
           HEAP16[i27 + 72 >> 1] = i24;
           i25 = (((i25 & 65535) * 12 | 0) >>> 0) / 10 | 0;
           i8 = i27 + 74 | 0;
           i24 = (i23 << 16 >> 16) - (i24 << 16 >> 16) | 0;
           HEAP16[i8 >> 1] = (i25 << 16 >> 16 | 0) < (i24 | 0) ? i24 : i25;
           if (i2) i1 = i3; else {
            i2 = _ft_mem_realloc(HEAP32[(HEAP32[i27 + 104 >> 2] | 0) + 28 >> 2] | 0, 16, 0, i5, 0, i28) | 0;
            HEAP32[i1 >> 2] = i2;
            i1 = HEAP32[i28 >> 2] | 0;
            if (i1 | 0) {
             i28 = i1;
             STACKTOP = i29;
             return i28 | 0;
            }
            i3 = HEAP32[i21 + 100 >> 2] | 0;
            i1 = i2;
            i2 = 0;
            while (1) {
             i25 = HEAP32[i3 + 4 >> 2] | 0;
             HEAP16[i1 >> 1] = i25;
             i24 = HEAP32[i3 >> 2] | 0;
             HEAP16[i1 + 2 >> 1] = i24;
             i25 = i25 << 6;
             HEAP32[i1 + 4 >> 2] = i25;
             HEAP32[i1 + 8 >> 2] = i24 << 6;
             HEAP32[i1 + 12 >> 2] = i25;
             i2 = i2 + 1 | 0;
             if ((i2 | 0) == (i5 | 0)) break; else {
              i3 = i3 + 36 | 0;
              i1 = i1 + 16 | 0;
             }
            }
            HEAP32[i4 >> 2] = i5;
            i1 = HEAP32[i6 >> 2] | 0;
           }
           do if (!(i1 & 4)) i1 = HEAP32[i21 + 40 >> 2] | 0; else {
            i1 = HEAP32[i10 >> 2] | 0;
            if (!i1) {
             i1 = 0;
             break;
            }
            i3 = i1;
            i1 = 0;
            i2 = HEAP32[i21 + 128 >> 2] | 0;
            while (1) {
             i25 = HEAP32[i2 + 4 >> 2] | 0;
             i1 = (i1 | 0) < (i25 | 0) ? i25 : i1;
             i3 = i3 + -1 | 0;
             if (!i3) break; else i2 = i2 + 16 | 0;
            }
           } while (0);
           HEAP16[i27 + 76 >> 1] = i1;
           HEAP16[i27 + 78 >> 1] = HEAP16[i8 >> 1] | 0;
           i1 = HEAP16[i7 >> 1] | 0;
           HEAP16[i27 + 80 >> 1] = (i1 & 65535 | 0) / -10 | 0;
           HEAP16[i27 + 82 >> 1] = (i1 & 65535) / 30 | 0;
           HEAP32[i26 >> 2] = i27;
           HEAP16[i26 + 8 >> 1] = 3;
           HEAP16[i26 + 10 >> 1] = 1;
           HEAP32[i26 + 4 >> 2] = 1970170211;
           i1 = _FT_CMap_New(11524, 0, i26, 0) | 0;
           HEAP32[i28 >> 2] = i1;
           if (!(HEAP32[i9 >> 2] | 0)) {
            i28 = i1;
            STACKTOP = i29;
            return i28 | 0;
           }
           HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 64;
           i28 = i1;
           STACKTOP = i29;
           return i28 | 0;
          } while (0);
          HEAP32[i28 >> 2] = i1;
          i28 = i1;
          STACKTOP = i29;
          return i28 | 0;
         }
        }
       }
      }
     } else i1 = 6;
    } while (0);
    HEAP32[i28 >> 2] = i1;
    i28 = i1;
    STACKTOP = i29;
    return i28 | 0;
   }
   HEAP32[i28 >> 2] = 2;
   i28 = 2;
   STACKTOP = i29;
   return i28 | 0;
  }
 }
 HEAP32[i28 >> 2] = i1;
 i28 = i1;
 STACKTOP = i29;
 return i28 | 0;
}

function _BDF_Face_Init(i16, i29, i23, i1, i2) {
 i16 = i16 | 0;
 i29 = i29 | 0;
 i23 = i23 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i26 = i28 + 28 | 0;
 i15 = i28 + 24 | 0;
 i22 = i28 + 20 | 0;
 i27 = i28 + 16 | 0;
 i2 = i28;
 i24 = i29 + 100 | 0;
 i25 = HEAP32[i24 >> 2] | 0;
 i1 = _FT_Stream_Seek(i16, 0) | 0;
 HEAP32[i27 >> 2] = i1;
 if (i1 | 0) {
  i29 = i1;
  STACKTOP = i28;
  return i29 | 0;
 }
 HEAP32[i2 >> 2] = 1;
 HEAP32[i2 + 4 >> 2] = 1;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 8;
 HEAP32[i22 >> 2] = 0;
 i21 = _ft_mem_alloc(i25, 139324, i22) | 0;
 i1 = HEAP32[i22 >> 2] | 0;
 do if (!i1) {
  i18 = i21 + 36 | 0;
  HEAP32[i18 >> 2] = i2;
  i17 = i21 + 12 | 0;
  HEAP16[i17 >> 1] = 32767;
  HEAP32[i21 + 139320 >> 2] = i25;
  i19 = i21 + 139304 | 0;
  HEAP32[i19 >> 2] = 0;
  HEAP32[i19 + 4 >> 2] = 0;
  HEAP32[i19 + 8 >> 2] = 0;
  i20 = i21 + 139316 | 0;
  HEAP32[i20 >> 2] = i25;
  i14 = HEAP32[i16 + 28 >> 2] | 0;
  HEAP32[i15 >> 2] = 0;
  i1 = _ft_mem_realloc(i14, 1, 0, 1024, 0, i15) | 0;
  L6 : do if (!(HEAP32[i15 >> 2] | 0)) {
   HEAP32[i26 >> 2] = 32;
   HEAP8[i1 >> 0] = 0;
   i5 = 1;
   i3 = 0;
   i2 = 0;
   i4 = 0;
   i6 = 256;
   i13 = 1024;
   while (1) {
    i12 = i5;
    i5 = i3;
    i7 = 0;
    i3 = 0;
    L10 : while (1) {
     L12 : while (1) {
      L14 : while (1) {
       if (i3) i11 = i5; else {
        i4 = _FT_Stream_TryRead(i16, i1 + i2 | 0, i13 - i2 | 0) | 0;
        i11 = i4 + i2 | 0;
        i2 = 0;
       }
       L19 : do if ((i11 | 0) > (i7 | 0)) {
        i8 = i1 + i7 | 0;
        i3 = HEAP8[i8 >> 0] | 0;
        if ((i3 << 24 >> 24 | 0) == (i6 | 0)) break L14; else {
         i9 = i7;
         i10 = i3;
        }
        while (1) {
         switch (i10 << 24 >> 24) {
         case 10:
         case 13:
          break L12;
         default:
          {}
         }
         i3 = i9 + 1 | 0;
         if ((i3 | 0) >= (i11 | 0)) break L19;
         i9 = i3;
         i10 = HEAP8[i1 + i3 >> 0] | 0;
        }
       } while (0);
       if (!i4) break L6;
       if (!i7) break L10;
       i4 = i11 - i7 | 0;
       _memmove(i1 | 0, i1 + i7 | 0, i4 | 0) | 0;
       i5 = i7;
       i2 = i4;
       i7 = 0;
       i3 = 0;
      }
      i5 = i11;
      i7 = i7 + 1 | 0;
      i6 = 256;
      i3 = 1;
     }
     i6 = i1 + i9 | 0;
     HEAP8[i6 >> 0] = 0;
     switch (HEAP8[i8 >> 0] | 0) {
     case 26:
     case 35:
      break;
     default:
      if ((i9 | 0) > (i7 | 0)) {
       i5 = i9 - i7 | 0;
       i3 = FUNCTION_TABLE_iiiiii[HEAP32[i26 >> 2] & 127](i8, i5, i12, i26, i21) | 0;
       HEAP32[i15 >> 2] = i3;
       if ((i3 | 0) == -1) {
        i3 = FUNCTION_TABLE_iiiiii[HEAP32[i26 >> 2] & 127](i8, i5, i12, i26, i21) | 0;
        HEAP32[i15 >> 2] = i3;
       }
       if (i3 | 0) break L6;
      }
     }
     HEAP8[i6 >> 0] = i10;
     i12 = i12 + 1 | 0;
     i5 = i11;
     i7 = i9 + 1 | 0;
     i6 = i10 << 24 >> 24 == 10 ? 13 : i10 << 24 >> 24 == 13 ? 10 : 256;
     i3 = 1;
    }
    if (i13 >>> 0 > 65535) break;
    i2 = i13 << 1;
    i1 = _ft_mem_realloc(i14, 1, i13, i2, i1, i15) | 0;
    if (!(HEAP32[i15 >> 2] | 0)) {
     i10 = i13;
     i5 = i12;
     i3 = i11;
     i13 = i2;
     i2 = i10;
    } else break L6;
   }
   HEAP32[i15 >> 2] = 6;
  } while (0);
  _ft_mem_free(i14, i1);
  i16 = HEAP32[i15 >> 2] | 0;
  HEAP32[i22 >> 2] = i16;
  i8 = i21 + 32 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i16) {
   i7 = (i1 | 0) == 0;
   i2 = i1;
   if (!i7) {
    if ((HEAP32[i1 + 28 >> 2] | 0) != 8) HEAP16[i1 + 32 >> 1] = HEAP16[i1 + 4 >> 1] | 0;
    i3 = HEAP32[i1 + 52 >> 2] | 0;
    i4 = HEAP32[i1 + 64 >> 2] | 0;
    if ((HEAP32[i21 + 4 >> 2] | 0) != (i4 + i3 | 0)) HEAP16[i1 + 278660 >> 1] = 1;
    if (!((i4 | i3 | 0) == 0 ? 1 : (HEAP32[HEAP32[i18 >> 2] >> 2] | 0) == 0)) {
     i5 = HEAP16[i17 >> 1] | 0;
     i3 = (HEAP16[i21 + 16 >> 1] | 0) - (i5 << 16 >> 16) | 0;
     i4 = i1 + 4 | 0;
     if ((i3 | 0) != (HEAPU16[i4 >> 1] | 0)) {
      HEAP16[i4 >> 1] = i3;
      HEAP16[i1 + 278660 >> 1] = 1;
     }
     i3 = i1 + 8 | 0;
     if ((HEAP16[i3 >> 1] | 0) != i5 << 16 >> 16) {
      HEAP16[i3 >> 1] = i5;
      HEAP16[i1 + 278660 >> 1] = 1;
     }
     i3 = i1 + 12 | 0;
     i6 = HEAP16[i21 + 18 >> 1] | 0;
     if ((HEAP16[i3 >> 1] | 0) != i6 << 16 >> 16) {
      HEAP16[i3 >> 1] = i6;
      HEAP16[i1 + 278660 >> 1] = 1;
     }
     i3 = i1 + 14 | 0;
     i4 = HEAP16[i21 + 20 >> 1] | 0;
     i5 = i4 << 16 >> 16;
     if ((HEAP16[i3 >> 1] | 0) != i4 << 16 >> 16) {
      HEAP16[i3 >> 1] = i4;
      HEAP16[i1 + 10 >> 1] = 0 - i5;
      HEAP16[i1 + 278660 >> 1] = 1;
     }
     i3 = i5 + (i6 << 16 >> 16) | 0;
     i4 = i1 + 6 | 0;
     if ((i3 | 0) != (HEAPU16[i4 >> 1] | 0)) HEAP16[i4 >> 1] = i3;
    }
   }
   i3 = HEAP32[i21 >> 2] | 0;
   if (i3 & 1 | 0) if (!(i3 & 32)) {
    HEAP32[i22 >> 2] = 185;
    i3 = i19;
    i1 = i20;
    i2 = 0;
    i17 = 56;
    break;
   } else {
    HEAP32[i22 >> 2] = 186;
    i3 = i19;
    i1 = i20;
    i2 = 0;
    i17 = 56;
    break;
   }
   if (i7) {
    HEAP32[i22 >> 2] = 3;
    i3 = i19;
    i1 = i20;
    i17 = 56;
    break;
   }
   i3 = HEAP32[i1 + 88 >> 2] | 0;
   if (!i3) {
    i3 = i19;
    i1 = i20;
    i17 = 56;
    break;
   }
   i2 = _ft_mem_realloc(HEAP32[i1 + 278664 >> 2] | 0, 1, i3, i3 + 1 | 0, HEAP32[i1 + 84 >> 2] | 0, i22) | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP32[i1 + 84 >> 2] = i2;
   if (!(HEAP32[i22 >> 2] | 0)) {
    HEAP8[i2 + (HEAP32[i1 + 88 >> 2] | 0) >> 0] = 0;
    i3 = i19;
    i1 = i20;
    i2 = HEAP32[i8 >> 2] | 0;
    i17 = 56;
    break;
   }
  }
  _bdf_free_font(i1);
  _ft_mem_free(i25, HEAP32[i8 >> 2] | 0);
  HEAP32[i8 >> 2] = 0;
  i3 = i19;
  i1 = i20;
  i2 = 0;
  i17 = 56;
 } else if (!i21) i2 = 0; else {
  i3 = i21 + 139304 | 0;
  i1 = i21 + 139316 | 0;
  i2 = 0;
  i17 = 56;
 } while (0);
 if ((i17 | 0) == 56) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) {
   _ft_mem_free(i1, HEAP32[i3 >> 2] | 0);
   HEAP32[i3 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
  }
  _ft_mem_free(i25, i21);
  i1 = HEAP32[i22 >> 2] | 0;
 }
 HEAP32[i27 >> 2] = i1;
 if ((i1 & 255 | 0) == 176) {
  _BDF_Face_Done(i29);
  i29 = 2;
  STACKTOP = i28;
  return i29 | 0;
 }
 if (i1 | 0) {
  i29 = i1;
  STACKTOP = i28;
  return i29 | 0;
 }
 i16 = i2;
 i9 = i29 + 140 | 0;
 HEAP32[i9 >> 2] = i16;
 if ((i23 | 0) > 0) {
  _BDF_Face_Done(i29);
  i29 = 6;
  STACKTOP = i28;
  return i29 | 0;
 }
 HEAP32[i29 >> 2] = 1;
 HEAP32[i29 + 4 >> 2] = 0;
 i7 = i29 + 8 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = i8 | 146;
 i15 = (i2 | 0) == 0;
 L97 : do if (i15) i17 = 86; else {
  i6 = (HEAP32[i16 + 72 >> 2] | 0) == 0;
  if (i6) i17 = 86; else {
   i1 = HEAP32[i16 + 128 >> 2] | 0;
   i5 = HEAP32[i1 + 12 >> 2] | 0;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   i2 = i5 + ((3000791075 % (i1 >>> 0) | 0) << 2) | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 | 0) {
    i4 = i5 + (i1 + -1 << 2) | 0;
    i1 = i3;
    do {
     i3 = HEAP32[i1 >> 2] | 0;
     if ((HEAP8[i3 >> 0] | 0) == 83) if (!(_strcmp(i3, 350448) | 0)) {
      i17 = 71;
      break;
     }
     i1 = i2 + -4 | 0;
     i2 = i1 >>> 0 < i5 >>> 0 ? i4 : i1;
     i1 = HEAP32[i2 >> 2] | 0;
    } while ((i1 | 0) != 0);
    L107 : do if ((i17 | 0) == 71) {
     i2 = HEAP32[i16 + 80 >> 2] | 0;
     i1 = HEAP32[i1 + 4 >> 2] | 0;
     if (i2 + (i1 << 4) | 0) if ((HEAP32[i2 + (i1 << 4) + 4 >> 2] | 0) == 1) {
      i1 = HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0;
      if (i1 | 0) {
       switch (HEAP8[i1 >> 0] | 0) {
       case 99:
       case 67:
       case 109:
       case 77:
        break;
       default:
        break L107;
       }
       HEAP32[i7 >> 2] = i8 | 150;
      }
     }
    } while (0);
    if (i6) {
     i17 = 86;
     break;
    }
   }
   i1 = HEAP32[i16 + 128 >> 2] | 0;
   i5 = HEAP32[i1 + 12 >> 2] | 0;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   i2 = i5 + ((1183963782 % (i1 >>> 0) | 0) << 2) | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) i17 = 86; else {
    i4 = i5 + (i1 + -1 << 2) | 0;
    i1 = i3;
    while (1) {
     i3 = HEAP32[i1 >> 2] | 0;
     if ((HEAP8[i3 >> 0] | 0) == 70) if (!(_strcmp(i3, 281562) | 0)) break;
     i1 = i2 + -4 | 0;
     i2 = i1 >>> 0 < i5 >>> 0 ? i4 : i1;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i17 = 86;
      break L97;
     }
    }
    i2 = HEAP32[i16 + 80 >> 2] | 0;
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (!(i2 + (i1 << 4) | 0)) i17 = 86; else {
     i1 = HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0;
     if (!i1) i17 = 86; else {
      i1 = _ft_mem_strdup(i25, i1, i27) | 0;
      HEAP32[i29 + 20 >> 2] = i1;
      i1 = HEAP32[i27 >> 2] | 0;
      if (!i1) {
       i10 = HEAP32[i9 >> 2] | 0;
       break;
      } else {
       i29 = i1;
       STACKTOP = i28;
       return i29 | 0;
      }
     }
    }
   }
  }
 } while (0);
 if ((i17 | 0) == 86) {
  HEAP32[i29 + 20 >> 2] = 0;
  i10 = i16;
 }
 HEAP32[i26 >> 2] = 0;
 i14 = HEAP32[i24 >> 2] | 0;
 i7 = i29 + 12 | 0;
 HEAP32[i7 >> 2] = 0;
 if (!i10) {
  i2 = 0;
  i3 = 0;
  i1 = 0;
  i5 = 0;
  i9 = 0;
  i6 = 0;
  i8 = 0;
  i7 = 1;
  i17 = 130;
 } else if (!(HEAP32[i10 + 72 >> 2] | 0)) {
  i2 = 0;
  i3 = 0;
  i1 = 0;
  i5 = 0;
  i9 = 0;
  i6 = 0;
  i8 = 0;
  i7 = 1;
  i17 = 130;
 } else {
  i8 = HEAP32[i10 + 128 >> 2] | 0;
  i9 = HEAP32[i8 + 12 >> 2] | 0;
  i8 = HEAP32[i8 + 4 >> 2] | 0;
  i1 = i9 + ((78981326 % (i8 >>> 0) | 0) << 2) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  L133 : do if (!i2) {
   i3 = 0;
   i6 = 2;
  } else {
   i4 = i9 + (i8 + -1 << 2) | 0;
   while (1) {
    i3 = HEAP32[i2 >> 2] | 0;
    if ((HEAP8[i3 >> 0] | 0) == 83) if (!(_strcmp(i3, 281574) | 0)) break;
    i2 = i1 + -4 | 0;
    i1 = i2 >>> 0 < i9 >>> 0 ? i4 : i2;
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i3 = 0;
     i6 = 2;
     break L133;
    }
   }
   i3 = HEAP32[i10 + 80 >> 2] | 0;
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (!(i3 + (i1 << 4) | 0)) {
    i3 = 0;
    i6 = 2;
   } else if ((HEAP32[i3 + (i1 << 4) + 4 >> 2] | 0) == 1) {
    i1 = HEAP32[i3 + (i1 << 4) + 12 >> 2] | 0;
    if (!i1) {
     i3 = 0;
     i6 = 2;
    } else {
     switch (HEAP8[i1 >> 0] | 0) {
     case 105:
     case 73:
     case 111:
     case 79:
      break;
     default:
      {
       i3 = 0;
       i6 = 2;
       break L133;
      }
     }
     HEAP32[i7 >> 2] = 1;
     i3 = (HEAP8[i1 >> 0] | 32) << 24 >> 24 == 111 ? 281580 : 355515;
     i6 = 3;
    }
   } else {
    i3 = 0;
    i6 = 2;
   }
  } while (0);
  i1 = i9 + ((4260511730 % (i8 >>> 0) | 0) << 2) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  L146 : do if (!i2) i6 = 0; else {
   i5 = i9 + (i8 + -1 << 2) | 0;
   while (1) {
    i4 = HEAP32[i2 >> 2] | 0;
    if ((HEAP8[i4 >> 0] | 0) == 87) if (!(_strcmp(i4, 281588) | 0)) break;
    i2 = i1 + -4 | 0;
    i1 = i2 >>> 0 < i9 >>> 0 ? i5 : i2;
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i6 = 0;
     break L146;
    }
   }
   i4 = HEAP32[i10 + 80 >> 2] | 0;
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (!(i4 + (i1 << 4) | 0)) i6 = 0; else if ((HEAP32[i4 + (i1 << 4) + 4 >> 2] | 0) == 1) {
    i1 = HEAP32[i4 + (i1 << 4) + 12 >> 2] | 0;
    if (!i1) i6 = 0; else {
     switch (HEAP8[i1 >> 0] | 0) {
     case 98:
     case 66:
      break;
     default:
      {
       i6 = 0;
       break L146;
      }
     }
     HEAP32[i7 >> 2] = i6;
     i6 = 355510;
    }
   } else i6 = 0;
  } while (0);
  i1 = i9 + ((41411398 % (i8 >>> 0) | 0) << 2) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  L159 : do if (!i2) i13 = 0; else {
   i5 = i9 + (i8 + -1 << 2) | 0;
   while (1) {
    i4 = HEAP32[i2 >> 2] | 0;
    if ((HEAP8[i4 >> 0] | 0) == 83) if (!(_strcmp(i4, 350221) | 0)) break;
    i2 = i1 + -4 | 0;
    i1 = i2 >>> 0 < i9 >>> 0 ? i5 : i2;
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i13 = 0;
     break L159;
    }
   }
   i4 = HEAP32[i10 + 80 >> 2] | 0;
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (!(i4 + (i1 << 4) | 0)) i13 = 0; else if ((HEAP32[i4 + (i1 << 4) + 4 >> 2] | 0) == 1) {
    i1 = HEAP32[i4 + (i1 << 4) + 12 >> 2] | 0;
    if (!i1) i13 = 0; else {
     switch (HEAP8[i1 >> 0] | 0) {
     case 110:
     case 78:
     case 0:
      {
       i13 = 0;
       break L159;
      }
     default:
      {}
     }
     i13 = i1;
    }
   } else i13 = 0;
  } while (0);
  i2 = i9 + ((657458935 % (i8 >>> 0) | 0) << 2) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  L172 : do if (!i1) {
   i2 = 0;
   i1 = 0;
   i10 = 0;
  } else {
   i5 = i9 + (i8 + -1 << 2) | 0;
   while (1) {
    i4 = HEAP32[i1 >> 2] | 0;
    if ((HEAP8[i4 >> 0] | 0) == 65) if (!(_strcmp(i4, 281600) | 0)) break;
    i1 = i2 + -4 | 0;
    i2 = i1 >>> 0 < i9 >>> 0 ? i5 : i1;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i2 = 0;
     i1 = 0;
     i10 = 0;
     break L172;
    }
   }
   i2 = HEAP32[i10 + 80 >> 2] | 0;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!(i2 + (i1 << 4) | 0)) {
    i2 = 0;
    i1 = 0;
    i10 = 0;
   } else if ((HEAP32[i2 + (i1 << 4) + 4 >> 2] | 0) == 1) {
    i1 = HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0;
    if (!i1) {
     i2 = 0;
     i1 = 0;
     i10 = 0;
    } else {
     switch (HEAP8[i1 >> 0] | 0) {
     case 110:
     case 78:
     case 0:
      {
       i2 = 0;
       i1 = 0;
       i10 = 0;
       break L172;
      }
     default:
      {}
     }
     i10 = _strlen(i1) | 0;
     i2 = i10 + 1 | 0;
    }
   } else {
    i2 = 0;
    i1 = 0;
    i10 = 0;
   }
  } while (0);
  if (!i6) {
   i7 = 1;
   i6 = 0;
   i9 = 0;
  } else {
   i9 = _strlen(i6) | 0;
   i2 = i2 + 1 + i9 | 0;
   i7 = 0;
  }
  if (!i3) {
   i5 = 0;
   i8 = 0;
  } else {
   i5 = _strlen(i3) | 0;
   i2 = i2 + 1 + i5 | 0;
   i8 = i3;
  }
  if (!i13) {
   i4 = i2;
   i2 = 0;
  } else {
   i24 = _strlen(i13) | 0;
   i4 = i2 + 1 + i24 | 0;
   i2 = i24;
  }
  if (!i4) {
   i1 = i5;
   i5 = i13;
   i17 = 130;
  } else {
   i12 = i5;
   i5 = i1;
   i11 = i10;
  }
 }
 if ((i17 | 0) == 130) {
  i4 = 8;
  i12 = i1;
  i13 = i5;
  i5 = 281615;
  i11 = 7;
 }
 i1 = _ft_mem_alloc(i14, i4, i26) | 0;
 i10 = i29 + 24 | 0;
 HEAP32[i10 >> 2] = i1;
 i4 = HEAP32[i26 >> 2] | 0;
 if (i4 | 0) {
  HEAP32[i27 >> 2] = i4;
  i29 = i4;
  STACKTOP = i28;
  return i29 | 0;
 }
 if (i5) {
  _memcpy(i1 | 0, i5 | 0, i11 | 0) | 0;
  if (i11 | 0) {
   i4 = 0;
   do {
    i5 = i1 + i4 | 0;
    if ((HEAP8[i5 >> 0] | 0) == 32) HEAP8[i5 >> 0] = 45;
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i11 | 0));
  }
  i1 = i1 + i11 | 0;
 }
 if (i7) i3 = i8; else {
  if ((i1 | 0) != (HEAP32[i10 >> 2] | 0)) {
   HEAP8[i1 >> 0] = 32;
   i1 = i1 + 1 | 0;
  }
  _memcpy(i1 | 0, i6 | 0, i9 | 0) | 0;
  i1 = i1 + i9 | 0;
 }
 if (i3) {
  if ((i1 | 0) != (HEAP32[i10 >> 2] | 0)) {
   HEAP8[i1 >> 0] = 32;
   i1 = i1 + 1 | 0;
  }
  _memcpy(i1 | 0, i3 | 0, i12 | 0) | 0;
  i1 = i1 + i12 | 0;
 }
 if (i13) {
  if ((i1 | 0) != (HEAP32[i10 >> 2] | 0)) {
   HEAP8[i1 >> 0] = 32;
   i1 = i1 + 1 | 0;
  }
  _memcpy(i1 | 0, i13 | 0, i2 | 0) | 0;
  if (!i2) i2 = 0; else {
   i3 = 0;
   do {
    i4 = i1 + i3 | 0;
    if ((HEAP8[i4 >> 0] | 0) == 32) HEAP8[i4 >> 0] = 45;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) != (i2 | 0));
  }
  i1 = i1 + i2 | 0;
 }
 HEAP8[i1 >> 0] = 0;
 i1 = HEAP32[i26 >> 2] | 0;
 HEAP32[i27 >> 2] = i1;
 if (i1 | 0) {
  i29 = i1;
  STACKTOP = i28;
  return i29 | 0;
 }
 i10 = i16 + 48 | 0;
 HEAP32[i29 + 16 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 HEAP32[i29 + 28 >> 2] = 1;
 i9 = _ft_mem_realloc(i25, 16, 0, 1, 0, i27) | 0;
 HEAP32[i29 + 32 >> 2] = i9;
 i1 = HEAP32[i27 >> 2] | 0;
 if (i1 | 0) {
  i29 = i1;
  STACKTOP = i28;
  return i29 | 0;
 };
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 i6 = (HEAP32[i16 + 44 >> 2] | 0) + (HEAP32[i16 + 40 >> 2] | 0) | 0;
 HEAP16[i9 >> 1] = i6;
 i11 = i16 + 72 | 0;
 i8 = (HEAP32[i11 >> 2] | 0) == 0;
 L242 : do if (i8) i17 = 171; else {
  i1 = HEAP32[i16 + 128 >> 2] | 0;
  i5 = HEAP32[i1 + 12 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i2 = i5 + ((3825651940 % (i1 >>> 0) | 0) << 2) | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (!i3) i17 = 171; else {
   i4 = i5 + (i1 + -1 << 2) | 0;
   i1 = i3;
   while (1) {
    i3 = HEAP32[i1 >> 2] | 0;
    if ((HEAP8[i3 >> 0] | 0) == 65) if (!(_strcmp(i3, 281623) | 0)) break;
    i1 = i2 + -4 | 0;
    i2 = i1 >>> 0 < i5 >>> 0 ? i4 : i1;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i17 = 171;
     break L242;
    }
   }
   i2 = HEAP32[i16 + 80 >> 2] | 0;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!(i2 + (i1 << 4) | 0)) i17 = 171; else i6 = ((HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0) + 5 | 0) / 10 | 0;
  }
 } while (0);
 if ((i17 | 0) == 171) i6 = (i6 << 16 >> 15 | 0) / 3 | 0;
 HEAP16[i9 + 2 >> 1] = i6;
 L255 : do if (i15 | i8) i17 = 180; else {
  i1 = HEAP32[i16 + 128 >> 2] | 0;
  i5 = HEAP32[i1 + 12 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i2 = i5 + ((1780881776 % (i1 >>> 0) | 0) << 2) | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (!i3) i17 = 180; else {
   i4 = i5 + (i1 + -1 << 2) | 0;
   i1 = i3;
   while (1) {
    i3 = HEAP32[i1 >> 2] | 0;
    if ((HEAP8[i3 >> 0] | 0) == 80) if (!(_strcmp(i3, 281637) | 0)) break;
    i1 = i2 + -4 | 0;
    i2 = i1 >>> 0 < i5 >>> 0 ? i4 : i1;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i17 = 180;
     break L255;
    }
   }
   i2 = HEAP32[i16 + 80 >> 2] | 0;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!(i2 + (i1 << 4) | 0)) i17 = 180; else i1 = (((HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0) * 460800 | 0) + 36135 | 0) / 72270 | 0;
  }
 } while (0);
 if ((i17 | 0) == 180) i1 = i6 << 16 >> 10;
 HEAP32[i9 + 4 >> 2] = i1;
 do if (i15) HEAP32[i9 + 12 >> 2] = i1; else {
  if (i8) {
   HEAP32[i9 + 12 >> 2] = i1;
   break;
  }
  i2 = HEAP32[i16 + 128 >> 2] | 0;
  i6 = HEAP32[i2 + 12 >> 2] | 0;
  i2 = HEAP32[i2 + 4 >> 2] | 0;
  i3 = i6 + ((486426170 % (i2 >>> 0) | 0) << 2) | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if (!i4) {
   i4 = 0;
   i17 = 193;
  } else {
   i5 = i6 + (i2 + -1 << 2) | 0;
   i2 = i4;
   while (1) {
    i4 = HEAP32[i2 >> 2] | 0;
    if ((HEAP8[i4 >> 0] | 0) == 80) if (!(_strcmp(i4, 350468) | 0)) {
     i17 = 190;
     break;
    }
    i2 = i3 + -4 | 0;
    i3 = i2 >>> 0 < i6 >>> 0 ? i5 : i2;
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) {
     i4 = 0;
     break;
    }
   }
   do if ((i17 | 0) == 190) {
    i3 = HEAP32[i16 + 80 >> 2] | 0;
    i2 = HEAP32[i2 + 4 >> 2] | 0;
    if (!(i3 + (i2 << 4) | 0)) {
     i4 = 0;
     break;
    }
    i4 = HEAP32[i3 + (i2 << 4) + 12 >> 2] << 16 >> 10;
    HEAP32[i9 + 12 >> 2] = i4;
   } while (0);
   if (i8) {
    i5 = 0;
    i2 = 0;
   } else i17 = 193;
  }
  L285 : do if ((i17 | 0) == 193) {
   i2 = HEAP32[i16 + 128 >> 2] | 0;
   i7 = HEAP32[i2 + 12 >> 2] | 0;
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   i3 = i7 + ((2286220677 % (i2 >>> 0) | 0) << 2) | 0;
   i5 = HEAP32[i3 >> 2] | 0;
   if (!i5) i2 = 0; else {
    i6 = i7 + (i2 + -1 << 2) | 0;
    i2 = i5;
    while (1) {
     i5 = HEAP32[i2 >> 2] | 0;
     if ((HEAP8[i5 >> 0] | 0) == 82) if (!(_strcmp(i5, 281648) | 0)) {
      i17 = 198;
      break;
     }
     i2 = i3 + -4 | 0;
     i3 = i2 >>> 0 < i7 >>> 0 ? i6 : i2;
     i2 = HEAP32[i3 >> 2] | 0;
     if (!i2) {
      i2 = 0;
      break;
     }
    }
    do if ((i17 | 0) == 198) {
     i3 = HEAP32[i16 + 80 >> 2] | 0;
     i2 = HEAP32[i2 + 4 >> 2] | 0;
     if (!(i3 + (i2 << 4) | 0)) {
      i2 = 0;
      break;
     }
     i2 = HEAP32[i3 + (i2 << 4) + 12 >> 2] | 0;
    } while (0);
    if (i8) {
     i5 = 0;
     break;
    }
   }
   i3 = HEAP32[i16 + 128 >> 2] | 0;
   i8 = HEAP32[i3 + 12 >> 2] | 0;
   i3 = HEAP32[i3 + 4 >> 2] | 0;
   i5 = i8 + ((2286220678 % (i3 >>> 0) | 0) << 2) | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   if (!i6) {
    i5 = 0;
    break;
   }
   i7 = i8 + (i3 + -1 << 2) | 0;
   i3 = i6;
   while (1) {
    i6 = HEAP32[i3 >> 2] | 0;
    if ((HEAP8[i6 >> 0] | 0) == 82) if (!(_strcmp(i6, 281661) | 0)) break;
    i3 = i5 + -4 | 0;
    i5 = i3 >>> 0 < i8 >>> 0 ? i7 : i3;
    i3 = HEAP32[i5 >> 2] | 0;
    if (!i3) {
     i5 = 0;
     break L285;
    }
   }
   i5 = HEAP32[i16 + 80 >> 2] | 0;
   i3 = HEAP32[i3 + 4 >> 2] | 0;
   if (!(i5 + (i3 << 4) | 0)) {
    i5 = 0;
    break;
   }
   i5 = HEAP32[i5 + (i3 << 4) + 12 >> 2] & 65535;
  } while (0);
  i3 = i9 + 12 | 0;
  if (!i4) {
   HEAP32[i3 >> 2] = i1;
   if (!(i5 << 16 >> 16)) break;
   i1 = (Math_imul(i1, i5 << 16 >> 16) | 0) / 72 | 0;
   HEAP32[i3 >> 2] = i1;
  } else i1 = i4;
  i2 = i2 << 16 >> 16;
  if (i5 << 16 >> 16 == 0 | (i2 | 0) == 0) break;
  i1 = (Math_imul(i1, i2) | 0) / (i5 << 16 >> 16 | 0) | 0;
 } while (0);
 HEAP32[i9 + 8 >> 2] = i1;
 i5 = HEAP32[i16 + 56 >> 2] | 0;
 i6 = _ft_mem_realloc(i25, 8, 0, HEAP32[i10 >> 2] | 0, 0, i27) | 0;
 HEAP32[i29 + 144 >> 2] = i6;
 i1 = HEAP32[i27 >> 2] | 0;
 if (i1 | 0) {
  i29 = i1;
  STACKTOP = i28;
  return i29 | 0;
 }
 i4 = i29 + 164 | 0;
 HEAP32[i4 >> 2] = 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if (i2 | 0) {
  i3 = HEAP32[i16 + 36 >> 2] | 0;
  i1 = 0;
  do {
   i24 = HEAP32[i5 + (i1 * 36 | 0) + 4 >> 2] | 0;
   HEAP32[i6 + (i1 << 3) >> 2] = i24;
   HEAP16[i6 + (i1 << 3) + 4 >> 1] = i1;
   if ((i24 | 0) == (i3 | 0)) HEAP32[i4 >> 2] = i1;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < i2 >>> 0);
 }
 i6 = (HEAP32[i11 >> 2] | 0) == 0;
 L325 : do if (i6) i7 = 0; else {
  i1 = HEAP32[i16 + 128 >> 2] | 0;
  i5 = HEAP32[i1 + 12 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i2 = i5 + ((3781719536 % (i1 >>> 0) | 0) << 2) | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (!i3) {
   i7 = 0;
   break;
  }
  i4 = i5 + (i1 + -1 << 2) | 0;
  i1 = i3;
  while (1) {
   i3 = HEAP32[i1 >> 2] | 0;
   if ((HEAP8[i3 >> 0] | 0) == 67) if (!(_strcmp(i3, 283096) | 0)) break;
   i1 = i2 + -4 | 0;
   i2 = i1 >>> 0 < i5 >>> 0 ? i4 : i1;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i7 = 0;
    break L325;
   }
  }
  i7 = (HEAP32[i16 + 80 >> 2] | 0) + (HEAP32[i1 + 4 >> 2] << 4) | 0;
 } while (0);
 L335 : do if (!(i15 | i6)) {
  i1 = HEAP32[i16 + 128 >> 2] | 0;
  i5 = HEAP32[i1 + 12 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i2 = i5 + ((1888187142 % (i1 >>> 0) | 0) << 2) | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (!i3) break;
  i4 = i5 + (i1 + -1 << 2) | 0;
  i1 = i3;
  while (1) {
   i3 = HEAP32[i1 >> 2] | 0;
   if ((HEAP8[i3 >> 0] | 0) == 67) if (!(_strcmp(i3, 283113) | 0)) break;
   i1 = i2 + -4 | 0;
   i2 = i1 >>> 0 < i5 >>> 0 ? i4 : i1;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) break L335;
  }
  i2 = HEAP32[i16 + 80 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (!((i7 | 0) != 0 & (i2 + (i1 << 4) | 0) != 0)) break;
  if ((HEAP32[i7 + 4 >> 2] | 0) != 1) break;
  if ((HEAP32[i2 + (i1 << 4) + 4 >> 2] | 0) != 1) break;
  i3 = i7 + 12 | 0;
  if (!(HEAP32[i3 >> 2] | 0)) break;
  i1 = HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0;
  if (!i1) break;
  i1 = _ft_mem_strdup(i25, i1, i27) | 0;
  i4 = i29 + 132 | 0;
  HEAP32[i4 >> 2] = i1;
  i1 = HEAP32[i27 >> 2] | 0;
  if (i1 | 0) {
   i29 = i1;
   STACKTOP = i28;
   return i29 | 0;
  }
  i1 = _ft_mem_strdup(i25, HEAP32[i3 >> 2] | 0, i27) | 0;
  HEAP32[i29 + 136 >> 2] = i1;
  i2 = HEAP32[i27 >> 2] | 0;
  if (i2 | 0) {
   i29 = i2;
   STACKTOP = i28;
   return i29 | 0;
  }
  L355 : do switch (HEAP8[i1 >> 0] | 0) {
  case 73:
  case 105:
   {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 83:
    case 115:
     break;
    default:
     {
      i17 = 245;
      break L355;
     }
    }
    switch (HEAP8[i1 + 2 >> 0] | 0) {
    case 79:
    case 111:
     break;
    default:
     {
      i17 = 245;
      break L355;
     }
    }
    i1 = i1 + 3 | 0;
    if (_strcmp(i1, 281674) | 0) {
     if (_strcmp(i1, 281680) | 0) {
      i17 = 245;
      break L355;
     }
     if (_strcmp(HEAP32[i4 >> 2] | 0, 281685) | 0) {
      i17 = 245;
      break L355;
     }
    }
    HEAP32[i26 >> 2] = i29;
    HEAP32[i26 + 4 >> 2] = 1970170211;
    HEAP16[i26 + 8 >> 1] = 3;
    HEAP16[i26 + 10 >> 1] = 1;
    break;
   }
  default:
   i17 = 245;
  } while (0);
  if ((i17 | 0) == 245) {
   HEAP32[i26 >> 2] = i29;
   i29 = i26 + 4 | 0;
   HEAP32[i29 >> 2] = 0;
   HEAP32[i29 + 4 >> 2] = 0;
  }
  i29 = _FT_CMap_New(18068, 0, i26, 0) | 0;
  HEAP32[i27 >> 2] = i29;
  STACKTOP = i28;
  return i29 | 0;
 } while (0);
 HEAP32[i26 >> 2] = i29;
 HEAP32[i26 + 4 >> 2] = 1094995778;
 HEAP16[i26 + 8 >> 1] = 7;
 HEAP16[i26 + 10 >> 1] = 0;
 i1 = _FT_CMap_New(18068, 0, i26, 0) | 0;
 HEAP32[i27 >> 2] = i1;
 if (HEAP32[i29 + 36 >> 2] | 0) HEAP32[i29 + 92 >> 2] = HEAP32[HEAP32[i29 + 40 >> 2] >> 2];
 i29 = i1;
 STACKTOP = i28;
 return i29 | 0;
}

function _process_cubic(i50, i35, i38, i41, i24, i43) {
 i50 = i50 | 0;
 i35 = i35 | 0;
 i38 = i38 | 0;
 i41 = i41 | 0;
 i24 = i24 | 0;
 i43 = i43 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, d16 = 0.0, i17 = 0, d18 = 0.0, i19 = 0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, d25 = 0.0, d26 = 0.0, i27 = 0, i28 = 0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, i36 = 0, i37 = 0, i39 = 0, i40 = 0, i42 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i51 = 0, d52 = 0.0, d53 = 0.0, d54 = 0.0, d55 = 0.0, i56 = 0;
 i51 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i49 = i51 + 232 | 0;
 i48 = i51 + 304 | 0;
 i44 = i51 + 176 | 0;
 i45 = i51 + 96 | 0;
 i46 = i51;
 i42 = i41 + 24 | 0;
 d13 = +HEAPF64[i41 >> 3];
 i21 = i41 + 8 | 0;
 d30 = +HEAPF64[i21 >> 3];
 d12 = +HEAPF64[i42 >> 3];
 i22 = i41 + 32 | 0;
 d32 = +HEAPF64[i22 >> 3];
 d33 = d13 * d12 + d30 * d32;
 d34 = d13 * d32 - d30 * d12;
 i36 = i38 + 16 | 0;
 d9 = +HEAPF64[i36 >> 3];
 i37 = i38 + 24 | 0;
 d10 = +HEAPF64[i37 >> 3];
 d29 = d13 * d9 + d30 * d10;
 d31 = d12 * d9 + d32 * d10;
 d30 = d13 * d10 - d30 * d9;
 d32 = d12 * d10 - d32 * d9;
 i39 = i41 + 16 | 0;
 d12 = +HEAPF64[i39 >> 3];
 i40 = i41 + 40 | 0;
 d13 = +HEAPF64[i40 >> 3];
 d14 = d31 + (d33 * d12 + d13);
 d18 = d29 + (d12 + d33 * d13);
 d4 = d34 * d12 - d32;
 d7 = d30 + d34 * d13;
 if (d34 < 0.0) {
  d4 = -d4;
  d7 = -d7;
  d16 = -d34;
  i19 = 1;
  i17 = 0;
 } else {
  d16 = d34;
  i19 = 2;
  i17 = 33;
 }
 d20 = d29 + d31;
 do if (d20 > 0.0) {
  do if (!(i19 & i24)) {
   i5 = i24;
   i1 = i17;
  } else {
   if (!(d14 < d16 & d18 < d16)) {
    i1 = d30 < 0.0 ? i17 | 64 : i17;
    i1 = d32 < 0.0 ? i1 ^ 65 : i1;
    i3 = i1 & 64;
    i5 = (i3 | 0) != 0;
    i2 = (i5 ^ 1) & 1;
    if (d33 + d4 < 1.0) {
     if (i5) {
      i1 = i1 ^ (d33 < 0.0 ? 642 : 130);
      if (d14 > d16) i1 = i1 ^ 10;
     }
     i2 = 2 - (i3 >>> 6) | 0;
    } else if (i5) i1 = i1 ^ 65; else if (d33 > 0.0) i1 = i1 ^ 705; else i1 = i1 ^ 193;
    if (d33 + d7 < 1.0) {
     if (i5) {
      i1 = i1 ^ (d33 < 0.0 ? 1284 : 260);
      if (d18 > d16) i1 = i1 ^ 20;
     }
     i2 = i2 + 1 | 0;
    } else if (i5) i1 = i1 ^ 64; else if (d33 > 0.0) i1 = i1 ^ 1344; else i1 = i1 ^ 320;
    i5 = ((i2 | 0) > 2 ? i19 : 0) ^ i24;
    break;
   }
   d9 = ((d31 + d14) * d13 + (d29 + d18) * d12 + (d9 * d9 + d10 * d10)) * .5;
   if (d9 < d4 & d9 < d7) {
    d10 = +Math_sqrt(+(d9 / (2.0 - d9)));
    d9 = d9 * 1.3333333333333333 * d10;
    if (d13 * (d4 + d14 * d10) > d9) if (d12 * (d7 + d18 * d10) > d9) {
     i2 = HEAP32[i35 >> 2] | 0;
     i11 = i35 + 4 | 0;
     i3 = HEAP32[i11 >> 2] | 0;
     if (i43) {
      i1 = i50 + 56 | 0;
      HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | i19;
      i1 = i50 + 60 | 0;
     } else {
      i1 = i50 + 60 | 0;
      i5 = i19 & ~HEAP32[i1 >> 2];
      i6 = ~~(+HEAPF64[i50 + 80 >> 3] * +HEAPF64[i50 + 16 >> 3]);
      i8 = ~~(+HEAPF64[i50 + 88 >> 3] * +HEAPF64[i50 + 24 >> 3]);
      if (i5 & 1 | 0) {
       HEAP32[i48 >> 2] = i6 + i2;
       HEAP32[i48 + 4 >> 2] = i8 + i3;
       i28 = HEAP32[i50 >> 2] | 0;
       HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
       HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
       if (!(_outline_add_point(i28, i49, 1) | 0)) {
        i50 = 0;
        STACKTOP = i51;
        return i50 | 0;
       }
      }
      if (i5 & 2) {
       HEAP32[i48 >> 2] = i2 - i6;
       HEAP32[i48 + 4 >> 2] = i3 - i8;
       i28 = HEAP32[i50 + 4 >> 2] | 0;
       HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
       HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
       if (!(_outline_add_point(i28, i49, 1) | 0)) {
        i50 = 0;
        STACKTOP = i51;
        return i50 | 0;
       }
      }
     }
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | i19;
     if (d14 < 0.0 | d18 < 0.0) {
      i5 = HEAP32[i35 >> 2] | 0;
      i1 = HEAP32[i11 >> 2] | 0;
      i6 = i50 + 16 | 0;
      i2 = ~~(+HEAPF64[i6 >> 3] * 0.0);
      i8 = i50 + 24 | 0;
      i3 = ~~(+HEAPF64[i8 >> 3] * 0.0);
      i11 = (i19 & 1 | 0) == 0;
      if (!i11) {
       HEAP32[i48 >> 2] = i2 + i5;
       HEAP32[i48 + 4 >> 2] = i3 + i1;
       i28 = HEAP32[i50 >> 2] | 0;
       HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
       HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
       if (!(_outline_add_point(i28, i49, 1) | 0)) {
        i50 = 0;
        STACKTOP = i51;
        return i50 | 0;
       }
      }
      i15 = (i19 & 2 | 0) == 0;
      if (!i15) {
       HEAP32[i48 >> 2] = i5 - i2;
       HEAP32[i48 + 4 >> 2] = i1 - i3;
       i28 = HEAP32[i50 + 4 >> 2] | 0;
       HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
       HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
       if (!(_outline_add_point(i28, i49, 1) | 0)) {
        i50 = 0;
        STACKTOP = i51;
        return i50 | 0;
       }
      }
      i3 = HEAP32[i35 + 24 >> 2] | 0;
      i5 = HEAP32[i35 + 28 >> 2] | 0;
      i2 = ~~(+HEAPF64[i6 >> 3] * 0.0);
      i1 = ~~(+HEAPF64[i8 >> 3] * 0.0);
      if (!i11) {
       HEAP32[i48 >> 2] = i2 + i3;
       HEAP32[i48 + 4 >> 2] = i1 + i5;
       i28 = HEAP32[i50 >> 2] | 0;
       HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
       HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
       if (!(_outline_add_point(i28, i49, 1) | 0)) {
        i50 = 0;
        STACKTOP = i51;
        return i50 | 0;
       }
      }
      if (!i15) {
       HEAP32[i48 >> 2] = i3 - i2;
       HEAP32[i48 + 4 >> 2] = i5 - i1;
       i28 = HEAP32[i50 + 4 >> 2] | 0;
       HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
       HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
       if (!(_outline_add_point(i28, i49, 1) | 0)) {
        i50 = 0;
        STACKTOP = i51;
        return i50 | 0;
       }
      }
     } else {
      d26 = d14 / d16;
      i5 = HEAP32[i35 >> 2] | 0;
      i1 = HEAP32[i11 >> 2] | 0;
      i2 = ~~(d26 * +HEAPF64[i41 >> 3] * +HEAPF64[i50 + 16 >> 3]);
      i3 = ~~(d26 * +HEAPF64[i21 >> 3] * +HEAPF64[i50 + 24 >> 3]);
      if (i19 & 1 | 0) {
       HEAP32[i48 >> 2] = i2 + i5;
       HEAP32[i48 + 4 >> 2] = i3 + i1;
       i28 = HEAP32[i50 >> 2] | 0;
       HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
       HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
       if (!(_outline_add_point(i28, i49, 1) | 0)) {
        i50 = 0;
        STACKTOP = i51;
        return i50 | 0;
       }
      }
      if (i19 & 2 | 0) {
       HEAP32[i48 >> 2] = i5 - i2;
       HEAP32[i48 + 4 >> 2] = i1 - i3;
       i28 = HEAP32[i50 + 4 >> 2] | 0;
       HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
       HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
       if (!(_outline_add_point(i28, i49, 1) | 0)) {
        i50 = 0;
        STACKTOP = i51;
        return i50 | 0;
       }
      }
     }
     i1 = ~i19 & i24;
     if (!i1) {
      i50 = i50 + 80 | 0;
      HEAP32[i50 >> 2] = HEAP32[i42 >> 2];
      HEAP32[i50 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
      HEAP32[i50 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
      HEAP32[i50 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
      i50 = 1;
      STACKTOP = i51;
      return i50 | 0;
     }
    } else i1 = i24; else i1 = i24;
   } else i1 = i24;
   i5 = i19 ^ i24;
   i24 = i1;
   i1 = i17;
  } while (0);
  if (i5) {
   d7 = (d30 + d32) / d20;
   d4 = d33 + 1.0;
   d25 = d34 * d34;
   d18 = d34 * d7;
   d14 = d7 * d7;
   d16 = d4 * d14;
   d55 = d4 * d16;
   d26 = d33 + -1.0;
   d52 = d26 * 4.0 + d33 * (d14 * 3.6);
   d14 = d26 * 2.0 + d14 * 3.0;
   d26 = d18 * 2.0;
   d12 = d26 + d14;
   d14 = d14 - d26;
   d10 = (d25 - d33 * d16) * 7.2;
   d16 = d25 * 2.0 - d16 * 6.0;
   d26 = (d33 + 4.0) * d26;
   d13 = d16 - d26;
   d16 = d26 + d16;
   d26 = d33 * ((d55 - d25) * 3.6);
   d55 = d25 * 3.0 + d55 * 3.0;
   d18 = d4 * (d18 * 6.0);
   d25 = d18 + d55;
   d18 = d55 - d18;
   d55 = +Math_sqrt(+(d4 * .5));
   d55 = d55 * 1.5 * (d55 + 1.0);
   d9 = d26 * 2.0 + d10 * d55;
   d53 = d25 * 2.0 + d13 * d55;
   d54 = d18 * 2.0 + d16 * d55;
   d9 = (d54 * (d18 - d55 * (d14 * d55)) + (d53 * (d25 - d55 * (d12 * d55)) + (d9 * (d26 - d55 * (d52 * d55)) + 0.0))) / (d55 * (d54 * d54 + (d53 * d53 + (d9 * d9 + 0.0))) + 1.0e-09);
   d26 = d52 + d9 * (d10 + d26 * d9);
   d25 = d12 + d9 * (d13 + d25 * d9);
   d18 = d14 + d9 * (d16 + d18 * d9);
   if (d18 * d18 + (d25 * d25 + (d26 * d26 + 0.0)) < +HEAPF64[i50 + 136 >> 3]) {
    d4 = d4 * d9 + -1.0;
    d26 = d7 * d4;
    d55 = d34 * d9;
    d25 = d26 - d55;
    d26 = d55 + d26;
    i2 = i1 & 32;
    i3 = i2 >>> 5;
    if (!(i3 + 1 & i5)) {
     i1 = i5;
     d4 = +HEAPF64[i39 >> 3];
     d7 = +HEAPF64[i40 >> 3];
    } else {
     i28 = (i2 | 0) == 0;
     d55 = i28 ? d34 : -d34;
     d54 = i28 ? d25 : -d25;
     d53 = i28 ? d26 : -d26;
     i28 = d55 * 2.0 * d4 < d20 & 1;
     d4 = +HEAPF64[i39 >> 3];
     i28 = d4 - d54 < 0.0 ? i28 | 2 : i28;
     d7 = +HEAPF64[i40 >> 3];
     i28 = d53 + d7 < 0.0 ? i28 | 4 : i28;
     i28 = d55 + (d29 + d4) - d33 * d53 < 0.0 ? i28 | 8 : i28;
     if (!(((d33 * d54 + (d55 + (d31 + d7)) < 0.0 ? i28 | 16 : i28) ^ i1) & i1 >> 6)) i1 = i5; else {
      i1 = -2 - i3 & i5;
      if (!i1) break;
     }
    }
    d20 = d29 * 2.0;
    d18 = d30 * 2.0;
    d16 = d31 * 2.0;
    d12 = d32 * 2.0;
    d55 = +Math_abs(+(d18 + d25 * 3.0 * d4));
    d13 = +HEAPF64[i50 + 144 >> 3];
    if (d55 < (d20 + d4 * 3.0) * d13) if (+Math_abs(+(d12 + d26 * 3.0 * d7)) < (d16 + d7 * 3.0) * d13) {
     d14 = d33 * d4;
     d10 = d34 * d4;
     d9 = d33 * d7;
     d4 = d34 * d7;
     d7 = -d4;
     if (+Math_abs(+(d18 + d20 * d25 - d10 + d26 * d14 - d7 / 3.0)) < d13 * (d9 / 3.0 + (d20 - d18 * d25 + d14 + d26 * d10))) if (+Math_abs(+(d12 + d16 * d26 + d4 + d25 * d9 - d10 / 3.0)) < d13 * (d14 / 3.0 + (d16 - d12 * d26 + d9 + d25 * d7))) {
      d7 = +HEAPF64[i41 >> 3];
      d10 = +HEAPF64[i21 >> 3];
      d4 = d7 + d25 * d10;
      d7 = d10 - d25 * d7;
      d10 = +HEAPF64[i41 + 24 >> 3];
      d55 = +HEAPF64[i22 >> 3];
      d9 = d10 + d26 * d55;
      d10 = d55 - d26 * d10;
      i2 = HEAP32[i35 >> 2] | 0;
      i3 = HEAP32[i35 + 4 >> 2] | 0;
      i28 = ~i1;
      i21 = i50 + 60 | 0;
      HEAP32[i21 >> 2] = HEAP32[i21 >> 2] & i28;
      i21 = i50 + 16 | 0;
      i5 = ~~(+HEAPF64[i50 + 80 >> 3] * +HEAPF64[i21 >> 3]);
      i22 = i50 + 24 | 0;
      i6 = ~~(+HEAPF64[i50 + 88 >> 3] * +HEAPF64[i22 >> 3]);
      i23 = (i1 & 1 | 0) == 0;
      if (!i23) {
       HEAP32[i48 >> 2] = i5 + i2;
       HEAP32[i48 + 4 >> 2] = i6 + i3;
       i27 = HEAP32[i50 >> 2] | 0;
       HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
       HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
       if (!(_outline_add_point(i27, i49, 3) | 0)) {
        i50 = 0;
        STACKTOP = i51;
        return i50 | 0;
       }
      }
      i27 = (i1 & 2 | 0) == 0;
      if (!i27) {
       HEAP32[i48 >> 2] = i2 - i5;
       HEAP32[i48 + 4 >> 2] = i3 - i6;
       i19 = HEAP32[i50 + 4 >> 2] | 0;
       HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
       HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
       if (!(_outline_add_point(i19, i49, 3) | 0)) {
        i50 = 0;
        STACKTOP = i51;
        return i50 | 0;
       }
      }
      i17 = HEAP32[i35 + 8 >> 2] | 0;
      i19 = HEAP32[i35 + 12 >> 2] | 0;
      i11 = ~~(d4 * +HEAPF64[i21 >> 3]);
      i15 = ~~(d7 * +HEAPF64[i22 >> 3]);
      if (!i23) {
       i5 = i11 + i17 | 0;
       i6 = i15 + i19 | 0;
       i8 = HEAP32[i50 >> 2] | 0;
       i1 = HEAP32[i8 >> 2] | 0;
       i3 = i8 + 4 | 0;
       i2 = HEAP32[i3 >> 2] | 0;
       do if (i1 >>> 0 < i2 >>> 0) i2 = i8 + 16 | 0; else {
        i1 = i2 << 1;
        i2 = ___errno_location() | 0;
        HEAP32[i2 >> 2] = 0;
        i2 = i8 + 16 | 0;
        i56 = _ass_try_realloc_array(HEAP32[i2 >> 2] | 0, i1, 8) | 0;
        HEAP32[i2 >> 2] = i56;
        i56 = ___errno_location() | 0;
        if (!(HEAP32[i56 >> 2] | 0)) {
         HEAP32[i3 >> 2] = i1;
         i1 = HEAP32[i8 >> 2] | 0;
         break;
        } else {
         i56 = 0;
         STACKTOP = i51;
         return i56 | 0;
        }
       } while (0);
       i56 = (HEAP32[i2 >> 2] | 0) + (i1 << 3) | 0;
       HEAP32[i56 >> 2] = i5;
       HEAP32[i56 + 4 >> 2] = i6;
       HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
      }
      if (!i27) {
       i8 = i17 - i11 | 0;
       i5 = i19 - i15 | 0;
       i6 = HEAP32[i50 + 4 >> 2] | 0;
       i1 = HEAP32[i6 >> 2] | 0;
       i3 = i6 + 4 | 0;
       i2 = HEAP32[i3 >> 2] | 0;
       do if (i1 >>> 0 < i2 >>> 0) i2 = i6 + 16 | 0; else {
        i1 = i2 << 1;
        i2 = ___errno_location() | 0;
        HEAP32[i2 >> 2] = 0;
        i2 = i6 + 16 | 0;
        i56 = _ass_try_realloc_array(HEAP32[i2 >> 2] | 0, i1, 8) | 0;
        HEAP32[i2 >> 2] = i56;
        i56 = ___errno_location() | 0;
        if (!(HEAP32[i56 >> 2] | 0)) {
         HEAP32[i3 >> 2] = i1;
         i1 = HEAP32[i6 >> 2] | 0;
         break;
        } else {
         i56 = 0;
         STACKTOP = i51;
         return i56 | 0;
        }
       } while (0);
       i56 = (HEAP32[i2 >> 2] | 0) + (i1 << 3) | 0;
       HEAP32[i56 >> 2] = i8;
       HEAP32[i56 + 4 >> 2] = i5;
       HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
      }
      i17 = HEAP32[i35 + 16 >> 2] | 0;
      i19 = HEAP32[i35 + 20 >> 2] | 0;
      i15 = ~~(d9 * +HEAPF64[i21 >> 3]);
      i11 = ~~(d10 * +HEAPF64[i22 >> 3]);
      if (!i23) {
       i5 = i15 + i17 | 0;
       i6 = i11 + i19 | 0;
       i8 = HEAP32[i50 >> 2] | 0;
       i1 = HEAP32[i8 >> 2] | 0;
       i3 = i8 + 4 | 0;
       i2 = HEAP32[i3 >> 2] | 0;
       do if (i1 >>> 0 < i2 >>> 0) i2 = i8 + 16 | 0; else {
        i1 = i2 << 1;
        i2 = ___errno_location() | 0;
        HEAP32[i2 >> 2] = 0;
        i2 = i8 + 16 | 0;
        i56 = _ass_try_realloc_array(HEAP32[i2 >> 2] | 0, i1, 8) | 0;
        HEAP32[i2 >> 2] = i56;
        i56 = ___errno_location() | 0;
        if (!(HEAP32[i56 >> 2] | 0)) {
         HEAP32[i3 >> 2] = i1;
         i1 = HEAP32[i8 >> 2] | 0;
         break;
        } else {
         i56 = 0;
         STACKTOP = i51;
         return i56 | 0;
        }
       } while (0);
       i56 = (HEAP32[i2 >> 2] | 0) + (i1 << 3) | 0;
       HEAP32[i56 >> 2] = i5;
       HEAP32[i56 + 4 >> 2] = i6;
       HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
      }
      if (!i27) {
       i8 = i17 - i15 | 0;
       i5 = i19 - i11 | 0;
       i6 = HEAP32[i50 + 4 >> 2] | 0;
       i1 = HEAP32[i6 >> 2] | 0;
       i3 = i6 + 4 | 0;
       i2 = HEAP32[i3 >> 2] | 0;
       do if (i1 >>> 0 < i2 >>> 0) i2 = i6 + 16 | 0; else {
        i1 = i2 << 1;
        i2 = ___errno_location() | 0;
        HEAP32[i2 >> 2] = 0;
        i2 = i6 + 16 | 0;
        i56 = _ass_try_realloc_array(HEAP32[i2 >> 2] | 0, i1, 8) | 0;
        HEAP32[i2 >> 2] = i56;
        i56 = ___errno_location() | 0;
        if (!(HEAP32[i56 >> 2] | 0)) {
         HEAP32[i3 >> 2] = i1;
         i1 = HEAP32[i6 >> 2] | 0;
         break;
        } else {
         i56 = 0;
         STACKTOP = i51;
         return i56 | 0;
        }
       } while (0);
       i56 = (HEAP32[i2 >> 2] | 0) + (i1 << 3) | 0;
       HEAP32[i56 >> 2] = i8;
       HEAP32[i56 + 4 >> 2] = i5;
       HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
      }
      i1 = i24 & i28;
      if (!i1) {
       i56 = i50 + 80 | 0;
       HEAP32[i56 >> 2] = HEAP32[i42 >> 2];
       HEAP32[i56 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
       HEAP32[i56 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
       HEAP32[i56 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
       i56 = 1;
       STACKTOP = i51;
       return i56 | 0;
      } else i24 = i1;
     }
    }
   }
  }
 } while (0);
 i8 = HEAP32[i35 + 8 >> 2] | 0;
 i1 = i8 + (HEAP32[i35 >> 2] | 0) | 0;
 i5 = HEAP32[i35 + 12 >> 2] | 0;
 i2 = i5 + (HEAP32[i35 + 4 >> 2] | 0) | 0;
 i11 = HEAP32[i35 + 16 >> 2] | 0;
 i8 = i8 + 2 + i11 | 0;
 i15 = HEAP32[i35 + 20 >> 2] | 0;
 i5 = i5 + 2 + i15 | 0;
 i3 = i35 + 24 | 0;
 i11 = (HEAP32[i3 >> 2] | 0) + i11 | 0;
 i15 = (HEAP32[i35 + 28 >> 2] | 0) + i15 | 0;
 i17 = i1 + i8 | 0;
 i19 = i2 + i5 | 0;
 i8 = i11 + i8 | 0;
 i5 = i15 + i5 | 0;
 i22 = i8 + -1 + i17 >> 3;
 i21 = i44 + 24 | 0;
 HEAP32[i21 >> 2] = i22;
 i23 = i19 + -1 + i5 >> 3;
 HEAP32[i44 + 28 >> 2] = i23;
 i17 = i17 >> 2;
 HEAP32[i44 + 16 >> 2] = i17;
 i19 = i19 >> 2;
 HEAP32[i44 + 20 >> 2] = i19;
 HEAP32[i44 + 32 >> 2] = i8 >> 2;
 HEAP32[i44 + 36 >> 2] = i5 >> 2;
 HEAP32[i44 + 8 >> 2] = i1 >> 1;
 HEAP32[i44 + 12 >> 2] = i2 >> 1;
 HEAP32[i44 + 40 >> 2] = i11 >> 1;
 HEAP32[i44 + 44 >> 2] = i15 >> 1;
 i15 = i35;
 i11 = HEAP32[i15 >> 2] | 0;
 i15 = HEAP32[i15 + 4 >> 2] | 0;
 i2 = i44;
 HEAP32[i2 >> 2] = i11;
 HEAP32[i2 + 4 >> 2] = i15;
 i2 = HEAP32[i3 + 4 >> 2] | 0;
 i1 = i44 + 48 | 0;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 4 >> 2] = i2;
 d4 = +HEAPF64[i38 >> 3] * .5;
 HEAPF64[i45 >> 3] = d4;
 d7 = +HEAPF64[i38 + 8 >> 3] * .5;
 HEAPF64[i45 + 8 >> 3] = d7;
 d18 = +HEAPF64[i36 >> 3] * .5;
 d16 = +HEAPF64[i37 >> 3] * .5;
 d12 = +HEAPF64[i38 + 32 >> 3] * .5;
 HEAPF64[i45 + 64 >> 3] = d12;
 d14 = +HEAPF64[i38 + 40 >> 3] * .5;
 HEAPF64[i45 + 72 >> 3] = d14;
 d4 = (d18 + d4) * .5;
 i1 = i45 + 16 | 0;
 HEAPF64[i1 >> 3] = d4;
 d7 = (d16 + d7) * .5;
 i2 = i45 + 24 | 0;
 HEAPF64[i2 >> 3] = d7;
 d12 = (d18 + d12) * .5;
 i3 = i45 + 48 | 0;
 HEAPF64[i3 >> 3] = d12;
 d14 = (d16 + d14) * .5;
 i5 = i45 + 56 | 0;
 HEAPF64[i5 >> 3] = d14;
 d16 = (d4 + d12) * .5;
 i8 = i45 + 32 | 0;
 HEAPF64[i8 >> 3] = d16;
 d18 = (d7 + d14) * .5;
 HEAPF64[i45 + 40 >> 3] = d18;
 d9 = +Math_sqrt(+(d16 * d16 + d18 * d18));
 i6 = i50 + 120 | 0;
 d20 = +HEAPF64[i6 >> 3];
 if (d9 < d20) {
  HEAP32[i46 >> 2] = HEAP32[i41 >> 2];
  HEAP32[i46 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
  HEAP32[i46 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
  HEAP32[i46 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
  HEAPF64[i46 + 16 >> 3] = +HEAPF64[i39 >> 3] * .5;
  i56 = i46 + 72 | 0;
  HEAP32[i56 >> 2] = HEAP32[i42 >> 2];
  HEAP32[i56 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
  HEAP32[i56 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
  HEAP32[i56 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
  HEAPF64[i46 + 88 >> 3] = +HEAPF64[i40 >> 3] * .5;
  d13 = d16 + d4;
  HEAPF64[i1 >> 3] = d13;
  d10 = d18 + d7;
  HEAPF64[i2 >> 3] = d10;
  d9 = d16 + d12;
  HEAPF64[i3 >> 3] = d9;
  d7 = d18 + d14;
  HEAPF64[i5 >> 3] = d7;
  d4 = +Math_sqrt(+(d13 * d13 + d10 * d10));
  i1 = d4 < d20;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  if (i1) {
   i56 = i46 + 24 | 0;
   HEAP32[i56 >> 2] = HEAP32[i41 >> 2];
   HEAP32[i56 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
   HEAP32[i56 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
   HEAP32[i56 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
   HEAP32[i56 + 16 >> 2] = HEAP32[i41 + 16 >> 2];
   HEAP32[i56 + 20 >> 2] = HEAP32[i41 + 20 >> 2];
  } else {
   d55 = 1.0 / d4;
   HEAPF64[i46 + 24 >> 3] = d13 * d55;
   HEAPF64[i46 + 32 >> 3] = d55 * d10;
   HEAPF64[i46 + 40 >> 3] = d4;
  }
  d4 = +Math_sqrt(+(d9 * d9 + d7 * d7));
  if (d4 < d20) {
   i56 = i46 + 48 | 0;
   HEAP32[i56 >> 2] = HEAP32[i42 >> 2];
   HEAP32[i56 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
   HEAP32[i56 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
   HEAP32[i56 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
   HEAP32[i56 + 16 >> 2] = HEAP32[i42 + 16 >> 2];
   HEAP32[i56 + 20 >> 2] = HEAP32[i42 + 20 >> 2];
  } else {
   d55 = 1.0 / d4;
   HEAPF64[i46 + 48 >> 3] = d9 * d55;
   HEAPF64[i46 + 56 >> 3] = d55 * d7;
   HEAPF64[i46 + 64 >> 3] = d4;
  }
  do if (i1) {
   i1 = i50 + 60 | 0;
   HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & ~i24;
   i1 = ~~(+HEAPF64[i50 + 80 >> 3] * +HEAPF64[i50 + 16 >> 3]);
   i2 = ~~(+HEAPF64[i50 + 88 >> 3] * +HEAPF64[i50 + 24 >> 3]);
   if (i24 & 1 | 0) {
    HEAP32[i48 >> 2] = i1 + i11;
    HEAP32[i48 + 4 >> 2] = i2 + i15;
    i56 = HEAP32[i50 >> 2] | 0;
    HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
    HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
    if (!(_outline_add_point(i56, i49, 1) | 0)) {
     i1 = 0;
     break;
    }
   }
   if (!(i24 & 2)) i47 = 101; else {
    HEAP32[i48 >> 2] = i11 - i1;
    HEAP32[i48 + 4 >> 2] = i15 - i2;
    i56 = HEAP32[i50 + 4 >> 2] | 0;
    HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
    HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
    if (_outline_add_point(i56, i49, 1) | 0) i47 = 101; else i1 = 0;
   }
  } else if (_process_cubic(i50, i44, i45, i46, i24, i43) | 0) i47 = 101; else i1 = 0; while (0);
  do if ((i47 | 0) == 101) if (_start_segment(i50, i17, i19, +HEAPF64[i46 + 48 >> 3], +HEAPF64[i46 + 56 >> 3], i24) | 0) {
   if (d4 < +HEAPF64[i6 >> 3]) {
    i1 = i50 + 60 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & ~i24;
    i1 = ~~(+HEAPF64[i50 + 80 >> 3] * +HEAPF64[i50 + 16 >> 3]);
    i2 = ~~(+HEAPF64[i50 + 88 >> 3] * +HEAPF64[i50 + 24 >> 3]);
    if (i24 & 1 | 0) {
     HEAP32[i48 >> 2] = i1 + i22;
     HEAP32[i48 + 4 >> 2] = i2 + i23;
     i56 = HEAP32[i50 >> 2] | 0;
     HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
     HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
     if (!(_outline_add_point(i56, i49, 1) | 0)) {
      i1 = 0;
      break;
     }
    }
    if (i24 & 2 | 0) {
     HEAP32[i48 >> 2] = i22 - i1;
     HEAP32[i48 + 4 >> 2] = i23 - i2;
     i56 = HEAP32[i50 + 4 >> 2] | 0;
     HEAP32[i49 >> 2] = HEAP32[i48 >> 2];
     HEAP32[i49 + 4 >> 2] = HEAP32[i48 + 4 >> 2];
     if (!(_outline_add_point(i56, i49, 1) | 0)) {
      i1 = 0;
      break;
     }
    }
   } else if (!(_process_cubic(i50, i21, i8, i46 + 48 | 0, i24, 0) | 0)) {
    i1 = 0;
    break;
   }
   i1 = 1;
  } else i1 = 0; while (0);
 } else {
  d55 = 1.0 / d9;
  HEAP32[i49 >> 2] = HEAP32[i41 >> 2];
  HEAP32[i49 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
  HEAP32[i49 + 8 >> 2] = HEAP32[i41 + 8 >> 2];
  HEAP32[i49 + 12 >> 2] = HEAP32[i41 + 12 >> 2];
  HEAPF64[i49 + 16 >> 3] = +HEAPF64[i39 >> 3] * .5;
  i1 = i49 + 24 | 0;
  HEAPF64[i1 >> 3] = d55 * d16;
  HEAPF64[i49 + 32 >> 3] = d55 * d18;
  HEAPF64[i49 + 40 >> 3] = d9;
  i56 = i49 + 48 | 0;
  HEAP32[i56 >> 2] = HEAP32[i42 >> 2];
  HEAP32[i56 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
  HEAP32[i56 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
  HEAP32[i56 + 12 >> 2] = HEAP32[i42 + 12 >> 2];
  HEAPF64[i49 + 64 >> 3] = +HEAPF64[i40 >> 3] * .5;
  if (_process_cubic(i50, i44, i45, i49, i24, i43) | 0) i1 = _process_cubic(i50, i21, i8, i1, i24, 0) | 0; else i1 = 0;
 }
 i56 = i1;
 STACKTOP = i51;
 return i56 | 0;
}

function _T1_Face_Init(i1, i29, i20, i2, i3) {
 i1 = i1 | 0;
 i29 = i29 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 1904 | 0;
 i27 = i28 + 1884 | 0;
 i25 = i28 + 384 | 0;
 i17 = i28 + 8 | 0;
 i18 = i28;
 i26 = i29 + 132 | 0;
 HEAP32[i29 >> 2] = 1;
 i1 = i29 + 96 | 0;
 i23 = _ft_module_get_service(HEAP32[i1 >> 2] | 0, 284871) | 0;
 HEAP32[i29 + 484 >> 2] = i23;
 i24 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0, 284857) | 0;
 i21 = i29 + 488 | 0;
 HEAP32[i21 >> 2] = i24;
 if (!i24) {
  i29 = 11;
  STACKTOP = i28;
  return i29 | 0;
 }
 i13 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 HEAP32[i29 + 548 >> 2] = i13;
 i13 = HEAP32[i21 >> 2] | 0;
 _memset(i17 | 0, 0, 376) | 0;
 HEAP32[i29 + 532 >> 2] = -1;
 HEAP32[i29 + 536 >> 2] = -1;
 i22 = i29 + 540 | 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i29 + 280 >> 2] = 7;
 HEAP32[i29 + 284 >> 2] = 1;
 HEAP32[i29 + 172 >> 2] = 4;
 HEAP32[i29 + 348 >> 2] = 3932;
 HEAP32[i29 + 276 >> 2] = 2596864;
 i4 = HEAP32[i29 + 104 >> 2] | 0;
 i14 = i29 + 100 | 0;
 i5 = HEAP32[i14 >> 2] | 0;
 i12 = i13 + 4 | 0;
 FUNCTION_TABLE_viiii[HEAP32[HEAP32[i12 >> 2] >> 2] & 31](i17, 0, 0, i5);
 i6 = i17 + 72 | 0;
 HEAP32[i6 >> 2] = i4;
 i11 = i17 + 80 | 0;
 i15 = i17 + 76 | 0;
 i7 = i17 + 92 | 0;
 i16 = i17 + 93 | 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 HEAP32[i15 + 12 >> 2] = 0;
 HEAP16[i15 + 16 >> 1] = 0;
 HEAP8[i15 + 18 >> 0] = 0;
 i1 = _check_type1_format(i4, 280023, 14) | 0;
 HEAP32[i25 >> 2] = i1;
 if (!i1) i19 = 5; else if ((i1 & 255 | 0) == 2) {
  i1 = _check_type1_format(i4, 280038, 10) | 0;
  HEAP32[i25 >> 2] = i1;
  if (!i1) i19 = 5; else i19 = 22;
 } else i19 = 22;
 L7 : do if ((i19 | 0) == 5) {
  i1 = _FT_Stream_Seek(i4, 0) | 0;
  HEAP32[i25 >> 2] = i1;
  if (!i1) {
   i3 = _FT_Stream_ReadUShort(i4, i27) | 0;
   i1 = HEAP32[i27 >> 2] | 0;
   do if (!i1) {
    if ((i3 + 32767 & 65535) < 2) {
     i2 = _FT_Stream_ReadULongLE(i4, i27) | 0;
     i1 = HEAP32[i27 >> 2] | 0;
     if (i1 | 0) break;
     HEAP32[i25 >> 2] = 0;
     if (i3 << 16 >> 16 == -32767) {
      HEAP8[i7 >> 0] = 1;
      i3 = i2;
     } else i19 = 12;
    } else {
     HEAP32[i25 >> 2] = 0;
     i19 = 12;
    }
    if ((i19 | 0) == 12) {
     i1 = _FT_Stream_Seek(i4, 0) | 0;
     HEAP32[i25 >> 2] = i1;
     if (i1 | 0) {
      i19 = 22;
      break L7;
     }
     i3 = HEAP32[i4 + 4 >> 2] | 0;
    }
    if (!(HEAP32[i4 + 20 >> 2] | 0)) {
     HEAP32[i15 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i4 + 8 >> 2] | 0);
     HEAP32[i11 >> 2] = i3;
     HEAP8[i16 >> 0] = 1;
     i1 = _FT_Stream_Skip(i4, i3) | 0;
     HEAP32[i25 >> 2] = i1;
     if (i1 | 0) {
      i19 = 22;
      break L7;
     }
     i1 = HEAP32[i11 >> 2] | 0;
    } else {
     i2 = _ft_mem_alloc(i5, i3, i25) | 0;
     HEAP32[i15 >> 2] = i2;
     i1 = HEAP32[i25 >> 2] | 0;
     if (i1 | 0) {
      i19 = 22;
      break L7;
     }
     i1 = _FT_Stream_Read(i4, i2, i3) | 0;
     HEAP32[i25 >> 2] = i1;
     if (i1 | 0) {
      i19 = 22;
      break L7;
     }
     HEAP32[i11 >> 2] = i3;
     i1 = i3;
    }
    i2 = HEAP32[i15 >> 2] | 0;
    HEAP32[i17 + 4 >> 2] = i2;
    HEAP32[i17 >> 2] = i2;
    HEAP32[i17 + 8 >> 2] = i2 + i1;
    HEAP32[i18 >> 2] = 0;
    i19 = 26;
    break L7;
   } while (0);
   HEAP32[i25 >> 2] = i1;
   i19 = 22;
  } else i19 = 22;
 } while (0);
 do if ((i19 | 0) == 22) {
  if (HEAP8[i16 >> 0] | 0) {
   HEAP32[i18 >> 2] = i1;
   break;
  }
  _ft_mem_free(i5, HEAP32[i15 >> 2] | 0);
  HEAP32[i15 >> 2] = 0;
  i10 = HEAP32[i25 >> 2] | 0;
  HEAP32[i18 >> 2] = i10;
  if (!i10) {
   i2 = 0;
   i1 = HEAP32[i11 >> 2] | 0;
   i19 = 26;
  }
 } while (0);
 L35 : do if ((i19 | 0) == 26) {
  i10 = _parse_dict(i29, i17, i2, i1) | 0;
  HEAP32[i18 >> 2] = i10;
  if (!i10) {
   i6 = HEAP32[i6 >> 2] | 0;
   i10 = HEAP32[i17 + 16 >> 2] | 0;
   HEAP32[i25 >> 2] = 0;
   L38 : do if (!(HEAP8[i7 >> 0] | 0)) {
    i1 = HEAP32[i15 >> 2] | 0;
    i9 = i17 + 8 | 0;
    i6 = i17 + 32 | 0;
    i7 = i17 + 12 | 0;
    i8 = i17 + 28 | 0;
    i2 = i1;
    L40 : while (1) {
     i4 = i1;
     i5 = i1 + (HEAP32[i11 >> 2] | 0) | 0;
     do {
      while (1) {
       i3 = i2 + 1 | 0;
       if ((HEAP8[i2 >> 0] | 0) == 101 & (i2 + 9 | 0) >>> 0 < i5 >>> 0) if ((HEAP8[i3 >> 0] | 0) == 101) if ((HEAP8[i2 + 2 >> 0] | 0) == 120) if ((HEAP8[i2 + 3 >> 0] | 0) == 101) if ((HEAP8[i2 + 4 >> 0] | 0) == 99) break;
       if (i3 >>> 0 < i5 >>> 0) i2 = i3; else {
        i19 = 57;
        break L40;
       }
      }
      HEAP32[i17 >> 2] = i4;
      i2 = i2 + 10 | 0;
      HEAP32[i9 >> 2] = i2;
     } while (i1 >>> 0 >= i2 >>> 0);
     do {
      if ((HEAP8[i1 >> 0] | 0) == 101) if (!(_strncmp(i1, 280049, 5) | 0)) break L40;
      FUNCTION_TABLE_vi[HEAP32[i6 >> 2] & 127](i17);
      if (HEAP32[i7 >> 2] | 0) break;
      FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](i17);
      i1 = HEAP32[i17 >> 2] | 0;
     } while (i1 >>> 0 < i2 >>> 0);
     i1 = HEAP32[i15 >> 2] | 0;
    }
    if ((i19 | 0) == 57) {
     HEAP32[i25 >> 2] = 3;
     i1 = 3;
     break;
    }
    HEAP32[i9 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
    FUNCTION_TABLE_vi[HEAP32[i6 >> 2] & 127](i17);
    i1 = HEAP32[i17 >> 2] | 0;
    i6 = HEAP32[i9 >> 2] | 0;
    i2 = i6 - i1 | 0;
    i3 = _memchr(i1, 10, i2) | 0;
    if (!i3) i2 = 1; else i2 = i3 >>> 0 > (_memchr(i1, 13, i2) | 0) >>> 0;
    L66 : do if (i1 >>> 0 < i6 >>> 0) {
     L68 : do if (i2) while (1) {
      switch (HEAP8[i1 >> 0] | 0) {
      case 10:
      case 13:
      case 9:
      case 32:
       break;
      default:
       {
        i4 = i1;
        break L68;
       }
      }
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i6 >>> 0) break L66;
     } else while (1) {
      switch (HEAP8[i1 >> 0] | 0) {
      case 10:
      case 9:
      case 32:
       break;
      default:
       {
        i4 = i1;
        break L68;
       }
      }
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i6 >>> 0) break L66;
     } while (0);
     i2 = HEAP32[i15 >> 2] | 0;
     i5 = i2 - i4 + (HEAP32[i11 >> 2] | 0) | 0;
     if (!(HEAP8[i16 >> 0] | 0)) {
      HEAP8[i17 + 94 >> 0] = 1;
      HEAP32[i17 + 84 >> 2] = i2;
      HEAP32[i17 + 88 >> 2] = i5;
      HEAP32[i15 >> 2] = 0;
      HEAP32[i11 >> 2] = 0;
     } else {
      i2 = _ft_mem_alloc(i10, i5 + 1 | 0, i25) | 0;
      HEAP32[i17 + 84 >> 2] = i2;
      i1 = HEAP32[i25 >> 2] | 0;
      if (i1 | 0) break L38;
      HEAP32[i17 + 88 >> 2] = i5;
     }
     i3 = i4 + 3 | 0;
     L81 : do if (i3 >>> 0 < i6 >>> 0) {
      i1 = HEAP8[i4 >> 0] | 0;
      if (((i1 & 255) + -48 | 0) >>> 0 >= 10) switch (i1 << 24 >> 24) {
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
       break;
      default:
       break L81;
      }
      i1 = HEAP8[i4 + 1 >> 0] | 0;
      if (((i1 & 255) + -48 | 0) >>> 0 >= 10) switch (i1 << 24 >> 24) {
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
       break;
      default:
       break L81;
      }
      i1 = HEAP8[i4 + 2 >> 0] | 0;
      if (((i1 & 255) + -48 | 0) >>> 0 >= 10) switch (i1 << 24 >> 24) {
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
       break;
      default:
       break L81;
      }
      i1 = HEAP8[i3 >> 0] | 0;
      if (((i1 & 255) + -48 | 0) >>> 0 >= 10) switch (i1 << 24 >> 24) {
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
       break;
      default:
       break L81;
      }
      HEAP32[i17 >> 2] = i4;
      i19 = i17 + 84 | 0;
      i1 = i17 + 88 | 0;
      FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 24 >> 2] & 127](i17, i2, i5, i27, 0) | 0;
      i2 = HEAP32[i27 >> 2] | 0;
      HEAP32[i1 >> 2] = i2;
      HEAP8[(HEAP32[i19 >> 2] | 0) + i2 >> 0] = 0;
      i2 = i19;
      i19 = 88;
      break L38;
     } while (0);
     _memmove(i2 | 0, i4 | 0, i5 | 0) | 0;
     i2 = i17 + 84 | 0;
     i1 = i17 + 88 | 0;
     i19 = 88;
     break L38;
    } while (0);
    HEAP32[i25 >> 2] = 3;
    i1 = 3;
   } else {
    i4 = _FT_Stream_Pos(i6) | 0;
    i5 = i17 + 88 | 0;
    HEAP32[i5 >> 2] = 0;
    while (1) {
     i3 = _FT_Stream_ReadUShort(i6, i27) | 0;
     i1 = HEAP32[i27 >> 2] | 0;
     if (i1 | 0) {
      i19 = 33;
      break;
     }
     if ((i3 + 32767 & 65535) >= 2) {
      i19 = 31;
      break;
     }
     i2 = _FT_Stream_ReadULongLE(i6, i27) | 0;
     i1 = HEAP32[i27 >> 2] | 0;
     if (i1 | 0) {
      i19 = 33;
      break;
     }
     HEAP32[i25 >> 2] = 0;
     if (i3 << 16 >> 16 != -32766) break;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i2;
     i1 = _FT_Stream_Skip(i6, i2) | 0;
     HEAP32[i25 >> 2] = i1;
     if (i1 | 0) break L38;
    }
    if ((i19 | 0) == 31) HEAP32[i25 >> 2] = 0; else if ((i19 | 0) == 33) {
     HEAP32[i25 >> 2] = i1;
     break;
    }
    if (!(HEAP32[i5 >> 2] | 0)) {
     HEAP32[i25 >> 2] = 3;
     i1 = 3;
     break;
    }
    i1 = _FT_Stream_Seek(i6, i4) | 0;
    HEAP32[i25 >> 2] = i1;
    if (!i1) {
     i1 = _ft_mem_alloc(i10, HEAP32[i5 >> 2] | 0, i25) | 0;
     i2 = i17 + 84 | 0;
     HEAP32[i2 >> 2] = i1;
     i1 = HEAP32[i25 >> 2] | 0;
     if (!i1) {
      HEAP32[i5 >> 2] = 0;
      i3 = _FT_Stream_ReadUShort(i6, i27) | 0;
      i1 = HEAP32[i27 >> 2] | 0;
      L113 : do if (!i1) while (1) {
       if ((i3 + 32767 & 65535) >= 2) {
        i1 = 0;
        i19 = 43;
        break L113;
       }
       i4 = _FT_Stream_ReadULongLE(i6, i27) | 0;
       i1 = HEAP32[i27 >> 2] | 0;
       if (i1 | 0) {
        i19 = 43;
        break L113;
       }
       HEAP32[i25 >> 2] = 0;
       if (i3 << 16 >> 16 != -32766) break L113;
       i1 = _FT_Stream_Read(i6, (HEAP32[i2 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0, i4) | 0;
       HEAP32[i25 >> 2] = i1;
       if (i1 | 0) break L38;
       HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i4;
       i3 = _FT_Stream_ReadUShort(i6, i27) | 0;
       i1 = HEAP32[i27 >> 2] | 0;
       if (i1 | 0) {
        i19 = 43;
        break;
       }
      } else i19 = 43; while (0);
      if ((i19 | 0) == 43) HEAP32[i25 >> 2] = i1;
      HEAP32[i25 >> 2] = 0;
      i1 = i5;
      i19 = 88;
     }
    }
   } while (0);
   do if ((i19 | 0) == 88) {
    FUNCTION_TABLE_viii[HEAP32[i13 + 16 >> 2] & 31](HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] | 0, -9871);
    if ((HEAP32[i1 >> 2] | 0) >>> 0 < 4) {
     HEAP32[i25 >> 2] = 3;
     i1 = 3;
     break;
    }
    HEAP8[HEAP32[i2 >> 2] >> 0] = 32;
    HEAP8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] = 32;
    HEAP8[(HEAP32[i2 >> 2] | 0) + 2 >> 0] = 32;
    HEAP8[(HEAP32[i2 >> 2] | 0) + 3 >> 0] = 32;
    i13 = HEAP32[i2 >> 2] | 0;
    HEAP32[i17 + 4 >> 2] = i13;
    HEAP32[i17 >> 2] = i13;
    HEAP32[i17 + 8 >> 2] = i13 + (HEAP32[i1 >> 2] | 0);
    i13 = HEAP32[i25 >> 2] | 0;
    HEAP32[i18 >> 2] = i13;
    if (i13 | 0) break L35;
    i13 = _parse_dict(i29, i17, HEAP32[i17 + 84 >> 2] | 0, HEAP32[i17 + 88 >> 2] | 0) | 0;
    HEAP32[i18 >> 2] = i13;
    if (i13 | 0) break L35;
    i4 = i29 + 176 | 0;
    HEAP8[i4 >> 0] = HEAP8[i4 >> 0] & -2;
    i4 = i29 + 528 | 0;
    i1 = HEAP32[i4 >> 2] | 0;
    L130 : do if (!i1) i19 = 108; else {
     i2 = i1 + 416 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if (i3 | 0) if ((i3 | 0) != (HEAP32[i1 + 4 >> 2] | 0)) HEAP32[i2 >> 2] = 0;
     if (!(HEAP32[i1 >> 2] | 0)) i19 = 99; else {
      i2 = HEAP32[i1 + 4 >> 2] | 0;
      if (!i2) i19 = 99; else i19 = 101;
     }
     if ((i19 | 0) == 99) {
      _T1_Done_Blend(i29);
      i1 = HEAP32[i4 >> 2] | 0;
      if (!i1) {
       i19 = 108;
       break;
      }
      i2 = HEAP32[i1 + 4 >> 2] | 0;
      if (i2 | 0) i19 = 101;
     }
     L141 : do if ((i19 | 0) == 101) {
      i3 = 0;
      while (1) {
       if (!(HEAP8[i1 + 88 + (i3 * 12 | 0) >> 0] | 0)) break;
       i3 = i3 + 1 | 0;
       if (i3 >>> 0 >= i2 >>> 0) break L141;
      }
      _T1_Done_Blend(i29);
      if (!(HEAP32[i4 >> 2] | 0)) {
       i19 = 108;
       break L130;
      }
     } while (0);
     i1 = HEAP32[i22 >> 2] | 0;
     if (i1 | 0) {
      i14 = _ft_mem_realloc(HEAP32[i14 >> 2] | 0, 4, 0, i1, 0, i18) | 0;
      HEAP32[i29 + 544 >> 2] = i14;
      if (HEAP32[i18 >> 2] | 0) {
       HEAP32[i22 >> 2] = 0;
       break L35;
      }
     }
    } while (0);
    if ((i19 | 0) == 108) HEAP32[i22 >> 2] = 0;
    i13 = HEAP32[i17 + 152 >> 2] | 0;
    HEAP32[i29 + 416 >> 2] = i13;
    i1 = i17 + 328 | 0;
    if (HEAP32[i1 >> 2] | 0) {
     HEAP32[i1 >> 2] = 0;
     HEAP32[i29 + 404 >> 2] = HEAP32[i17 + 312 >> 2];
     HEAP32[i29 + 392 >> 2] = HEAP32[i17 + 316 >> 2];
     HEAP32[i29 + 408 >> 2] = HEAP32[i17 + 340 >> 2];
     HEAP32[i29 + 412 >> 2] = HEAP32[i17 + 344 >> 2];
    }
    i1 = i17 + 220 | 0;
    if ((HEAP32[i1 >> 2] | 0) == 0 ? (HEAP32[(HEAP32[i29 + 128 >> 2] | 0) + 48 >> 2] | 0) == 0 : 0) HEAP32[i18 >> 2] = 3;
    HEAP32[i1 >> 2] = 0;
    HEAP32[i29 + 396 >> 2] = HEAP32[i17 + 208 >> 2];
    HEAP32[i29 + 424 >> 2] = HEAP32[i17 + 232 >> 2];
    HEAP32[i29 + 428 >> 2] = HEAP32[i17 + 236 >> 2];
    i12 = i17 + 156 | 0;
    HEAP32[i29 + 400 >> 2] = HEAP32[i12 >> 2];
    i14 = i17 + 180 | 0;
    i8 = i29 + 420 | 0;
    HEAP32[i8 >> 2] = HEAP32[i14 >> 2];
    HEAP32[i12 >> 2] = 0;
    HEAP32[i14 >> 2] = 0;
    if ((HEAP32[i29 + 368 >> 2] | 0) != 1) break L35;
    i10 = HEAP32[i17 + 116 >> 2] | 0;
    L160 : do if ((i10 | 0) > 0) {
     i11 = i29 + 384 | 0;
     i12 = i29 + 388 | 0;
     i9 = i17 + 124 | 0;
     if ((i13 | 0) < 1) {
      i1 = 0;
      while (1) {
       HEAP16[(HEAP32[i11 >> 2] | 0) + (i1 << 1) >> 1] = 0;
       HEAP32[(HEAP32[i12 >> 2] | 0) + (i1 << 2) >> 2] = 280783;
       i1 = i1 + 1 | 0;
       if ((i1 | 0) == (i10 | 0)) {
        i2 = 0;
        i1 = 0;
        break L160;
       }
      }
     } else {
      i2 = 0;
      i1 = 0;
      i7 = 0;
     }
     do {
      HEAP16[(HEAP32[i11 >> 2] | 0) + (i7 << 1) >> 1] = 0;
      HEAP32[(HEAP32[i12 >> 2] | 0) + (i7 << 2) >> 2] = 280783;
      i5 = HEAP32[(HEAP32[i9 >> 2] | 0) + (i7 << 2) >> 2] | 0;
      L167 : do if (i5) {
       i6 = HEAP32[i8 >> 2] | 0;
       i3 = 0;
       while (1) {
        i4 = HEAP32[i6 + (i3 << 2) >> 2] | 0;
        if (!(_strcmp(i5, i4) | 0)) break;
        i3 = i3 + 1 | 0;
        if ((i3 | 0) >= (i13 | 0)) break L167;
       }
       HEAP16[(HEAP32[i11 >> 2] | 0) + (i7 << 1) >> 1] = i3;
       HEAP32[(HEAP32[i12 >> 2] | 0) + (i7 << 2) >> 2] = i4;
       i14 = (_strcmp(280783, i4) | 0) == 0;
       i2 = (i7 | 0) < (i2 | 0) | i14 ? i2 : i7 + 1 | 0;
       i1 = i14 ? i1 : (i7 | 0) < (i1 | 0) ? i7 : i1;
      } while (0);
      i7 = i7 + 1 | 0;
     } while ((i7 | 0) != (i10 | 0));
    } else {
     i2 = 0;
     i1 = 0;
    } while (0);
    HEAP32[i29 + 376 >> 2] = i1;
    HEAP32[i29 + 380 >> 2] = i2;
    HEAP32[i29 + 372 >> 2] = HEAP32[i17 + 96 >> 2];
    break L35;
   } while (0);
   HEAP32[i18 >> 2] = i1;
  }
 } while (0);
 i1 = HEAP32[i17 + 148 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i17 + 100 | 0);
 i1 = HEAP32[i17 + 256 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i17 + 208 | 0);
 i1 = HEAP32[i17 + 204 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i17 + 156 | 0);
 i1 = HEAP32[i17 + 308 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i17 + 260 | 0);
 i1 = HEAP32[i17 + 364 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i17 + 316 | 0);
 i1 = HEAP32[i17 + 16 >> 2] | 0;
 i14 = i17 + 84 | 0;
 _ft_mem_free(i1, HEAP32[i14 >> 2] | 0);
 HEAP32[i14 >> 2] = 0;
 if (!(HEAP8[i16 >> 0] | 0)) {
  _ft_mem_free(i1, HEAP32[i15 >> 2] | 0);
  HEAP32[i15 >> 2] = 0;
 }
 FUNCTION_TABLE_vi[HEAP32[i17 + 24 >> 2] & 127](i17);
 i1 = HEAP32[i18 >> 2] | 0;
 if ((i20 | 0) < 0 | (i1 | 0) != 0) {
  i29 = i1;
  STACKTOP = i28;
  return i29 | 0;
 }
 if ((i20 | 0) > 0) {
  i29 = 6;
  STACKTOP = i28;
  return i29 | 0;
 }
 i10 = i29 + 416 | 0;
 HEAP32[i29 + 16 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i29 + 4 >> 2] = 0;
 i3 = i29 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = i1 | 2577;
 HEAP32[i3 >> 2] = i2;
 if (HEAP8[i29 + 156 >> 0] | 0) {
  i2 = i1 | 2581;
  HEAP32[i3 >> 2] = i2;
 }
 i9 = HEAP32[i29 + 528 >> 2] | 0;
 if (i9 | 0) HEAP32[i3 >> 2] = i2 | 256;
 i1 = HEAP32[i29 + 144 >> 2] | 0;
 i2 = i29 + 20 | 0;
 HEAP32[i2 >> 2] = i1;
 i6 = i29 + 24 | 0;
 HEAP32[i6 >> 2] = 0;
 L207 : do if (!i1) {
  i1 = HEAP32[i29 + 364 >> 2] | 0;
  if (!i1) i19 = 156; else {
   HEAP32[i2 >> 2] = i1;
   i19 = 156;
  }
 } else {
  i2 = HEAP32[i29 + 140 >> 2] | 0;
  if (!i2) i19 = 156; else {
   i3 = HEAP8[i2 >> 0] | 0;
   if (!(i3 << 24 >> 24)) {
    i1 = 281615;
    i19 = 157;
   } else {
    L213 : while (1) {
     i5 = i3 << 24 >> 24 == 0;
     L215 : while (1) {
      i4 = HEAP8[i1 >> 0] | 0;
      if (i3 << 24 >> 24 == i4 << 24 >> 24) {
       i19 = 148;
       break;
      }
      switch (i3 << 24 >> 24) {
      case 45:
      case 32:
       break L215;
      default:
       {}
      }
      switch (i4 << 24 >> 24) {
      case 0:
       break L213;
      case 45:
      case 32:
       break;
      default:
       {
        i19 = 156;
        break L207;
       }
      }
      if (i5) {
       i1 = 281615;
       i19 = 157;
       break L207;
      } else i1 = i1 + 1 | 0;
     }
     if ((i19 | 0) == 148) {
      i19 = 0;
      i1 = i1 + 1 | 0;
     }
     i2 = i2 + 1 | 0;
     i3 = HEAP8[i2 >> 0] | 0;
     if (!(i3 << 24 >> 24)) {
      i1 = 281615;
      i19 = 157;
      break L207;
     }
    }
    HEAP32[i6 >> 2] = i2;
    if (!i2) i19 = 156;
   }
  }
 } while (0);
 if ((i19 | 0) == 156) {
  i1 = HEAP32[i29 + 148 >> 2] | 0;
  i1 = (i1 | 0) == 0 ? 281615 : i1;
  i19 = 157;
 }
 if ((i19 | 0) == 157) HEAP32[i6 >> 2] = i1;
 i2 = i29 + 12 | 0;
 i1 = (HEAP32[i29 + 152 >> 2] | 0) != 0 & 1;
 HEAP32[i2 >> 2] = i1;
 i3 = HEAP32[i29 + 148 >> 2] | 0;
 do if (i3 | 0) {
  if (_strcmp(i3, 355510) | 0) if (_strcmp(i3, 280361) | 0) break;
  HEAP32[i2 >> 2] = i1 | 2;
 } while (0);
 HEAP32[i29 + 28 >> 2] = 0;
 HEAP32[i29 + 32 >> 2] = 0;
 i4 = i29 + 460 | 0;
 HEAP32[i29 + 52 >> 2] = HEAP32[i4 >> 2] >> 16;
 i3 = HEAP32[i4 + 4 >> 2] >> 16;
 HEAP32[i29 + 56 >> 2] = i3;
 i5 = (HEAP32[i4 + 8 >> 2] | 0) + 65535 >> 16;
 HEAP32[i29 + 60 >> 2] = i5;
 i4 = (HEAP32[i4 + 12 >> 2] | 0) + 65535 >> 16;
 HEAP32[i29 + 64 >> 2] = i4;
 i2 = i29 + 68 | 0;
 i1 = HEAP16[i2 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  HEAP16[i2 >> 1] = 1e3;
  i1 = 1e3;
 }
 HEAP16[i29 + 70 >> 1] = i4;
 HEAP16[i29 + 72 >> 1] = i3;
 i7 = (((i1 & 65535) * 12 | 0) >>> 0) / 10 | 0;
 i8 = i29 + 74 | 0;
 i6 = i4 - i3 | 0;
 HEAP16[i8 >> 1] = (i7 << 16 >> 16 | 0) < (i6 | 0) ? i6 : i7;
 i7 = i29 + 76 | 0;
 HEAP16[i7 >> 1] = i5;
 i6 = (HEAP32[i21 >> 2] | 0) + 12 | 0;
 if (!(FUNCTION_TABLE_iiiiiiiiii[HEAP32[HEAP32[i6 >> 2] >> 2] & 1](i25, i29, 0, 0, HEAP32[i29 + 420 >> 2] | 0, i9, 0, 0, 180) | 0)) {
  HEAP8[i25 + 70 >> 0] = 1;
  HEAP8[i25 + 68 >> 0] = 0;
  HEAP32[i25 + 1364 >> 2] = HEAP32[i29 + 404 >> 2];
  HEAP32[i25 + 1368 >> 2] = HEAP32[i29 + 408 >> 2];
  HEAP32[i25 + 1372 >> 2] = HEAP32[i29 + 412 >> 2];
  HEAP32[i25 + 1488 >> 2] = HEAP32[i29 + 544 >> 2];
  HEAP32[i25 + 1492 >> 2] = HEAP32[i22 >> 2];
  if ((HEAP32[i10 >> 2] | 0) > 0) {
   i4 = i25 + 4 | 0;
   i5 = i25 + 40 | 0;
   i1 = 0;
   i3 = 0;
   do {
    do if (!(_T1_Parse_Glyph_And_Get_Char_String(i25, i3, i27) | 0)) {
     i2 = HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 128 >> 2] | 0) + 48 >> 2] | 0;
     if (!i2) break;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 63](HEAP32[i2 + 4 >> 2] | 0, i27);
    } while (0);
    i22 = HEAP32[i5 >> 2] | 0;
    i1 = (i3 | 0) == 0 | (i22 | 0) > (i1 | 0) ? i22 : i1;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (HEAP32[i10 >> 2] | 0));
  } else i1 = 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] & 127](i25);
  i25 = (_FT_RoundFix(i1) | 0) >>> 16 & 65535;
  HEAP16[i7 >> 1] = i25;
 }
 HEAP16[i29 + 78 >> 1] = HEAP16[i8 >> 1] | 0;
 HEAP16[i29 + 80 >> 1] = HEAP16[i26 + 26 >> 1] | 0;
 HEAP16[i29 + 82 >> 1] = HEAP16[i29 + 160 >> 1] | 0;
 if (!i23) {
  i29 = 0;
  STACKTOP = i28;
  return i29 | 0;
 }
 i1 = HEAP32[i24 + 20 >> 2] | 0;
 HEAP32[i27 >> 2] = i29;
 i2 = i27 + 8 | 0;
 HEAP16[i2 >> 1] = 3;
 i3 = i27 + 10 | 0;
 HEAP16[i3 >> 1] = 1;
 i4 = i27 + 4 | 0;
 HEAP32[i4 >> 2] = 1970170211;
 i5 = i1 + 12 | 0;
 i6 = _FT_CMap_New(HEAP32[i5 >> 2] | 0, 0, i27, 0) | 0;
 if (!((i6 | 0) == 0 | (i6 & 255 | 0) == 163)) {
  i29 = i6;
  STACKTOP = i28;
  return i29 | 0;
 }
 HEAP16[i2 >> 1] = 7;
 switch (HEAP32[i29 + 368 >> 2] | 0) {
 case 2:
  {
   HEAP32[i4 >> 2] = 1094995778;
   HEAP16[i3 >> 1] = 0;
   break;
  }
 case 4:
  {
   HEAP32[i4 >> 2] = 1094992453;
   HEAP16[i3 >> 1] = 1;
   i1 = i1 + 4 | 0;
   break;
  }
 case 1:
  {
   HEAP32[i4 >> 2] = 1094992451;
   HEAP16[i3 >> 1] = 2;
   i1 = i1 + 8 | 0;
   break;
  }
 case 3:
  {
   HEAP32[i4 >> 2] = 1818326065;
   HEAP16[i3 >> 1] = 3;
   i1 = i5;
   break;
  }
 default:
  {
   i29 = 0;
   STACKTOP = i28;
   return i29 | 0;
  }
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i29 = 0;
  STACKTOP = i28;
  return i29 | 0;
 }
 i29 = _FT_CMap_New(i1, 0, i27, 0) | 0;
 STACKTOP = i28;
 return i29 | 0;
}

function __bdf_parse_start(i9, i5, i1, i6, i16) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i16 = i16 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i4 = i17 + 8 | 0;
 i3 = i17;
 i12 = i17 + 32 | 0;
 i10 = i17 + 16 | 0;
 i13 = i17 + 12 | 0;
 HEAP32[i13 >> 2] = 0;
 i15 = i16 + 32 | 0;
 i7 = HEAP32[i15 >> 2] | 0;
 i1 = (i7 | 0) == 0;
 if (i1) i11 = 0; else i11 = HEAP32[i7 + 278664 >> 2] | 0;
 L4 : do if (!(_strncmp(i9, 281687, 7) | 0)) {
  i8 = i9 + 7 | 0;
  i2 = HEAP8[i8 >> 0] | 0;
  switch (i2 << 24 >> 24) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   break;
  default:
   break L4;
  }
  if ((HEAP32[(HEAP32[i16 + 36 >> 2] | 0) + 8 >> 2] | 0) == 0 | i1) {
   i16 = 0;
   STACKTOP = i17;
   return i16 | 0;
  }
  i6 = i2 << 24 >> 24 == 0;
  i3 = (i6 ? -7 : -8) + i5 | 0;
  i16 = HEAP32[i7 + 278664 >> 2] | 0;
  HEAP32[i12 >> 2] = 0;
  i4 = i7 + 88 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 1 | 0;
  i1 = i7 + 84 | 0;
  i2 = _ft_mem_realloc(i16, 1, i2, i5 + i2 | 0, HEAP32[i1 >> 2] | 0, i12) | 0;
  HEAP32[i1 >> 2] = i2;
  i1 = HEAP32[i12 >> 2] | 0;
  if (!i1) {
   i1 = i2 + (HEAP32[i4 >> 2] | 0) | 0;
   _memcpy(i1 | 0, (i6 ? i8 : i9 + 8 | 0) | 0, i3 | 0) | 0;
   HEAP8[i1 + i3 >> 0] = 10;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i5;
   i1 = HEAP32[i12 >> 2] | 0;
  }
  HEAP32[i13 >> 2] = i1;
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 } while (0);
 i1 = HEAP32[i16 >> 2] | 0;
 if (!(i1 & 1)) {
  i2 = i16 + 139320 | 0;
  i5 = HEAP32[i2 >> 2] | 0;
  L17 : do if (!(_strncmp(i9, 281695, 9) | 0)) {
   switch (HEAP8[i9 + 9 >> 0] | 0) {
   case 9:
   case 13:
   case 10:
   case 0:
   case 32:
    break;
   default:
    break L17;
   }
   HEAP32[i16 >> 2] = 1;
   HEAP32[i15 >> 2] = 0;
   i3 = _ft_mem_alloc(i5, 278692, i13) | 0;
   i1 = HEAP32[i13 >> 2] | 0;
   if (i1 | 0) {
    i16 = i1;
    STACKTOP = i17;
    return i16 | 0;
   }
   HEAP32[i15 >> 2] = i3;
   HEAP32[i3 + 278664 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i2 >> 2] = 0;
   i4 = i3 + 278676 | 0;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i3 + 278680 >> 2] = 241;
   HEAP32[i4 >> 2] = 80;
   HEAP32[i3 + 278684 >> 2] = 0;
   i1 = _ft_mem_realloc(i5, 4, 0, 241, 0, i12) | 0;
   HEAP32[i3 + 278688 >> 2] = i1;
   i1 = HEAP32[i12 >> 2] | 0;
   HEAP32[i13 >> 2] = i1;
   if (!i1) {
    i2 = 18108;
    i3 = 0;
   } else {
    i16 = i1;
    STACKTOP = i17;
    return i16 | 0;
   }
   while (1) {
    i1 = _hash_insert(HEAP32[i2 >> 2] | 0, i3, i4, i5) | 0;
    HEAP32[i13 >> 2] = i1;
    if (i1 | 0) {
     i14 = 154;
     break;
    }
    i3 = i3 + 1 | 0;
    if (i3 >>> 0 >= 83) break; else i2 = i2 + 16 | 0;
   }
   if ((i14 | 0) == 154) {
    STACKTOP = i17;
    return i1 | 0;
   }
   i1 = _ft_mem_alloc(i5, 16, i13) | 0;
   HEAP32[(HEAP32[i15 >> 2] | 0) + 128 >> 2] = i1;
   i2 = HEAP32[i13 >> 2] | 0;
   if (i2 | 0) {
    i16 = i2;
    STACKTOP = i17;
    return i16 | 0;
   }
   HEAP32[i12 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 241;
   HEAP32[i1 >> 2] = 80;
   HEAP32[i1 + 8 >> 2] = 0;
   i14 = _ft_mem_realloc(i5, 4, 0, 241, 0, i12) | 0;
   HEAP32[i1 + 12 >> 2] = i14;
   i1 = HEAP32[i12 >> 2] | 0;
   HEAP32[i13 >> 2] = i1;
   if (i1 | 0) {
    i16 = i1;
    STACKTOP = i17;
    return i16 | 0;
   }
   i15 = HEAP32[i15 >> 2] | 0;
   HEAP32[i15 + 28 >> 2] = HEAP32[(HEAP32[i16 + 36 >> 2] | 0) + 12 >> 2];
   HEAP32[i15 + 36 >> 2] = -1;
   i16 = 0;
   STACKTOP = i17;
   return i16 | 0;
  } while (0);
  HEAP32[i13 >> 2] = 176;
  i16 = 176;
  STACKTOP = i17;
  return i16 | 0;
 }
 L41 : do if (!(_strncmp(i9, 281705, 15) | 0)) {
  switch (HEAP8[i9 + 15 >> 0] | 0) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   break;
  default:
   break L41;
  }
  if (!(i1 & 8)) {
   HEAP32[i13 >> 2] = 179;
   i16 = 179;
   STACKTOP = i17;
   return i16 | 0;
  }
  i2 = i16 + 139304 | 0;
  i1 = __bdf_list_split(i2, 281721, i9, i5) | 0;
  HEAP32[i13 >> 2] = i1;
  if (i1 | 0) {
   i16 = i1;
   STACKTOP = i17;
   return i16 | 0;
  }
  i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0;
  L51 : do if (!i1) i1 = 0; else {
   i2 = HEAP8[i1 >> 0] | 0;
   L53 : do switch (i2 << 24 >> 24) {
   case 0:
    {
     i1 = 0;
     break L51;
    }
   case 48:
    {
     switch (HEAP8[i1 + 1 >> 0] | 0) {
     case 88:
     case 120:
      break;
     default:
      {
       i3 = i1;
       i4 = 281756;
       i5 = 10;
       i1 = 48;
       break L53;
      }
     }
     i1 = i1 + 2 | 0;
     i3 = i1;
     i4 = 281724;
     i5 = 16;
     i1 = HEAP8[i1 >> 0] | 0;
     break;
    }
   default:
    {
     i3 = i1;
     i4 = 281756;
     i5 = 10;
     i1 = i2;
    }
   } while (0);
   i2 = i1 << 24 >> 24;
   if (!(HEAPU8[i4 + ((i1 & 255) >>> 3) >> 0] & 1 << (i2 & 7))) i1 = 0; else {
    i1 = 0;
    do {
     i1 = Math_imul(i1, i5) | 0;
     i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 | 0;
     i3 = i3 + 1 | 0;
     i14 = HEAP8[i3 >> 0] | 0;
     i2 = i14 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i14 & 255) >>> 3) >> 0] | 0) != 0);
   }
  } while (0);
  HEAP32[(HEAP32[i15 >> 2] | 0) + 72 >> 2] = i1;
  HEAP32[i16 + 4 >> 2] = i1;
  i1 = _ft_mem_realloc(i11, 16, 0, i1, 0, i13) | 0;
  i2 = HEAP32[i15 >> 2] | 0;
  HEAP32[i2 + 80 >> 2] = i1;
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 16;
   HEAP32[i6 >> 2] = 33;
   i16 = 0;
   STACKTOP = i17;
   return i16 | 0;
  } else {
   HEAP32[i2 + 72 >> 2] = 0;
   i16 = i1;
   STACKTOP = i17;
   return i16 | 0;
  }
 } while (0);
 L66 : do if (!(_strncmp(i9, 281916, 15) | 0)) {
  switch (HEAP8[i9 + 15 >> 0] | 0) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   break;
  default:
   break L66;
  }
  if (!(i1 & 4)) {
   HEAP32[i13 >> 2] = 178;
   i16 = 178;
   STACKTOP = i17;
   return i16 | 0;
  }
  i2 = i16 + 139304 | 0;
  i1 = __bdf_list_split(i2, 281721, i9, i5) | 0;
  HEAP32[i13 >> 2] = i1;
  if (i1 | 0) {
   i16 = i1;
   STACKTOP = i17;
   return i16 | 0;
  }
  i9 = HEAP32[i2 >> 2] | 0;
  i1 = HEAP32[i9 + 4 >> 2] | 0;
  L76 : do if (!i1) i1 = 0; else {
   i2 = HEAP8[i1 >> 0] | 0;
   L78 : do switch (i2 << 24 >> 24) {
   case 0:
    {
     i1 = 0;
     break L76;
    }
   case 48:
    {
     switch (HEAP8[i1 + 1 >> 0] | 0) {
     case 88:
     case 120:
      break;
     default:
      {
       i5 = 281756;
       i6 = 10;
       i2 = 48;
       break L78;
      }
     }
     i2 = i1 + 2 | 0;
     i1 = i2;
     i5 = 281724;
     i6 = 16;
     i2 = HEAP8[i2 >> 0] | 0;
     break;
    }
   default:
    {
     i5 = 281756;
     i6 = 10;
    }
   } while (0);
   i4 = i2 << 24 >> 24;
   if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
    i3 = 0;
    i2 = i4;
    do {
     i14 = Math_imul(i3 & 65535, i6) | 0;
     i3 = (HEAPU8[281788 + i2 >> 0] | 0) + i14 | 0;
     i1 = i1 + 1 | 0;
     i14 = HEAP8[i1 >> 0] | 0;
     i2 = i14 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i14 & 255) >>> 3) >> 0] | 0) != 0);
    i1 = i3 & 65535;
   }
  } while (0);
  i10 = HEAP32[i15 >> 2] | 0;
  HEAP16[i10 + 4 >> 1] = i1;
  i1 = HEAP32[i9 + 8 >> 2] | 0;
  L86 : do if (!i1) i8 = 0; else {
   i2 = HEAP8[i1 >> 0] | 0;
   L88 : do switch (i2 << 24 >> 24) {
   case 0:
    {
     i8 = 0;
     break L86;
    }
   case 48:
    {
     switch (HEAP8[i1 + 1 >> 0] | 0) {
     case 88:
     case 120:
      break;
     default:
      {
       i5 = 281756;
       i6 = 10;
       i2 = 48;
       break L88;
      }
     }
     i2 = i1 + 2 | 0;
     i1 = i2;
     i5 = 281724;
     i6 = 16;
     i2 = HEAP8[i2 >> 0] | 0;
     break;
    }
   default:
    {
     i5 = 281756;
     i6 = 10;
    }
   } while (0);
   i4 = i2 << 24 >> 24;
   if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i8 = 0; else {
    i3 = 0;
    i2 = i4;
    do {
     i15 = Math_imul(i3 & 65535, i6) | 0;
     i3 = (HEAPU8[281788 + i2 >> 0] | 0) + i15 | 0;
     i1 = i1 + 1 | 0;
     i15 = HEAP8[i1 >> 0] | 0;
     i2 = i15 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i15 & 255) >>> 3) >> 0] | 0) != 0);
    i8 = i3 & 65535;
   }
  } while (0);
  HEAP16[i10 + 6 >> 1] = i8;
  i2 = HEAP32[i9 + 12 >> 2] | 0;
  if (!i2) i1 = 0; else {
   i1 = HEAP8[i2 >> 0] | 0;
   if (!(i1 << 24 >> 24)) i1 = 0; else {
    i7 = i1 << 24 >> 24 == 45;
    i1 = i7 ? i2 + 1 | 0 : i2;
    i2 = HEAP8[i1 >> 0] | 0;
    L99 : do if (i2 << 24 >> 24 == 48) {
     switch (HEAP8[i1 + 1 >> 0] | 0) {
     case 88:
     case 120:
      break;
     default:
      {
       i5 = 281756;
       i6 = 10;
       i2 = 48;
       break L99;
      }
     }
     i2 = i1 + 2 | 0;
     i5 = 281724;
     i6 = 16;
     i1 = i2;
     i2 = HEAP8[i2 >> 0] | 0;
    } else {
     i5 = 281756;
     i6 = 10;
    } while (0);
    i4 = i2 << 24 >> 24;
    if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
     i3 = i1;
     i1 = 0;
     i2 = i4;
     do {
      i1 = Math_imul(i1, i6) | 0;
      i3 = i3 + 1 | 0;
      i15 = HEAP8[i3 >> 0] | 0;
      i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 << 16 >> 16;
      i2 = i15 << 24 >> 24;
     } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i15 & 255) >>> 3) >> 0] | 0) != 0);
    }
    i1 = (i7 ? 0 - i1 | 0 : i1) & 65535;
   }
  }
  HEAP16[i10 + 8 >> 1] = i1;
  i2 = HEAP32[i9 + 16 >> 2] | 0;
  if (!i2) i1 = 0; else {
   i1 = HEAP8[i2 >> 0] | 0;
   if (!(i1 << 24 >> 24)) i1 = 0; else {
    i7 = i1 << 24 >> 24 == 45;
    i1 = i7 ? i2 + 1 | 0 : i2;
    i2 = HEAP8[i1 >> 0] | 0;
    L111 : do if (i2 << 24 >> 24 == 48) {
     switch (HEAP8[i1 + 1 >> 0] | 0) {
     case 88:
     case 120:
      break;
     default:
      {
       i5 = 281756;
       i6 = 10;
       i2 = 48;
       break L111;
      }
     }
     i2 = i1 + 2 | 0;
     i5 = 281724;
     i6 = 16;
     i1 = i2;
     i2 = HEAP8[i2 >> 0] | 0;
    } else {
     i5 = 281756;
     i6 = 10;
    } while (0);
    i4 = i2 << 24 >> 24;
    if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
     i3 = i1;
     i1 = 0;
     i2 = i4;
     do {
      i1 = Math_imul(i1, i6) | 0;
      i3 = i3 + 1 | 0;
      i15 = HEAP8[i3 >> 0] | 0;
      i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 << 16 >> 16;
      i2 = i15 << 24 >> 24;
     } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i15 & 255) >>> 3) >> 0] | 0) != 0);
    }
    i1 = (i7 ? 0 - i1 | 0 : i1) & 65535;
   }
  }
  HEAP16[i10 + 10 >> 1] = i1;
  i15 = i1 & 65535;
  HEAP16[i10 + 12 >> 1] = i15 + (i8 & 65535);
  HEAP16[i10 + 14 >> 1] = 0 - i15;
  HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 8;
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 } while (0);
 L122 : do if (!(_strncmp(i9, 281932, 4) | 0)) {
  switch (HEAP8[i9 + 4 >> 0] | 0) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   break;
  default:
   break L122;
  }
  i8 = i16 + 139304 | 0;
  i1 = __bdf_list_split(i8, 281721, i9, i5) | 0;
  HEAP32[i13 >> 2] = i1;
  if (i1 | 0) {
   i16 = i1;
   STACKTOP = i17;
   return i16 | 0;
  }
  i7 = i16 + 139312 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  L128 : do switch (i1 | 0) {
  case 0:
   break;
  case 1:
   {
    HEAP32[i7 >> 2] = 0;
    break;
   }
  default:
   {
    i5 = i1 + -1 | 0;
    i1 = 1;
    i2 = 0;
    while (1) {
     i14 = HEAP32[i8 >> 2] | 0;
     HEAP32[i14 + (i2 << 2) >> 2] = HEAP32[i14 + (i1 << 2) >> 2];
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i5 | 0)) break; else i1 = i1 + 1 | 0;
    }
    HEAP32[i7 >> 2] = i5;
    if (i5 | 0) {
     i4 = HEAP32[HEAP32[i8 >> 2] >> 2] | 0;
     i2 = 0;
     i6 = 0;
     i3 = i4;
     while (1) {
      i1 = HEAP8[i3 >> 0] | 0;
      if (!(i1 << 24 >> 24)) {
       i1 = i2;
       i2 = i5;
      } else {
       do {
        i3 = i3 + 1 | 0;
        i14 = i2;
        i2 = i2 + 1 | 0;
        HEAP8[i4 + i14 >> 0] = i1;
        i1 = HEAP8[i3 >> 0] | 0;
       } while (i1 << 24 >> 24 != 0);
       i1 = i2;
       i2 = HEAP32[i7 >> 2] | 0;
      }
      i3 = i6 + 1 | 0;
      if (i3 >>> 0 < i2 >>> 0) {
       HEAP8[i4 + i1 >> 0] = 32;
       i1 = i1 + 1 | 0;
       i5 = HEAP32[i7 >> 2] | 0;
      } else i5 = i2;
      if (i3 >>> 0 >= i5 >>> 0) break;
      i2 = i1;
      i6 = i3;
      i3 = HEAP32[(HEAP32[i8 >> 2] | 0) + (i3 << 2) >> 2] | 0;
     }
     if ((i4 | 0) == 369704) i4 = 369704; else {
      HEAP8[i4 + i1 >> 0] = 0;
      if (!i4) break L128;
     }
     _ft_mem_free(i11, HEAP32[HEAP32[i15 >> 2] >> 2] | 0);
     HEAP32[HEAP32[i15 >> 2] >> 2] = 0;
     i3 = i1 + 1 | 0;
     i1 = _ft_mem_realloc(i11, 1, 0, i3, 0, i13) | 0;
     HEAP32[HEAP32[i15 >> 2] >> 2] = i1;
     i2 = HEAP32[i13 >> 2] | 0;
     if (i2 | 0) {
      i16 = i2;
      STACKTOP = i17;
      return i16 | 0;
     }
     _memcpy(i1 | 0, i4 | 0, i3 | 0) | 0;
     i1 = HEAP32[i15 >> 2] | 0;
     i2 = HEAP32[i16 + 36 >> 2] | 0;
     if (i1 | 0) {
      i3 = HEAP32[i1 >> 2] | 0;
      if (i3 | 0) if (HEAP8[i3 >> 0] | 0) {
       i4 = HEAP32[i1 + 278664 >> 2] | 0;
       HEAP32[i10 >> 2] = 0;
       HEAP32[i10 + 4 >> 2] = 0;
       HEAP32[i10 + 8 >> 2] = 0;
       i5 = i10 + 12 | 0;
       HEAP32[i5 >> 2] = i4;
       i4 = i1 + 28 | 0;
       HEAP32[i4 >> 2] = HEAP32[i2 + 12 >> 2];
       i1 = (_strlen(i3) | 0) + 1 | 0;
       if (i1 >>> 0 <= 255) {
        _memcpy(i12 | 0, i3 | 0, i1 | 0) | 0;
        i2 = __bdf_list_split(i10, 281937, i12, i1) | 0;
        i3 = (i2 | 0) == 0;
        L157 : do if (i3) if ((HEAP32[i10 + 8 >> 2] | 0) == 15) {
         switch (HEAP8[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] >> 0] | 0) {
         case 99:
         case 67:
          {
           i1 = 32;
           break;
          }
         case 109:
         case 77:
          {
           i1 = 16;
           break;
          }
         case 112:
         case 80:
          {
           i1 = 8;
           break;
          }
         default:
          break L157;
         }
         HEAP32[i4 >> 2] = i1;
        } while (0);
        i1 = HEAP32[i5 >> 2] | 0;
        if (i1 | 0) {
         _ft_mem_free(i1, HEAP32[i10 >> 2] | 0);
         HEAP32[i10 >> 2] = 0;
         HEAP32[i10 + 4 >> 2] = 0;
         HEAP32[i10 + 8 >> 2] = 0;
         HEAP32[i10 + 12 >> 2] = 0;
        }
        HEAP32[i13 >> 2] = i2;
        if (!i3) {
         i16 = i2;
         STACKTOP = i17;
         return i16 | 0;
        }
        HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 2;
        i16 = 0;
        STACKTOP = i17;
        return i16 | 0;
       }
      }
     }
     HEAP32[i13 >> 2] = 6;
     i16 = 6;
     STACKTOP = i17;
     return i16 | 0;
    }
   }
  } while (0);
  HEAP32[i13 >> 2] = 3;
  i16 = 3;
  STACKTOP = i17;
  return i16 | 0;
 } while (0);
 L178 : do if (!(_strncmp(i9, 281939, 4) | 0)) {
  switch (HEAP8[i9 + 4 >> 0] | 0) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   break;
  default:
   break L178;
  }
  if (!(i1 & 2)) {
   HEAP32[i13 >> 2] = 177;
   i16 = 177;
   STACKTOP = i17;
   return i16 | 0;
  }
  i2 = i16 + 139304 | 0;
  i1 = __bdf_list_split(i2, 281721, i9, i5) | 0;
  HEAP32[i13 >> 2] = i1;
  if (i1 | 0) {
   i16 = i1;
   STACKTOP = i17;
   return i16 | 0;
  }
  i7 = HEAP32[i2 >> 2] | 0;
  i1 = HEAP32[i7 + 4 >> 2] | 0;
  L188 : do if (!i1) i1 = 0; else {
   i2 = HEAP8[i1 >> 0] | 0;
   L190 : do switch (i2 << 24 >> 24) {
   case 0:
    {
     i1 = 0;
     break L188;
    }
   case 48:
    {
     switch (HEAP8[i1 + 1 >> 0] | 0) {
     case 88:
     case 120:
      break;
     default:
      {
       i3 = i1;
       i5 = 281756;
       i6 = 10;
       i2 = 48;
       break L190;
      }
     }
     i2 = i1 + 2 | 0;
     i3 = i2;
     i5 = 281724;
     i6 = 16;
     i2 = HEAP8[i2 >> 0] | 0;
     break;
    }
   default:
    {
     i3 = i1;
     i5 = 281756;
     i6 = 10;
    }
   } while (0);
   i4 = i2 << 24 >> 24;
   if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
    i1 = 0;
    i2 = i4;
    do {
     i1 = Math_imul(i1, i6) | 0;
     i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 | 0;
     i3 = i3 + 1 | 0;
     i13 = HEAP8[i3 >> 0] | 0;
     i2 = i13 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i13 & 255) >>> 3) >> 0] | 0) != 0);
   }
  } while (0);
  i8 = HEAP32[i15 >> 2] | 0;
  HEAP32[i8 + 16 >> 2] = i1;
  i1 = HEAP32[i7 + 8 >> 2] | 0;
  L197 : do if (!i1) i1 = 0; else {
   i2 = HEAP8[i1 >> 0] | 0;
   L199 : do switch (i2 << 24 >> 24) {
   case 0:
    {
     i1 = 0;
     break L197;
    }
   case 48:
    {
     switch (HEAP8[i1 + 1 >> 0] | 0) {
     case 88:
     case 120:
      break;
     default:
      {
       i3 = i1;
       i5 = 281756;
       i6 = 10;
       i2 = 48;
       break L199;
      }
     }
     i2 = i1 + 2 | 0;
     i3 = i2;
     i5 = 281724;
     i6 = 16;
     i2 = HEAP8[i2 >> 0] | 0;
     break;
    }
   default:
    {
     i3 = i1;
     i5 = 281756;
     i6 = 10;
    }
   } while (0);
   i4 = i2 << 24 >> 24;
   if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
    i1 = 0;
    i2 = i4;
    do {
     i1 = Math_imul(i1, i6) | 0;
     i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 | 0;
     i3 = i3 + 1 | 0;
     i15 = HEAP8[i3 >> 0] | 0;
     i2 = i15 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i15 & 255) >>> 3) >> 0] | 0) != 0);
   }
  } while (0);
  HEAP32[i8 + 20 >> 2] = i1;
  i1 = HEAP32[i7 + 12 >> 2] | 0;
  L206 : do if (!i1) i1 = 0; else {
   i2 = HEAP8[i1 >> 0] | 0;
   L208 : do switch (i2 << 24 >> 24) {
   case 0:
    {
     i1 = 0;
     break L206;
    }
   case 48:
    {
     switch (HEAP8[i1 + 1 >> 0] | 0) {
     case 88:
     case 120:
      break;
     default:
      {
       i3 = i1;
       i5 = 281756;
       i6 = 10;
       i2 = 48;
       break L208;
      }
     }
     i2 = i1 + 2 | 0;
     i3 = i2;
     i5 = 281724;
     i6 = 16;
     i2 = HEAP8[i2 >> 0] | 0;
     break;
    }
   default:
    {
     i3 = i1;
     i5 = 281756;
     i6 = 10;
    }
   } while (0);
   i4 = i2 << 24 >> 24;
   if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
    i1 = 0;
    i2 = i4;
    do {
     i1 = Math_imul(i1, i6) | 0;
     i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 | 0;
     i3 = i3 + 1 | 0;
     i15 = HEAP8[i3 >> 0] | 0;
     i2 = i15 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i15 & 255) >>> 3) >> 0] | 0) != 0);
   }
  } while (0);
  HEAP32[i8 + 24 >> 2] = i1;
  if ((HEAP32[i16 + 139312 >> 2] | 0) == 5) {
   i2 = HEAP32[i7 + 16 >> 2] | 0;
   do if (!i2) i14 = 136; else {
    i1 = HEAP8[i2 >> 0] | 0;
    if (!(i1 << 24 >> 24)) i14 = 136; else {
     i7 = i1 << 24 >> 24 == 45;
     i1 = i7 ? i2 + 1 | 0 : i2;
     i2 = HEAP8[i1 >> 0] | 0;
     L220 : do if (i2 << 24 >> 24 == 48) {
      switch (HEAP8[i1 + 1 >> 0] | 0) {
      case 88:
      case 120:
       break;
      default:
       {
        i5 = 281756;
        i6 = 10;
        i2 = 48;
        break L220;
       }
      }
      i2 = i1 + 2 | 0;
      i5 = 281724;
      i6 = 16;
      i1 = i2;
      i2 = HEAP8[i2 >> 0] | 0;
     } else {
      i5 = 281756;
      i6 = 10;
     } while (0);
     i4 = i2 << 24 >> 24;
     if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
      i3 = i1;
      i1 = 0;
      i2 = i4;
      do {
       i1 = Math_imul(i1, i6) | 0;
       i3 = i3 + 1 | 0;
       i15 = HEAP8[i3 >> 0] | 0;
       i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 << 16 >> 16;
       i2 = i15 << 24 >> 24;
      } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i15 & 255) >>> 3) >> 0] | 0) != 0);
     }
     i5 = i7 ? 0 - i1 | 0 : i1;
     i3 = i5 & 65535;
     i2 = i8 + 278662 | 0;
     HEAP16[i2 >> 1] = i3;
     if (!(i3 << 16 >> 16)) {
      i1 = 0;
      i3 = 0;
      break;
     } else {
      i4 = 0;
      i1 = 0;
     }
     while (1) {
      i1 = (i3 & 1) == 0 ? i1 : i4;
      i3 = (i3 & 65535) >>> 1;
      if (!(i3 << 16 >> 16)) break; else i4 = i4 + 1 << 16 >> 16;
     }
     i3 = i5 & 65535;
    }
   } while (0);
   if ((i14 | 0) == 136) {
    i2 = i8 + 278662 | 0;
    HEAP16[i2 >> 1] = 0;
    i1 = 0;
    i3 = 0;
   }
   i1 = (i1 & 65535) > 3 ? 8 : 1 << (i1 & 65535) & 65535;
   if ((i3 | 0) != (i1 | 0)) {
    i1 = i1 << 1 & 65535;
    i14 = 143;
   }
  } else {
   i2 = i8 + 278662 | 0;
   i1 = 1;
   i14 = 143;
  }
  if ((i14 | 0) == 143) HEAP16[i2 >> 1] = i1;
  HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 4;
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 } while (0);
 L241 : do if (!(_strncmp(i9, 281944, 5) | 0)) {
  switch (HEAP8[i9 + 5 >> 0] | 0) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   break;
  default:
   break L241;
  }
  if (!(i1 & 8)) {
   HEAP32[i13 >> 2] = 179;
   i1 = 179;
  } else {
   i1 = HEAP16[i7 + 12 >> 1] | 0;
   HEAP32[i7 + 40 >> 2] = i1;
   HEAP32[i3 >> 2] = i1;
   _sprintf(i12, 281950, i3) | 0;
   i1 = __bdf_add_property(HEAP32[i15 >> 2] | 0, 281954, i12) | 0;
   HEAP32[i13 >> 2] = i1;
   if (!i1) {
    i16 = HEAP32[i15 >> 2] | 0;
    i1 = HEAP16[i16 + 14 >> 1] | 0;
    HEAP32[i16 + 44 >> 2] = i1;
    HEAP32[i4 >> 2] = i1;
    _sprintf(i12, 281950, i4) | 0;
    i1 = __bdf_add_property(HEAP32[i15 >> 2] | 0, 281966, i12) | 0;
    HEAP32[i13 >> 2] = i1;
    if (!i1) {
     HEAP16[(HEAP32[i15 >> 2] | 0) + 278660 >> 1] = 1;
     HEAP32[i6 >> 2] = 34;
     HEAP32[i13 >> 2] = -1;
     i1 = -1;
    }
   }
  }
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 } while (0);
 HEAP32[i13 >> 2] = 3;
 i16 = 3;
 STACKTOP = i17;
 return i16 | 0;
}

function _tt_glyph_load(i24, i31, i30, i1) {
 i24 = i24 | 0;
 i31 = i31 | 0;
 i30 = i30 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i32 = 0, i33 = 0, i34 = 0;
 i32 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i25 = i32 + 224 | 0;
 i27 = i32 + 208 | 0;
 i26 = i32;
 i3 = i24 + 4 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if (!i24) {
  i31 = 37;
  STACKTOP = i32;
  return i31 | 0;
 }
 if (!i31) {
  i31 = 36;
  STACKTOP = i32;
  return i31 | 0;
 }
 if (!i2) {
  i31 = 35;
  STACKTOP = i32;
  return i31 | 0;
 }
 if ((HEAP32[i2 + 16 >> 2] | 0) >>> 0 <= i30 >>> 0) if (!(HEAP32[(HEAP32[i2 + 128 >> 2] | 0) + 48 >> 2] | 0)) {
  i31 = 6;
  STACKTOP = i32;
  return i31 | 0;
 }
 if (i1 & 2) {
  i1 = (HEAP32[i2 + 8 >> 2] & 8192 | 0) == 0 ? i1 : i1 & -3;
  i1 = i1 >>> 14 & 2 | i1;
 }
 if (!(i1 & 1025)) i22 = i1; else i22 = (HEAP32[i2 + 8 >> 2] | 0) >>> 12 & 2 ^ 11 | i1;
 i1 = HEAP32[i31 + 112 >> 2] | 0;
 do if ((i22 & 8 | 0) == 0 & (i1 | 0) != -1) {
  if (FUNCTION_TABLE_iiiiiiii[HEAP32[(HEAP32[i2 + 532 >> 2] | 0) + 72 >> 2] & 1](i2, i1, i30, i22, HEAP32[i2 + 104 >> 2] | 0, i24 + 76 | 0, i25) | 0) {
   i29 = 24;
   break;
  }
  HEAP16[i24 + 110 >> 1] = 0;
  HEAP16[i24 + 108 >> 1] = 0;
  HEAP32[i24 + 24 >> 2] = HEAPU16[i25 + 2 >> 1] << 6;
  HEAP32[i24 + 28 >> 2] = HEAPU16[i25 >> 1] << 6;
  i21 = HEAP16[i25 + 4 >> 1] | 0;
  HEAP32[i24 + 32 >> 2] = i21 << 6;
  i27 = HEAP16[i25 + 6 >> 1] | 0;
  HEAP32[i24 + 36 >> 2] = i27 << 6;
  i4 = i24 + 40 | 0;
  HEAP32[i4 >> 2] = HEAPU16[i25 + 8 >> 1] << 6;
  i23 = HEAP16[i25 + 10 >> 1] | 0;
  HEAP32[i24 + 44 >> 2] = i23 << 6;
  i28 = HEAP16[i25 + 12 >> 1] | 0;
  HEAP32[i24 + 48 >> 2] = i28 << 6;
  i5 = i24 + 52 | 0;
  HEAP32[i5 >> 2] = HEAPU16[i25 + 14 >> 1] << 6;
  HEAP32[i24 + 72 >> 2] = 1651078259;
  i25 = (i22 & 16 | 0) == 0;
  HEAP32[i24 + 100 >> 2] = i25 ? i21 : i23;
  HEAP32[i24 + 104 >> 2] = i25 ? i27 : i28;
  i3 = HEAP32[i3 >> 2] | 0;
  if (!(HEAP32[i3 + 8 >> 2] & 1)) i1 = 0; else {
   i2 = HEAP32[i3 + 104 >> 2] | 0;
   _memset(i26 | 0, 0, 208) | 0;
   if (!(HEAP32[(HEAP32[i3 + 128 >> 2] | 0) + 48 >> 2] | 0)) {
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i3 + 508 >> 2] & 127](i3, 1735162214, i2, 0) | 0;
    if ((i1 & 255 | 0) == 142) {
     i1 = 0;
     i29 = 18;
    } else if (!i1) {
     i1 = _FT_Stream_Pos(i2) | 0;
     i29 = 18;
    }
   } else {
    i1 = 0;
    i29 = 18;
   }
   if ((i29 | 0) == 18) {
    HEAP32[i26 + 84 >> 2] = i1;
    HEAP32[i26 + 16 >> 2] = i22;
    HEAP32[i26 >> 2] = i3;
    HEAP32[i26 + 4 >> 2] = i31;
    HEAP32[i26 + 8 >> 2] = i24;
    HEAP32[i26 + 24 >> 2] = i2;
   }
   _load_truetype_glyph(i26, i30, 0, 1) | 0;
   i2 = HEAP32[i26 + 60 >> 2] | 0;
   HEAP32[i24 + 56 >> 2] = i2;
   i1 = i24 + 60 | 0;
   HEAP32[i1 >> 2] = HEAP32[i26 + 180 >> 2];
   if (!((i2 | 0) == 0 | (HEAP32[i4 >> 2] | 0) != 0)) {
    i30 = _FT_MulFix(i2, HEAP32[i31 + 16 >> 2] | 0) | 0;
    HEAP32[i4 >> 2] = i30;
   }
   if (!(HEAP32[i5 >> 2] | 0)) {
    i1 = HEAP32[i1 >> 2] | 0;
    if (!i1) i1 = 0; else {
     i1 = _FT_MulFix(i1, HEAP32[i31 + 20 >> 2] | 0) | 0;
     HEAP32[i5 >> 2] = i1;
     i1 = 0;
    }
   } else i1 = 0;
  }
 } else i29 = 24; while (0);
 L38 : do if ((i29 | 0) == 24) {
  i28 = (i22 & 1 | 0) != 0;
  if (!i28) if (!(HEAP8[i31 + 108 >> 0] | 0)) {
   i1 = 36;
   break;
  }
  if (!(i22 & 16384)) {
   i19 = i22 & 128;
   i20 = HEAP32[i3 >> 2] | 0;
   i21 = HEAP32[i20 + 104 >> 2] | 0;
   _memset(i26 | 0, 0, 208) | 0;
   i23 = (i22 & 2 | 0) == 0;
   if (i23) {
    i18 = i31 + 296 | 0;
    i1 = HEAP32[i18 >> 2] | 0;
    L46 : do if ((i1 | 0) < 0) {
     i11 = HEAP32[i31 >> 2] | 0;
     i8 = HEAP32[i11 + 100 >> 2] | 0;
     i4 = i31 + 124 | 0;
     _ft_mem_free(i8, HEAP32[i4 >> 2] | 0);
     HEAP32[i4 >> 2] = 0;
     i5 = i31 + 136 | 0;
     _ft_mem_free(i8, HEAP32[i5 >> 2] | 0);
     HEAP32[i5 >> 2] = 0;
     i6 = i31 + 244 | 0;
     _ft_mem_free(i8, HEAP32[i6 >> 2] | 0);
     HEAP32[i6 >> 2] = 0;
     i7 = i31 + 252 | 0;
     _ft_mem_free(i8, HEAP32[i7 >> 2] | 0);
     HEAP32[i7 >> 2] = 0;
     i12 = i31 + 292 | 0;
     i1 = HEAP32[i12 >> 2] | 0;
     if (i1 | 0) {
      i17 = HEAP32[i1 + 8 >> 2] | 0;
      HEAP16[i1 + 440 >> 1] = 0;
      HEAP16[i1 + 442 >> 1] = 0;
      i16 = i1 + 24 | 0;
      _ft_mem_free(i17, HEAP32[i16 >> 2] | 0);
      HEAP32[i16 >> 2] = 0;
      HEAP32[i1 + 20 >> 2] = 0;
      i16 = i1 + 436 | 0;
      _ft_mem_free(i17, HEAP32[i16 >> 2] | 0);
      HEAP32[i16 >> 2] = 0;
      HEAP32[i1 + 432 >> 2] = 0;
      HEAP32[i1 + 428 >> 2] = 0;
      i16 = i1 + 392 | 0;
      _ft_mem_free(i17, HEAP32[i16 >> 2] | 0);
      HEAP32[i16 >> 2] = 0;
      HEAP32[i1 + 388 >> 2] = 0;
      HEAP32[i1 + 4 >> 2] = 0;
      HEAP32[i1 >> 2] = 0;
      _ft_mem_free(i17, i1);
     }
     i9 = i31 + 256 | 0;
     i1 = HEAP32[i9 >> 2] | 0;
     if (i1 | 0) {
      i17 = i9 + 28 | 0;
      _ft_mem_free(i1, HEAP32[i17 >> 2] | 0);
      HEAP32[i17 >> 2] = 0;
      i17 = i9 + 24 | 0;
      _ft_mem_free(i1, HEAP32[i17 >> 2] | 0);
      HEAP32[i17 >> 2] = 0;
      i17 = i9 + 16 | 0;
      _ft_mem_free(i1, HEAP32[i17 >> 2] | 0);
      HEAP32[i17 >> 2] = 0;
      i17 = i9 + 12 | 0;
      _ft_mem_free(i1, HEAP32[i17 >> 2] | 0);
      HEAP32[i17 >> 2] = 0;
      i17 = i9 + 20 | 0;
      _ft_mem_free(i1, HEAP32[i17 >> 2] | 0);
      HEAP32[i17 >> 2] = 0;
      HEAP32[i9 >> 2] = 0;
      HEAP32[i9 + 4 >> 2] = 0;
      HEAP32[i9 + 8 >> 2] = 0;
     }
     HEAP32[i18 >> 2] = -1;
     i13 = i31 + 300 | 0;
     HEAP32[i13 >> 2] = -1;
     i10 = i11 + 96 | 0;
     i33 = _TT_New_Context(HEAP32[i10 >> 2] | 0) | 0;
     HEAP32[i12 >> 2] = i33;
     i33 = HEAPU16[i11 + 280 >> 1] | 0;
     HEAP32[i31 + 120 >> 2] = i33;
     i1 = i31 + 132 | 0;
     HEAP32[i1 >> 2] = HEAPU16[i11 + 282 >> 1];
     i14 = i31 + 116 | 0;
     HEAP32[i14 >> 2] = 0;
     i15 = i31 + 128 | 0;
     HEAP32[i15 >> 2] = 0;
     i16 = i31 + 140 | 0;
     HEAP32[i16 >> 2] = 0;
     i17 = i31 + 144 | 0;
     HEAP32[i17 >> 2] = 0;
     i2 = i31 + 240 | 0;
     HEAP32[i2 >> 2] = HEAP32[i11 + 644 >> 2];
     i3 = i31 + 248 | 0;
     HEAP16[i3 >> 1] = HEAP16[i11 + 278 >> 1] | 0;
     i34 = i31 + 72 | 0;
     HEAP8[i34 + 37 >> 0] = 0;
     HEAP8[i34 + 38 >> 0] = 0;
     i34 = i34 + 20 | 0;
     HEAP32[i34 >> 2] = 0;
     HEAP32[i34 + 4 >> 2] = 0;
     HEAP32[i34 + 8 >> 2] = 0;
     HEAP32[i34 + 12 >> 2] = 0;
     i33 = _ft_mem_realloc(i8, 24, 0, i33, 0, i27) | 0;
     HEAP32[i4 >> 2] = i33;
     L54 : do if (!(HEAP32[i27 >> 2] | 0)) {
      i34 = _ft_mem_realloc(i8, 24, 0, HEAP32[i1 >> 2] | 0, 0, i27) | 0;
      HEAP32[i5 >> 2] = i34;
      if (!(HEAP32[i27 >> 2] | 0)) {
       i34 = _ft_mem_realloc(i8, 4, 0, HEAP32[i2 >> 2] | 0, 0, i27) | 0;
       HEAP32[i6 >> 2] = i34;
       if (!(HEAP32[i27 >> 2] | 0)) {
        i34 = _ft_mem_realloc(i8, 4, 0, HEAPU16[i3 >> 1] | 0, 0, i27) | 0;
        HEAP32[i7 >> 2] = i34;
        if (HEAP32[i27 >> 2] | 0) break;
        i1 = (HEAPU16[i11 + 276 >> 1] | 0) + 4 | 0;
        i4 = i1 & 65535;
        i3 = i9 + 4 | 0;
        HEAP32[i3 >> 2] = 0;
        HEAP32[i3 + 4 >> 2] = 0;
        HEAP32[i3 + 8 >> 2] = 0;
        HEAP32[i3 + 12 >> 2] = 0;
        HEAP32[i3 + 16 >> 2] = 0;
        HEAP32[i3 + 20 >> 2] = 0;
        HEAP32[i3 + 24 >> 2] = 0;
        HEAP32[i3 + 28 >> 2] = 0;
        HEAP32[i9 >> 2] = i8;
        i1 = i1 & 65535;
        i2 = _ft_mem_realloc(i8, 8, 0, i1, 0, i25) | 0;
        i5 = i9 + 12 | 0;
        HEAP32[i5 >> 2] = i2;
        i2 = HEAP32[i25 >> 2] | 0;
        do if (!i2) {
         i2 = _ft_mem_realloc(i8, 8, 0, i1, 0, i25) | 0;
         HEAP32[i9 + 16 >> 2] = i2;
         i2 = HEAP32[i25 >> 2] | 0;
         if (i2 | 0) {
          i29 = 43;
          break;
         }
         i2 = _ft_mem_realloc(i8, 8, 0, i1, 0, i25) | 0;
         HEAP32[i9 + 20 >> 2] = i2;
         i2 = HEAP32[i25 >> 2] | 0;
         if (i2 | 0) {
          i29 = 43;
          break;
         }
         i2 = _ft_mem_realloc(i8, 1, 0, i1, 0, i25) | 0;
         HEAP32[i9 + 24 >> 2] = i2;
         i2 = HEAP32[i25 >> 2] | 0;
         if (i2 | 0) {
          i29 = 43;
          break;
         }
         i1 = _ft_mem_realloc(i8, 2, 0, 0, 0, i25) | 0;
         HEAP32[i9 + 28 >> 2] = i1;
         i1 = HEAP32[i25 >> 2] | 0;
         if (i1 | 0) {
          i2 = i1;
          i29 = 43;
          break;
         }
         HEAP16[i3 >> 1] = i4;
         HEAP16[i9 + 6 >> 1] = 0;
         HEAP32[i27 >> 2] = 0;
        } else i29 = 43; while (0);
        do if ((i29 | 0) == 43) {
         i1 = HEAP32[i9 >> 2] | 0;
         if (!i1) {
          HEAP32[i27 >> 2] = i2;
          break L54;
         } else {
          i34 = i9 + 28 | 0;
          _ft_mem_free(i1, HEAP32[i34 >> 2] | 0);
          HEAP32[i34 >> 2] = 0;
          i34 = i9 + 24 | 0;
          _ft_mem_free(i1, HEAP32[i34 >> 2] | 0);
          HEAP32[i34 >> 2] = 0;
          i34 = i9 + 16 | 0;
          _ft_mem_free(i1, HEAP32[i34 >> 2] | 0);
          HEAP32[i34 >> 2] = 0;
          _ft_mem_free(i1, HEAP32[i5 >> 2] | 0);
          HEAP32[i5 >> 2] = 0;
          i34 = i9 + 20 | 0;
          _ft_mem_free(i1, HEAP32[i34 >> 2] | 0);
          HEAP32[i34 >> 2] = 0;
          HEAP32[i9 >> 2] = 0;
          HEAP32[i9 + 4 >> 2] = 0;
          HEAP32[i9 + 8 >> 2] = 0;
          i34 = HEAP32[i25 >> 2] | 0;
          HEAP32[i27 >> 2] = i34;
          if (!i34) break; else break L54;
         }
        } while (0);
        HEAP16[i9 + 8 >> 1] = i4;
        i1 = i31 + 172 | 0;
        i3 = 5264;
        i4 = i1 + 68 | 0;
        do {
         HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
         i1 = i1 + 4 | 0;
         i3 = i3 + 4 | 0;
        } while ((i1 | 0) < (i4 | 0));
        i3 = HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) + 172 >> 2] | 0;
        HEAP32[i11 + 652 >> 2] = (i3 | 0) == 0 ? 48 : i3;
        i3 = HEAP32[i31 >> 2] | 0;
        i4 = HEAP32[i12 >> 2] | 0;
        i1 = _TT_Load_Context(i4, i3, i31) | 0;
        do if (!i1) {
         HEAP32[i4 + 428 >> 2] = 0;
         HEAP32[i4 + 16 >> 2] = 0;
         HEAP32[i4 + 476 >> 2] = 64;
         HEAP32[i4 + 480 >> 2] = 0;
         HEAP32[i4 + 484 >> 2] = 0;
         HEAP8[i4 + 488 >> 0] = 0;
         HEAP32[i4 + 564 >> 2] = 16384;
         HEAP8[i4 + 561 >> 0] = i19;
         i1 = i4 + 216 | 0;
         HEAP16[i4 + 252 >> 1] = 0;
         HEAP32[i4 + 260 >> 2] = 0;
         HEAP32[i1 >> 2] = 0;
         HEAP32[i1 + 4 >> 2] = 0;
         HEAP32[i1 + 8 >> 2] = 0;
         HEAP32[i4 + 256 >> 2] = 65536;
         i1 = HEAP32[i3 + 632 >> 2] | 0;
         i2 = HEAP32[i3 + 628 >> 2] | 0;
         HEAP32[i4 + 444 >> 2] = i1;
         HEAP32[i4 + 448 >> 2] = i2;
         i34 = i4 + 452 | 0;
         HEAP32[i34 >> 2] = 0;
         HEAP32[i34 + 4 >> 2] = 0;
         HEAP32[i34 + 8 >> 2] = 0;
         HEAP32[i34 + 12 >> 2] = 0;
         if (!i2) HEAP32[i18 >> 2] = 0; else {
          HEAP32[i4 + 356 >> 2] = i1;
          HEAP32[i4 + 364 >> 2] = i2;
          HEAP32[i4 + 360 >> 2] = 0;
          HEAP32[i4 + 352 >> 2] = 1;
          i1 = FUNCTION_TABLE_ii[HEAP32[i3 + 652 >> 2] & 63](i4) | 0;
          HEAP32[i18 >> 2] = i1;
          if (i1 | 0) break;
         }
         HEAP32[i14 >> 2] = HEAP32[i4 + 396 >> 2];
         HEAP32[i15 >> 2] = HEAP32[i4 + 408 >> 2];
         HEAP32[i16 >> 2] = HEAP32[i4 + 420 >> 2];
         HEAP32[i17 >> 2] = HEAP32[i4 + 424 >> 2];
         i34 = i4 + 444 | 0;
         i29 = HEAP32[i34 + 4 >> 2] | 0;
         i1 = i31 + 148 | 0;
         HEAP32[i1 >> 2] = HEAP32[i34 >> 2];
         HEAP32[i1 + 4 >> 2] = i29;
         i1 = i4 + 452 | 0;
         i29 = HEAP32[i1 + 4 >> 2] | 0;
         i34 = i31 + 156 | 0;
         HEAP32[i34 >> 2] = HEAP32[i1 >> 2];
         HEAP32[i34 + 4 >> 2] = i29;
         i34 = i4 + 460 | 0;
         i29 = HEAP32[i34 + 4 >> 2] | 0;
         i1 = i31 + 164 | 0;
         HEAP32[i1 >> 2] = HEAP32[i34 >> 2];
         HEAP32[i1 + 4 >> 2] = i29;
         i1 = i13;
         i29 = 57;
         break L46;
        } while (0);
        HEAP32[i27 >> 2] = i1;
       }
      }
     } while (0);
     _tt_size_done_bytecode(i31);
     i1 = HEAP32[i27 >> 2] | 0;
     if (i1 | 0) break L38;
     i1 = HEAP32[i18 >> 2] | 0;
     i29 = 55;
    } else {
     i2 = HEAP32[i31 + 300 >> 2] | 0;
     if ((i2 | 0) < 0) i29 = 55; else {
      if (i1 | 0) break L38;
      if (i2 | 0) {
       i1 = i2;
       break L38;
      }
     }
    } while (0);
    if ((i29 | 0) == 55) if (!i1) {
     i1 = i31 + 300 | 0;
     i29 = 57;
    }
    if ((i29 | 0) == 57) if ((HEAP32[i1 >> 2] | 0) < 0) {
     i2 = i31 + 240 | 0;
     if (HEAP32[i2 >> 2] | 0) {
      i3 = (HEAP32[i31 >> 2] | 0) + 648 | 0;
      i4 = i31 + 88 | 0;
      i5 = i31 + 244 | 0;
      i1 = 0;
      do {
       i34 = _FT_MulFix(HEAP16[(HEAP32[i3 >> 2] | 0) + (i1 << 1) >> 1] | 0, HEAP32[i4 >> 2] | 0) | 0;
       HEAP32[(HEAP32[i5 >> 2] | 0) + (i1 << 2) >> 2] = i34;
       i1 = i1 + 1 | 0;
      } while (i1 >>> 0 < (HEAP32[i2 >> 2] | 0) >>> 0);
     }
     i1 = HEAP16[i31 + 264 >> 1] | 0;
     if (i1 << 16 >> 16) {
      i3 = HEAP32[i31 + 268 >> 2] | 0;
      i4 = HEAP32[i31 + 272 >> 2] | 0;
      i2 = i1 & 65535;
      i1 = 0;
      do {
       HEAP32[i3 + (i1 << 3) >> 2] = 0;
       HEAP32[i3 + (i1 << 3) + 4 >> 2] = 0;
       HEAP32[i4 + (i1 << 3) >> 2] = 0;
       HEAP32[i4 + (i1 << 3) + 4 >> 2] = 0;
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) != (i2 | 0));
     }
     i34 = HEAP16[i31 + 248 >> 1] | 0;
     i1 = i34 & 65535;
     if (i34 << 16 >> 16) _memset(HEAP32[i31 + 252 >> 2] | 0, 0, (i1 >>> 0 > 1 ? i1 : 1) << 2 | 0) | 0;
     i1 = i31 + 172 | 0;
     i3 = 5264;
     i4 = i1 + 68 | 0;
     do {
      HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
      i1 = i1 + 4 | 0;
      i3 = i3 + 4 | 0;
     } while ((i1 | 0) < (i4 | 0));
     i1 = _tt_size_run_prep(i31, i19) | 0;
     if (i1 | 0) break;
    }
    i6 = HEAP32[i31 + 292 >> 2] | 0;
    if (!i6) {
     i1 = 153;
     break;
    }
    i2 = (i22 & 983040 | 0) != 131072;
    i1 = _TT_Load_Context(i6, i20, i31) | 0;
    if (i1 | 0) break;
    i1 = i6 + 608 | 0;
    if ((i2 & 1 | 0) != (HEAPU8[i1 >> 0] | 0)) {
     HEAP8[i1 >> 0] = i2 & 1;
     i2 = i31 + 240 | 0;
     if (HEAP32[i2 >> 2] | 0) {
      i3 = i20 + 648 | 0;
      i4 = i31 + 88 | 0;
      i5 = i31 + 244 | 0;
      i1 = 0;
      do {
       i34 = _FT_MulFix(HEAP16[(HEAP32[i3 >> 2] | 0) + (i1 << 1) >> 1] | 0, HEAP32[i4 >> 2] | 0) | 0;
       HEAP32[(HEAP32[i5 >> 2] | 0) + (i1 << 2) >> 2] = i34;
       i1 = i1 + 1 | 0;
      } while (i1 >>> 0 < (HEAP32[i2 >> 2] | 0) >>> 0);
     }
     i1 = _tt_size_run_prep(i31, i19) | 0;
     if (i1 | 0) break;
    }
    i34 = HEAPU8[i6 + 336 >> 0] | 0;
    i2 = i34 << 1 & 2 | i22;
    if (i34 & 2 | 0) {
     i1 = i6 + 284 | 0;
     i3 = 5264;
     i4 = i1 + 68 | 0;
     do {
      HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
      i1 = i1 + 4 | 0;
      i3 = i3 + 4 | 0;
     } while ((i1 | 0) < (i4 | 0));
    }
    HEAP8[i6 + 561 >> 0] = i19;
    HEAP32[i26 + 160 >> 2] = i6;
    HEAP32[i26 + 164 >> 2] = HEAP32[i6 + 392 >> 2];
   } else i2 = i22;
   if (!(HEAP32[(HEAP32[i20 + 128 >> 2] | 0) + 48 >> 2] | 0)) {
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i20 + 508 >> 2] & 127](i20, 1735162214, i21, 0) | 0;
    if ((i1 & 255 | 0) == 142) i1 = 0; else {
     if (i1 | 0) break;
     i1 = _FT_Stream_Pos(i21) | 0;
    }
   } else i1 = 0;
   HEAP32[i26 + 84 >> 2] = i1;
   i15 = HEAP32[HEAP32[i24 + 156 >> 2] >> 2] | 0;
   _FT_GlyphLoader_Rewind(i15);
   i5 = i26 + 12 | 0;
   HEAP32[i5 >> 2] = i15;
   i15 = i26 + 16 | 0;
   HEAP32[i15 >> 2] = i2;
   HEAP32[i26 >> 2] = i20;
   i7 = i26 + 4 | 0;
   HEAP32[i7 >> 2] = i31;
   i6 = i26 + 8 | 0;
   HEAP32[i6 >> 2] = i24;
   HEAP32[i26 + 24 >> 2] = i21;
   i2 = i24 + 72 | 0;
   HEAP32[i2 >> 2] = 1869968492;
   i3 = i24 + 128 | 0;
   HEAP32[i3 >> 2] = 0;
   i4 = i24 + 108 | 0;
   i16 = i24 + 124 | 0;
   HEAP32[i16 >> 2] = 0;
   i1 = _load_truetype_glyph(i26, i30, 0, 0) | 0;
   if (!i1) {
    i1 = HEAP32[i5 >> 2] | 0;
    if ((HEAP32[i2 >> 2] | 0) == 1668246896) {
     HEAP32[i3 >> 2] = HEAP32[i1 + 48 >> 2];
     HEAP32[i24 + 132 >> 2] = HEAP32[i1 + 52 >> 2];
    } else {
     i1 = i1 + 20 | 0;
     HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
     HEAP32[i4 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
     HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & -513;
     i1 = HEAP32[i26 + 68 >> 2] | 0;
     if (i1 | 0) _FT_Outline_Translate(i4, 0 - i1 | 0, 0);
    }
    L129 : do if (i23) {
     i1 = HEAP32[i26 + 160 >> 2] | 0;
     L131 : do if (!(HEAP8[i1 + 337 >> 0] | 0)) i1 = 8; else switch (HEAP32[i1 + 340 >> 2] | 0) {
     case 1:
      break L129;
     case 0:
      {
       i1 = 32;
       break L131;
      }
     case 4:
      {
       i1 = 48;
       break L131;
      }
     case 5:
      {
       i1 = 16;
       break L131;
      }
     default:
      {
       i1 = 8;
       break L131;
      }
     } while (0);
     HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | i1;
    } while (0);
    i10 = HEAP32[i26 >> 2] | 0;
    i14 = HEAP32[i6 >> 2] | 0;
    i1 = HEAP32[i7 >> 2] | 0;
    if (!(HEAP32[i15 >> 2] & 1)) i11 = HEAP32[i1 + 20 >> 2] | 0; else i11 = 65536;
    if ((HEAP32[i14 + 72 >> 2] | 0) == 1668246896) {
     i34 = i26 + 36 | 0;
     HEAP32[i25 >> 2] = HEAP32[i34 >> 2];
     HEAP32[i25 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
     HEAP32[i25 + 8 >> 2] = HEAP32[i34 + 8 >> 2];
     HEAP32[i25 + 12 >> 2] = HEAP32[i34 + 12 >> 2];
    } else _FT_Outline_Get_CBox(i14 + 108 | 0, i25);
    HEAP32[i14 + 56 >> 2] = HEAP32[i26 + 60 >> 2];
    i8 = HEAP32[i25 >> 2] | 0;
    i12 = i14 + 32 | 0;
    HEAP32[i12 >> 2] = i8;
    i9 = HEAP32[i25 + 12 >> 2] | 0;
    HEAP32[i14 + 36 >> 2] = i9;
    i13 = i14 + 40 | 0;
    HEAP32[i13 >> 2] = (HEAP32[i26 + 76 >> 2] | 0) - (HEAP32[i26 + 68 >> 2] | 0);
    L146 : do if (!(HEAP32[i10 + 480 >> 2] | 0)) {
     if (HEAP32[i15 >> 2] & 2 | 0) break;
     i3 = HEAPU16[i1 + 12 >> 1] | 0;
     i6 = HEAP32[i10 + 716 >> 2] | 0;
     i7 = (HEAP32[i10 + 704 >> 2] | 0) + 8 | 0;
     i4 = HEAP32[i10 + 712 >> 2] | 0;
     if (!i4) break;
     i5 = HEAP32[i10 + 720 >> 2] | 0;
     i2 = 0;
     while (1) {
      if ((HEAPU8[i5 + i2 >> 0] | 0) == (i3 | 0)) break;
      i1 = i2 + 1 | 0;
      if (i1 >>> 0 < i4 >>> 0) i2 = i1; else break L146;
     }
     i1 = i30 + 2 | 0;
     if (i1 >>> 0 >= i6 >>> 0) break;
     i34 = i7 + (Math_imul(i2, i6) | 0) + i1 | 0;
     HEAP32[i13 >> 2] = HEAPU8[i34 >> 0] << 6;
    } while (0);
    HEAP32[i14 + 24 >> 2] = (HEAP32[i25 + 8 >> 2] | 0) - i8;
    i1 = i9 - (HEAP32[i25 + 4 >> 2] | 0) | 0;
    HEAP32[i14 + 28 >> 2] = i1;
    do if (!(HEAP8[i10 + 292 >> 0] | 0)) i29 = 112; else {
     if (!(HEAP16[i10 + 330 >> 1] | 0)) {
      i29 = 112;
      break;
     }
     i3 = i26 + 188 | 0;
     i2 = (_FT_DivFix((HEAP32[i3 >> 2] | 0) - i9 | 0, i11) | 0) << 16 >> 16;
     i3 = HEAP32[i3 >> 2] | 0;
     i1 = HEAP32[i26 + 196 >> 2] | 0;
     if ((i3 | 0) <= (i1 | 0)) {
      i1 = 0;
      break;
     }
     i1 = (_FT_DivFix(i3 - i1 | 0, i11) | 0) & 65535;
    } while (0);
    if ((i29 | 0) == 112) {
     i3 = (_FT_DivFix(i1, i11) | 0) << 16 >> 16;
     if ((HEAP16[i10 + 364 >> 1] | 0) == -1) {
      i1 = HEAP16[i10 + 220 >> 1] | 0;
      i2 = i10 + 222 | 0;
     } else {
      i1 = HEAP16[i10 + 434 >> 1] | 0;
      i2 = i10 + 436 | 0;
     }
     i1 = i1 - (HEAP16[i2 >> 1] | 0) | 0;
     i2 = (i1 - i3 | 0) / 2 | 0;
    }
    i3 = HEAP32[(HEAP32[i10 + 128 >> 2] | 0) + 48 >> 2] | 0;
    do if (!i3) i29 = 121; else {
     i4 = HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0;
     if (!i4) {
      i29 = 121;
      break;
     }
     HEAP32[i27 >> 2] = 0;
     i5 = i27 + 4 | 0;
     HEAP32[i5 >> 2] = i2;
     i6 = i27 + 8 | 0;
     HEAP32[i6 >> 2] = i1;
     i1 = FUNCTION_TABLE_iiiii[i4 & 127](HEAP32[i3 + 4 >> 2] | 0, i30, 1, i27) | 0;
     if (!i1) {
      i2 = HEAP32[i5 >> 2] | 0;
      i1 = HEAP32[i6 >> 2] | 0;
      i29 = 121;
      break;
     } else break;
    } while (0);
    if ((i29 | 0) == 121) {
     HEAP32[i14 + 60 >> 2] = i1;
     if (!(HEAP32[i15 >> 2] & 1)) {
      i2 = _FT_MulFix(i2, i11) | 0;
      i1 = _FT_MulFix(i1, i11) | 0;
     }
     HEAP32[i14 + 44 >> 2] = (HEAP32[i12 >> 2] | 0) - ((HEAP32[i13 >> 2] | 0) / 2 | 0);
     HEAP32[i14 + 48 >> 2] = i2;
     HEAP32[i14 + 52 >> 2] = i1;
     i1 = 0;
    }
   }
   if (!i28) if ((HEAPU16[i31 + 14 >> 1] | 0) < 24) HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 256;
  } else i1 = 6;
 } while (0);
 i34 = i1;
 STACKTOP = i32;
 return i34 | 0;
}

function _pfr_glyph_load_rec(i18, i27, i17, i1, i3) {
 i18 = i18 | 0;
 i27 = i27 | 0;
 i17 = i17 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i25 = i28 + 32 | 0;
 i23 = i28;
 i1 = _FT_Stream_Seek(i27, i1 + i17 | 0) | 0;
 if (i1 | 0) {
  i27 = i1;
  STACKTOP = i28;
  return i27 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i27, i3) | 0;
 if (i1 | 0) {
  i27 = i1;
  STACKTOP = i28;
  return i27 | 0;
 }
 i4 = HEAP32[i27 + 32 >> 2] | 0;
 i24 = i4 + i3 | 0;
 if (i3 | 0) if ((HEAP8[i4 >> 0] | 0) < 0) {
  i11 = HEAP32[i18 + 28 >> 2] | 0;
  i10 = i18 + 16 | 0;
  i16 = HEAP32[i10 >> 2] | 0;
  HEAP32[i25 >> 2] = 0;
  i6 = HEAP32[i11 >> 2] | 0;
  i2 = i4 + 1 | 0;
  L10 : do if ((i3 | 0) < 1) i26 = 52; else {
   i1 = HEAPU8[i4 >> 0] | 0;
   if (!(i1 & 128)) i26 = 52; else {
    i9 = i1 & 63;
    L13 : do if (!(i1 & 8)) i5 = i2; else {
     i1 = i4 + 2 | 0;
     L15 : do if ((i3 | 0) >= 2) {
      i2 = HEAP8[i2 >> 0] | 0;
      if (i2 << 24 >> 24) {
       i3 = i2 & 255;
       do {
        i2 = i1 + 2 | 0;
        if (i2 >>> 0 > i24 >>> 0) break L15;
        i1 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
        if (i1 >>> 0 > i24 >>> 0) break L15;
        i3 = i3 + -1 | 0;
       } while ((i3 | 0) != 0);
      }
      HEAP32[i25 >> 2] = 0;
      i5 = i1;
      break L13;
     } while (0);
     HEAP32[i25 >> 2] = 8;
     i1 = 8;
     break L10;
    } while (0);
    i1 = i16 + i9 | 0;
    i4 = i18 + 20 | 0;
    i2 = HEAP32[i4 >> 2] | 0;
    if (i1 >>> 0 > i2 >>> 0) {
     i3 = i1 + 3 & -4;
     if (i3 >>> 0 > 64) {
      HEAP32[i25 >> 2] = 8;
      i1 = 8;
      break;
     }
     i1 = i18 + 24 | 0;
     i2 = _ft_mem_realloc(i6, 24, i2, i3, HEAP32[i1 >> 2] | 0, i25) | 0;
     HEAP32[i1 >> 2] = i2;
     i1 = HEAP32[i25 >> 2] | 0;
     if (i1 | 0) break;
     HEAP32[i4 >> 2] = i3;
     i1 = i2;
    } else i1 = HEAP32[i18 + 24 >> 2] | 0;
    if (!i9) i1 = 0; else {
     i7 = i1 + (i16 * 24 | 0) | 0;
     i8 = 0;
     i1 = i5;
     while (1) {
      i2 = i1 + 1 | 0;
      if (i2 >>> 0 > i24 >>> 0) {
       i26 = 52;
       break L10;
      }
      i5 = HEAP8[i1 >> 0] | 0;
      i6 = i5 & 255;
      HEAP32[i7 >> 2] = 65536;
      if (!(i6 & 16)) i1 = i2; else {
       i3 = i1 + 3 | 0;
       if (i3 >>> 0 > i24 >>> 0) {
        i26 = 52;
        break L10;
       }
       HEAP32[i7 >> 2] = (HEAPU8[i2 >> 0] << 8 | HEAPU8[i1 + 2 >> 0]) << 16 >> 12;
       i1 = i3;
      }
      i2 = i7 + 4 | 0;
      HEAP32[i2 >> 2] = 65536;
      if (i6 & 32) {
       i3 = i1 + 2 | 0;
       if (i3 >>> 0 > i24 >>> 0) {
        i26 = 52;
        break L10;
       }
       HEAP32[i2 >> 2] = (HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0]) << 16 >> 12;
       i1 = i3;
      }
      switch (i5 & 3) {
      case 1:
       {
        i2 = i1 + 2 | 0;
        if (i2 >>> 0 > i24 >>> 0) {
         i26 = 52;
         break L10;
        }
        i4 = (HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0]) << 16 >> 16;
        i1 = i2;
        break;
       }
      case 2:
       {
        i2 = i1 + 1 | 0;
        if (i2 >>> 0 > i24 >>> 0) {
         i26 = 52;
         break L10;
        }
        i4 = HEAP8[i1 >> 0] | 0;
        i1 = i2;
        break;
       }
      default:
       i4 = 0;
      }
      switch ((i5 & 255) >>> 2 & 3) {
      case 1:
       {
        i2 = i1 + 2 | 0;
        if (i2 >>> 0 > i24 >>> 0) {
         i26 = 52;
         break L10;
        }
        i3 = (HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0]) << 16 >> 16;
        break;
       }
      case 2:
       {
        i2 = i1 + 1 | 0;
        if (i2 >>> 0 > i24 >>> 0) {
         i26 = 52;
         break L10;
        }
        i3 = HEAP8[i1 >> 0] | 0;
        break;
       }
      default:
       {
        i3 = 0;
        i2 = i1;
       }
      }
      HEAP32[i7 + 8 >> 2] = i4;
      HEAP32[i7 + 12 >> 2] = i3;
      if (!(i6 & 64)) {
       i1 = i2 + 1 | 0;
       if (i1 >>> 0 > i24 >>> 0) {
        i26 = 52;
        break L10;
       }
       i4 = i1;
       i1 = HEAPU8[i2 >> 0] | 0;
      } else {
       i1 = i2 + 2 | 0;
       if (i1 >>> 0 > i24 >>> 0) {
        i26 = 52;
        break L10;
       }
       i4 = i1;
       i1 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
      }
      HEAP32[i7 + 20 >> 2] = i1;
      if (!(i6 & 128)) {
       i1 = i4 + 2 | 0;
       if (i1 >>> 0 > i24 >>> 0) {
        i26 = 52;
        break L10;
       }
       i2 = 1;
       i3 = HEAPU8[i4 >> 0] << 8;
      } else {
       i1 = i4 + 3 | 0;
       if (i1 >>> 0 > i24 >>> 0) {
        i26 = 52;
        break L10;
       }
       i2 = 2;
       i3 = HEAPU8[i4 + 1 >> 0] << 8 | HEAPU8[i4 >> 0] << 16;
      }
      HEAP32[i7 + 16 >> 2] = HEAPU8[i4 + i2 >> 0] | i3;
      HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
      i8 = i8 + 1 | 0;
      if (i8 >>> 0 >= i9 >>> 0) {
       i1 = 0;
       break L10;
      } else i7 = i7 + 24 | 0;
     }
    }
   }
  } while (0);
  if ((i26 | 0) == 52) {
   HEAP32[i25 >> 2] = 8;
   i1 = 8;
  }
  _FT_Stream_ExitFrame(i27);
  if (i1 | 0) {
   i27 = i1;
   STACKTOP = i28;
   return i27 | 0;
  }
  i13 = (HEAP32[i10 >> 2] | 0) - i16 | 0;
  i14 = i18 + 24 | 0;
  if (!i13) {
   i27 = 0;
   STACKTOP = i28;
   return i27 | 0;
  }
  i15 = i11 + 22 | 0;
  i12 = i11 + 24 | 0;
  i11 = 0;
  while (1) {
   i1 = (HEAP32[i14 >> 2] | 0) + (i16 * 24 | 0) + (i11 * 24 | 0) | 0;
   i6 = HEAP16[i15 >> 1] | 0;
   i1 = _pfr_glyph_load_rec(i18, i27, i17, HEAP32[i1 + 16 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0) | 0;
   if (i1 | 0) {
    i26 = 182;
    break;
   }
   i9 = (HEAP32[i14 >> 2] | 0) + (i16 * 24 | 0) + (i11 * 24 | 0) | 0;
   i10 = (HEAP16[i15 >> 1] | 0) - i6 | 0;
   i2 = HEAP32[i9 >> 2] | 0;
   i5 = HEAP32[i12 >> 2] | 0;
   if ((i2 | 0) == 65536) if ((HEAP32[i9 + 4 >> 2] | 0) == 65536) {
    if ((i10 | 0) > 0) {
     i4 = HEAP32[i9 + 8 >> 2] | 0;
     i3 = HEAP32[i9 + 12 >> 2] | 0;
     i1 = i5 + (i6 << 3) | 0;
     i2 = 0;
     while (1) {
      HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i4;
      i25 = i1 + 4 | 0;
      HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + i3;
      i2 = i2 + 1 | 0;
      if ((i2 | 0) == (i10 | 0)) break; else i1 = i1 + 8 | 0;
     }
    }
   } else i26 = 59; else i26 = 59;
   L88 : do if ((i26 | 0) == 59) {
    i26 = 0;
    if ((i10 | 0) > 0) {
     i4 = i9 + 8 | 0;
     i7 = i9 + 4 | 0;
     i8 = i9 + 12 | 0;
     i1 = 0;
     i3 = i5 + (i6 << 3) | 0;
     while (1) {
      i25 = _FT_MulFix(HEAP32[i3 >> 2] | 0, i2) | 0;
      HEAP32[i3 >> 2] = (HEAP32[i4 >> 2] | 0) + i25;
      i25 = i3 + 4 | 0;
      i24 = _FT_MulFix(HEAP32[i25 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
      HEAP32[i25 >> 2] = (HEAP32[i8 >> 2] | 0) + i24;
      i1 = i1 + 1 | 0;
      if ((i1 | 0) == (i10 | 0)) break L88;
      i3 = i3 + 8 | 0;
      i2 = HEAP32[i9 >> 2] | 0;
     }
    }
   } while (0);
   i11 = i11 + 1 | 0;
   if (i11 >>> 0 >= i13 >>> 0) {
    i1 = 0;
    i26 = 182;
    break;
   }
  }
  if ((i26 | 0) == 182) {
   STACKTOP = i28;
   return i1 | 0;
  }
 }
 HEAP32[i25 >> 2] = 0;
 i22 = i18 + 28 | 0;
 i5 = HEAP32[HEAP32[i22 >> 2] >> 2] | 0;
 i1 = i4 + 1 | 0;
 L99 : do if ((i3 | 0) < 1) i26 = 180; else {
  i11 = HEAPU8[i4 >> 0] | 0;
  if (!(i11 & 128)) {
   if (!(i11 & 4)) {
    if (!(i11 & 2)) i3 = 0; else {
     if ((i3 | 0) < 2) {
      i26 = 180;
      break;
     }
     i3 = HEAPU8[i1 >> 0] | 0;
     i1 = i4 + 2 | 0;
    }
    if (!(i11 & 1)) {
     i21 = 0;
     i2 = i1;
    } else {
     i2 = i1 + 1 | 0;
     if (i2 >>> 0 > i24 >>> 0) {
      i26 = 180;
      break;
     }
     i21 = HEAPU8[i1 >> 0] | 0;
    }
   } else {
    if ((i3 | 0) < 2) {
     i26 = 180;
     break;
    }
    i3 = HEAPU8[i1 >> 0] | 0;
    i21 = i3 >>> 4;
    i3 = i3 & 15;
    i2 = i4 + 2 | 0;
   }
   i10 = i3 + i21 | 0;
   i6 = i18 + 4 | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i10 >>> 0 > i1 >>> 0) {
    i7 = i10 + 7 & -8;
    i4 = i18 + 8 | 0;
    i5 = _ft_mem_realloc(i5, 4, i1, i7, HEAP32[i4 >> 2] | 0, i25) | 0;
    HEAP32[i4 >> 2] = i5;
    i1 = HEAP32[i25 >> 2] | 0;
    if (i1 | 0) break;
    HEAP32[i6 >> 2] = i7;
    i6 = i18 + 12 | 0;
    HEAP32[i6 >> 2] = i5 + (i3 << 2);
    i26 = 82;
   } else {
    i4 = i18 + 8 | 0;
    i1 = HEAP32[i4 >> 2] | 0;
    i6 = i18 + 12 | 0;
    HEAP32[i6 >> 2] = i1 + (i3 << 2);
    if (!i10) {
     i1 = i2;
     i20 = i4;
    } else {
     i5 = i1;
     i26 = 82;
    }
   }
   if ((i26 | 0) == 82) {
    i8 = 0;
    i7 = 0;
    i9 = 0;
    i1 = i2;
    while (1) {
     if (!(i9 & 7)) {
      i2 = i1 + 1 | 0;
      if (i2 >>> 0 > i24 >>> 0) {
       i26 = 180;
       break L99;
      }
      i7 = HEAPU8[i1 >> 0] | 0;
      i1 = i2;
     }
     if (!(i7 & 1)) {
      i2 = i1 + 1 | 0;
      if (i2 >>> 0 > i24 >>> 0) {
       i26 = 180;
       break L99;
      }
      i8 = (HEAPU8[i1 >> 0] | 0) + i8 | 0;
      i1 = i2;
     } else {
      i2 = i1 + 2 | 0;
      if (i2 >>> 0 > i24 >>> 0) {
       i26 = 180;
       break L99;
      }
      i8 = (HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0]) << 16 >> 16;
      i1 = i2;
     }
     HEAP32[i5 + (i9 << 2) >> 2] = i8;
     i9 = i9 + 1 | 0;
     if (i9 >>> 0 >= i10 >>> 0) {
      i20 = i4;
      break;
     } else i7 = i7 >>> 1;
    }
   }
   L132 : do if (i11 & 8) {
    i2 = i1 + 1 | 0;
    L134 : do if (i2 >>> 0 <= i24 >>> 0) {
     i1 = HEAP8[i1 >> 0] | 0;
     if (!(i1 << 24 >> 24)) i1 = i2; else {
      i4 = i1 & 255;
      i1 = i2;
      do {
       i2 = i1 + 2 | 0;
       if (i2 >>> 0 > i24 >>> 0) break L134;
       i1 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
       if (i1 >>> 0 > i24 >>> 0) break L134;
       i4 = i4 + -1 | 0;
      } while ((i4 | 0) != 0);
     }
     HEAP32[i25 >> 2] = 0;
     break L132;
    } while (0);
    HEAP32[i25 >> 2] = 8;
    i1 = 8;
    break L99;
   } while (0);
   i19 = i18 + 32 | 0;
   HEAP8[i19 >> 0] = 0;
   i15 = i23 + 4 | 0;
   HEAP32[i15 >> 2] = 0;
   HEAP32[i23 >> 2] = 0;
   i16 = i23 + 24 | 0;
   i2 = i23;
   i4 = HEAP32[i2 >> 2] | 0;
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   i17 = i16;
   HEAP32[i17 >> 2] = i4;
   HEAP32[i17 + 4 >> 2] = i2;
   i17 = i23 + 8 | 0;
   i18 = i23 + 16 | 0;
   L145 : while (1) {
    i5 = i1 + 1 | 0;
    if (i5 >>> 0 > i24 >>> 0) {
     i26 = 177;
     break;
    }
    i11 = HEAP8[i1 >> 0] | 0;
    i1 = i11 & 15;
    i11 = (i11 & 255) >>> 4;
    switch (i11 & 15) {
    case 0:
     {
      i26 = 133;
      break L145;
     }
    case 5:
    case 4:
    case 1:
     {
      i9 = i23;
      i10 = 0;
      i8 = 1;
      i14 = i4;
      i26 = 111;
      break;
     }
    case 2:
     {
      if (i1 >>> 0 >= i3 >>> 0) {
       i26 = 177;
       break L145;
      }
      HEAP32[i23 >> 2] = HEAP32[(HEAP32[i20 >> 2] | 0) + (i1 << 2) >> 2];
      HEAP32[i15 >> 2] = i2;
      i2 = i23;
      i8 = HEAP32[i2 >> 2] | 0;
      i2 = HEAP32[i2 + 4 >> 2] | 0;
      i7 = i16;
      HEAP32[i7 >> 2] = i8;
      HEAP32[i7 + 4 >> 2] = i2;
      i7 = i5;
      i26 = 144;
      break;
     }
    case 3:
     {
      if (i1 >>> 0 >= i21 >>> 0) {
       i26 = 177;
       break L145;
      }
      HEAP32[i23 >> 2] = i4;
      HEAP32[i15 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + (i1 << 2) >> 2];
      i2 = i23;
      i8 = HEAP32[i2 >> 2] | 0;
      i2 = HEAP32[i2 + 4 >> 2] | 0;
      i7 = i16;
      HEAP32[i7 >> 2] = i8;
      HEAP32[i7 + 4 >> 2] = i2;
      i7 = i5;
      i26 = 144;
      break;
     }
    case 6:
     {
      i9 = i23;
      i10 = 0;
      i1 = 2958;
      i8 = 3;
      i14 = i4;
      i26 = 111;
      break;
     }
    case 7:
     {
      i9 = i23;
      i10 = 0;
      i1 = 3627;
      i8 = 3;
      i14 = i4;
      i26 = 111;
      break;
     }
    default:
     {
      i9 = i23;
      i10 = 0;
      i8 = 4;
      i14 = i4;
      i26 = 111;
     }
    }
    L156 : do if ((i26 | 0) == 111) {
     while (1) {
      i26 = 0;
      switch (i1 & 3) {
      case 0:
       {
        i4 = i5 + 1 | 0;
        if (i4 >>> 0 > i24 >>> 0) {
         i26 = 179;
         break L145;
        }
        i5 = HEAPU8[i5 >> 0] | 0;
        if (i5 >>> 0 >= i3 >>> 0) {
         i26 = 179;
         break L145;
        }
        i7 = i4;
        i4 = HEAP32[(HEAP32[i20 >> 2] | 0) + (i5 << 2) >> 2] | 0;
        break;
       }
      case 1:
       {
        i4 = i5 + 2 | 0;
        if (i4 >>> 0 > i24 >>> 0) {
         i26 = 179;
         break L145;
        }
        i7 = i4;
        i4 = (HEAPU8[i5 >> 0] << 8 | HEAPU8[i5 + 1 >> 0]) << 16 >> 16;
        break;
       }
      case 2:
       {
        i4 = i5 + 1 | 0;
        if (i4 >>> 0 > i24 >>> 0) {
         i26 = 179;
         break L145;
        }
        i7 = i4;
        i4 = (HEAP8[i5 >> 0] | 0) + i14 | 0;
        break;
       }
      default:
       {
        i7 = i5;
        i4 = i14;
       }
      }
      HEAP32[i9 >> 2] = i4;
      switch (i1 >>> 2 & 3) {
      case 0:
       {
        i2 = i7 + 1 | 0;
        if (i2 >>> 0 > i24 >>> 0) {
         i26 = 179;
         break L145;
        }
        i4 = HEAPU8[i7 >> 0] | 0;
        if (i4 >>> 0 >= i21 >>> 0) {
         i26 = 179;
         break L145;
        }
        i5 = i2;
        i2 = HEAP32[(HEAP32[i6 >> 2] | 0) + (i4 << 2) >> 2] | 0;
        break;
       }
      case 1:
       {
        i2 = i7 + 2 | 0;
        if (i2 >>> 0 > i24 >>> 0) {
         i26 = 179;
         break L145;
        }
        i5 = i2;
        i2 = (HEAPU8[i7 >> 0] << 8 | HEAPU8[i7 + 1 >> 0]) << 16 >> 16;
        break;
       }
      case 2:
       {
        i4 = i7 + 1 | 0;
        if (i4 >>> 0 > i24 >>> 0) {
         i26 = 179;
         break L145;
        }
        i5 = i4;
        i2 = (HEAP8[i7 >> 0] | 0) + i2 | 0;
        break;
       }
      default:
       i5 = i7;
      }
      HEAP32[i9 + 4 >> 2] = i2;
      if ((i10 | 0) == 0 & (i8 | 0) == 4) {
       i1 = i5 + 1 | 0;
       if (i1 >>> 0 > i24 >>> 0) {
        i26 = 179;
        break L145;
       }
       i7 = i1;
       i4 = 3;
       i1 = HEAPU8[i5 >> 0] | 0;
      } else {
       i7 = i5;
       i4 = i8;
       i1 = i1 >>> 4;
      }
      i2 = i9;
      i14 = HEAP32[i2 >> 2] | 0;
      i2 = HEAP32[i2 + 4 >> 2] | 0;
      i13 = i16;
      HEAP32[i13 >> 2] = i14;
      HEAP32[i13 + 4 >> 2] = i2;
      i10 = i10 + 1 | 0;
      if (i10 >>> 0 >= i4 >>> 0) break; else {
       i9 = i9 + 8 | 0;
       i8 = i4;
       i5 = i7;
       i26 = 111;
      }
     }
     switch (i11 & 15) {
     case 0:
      {
       i26 = 133;
       break L145;
      }
     case 3:
     case 2:
     case 1:
      {
       i8 = i14;
       i26 = 144;
       break L156;
      }
     case 5:
     case 4:
      break;
     default:
      {
       i4 = HEAP32[i22 >> 2] | 0;
       do if (!(HEAP8[i19 >> 0] | 0)) i1 = 8; else {
        i5 = i4 + 58 | 0;
        i1 = HEAP16[i5 >> 1] | 0;
        if (((HEAP16[i4 + 22 >> 1] | 0) + 3 + (i1 << 16 >> 16) | 0) >>> 0 > (HEAP32[i4 + 4 >> 2] | 0) >>> 0) {
         i1 = _FT_GlyphLoader_CheckPoints(i4, 3, 0) | 0;
         if (i1 | 0) break;
         i1 = HEAP16[i5 >> 1] | 0;
        }
        i1 = i1 << 16 >> 16;
        i13 = (HEAP32[i4 + 60 >> 2] | 0) + (i1 << 3) | 0;
        i1 = (HEAP32[i4 + 64 >> 2] | 0) + i1 | 0;
        i11 = i23;
        i12 = HEAP32[i11 + 4 >> 2] | 0;
        i10 = i13;
        HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
        HEAP32[i10 + 4 >> 2] = i12;
        i10 = i17;
        i12 = HEAP32[i10 + 4 >> 2] | 0;
        i11 = i13 + 8 | 0;
        HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
        HEAP32[i11 + 4 >> 2] = i12;
        i11 = i18;
        i12 = HEAP32[i11 + 4 >> 2] | 0;
        i13 = i13 + 16 | 0;
        HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
        HEAP32[i13 + 4 >> 2] = i12;
        HEAP8[i1 >> 0] = 2;
        HEAP8[i1 + 1 >> 0] = 2;
        HEAP8[i1 + 2 >> 0] = 1;
        HEAP16[i5 >> 1] = (HEAPU16[i5 >> 1] | 0) + 3;
        i1 = 0;
       } while (0);
       HEAP32[i25 >> 2] = i1;
       i5 = i7;
       i4 = i14;
       break L156;
      }
     }
     i13 = HEAP32[i22 >> 2] | 0;
     i12 = i13 + 58 | 0;
     if (HEAP8[i19 >> 0] | 0) {
      i4 = HEAP16[i12 >> 1] | 0;
      i5 = i4 << 16 >> 16;
      i1 = i5 + -1 | 0;
      i10 = i13 + 56 | 0;
      i11 = HEAP16[i10 >> 1] | 0;
      if (i11 << 16 >> 16 > 0) i9 = HEAP16[(HEAP32[i13 + 68 >> 2] | 0) + ((i11 << 16 >> 16) + -1 << 1) >> 1] | 0; else i9 = 0;
      if ((i1 | 0) > (i9 | 0)) {
       i8 = HEAP32[i13 + 60 >> 2] | 0;
       if ((HEAP32[i8 + (i9 << 3) >> 2] | 0) == (HEAP32[i8 + (i1 << 3) >> 2] | 0)) if ((HEAP32[i8 + (i9 << 3) + 4 >> 2] | 0) == (HEAP32[i8 + (i1 << 3) + 4 >> 2] | 0)) {
        HEAP16[i12 >> 1] = i4 + -1 << 16 >> 16;
        i1 = i5 + -2 | 0;
       }
      }
      if ((i1 | 0) >= (i9 | 0)) {
       i26 = HEAP32[i13 + 68 >> 2] | 0;
       HEAP16[i10 >> 1] = i11 + 1 << 16 >> 16;
       HEAP16[i26 + (i11 << 16 >> 16 << 1) >> 1] = i1;
      }
      HEAP8[i19 >> 0] = 0;
     }
     HEAP8[i19 >> 0] = 1;
     i4 = HEAP16[i13 + 22 >> 1] | 0;
     i1 = HEAP16[i12 >> 1] | 0;
     i5 = HEAP32[i13 + 4 >> 2] | 0;
     if (((i4 << 16 >> 16) + 1 + (i1 << 16 >> 16) | 0) >>> 0 > i5 >>> 0) i26 = 162; else if (((HEAP16[i13 + 20 >> 1] | 0) + 1 + (HEAP16[i13 + 56 >> 1] | 0) | 0) >>> 0 > (HEAP32[i13 + 8 >> 2] | 0) >>> 0) i26 = 162; else {
      i9 = i13;
      i8 = i4;
      i4 = i5;
      i26 = 165;
     }
     if ((i26 | 0) == 162) {
      i26 = 0;
      i1 = _FT_GlyphLoader_CheckPoints(i13, 1, 1) | 0;
      if (!i1) {
       i4 = HEAP32[i22 >> 2] | 0;
       if (!(HEAP8[i19 >> 0] | 0)) i1 = 8; else {
        i9 = i4;
        i8 = HEAP16[i4 + 22 >> 1] | 0;
        i1 = HEAP16[i4 + 58 >> 1] | 0;
        i4 = HEAP32[i4 + 4 >> 2] | 0;
        i26 = 165;
       }
      }
     }
     do if ((i26 | 0) == 165) {
      i26 = 0;
      i5 = i9 + 58 | 0;
      if (((i1 << 16 >> 16) + 1 + (i8 << 16 >> 16) | 0) >>> 0 > i4 >>> 0) {
       i1 = _FT_GlyphLoader_CheckPoints(i9, 1, 0) | 0;
       if (i1 | 0) break;
       i1 = HEAP16[i5 >> 1] | 0;
      }
      i1 = i1 << 16 >> 16;
      i11 = i23;
      i12 = HEAP32[i11 + 4 >> 2] | 0;
      i13 = (HEAP32[i9 + 60 >> 2] | 0) + (i1 << 3) | 0;
      HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
      HEAP32[i13 + 4 >> 2] = i12;
      HEAP8[(HEAP32[i9 + 64 >> 2] | 0) + i1 >> 0] = 1;
      HEAP16[i5 >> 1] = (HEAP16[i5 >> 1] | 0) + 1 << 16 >> 16;
      i1 = 0;
     } while (0);
     HEAP32[i25 >> 2] = i1;
     i5 = i7;
     i4 = i14;
    } while (0);
    if ((i26 | 0) == 144) {
     i26 = 0;
     i4 = HEAP32[i22 >> 2] | 0;
     do if (!(HEAP8[i19 >> 0] | 0)) i1 = 8; else {
      i5 = i4 + 58 | 0;
      i1 = HEAP16[i5 >> 1] | 0;
      if (((HEAP16[i4 + 22 >> 1] | 0) + 1 + (i1 << 16 >> 16) | 0) >>> 0 > (HEAP32[i4 + 4 >> 2] | 0) >>> 0) {
       i1 = _FT_GlyphLoader_CheckPoints(i4, 1, 0) | 0;
       if (i1 | 0) break;
       i1 = HEAP16[i5 >> 1] | 0;
      }
      i1 = i1 << 16 >> 16;
      i12 = i23;
      i13 = HEAP32[i12 + 4 >> 2] | 0;
      i14 = (HEAP32[i4 + 60 >> 2] | 0) + (i1 << 3) | 0;
      HEAP32[i14 >> 2] = HEAP32[i12 >> 2];
      HEAP32[i14 + 4 >> 2] = i13;
      HEAP8[(HEAP32[i4 + 64 >> 2] | 0) + i1 >> 0] = 1;
      HEAP16[i5 >> 1] = (HEAP16[i5 >> 1] | 0) + 1 << 16 >> 16;
      i1 = 0;
     } while (0);
     HEAP32[i25 >> 2] = i1;
     i5 = i7;
     i4 = i8;
    }
    if (!i1) i1 = i5; else break;
   }
   if ((i26 | 0) == 133) {
    i7 = HEAP32[i22 >> 2] | 0;
    if (HEAP8[i19 >> 0] | 0) {
     i2 = i7 + 58 | 0;
     i3 = HEAP16[i2 >> 1] | 0;
     i4 = i3 << 16 >> 16;
     i1 = i4 + -1 | 0;
     i8 = i7 + 56 | 0;
     i9 = HEAP16[i8 >> 1] | 0;
     if (i9 << 16 >> 16 > 0) i6 = HEAP16[(HEAP32[i7 + 68 >> 2] | 0) + ((i9 << 16 >> 16) + -1 << 1) >> 1] | 0; else i6 = 0;
     if ((i1 | 0) > (i6 | 0)) {
      i5 = HEAP32[i7 + 60 >> 2] | 0;
      if ((HEAP32[i5 + (i6 << 3) >> 2] | 0) == (HEAP32[i5 + (i1 << 3) >> 2] | 0)) if ((HEAP32[i5 + (i6 << 3) + 4 >> 2] | 0) == (HEAP32[i5 + (i1 << 3) + 4 >> 2] | 0)) {
       HEAP16[i2 >> 1] = i3 + -1 << 16 >> 16;
       i1 = i4 + -2 | 0;
      }
     }
     if ((i1 | 0) >= (i6 | 0)) {
      i24 = HEAP32[i7 + 68 >> 2] | 0;
      HEAP16[i8 >> 1] = i9 + 1 << 16 >> 16;
      HEAP16[i24 + (i9 << 16 >> 16 << 1) >> 1] = i1;
     }
     HEAP8[i19 >> 0] = 0;
    }
    _FT_GlyphLoader_Add(i7);
    i1 = HEAP32[i25 >> 2] | 0;
   } else if ((i26 | 0) == 177) {
    i26 = 180;
    break;
   } else if ((i26 | 0) == 179) {
    i26 = 180;
    break;
   }
  } else i26 = 180;
 } while (0);
 if ((i26 | 0) == 180) {
  HEAP32[i25 >> 2] = 8;
  i1 = 8;
 }
 _FT_Stream_ExitFrame(i27);
 i27 = i1;
 STACKTOP = i28;
 return i27 | 0;
}

function _cid_face_init(i3, i35, i32, i1, i2) {
 i3 = i3 | 0;
 i35 = i35 | 0;
 i32 = i32 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i33 = 0, i34 = 0;
 i34 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 i29 = i34 + 112 | 0;
 i30 = i34 + 8 | 0;
 i31 = i34;
 HEAP32[i35 >> 2] = 1;
 i25 = i35 + 136 | 0;
 do if (!(HEAP32[i25 >> 2] | 0)) {
  i1 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i35 + 96 >> 2] | 0) + 4 >> 2] | 0, 284857) | 0;
  if (!i1) {
   i35 = 11;
   STACKTOP = i34;
   return i35 | 0;
  } else {
   HEAP32[i25 >> 2] = i1;
   break;
  }
 } while (0);
 i1 = i35 + 320 | 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  i28 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i35 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
  HEAP32[i1 >> 2] = i28;
 }
 i1 = _FT_Stream_Seek(i3, 0) | 0;
 if (i1 | 0) {
  i35 = i1;
  STACKTOP = i34;
  return i35 | 0;
 }
 i23 = i35 + 100 | 0;
 i20 = HEAP32[i23 >> 2] | 0;
 HEAP32[i30 + 100 >> 2] = 0;
 i21 = i35 + 104 | 0;
 i15 = HEAP32[i21 >> 2] | 0;
 i1 = HEAP32[i25 >> 2] | 0;
 i2 = i30;
 i3 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 FUNCTION_TABLE_viiii[HEAP32[HEAP32[i1 + 4 >> 2] >> 2] & 31](i30, 0, 0, i20);
 i28 = i30 + 72 | 0;
 HEAP32[i28 >> 2] = i15;
 i12 = _FT_Stream_Pos(i15) | 0;
 i1 = _FT_Stream_EnterFrame(i15, 31) | 0;
 L13 : do if (!i1) {
  i27 = (_strncmp(HEAP32[i15 + 32 >> 2] | 0, 280276, 31) | 0) == 0;
  _FT_Stream_ExitFrame(i15);
  if (i27) {
   i8 = i15 + 4 | 0;
   i27 = i30 + 76 | 0;
   i22 = i30 + 84 | 0;
   i13 = i30 + 80 | 0;
   i9 = i30 + 4 | 0;
   i14 = i30 + 8 | 0;
   i16 = i30 + 96 | 0;
   i17 = i30 + 32 | 0;
   i18 = i30 + 28 | 0;
   i19 = i30 + 12 | 0;
   i10 = i29 + 10 | 0;
   i11 = i29;
   L16 : while (1) {
    i1 = _FT_Stream_Pos(i15) | 0;
    i2 = HEAP32[i8 >> 2] | 0;
    i2 = i2 - (_FT_Stream_Pos(i15) | 0) | 0;
    if (!i2) {
     i1 = 3;
     i33 = 22;
     break;
    } else {
     i4 = i29;
     i3 = 266;
     i5 = i1;
     i1 = i2;
    }
    L18 : while (1) {
     i2 = i3 >>> 0 < i1 >>> 0 ? i3 : i1;
     i1 = _FT_Stream_Read(i15, i4, i2) | 0;
     if (i1 | 0) {
      i33 = 22;
      break L16;
     }
     if (i2 >>> 0 < 256) HEAP8[i4 + i2 >> 0] = 0;
     i2 = i4 + i2 + -10 | 0;
     if (i29 >>> 0 < i2 >>> 0) {
      i4 = i29;
      i3 = HEAP8[i29 >> 0] | 0;
      while (1) {
       if (i3 << 24 >> 24 == 83) if (!(_strncmp(i4, 280308, 9) | 0)) {
        i1 = 10;
        break L18;
       }
       i1 = i4 + 1 | 0;
       i3 = HEAP8[i1 >> 0] | 0;
       if (i3 << 24 >> 24 == 115) if (!(_strncmp(i4, 280318, 6) | 0)) {
        i1 = 7;
        break L18;
       }
       if (i1 >>> 0 >= i2 >>> 0) break; else i4 = i1;
      }
     } else i1 = i29;
     _memmove(i29 | 0, i1 | 0, 10) | 0;
     i1 = HEAP32[i8 >> 2] | 0;
     i1 = i1 - (_FT_Stream_Pos(i15) | 0) | 0;
     if (!i1) {
      i1 = 3;
      i33 = 22;
      break L16;
     } else {
      i4 = i10;
      i3 = 256;
      i5 = i5 + 256 | 0;
     }
    }
    i7 = i5 - i11 + i4 + i1 | 0;
    i2 = i7 - i12 | 0;
    i1 = _FT_Stream_Seek(i15, i12) | 0;
    if (i1 | 0) {
     i33 = 36;
     break L13;
    }
    i1 = _FT_Stream_ExtractFrame(i15, i2, i27) | 0;
    if (i1 | 0) {
     i33 = 36;
     break L13;
    }
    HEAP32[i22 >> 2] = i7;
    HEAP32[i13 >> 2] = i2;
    i4 = HEAP32[i27 >> 2] | 0;
    HEAP32[i9 >> 2] = i4;
    HEAP32[i30 >> 2] = i4;
    HEAP32[i14 >> 2] = i4 + i2;
    HEAP32[i16 >> 2] = -1;
    FUNCTION_TABLE_vi[HEAP32[i17 >> 2] & 127](i30);
    FUNCTION_TABLE_vi[HEAP32[i18 >> 2] & 127](i30);
    i1 = HEAP32[i30 >> 2] | 0;
    FUNCTION_TABLE_vi[HEAP32[i17 >> 2] & 127](i30);
    FUNCTION_TABLE_vi[HEAP32[i18 >> 2] & 127](i30);
    i6 = HEAP32[i14 >> 2] | 0;
    i3 = HEAP32[i30 >> 2] | 0;
    if (i3 >>> 0 < i6 >>> 0) {
     i5 = i1;
     i2 = i4;
     while (1) {
      i1 = HEAP32[i19 >> 2] | 0;
      if (i1 | 0) {
       i33 = 36;
       break L13;
      }
      if ((HEAP8[i3 >> 0] | 0) == 83) if (!(_strncmp(i3, 280308, 9) | 0)) break L16;
      if ((HEAP8[i3 + 1 >> 0] | 0) == 115) if (!(_strncmp(i3, 280318, 6) | 0)) {
       i1 = 2;
       i33 = 36;
       break L13;
      }
      FUNCTION_TABLE_vi[HEAP32[i17 >> 2] & 127](i30);
      FUNCTION_TABLE_vi[HEAP32[i18 >> 2] & 127](i30);
      i1 = HEAP32[i30 >> 2] | 0;
      if (i1 >>> 0 < i6 >>> 0) {
       i26 = i3;
       i3 = i1;
       i2 = i5;
       i5 = i26;
      } else break;
     }
    }
    _FT_Stream_ReleaseFrame(i15, i27);
    i1 = _FT_Stream_Seek(i15, i7) | 0;
    if (i1 | 0) {
     i33 = 36;
     break L13;
    }
   }
   if ((i33 | 0) == 22) {
    i33 = 36;
    break;
   }
   if (!(_strncmp(i2, 280325, 5) | 0)) {
    i1 = _atol(i5) | 0;
    if ((i1 | 0) < 0) {
     i1 = 3;
     i33 = 36;
     break;
    }
    HEAP32[i30 + 88 >> 2] = i1;
   }
   HEAP32[i31 >> 2] = 0;
   i1 = HEAP32[i27 >> 2] | 0;
   i15 = HEAP32[i13 >> 2] | 0;
   HEAP32[i30 >> 2] = i1;
   i15 = i1 + i15 | 0;
   HEAP32[i14 >> 2] = i15;
   HEAP32[i19 >> 2] = 0;
   i26 = i35 + 300 | 0;
   i8 = i35 + 140 | 0;
   i24 = i35 + 304 | 0;
   i9 = i30 + 68 | 0;
   i10 = i30 + 64 | 0;
   i11 = i35 + 164 | 0;
   i12 = i35 + 312 | 0;
   i13 = i35 + 196 | 0;
   i14 = i15 + -1 + -17 | 0;
   L56 : while (1) {
    HEAP32[i30 >> 2] = i1;
    FUNCTION_TABLE_vi[HEAP32[i18 >> 2] & 127](i30);
    i4 = HEAP32[i30 >> 2] | 0;
    i3 = i4 >>> 0 < i15 >>> 0;
    i2 = i3 ? i4 + -17 | 0 : i14;
    if (i1 >>> 0 < i2 >>> 0) do {
     if ((HEAP8[i1 >> 0] | 0) == 37) if (!(_strncmp(i1, 280331, 17) | 0)) if ((HEAP32[i26 >> 2] | 0) > 0) HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i2 | 0));
    if (!i3) {
     i33 = 45;
     break;
    }
    FUNCTION_TABLE_vi[HEAP32[i17 >> 2] & 127](i30);
    i7 = HEAP32[i30 >> 2] | 0;
    i1 = HEAP32[i19 >> 2] | 0;
    if (!(i7 >>> 0 < i15 >>> 0 & (i1 | 0) == 0)) break;
    if (!((i4 + 2 | 0) >>> 0 < i15 >>> 0 & (HEAP8[i4 >> 0] | 0) == 47)) {
     i1 = i7;
     continue;
    }
    i4 = i4 + 1 | 0;
    i5 = i7 - i4 | 0;
    if ((i5 + -1 | 0) >>> 0 >= 21) {
     i1 = i7;
     continue;
    }
    i6 = HEAP8[i4 >> 0] | 0;
    L71 : do if (i5 >>> 0 > 1) {
     i2 = 9612;
     i3 = 280349;
     while (1) {
      L74 : do if (i6 << 24 >> 24 == (HEAP8[i3 >> 0] | 0)) if ((i5 | 0) == (_strlen(i3) | 0)) {
       i1 = 1;
       while (1) {
        if ((HEAP8[i4 + i1 >> 0] | 0) != (HEAP8[i3 + i1 >> 0] | 0)) break L74;
        i1 = i1 + 1 | 0;
        if (i1 >>> 0 >= i5 >>> 0) break L71;
       }
      } while (0);
      i2 = i2 + 36 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if (!i3) {
       i1 = i7;
       continue L56;
      }
     }
    } else {
     i2 = 9612;
     i1 = 280349;
     while (1) {
      if (i6 << 24 >> 24 == (HEAP8[i1 >> 0] | 0)) if ((i5 | 0) == (_strlen(i1) | 0)) break L71;
      i2 = i2 + 36 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i1 = i7;
       continue L56;
      }
     }
    } while (0);
    i3 = HEAP32[i2 + 8 >> 2] | 0;
    do if ((i3 | 0) == 11) {
     FUNCTION_TABLE_vii[HEAP32[i2 + 12 >> 2] & 63](i35, i30);
     i1 = HEAP32[i19 >> 2] | 0;
    } else {
     switch (HEAP32[i2 + 4 >> 2] | 0) {
     case 0:
      {
       i1 = i8;
       break;
      }
     case 3:
      {
       i1 = i11;
       break;
      }
     case 2:
      {
       i1 = i12;
       break;
      }
     case 5:
      {
       i1 = i13;
       break;
      }
     default:
      {
       i1 = HEAP32[i16 >> 2] | 0;
       if ((i1 | 0) < 0) {
        i33 = 69;
        break L56;
       }
       if ((i1 | 0) >= (HEAP32[i26 >> 2] | 0)) {
        i33 = 69;
        break L56;
       }
       i1 = (HEAP32[i24 >> 2] | 0) + (i1 * 252 | 0) | 0;
      }
     }
     HEAP32[i29 >> 2] = i1;
     if ((i3 + -9 | 0) >>> 0 < 2) {
      i1 = FUNCTION_TABLE_iiiiii[HEAP32[i9 >> 2] & 127](i30, i2, i29, 0, 0) | 0;
      break;
     } else {
      i1 = FUNCTION_TABLE_iiiiii[HEAP32[i10 >> 2] & 127](i30, i2, i29, 0, 0) | 0;
      break;
     }
    } while (0);
    HEAP32[i19 >> 2] = i1;
    if (i1 | 0) {
     i33 = 73;
     break;
    }
    i1 = HEAP32[i30 >> 2] | 0;
   }
   if ((i33 | 0) == 45) i1 = HEAP32[i19 >> 2] | 0; else if ((i33 | 0) == 69) {
    HEAP32[i19 >> 2] = 160;
    i1 = 160;
    i33 = 73;
   }
   if ((i33 | 0) == 73) {
    HEAP32[i31 >> 2] = i1;
    i1 = i27;
    break;
   }
   HEAP32[i31 >> 2] = i1;
   if ((i32 | 0) < 0 | (i1 | 0) != 0) i1 = i27; else {
    i1 = _ft_mem_alloc(i20, 40, i31) | 0;
    i13 = i35 + 328 | 0;
    HEAP32[i13 >> 2] = i1;
    if (!(HEAP32[i31 >> 2] | 0)) {
     i12 = i30 + 88 | 0;
     i2 = HEAP32[i12 >> 2] | 0;
     L110 : do if (!i2) {
      i2 = i1;
      i1 = HEAP32[i21 >> 2] | 0;
      i3 = i2 + 40 | 0;
      do {
       HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
       i2 = i2 + 4 | 0;
       i1 = i1 + 4 | 0;
      } while ((i2 | 0) < (i3 | 0));
      i1 = HEAP32[i22 >> 2] | 0;
     } else {
      i3 = _ft_mem_alloc(i20, i2, i31) | 0;
      i11 = i35 + 324 | 0;
      HEAP32[i11 >> 2] = i3;
      if (HEAP32[i31 >> 2] | 0) {
       i1 = i27;
       break L13;
      }
      i1 = HEAP32[i12 >> 2] | 0;
      i10 = HEAP32[i21 >> 2] | 0;
      L114 : do if (!(_FT_Stream_Seek(i10, HEAP32[i22 >> 2] | 0) | 0)) {
       i9 = i3 + i1 | 0;
       L116 : do if ((i1 | 0) > 0) {
        i8 = i10 + 4 | 0;
        i7 = 1;
        i2 = i29;
        i1 = i29;
        while (1) {
         L120 : while (1) {
          if (i2 >>> 0 < i1 >>> 0) i6 = i2; else {
           i2 = _FT_Stream_Pos(i10) | 0;
           i1 = (HEAP32[i8 >> 2] | 0) - i2 | 0;
           if (!i1) break L114;
           if (_FT_Stream_Read(i10, i29, i1 >>> 0 < 256 ? i1 : 256) | 0) break L114;
           i6 = i29;
           i1 = i29 + (_FT_Stream_Pos(i10) | 0) + (0 - i2) | 0;
          }
          i4 = HEAP8[i6 >> 0] | 0;
          i5 = i4 & 255;
          i2 = i5 + -48 | 0;
          if (i2 >>> 0 < 10) {
           i4 = 0;
           break;
          }
          if ((i4 + -97 & 255) < 6) {
           i33 = 91;
           break;
          }
          if ((i4 + -65 & 255) < 6) {
           i33 = 92;
           break;
          }
          switch (i4 << 24 >> 24) {
          case 62:
           {
            i2 = 0;
            i4 = 1;
            break L120;
           }
          case 0:
          case 12:
          case 10:
          case 13:
          case 9:
          case 32:
           break;
          default:
           break L114;
          }
          i2 = i6 + 1 | 0;
         }
         if ((i33 | 0) == 91) {
          i33 = 0;
          i2 = i5 + -97 | 0;
          i4 = 0;
         } else if ((i33 | 0) == 92) {
          i33 = 0;
          i2 = i5 + -55 | 0;
          i4 = 0;
         }
         if (!(i7 << 24 >> 24)) {
          HEAP8[i3 >> 0] = (HEAPU8[i3 >> 0] | 0) + i2;
          i3 = i3 + 1 | 0;
         } else HEAP8[i3 >> 0] = i2 << 4;
         if (i4 << 24 >> 24) break L116;
         if (i3 >>> 0 < i9 >>> 0) {
          i7 = 1 - (i7 & 255) & 255;
          i2 = i6 + 1 | 0;
         } else break;
        }
       } while (0);
       _FT_Stream_OpenMemory(HEAP32[i13 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0);
       i1 = 0;
       break L110;
      } while (0);
      i1 = i27;
      break L13;
     } while (0);
     i20 = i35 + 308 | 0;
     HEAP32[i20 >> 2] = i1;
     i22 = HEAP32[i23 >> 2] | 0;
     i19 = HEAP32[i13 >> 2] | 0;
     i1 = HEAP32[i25 >> 2] | 0;
     i2 = _ft_mem_realloc(i22, 8, 0, HEAP32[i26 >> 2] | 0, 0, i29) | 0;
     i21 = i35 + 316 | 0;
     HEAP32[i21 >> 2] = i2;
     L143 : do if (!(HEAP32[i29 >> 2] | 0)) if ((HEAP32[i26 >> 2] | 0) > 0) {
      i18 = i19 + 32 | 0;
      i17 = i1 + 16 | 0;
      i16 = 0;
      i4 = 0;
      i3 = 0;
      i5 = 0;
      i1 = 0;
      L146 : while (1) {
       i6 = HEAP32[i24 >> 2] | 0;
       i11 = HEAP32[i6 + (i16 * 252 | 0) + 4 >> 2] | 0;
       i15 = HEAP32[i6 + (i16 * 252 | 0) + 240 >> 2] | 0;
       if ((i15 | 0) == -1) {
        i33 = 105;
        break;
       }
       i10 = i15 + 1 | 0;
       if (i10 >>> 0 > i4 >>> 0) {
        i3 = i15 + 4 & -4;
        if (i3 >>> 0 <= i4 >>> 0) {
         i33 = 108;
         break;
        }
        i1 = _ft_mem_realloc(i22, 4, i4, i3, i5, i29) | 0;
        if (!(HEAP32[i29 >> 2] | 0)) {
         i12 = i3;
         i13 = i1;
         i14 = i1;
         i5 = i1;
        } else break;
       } else {
        i12 = i4;
        i13 = i3;
        i14 = i1;
       }
       i25 = _FT_Stream_Seek(i19, (HEAP32[i6 + (i16 * 252 | 0) + 244 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) | 0) | 0;
       HEAP32[i29 >> 2] = i25;
       if (i25 | 0) {
        i1 = i14;
        break;
       }
       i1 = i6 + (i16 * 252 | 0) + 248 | 0;
       i25 = _FT_Stream_EnterFrame(i19, Math_imul(HEAP32[i1 >> 2] | 0, i10) | 0) | 0;
       HEAP32[i29 >> 2] = i25;
       if (i25 | 0) {
        i1 = i14;
        break;
       }
       i9 = HEAP32[i1 >> 2] | 0;
       i8 = i9 & 255;
       i9 = (i9 + 255 & 255) + 1 | 0;
       if (!(i8 << 24 >> 24)) {
        i1 = 0;
        do {
         HEAP32[i13 + (i1 << 2) >> 2] = 0;
         i1 = i1 + 1 | 0;
        } while (i1 >>> 0 <= i15 >>> 0);
       } else {
        i7 = 0;
        i1 = HEAP32[i18 >> 2] | 0;
        while (1) {
         i6 = i1;
         i3 = 0;
         i4 = i8;
         i1 = i6;
         while (1) {
          i3 = HEAPU8[i1 >> 0] | i3 << 8;
          i4 = i4 + -1 << 24 >> 24;
          if (!(i4 << 24 >> 24)) break; else i1 = i1 + 1 | 0;
         }
         HEAP32[i13 + (i7 << 2) >> 2] = i3;
         i7 = i7 + 1 | 0;
         if (i7 >>> 0 > i15 >>> 0) break; else i1 = i6 + i9 | 0;
        }
       }
       _FT_Stream_ExitFrame(i19);
       i6 = (i15 | 0) == 0;
       i3 = HEAP32[i13 >> 2] | 0;
       if (!i6) {
        i1 = 1;
        i4 = i3;
        do {
         i25 = i4;
         i4 = HEAP32[i13 + (i1 << 2) >> 2] | 0;
         i1 = i1 + 1 | 0;
         if (i25 >>> 0 > i4 >>> 0) {
          i1 = i14;
          break L146;
         }
        } while (i1 >>> 0 <= i15 >>> 0);
       }
       i1 = (HEAP32[i13 + (i15 << 2) >> 2] | 0) - i3 | 0;
       i25 = _ft_mem_realloc(i22, 4, 0, i10, 0, i29) | 0;
       i7 = i2 + 4 | 0;
       HEAP32[i7 >> 2] = i25;
       if (HEAP32[i29 >> 2] | 0) {
        i1 = i14;
        break;
       }
       i25 = _ft_mem_alloc(i22, i1, i29) | 0;
       HEAP32[HEAP32[i7 >> 2] >> 2] = i25;
       if (HEAP32[i29 >> 2] | 0) {
        i1 = i14;
        break;
       }
       i25 = _FT_Stream_Seek(i19, (HEAP32[i13 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) | 0) | 0;
       HEAP32[i29 >> 2] = i25;
       if (i25 | 0) {
        i1 = i14;
        break;
       }
       i25 = _FT_Stream_Read(i19, HEAP32[HEAP32[i7 >> 2] >> 2] | 0, i1) | 0;
       HEAP32[i29 >> 2] = i25;
       if (i25 | 0) {
        i1 = i14;
        break;
       }
       do if (!i6) {
        i4 = HEAP32[i13 >> 2] | 0;
        i1 = 1;
        i3 = i4;
        do {
         i23 = i3;
         i3 = HEAP32[i13 + (i1 << 2) >> 2] | 0;
         i25 = HEAP32[i7 >> 2] | 0;
         HEAP32[i25 + (i1 << 2) >> 2] = (HEAP32[i25 + (i1 + -1 << 2) >> 2] | 0) + (i3 - i23);
         i1 = i1 + 1 | 0;
        } while (i1 >>> 0 <= i15 >>> 0);
        if ((i11 | 0) <= -1) break;
        i1 = i13 + 4 | 0;
        FUNCTION_TABLE_viii[HEAP32[i17 >> 2] & 31](HEAP32[HEAP32[i7 >> 2] >> 2] | 0, (HEAP32[i1 >> 2] | 0) - i4 | 0, 4330);
        if ((i15 | 0) == 1) break; else i3 = 1;
        do {
         i23 = i3;
         i3 = i3 + 1 | 0;
         i25 = i1;
         i1 = i13 + (i3 << 2) | 0;
         FUNCTION_TABLE_viii[HEAP32[i17 >> 2] & 31](HEAP32[(HEAP32[i7 >> 2] | 0) + (i23 << 2) >> 2] | 0, (HEAP32[i1 >> 2] | 0) - (HEAP32[i25 >> 2] | 0) | 0, 4330);
        } while ((i3 | 0) != (i15 | 0));
       } while (0);
       HEAP32[i2 >> 2] = i15;
       i16 = i16 + 1 | 0;
       if ((i16 | 0) >= (HEAP32[i26 >> 2] | 0)) {
        i1 = i14;
        break L143;
       } else {
        i2 = i2 + 8 | 0;
        i4 = i12;
        i3 = i13;
        i1 = i14;
       }
      }
      if ((i33 | 0) == 105) HEAP32[i29 >> 2] = 160; else if ((i33 | 0) == 108) HEAP32[i29 >> 2] = 160;
      i2 = HEAP32[i21 >> 2] | 0;
      if (i2) {
       if ((HEAP32[i26 >> 2] | 0) > 0) {
        i4 = 0;
        do {
         i3 = HEAP32[i2 + (i4 << 3) + 4 >> 2] | 0;
         if (i3) {
          _ft_mem_free(i22, HEAP32[i3 >> 2] | 0);
          HEAP32[HEAP32[(HEAP32[i21 >> 2] | 0) + (i4 << 3) + 4 >> 2] >> 2] = 0;
          i2 = HEAP32[i21 >> 2] | 0;
         }
         _ft_mem_free(i22, HEAP32[i2 + (i4 << 3) + 4 >> 2] | 0);
         i2 = HEAP32[i21 >> 2] | 0;
         HEAP32[i2 + (i4 << 3) + 4 >> 2] = 0;
         i4 = i4 + 1 | 0;
        } while ((i4 | 0) < (HEAP32[i26 >> 2] | 0));
       }
       _ft_mem_free(i22, i2);
       HEAP32[i21 >> 2] = 0;
      }
     } else i1 = 0; else i1 = 0; while (0);
     _ft_mem_free(i22, i1);
     HEAP32[i31 >> 2] = HEAP32[i29 >> 2];
     i1 = i27;
    } else i1 = i27;
   }
  } else {
   i1 = 2;
   i33 = 36;
  }
 } else i33 = 36; while (0);
 if ((i33 | 0) == 36) {
  HEAP32[i31 >> 2] = i1;
  i1 = i30 + 76 | 0;
 }
 if (HEAP32[i1 >> 2] | 0) _FT_Stream_ReleaseFrame(HEAP32[i28 >> 2] | 0, i1);
 FUNCTION_TABLE_vi[HEAP32[i30 + 24 >> 2] & 127](i30);
 i1 = HEAP32[i31 >> 2] | 0;
 if ((i32 | 0) < 0 | (i1 | 0) != 0) {
  i35 = i1;
  STACKTOP = i34;
  return i35 | 0;
 }
 if (i32 | 0) {
  i35 = 6;
  STACKTOP = i34;
  return i35 | 0;
 }
 i7 = i35 + 140 | 0;
 i8 = i7 + 24 | 0;
 HEAP32[i35 + 16 >> 2] = HEAP32[i7 + 156 >> 2];
 HEAP32[i35 + 36 >> 2] = 0;
 HEAP32[i35 + 4 >> 2] = 0;
 i1 = i35 + 8 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i2 | 2065;
 if (HEAP8[i7 + 48 >> 0] | 0) HEAP32[i1 >> 2] = i2 | 2069;
 i1 = HEAP32[i7 + 36 >> 2] | 0;
 i2 = i35 + 20 | 0;
 HEAP32[i2 >> 2] = i1;
 i6 = i35 + 24 | 0;
 HEAP32[i6 >> 2] = 281615;
 L211 : do if (!i1) {
  i1 = HEAP32[i7 >> 2] | 0;
  if (i1 | 0) HEAP32[i2 >> 2] = i1;
 } else {
  i2 = HEAP32[i7 + 32 >> 2] | 0;
  if (i2 | 0) {
   i3 = HEAP8[i2 >> 0] | 0;
   if (i3 << 24 >> 24) {
    L217 : while (1) {
     i5 = i3 << 24 >> 24 == 0;
     L219 : while (1) {
      i4 = HEAP8[i1 >> 0] | 0;
      if (i3 << 24 >> 24 == i4 << 24 >> 24) {
       i33 = 151;
       break;
      }
      switch (i3 << 24 >> 24) {
      case 45:
      case 32:
       break L219;
      default:
       {}
      }
      switch (i4 << 24 >> 24) {
      case 0:
       break L217;
      case 45:
      case 32:
       break;
      default:
       break L211;
      }
      if (i5) break L211; else i1 = i1 + 1 | 0;
     }
     if ((i33 | 0) == 151) {
      i33 = 0;
      i1 = i1 + 1 | 0;
     }
     i2 = i2 + 1 | 0;
     i3 = HEAP8[i2 >> 0] | 0;
     if (!(i3 << 24 >> 24)) break L211;
    }
    HEAP32[i6 >> 2] = i2;
   }
  }
 } while (0);
 i2 = i35 + 12 | 0;
 i1 = (HEAP32[i7 + 44 >> 2] | 0) != 0 & 1;
 HEAP32[i2 >> 2] = i1;
 i3 = HEAP32[i7 + 40 >> 2] | 0;
 do if (i3 | 0) {
  if (_strcmp(i3, 355510) | 0) if (_strcmp(i3, 280361) | 0) break;
  HEAP32[i2 >> 2] = i1 | 2;
 } while (0);
 HEAP32[i35 + 28 >> 2] = 0;
 HEAP32[i35 + 32 >> 2] = 0;
 HEAP32[i35 + 52 >> 2] = HEAP32[i7 + 56 >> 2] >> 16;
 i3 = HEAP32[i7 + 60 >> 2] >> 16;
 HEAP32[i35 + 56 >> 2] = i3;
 HEAP32[i35 + 60 >> 2] = (HEAP32[i7 + 64 >> 2] | 0) + 65535 >> 16;
 i4 = (HEAP32[i7 + 68 >> 2] | 0) + 65535 >> 16;
 HEAP32[i35 + 64 >> 2] = i4;
 i2 = i35 + 68 | 0;
 i1 = HEAP16[i2 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  HEAP16[i2 >> 1] = 1e3;
  i1 = 1e3;
 }
 HEAP16[i35 + 70 >> 1] = i4;
 HEAP16[i35 + 72 >> 1] = i3;
 i33 = (((i1 & 65535) * 12 | 0) >>> 0) / 10 | 0;
 i32 = i4 - i3 | 0;
 HEAP16[i35 + 74 >> 1] = (i33 << 16 >> 16 | 0) < (i32 | 0) ? i32 : i33;
 HEAP16[i35 + 80 >> 1] = HEAP16[i8 + 26 >> 1] | 0;
 HEAP16[i35 + 82 >> 1] = HEAP16[i7 + 52 >> 1] | 0;
 i35 = 0;
 STACKTOP = i34;
 return i35 | 0;
}

function _ps_parser_load_field(i7, i6, i31, i32, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i31 = i31 | 0;
 i32 = i32 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i33 = 0, i34 = 0, i35 = 0;
 i35 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i29 = i35 + 36 | 0;
 i2 = i35 + 24 | 0;
 i33 = i35 + 20 | 0;
 i34 = i35 + 16 | 0;
 i30 = i35;
 _ps_parser_to_token(i7, i2);
 i28 = HEAP32[i2 + 8 >> 2] | 0;
 L1 : do if (i28 | 0) {
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i33 >> 2] = i1;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  i4 = HEAP32[i6 + 8 >> 2] | 0;
  i2 = i1;
  if ((i4 | 0) == 7) {
   i25 = HEAP32[i7 >> 2] | 0;
   i27 = i7 + 8 | 0;
   i26 = HEAP32[i27 >> 2] | 0;
   HEAP32[i7 >> 2] = i2 + 1;
   HEAP32[i27 >> 2] = i3 + -1;
   _ps_parser_to_token(i7, i29);
   HEAP32[i7 >> 2] = i25;
   HEAP32[i27 >> 2] = i26;
   if ((HEAP32[i29 + 8 >> 2] | 0) == 3) {
    i5 = 1;
    i4 = 8;
    i10 = 5;
   } else {
    i2 = 0;
    i5 = 1;
    i4 = 7;
    i10 = 7;
   }
  } else if ((i28 | 0) == 3) {
   i5 = i32;
   i10 = 5;
  } else {
   i2 = 0;
   i5 = 1;
   i10 = 7;
  }
  if ((i10 | 0) == 5) {
   if (!i32) break;
   i1 = i2 + 1 | 0;
   HEAP32[i33 >> 2] = i1;
   if (i5 | 0) {
    i3 = i3 + -1 | 0;
    i2 = 1;
    i10 = 7;
   }
  }
  L9 : do if ((i10 | 0) == 7) {
   i27 = i6 + 16 | 0;
   i26 = i6 + 20 | 0;
   i16 = i7 + 16 | 0;
   i17 = i3;
   i18 = i30 + 4 | 0;
   i19 = i30 + 8 | 0;
   i20 = i30 + 12 | 0;
   i21 = i32 << 2;
   i22 = (i32 | 0) == 0;
   i23 = i32 << 1;
   i24 = i32 * 3 | 0;
   i25 = i32 << 1;
   i15 = i2;
   L11 : while (1) {
    i14 = (HEAP32[i31 + (i15 << 2) >> 2] | 0) + (HEAP32[i27 >> 2] | 0) | 0;
    i2 = i1;
    L13 : do if (i2 >>> 0 < i3 >>> 0) while (1) {
     switch (HEAP8[i2 >> 0] | 0) {
     case 0:
     case 12:
     case 9:
     case 10:
     case 13:
     case 32:
      break;
     case 37:
      {
       i1 = i2;
       i2 = 37;
       L17 : while (1) {
        switch (i2 << 24 >> 24) {
        case 10:
        case 13:
         break L17;
        default:
         {}
        }
        i2 = i1 + 1 | 0;
        if (i2 >>> 0 >= i3 >>> 0) {
         i1 = i2;
         break;
        }
        i1 = i2;
        i2 = HEAP8[i2 >> 0] | 0;
       }
       break;
      }
     default:
      break L13;
     }
     i2 = i1 + 1 | 0;
     i1 = i2;
     if (i2 >>> 0 >= i3 >>> 0) break L13;
    } while (0);
    HEAP32[i33 >> 2] = i1;
    i9 = i1;
    L24 : do switch (i4 | 0) {
    case 1:
     {
      i1 = i9 + 3 | 0;
      if (i1 >>> 0 < i3 >>> 0) if ((HEAP8[i9 >> 0] | 0) == 116) if ((HEAP8[i9 + 1 >> 0] | 0) == 114) if ((HEAP8[i9 + 2 >> 0] | 0) == 117) if ((HEAP8[i1 >> 0] | 0) == 101) {
       i1 = 1;
       i2 = i9 + 5 | 0;
      } else i10 = 22; else i10 = 22; else i10 = 22; else i10 = 22; else i10 = 22;
      if ((i10 | 0) == 22) {
       i2 = i9 + 4 | 0;
       if (i2 >>> 0 < i3 >>> 0) if ((HEAP8[i9 >> 0] | 0) == 102) if ((HEAP8[i9 + 1 >> 0] | 0) == 97) if ((HEAP8[i9 + 2 >> 0] | 0) == 108) if ((HEAP8[i1 >> 0] | 0) == 115) {
        i1 = 0;
        i2 = (HEAP8[i2 >> 0] | 0) == 101 ? i9 + 6 | 0 : i9;
       } else {
        i1 = 0;
        i2 = i9;
       } else {
        i1 = 0;
        i2 = i9;
       } else {
        i1 = 0;
        i2 = i9;
       } else {
        i1 = 0;
        i2 = i9;
       } else {
        i1 = 0;
        i2 = i9;
       }
      }
      HEAP32[i33 >> 2] = i2;
      i10 = 57;
      break;
     }
    case 3:
     {
      i1 = _PS_Conv_ToFixed(i33, i3, 0) | 0;
      i10 = 57;
      break;
     }
    case 4:
     {
      i1 = _PS_Conv_ToFixed(i33, i3, 3) | 0;
      i10 = 57;
      break;
     }
    case 2:
     {
      if (i9 >>> 0 < i3 >>> 0) {
       i2 = HEAP8[i9 >> 0] | 0;
       switch (i2 << 24 >> 24) {
       case 43:
       case 45:
        {
         i1 = i9 + 1 | 0;
         if ((i1 | 0) == (i3 | 0)) {
          i1 = 0;
          i10 = 57;
          break L24;
         } else i8 = i2 << 24 >> 24 == 45 & 1;
         break;
        }
       default:
        {
         i1 = i9;
         i8 = 0;
        }
       }
       L47 : do if (i1 >>> 0 < i3 >>> 0) {
        i7 = 0;
        i6 = 0;
        while (1) {
         i2 = HEAP8[i1 >> 0] | 0;
         switch (i2 << 24 >> 24) {
         case 0:
         case 12:
         case 9:
         case 10:
         case 13:
         case 32:
          {
           i2 = i7;
           i13 = i1;
           break L47;
          }
         default:
          {}
         }
         if (i2 << 24 >> 24 < 0) {
          i2 = i7;
          i13 = i1;
          break L47;
         }
         i13 = i2 & 127;
         i2 = HEAP8[284035 + i13 >> 0] | 0;
         if ((i13 + -48 | 0) >>> 0 >= 10) {
          i2 = i7;
          i13 = i1;
          break L47;
         }
         if ((i7 | 0) > 214748364) {
          i2 = i7;
          i6 = 1;
         } else {
          i13 = (i7 | 0) == 214748364 & i2 << 24 >> 24 > 7;
          i2 = i13 ? 214748364 : (i7 * 10 | 0) + (i2 << 24 >> 24) | 0;
          i6 = i13 ? 1 : i6;
         }
         i1 = i1 + 1 | 0;
         if (i1 >>> 0 < i3 >>> 0) i7 = i2; else {
          i13 = i1;
          break L47;
         }
        }
       } else {
        i2 = 0;
        i6 = 0;
        i13 = i1;
       } while (0);
       i1 = i6 << 24 >> 24 == 0 ? i2 : 2147483647;
       i1 = i8 << 24 >> 24 == 0 ? i1 : 0 - i1 | 0;
       i2 = i13;
       if ((i13 | 0) == (i9 | 0)) {
        i1 = 0;
        i10 = 57;
       } else {
        if (i13 >>> 0 < i3 >>> 0) if ((HEAP8[i13 >> 0] | 0) == 35) {
         i2 = i13 + 1 | 0;
         if (i2 >>> 0 >= i3 >>> 0 | (i1 + -2 | 0) >>> 0 > 34) {
          i1 = 0;
          i10 = 57;
          break L24;
         }
         i2 = HEAP8[i2 >> 0] | 0;
         switch (i2 << 24 >> 24) {
         case 43:
         case 45:
          {
           if ((i13 + 2 | 0) == (i3 | 0)) {
            i1 = 0;
            i10 = 57;
            break L24;
           } else {
            i7 = 2;
            i12 = i2 << 24 >> 24 == 45 & 1;
           }
           break;
          }
         default:
          {
           i7 = 1;
           i12 = 0;
          }
         }
         i10 = 2147483647 / (i1 | 0) | 0;
         L65 : do if ((i13 + i7 | 0) >>> 0 < i3 >>> 0) {
          i11 = (2147483647 % (i1 | 0) | 0) << 24 >> 24;
          i8 = 0;
          i9 = 0;
          i2 = i7;
          while (1) {
           i6 = HEAP8[i13 + i2 >> 0] | 0;
           switch (i6 << 24 >> 24) {
           case 0:
           case 12:
           case 9:
           case 10:
           case 13:
           case 32:
            {
             i6 = i8;
             i1 = i9;
             break L65;
            }
           default:
            {}
           }
           if (i6 << 24 >> 24 < 0) {
            i6 = i8;
            i1 = i9;
            break L65;
           }
           i7 = HEAP8[284035 + (i6 & 127) >> 0] | 0;
           i6 = i7 << 24 >> 24;
           if (!(i7 << 24 >> 24 > -1 & (i6 | 0) < (i1 | 0))) {
            i6 = i8;
            i1 = i9;
            break L65;
           }
           if ((i8 | 0) > (i10 | 0)) {
            i6 = i8;
            i7 = 1;
           } else {
            i7 = (i8 | 0) == (i10 | 0) & (i6 | 0) > (i11 | 0);
            i6 = i6 + (Math_imul(i8, i1) | 0) | 0;
            i6 = i7 ? i10 : i6;
            i7 = i7 ? 1 : i9;
           }
           i2 = i2 + 1 | 0;
           if ((i13 + i2 | 0) >>> 0 < i3 >>> 0) {
            i8 = i6;
            i9 = i7;
           } else {
            i1 = i7;
            break L65;
           }
          }
         } else {
          i6 = 0;
          i1 = 0;
          i2 = i7;
         } while (0);
         i1 = i1 << 24 >> 24 == 0 ? i6 : 2147483647;
         if ((i2 | 0) == 1) {
          i1 = 0;
          i10 = 57;
          break L24;
         } else {
          i1 = i12 << 24 >> 24 == 0 ? i1 : 0 - i1 | 0;
          i2 = i13 + i2 | 0;
         }
        }
        HEAP32[i33 >> 2] = i2;
        i10 = 57;
       }
      } else {
       i1 = 0;
       i10 = 57;
      }
      break;
     }
    case 6:
    case 5:
     {
      i7 = HEAP32[i16 >> 2] | 0;
      i1 = i17 - i1 | 0;
      if (i9 >>> 0 < i3 >>> 0) {
       switch (i28 | 0) {
       case 4:
        {
         i6 = i9 + 1 | 0;
         HEAP32[i33 >> 2] = i6;
         i2 = i1 + -1 | 0;
         break;
        }
       case 2:
        {
         i6 = i9 + 1 | 0;
         HEAP32[i33 >> 2] = i6;
         i2 = i1 + -2 | 0;
         break;
        }
       default:
        {
         i10 = 66;
         break L11;
        }
       }
       i1 = HEAP32[i14 >> 2] | 0;
       if (i1 | 0) {
        _ft_mem_free(i7, i1);
        HEAP32[i14 >> 2] = 0;
       }
       i1 = _ft_mem_alloc(i7, i2 + 1 | 0, i34) | 0;
       if (HEAP32[i34 >> 2] | 0) {
        i10 = 71;
        break L11;
       }
       _memcpy(i1 | 0, i6 | 0, i2 | 0) | 0;
       HEAP8[i1 + i2 >> 0] = 0;
       HEAP32[i14 >> 2] = i1;
      }
      break;
     }
    case 7:
     {
      HEAP32[i29 >> 2] = i9;
      if (i9 >>> 0 >= i3 >>> 0) {
       i10 = 73;
       break L11;
      }
      i8 = HEAP8[i9 >> 0] | 0;
      i8 = i8 << 24 >> 24 == 91 ? 93 : i8 << 24 >> 24 == 123 ? 125 : 0;
      L89 : do if (!(i8 << 24 >> 24)) {
       if (i9 >>> 0 >= i3 >>> 0) {
        i10 = 101;
        break L11;
       }
       i2 = i1;
       L92 : do if (i2 >>> 0 < i3 >>> 0) while (1) {
        switch (HEAP8[i2 >> 0] | 0) {
        case 0:
        case 12:
        case 9:
        case 10:
        case 13:
        case 32:
         break;
        case 37:
         {
          i1 = i2;
          i2 = 37;
          L96 : while (1) {
           switch (i2 << 24 >> 24) {
           case 10:
           case 13:
            break L96;
           default:
            {}
           }
           i2 = i1 + 1 | 0;
           if (i2 >>> 0 >= i3 >>> 0) {
            i1 = i2;
            break;
           }
           i1 = i2;
           i2 = HEAP8[i2 >> 0] | 0;
          }
          break;
         }
        default:
         break L92;
        }
        i2 = i1 + 1 | 0;
        i1 = i2;
        if (i2 >>> 0 >= i3 >>> 0) break L92;
       } while (0);
       HEAP32[i29 >> 2] = i1;
       i2 = i1;
       if (i2 >>> 0 >= i3 >>> 0) {
        i10 = 101;
        break L11;
       }
       if (!(HEAP8[i2 >> 0] | 0)) {
        i6 = 0;
        i1 = i2;
        i10 = 100;
       } else {
        i10 = 86;
        break L11;
       }
      } else {
       i1 = i9 + 1 | 0;
       HEAP32[i29 >> 2] = i1;
       i6 = 0;
       i2 = i1;
       while (1) {
        if (i2 >>> 0 >= i3 >>> 0) {
         i10 = 102;
         break L89;
        }
        i2 = i1;
        L108 : do if (i2 >>> 0 < i3 >>> 0) while (1) {
         switch (HEAP8[i2 >> 0] | 0) {
         case 0:
         case 12:
         case 9:
         case 10:
         case 13:
         case 32:
          break;
         case 37:
          {
           i1 = i2;
           i2 = 37;
           L112 : while (1) {
            switch (i2 << 24 >> 24) {
            case 10:
            case 13:
             break L112;
            default:
             {}
            }
            i2 = i1 + 1 | 0;
            if (i2 >>> 0 >= i3 >>> 0) {
             i1 = i2;
             break;
            }
            i1 = i2;
            i2 = HEAP8[i2 >> 0] | 0;
           }
           break;
          }
         default:
          {
           i2 = i1;
           break L108;
          }
         }
         i2 = i1 + 1 | 0;
         i1 = i2;
         if (i2 >>> 0 >= i3 >>> 0) {
          i2 = i1;
          break L108;
         }
        } else i2 = i1; while (0);
        HEAP32[i29 >> 2] = i2;
        i1 = i2;
        if (i1 >>> 0 >= i3 >>> 0) {
         i1 = i2;
         i10 = 102;
         break L89;
        }
        if ((HEAP8[i1 >> 0] | 0) == i8 << 24 >> 24) {
         i10 = 100;
         break L89;
        }
        if ((i6 | 0) >= 4) break;
        i2 = _PS_Conv_ToFixed(i29, i3, 0) | 0;
        HEAP32[i30 + (i6 << 2) >> 2] = i2;
        i2 = HEAP32[i29 >> 2] | 0;
        i7 = i2;
        if ((i1 | 0) == (i2 | 0)) {
         i6 = -1;
         i1 = i7;
         i10 = 102;
         break L89;
        } else {
         i6 = i6 + 1 | 0;
         i1 = i7;
        }
       }
       HEAP32[i33 >> 2] = i2;
      } while (0);
      if ((i10 | 0) == 100) {
       i1 = i1 + 1 | 0;
       HEAP32[i29 >> 2] = i1;
       i10 = 102;
      }
      if ((i10 | 0) == 102) {
       i10 = 0;
       HEAP32[i33 >> 2] = i1;
       if ((i6 | 0) < 4) break L11;
      }
      i13 = _FT_RoundFix(HEAP32[i30 >> 2] | 0) | 0;
      HEAP32[i14 >> 2] = i13;
      i13 = _FT_RoundFix(HEAP32[i18 >> 2] | 0) | 0;
      HEAP32[i14 + 4 >> 2] = i13;
      i13 = _FT_RoundFix(HEAP32[i19 >> 2] | 0) | 0;
      HEAP32[i14 + 8 >> 2] = i13;
      i13 = _FT_RoundFix(HEAP32[i20 >> 2] | 0) | 0;
      HEAP32[i14 + 12 >> 2] = i13;
      break;
     }
    case 8:
     {
      i6 = HEAP32[i16 >> 2] | 0;
      i7 = _ft_mem_realloc(i6, 4, 0, i21, 0, i34) | 0;
      i1 = HEAP32[i34 >> 2] | 0;
      if (i1 | 0) {
       i10 = 122;
       break L11;
      }
      i14 = _ps_tofixedarray(i33, i3, i32, i7, 0) | 0;
      if ((i14 | 0) < 0 | i14 >>> 0 < i32 >>> 0) {
       i10 = 107;
       break L11;
      }
      i2 = HEAP32[i33 >> 2] | 0;
      i1 = i2;
      L131 : do if (i1 >>> 0 < i3 >>> 0) while (1) {
       switch (HEAP8[i1 >> 0] | 0) {
       case 0:
       case 12:
       case 9:
       case 10:
       case 13:
       case 32:
        {
         i1 = i2;
         break;
        }
       case 37:
        {
         i2 = 37;
         L135 : while (1) {
          switch (i2 << 24 >> 24) {
          case 10:
          case 13:
           break L135;
          default:
           {}
          }
          i2 = i1 + 1 | 0;
          if (i2 >>> 0 >= i3 >>> 0) {
           i1 = i2;
           break;
          }
          i1 = i2;
          i2 = HEAP8[i2 >> 0] | 0;
         }
         break;
        }
       default:
        {
         i1 = i2;
         break L131;
        }
       }
       i1 = i1 + 1 | 0;
       i2 = i1;
       if (i1 >>> 0 >= i3 >>> 0) {
        i1 = i2;
        break L131;
       }
      } else i1 = i2; while (0);
      HEAP32[i33 >> 2] = i1;
      i14 = _ps_tofixedarray(i33, i3, i32, i7 + (i32 << 2) | 0, 0) | 0;
      if ((i14 | 0) < 0 | i14 >>> 0 < i32 >>> 0) {
       i10 = 107;
       break L11;
      }
      i2 = HEAP32[i33 >> 2] | 0;
      i1 = i2;
      L143 : do if (i1 >>> 0 < i3 >>> 0) while (1) {
       switch (HEAP8[i1 >> 0] | 0) {
       case 0:
       case 12:
       case 9:
       case 10:
       case 13:
       case 32:
        {
         i1 = i2;
         break;
        }
       case 37:
        {
         i2 = 37;
         L147 : while (1) {
          switch (i2 << 24 >> 24) {
          case 10:
          case 13:
           break L147;
          default:
           {}
          }
          i2 = i1 + 1 | 0;
          if (i2 >>> 0 >= i3 >>> 0) {
           i1 = i2;
           break;
          }
          i1 = i2;
          i2 = HEAP8[i2 >> 0] | 0;
         }
         break;
        }
       default:
        {
         i1 = i2;
         break L143;
        }
       }
       i1 = i1 + 1 | 0;
       i2 = i1;
       if (i1 >>> 0 >= i3 >>> 0) {
        i1 = i2;
        break L143;
       }
      } else i1 = i2; while (0);
      HEAP32[i33 >> 2] = i1;
      i14 = _ps_tofixedarray(i33, i3, i32, i7 + (i25 << 2) | 0, 0) | 0;
      if ((i14 | 0) < 0 | i14 >>> 0 < i32 >>> 0) {
       i10 = 107;
       break L11;
      }
      i2 = HEAP32[i33 >> 2] | 0;
      i1 = i2;
      L155 : do if (i1 >>> 0 < i3 >>> 0) while (1) {
       switch (HEAP8[i1 >> 0] | 0) {
       case 0:
       case 12:
       case 9:
       case 10:
       case 13:
       case 32:
        {
         i1 = i2;
         break;
        }
       case 37:
        {
         i2 = 37;
         L159 : while (1) {
          switch (i2 << 24 >> 24) {
          case 10:
          case 13:
           break L159;
          default:
           {}
          }
          i2 = i1 + 1 | 0;
          if (i2 >>> 0 >= i3 >>> 0) {
           i1 = i2;
           break;
          }
          i1 = i2;
          i2 = HEAP8[i2 >> 0] | 0;
         }
         break;
        }
       default:
        {
         i1 = i2;
         break L155;
        }
       }
       i1 = i1 + 1 | 0;
       i2 = i1;
       if (i1 >>> 0 >= i3 >>> 0) {
        i1 = i2;
        break L155;
       }
      } else i1 = i2; while (0);
      HEAP32[i33 >> 2] = i1;
      i14 = _ps_tofixedarray(i33, i3, i32, i7 + (i24 << 2) | 0, 0) | 0;
      if ((i14 | 0) < 0 | i14 >>> 0 < i32 >>> 0) {
       i10 = 107;
       break L11;
      }
      i2 = HEAP32[i33 >> 2] | 0;
      i1 = i2;
      L167 : do if (i1 >>> 0 < i3 >>> 0) while (1) {
       switch (HEAP8[i1 >> 0] | 0) {
       case 0:
       case 12:
       case 9:
       case 10:
       case 13:
       case 32:
        {
         i1 = i2;
         break;
        }
       case 37:
        {
         i2 = 37;
         L171 : while (1) {
          switch (i2 << 24 >> 24) {
          case 10:
          case 13:
           break L171;
          default:
           {}
          }
          i2 = i1 + 1 | 0;
          if (i2 >>> 0 >= i3 >>> 0) {
           i1 = i2;
           break;
          }
          i1 = i2;
          i2 = HEAP8[i2 >> 0] | 0;
         }
         break;
        }
       default:
        {
         i1 = i2;
         break L167;
        }
       }
       i1 = i1 + 1 | 0;
       i2 = i1;
       if (i1 >>> 0 >= i3 >>> 0) {
        i1 = i2;
        break L167;
       }
      } else i1 = i2; while (0);
      HEAP32[i33 >> 2] = i1;
      if (!i22) {
       i1 = 0;
       do {
        i14 = HEAP32[i31 + (i1 << 2) >> 2] | 0;
        i13 = _FT_RoundFix(HEAP32[i7 + (i1 << 2) >> 2] | 0) | 0;
        HEAP32[i14 >> 2] = i13;
        i13 = _FT_RoundFix(HEAP32[i7 + (i1 + i32 << 2) >> 2] | 0) | 0;
        HEAP32[i14 + 4 >> 2] = i13;
        i13 = _FT_RoundFix(HEAP32[i7 + (i1 + i23 << 2) >> 2] | 0) | 0;
        HEAP32[i14 + 8 >> 2] = i13;
        i13 = _FT_RoundFix(HEAP32[i7 + (i1 + i24 << 2) >> 2] | 0) | 0;
        HEAP32[i14 + 12 >> 2] = i13;
        i1 = i1 + 1 | 0;
       } while ((i1 | 0) != (i32 | 0));
      }
      _ft_mem_free(i6, i7);
      break;
     }
    default:
     break L1;
    } while (0);
    L182 : do if ((i10 | 0) == 57) {
     i10 = 0;
     switch (HEAP8[i26 >> 0] | 0) {
     case 1:
      {
       HEAP8[i14 >> 0] = i1;
       break L182;
      }
     case 2:
      {
       HEAP16[i14 >> 1] = i1;
       break L182;
      }
     case 4:
      {
       HEAP32[i14 >> 2] = i1;
       break L182;
      }
     default:
      {
       HEAP32[i14 >> 2] = i1;
       break L182;
      }
     }
    } while (0);
    i5 = i5 + -1 | 0;
    if (!i5) break L9;
    i15 = i15 + 1 | 0;
    i1 = HEAP32[i33 >> 2] | 0;
   }
   if ((i10 | 0) == 66) {
    HEAP32[i34 >> 2] = 3;
    i10 = 71;
   } else if ((i10 | 0) == 73) HEAP32[i33 >> 2] = i1; else if ((i10 | 0) == 86) {
    i1 = _PS_Conv_ToFixed(i29, i3, 0) | 0;
    HEAP32[i30 >> 2] = i1;
    i1 = HEAP32[i29 >> 2] | 0;
    i10 = 101;
   } else if ((i10 | 0) == 107) {
    HEAP32[i34 >> 2] = 3;
    i34 = 3;
    STACKTOP = i35;
    return i34 | 0;
   } else if ((i10 | 0) == 122) {
    STACKTOP = i35;
    return i1 | 0;
   }
   if ((i10 | 0) == 71) {
    i34 = HEAP32[i34 >> 2] | 0;
    STACKTOP = i35;
    return i34 | 0;
   } else if ((i10 | 0) == 101) HEAP32[i33 >> 2] = i1;
   HEAP32[i34 >> 2] = 3;
   i34 = 3;
   STACKTOP = i35;
   return i34 | 0;
  } while (0);
  HEAP32[i34 >> 2] = 0;
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 } while (0);
 HEAP32[i34 >> 2] = 3;
 i34 = 3;
 STACKTOP = i35;
 return i34 | 0;
}

function _cf2_hintmap_build(i45, i43, i2, i46, i37, i1) {
 i45 = i45 | 0;
 i43 = i43 | 0;
 i2 = i2 | 0;
 i46 = i46 | 0;
 i37 = i37 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i44 = 0, i47 = 0;
 i47 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i40 = i47 + 48 | 0;
 i6 = i47 + 20 | 0;
 i38 = i47;
 i35 = HEAP32[i45 >> 2] | 0;
 i41 = i1 << 24 >> 24 != 0;
 if (!i41) {
  i1 = HEAP32[i45 + 4 >> 2] | 0;
  if (!(HEAP8[i1 + 12 >> 0] | 0)) {
   i44 = HEAP32[i46 >> 2] | 0;
   i42 = i6 + 4 | 0;
   HEAP32[i42 >> 2] = 0;
   HEAP32[i42 + 4 >> 2] = 0;
   HEAP32[i42 + 8 >> 2] = 0;
   HEAP32[i42 + 12 >> 2] = 0;
   HEAP32[i42 + 16 >> 2] = 0;
   HEAP32[i42 + 20 >> 2] = 0;
   HEAP32[i6 >> 2] = i44;
   _cf2_hintmap_build(i1, i43, i2, i6, i37, 1);
  }
 }
 i5 = i46 + 4 | 0;
 i44 = i43 + 20 | 0;
 do if (!(HEAP8[i5 >> 0] | 0)) {
  i1 = (HEAP32[i2 + 20 >> 2] | 0) + (HEAP32[i44 >> 2] | 0) | 0;
  i4 = 0 - i1 & 7;
  if (i1 >>> 0 > 96) {
   i1 = HEAP32[i46 >> 2] | 0;
   if (!i1) {
    STACKTOP = i47;
    return;
   }
   if (HEAP32[i1 >> 2] | 0) {
    STACKTOP = i47;
    return;
   }
   HEAP32[i1 >> 2] = 18;
   STACKTOP = i47;
   return;
  } else {
   HEAP32[i46 + 8 >> 2] = i1;
   i2 = (i1 + 7 | 0) >>> 3;
   i3 = i46 + 12 | 0;
   HEAP32[i3 >> 2] = i2;
   HEAP8[i5 >> 0] = 1;
   HEAP8[i46 + 5 >> 0] = 1;
   if (!i1) break;
   if (!i2) i1 = -1; else {
    i1 = 0;
    do {
     HEAP8[i46 + 16 + i1 >> 0] = -1;
     i1 = i1 + 1 | 0;
     i2 = HEAP32[i3 >> 2] | 0;
    } while (i1 >>> 0 < i2 >>> 0);
    i1 = i2 + -1 | 0;
   }
   i42 = i46 + 16 + i1 | 0;
   HEAP8[i42 >> 0] = HEAPU8[i42 >> 0] & -1 << i4;
   if (HEAP8[i5 >> 0] | 0) break;
   STACKTOP = i47;
   return;
  }
 } while (0);
 i42 = i45 + 20 | 0;
 HEAP32[i42 >> 2] = 0;
 HEAP32[i45 + 24 >> 2] = 0;
 HEAP32[i6 >> 2] = HEAP32[i46 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i46 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i46 + 12 >> 2];
 HEAP32[i6 + 16 >> 2] = HEAP32[i46 + 16 >> 2];
 HEAP32[i6 + 20 >> 2] = HEAP32[i46 + 20 >> 2];
 HEAP32[i6 + 24 >> 2] = HEAP32[i46 + 24 >> 2];
 i34 = i6 + 16 | 0;
 i36 = HEAP32[i44 >> 2] | 0;
 if (i36 >>> 0 > (HEAP32[i46 + 8 >> 2] | 0) >>> 0) {
  STACKTOP = i47;
  return;
 }
 if (HEAP8[i35 + 205 >> 0] | 0) {
  HEAP32[i40 >> 2] = 0;
  HEAP32[i40 + 4 >> 2] = 0;
  HEAP32[i40 + 8 >> 2] = 0;
  HEAP32[i40 + 12 >> 2] = 0;
  HEAP32[i40 + 16 >> 2] = 0;
  _cf2_hintmap_insertHint(i45, i35 + 244 | 0, i40);
  _cf2_hintmap_insertHint(i45, i40, i35 + 224 | 0);
 }
 i16 = (i36 | 0) == 0;
 if (!i16) {
  i17 = i45 + 16 | 0;
  i18 = i43 + 28 | 0;
  i19 = i43 + 8 | 0;
  i20 = i40 + 8 | 0;
  i21 = i40 + 16 | 0;
  i22 = i40 + 4 | 0;
  i23 = i40 + 12 | 0;
  i24 = i38 + 8 | 0;
  i25 = i35 + 188 | 0;
  i26 = i38 + 16 | 0;
  i27 = i38 + 4 | 0;
  i28 = i38 + 12 | 0;
  i29 = i35 + 216 | 0;
  i30 = i35 + 200 | 0;
  i31 = i35 + 204 | 0;
  i32 = i35 + 212 | 0;
  i33 = i43 + 4 | 0;
  i13 = 0;
  i14 = i34;
  i15 = 128;
  while (1) {
   if (HEAPU8[i14 >> 0] & i15 | 0) {
    i6 = HEAP32[i17 >> 2] | 0;
    HEAP32[i40 >> 2] = 0;
    HEAP32[i40 + 4 >> 2] = 0;
    HEAP32[i40 + 8 >> 2] = 0;
    HEAP32[i40 + 12 >> 2] = 0;
    HEAP32[i40 + 16 >> 2] = 0;
    if ((HEAP32[i44 >> 2] | 0) >>> 0 > i13 >>> 0) i1 = i13; else {
     i1 = HEAP32[i33 >> 2] | 0;
     if (!i1) i1 = 0; else if (!(HEAP32[i1 >> 2] | 0)) {
      HEAP32[i1 >> 2] = 130;
      i1 = 0;
     } else i1 = 0;
    }
    i5 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i19 >> 2] | 0, i1) | 0) | 0;
    i2 = HEAP32[i5 + 8 >> 2] | 0;
    i3 = HEAP32[i5 + 4 >> 2] | 0;
    i4 = i2 - i3 | 0;
    L42 : do if ((i4 | 0) < -1310720) switch (i4 | 0) {
    case -1376256:
     {
      i1 = 1;
      i39 = 27;
      break;
     }
    default:
     i39 = 25;
    } else {
     switch (i4 | 0) {
     case -1310720:
      break;
     default:
      {
       i39 = 25;
       break L42;
      }
     }
     HEAP32[i40 >> 2] = 0;
     HEAP32[i20 >> 2] = i37;
     HEAP32[i21 >> 2] = i6;
     HEAP32[i22 >> 2] = i13;
     i1 = 0;
     i2 = i37;
     i39 = 29;
    } while (0);
    if ((i39 | 0) == 25) {
     i1 = 4;
     i2 = (i4 | 0) < 0 ? i2 : i3;
     i39 = 27;
    }
    if ((i39 | 0) == 27) {
     i39 = 0;
     HEAP32[i20 >> 2] = i2;
     HEAP32[i40 >> 2] = i1;
     i2 = i2 + i37 | 0;
     HEAP32[i20 >> 2] = i2;
     HEAP32[i21 >> 2] = i6;
     HEAP32[i22 >> 2] = i13;
     if (!(HEAP8[i5 >> 0] | 0)) i39 = 29; else {
      i11 = HEAP32[i5 + 12 >> 2] | 0;
      HEAP32[i23 >> 2] = i11;
      i12 = i1 | 16;
      HEAP32[i40 >> 2] = i12;
     }
    }
    if ((i39 | 0) == 29) {
     i11 = _FT_MulFix(i2, i6) | 0;
     HEAP32[i23 >> 2] = i11;
     i12 = i1;
    }
    i7 = HEAP32[i17 >> 2] | 0;
    HEAP32[i38 >> 2] = 0;
    HEAP32[i38 + 4 >> 2] = 0;
    HEAP32[i38 + 8 >> 2] = 0;
    HEAP32[i38 + 12 >> 2] = 0;
    HEAP32[i38 + 16 >> 2] = 0;
    if ((HEAP32[i44 >> 2] | 0) >>> 0 > i13 >>> 0) i1 = i13; else {
     i1 = HEAP32[i33 >> 2] | 0;
     if (!i1) i1 = 0; else if (!(HEAP32[i1 >> 2] | 0)) {
      HEAP32[i1 >> 2] = 130;
      i1 = 0;
     } else i1 = 0;
    }
    i6 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i19 >> 2] | 0, i1) | 0) | 0;
    i4 = HEAP32[i6 + 8 >> 2] | 0;
    i3 = HEAP32[i6 + 4 >> 2] | 0;
    i5 = i4 - i3 | 0;
    L59 : do if ((i5 | 0) < -1310720) {
     switch (i5 | 0) {
     case -1376256:
      break;
     default:
      {
       i39 = 36;
       break L59;
      }
     }
     HEAP32[i38 >> 2] = 0;
     HEAP32[i24 >> 2] = i37;
     HEAP32[i26 >> 2] = i7;
     HEAP32[i27 >> 2] = i13;
     i3 = i37;
     i1 = 0;
     i39 = 39;
    } else switch (i5 | 0) {
    case -1310720:
     {
      i1 = 2;
      i39 = 37;
      break;
     }
    default:
     i39 = 36;
    } while (0);
    if ((i39 | 0) == 36) {
     i1 = 8;
     i3 = (i5 | 0) < 0 ? i3 : i4;
     i39 = 37;
    }
    if ((i39 | 0) == 37) {
     i39 = 0;
     HEAP32[i24 >> 2] = i3;
     HEAP32[i38 >> 2] = i1;
     i3 = i3 + (HEAP32[i25 >> 2] << 1) + i37 | 0;
     HEAP32[i24 >> 2] = i3;
     HEAP32[i26 >> 2] = i7;
     HEAP32[i27 >> 2] = i13;
     if (!(HEAP8[i6 >> 0] | 0)) i39 = 39; else {
      i9 = HEAP32[i6 + 16 >> 2] | 0;
      HEAP32[i28 >> 2] = i9;
      i10 = i1 | 16;
      HEAP32[i38 >> 2] = i10;
      i8 = i3;
     }
    }
    if ((i39 | 0) == 39) {
     i39 = 0;
     i9 = _FT_MulFix(i3, i7) | 0;
     HEAP32[i28 >> 2] = i9;
     i10 = i1;
     i8 = i3;
    }
    L71 : do if (!((i12 | i10) & 16)) {
     i6 = HEAP32[i29 >> 2] | 0;
     i7 = HEAP32[i30 >> 2] | 0;
     if (i7 | 0) {
      i1 = (i10 & 10 | 0) == 0;
      L74 : do if (!(i12 & 5)) {
       if (i1) break L71; else i1 = 0;
       while (1) {
        do if (!(HEAP8[i35 + 264 + (i1 * 20 | 0) + 16 >> 0] | 0)) {
         i2 = HEAP32[i35 + 264 + (i1 * 20 | 0) >> 2] | 0;
         if ((i2 - i6 | 0) > (i8 | 0)) break;
         if ((i8 | 0) <= ((HEAP32[i35 + 264 + (i1 * 20 | 0) + 4 >> 2] | 0) + i6 | 0)) {
          i3 = i1;
          i39 = 62;
          break L74;
         }
        } while (0);
        i1 = i1 + 1 | 0;
        if (i1 >>> 0 >= i7 >>> 0) break L71;
       }
      } else {
       L83 : do if (i1) {
        i1 = 0;
        while (1) {
         do if (HEAP8[i35 + 264 + (i1 * 20 | 0) + 16 >> 0] | 0) {
          if (((HEAP32[i35 + 264 + (i1 * 20 | 0) >> 2] | 0) - i6 | 0) > (i2 | 0)) break;
          i3 = HEAP32[i35 + 264 + (i1 * 20 | 0) + 4 >> 2] | 0;
          if ((i2 | 0) <= (i3 + i6 | 0)) {
           i4 = i1;
           break L83;
          }
         } while (0);
         i1 = i1 + 1 | 0;
         if (i1 >>> 0 >= i7 >>> 0) break L71;
        }
       } else {
        i4 = 0;
        while (1) {
         i5 = HEAP32[i35 + 264 + (i4 * 20 | 0) >> 2] | 0;
         i1 = i5 - i6 | 0;
         do if (!(HEAP8[i35 + 264 + (i4 * 20 | 0) + 16 >> 0] | 0)) {
          if ((i1 | 0) > (i8 | 0)) break;
          if ((i8 | 0) <= ((HEAP32[i35 + 264 + (i4 * 20 | 0) + 4 >> 2] | 0) + i6 | 0)) {
           i3 = i4;
           i2 = i5;
           i39 = 62;
           break L74;
          }
         } else {
          if ((i1 | 0) > (i2 | 0)) break;
          i3 = HEAP32[i35 + 264 + (i4 * 20 | 0) + 4 >> 2] | 0;
          if ((i2 | 0) <= (i3 + i6 | 0)) break L83;
         } while (0);
         i4 = i4 + 1 | 0;
         if (i4 >>> 0 >= i7 >>> 0) break L71;
        }
       } while (0);
       if (HEAP8[i31 >> 0] | 0) {
        i1 = HEAP32[i35 + 264 + (i4 * 20 | 0) + 12 >> 2] | 0;
        i2 = i40;
        break;
       }
       i1 = i11 + 32768 & -65536;
       if ((i3 - i2 | 0) < (HEAP32[i32 >> 2] | 0)) {
        i2 = i40;
        break;
       }
       i2 = (HEAP32[i35 + 264 + (i4 * 20 | 0) + 12 >> 2] | 0) + -65536 | 0;
       i1 = (i1 | 0) < (i2 | 0) ? i1 : i2;
       i2 = i40;
      } while (0);
      do if ((i39 | 0) == 62) {
       if (HEAP8[i31 >> 0] | 0) {
        i1 = HEAP32[i35 + 264 + (i3 * 20 | 0) + 12 >> 2] | 0;
        i2 = i38;
        break;
       }
       i1 = i9 + 32768 & -65536;
       if ((i8 - i2 | 0) < (HEAP32[i32 >> 2] | 0)) i2 = i38; else {
        i2 = (HEAP32[i35 + 264 + (i3 * 20 | 0) + 12 >> 2] | 0) + 65536 | 0;
        i1 = (i1 | 0) > (i2 | 0) ? i1 : i2;
        i2 = i38;
       }
      } while (0);
      i1 = i1 - (HEAP32[i2 + 12 >> 2] | 0) | 0;
      if (i12 | 0) {
       HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + i1;
       HEAP32[i40 >> 2] = i12 | 16;
      }
      if (!i10) i39 = 71; else {
       HEAP32[i28 >> 2] = i9 + i1;
       HEAP32[i38 >> 2] = i10 | 16;
       i39 = 71;
      }
     }
    } else i39 = 71; while (0);
    if ((i39 | 0) == 71) {
     i39 = 0;
     _cf2_hintmap_insertHint(i45, i40, i38);
     HEAP8[i14 >> 0] = HEAPU8[i14 >> 0] & (i15 ^ 255);
    }
   }
   i1 = (i13 & 7 | 0) == 7;
   i13 = i13 + 1 | 0;
   if ((i13 | 0) == (i36 | 0)) break; else {
    i14 = i1 ? i14 + 1 | 0 : i14;
    i15 = i1 ? 128 : i15 >>> 1 & 127;
   }
  }
 }
 do if (i41) {
  i1 = HEAP32[i42 >> 2] | 0;
  if (i1 | 0) if ((HEAP32[i45 + 36 >> 2] | 0) <= 0) if ((HEAP32[i45 + 28 + ((i1 + -1 | 0) * 20 | 0) + 8 >> 2] | 0) >= 0) break;
  i37 = i40 + 4 | 0;
  HEAP32[i37 >> 2] = 0;
  HEAP32[i37 + 4 >> 2] = 0;
  HEAP32[i37 + 8 >> 2] = 0;
  HEAP32[i40 >> 2] = 49;
  HEAP32[i40 + 16 >> 2] = HEAP32[i45 + 16 >> 2];
  HEAP32[i38 >> 2] = 0;
  HEAP32[i38 + 4 >> 2] = 0;
  HEAP32[i38 + 8 >> 2] = 0;
  HEAP32[i38 + 12 >> 2] = 0;
  HEAP32[i38 + 16 >> 2] = 0;
  _cf2_hintmap_insertHint(i45, i40, i38);
 } else if (!i16) {
  i15 = i45 + 16 | 0;
  i16 = i43 + 28 | 0;
  i17 = i43 + 8 | 0;
  i18 = i40 + 8 | 0;
  i19 = i40 + 16 | 0;
  i20 = i40 + 4 | 0;
  i21 = i40 + 12 | 0;
  i22 = i38 + 8 | 0;
  i10 = i35 + 188 | 0;
  i11 = i38 + 16 | 0;
  i12 = i38 + 4 | 0;
  i13 = i38 + 12 | 0;
  i14 = i43 + 4 | 0;
  i8 = 0;
  i9 = 128;
  i7 = i34;
  while (1) {
   if (HEAPU8[i7 >> 0] & i9 | 0) {
    i6 = HEAP32[i15 >> 2] | 0;
    HEAP32[i40 >> 2] = 0;
    HEAP32[i40 + 4 >> 2] = 0;
    HEAP32[i40 + 8 >> 2] = 0;
    HEAP32[i40 + 12 >> 2] = 0;
    HEAP32[i40 + 16 >> 2] = 0;
    if ((HEAP32[i44 >> 2] | 0) >>> 0 > i8 >>> 0) i1 = i8; else {
     i1 = HEAP32[i14 >> 2] | 0;
     if (!i1) i1 = 0; else if (!(HEAP32[i1 >> 2] | 0)) {
      HEAP32[i1 >> 2] = 130;
      i1 = 0;
     } else i1 = 0;
    }
    i5 = (HEAP32[i16 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i1) | 0) | 0;
    i1 = HEAP32[i5 + 8 >> 2] | 0;
    i2 = HEAP32[i5 + 4 >> 2] | 0;
    i3 = i1 - i2 | 0;
    L136 : do if ((i3 | 0) < -1310720) switch (i3 | 0) {
    case -1376256:
     {
      i4 = 1;
      i39 = 89;
      break;
     }
    default:
     i39 = 87;
    } else {
     switch (i3 | 0) {
     case -1310720:
      break;
     default:
      {
       i39 = 87;
       break L136;
      }
     }
     HEAP32[i40 >> 2] = 0;
     HEAP32[i18 >> 2] = i37;
     HEAP32[i19 >> 2] = i6;
     HEAP32[i20 >> 2] = i8;
     i1 = i37;
     i39 = 91;
    } while (0);
    if ((i39 | 0) == 87) {
     i4 = 4;
     i1 = (i3 | 0) < 0 ? i1 : i2;
     i39 = 89;
    }
    if ((i39 | 0) == 89) {
     i39 = 0;
     HEAP32[i18 >> 2] = i1;
     HEAP32[i40 >> 2] = i4;
     i1 = i1 + i37 | 0;
     HEAP32[i18 >> 2] = i1;
     HEAP32[i19 >> 2] = i6;
     HEAP32[i20 >> 2] = i8;
     if (!(HEAP8[i5 >> 0] | 0)) i39 = 91; else {
      HEAP32[i21 >> 2] = HEAP32[i5 + 12 >> 2];
      HEAP32[i40 >> 2] = i4 | 16;
     }
    }
    if ((i39 | 0) == 91) {
     i39 = _FT_MulFix(i1, i6) | 0;
     HEAP32[i21 >> 2] = i39;
    }
    i6 = HEAP32[i15 >> 2] | 0;
    HEAP32[i38 >> 2] = 0;
    HEAP32[i38 + 4 >> 2] = 0;
    HEAP32[i38 + 8 >> 2] = 0;
    HEAP32[i38 + 12 >> 2] = 0;
    HEAP32[i38 + 16 >> 2] = 0;
    if ((HEAP32[i44 >> 2] | 0) >>> 0 > i8 >>> 0) i1 = i8; else {
     i1 = HEAP32[i14 >> 2] | 0;
     if (!i1) i1 = 0; else if (!(HEAP32[i1 >> 2] | 0)) {
      HEAP32[i1 >> 2] = 130;
      i1 = 0;
     } else i1 = 0;
    }
    i5 = (HEAP32[i16 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i1) | 0) | 0;
    i2 = HEAP32[i5 + 8 >> 2] | 0;
    i1 = HEAP32[i5 + 4 >> 2] | 0;
    i3 = i2 - i1 | 0;
    L153 : do if ((i3 | 0) < -1310720) {
     switch (i3 | 0) {
     case -1376256:
      break;
     default:
      {
       i39 = 98;
       break L153;
      }
     }
     HEAP32[i38 >> 2] = 0;
     HEAP32[i22 >> 2] = i37;
     HEAP32[i11 >> 2] = i6;
     HEAP32[i12 >> 2] = i8;
     i1 = i37;
     i39 = 101;
    } else switch (i3 | 0) {
    case -1310720:
     {
      i4 = 2;
      i39 = 99;
      break;
     }
    default:
     i39 = 98;
    } while (0);
    if ((i39 | 0) == 98) {
     i4 = 8;
     i1 = (i3 | 0) < 0 ? i1 : i2;
     i39 = 99;
    }
    if ((i39 | 0) == 99) {
     i39 = 0;
     HEAP32[i22 >> 2] = i1;
     HEAP32[i38 >> 2] = i4;
     i1 = i1 + (HEAP32[i10 >> 2] << 1) + i37 | 0;
     HEAP32[i22 >> 2] = i1;
     HEAP32[i11 >> 2] = i6;
     HEAP32[i12 >> 2] = i8;
     if (!(HEAP8[i5 >> 0] | 0)) i39 = 101; else {
      HEAP32[i13 >> 2] = HEAP32[i5 + 16 >> 2];
      HEAP32[i38 >> 2] = i4 | 16;
     }
    }
    if ((i39 | 0) == 101) {
     i39 = 0;
     i35 = _FT_MulFix(i1, i6) | 0;
     HEAP32[i13 >> 2] = i35;
    }
    _cf2_hintmap_insertHint(i45, i40, i38);
   }
   i1 = (i8 & 7 | 0) == 7;
   i8 = i8 + 1 | 0;
   if ((i8 | 0) == (i36 | 0)) break; else {
    i9 = i1 ? 128 : i9 >>> 1 & 127;
    i7 = i1 ? i7 + 1 | 0 : i7;
   }
  }
 } while (0);
 i14 = i45 + 8 | 0;
 HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] = 0;
 i2 = HEAP32[i42 >> 2] | 0;
 L167 : do if (i2 | 0) {
  i13 = i40 + 4 | 0;
  i1 = 0;
  do {
   i38 = HEAP32[i45 + 28 + (i1 * 20 | 0) >> 2] | 0;
   i10 = (i38 & 12 | 0) != 0;
   i11 = i1 + 1 | 0;
   i12 = i10 ? i11 : i1;
   if (!(i38 & 16)) {
    i8 = i45 + 28 + (i1 * 20 | 0) + 12 | 0;
    i7 = HEAP32[i8 >> 2] | 0;
    i38 = i7 & 65535;
    i9 = i45 + 28 + (i12 * 20 | 0) + 12 | 0;
    i4 = HEAP32[i9 >> 2] | 0;
    i6 = i4 & 65535;
    i5 = 0 - i38 | 0;
    i3 = 0 - i6 | 0;
    i38 = (i38 | 0) == 0 ? 0 : 65536 - i38 | 0;
    i6 = (i6 | 0) == 0 ? 0 : 65536 - i6 | 0;
    i6 = i38 >>> 0 < i6 >>> 0 ? i38 : i6;
    i3 = (i5 | 0) > (i3 | 0) ? i5 : i3;
    i5 = (i1 | 0) == 0;
    do if (i12 >>> 0 < (i2 + -1 | 0) >>> 0) {
     i2 = i12 + 1 | 0;
     if ((HEAP32[i45 + 28 + (i2 * 20 | 0) + 12 >> 2] | 0) < (i4 + 32768 + i6 | 0)) {
      if (i5) i39 = 114; else if ((HEAP32[i45 + 28 + ((i1 + -1 | 0) * 20 | 0) + 12 >> 2] | 0) > (i7 + -32768 + i3 | 0)) i3 = 0; else i39 = 114;
      if ((i39 | 0) == 114) {
       i39 = 0;
       if ((i6 | 0) >= (0 - i3 | 0)) {
        i2 = i7;
        break;
       }
      }
      if (!(HEAP32[i45 + 28 + (i2 * 20 | 0) >> 2] & 16)) {
       HEAP32[i40 >> 2] = i12;
       HEAP32[i13 >> 2] = i6 - i3;
       _cf2_arrstack_push(HEAP32[i14 >> 2] | 0, i40);
       i2 = HEAP32[i8 >> 2] | 0;
      } else i2 = i7;
     } else i39 = 109;
    } else i39 = 109; while (0);
    do if ((i39 | 0) == 109) {
     i39 = 0;
     if (!i5) if ((HEAP32[i45 + 28 + ((i1 + -1 | 0) * 20 | 0) + 12 >> 2] | 0) > (i7 + -32768 + i3 | 0)) {
      i3 = i6;
      i2 = i7;
      break;
     }
     i3 = (i6 | 0) > (0 - i3 | 0) ? i3 : i6;
     i2 = i7;
    } while (0);
    HEAP32[i8 >> 2] = i3 + i2;
    if (i10) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i3;
   }
   if (i1 | 0) {
    i2 = HEAP32[i45 + 28 + (i1 * 20 | 0) + 8 >> 2] | 0;
    i3 = i1 + -1 | 0;
    i4 = HEAP32[i45 + 28 + (i3 * 20 | 0) + 8 >> 2] | 0;
    if ((i2 | 0) != (i4 | 0)) {
     i38 = _FT_DivFix((HEAP32[i45 + 28 + (i1 * 20 | 0) + 12 >> 2] | 0) - (HEAP32[i45 + 28 + (i3 * 20 | 0) + 12 >> 2] | 0) | 0, i2 - i4 | 0) | 0;
     HEAP32[i45 + 28 + (i3 * 20 | 0) + 16 >> 2] = i38;
    }
   }
   if (i10) {
    i1 = HEAP32[i45 + 28 + (i12 * 20 | 0) + 8 >> 2] | 0;
    i2 = i12 + -1 | 0;
    i3 = HEAP32[i45 + 28 + (i2 * 20 | 0) + 8 >> 2] | 0;
    if ((i1 | 0) == (i3 | 0)) i1 = i11; else {
     i1 = _FT_DivFix((HEAP32[i45 + 28 + (i12 * 20 | 0) + 12 >> 2] | 0) - (HEAP32[i45 + 28 + (i2 * 20 | 0) + 12 >> 2] | 0) | 0, i1 - i3 | 0) | 0;
     HEAP32[i45 + 28 + (i2 * 20 | 0) + 16 >> 2] = i1;
     i1 = i11;
    }
   }
   i1 = i1 + 1 | 0;
   i2 = HEAP32[i42 >> 2] | 0;
  } while (i1 >>> 0 < i2 >>> 0);
  i2 = HEAP32[i14 >> 2] | 0;
  i1 = HEAP32[i2 + 20 >> 2] | 0;
  if (i1 | 0) {
   i3 = i1;
   while (1) {
    i3 = i3 + -1 | 0;
    if (i1 >>> 0 > i3 >>> 0) i1 = i3; else {
     i1 = HEAP32[i2 + 4 >> 2] | 0;
     if (!i1) i1 = 0; else if (!(HEAP32[i1 >> 2] | 0)) {
      HEAP32[i1 >> 2] = 130;
      i1 = 0;
     } else i1 = 0;
    }
    i5 = (HEAP32[i2 + 28 >> 2] | 0) + (Math_imul(HEAP32[i2 + 8 >> 2] | 0, i1) | 0) | 0;
    i4 = HEAP32[i5 >> 2] | 0;
    i1 = i45 + 28 + (i4 * 20 | 0) + 12 | 0;
    i5 = HEAP32[i5 + 4 >> 2] | 0;
    i2 = i5 + (HEAP32[i1 >> 2] | 0) | 0;
    if ((HEAP32[i45 + 28 + ((i4 + 1 | 0) * 20 | 0) + 12 >> 2] | 0) >= (i2 + 32768 | 0)) {
     HEAP32[i1 >> 2] = i2;
     i1 = i45 + 28 + ((i4 + -1 | 0) * 20 | 0) + 12 | 0;
     if (HEAP32[i45 + 28 + (i4 * 20 | 0) >> 2] & 12 | 0) HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i5;
    }
    if (!i3) break L167;
    i2 = HEAP32[i14 >> 2] | 0;
    i1 = HEAP32[i2 + 20 >> 2] | 0;
   }
  }
 } while (0);
 if (!i41) {
  i1 = HEAP32[i42 >> 2] | 0;
  if (i1 | 0) {
   i7 = i43 + 28 | 0;
   i8 = i43 + 8 | 0;
   i6 = i43 + 4 | 0;
   i5 = 0;
   do {
    i3 = i45 + 28 + (i5 * 20 | 0) | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!(i4 & 32)) {
     i1 = HEAP32[i45 + 28 + (i5 * 20 | 0) + 4 >> 2] | 0;
     if ((HEAP32[i44 >> 2] | 0) >>> 0 > i1 >>> 0) {
      i2 = i1;
      i1 = i4;
     } else {
      i1 = HEAP32[i6 >> 2] | 0;
      if (!i1) {
       i2 = 0;
       i1 = i4;
      } else if (!(HEAP32[i1 >> 2] | 0)) {
       HEAP32[i1 >> 2] = 130;
       i2 = 0;
       i1 = HEAP32[i3 >> 2] | 0;
      } else {
       i2 = 0;
       i1 = i4;
      }
     }
     i43 = (HEAP32[i7 >> 2] | 0) + (Math_imul(HEAP32[i8 >> 2] | 0, i2) | 0) | 0;
     HEAP32[(i1 & 10 | 0 ? i43 + 16 | 0 : i43 + 12 | 0) >> 2] = HEAP32[i45 + 28 + (i5 * 20 | 0) + 12 >> 2];
     HEAP8[i43 >> 0] = 1;
     i1 = HEAP32[i42 >> 2] | 0;
    }
    i5 = i5 + 1 | 0;
   } while (i5 >>> 0 < i1 >>> 0);
  }
 }
 HEAP8[i45 + 12 >> 0] = 1;
 HEAP8[i46 + 5 >> 0] = 0;
 STACKTOP = i47;
 return;
}

function _normal_prologTok(i8, i4, i10, i11) {
 i8 = i8 | 0;
 i4 = i4 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 L1 : do if ((i4 | 0) == (i10 | 0)) i1 = -4; else {
  i9 = i8 + 76 | 0;
  do switch (HEAP8[i9 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0) {
  case 12:
   {
    i1 = i4 + 1 | 0;
    if ((i1 | 0) == (i10 | 0)) {
     i1 = -1;
     break L1;
    }
    i3 = i10;
    i4 = i8 + 356 | 0;
    i5 = i8 + 360 | 0;
    i6 = i8 + 364 | 0;
    L7 : while (1) {
     i2 = HEAP8[i9 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0;
     switch (i2 << 24 >> 24) {
     case 8:
     case 1:
     case 0:
      {
       i5 = 20;
       break L7;
      }
     case 5:
      {
       if ((i3 - i1 | 0) < 2) {
        i1 = -2;
        break L1;
       }
       if (FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i8, i1) | 0) {
        i5 = 9;
        break L7;
       }
       i1 = i1 + 2 | 0;
       break;
      }
     case 6:
      {
       if ((i3 - i1 | 0) < 3) {
        i1 = -2;
        break L1;
       }
       if (FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i8, i1) | 0) {
        i5 = 14;
        break L7;
       }
       i1 = i1 + 3 | 0;
       break;
      }
     case 7:
      {
       if ((i3 - i1 | 0) < 4) {
        i1 = -2;
        break L1;
       }
       if (FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i8, i1) | 0) {
        i5 = 18;
        break L7;
       }
       i1 = i1 + 4 | 0;
       break;
      }
     case 13:
     case 12:
      {
       i1 = i1 + 1 | 0;
       if (i2 << 24 >> 24 == 12) {
        i5 = 22;
        break L7;
       }
       break;
      }
     default:
      i1 = i1 + 1 | 0;
     }
     if ((i1 | 0) == (i10 | 0)) {
      i1 = -1;
      break L1;
     }
    }
    if ((i5 | 0) == 9) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 14) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 18) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 20) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 22) {
     if ((i1 | 0) == (i10 | 0)) {
      i1 = -27;
      break L1;
     }
     HEAP32[i11 >> 2] = i1;
     switch (HEAP8[i9 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
     case 20:
     case 30:
     case 11:
     case 10:
     case 9:
     case 21:
      {
       i1 = 27;
       break L1;
      }
     default:
      {}
     }
     i1 = 0;
     break L1;
    }
    break;
   }
  case 13:
   {
    i1 = i4 + 1 | 0;
    if ((i1 | 0) == (i10 | 0)) {
     i1 = -1;
     break L1;
    }
    i3 = i10;
    i4 = i8 + 356 | 0;
    i5 = i8 + 360 | 0;
    i6 = i8 + 364 | 0;
    L32 : while (1) {
     i2 = HEAP8[i9 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0;
     switch (i2 << 24 >> 24) {
     case 8:
     case 1:
     case 0:
      {
       i5 = 42;
       break L32;
      }
     case 5:
      {
       if ((i3 - i1 | 0) < 2) {
        i1 = -2;
        break L1;
       }
       if (FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i8, i1) | 0) {
        i5 = 31;
        break L32;
       }
       i1 = i1 + 2 | 0;
       break;
      }
     case 6:
      {
       if ((i3 - i1 | 0) < 3) {
        i1 = -2;
        break L1;
       }
       if (FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i8, i1) | 0) {
        i5 = 36;
        break L32;
       }
       i1 = i1 + 3 | 0;
       break;
      }
     case 7:
      {
       if ((i3 - i1 | 0) < 4) {
        i1 = -2;
        break L1;
       }
       if (FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i8, i1) | 0) {
        i5 = 40;
        break L32;
       }
       i1 = i1 + 4 | 0;
       break;
      }
     case 13:
     case 12:
      {
       i1 = i1 + 1 | 0;
       if (i2 << 24 >> 24 == 13) {
        i5 = 44;
        break L32;
       }
       break;
      }
     default:
      i1 = i1 + 1 | 0;
     }
     if ((i1 | 0) == (i10 | 0)) {
      i1 = -1;
      break L1;
     }
    }
    if ((i5 | 0) == 31) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 36) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 40) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 42) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 44) {
     if ((i1 | 0) == (i10 | 0)) {
      i1 = -27;
      break L1;
     }
     HEAP32[i11 >> 2] = i1;
     switch (HEAP8[i9 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
     case 20:
     case 30:
     case 11:
     case 10:
     case 9:
     case 21:
      {
       i1 = 27;
       break L1;
      }
     default:
      {}
     }
     i1 = 0;
     break L1;
    }
    break;
   }
  case 2:
   {
    i1 = i4 + 1 | 0;
    if ((i1 | 0) == (i10 | 0)) {
     i1 = -1;
     break L1;
    }
    switch (HEAP8[i9 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
    case 16:
     {
      i3 = i4 + 2 | 0;
      if ((i3 | 0) == (i10 | 0)) {
       i1 = -1;
       break L1;
      }
      switch (HEAP8[i9 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0) {
      case 27:
       {
        i1 = _normal_scanComment(i8, i4 + 3 | 0, i10, i11) | 0;
        break L1;
       }
      case 20:
       {
        HEAP32[i11 >> 2] = i4 + 3;
        i1 = 33;
        break L1;
       }
      case 24:
      case 22:
       {
        i1 = i4 + 3 | 0;
        if ((i1 | 0) == (i10 | 0)) {
         i1 = -1;
         break L1;
        } else {
         i2 = i1;
         i1 = i3;
        }
        L66 : while (1) {
         switch (HEAP8[i9 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
         case 30:
          {
           i5 = 58;
           break L66;
          }
         case 10:
         case 9:
         case 21:
          break L66;
         case 24:
         case 22:
          break;
         default:
          {
           i5 = 62;
           break L66;
          }
         }
         i1 = i2 + 1 | 0;
         if ((i1 | 0) == (i10 | 0)) {
          i1 = -1;
          break L1;
         } else {
          i8 = i2;
          i2 = i1;
          i1 = i8;
         }
        }
        if ((i5 | 0) == 62) {
         HEAP32[i11 >> 2] = i2;
         i1 = 0;
         break L1;
        }
        L71 : do if ((i5 | 0) == 58) {
         i1 = i1 + 2 | 0;
         if ((i1 | 0) == (i10 | 0)) {
          i1 = -1;
          break L1;
         }
         switch (HEAP8[i9 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
         case 30:
         case 10:
         case 9:
         case 21:
          break;
         default:
          break L71;
         }
         HEAP32[i11 >> 2] = i2;
         i1 = 0;
         break L1;
        } while (0);
        HEAP32[i11 >> 2] = i2;
        i1 = 16;
        break L1;
       }
      default:
       {
        HEAP32[i11 >> 2] = i3;
        i1 = 0;
        break L1;
       }
      }
     }
    case 15:
     {
      i1 = _normal_scanPi(i8, i4 + 2 | 0, i10, i11) | 0;
      break L1;
     }
    case 7:
    case 6:
    case 5:
    case 29:
    case 24:
    case 22:
     {
      HEAP32[i11 >> 2] = i4;
      i1 = 29;
      break L1;
     }
    default:
     {
      HEAP32[i11 >> 2] = i1;
      i1 = 0;
      break L1;
     }
    }
   }
  case 9:
   {
    if ((i4 + 1 | 0) == (i10 | 0)) {
     HEAP32[i11 >> 2] = i10;
     i1 = -15;
     break L1;
    } else i5 = 3;
    break;
   }
  case 10:
  case 21:
   {
    i5 = 3;
    break;
   }
  case 30:
   {
    i1 = _normal_scanPercent(i8, i4 + 1 | 0, i10, i11) | 0;
    break L1;
   }
  case 35:
   {
    HEAP32[i11 >> 2] = i4 + 1;
    i1 = 38;
    break L1;
   }
  case 20:
   {
    HEAP32[i11 >> 2] = i4 + 1;
    i1 = 25;
    break L1;
   }
  case 4:
   {
    i1 = i4 + 1 | 0;
    if ((i1 | 0) == (i10 | 0)) {
     i1 = -26;
     break L1;
    }
    if ((HEAP8[i1 >> 0] | 0) == 93) {
     i2 = i4 + 2 | 0;
     if ((i2 | 0) == (i10 | 0)) {
      i1 = -1;
      break L1;
     }
     if ((HEAP8[i2 >> 0] | 0) == 62) {
      HEAP32[i11 >> 2] = i4 + 3;
      i1 = 34;
      break L1;
     }
    }
    HEAP32[i11 >> 2] = i1;
    i1 = 26;
    break L1;
   }
  case 31:
   {
    HEAP32[i11 >> 2] = i4 + 1;
    i1 = 23;
    break L1;
   }
  case 32:
   {
    i1 = i4 + 1 | 0;
    if ((i1 | 0) == (i10 | 0)) {
     i1 = -24;
     break L1;
    }
    switch (HEAP8[i9 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
    case 33:
     {
      HEAP32[i11 >> 2] = i4 + 2;
      i1 = 36;
      break L1;
     }
    case 15:
     {
      HEAP32[i11 >> 2] = i4 + 2;
      i1 = 35;
      break L1;
     }
    case 34:
     {
      HEAP32[i11 >> 2] = i4 + 2;
      i1 = 37;
      break L1;
     }
    case 32:
    case 36:
    case 35:
    case 11:
    case 21:
    case 10:
    case 9:
     {
      HEAP32[i11 >> 2] = i1;
      i1 = 24;
      break L1;
     }
    default:
     {
      HEAP32[i11 >> 2] = i1;
      i1 = 0;
      break L1;
     }
    }
   }
  case 36:
   {
    HEAP32[i11 >> 2] = i4 + 1;
    i1 = 21;
    break L1;
   }
  case 11:
   {
    HEAP32[i11 >> 2] = i4 + 1;
    i1 = 17;
    break L1;
   }
  case 19:
   {
    i2 = i4 + 1 | 0;
    if ((i2 | 0) == (i10 | 0)) {
     i1 = -1;
     break L1;
    }
    switch (HEAP8[i9 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
    case 29:
     {
      HEAP32[i11 >> 2] = i2;
      i1 = 0;
      break L1;
     }
    case 24:
    case 22:
     {
      i1 = 1;
      break;
     }
    case 5:
     {
      if ((i10 - i2 | 0) < 2) {
       i1 = -2;
       break L1;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 344 >> 2] & 255](i8, i2) | 0)) {
       HEAP32[i11 >> 2] = i2;
       i1 = 0;
       break L1;
      } else i1 = 2;
      break;
     }
    case 6:
     {
      if ((i10 - i2 | 0) < 3) {
       i1 = -2;
       break L1;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 348 >> 2] & 255](i8, i2) | 0)) {
       HEAP32[i11 >> 2] = i2;
       i1 = 0;
       break L1;
      } else i1 = 3;
      break;
     }
    case 7:
     {
      if ((i10 - i2 | 0) < 4) {
       i1 = -2;
       break L1;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 352 >> 2] & 255](i8, i2) | 0)) {
       HEAP32[i11 >> 2] = i2;
       i1 = 0;
       break L1;
      } else i1 = 4;
      break;
     }
    default:
     {
      HEAP32[i11 >> 2] = i2;
      i1 = 0;
      break L1;
     }
    }
    i1 = i2 + i1 | 0;
    if ((i1 | 0) == (i10 | 0)) {
     i1 = -20;
     break L1;
    }
    i3 = i10;
    i4 = i8 + 332 | 0;
    i5 = i8 + 336 | 0;
    i6 = i8 + 340 | 0;
    L117 : while (1) {
     switch (HEAP8[i9 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
     case 29:
      {
       i5 = 108;
       break L117;
      }
     case 36:
     case 30:
     case 11:
     case 32:
     case 21:
     case 10:
     case 9:
      {
       i5 = 119;
       break L117;
      }
     case 27:
     case 26:
     case 25:
     case 24:
     case 22:
      {
       i2 = 1;
       break;
      }
     case 5:
      {
       if ((i3 - i1 | 0) < 2) {
        i1 = -2;
        break L1;
       }
       if (!(FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i8, i1) | 0)) {
        i5 = 111;
        break L117;
       } else i2 = 2;
       break;
      }
     case 6:
      {
       if ((i3 - i1 | 0) < 3) {
        i1 = -2;
        break L1;
       }
       if (!(FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i8, i1) | 0)) {
        i5 = 114;
        break L117;
       } else i2 = 3;
       break;
      }
     case 7:
      {
       if ((i3 - i1 | 0) < 4) {
        i1 = -2;
        break L1;
       }
       if (!(FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i8, i1) | 0)) {
        i5 = 117;
        break L117;
       } else i2 = 4;
       break;
      }
     default:
      {
       i5 = 120;
       break L117;
      }
     }
     i1 = i1 + i2 | 0;
     if ((i1 | 0) == (i10 | 0)) {
      i1 = -20;
      break L1;
     }
    }
    if ((i5 | 0) == 108) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 111) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 114) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 117) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    } else if ((i5 | 0) == 119) {
     HEAP32[i11 >> 2] = i1;
     i1 = 20;
     break L1;
    } else if ((i5 | 0) == 120) {
     HEAP32[i11 >> 2] = i1;
     i1 = 0;
     break L1;
    }
    break;
   }
  case 5:
   {
    if ((i10 - i4 | 0) < 2) {
     i1 = -2;
     break L1;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 344 >> 2] & 255](i8, i4) | 0)) if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 332 >> 2] & 255](i8, i4) | 0)) {
     HEAP32[i11 >> 2] = i4;
     i1 = 0;
     break L1;
    } else {
     i1 = 19;
     i2 = 2;
    } else {
     i1 = 18;
     i2 = 2;
    }
    break;
   }
  case 6:
   {
    if ((i10 - i4 | 0) < 3) {
     i1 = -2;
     break L1;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 348 >> 2] & 255](i8, i4) | 0)) if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 336 >> 2] & 255](i8, i4) | 0)) {
     HEAP32[i11 >> 2] = i4;
     i1 = 0;
     break L1;
    } else {
     i1 = 19;
     i2 = 3;
    } else {
     i1 = 18;
     i2 = 3;
    }
    break;
   }
  case 7:
   {
    if ((i10 - i4 | 0) < 4) {
     i1 = -2;
     break L1;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 352 >> 2] & 255](i8, i4) | 0)) if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 340 >> 2] & 255](i8, i4) | 0)) {
     HEAP32[i11 >> 2] = i4;
     i1 = 0;
     break L1;
    } else {
     i1 = 19;
     i2 = 4;
    } else {
     i1 = 18;
     i2 = 4;
    }
    break;
   }
  case 24:
  case 22:
   {
    i1 = 18;
    i2 = 1;
    break;
   }
  case 23:
  case 27:
  case 26:
  case 25:
   {
    i1 = 19;
    i2 = 1;
    break;
   }
  default:
   {
    HEAP32[i11 >> 2] = i4;
    i1 = 0;
    break L1;
   }
  } while (0);
  if ((i5 | 0) == 3) {
   i2 = i4 + 1 | 0;
   L149 : do if ((i2 | 0) != (i10 | 0)) {
    i1 = i4;
    L150 : while (1) {
     switch (HEAP8[i9 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
     case 10:
     case 21:
      break;
     case 9:
      {
       if ((i1 + 2 | 0) == (i10 | 0)) break L150;
       break;
      }
     default:
      break L150;
     }
     i1 = i2 + 1 | 0;
     if ((i1 | 0) == (i10 | 0)) break L149; else {
      i8 = i2;
      i2 = i1;
      i1 = i8;
     }
    }
    HEAP32[i11 >> 2] = i2;
    i1 = 15;
    break L1;
   } while (0);
   HEAP32[i11 >> 2] = i10;
   i1 = 15;
   break;
  }
  i2 = i4 + i2 | 0;
  L158 : do if ((i2 | 0) != (i10 | 0)) {
   i4 = i10;
   i5 = i8 + 332 | 0;
   i6 = i8 + 336 | 0;
   i7 = i8 + 340 | 0;
   L160 : while (1) {
    L162 : do switch (HEAP8[i9 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
    case 29:
     {
      i5 = 138;
      break L160;
     }
    case 10:
    case 9:
    case 21:
    case 30:
    case 20:
    case 36:
    case 35:
    case 32:
    case 11:
     {
      i5 = 152;
      break L160;
     }
    case 34:
     {
      i5 = 172;
      break L160;
     }
    case 33:
     {
      i5 = 175;
      break L160;
     }
    case 15:
     {
      i5 = 178;
      break L160;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 22:
     {
      i2 = i2 + 1 | 0;
      break;
     }
    case 5:
     {
      if ((i4 - i2 | 0) < 2) {
       i1 = -2;
       break L1;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i8, i2) | 0)) {
       i5 = 142;
       break L160;
      }
      i2 = i2 + 2 | 0;
      break;
     }
    case 6:
     {
      if ((i4 - i2 | 0) < 3) {
       i1 = -2;
       break L1;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i8, i2) | 0)) {
       i5 = 146;
       break L160;
      }
      i2 = i2 + 3 | 0;
      break;
     }
    case 7:
     {
      if ((i4 - i2 | 0) < 4) {
       i1 = -2;
       break L1;
      }
      if (!(FUNCTION_TABLE_iii[HEAP32[i7 >> 2] & 255](i8, i2) | 0)) {
       i5 = 150;
       break L160;
      }
      i2 = i2 + 4 | 0;
      break;
     }
    case 23:
     {
      i3 = i2 + 1 | 0;
      switch (i1 & 63) {
      case 18:
       break;
      case 41:
       {
        i1 = 19;
        i2 = i3;
        break L162;
       }
      default:
       {
        i2 = i3;
        break L162;
       }
      }
      if ((i3 | 0) == (i10 | 0)) {
       i1 = -1;
       break L1;
      }
      switch (HEAP8[i9 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0) {
      case 29:
       {
        i5 = 156;
        break L160;
       }
      case 27:
      case 26:
      case 25:
      case 24:
      case 22:
       {
        i1 = 41;
        i2 = i2 + 2 | 0;
        break L162;
       }
      case 5:
       {
        if ((i4 - i3 | 0) < 2) {
         i1 = -2;
         break L1;
        }
        if (!(FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i8, i3) | 0)) {
         i5 = 160;
         break L160;
        }
        i1 = 41;
        i2 = i2 + 3 | 0;
        break L162;
       }
      case 6:
       {
        if ((i4 - i3 | 0) < 3) {
         i1 = -2;
         break L1;
        }
        if (!(FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i8, i3) | 0)) {
         i5 = 164;
         break L160;
        }
        i1 = 41;
        i2 = i2 + 4 | 0;
        break L162;
       }
      case 7:
       {
        if ((i4 - i3 | 0) < 4) {
         i1 = -2;
         break L1;
        }
        if (!(FUNCTION_TABLE_iii[HEAP32[i7 >> 2] & 255](i8, i3) | 0)) {
         i5 = 168;
         break L160;
        }
        i1 = 41;
        i2 = i2 + 5 | 0;
        break L162;
       }
      default:
       {
        i1 = 19;
        i2 = i3;
        break L162;
       }
      }
     }
    default:
     {
      i5 = 181;
      break L160;
     }
    } while (0);
    if ((i2 | 0) == (i10 | 0)) break L158;
   }
   switch (i5 | 0) {
   case 138:
    {
     HEAP32[i11 >> 2] = i2;
     i1 = 0;
     break L1;
    }
   case 142:
    {
     HEAP32[i11 >> 2] = i2;
     i1 = 0;
     break L1;
    }
   case 146:
    {
     HEAP32[i11 >> 2] = i2;
     i1 = 0;
     break L1;
    }
   case 150:
    {
     HEAP32[i11 >> 2] = i2;
     i1 = 0;
     break L1;
    }
   case 152:
    {
     HEAP32[i11 >> 2] = i2;
     break L1;
    }
   case 156:
    {
     HEAP32[i11 >> 2] = i3;
     i1 = 0;
     break L1;
    }
   case 160:
    {
     HEAP32[i11 >> 2] = i3;
     i1 = 0;
     break L1;
    }
   case 164:
    {
     HEAP32[i11 >> 2] = i3;
     i1 = 0;
     break L1;
    }
   case 168:
    {
     HEAP32[i11 >> 2] = i3;
     i1 = 0;
     break L1;
    }
   case 172:
    if ((i1 | 0) == 19) {
     HEAP32[i11 >> 2] = i2;
     i1 = 0;
     break L1;
    } else {
     HEAP32[i11 >> 2] = i2 + 1;
     i1 = 32;
     break L1;
    }
   case 175:
    if ((i1 | 0) == 19) {
     HEAP32[i11 >> 2] = i2;
     i1 = 0;
     break L1;
    } else {
     HEAP32[i11 >> 2] = i2 + 1;
     i1 = 31;
     break L1;
    }
   case 178:
    if ((i1 | 0) == 19) {
     HEAP32[i11 >> 2] = i2;
     i1 = 0;
     break L1;
    } else {
     HEAP32[i11 >> 2] = i2 + 1;
     i1 = 30;
     break L1;
    }
   case 181:
    {
     HEAP32[i11 >> 2] = i2;
     i1 = 0;
     break L1;
    }
   }
  } while (0);
  i1 = 0 - i1 | 0;
 } while (0);
 return i1 | 0;
}

function _process_text(i33, i1) {
 i33 = i33 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, d64 = 0.0, i65 = 0;
 i63 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i59 = i63 + 48 | 0;
 i58 = i63 + 40 | 0;
 i57 = i63 + 32 | 0;
 i61 = i63 + 24 | 0;
 i60 = i63 + 16 | 0;
 i56 = i63 + 8 | 0;
 i55 = i63;
 i44 = i63 + 56 | 0;
 i48 = i63 + 52 | 0;
 i49 = i33 + 88 | 0;
 i50 = i33 + 32 | 0;
 i51 = i33 + 36 | 0;
 i52 = i33 + 40 | 0;
 i53 = i33 + 48 | 0;
 i54 = i33 + 56 | 0;
 i34 = i33 + 60 | 0;
 i35 = i33 + 64 | 0;
 i36 = i33 + 72 | 0;
 i37 = i33 + 68 | 0;
 i38 = i33 + 24 | 0;
 i39 = i33 + 84 | 0;
 i40 = i33 + 4 | 0;
 i41 = i33 + 16 | 0;
 i42 = i33 + 76 | 0;
 i43 = i33 + 28 | 0;
 i45 = i33 + 8 | 0;
 i46 = i33 + 12 | 0;
 i47 = i33 + 20 | 0;
 L1 : while (1) {
  i7 = i1;
  L3 : while (1) {
   i2 = HEAP8[i7 >> 0] | 0;
   switch (i2 << 24 >> 24) {
   case 0:
    {
     i62 = 161;
     break L1;
    }
   case 10:
   case 13:
    {
     i1 = 1;
     break;
    }
   case -17:
    {
     if ((HEAP8[i7 + 1 >> 0] | 0) != -69) {
      i1 = i7;
      i2 = -17;
      break L3;
     }
     if ((HEAP8[i7 + 2 >> 0] | 0) == -65) i1 = 3; else {
      i1 = i7;
      i2 = -17;
      break L3;
     }
     break;
    }
   default:
    {
     i1 = i7;
     break L3;
    }
   }
   i7 = i7 + i1 | 0;
  }
  L9 : while (1) {
   switch (i2 << 24 >> 24) {
   case 10:
   case 13:
    {
     i2 = 1;
     break L9;
    }
   default:
    {}
   }
   i1 = i1 + 1 | 0;
   i2 = HEAP8[i1 >> 0] | 0;
   if (!(i2 << 24 >> 24)) {
    i2 = 0;
    break;
   }
  }
  if ((i1 | 0) == (i7 | 0)) {
   i62 = 161;
   break;
  }
  if (i2) {
   HEAP8[i1 >> 0] = 0;
   i1 = i1 + 1 | 0;
  }
  L17 : do if (!(_ass_strncasecmp(i7, 355982, 13) | 0)) HEAP32[HEAP32[i49 >> 2] >> 2] = 1; else {
   if (!(_ass_strncasecmp(i7, 355996, 11) | 0)) {
    HEAP32[HEAP32[i49 >> 2] >> 2] = 2;
    HEAP32[i50 >> 2] = 2;
    break;
   }
   if (!(_ass_strncasecmp(i7, 356008, 12) | 0)) {
    HEAP32[HEAP32[i49 >> 2] >> 2] = 2;
    HEAP32[i50 >> 2] = 1;
    break;
   }
   if (!(_ass_strncasecmp(i7, 356021, 8) | 0)) {
    HEAP32[HEAP32[i49 >> 2] >> 2] = 3;
    break;
   }
   i32 = (_ass_strncasecmp(i7, 356030, 7) | 0) == 0;
   i3 = HEAP32[i49 >> 2] | 0;
   if (i32) {
    HEAP32[i3 >> 2] = 4;
    break;
   }
   switch (HEAP32[i3 >> 2] | 0) {
   case 1:
    {
     if (!(_strncmp(i7, 356038, 9) | 0)) {
      i32 = _atoi(i7 + 9 | 0) | 0;
      HEAP32[i51 >> 2] = i32;
      break L17;
     }
     if (!(_strncmp(i7, 356048, 9) | 0)) {
      i32 = _atoi(i7 + 9 | 0) | 0;
      HEAP32[i52 >> 2] = i32;
      break L17;
     }
     if (!(_strncmp(i7, 356058, 6) | 0)) {
      d64 = +_ass_strtod(i7 + 6 | 0, 0);
      HEAPF64[i53 >> 3] = d64;
      break L17;
     }
     if (!(_strncmp(i7, 356065, 10) | 0)) {
      i32 = _atoi(i7 + 10 | 0) | 0;
      HEAP32[i54 >> 2] = i32;
      break L17;
     }
     if (!(_strncmp(i7, 356076, 22) | 0)) {
      i32 = (_parse_bool(i7 + 22 | 0) | 0) << 24 >> 24;
      HEAP32[i34 >> 2] = i32;
      break L17;
     }
     if (!(_strncmp(i7, 356099, 8) | 0)) {
      i32 = (_parse_bool(i7 + 8 | 0) | 0) << 24 >> 24;
      HEAP32[i35 >> 2] = i32;
      break L17;
     }
     if (!(_strncmp(i7, 356108, 13) | 0)) {
      i32 = _parse_ycbcr_matrix(i7 + 13 | 0) | 0;
      HEAP32[i36 >> 2] = i32;
      break L17;
     }
     if (_strncmp(i7, 356122, 9) | 0) break L17;
     i2 = i7 + 9 | 0;
     i3 = HEAP8[i2 >> 0] | 0;
     L56 : do if (i3 << 24 >> 24) do {
      i3 = (i3 << 24 >> 24) + -9 | 0;
      if (i3 >>> 0 >= 24) break L56;
      if (!(8388639 >>> (i3 & 16777215) & 1)) break L56;
      i2 = i2 + 1 | 0;
      i3 = HEAP8[i2 >> 0] | 0;
     } while (i3 << 24 >> 24 != 0); while (0);
     _free(HEAP32[i37 >> 2] | 0);
     i32 = _strndup(i2, 2) | 0;
     HEAP32[i37 >> 2] = i32;
     break L17;
    }
   case 2:
    {
     if (!(_strncmp(i7, 356132, 7) | 0)) {
      HEAP32[i44 >> 2] = i7 + 7;
      _skip_spaces(i44);
      _free(HEAP32[i38 >> 2] | 0);
      i31 = ___strdup(HEAP32[i44 >> 2] | 0) | 0;
      HEAP32[i38 >> 2] = i31;
      i32 = HEAP32[i39 >> 2] | 0;
      HEAP32[i55 >> 2] = i31;
      _ass_msg(i32, 7, 356140, i55);
      break L17;
     }
     if (_strncmp(i7, 356157, 6) | 0) break L17;
     HEAP32[i48 >> 2] = i7 + 6;
     _skip_spaces(i48);
     i12 = HEAP32[i48 >> 2] | 0;
     i2 = HEAP32[i38 >> 2] | 0;
     if (!i2) {
      i2 = ___strdup((HEAP32[i50 >> 2] | 0) == 2 ? 356164 : 356351) | 0;
      HEAP32[i38 >> 2] = i2;
     }
     i32 = ___strdup(i2) | 0;
     i5 = i32;
     if (!(HEAP32[i33 >> 2] | 0)) {
      i2 = HEAP32[i40 >> 2] | 0;
      if ((i2 | 0) < 0) {
       i62 = 50;
       break L1;
      }
      i3 = i2 + 20 | 0;
      if (!i2) {
       HEAP32[i40 >> 2] = i3;
       i3 = _realloc(HEAP32[i41 >> 2] | 0, i3 * 144 | 0) | 0;
       HEAP32[i41 >> 2] = i3;
       i2 = HEAP32[i33 >> 2] | 0;
      } else {
       i2 = 0;
       i3 = HEAP32[i41 >> 2] | 0;
      }
      HEAP32[i33 >> 2] = i2 + 1;
      _memset(i3 + (i2 * 144 | 0) | 0, 0, 144) | 0;
      i31 = HEAP32[i41 >> 2] | 0;
      i30 = ___strdup(357055) | 0;
      HEAP32[i31 + (i2 * 144 | 0) >> 2] = i30;
      i30 = ___strdup(358016) | 0;
      HEAP32[i31 + (i2 * 144 | 0) + 4 >> 2] = i30;
      HEAPF64[i31 + (i2 * 144 | 0) + 8 >> 3] = 18.0;
      HEAP32[i31 + (i2 * 144 | 0) + 16 >> 2] = -256;
      HEAP32[i31 + (i2 * 144 | 0) + 20 >> 2] = 16776960;
      HEAP32[i31 + (i2 * 144 | 0) + 24 >> 2] = 0;
      HEAP32[i31 + (i2 * 144 | 0) + 28 >> 2] = 128;
      HEAP32[i31 + (i2 * 144 | 0) + 32 >> 2] = 200;
      HEAPF64[i31 + (i2 * 144 | 0) + 48 >> 3] = 1.0;
      HEAPF64[i31 + (i2 * 144 | 0) + 56 >> 3] = 1.0;
      HEAPF64[i31 + (i2 * 144 | 0) + 64 >> 3] = 0.0;
      HEAP32[i31 + (i2 * 144 | 0) + 80 >> 2] = 1;
      HEAPF64[i31 + (i2 * 144 | 0) + 88 >> 3] = 2.0;
      HEAPF64[i31 + (i2 * 144 | 0) + 96 >> 3] = 3.0;
      HEAP32[i31 + (i2 * 144 | 0) + 104 >> 2] = 2;
      HEAP32[i31 + (i2 * 144 | 0) + 116 >> 2] = 20;
      HEAP32[i31 + (i2 * 144 | 0) + 112 >> 2] = 20;
      HEAP32[i31 + (i2 * 144 | 0) + 108 >> 2] = 20;
      HEAP32[i42 >> 2] = i2;
     }
     i2 = HEAP32[i39 >> 2] | 0;
     HEAP32[i56 >> 2] = i33;
     HEAP32[i56 + 4 >> 2] = i12;
     _ass_msg(i2, 6, 356578, i56);
     i2 = HEAP32[i33 >> 2] | 0;
     i3 = HEAP32[i40 >> 2] | 0;
     if ((i2 | 0) > (i3 | 0)) {
      i62 = 56;
      break L1;
     }
     i4 = i3 + 20 | 0;
     if ((i2 | 0) == (i3 | 0)) {
      HEAP32[i40 >> 2] = i4;
      i2 = _realloc(HEAP32[i41 >> 2] | 0, i4 * 144 | 0) | 0;
      HEAP32[i41 >> 2] = i2;
      i31 = HEAP32[i33 >> 2] | 0;
     } else {
      i31 = i2;
      i2 = HEAP32[i41 >> 2] | 0;
     }
     HEAP32[i33 >> 2] = i31 + 1;
     _memset(i2 + (i31 * 144 | 0) | 0, 0, 144) | 0;
     i28 = HEAP32[i41 >> 2] | 0;
     i2 = i28 + (i31 * 144 | 0) | 0;
     i29 = i28 + (i31 * 144 | 0) + 48 | 0;
     HEAPF64[i29 >> 3] = 100.0;
     i30 = i28 + (i31 * 144 | 0) + 56 | 0;
     HEAPF64[i30 >> 3] = 100.0;
     HEAP32[i44 >> 2] = i5;
     _skip_spaces(i44);
     i10 = HEAP32[i44 >> 2] | 0;
     i11 = HEAP8[i10 >> 0] | 0;
     L83 : do if (!(i11 << 24 >> 24)) {
      i6 = i28 + (i31 * 144 | 0) + 64 | 0;
      i7 = i28 + (i31 * 144 | 0) + 88 | 0;
      i8 = i28 + (i31 * 144 | 0) + 96 | 0;
      i9 = i28 + (i31 * 144 | 0) + 32 | 0;
      i5 = i28 + (i31 * 144 | 0) + 36 | 0;
      i4 = i28 + (i31 * 144 | 0) + 40 | 0;
      i3 = i28 + (i31 * 144 | 0) + 44 | 0;
      i62 = 64;
     } else {
      i15 = i28 + (i31 * 144 | 0) + 4 | 0;
      i16 = i28 + (i31 * 144 | 0) + 16 | 0;
      i17 = i28 + (i31 * 144 | 0) + 20 | 0;
      i18 = i28 + (i31 * 144 | 0) + 24 | 0;
      i19 = i28 + (i31 * 144 | 0) + 28 | 0;
      i20 = i28 + (i31 * 144 | 0) + 8 | 0;
      i9 = i28 + (i31 * 144 | 0) + 32 | 0;
      i5 = i28 + (i31 * 144 | 0) + 36 | 0;
      i4 = i28 + (i31 * 144 | 0) + 40 | 0;
      i3 = i28 + (i31 * 144 | 0) + 44 | 0;
      i6 = i28 + (i31 * 144 | 0) + 64 | 0;
      i21 = i28 + (i31 * 144 | 0) + 72 | 0;
      i22 = i28 + (i31 * 144 | 0) + 80 | 0;
      i23 = i28 + (i31 * 144 | 0) + 104 | 0;
      i24 = i28 + (i31 * 144 | 0) + 108 | 0;
      i25 = i28 + (i31 * 144 | 0) + 112 | 0;
      i26 = i28 + (i31 * 144 | 0) + 116 | 0;
      i27 = i28 + (i31 * 144 | 0) + 120 | 0;
      i7 = i28 + (i31 * 144 | 0) + 88 | 0;
      i8 = i28 + (i31 * 144 | 0) + 96 | 0;
      i14 = i10;
      while (1) {
       i10 = i14;
       L88 : while (1) {
        switch (i11 << 24 >> 24) {
        case 0:
         break L88;
        case 44:
         {
          i62 = 67;
          break L88;
         }
        default:
         {}
        }
        i13 = i10 + 1 | 0;
        HEAP32[i44 >> 2] = i13;
        i11 = HEAP8[i13 >> 0] | 0;
        i10 = i13;
       }
       if ((i62 | 0) == 67) {
        i62 = 0;
        HEAP8[i10 >> 0] = 0;
        i10 = (HEAP32[i44 >> 2] | 0) + 1 | 0;
       }
       i13 = i10;
       _rskip_spaces(i44, i14);
       HEAP8[HEAP32[i44 >> 2] >> 0] = 0;
       if (!i14) break L83;
       HEAP32[i44 >> 2] = i12;
       _skip_spaces(i44);
       i10 = HEAP32[i44 >> 2] | 0;
       i11 = HEAP8[i10 >> 0] | 0;
       if (!(i11 << 24 >> 24)) break; else i12 = i10;
       L95 : while (1) {
        switch (i11 << 24 >> 24) {
        case 0:
         break L95;
        case 44:
         {
          i62 = 73;
          break L95;
         }
        default:
         {}
        }
        i65 = i12 + 1 | 0;
        HEAP32[i44 >> 2] = i65;
        i11 = HEAP8[i65 >> 0] | 0;
        i12 = i65;
       }
       if ((i62 | 0) == 73) {
        i62 = 0;
        HEAP8[i12 >> 0] = 0;
        i12 = (HEAP32[i44 >> 2] | 0) + 1 | 0;
       }
       _rskip_spaces(i44, i10);
       HEAP8[HEAP32[i44 >> 2] >> 0] = 0;
       if (!i10) break L83;
       L102 : do if (!(_ass_strcasecmp(i14, 356593) | 0)) {
        i11 = HEAP32[i2 >> 2] | 0;
        if (i11) _free(i11);
        while (1) if ((HEAP8[i10 >> 0] | 0) == 42) i10 = i10 + 1 | 0; else break;
        i65 = ___strdup(i10) | 0;
        HEAP32[i2 >> 2] = i65;
        if (_strcmp(i65, 357055) | 0) break;
        HEAP32[i42 >> 2] = i31;
       } else {
        if (!(_ass_strcasecmp(i14, 355437) | 0)) {
         i11 = HEAP32[i15 >> 2] | 0;
         if (i11 | 0) _free(i11);
         i65 = ___strdup(i10) | 0;
         HEAP32[i15 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355446) | 0)) {
         i65 = _parse_color_header(i10) | 0;
         HEAP32[i16 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355460) | 0)) {
         i65 = _parse_color_header(i10) | 0;
         HEAP32[i17 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355476) | 0)) {
         i65 = _parse_color_header(i10) | 0;
         HEAP32[i18 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355490) | 0)) {
         i10 = _parse_color_header(i10) | 0;
         HEAP32[i19 >> 2] = i10;
         if ((HEAP32[i50 >> 2] | 0) != 2) break;
         HEAP32[i18 >> 2] = i10;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355501) | 0)) {
         d64 = +_ass_strtod(i10, 0);
         HEAPF64[i20 >> 3] = d64;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355510) | 0)) {
         i65 = _atoi(i10) | 0;
         HEAP32[i9 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355515) | 0)) {
         i65 = _atoi(i10) | 0;
         HEAP32[i5 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355522) | 0)) {
         i65 = _atoi(i10) | 0;
         HEAP32[i4 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355532) | 0)) {
         i65 = _atoi(i10) | 0;
         HEAP32[i3 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355542) | 0)) {
         d64 = +_ass_strtod(i10, 0);
         HEAPF64[i6 >> 3] = d64;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355550) | 0)) {
         d64 = +_ass_strtod(i10, 0);
         HEAPF64[i21 >> 3] = d64;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355556) | 0)) {
         i65 = _atoi(i10) | 0;
         HEAP32[i22 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355568) | 0)) {
         i10 = _atoi(i10) | 0;
         HEAP32[i23 >> 2] = i10;
         if ((HEAP32[i50 >> 2] | 0) == 1) {
          i65 = _numpad2align(i10) | 0;
          HEAP32[i23 >> 2] = i65;
          break;
         }
         switch (i10 | 0) {
         case 8:
          {
           HEAP32[i23 >> 2] = 3;
           break L102;
          }
         case 4:
          {
           HEAP32[i23 >> 2] = 11;
           break L102;
          }
         default:
          break L102;
         }
        }
        if (!(_ass_strcasecmp(i14, 355586) | 0)) {
         i65 = _atoi(i10) | 0;
         HEAP32[i24 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355594) | 0)) {
         i65 = _atoi(i10) | 0;
         HEAP32[i25 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355602) | 0)) {
         i65 = _atoi(i10) | 0;
         HEAP32[i26 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355610) | 0)) {
         i65 = _atoi(i10) | 0;
         HEAP32[i27 >> 2] = i65;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355619) | 0)) {
         d64 = +_ass_strtod(i10, 0);
         HEAPF64[i29 >> 3] = d64;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355626) | 0)) {
         d64 = +_ass_strtod(i10, 0);
         HEAPF64[i30 >> 3] = d64;
         break;
        }
        if (!(_ass_strcasecmp(i14, 355633) | 0)) {
         d64 = +_ass_strtod(i10, 0);
         HEAPF64[i7 >> 3] = d64;
         break;
        }
        if (_ass_strcasecmp(i14, 355641) | 0) break;
        d64 = +_ass_strtod(i10, 0);
        HEAPF64[i8 >> 3] = d64;
       } while (0);
       HEAP32[i44 >> 2] = i13;
       _skip_spaces(i44);
       i14 = HEAP32[i44 >> 2] | 0;
       i11 = HEAP8[i14 >> 0] | 0;
       if (!(i11 << 24 >> 24)) {
        i62 = 64;
        break L83;
       }
      }
     } while (0);
     if ((i62 | 0) == 64) i62 = 0;
     d64 = +HEAPF64[i29 >> 3];
     HEAPF64[i29 >> 3] = (d64 > 0.0 ? d64 : 0.0) / 100.0;
     d64 = +HEAPF64[i30 >> 3];
     HEAPF64[i30 >> 3] = (d64 > 0.0 ? d64 : 0.0) / 100.0;
     d64 = +HEAPF64[i6 >> 3];
     HEAPF64[i6 >> 3] = d64 > 0.0 ? d64 : 0.0;
     d64 = +HEAPF64[i7 >> 3];
     HEAPF64[i7 >> 3] = d64 > 0.0 ? d64 : 0.0;
     d64 = +HEAPF64[i8 >> 3];
     HEAPF64[i8 >> 3] = d64 > 0.0 ? d64 : 0.0;
     HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) != 0 & 1;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) != 0 & 1;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) != 0 & 1;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) != 0 & 1;
     if (!(HEAP32[i2 >> 2] | 0)) {
      i65 = ___strdup(357055) | 0;
      HEAP32[i2 >> 2] = i65;
     }
     i2 = i28 + (i31 * 144 | 0) + 4 | 0;
     if (!(HEAP32[i2 >> 2] | 0)) {
      i65 = ___strdup(358016) | 0;
      HEAP32[i2 >> 2] = i65;
     }
     _free(i32);
     break L17;
    }
   case 3:
    {
     HEAP32[i44 >> 2] = i7;
     do if (!(_strncmp(i7, 356132, 7) | 0)) {
      HEAP32[i48 >> 2] = i7 + 7;
      _skip_spaces(i48);
      _free(HEAP32[i43 >> 2] | 0);
      i32 = ___strdup(HEAP32[i48 >> 2] | 0) | 0;
      HEAP32[i43 >> 2] = i32;
      i65 = HEAP32[i39 >> 2] | 0;
      HEAP32[i60 >> 2] = i32;
      _ass_msg(i65, 7, 356598, i60);
     } else {
      if (_strncmp(i7, 356615, 9) | 0) {
       i65 = HEAP32[i39 >> 2] | 0;
       HEAP32[i57 >> 2] = i7;
       _ass_msg(i65, 6, 356809, i57);
       break;
      }
      HEAP32[i44 >> 2] = i7 + 9;
      _skip_spaces(i44);
      i2 = HEAP32[i45 >> 2] | 0;
      i3 = HEAP32[i46 >> 2] | 0;
      if ((i2 | 0) > (i3 | 0)) {
       i62 = 142;
       break L1;
      }
      i4 = i3 << 1 | 1;
      if ((i2 | 0) == (i3 | 0)) {
       HEAP32[i46 >> 2] = i4;
       i2 = _realloc(HEAP32[i47 >> 2] | 0, i4 * 56 | 0) | 0;
       HEAP32[i47 >> 2] = i2;
       i4 = HEAP32[i45 >> 2] | 0;
      } else {
       i4 = i2;
       i2 = HEAP32[i47 >> 2] | 0;
      }
      HEAP32[i45 >> 2] = i4 + 1;
      i2 = i2 + (i4 * 56 | 0) | 0;
      i3 = i2 + 56 | 0;
      do {
       HEAP32[i2 >> 2] = 0;
       i2 = i2 + 4 | 0;
      } while ((i2 | 0) < (i3 | 0));
      i2 = (HEAP32[i47 >> 2] | 0) + (i4 * 56 | 0) | 0;
      if (!(HEAP32[i43 >> 2] | 0)) {
       HEAP32[HEAP32[i49 >> 2] >> 2] = 3;
       i65 = ___strdup((HEAP32[i50 >> 2] | 0) == 2 ? 356625 : 356698) | 0;
       HEAP32[i43 >> 2] = i65;
       _ass_msg(HEAP32[i39 >> 2] | 0, 6, 356771, i61);
      }
      _process_event_tail(i33, i2, HEAP32[i44 >> 2] | 0, 0);
     } while (0);
     break L17;
    }
   case 4:
    {
     if (!(_strncmp(i7, 356833, 9) | 0)) {
      HEAP32[i44 >> 2] = i7 + 9;
      _skip_spaces(i44);
      if (HEAP32[(HEAP32[i49 >> 2] | 0) + 4 >> 2] | 0) _decode_font(i33);
      i32 = ___strdup(HEAP32[i44 >> 2] | 0) | 0;
      HEAP32[(HEAP32[i49 >> 2] | 0) + 4 >> 2] = i32;
      i65 = HEAP32[i39 >> 2] | 0;
      HEAP32[i58 >> 2] = i32;
      _ass_msg(i65, 6, 356843, i58);
      break L17;
     }
     if (!(HEAP32[i3 + 4 >> 2] | 0)) {
      i65 = HEAP32[i39 >> 2] | 0;
      HEAP32[i59 >> 2] = i7;
      _ass_msg(i65, 6, 356856, i59);
      break L17;
     }
     i6 = _strlen(i7) | 0;
     i2 = HEAP32[i3 + 16 >> 2] | 0;
     i4 = i3 + 12 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     i3 = HEAP32[i3 + 8 >> 2] | 0;
     if ((i2 + i6 | 0) > (i5 | 0)) {
      i2 = i5 + ((i6 | 0) > 102400 ? i6 : 102400) | 0;
      HEAP32[i4 >> 2] = i2;
      i3 = _realloc(i3, i2) | 0;
      i2 = HEAP32[i49 >> 2] | 0;
      HEAP32[i2 + 8 >> 2] = i3;
      i2 = HEAP32[i2 + 16 >> 2] | 0;
     }
     _memcpy(i3 + i2 | 0, i7 | 0, i6 | 0) | 0;
     i65 = (HEAP32[i49 >> 2] | 0) + 16 | 0;
     HEAP32[i65 >> 2] = (HEAP32[i65 >> 2] | 0) + i6;
     break L17;
    }
   default:
    break L17;
   }
  } while (0);
  if (!(HEAP8[i1 >> 0] | 0)) {
   i62 = 161;
   break;
  }
 }
 if ((i62 | 0) == 50) ___assert_fail(355248, 355285, 104, 355291); else if ((i62 | 0) == 56) ___assert_fail(355248, 355285, 104, 355291); else if ((i62 | 0) == 142) ___assert_fail(355307, 355285, 126, 355344); else if ((i62 | 0) == 161) {
  if (!(HEAP32[(HEAP32[i49 >> 2] | 0) + 4 >> 2] | 0)) {
   STACKTOP = i63;
   return;
  }
  _decode_font(i33);
  STACKTOP = i63;
  return;
 }
}

function _storeAtts(i41, i21, i17, i42, i39) {
 i41 = i41 | 0;
 i21 = i21 | 0;
 i17 = i17 | 0;
 i42 = i42 | 0;
 i39 = i39 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i40 = 0, i43 = 0;
 i43 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i23 = i43;
 i40 = HEAP32[i41 + 356 >> 2] | 0;
 i16 = i40 + 20 | 0;
 i3 = HEAP32[i42 >> 2] | 0;
 i14 = HEAP32[i40 + 28 >> 2] | 0;
 L1 : do if (!i14) i25 = 13; else {
  i2 = HEAP32[i41 + 496 >> 2] | 0;
  i15 = HEAP8[i3 >> 0] | 0;
  if (i15 << 24 >> 24) {
   i5 = i3;
   i6 = i15;
   do {
    i5 = i5 + 1 | 0;
    i2 = i2 * 1000003 ^ i6 & 255;
    i6 = HEAP8[i5 >> 0] | 0;
   } while (i6 << 24 >> 24 != 0);
  }
  i5 = i14 + -1 | 0;
  i6 = i2 & i5;
  i13 = HEAP32[i16 >> 2] | 0;
  i7 = HEAP32[i13 + (i6 << 2) >> 2] | 0;
  if (!i7) i25 = 13; else {
   i11 = i2 & 0 - i14;
   i12 = i40 + 24 | 0;
   i10 = i5 >>> 2;
   i2 = 0;
   i5 = i7;
   L8 : while (1) {
    i7 = HEAP32[i5 >> 2] | 0;
    if (i15 << 24 >> 24 == (HEAP8[i7 >> 0] | 0)) {
     i9 = i3;
     i8 = i15;
     do {
      if (!(i8 << 24 >> 24)) break L8;
      i9 = i9 + 1 | 0;
      i7 = i7 + 1 | 0;
      i8 = HEAP8[i9 >> 0] | 0;
     } while (i8 << 24 >> 24 == (HEAP8[i7 >> 0] | 0));
    }
    if (!(i2 << 24 >> 24)) i2 = (i11 >>> ((HEAPU8[i12 >> 0] | 0) + -1 | 0) & i10 | 1) & 255;
    i5 = i2 & 255;
    i6 = (i6 >>> 0 < i5 >>> 0 ? i14 : 0) + (i6 - i5) | 0;
    i5 = HEAP32[i13 + (i6 << 2) >> 2] | 0;
    if (!i5) {
     i25 = 13;
     break L1;
    }
   }
   if (!i5) i25 = 13; else i36 = i5;
  }
 } while (0);
 if ((i25 | 0) == 13) {
  i5 = i40 + 80 | 0;
  i7 = i40 + 92 | 0;
  i6 = i40 + 88 | 0;
  while (1) {
   i2 = HEAP32[i7 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
    if (!((_poolGrow(i5) | 0) << 24 >> 24)) {
     i38 = 1;
     i25 = 160;
     break;
    }
    i2 = HEAP32[i7 >> 2] | 0;
   }
   i36 = HEAP8[i3 >> 0] | 0;
   HEAP32[i7 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = i36;
   if (!(HEAP8[i3 >> 0] | 0)) break; else i3 = i3 + 1 | 0;
  }
  if ((i25 | 0) == 160) {
   STACKTOP = i43;
   return i38 | 0;
  }
  i36 = i40 + 96 | 0;
  i2 = HEAP32[i36 >> 2] | 0;
  HEAP32[i36 >> 2] = HEAP32[i7 >> 2];
  if (!i2) {
   i42 = 1;
   STACKTOP = i43;
   return i42 | 0;
  }
  i2 = _lookup(i41, i16, i2, 24) | 0;
  if (!i2) {
   i42 = 1;
   STACKTOP = i43;
   return i42 | 0;
  }
  if (!(HEAP8[i41 + 236 >> 0] | 0)) i36 = i2; else if (!(_setElementTypePrefix(i41, i2) | 0)) {
   i42 = 1;
   STACKTOP = i43;
   return i42 | 0;
  } else i36 = i2;
 }
 i20 = HEAP32[i36 + 12 >> 2] | 0;
 i5 = i21 + 40 | 0;
 i2 = i41 + 380 | 0;
 i18 = i41 + 392 | 0;
 i19 = FUNCTION_TABLE_iiiii[HEAP32[i5 >> 2] & 127](i21, i17, HEAP32[i2 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0;
 i3 = i19 + i20 | 0;
 i6 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) > (i6 | 0)) {
  i35 = i3 + 16 | 0;
  HEAP32[i2 >> 2] = i35;
  i2 = FUNCTION_TABLE_iii[HEAP32[i41 + 16 >> 2] & 255](HEAP32[i18 >> 2] | 0, i35 << 4) | 0;
  if (!i2) {
   i42 = 1;
   STACKTOP = i43;
   return i42 | 0;
  }
  HEAP32[i18 >> 2] = i2;
  if ((i19 | 0) > (i6 | 0)) FUNCTION_TABLE_iiiii[HEAP32[i5 >> 2] & 127](i21, i17, i19, i2) | 0;
 }
 i35 = HEAP32[i18 >> 2] | 0;
 L46 : do if ((i19 | 0) > 0) {
  i11 = i21 + 32 | 0;
  i12 = i41 + 416 | 0;
  i13 = i41 + 428 | 0;
  i14 = i41 + 432 | 0;
  i15 = i41 + 424 | 0;
  i16 = i36 + 20 | 0;
  i17 = i21 + 60 | 0;
  i10 = (i20 | 0) < 1;
  i2 = HEAP32[i35 >> 2] | 0;
  i2 = _getAttributeId(i41, i21, i2, i2 + (FUNCTION_TABLE_iii[HEAP32[i11 >> 2] & 255](i21, i2) | 0) | 0) | 0;
  if (!i2) {
   i42 = 1;
   STACKTOP = i43;
   return i42 | 0;
  } else {
   i6 = 0;
   i9 = 0;
   i5 = 0;
  }
  L50 : while (1) {
   i3 = (HEAP32[i2 >> 2] | 0) + -1 | 0;
   if (HEAP8[i3 >> 0] | 0) {
    i25 = 29;
    break;
   }
   HEAP8[i3 >> 0] = 1;
   i22 = i6 + 1 | 0;
   HEAP32[i35 + (i6 << 2) >> 2] = HEAP32[i2 >> 2];
   i8 = HEAP32[i18 >> 2] | 0;
   if (!(HEAP8[i8 + (i9 << 4) + 12 >> 0] | 0)) {
    L55 : do if ((HEAP8[i2 + 8 >> 0] | 0) == 0 | i10) i7 = 1; else {
     i7 = HEAP32[i16 >> 2] | 0;
     i3 = 0;
     while (1) {
      if ((i2 | 0) == (HEAP32[i7 + (i3 * 12 | 0) >> 2] | 0)) break;
      i3 = i3 + 1 | 0;
      if ((i3 | 0) >= (i20 | 0)) {
       i7 = 1;
       break L55;
      }
     }
     i7 = HEAP8[i7 + (i3 * 12 | 0) + 4 >> 0] | 0;
    } while (0);
    i3 = _appendAttributeValue(i41, i21, i7, HEAP32[i8 + (i9 << 4) + 4 >> 2] | 0, HEAP32[i8 + (i9 << 4) + 8 >> 2] | 0, i12) | 0;
    if (i3 | 0) {
     i38 = i3;
     i25 = 160;
     break;
    }
    i3 = HEAP32[i13 >> 2] | 0;
    if (!(i7 << 24 >> 24)) if ((i3 | 0) != (HEAP32[i14 >> 2] | 0)) {
     i7 = i3 + -1 | 0;
     if ((HEAP8[i7 >> 0] | 0) == 32) {
      HEAP32[i13 >> 2] = i7;
      i3 = i7;
     }
    }
    if ((i3 | 0) == (HEAP32[i15 >> 2] | 0)) {
     if (!((_poolGrow(i12) | 0) << 24 >> 24)) {
      i38 = 1;
      i25 = 160;
      break;
     }
     i3 = HEAP32[i13 >> 2] | 0;
    }
    HEAP32[i13 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = 0;
    HEAP32[i35 + (i22 << 2) >> 2] = HEAP32[i14 >> 2];
   } else {
    i3 = HEAP32[i8 + (i9 << 4) + 8 >> 2] | 0;
    HEAP32[i23 >> 2] = HEAP32[i8 + (i9 << 4) + 4 >> 2];
    if (!(HEAP32[i13 >> 2] | 0)) if (!((_poolGrow(i12) | 0) << 24 >> 24)) {
     i25 = 50;
     break;
    }
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i17 >> 2] & 31](i21, i23, i3, i13, HEAP32[i15 >> 2] | 0);
     if ((HEAP32[i23 >> 2] | 0) == (i3 | 0)) break;
     if (!((_poolGrow(i12) | 0) << 24 >> 24)) {
      i25 = 50;
      break L50;
     }
    }
    if (!(HEAP32[i14 >> 2] | 0)) break;
    i3 = HEAP32[i13 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i15 >> 2] | 0)) {
     if (!((_poolGrow(i12) | 0) << 24 >> 24)) break;
     i3 = HEAP32[i13 >> 2] | 0;
    }
    HEAP32[i13 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = 0;
    i34 = HEAP32[i14 >> 2] | 0;
    HEAP32[i35 + (i22 << 2) >> 2] = i34;
    if (!i34) {
     i38 = 1;
     i25 = 160;
     break;
    }
   }
   HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
   i3 = HEAP32[i2 + 4 >> 2] | 0;
   do if (!i3) i6 = i6 + 2 | 0; else if (!(HEAP8[i2 + 9 >> 0] | 0)) {
    HEAP8[(HEAP32[i2 >> 2] | 0) + -1 >> 0] = 2;
    i5 = i5 + 1 | 0;
    i6 = i6 + 2 | 0;
    break;
   } else {
    i2 = _addBinding(i41, i3, i2, HEAP32[i35 + (i22 << 2) >> 2] | 0, i39) | 0;
    if (!i2) break; else {
     i38 = i2;
     i25 = 160;
     break L50;
    }
   } while (0);
   i3 = i9 + 1 | 0;
   if ((i3 | 0) >= (i19 | 0)) break L46;
   i2 = HEAP32[(HEAP32[i18 >> 2] | 0) + (i3 << 4) >> 2] | 0;
   i2 = _getAttributeId(i41, i21, i2, i2 + (FUNCTION_TABLE_iii[HEAP32[i11 >> 2] & 255](i21, i2) | 0) | 0) | 0;
   if (!i2) {
    i38 = 1;
    i25 = 160;
    break;
   } else i9 = i3;
  }
  if ((i25 | 0) == 29) {
   if ((HEAP32[i41 + 144 >> 2] | 0) != (i21 | 0)) {
    i42 = 8;
    STACKTOP = i43;
    return i42 | 0;
   }
   HEAP32[i41 + 288 >> 2] = HEAP32[(HEAP32[i18 >> 2] | 0) + (i9 << 4) >> 2];
   i42 = 8;
   STACKTOP = i43;
   return i42 | 0;
  } else if ((i25 | 0) != 50) if ((i25 | 0) == 160) {
   STACKTOP = i43;
   return i38 | 0;
  }
  HEAP32[i35 + (i22 << 2) >> 2] = 0;
  i42 = 1;
  STACKTOP = i43;
  return i42 | 0;
 } else {
  i6 = 0;
  i5 = 0;
 } while (0);
 HEAP32[i41 + 384 >> 2] = i6;
 i2 = HEAP32[i36 + 8 >> 2] | 0;
 L108 : do if (!i2) {
  i24 = -1;
  i25 = 69;
 } else {
  i3 = HEAP32[i2 >> 2] | 0;
  if (!(HEAP8[i3 + -1 >> 0] | 0)) {
   i24 = -1;
   i25 = 69;
  } else if ((i6 | 0) > 0) {
   i2 = 0;
   do {
    if ((HEAP32[i35 + (i2 << 2) >> 2] | 0) == (i3 | 0)) {
     i24 = i2;
     i25 = 69;
     break L108;
    }
    i2 = i2 + 2 | 0;
   } while ((i2 | 0) < (i6 | 0));
  }
 } while (0);
 if ((i25 | 0) == 69) HEAP32[i41 + 388 >> 2] = i24;
 L117 : do if ((i20 | 0) > 0) {
  i12 = i36 + 20 | 0;
  i11 = 0;
  i2 = i5;
  L119 : while (1) {
   i3 = HEAP32[i12 >> 2] | 0;
   i10 = i3 + (i11 * 12 | 0) | 0;
   i7 = HEAP32[i10 >> 2] | 0;
   i8 = (HEAP32[i7 >> 2] | 0) + -1 | 0;
   L121 : do if (!(HEAP8[i8 >> 0] | 0)) {
    i9 = i3 + (i11 * 12 | 0) + 8 | 0;
    i3 = HEAP32[i9 >> 2] | 0;
    if (!i3) i3 = i6; else {
     i5 = HEAP32[i7 + 4 >> 2] | 0;
     do if (!i5) HEAP8[i8 >> 0] = 1; else if (!(HEAP8[i7 + 9 >> 0] | 0)) {
      HEAP8[i8 >> 0] = 2;
      i2 = i2 + 1 | 0;
      break;
     } else {
      i3 = _addBinding(i41, i5, i7, i3, i39) | 0;
      if (!i3) {
       i3 = i6;
       break L121;
      } else {
       i38 = i3;
       break L119;
      }
     } while (0);
     HEAP32[i35 + (i6 << 2) >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
     HEAP32[i35 + (i6 + 1 << 2) >> 2] = HEAP32[i9 >> 2];
     i3 = i6 + 2 | 0;
    }
   } else i3 = i6; while (0);
   i11 = i11 + 1 | 0;
   if ((i11 | 0) >= (i20 | 0)) {
    i8 = i2;
    i6 = i3;
    break L117;
   } else i6 = i3;
  }
  STACKTOP = i43;
  return i38 | 0;
 } else i8 = i5; while (0);
 HEAP32[i35 + (i6 << 2) >> 2] = 0;
 L134 : do if (!i8) i1 = 0; else {
  i7 = i41 + 400 | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  i34 = i41 + 404 | 0;
  i2 = HEAP8[i34 >> 0] | 0;
  i3 = i2 & 255;
  do if (!(i8 << 1 >> i3)) {
   i2 = 1 << i3;
   if (!i5) {
    i26 = i2;
    i4 = HEAP32[i41 + 396 >> 2] | 0;
    i25 = 88;
   } else {
    i37 = i2;
    i27 = i5;
   }
  } else {
   do {
    i33 = i2;
    i2 = i2 + 1 << 24 >> 24;
   } while ((i8 >> (i33 & 255) | 0) != 0);
   i2 = (i2 & 255) > 3 ? i2 : 3;
   HEAP8[i34 >> 0] = i2;
   i2 = i2 & 255;
   i3 = i41 + 396 | 0;
   i4 = FUNCTION_TABLE_iii[HEAP32[i41 + 16 >> 2] & 255](HEAP32[i3 >> 2] | 0, 12 << i2) | 0;
   if (!i4) {
    i42 = 1;
    STACKTOP = i43;
    return i42 | 0;
   } else {
    HEAP32[i3 >> 2] = i4;
    i26 = 1 << i2;
    i25 = 88;
    break;
   }
  } while (0);
  if ((i25 | 0) == 88) {
   i2 = i26;
   do {
    i2 = i2 + -1 | 0;
    HEAP32[i4 + (i2 * 12 | 0) >> 2] = -1;
   } while ((i2 | 0) != 0);
   i37 = i26;
   i27 = -1;
  }
  i33 = i27 + -1 | 0;
  HEAP32[i7 >> 2] = i33;
  if ((i6 | 0) > 0) {
   i19 = i41 + 496 | 0;
   i20 = i40 + 48 | 0;
   i21 = i40 + 40 | 0;
   i22 = i40 + 44 | 0;
   i23 = i41 + 416 | 0;
   i24 = i41 + 428 | 0;
   i25 = i41 + 424 | 0;
   i26 = i37 + -1 | 0;
   i27 = i41 + 396 | 0;
   i28 = i41 + 237 | 0;
   i29 = i41 + 432 | 0;
   i30 = i41 + 472 | 0;
   i31 = 0 - i37 | 0;
   i32 = i26 >>> 2;
   i3 = 0;
   i2 = i8;
   L151 : while (1) {
    i18 = i35 + (i3 << 2) | 0;
    i17 = HEAP32[i18 >> 2] | 0;
    i4 = i17 + -1 | 0;
    if ((HEAP8[i4 >> 0] | 0) == 2) {
     i7 = HEAP32[i19 >> 2] | 0;
     HEAP8[i4 >> 0] = 0;
     i15 = HEAP32[i20 >> 2] | 0;
     i4 = HEAP32[i19 >> 2] | 0;
     i16 = HEAP8[i17 >> 0] | 0;
     if (i16 << 24 >> 24) {
      i5 = i17;
      i8 = i16;
      do {
       i5 = i5 + 1 | 0;
       i4 = i4 * 1000003 ^ i8 & 255;
       i8 = HEAP8[i5 >> 0] | 0;
      } while (i8 << 24 >> 24 != 0);
     }
     i11 = i15 + -1 | 0;
     i12 = HEAP32[i21 >> 2] | 0;
     i13 = i4 & 0 - i15;
     i14 = i11 >>> 2;
     i10 = 0;
     i11 = i4 & i11;
     L159 : while (1) {
      i9 = HEAP32[i12 + (i11 << 2) >> 2] | 0;
      i4 = HEAP32[i9 >> 2] | 0;
      if (i16 << 24 >> 24 == (HEAP8[i4 >> 0] | 0)) {
       i8 = i17;
       i5 = i16;
       do {
        if (!(i5 << 24 >> 24)) break L159;
        i8 = i8 + 1 | 0;
        i4 = i4 + 1 | 0;
        i5 = HEAP8[i8 >> 0] | 0;
       } while (i5 << 24 >> 24 == (HEAP8[i4 >> 0] | 0));
      }
      if (!(i10 << 24 >> 24)) i4 = (i13 >>> ((HEAPU8[i22 >> 0] | 0) + -1 | 0) & i14 | 1) & 255; else i4 = i10;
      i9 = i4 & 255;
      i10 = i4;
      i11 = i11 - i9 + (i11 >>> 0 < i9 >>> 0 ? i15 : 0) | 0;
     }
     i13 = HEAP32[(HEAP32[i9 + 4 >> 2] | 0) + 4 >> 2] | 0;
     if (!i13) {
      i38 = 27;
      i25 = 160;
      break;
     }
     i9 = i13 + 20 | 0;
     if ((HEAP32[i9 >> 2] | 0) > 0) {
      i10 = i13 + 16 | 0;
      i8 = 0;
      do {
       i5 = HEAP8[(HEAP32[i10 >> 2] | 0) + i8 >> 0] | 0;
       i4 = HEAP32[i24 >> 2] | 0;
       if ((i4 | 0) == (HEAP32[i25 >> 2] | 0)) {
        if (!((_poolGrow(i23) | 0) << 24 >> 24)) {
         i38 = 1;
         i25 = 160;
         break L151;
        }
        i4 = HEAP32[i24 >> 2] | 0;
       }
       HEAP32[i24 >> 2] = i4 + 1;
       HEAP8[i4 >> 0] = i5;
       i7 = i5 & 255 ^ i7 * 1000003;
       i8 = i8 + 1 | 0;
      } while ((i8 | 0) < (HEAP32[i9 >> 2] | 0));
     }
     i4 = i17;
     while (1) {
      i5 = i4 + 1 | 0;
      if ((HEAP8[i4 >> 0] | 0) == 58) break; else i4 = i5;
     }
     while (1) {
      i9 = HEAP8[i5 >> 0] | 0;
      i4 = HEAP32[i24 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i25 >> 2] | 0)) {
       if (!((_poolGrow(i23) | 0) << 24 >> 24)) {
        i38 = 1;
        i25 = 160;
        break L151;
       }
       i4 = HEAP32[i24 >> 2] | 0;
       i8 = HEAP8[i5 >> 0] | 0;
      } else i8 = i9;
      HEAP32[i24 >> 2] = i4 + 1;
      HEAP8[i4 >> 0] = i8;
      i7 = i9 & 255 ^ i7 * 1000003;
      if (!(HEAP8[i5 >> 0] | 0)) break; else i5 = i5 + 1 | 0;
     }
     i8 = i7 & i26;
     i11 = HEAP32[i27 >> 2] | 0;
     if ((HEAP32[i11 + (i8 * 12 | 0) >> 2] | 0) == (i33 | 0)) {
      i12 = i7 & i31;
      i4 = 0;
      do {
       if ((i7 | 0) == (HEAP32[i11 + (i8 * 12 | 0) + 4 >> 2] | 0)) {
        i9 = HEAP32[i29 >> 2] | 0;
        i10 = HEAP32[i11 + (i8 * 12 | 0) + 8 >> 2] | 0;
        i17 = HEAP8[i9 >> 0] | 0;
        i5 = i17 << 24 >> 24 == 0;
        if (!(i5 | i17 << 24 >> 24 != (HEAP8[i10 >> 0] | 0))) do {
         i9 = i9 + 1 | 0;
         i10 = i10 + 1 | 0;
         i17 = HEAP8[i9 >> 0] | 0;
         i5 = i17 << 24 >> 24 == 0;
        } while (!(i5 | i17 << 24 >> 24 != (HEAP8[i10 >> 0] | 0)));
        if (i5) {
         i38 = 8;
         i25 = 160;
         break L151;
        }
       }
       if (!(i4 << 24 >> 24)) i4 = (i12 >>> ((HEAPU8[i34 >> 0] | 0) + -1 | 0) & i32 | 1) & 255;
       i17 = i4 & 255;
       i8 = i8 + ((i8 | 0) < (i17 | 0) ? i37 : 0) - i17 | 0;
      } while ((HEAP32[i11 + (i8 * 12 | 0) >> 2] | 0) == (i33 | 0));
     }
     if (HEAP8[i28 >> 0] | 0) {
      HEAP8[(HEAP32[i24 >> 2] | 0) + -1 >> 0] = HEAP8[i30 >> 0] | 0;
      i5 = HEAP32[HEAP32[i13 >> 2] >> 2] | 0;
      while (1) {
       i4 = HEAP32[i24 >> 2] | 0;
       if ((i4 | 0) == (HEAP32[i25 >> 2] | 0)) {
        if (!((_poolGrow(i23) | 0) << 24 >> 24)) {
         i38 = 1;
         i25 = 160;
         break L151;
        }
        i4 = HEAP32[i24 >> 2] | 0;
       }
       i17 = HEAP8[i5 >> 0] | 0;
       HEAP32[i24 >> 2] = i4 + 1;
       HEAP8[i4 >> 0] = i17;
       if (!(HEAP8[i5 >> 0] | 0)) break; else i5 = i5 + 1 | 0;
      }
     }
     i17 = HEAP32[i29 >> 2] | 0;
     HEAP32[i29 >> 2] = HEAP32[i24 >> 2];
     HEAP32[i18 >> 2] = i17;
     i18 = HEAP32[i27 >> 2] | 0;
     HEAP32[i18 + (i8 * 12 | 0) >> 2] = i33;
     HEAP32[i18 + (i8 * 12 | 0) + 4 >> 2] = i7;
     HEAP32[i18 + (i8 * 12 | 0) + 8 >> 2] = i17;
     i2 = i2 + -1 | 0;
     if (!i2) {
      i25 = 92;
      break;
     }
    } else HEAP8[i4 >> 0] = 0;
    i3 = i3 + 2 | 0;
    if ((i3 | 0) >= (i6 | 0)) {
     i1 = i3;
     break L134;
    }
   }
   if ((i25 | 0) == 92) {
    i1 = i3 + 2 | 0;
    break;
   } else if ((i25 | 0) == 160) {
    STACKTOP = i43;
    return i38 | 0;
   }
  } else i1 = 0;
 } while (0);
 if ((i1 | 0) < (i6 | 0)) do {
  HEAP8[(HEAP32[i35 + (i1 << 2) >> 2] | 0) + -1 >> 0] = 0;
  i1 = i1 + 2 | 0;
 } while ((i1 | 0) < (i6 | 0));
 i1 = HEAP32[i39 >> 2] | 0;
 if (i1 | 0) do {
  HEAP8[(HEAP32[HEAP32[i1 + 12 >> 2] >> 2] | 0) + -1 >> 0] = 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
 } while ((i1 | 0) != 0);
 if (!(HEAP8[i41 + 236 >> 0] | 0)) {
  i42 = 0;
  STACKTOP = i43;
  return i42 | 0;
 }
 i1 = HEAP32[i36 + 4 >> 2] | 0;
 do if (!i1) {
  i1 = HEAP32[i40 + 156 >> 2] | 0;
  if (!i1) {
   i42 = 0;
   STACKTOP = i43;
   return i42 | 0;
  } else {
   i3 = HEAP32[i42 >> 2] | 0;
   break;
  }
 } else {
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (!i1) {
   i42 = 27;
   STACKTOP = i43;
   return i42 | 0;
  }
  i2 = HEAP32[i42 >> 2] | 0;
  while (1) {
   i3 = i2 + 1 | 0;
   if ((HEAP8[i2 >> 0] | 0) == 58) break; else i2 = i3;
  }
 } while (0);
 i5 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
 if ((HEAP8[i41 + 237 >> 0] | 0) == 0 | (i5 | 0) == 0) i4 = 0; else {
  i2 = 0;
  while (1) {
   i4 = i2 + 1 | 0;
   if (!(HEAP8[i5 + i2 >> 0] | 0)) break; else i2 = i4;
  }
 }
 HEAP32[i42 + 4 >> 2] = i3;
 i9 = i1 + 20 | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 HEAP32[i42 + 16 >> 2] = i2;
 HEAP32[i42 + 8 >> 2] = i5;
 HEAP32[i42 + 20 >> 2] = i4;
 i10 = 0;
 while (1) {
  i11 = i10 + 1 | 0;
  if (!(HEAP8[i3 + i10 >> 0] | 0)) break; else i10 = i11;
 }
 i5 = i2 + i4 + i11 | 0;
 i6 = i1 + 24 | 0;
 if ((i5 | 0) > (HEAP32[i6 >> 2] | 0)) {
  i2 = i5 + 24 | 0;
  i5 = FUNCTION_TABLE_ii[HEAP32[i41 + 12 >> 2] & 63](i2) | 0;
  if (!i5) {
   i42 = 1;
   STACKTOP = i43;
   return i42 | 0;
  }
  HEAP32[i6 >> 2] = i2;
  i7 = i1 + 16 | 0;
  _memcpy(i5 | 0, HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  i2 = HEAP32[i41 + 364 >> 2] | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  if (i2 | 0) do {
   i6 = i2 + 12 | 0;
   if ((HEAP32[i6 >> 2] | 0) == (i8 | 0)) HEAP32[i6 >> 2] = i5;
   i2 = HEAP32[i2 >> 2] | 0;
  } while ((i2 | 0) != 0);
  FUNCTION_TABLE_vi[HEAP32[i41 + 20 >> 2] & 127](i8);
  HEAP32[i7 >> 2] = i5;
  i6 = i7;
  i2 = HEAP32[i9 >> 2] | 0;
 } else {
  i5 = i1 + 16 | 0;
  i6 = i5;
  i5 = HEAP32[i5 >> 2] | 0;
 }
 i2 = i5 + i2 | 0;
 _memcpy(i2 | 0, i3 | 0, i11 | 0) | 0;
 if (i4 | 0) {
  i40 = i2 + i10 | 0;
  HEAP8[i40 >> 0] = HEAP8[i41 + 472 >> 0] | 0;
  _memcpy(i40 + 1 | 0, HEAP32[HEAP32[i1 >> 2] >> 2] | 0, i4 | 0) | 0;
 }
 HEAP32[i42 >> 2] = HEAP32[i6 >> 2];
 i42 = 0;
 STACKTOP = i43;
 return i42 | 0;
}

function _cf2_decoder_parse_charstrings(i9, i6, i7) {
 i9 = i9 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i24 = i28 + 48 | 0;
 i27 = i28 + 44 | 0;
 i3 = i28 + 40 | 0;
 i25 = i28 + 24 | 0;
 i11 = i28;
 HEAP32[i3 >> 2] = 0;
 i4 = HEAP32[i9 >> 2] | 0;
 i5 = i9 + 76 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i1 + 2972 >> 2] | 0;
 do if (!i2) {
  HEAP32[i1 + 2976 >> 2] = 56;
  i1 = _ft_mem_alloc(i4, 504, i3) | 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 2972 >> 2] = i1;
  if (!(HEAP32[i3 >> 2] | 0)) {
   HEAP32[i1 >> 2] = i4;
   i23 = i1 + 108 | 0;
   HEAP32[i23 >> 2] = 0;
   HEAP32[i23 + 4 >> 2] = 0;
   HEAP32[i23 + 8 >> 2] = 0;
   HEAP32[i23 + 12 >> 2] = 0;
   HEAP32[i23 + 16 >> 2] = 0;
   HEAP32[i23 + 20 >> 2] = 0;
   HEAP32[i1 + 120 >> 2] = i4;
   HEAP32[i1 + 124 >> 2] = i1 + 4;
   HEAP32[i1 + 100 >> 2] = 28;
   HEAP32[i1 + 104 >> 2] = 29;
   HEAP32[i1 + 112 >> 2] = 30;
   i23 = i1;
   break;
  } else {
   i27 = 64;
   STACKTOP = i28;
   return i27 | 0;
  }
 } else i23 = i2; while (0);
 i13 = i23 + 132 | 0;
 HEAP32[i13 >> 2] = i9;
 i26 = i23 + 128 | 0;
 HEAP32[i26 >> 2] = i9;
 i5 = i9 + 4 | 0;
 i8 = HEAP32[(HEAP32[i5 >> 2] | 0) + 96 >> 2] | 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 12 >> 2] = i6;
 HEAP32[i25 + 4 >> 2] = i6;
 HEAP32[i25 + 8 >> 2] = i6 + i7;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 HEAP32[i11 + 16 >> 2] = 0;
 HEAP32[i11 + 20 >> 2] = 0;
 i6 = i11 + 12 | 0;
 i1 = HEAP32[i9 + 8 >> 2] | 0;
 i3 = HEAP8[i1 + 161 >> 0] | 0;
 i2 = (HEAP8[i1 + 160 >> 0] | 0) == 0;
 if (i2) {
  HEAP32[i11 >> 2] = 1024;
  i7 = 1024;
  i1 = 1024;
 } else {
  i7 = ((HEAP32[i1 + 164 >> 2] | 0) + 32 | 0) / 64 | 0;
  HEAP32[i11 >> 2] = i7;
  i1 = ((HEAP32[i1 + 168 >> 2] | 0) + 32 | 0) / 64 | 0;
 }
 HEAP32[i6 >> 2] = i1;
 i10 = i23 + 8 | 0;
 i1 = (i2 ^ 1) & 1;
 HEAP32[i10 >> 2] = i1;
 i4 = i3 << 24 >> 24 == 0;
 if (!i4) if (!(HEAP8[i8 + 32 >> 0] | 0)) HEAP32[i10 >> 2] = i1 | 2;
 i12 = i23 + 144 | 0;
 HEAP32[i12 >> 2] = HEAP32[i8 + 36 >> 2];
 HEAP32[i23 + 148 >> 2] = HEAP32[i8 + 40 >> 2];
 HEAP32[i23 + 152 >> 2] = HEAP32[i8 + 44 >> 2];
 HEAP32[i23 + 156 >> 2] = HEAP32[i8 + 48 >> 2];
 HEAP32[i23 + 160 >> 2] = HEAP32[i8 + 52 >> 2];
 HEAP32[i23 + 164 >> 2] = HEAP32[i8 + 56 >> 2];
 HEAP32[i23 + 168 >> 2] = HEAP32[i8 + 60 >> 2];
 HEAP32[i23 + 172 >> 2] = HEAP32[i8 + 64 >> 2];
 i2 = HEAP16[(HEAP32[i5 >> 2] | 0) + 68 >> 1] | 0;
 i3 = i2 & 65535;
 i8 = i23 + 88 | 0;
 HEAP32[i8 >> 2] = i3;
 if (i4) {
  i4 = i9;
  i14 = 15;
 } else {
  i1 = HEAP32[i6 >> 2] | 0;
  if ((i7 | 0) < 1 | (i1 | 0) < 1) i1 = 36; else if (i2 << 16 >> 16 < 0) i1 = 164; else {
   i22 = _FT_DivFix(131072e3, i3 << 16) | 0;
   if ((i7 | 0) > (i22 | 0) | (i1 | 0) > (i22 | 0)) i1 = 164; else {
    i4 = HEAP32[i13 >> 2] | 0;
    i14 = 15;
   }
  }
 }
 L20 : do if ((i14 | 0) == 15) {
  HEAP32[i27 >> 2] = 0;
  HEAP32[i24 >> 2] = HEAP32[i11 + 16 >> 2];
  HEAP32[i24 + 4 >> 2] = HEAP32[i11 + 20 >> 2];
  i2 = HEAP32[i23 + 92 >> 2] | 0;
  i9 = HEAP32[i23 + 96 >> 2] | 0;
  i22 = i23 + 4 | 0;
  HEAP32[i22 >> 2] = 0;
  i7 = i4 + 736 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  i3 = i23 + 136 | 0;
  if ((HEAP32[i3 >> 2] | 0) == (i1 | 0)) i3 = 0; else {
   HEAP32[i3 >> 2] = i1;
   i3 = 1;
  }
  i5 = HEAPU16[(HEAP32[(HEAP32[i4 + 4 >> 2] | 0) + 88 >> 2] | 0) + 14 >> 1] << 16;
  i1 = i23 + 84 | 0;
  if ((HEAP32[i1 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i1 >> 2] = i5;
   i3 = 1;
  }
  i4 = HEAP32[i10 >> 2] | 0;
  HEAP8[i23 + 140 >> 0] = i4 & 1;
  i1 = i23 + 12 | 0;
  if (_memcmp(i11, i1, 16) | 0) {
   HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i23 + 32 >> 2] = 0;
   HEAP32[i23 + 28 >> 2] = 0;
   i3 = i23 + 36 | 0;
   HEAP32[i3 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i3 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
   HEAP32[i3 + 20 >> 2] = HEAP32[i11 + 20 >> 2];
   HEAP32[i23 + 72 >> 2] = 65536;
   HEAP32[i23 + 60 >> 2] = 65536;
   HEAP32[i23 + 68 >> 2] = 0;
   HEAP32[i23 + 64 >> 2] = 0;
   i3 = 1;
  }
  i21 = i23 + 142 | 0;
  i1 = i4 & 2;
  if ((HEAPU8[i21 >> 0] | 0) == (i1 | 0)) {
   if (i3 << 24 >> 24) i14 = 24;
  } else {
   HEAP8[i21 >> 0] = i1;
   i14 = 24;
  }
  L34 : do if ((i14 | 0) == 24) {
   i3 = HEAP32[i8 >> 2] | 0;
   i3 = (i3 | 0) == 0 ? 1e3 : i3;
   i5 = (i5 | 0) > 262144 ? i5 : 262144;
   i6 = 65536e3 / (i3 | 0) | 0;
   i1 = HEAP32[(HEAP32[i7 >> 2] | 0) + 388 >> 2] << 16;
   i4 = i23 + 176 | 0;
   HEAP32[i4 >> 2] = i1;
   if ((i1 | 0) < 1) {
    i1 = _FT_DivFix(4915200, i6) | 0;
    HEAP32[i4 >> 2] = i1;
   }
   if ((i2 | 0) > 0) {
    i1 = i3 << 16;
    if ((i2 | 0) <= (_FT_DivFix(i1, i5) | 0)) i2 = _FT_DivFix(i1, i5) | 0;
    i1 = i23 + 184 | 0;
    HEAP32[i1 >> 2] = 0;
    if (!((i6 | 0) < 655 | (i2 | 0) == 0)) HEAP32[i1 >> 2] = (i2 | 0) / 2 | 0;
   } else _cf2_computeDarkening(i6, i5, i1, i23 + 184 | 0, 0, HEAP8[i21 >> 0] | 0, i12);
   i1 = HEAP32[(HEAP32[i7 >> 2] | 0) + 384 >> 2] | 0;
   if ((i1 << 16 | 0) > 0) i1 = (HEAP32[i4 >> 2] | 0) > (i1 << 17 | 0) ? 4915200 : 7208960; else i1 = 7208960;
   i20 = _FT_DivFix(i1, i6) | 0;
   HEAP32[i23 + 180 >> 2] = i20;
   i15 = i23 + 188 | 0;
   _cf2_computeDarkening(i6, i5, i20, i15, i9, HEAP8[i21 >> 0] | 0, i12);
   if (!(HEAP32[i23 + 184 >> 2] | 0)) i1 = (HEAP32[i15 >> 2] | 0) != 0 & 1; else i1 = 1;
   HEAP8[i23 + 141 >> 0] = i1;
   HEAP8[i23 + 192 >> 0] = 0;
   i17 = HEAP32[i13 >> 2] | 0;
   i19 = i23 + 200 | 0;
   _memset(i19 | 0, 0, 304) | 0;
   i20 = i23 + 196 | 0;
   HEAP32[i20 >> 2] = HEAP32[i23 + 48 >> 2];
   i18 = i23 + 208 | 0;
   i17 = i17 + 736 | 0;
   i1 = _FT_DivFix(HEAP32[(HEAP32[i17 >> 2] | 0) + 372 >> 2] | 0, 65536e3) | 0;
   HEAP32[i18 >> 2] = i1;
   i17 = HEAP32[i17 >> 2] | 0;
   HEAP32[i23 + 212 >> 2] = HEAP32[i17 + 376 >> 2] << 16;
   HEAP32[i23 + 216 >> 2] = HEAP32[i17 + 380 >> 2] << 16;
   i1 = HEAP8[i17 + 176 >> 0] | 0;
   i7 = i1 & 255;
   i8 = HEAP8[i17 + 177 >> 0] | 0;
   i9 = i8 & 255;
   i11 = HEAP8[i17 + 178 >> 0] | 0;
   i12 = i11 & 255;
   i10 = HEAP8[i17 + 179 >> 0] | 0;
   i16 = i10 & 255;
   L53 : do if ((HEAP32[i17 + 512 >> 2] | 0) == 1) {
    switch (i1 << 24 >> 24) {
    case 0:
     break;
    case 4:
     {
      if ((HEAP32[i17 + 180 >> 2] << 16 | 0) >= -7864320) {
       i14 = 38;
       break L53;
      }
      if ((HEAP32[i17 + 184 >> 2] << 16 | 0) >= -7864320) {
       i14 = 38;
       break L53;
      }
      if ((HEAP32[i17 + 188 >> 2] << 16 | 0) <= 57671680) {
       i14 = 38;
       break L53;
      }
      if ((HEAP32[i17 + 192 >> 2] << 16 | 0) <= 57671680) {
       i14 = 38;
       break L53;
      }
      break;
     }
    default:
     {
      i14 = 38;
      break L53;
     }
    }
    HEAP32[i23 + 252 >> 2] = -7864321;
    i21 = ((_FT_MulFix(-7864321, HEAP32[i20 >> 2] | 0) | 0) + 32768 & -65536) + -32768 | 0;
    HEAP32[i23 + 256 >> 2] = i21;
    i21 = HEAP32[i20 >> 2] | 0;
    HEAP32[i23 + 260 >> 2] = i21;
    HEAP32[i23 + 244 >> 2] = 49;
    i19 = (HEAP32[i15 >> 2] << 1) + 57671681 | 0;
    HEAP32[i23 + 232 >> 2] = i19;
    i21 = (_FT_MulFix(i19, i21) | 0) + 32768 & -65536 | 32768;
    HEAP32[i23 + 236 >> 2] = i21;
    HEAP32[i23 + 240 >> 2] = HEAP32[i20 >> 2];
    HEAP32[i23 + 224 >> 2] = 50;
    HEAP8[i23 + 205 >> 0] = 1;
    break L34;
   } else if (!(i1 << 24 >> 24)) i1 = 0; else i14 = 38; while (0);
   if ((i14 | 0) == 38) {
    i1 = 0;
    i6 = 0;
    i2 = HEAP32[i19 >> 2] | 0;
    do {
     HEAP32[i23 + 264 + (i2 * 20 | 0) >> 2] = HEAP32[i17 + 180 + (i6 << 2) >> 2] << 16;
     HEAP32[i23 + 264 + ((HEAP32[i19 >> 2] | 0) * 20 | 0) + 4 >> 2] = HEAP32[i17 + 180 + ((i6 | 1) << 2) >> 2] << 16;
     i2 = HEAP32[i19 >> 2] | 0;
     i3 = i23 + 264 + (i2 * 20 | 0) + 4 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i5 = i4 - (HEAP32[i23 + 264 + (i2 * 20 | 0) >> 2] | 0) | 0;
     if ((i5 | 0) >= 0) {
      if (!i6) {
       HEAP8[i23 + 264 + (i2 * 20 | 0) + 16 >> 0] = 1;
       i3 = HEAP32[i19 >> 2] | 0;
       i2 = i23 + 264 + (i3 * 20 | 0) + 4 | 0;
      } else {
       i2 = HEAP32[i15 >> 2] << 1;
       HEAP32[i3 >> 2] = i2 + i4;
       i3 = i23 + 264 + ((HEAP32[i19 >> 2] | 0) * 20 | 0) | 0;
       HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i2;
       HEAP8[i23 + 264 + ((HEAP32[i19 >> 2] | 0) * 20 | 0) + 16 >> 0] = 0;
       i3 = HEAP32[i19 >> 2] | 0;
       i2 = i23 + 264 + (i3 * 20 | 0) | 0;
      }
      HEAP32[i23 + 264 + (i3 * 20 | 0) + 8 >> 2] = HEAP32[i2 >> 2];
      i2 = (HEAP32[i19 >> 2] | 0) + 1 | 0;
      HEAP32[i19 >> 2] = i2;
      i1 = (i5 | 0) > (i1 | 0) ? i5 : i1;
     }
     i6 = i6 + 2 | 0;
    } while (i6 >>> 0 < i7 >>> 0);
   }
   if (!(i8 << 24 >> 24)) i13 = i1; else {
    i4 = 0;
    i2 = i1;
    i1 = HEAP32[i19 >> 2] | 0;
    do {
     HEAP32[i23 + 264 + (i1 * 20 | 0) >> 2] = HEAP32[i17 + 236 + (i4 << 2) >> 2] << 16;
     HEAP32[i23 + 264 + ((HEAP32[i19 >> 2] | 0) * 20 | 0) + 4 >> 2] = HEAP32[i17 + 236 + ((i4 | 1) << 2) >> 2] << 16;
     i1 = HEAP32[i19 >> 2] | 0;
     i3 = (HEAP32[i23 + 264 + (i1 * 20 | 0) + 4 >> 2] | 0) - (HEAP32[i23 + 264 + (i1 * 20 | 0) >> 2] | 0) | 0;
     if ((i3 | 0) >= 0) {
      HEAP8[i23 + 264 + (i1 * 20 | 0) + 16 >> 0] = 1;
      i1 = HEAP32[i19 >> 2] | 0;
      HEAP32[i23 + 264 + (i1 * 20 | 0) + 8 >> 2] = HEAP32[i23 + 264 + (i1 * 20 | 0) + 4 >> 2];
      i1 = (HEAP32[i19 >> 2] | 0) + 1 | 0;
      HEAP32[i19 >> 2] = i1;
      i2 = (i3 | 0) > (i2 | 0) ? i3 : i2;
     }
     i4 = i4 + 2 | 0;
    } while (i4 >>> 0 < i9 >>> 0);
    i13 = i2;
   }
   i14 = _FT_DivFix(65536, HEAP32[i20 >> 2] | 0) | 0;
   i1 = HEAP32[i19 >> 2] | 0;
   L82 : do if (i1 | 0) {
    i3 = (i11 & 255) > 2;
    i2 = i10 << 24 >> 24 != 0;
    i9 = i17 + 280 | 0;
    if ((i11 & 255) <= 1) {
     if (i2) i7 = 0; else break;
     while (1) {
      i5 = i23 + 264 + (i7 * 20 | 0) + 8 | 0;
      i6 = HEAP32[i5 >> 2] | 0;
      if (HEAP8[i23 + 264 + (i7 * 20 | 0) + 16 >> 0] | 0) {
       i4 = 0;
       i1 = 2147483647;
       do {
        i2 = HEAP32[i17 + 332 + ((i4 | 1) << 2) >> 2] << 16;
        i3 = i6 - i2 | 0;
        i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
        if ((i3 | 0) < (i1 | 0) & (i3 | 0) < (i14 | 0)) {
         HEAP32[i5 >> 2] = i2;
         if (!i3) break; else i1 = i3;
        }
        i4 = i4 + 2 | 0;
       } while (i4 >>> 0 < i16 >>> 0);
       i1 = HEAP32[i19 >> 2] | 0;
      }
      i7 = i7 + 1 | 0;
      if (i7 >>> 0 >= i1 >>> 0) break L82;
     }
    }
    if (!i2) {
     if (i3) i6 = 0; else {
      i4 = 0;
      while (1) {
       i2 = i23 + 264 + (i4 * 20 | 0) + 8 | 0;
       do if (HEAP8[i23 + 264 + (i4 * 20 | 0) + 16 >> 0] | 0) {
        i3 = HEAP32[i9 >> 2] << 16;
        i17 = (HEAP32[i2 >> 2] | 0) - i3 | 0;
        i17 = (i17 | 0) < 0 ? 0 - i17 | 0 : i17;
        if (!((i17 | 0) != 2147483647 & (i17 | 0) < (i14 | 0))) break;
        HEAP32[i2 >> 2] = i3;
        i1 = HEAP32[i19 >> 2] | 0;
       } while (0);
       i4 = i4 + 1 | 0;
       if (i4 >>> 0 >= i1 >>> 0) break L82;
      }
     }
     while (1) {
      i7 = i23 + 264 + (i6 * 20 | 0) + 8 | 0;
      i8 = HEAP32[i7 >> 2] | 0;
      L108 : do if (!(HEAP8[i23 + 264 + (i6 * 20 | 0) + 16 >> 0] | 0)) {
       i5 = HEAP32[i15 >> 2] << 1;
       i4 = 2;
       i1 = 2147483647;
       do {
        i2 = (HEAP32[i17 + 276 + (i4 << 2) >> 2] << 16) + i5 | 0;
        i3 = i8 - i2 | 0;
        i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
        if ((i3 | 0) < (i1 | 0) & (i3 | 0) < (i14 | 0)) {
         HEAP32[i7 >> 2] = i2;
         if (!i3) break L108; else i1 = i3;
        }
        i4 = i4 + 2 | 0;
       } while (i4 >>> 0 < i12 >>> 0);
      } else {
       i1 = HEAP32[i9 >> 2] << 16;
       i16 = i8 - i1 | 0;
       i16 = (i16 | 0) < 0 ? 0 - i16 | 0 : i16;
       if (!((i16 | 0) != 2147483647 & (i16 | 0) < (i14 | 0))) break;
       HEAP32[i7 >> 2] = i1;
      } while (0);
      i6 = i6 + 1 | 0;
      if (i6 >>> 0 >= (HEAP32[i19 >> 2] | 0) >>> 0) break L82;
     }
    }
    if (i3) i6 = 0; else {
     i5 = 0;
     while (1) {
      i6 = i23 + 264 + (i5 * 20 | 0) + 8 | 0;
      i7 = HEAP32[i6 >> 2] | 0;
      do if (HEAP8[i23 + 264 + (i5 * 20 | 0) + 16 >> 0] | 0) {
       i4 = 0;
       i1 = 2147483647;
       do {
        i2 = HEAP32[i17 + 332 + ((i4 | 1) << 2) >> 2] << 16;
        i3 = i7 - i2 | 0;
        i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
        if ((i3 | 0) < (i1 | 0) & (i3 | 0) < (i14 | 0)) {
         HEAP32[i6 >> 2] = i2;
         if (!i3) {
          i1 = 0;
          break;
         } else i1 = i3;
        }
        i4 = i4 + 2 | 0;
       } while (i4 >>> 0 < i16 >>> 0);
       i2 = HEAP32[i9 >> 2] << 16;
       i15 = i7 - i2 | 0;
       i15 = (i15 | 0) < 0 ? 0 - i15 | 0 : i15;
       if (!((i15 | 0) < (i1 | 0) & (i15 | 0) < (i14 | 0))) break;
       HEAP32[i6 >> 2] = i2;
      } while (0);
      i5 = i5 + 1 | 0;
      if (i5 >>> 0 >= (HEAP32[i19 >> 2] | 0) >>> 0) break L82;
     }
    }
    do {
     i7 = i23 + 264 + (i6 * 20 | 0) + 8 | 0;
     i8 = HEAP32[i7 >> 2] | 0;
     L133 : do if (!(HEAP8[i23 + 264 + (i6 * 20 | 0) + 16 >> 0] | 0)) {
      i5 = HEAP32[i15 >> 2] << 1;
      i4 = 2;
      i1 = 2147483647;
      do {
       i2 = (HEAP32[i17 + 276 + (i4 << 2) >> 2] << 16) + i5 | 0;
       i3 = i8 - i2 | 0;
       i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
       if ((i3 | 0) < (i1 | 0) & (i3 | 0) < (i14 | 0)) {
        HEAP32[i7 >> 2] = i2;
        if (!i3) break L133; else i1 = i3;
       }
       i4 = i4 + 2 | 0;
      } while (i4 >>> 0 < i12 >>> 0);
     } else {
      i4 = 0;
      i1 = 2147483647;
      do {
       i2 = HEAP32[i17 + 332 + ((i4 | 1) << 2) >> 2] << 16;
       i3 = i8 - i2 | 0;
       i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
       if ((i3 | 0) < (i1 | 0) & (i3 | 0) < (i14 | 0)) {
        HEAP32[i7 >> 2] = i2;
        if (!i3) {
         i1 = 0;
         break;
        } else i1 = i3;
       }
       i4 = i4 + 2 | 0;
      } while (i4 >>> 0 < i16 >>> 0);
      i2 = HEAP32[i9 >> 2] << 16;
      i11 = i8 - i2 | 0;
      i11 = (i11 | 0) < 0 ? 0 - i11 | 0 : i11;
      if (!((i11 | 0) < (i1 | 0) & (i11 | 0) < (i14 | 0))) break;
      HEAP32[i7 >> 2] = i2;
     } while (0);
     i6 = i6 + 1 | 0;
    } while (i6 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0);
   } while (0);
   if ((i13 | 0) > 0) {
    i17 = HEAP32[i18 >> 2] | 0;
    if ((i17 | 0) > (_FT_DivFix(65536, i13) | 0)) {
     i17 = _FT_DivFix(65536, i13) | 0;
     HEAP32[i18 >> 2] = i17;
    }
   }
   i2 = HEAP32[i20 >> 2] | 0;
   i1 = HEAP32[i18 >> 2] | 0;
   if ((i2 | 0) < (i1 | 0)) {
    HEAP8[i23 + 204 >> 0] = 1;
    i18 = 39322 - (_FT_MulDiv(39322, i2, i1) | 0) | 0;
    HEAP32[i23 + 220 >> 2] = (i18 | 0) < 32767 ? i18 : 32767;
   }
   if (HEAP8[i21 >> 0] | 0) HEAP32[i23 + 220 >> 2] = 0;
   if (!(HEAP32[i19 >> 2] | 0)) break;
   i2 = i23 + 220 | 0;
   i1 = 0;
   do {
    i18 = (HEAP8[i23 + 264 + (i1 * 20 | 0) + 16 >> 0] | 0) == 0;
    i17 = _FT_MulFix(HEAP32[i23 + 264 + (i1 * 20 | 0) + 8 >> 2] | 0, HEAP32[i20 >> 2] | 0) | 0;
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i23 + 264 + (i1 * 20 | 0) + 12 >> 2] = i17 + 32768 + (i18 ? i21 : 0 - i21 | 0) & -65536;
    i1 = i1 + 1 | 0;
   } while (i1 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0);
  } while (0);
  L163 : do if (!(HEAP32[i22 >> 2] | 0)) {
   i2 = i23 + 192 | 0;
   HEAP8[i2 >> 0] = 0;
   i3 = i23 + 116 | 0;
   i4 = i23 + 100 | 0;
   i1 = HEAP8[i23 + 141 >> 0] | 0;
   while (1) {
    i21 = HEAP32[i26 >> 2] | 0;
    HEAP32[i3 >> 2] = 0;
    _FT_GlyphLoader_Rewind(HEAP32[i21 + 12 >> 2] | 0);
    _cf2_interpT2CharString(i23, i25, i4, i24, 0, 0, 0, i27);
    if (HEAP32[i22 >> 2] | 0) break L163;
    if (!(i1 << 24 >> 24)) break;
    if ((HEAP32[i3 >> 2] | 0) > -1) break;
    HEAP8[i2 >> 0] = 1;
    i1 = 0;
   }
   i6 = HEAP32[i26 >> 2] | 0;
   i7 = HEAP32[i6 + 20 >> 2] | 0;
   do if (i7 | 0) {
    i8 = HEAP16[i7 >> 1] | 0;
    if (i8 << 16 >> 16 < 2) i10 = 0; else i10 = (HEAP16[(HEAP32[i7 + 12 >> 2] | 0) + ((i8 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
    i9 = i7 + 2 | 0;
    i5 = HEAP16[i9 >> 1] | 0;
    i1 = i5 << 16 >> 16;
    if (i5 << 16 >> 16 > 1) {
     i2 = HEAP32[i7 + 4 >> 2] | 0;
     i3 = i2 + (i1 << 3) + -8 | 0;
     i4 = (HEAP32[i7 + 8 >> 2] | 0) + i1 + -1 | 0;
     if ((HEAP32[i2 + (i10 << 3) >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) if ((HEAP32[i2 + (i10 << 3) + 4 >> 2] | 0) == (HEAP32[i3 + 4 >> 2] | 0)) {
      i1 = i5 + -1 << 16 >> 16;
      if ((HEAP8[i4 >> 0] | 0) == 1) HEAP16[i9 >> 1] = i1; else i1 = i5;
     } else i1 = i5; else i1 = i5;
    } else i1 = i5;
    i2 = i8 << 16 >> 16;
    if (i8 << 16 >> 16 > 0) {
     i3 = (i1 << 16 >> 16) + -1 | 0;
     if ((i10 | 0) == (i3 | 0)) {
      HEAP16[i7 >> 1] = i8 + -1 << 16 >> 16;
      HEAP16[i9 >> 1] = i1 + -1 << 16 >> 16;
      break;
     } else {
      HEAP16[(HEAP32[i7 + 12 >> 2] | 0) + (i2 + -1 << 1) >> 1] = i3;
      break;
     }
    }
   } while (0);
   _FT_GlyphLoader_Add(HEAP32[i6 + 12 >> 2] | 0);
   if (!(HEAP32[i22 >> 2] | 0)) {
    i1 = HEAP32[i27 >> 2] | 0;
    HEAP32[i22 >> 2] = 0;
    HEAP32[(HEAP32[i26 >> 2] | 0) + 552 >> 2] = i1 + 32768 >> 16;
    i1 = 0;
    break L20;
   }
  } while (0);
  i1 = 3;
 } while (0);
 i27 = i1;
 STACKTOP = i28;
 return i27 | 0;
}

function _FNT_Face_Init(i30, i38, i31, i1, i2) {
 i30 = i30 | 0;
 i38 = i38 | 0;
 i31 = i31 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i39 = 0;
 i39 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i32 = i39 + 136 | 0;
 i1 = i39 + 156 | 0;
 i3 = i39 + 148 | 0;
 i5 = i39 + 116 | 0;
 i6 = i39 + 96 | 0;
 i7 = i39 + 80 | 0;
 i22 = i39 + 64 | 0;
 i23 = i39 + 48 | 0;
 i24 = i39 + 40 | 0;
 i25 = i39 + 32 | 0;
 i26 = i39 + 24 | 0;
 i27 = i39 + 8 | 0;
 i36 = i39;
 i34 = i38 + 100 | 0;
 i33 = HEAP32[i34 >> 2] | 0;
 i35 = i38 + 104 | 0;
 i28 = HEAP32[i35 >> 2] | 0;
 i37 = i38 + 132 | 0;
 HEAP32[i37 >> 2] = 0;
 i21 = _FT_Stream_Seek(i28, 0) | 0;
 HEAP32[i32 >> 2] = i21;
 L1 : do if (!i21) {
  i21 = _FT_Stream_ReadFields(i28, 116776, i1) | 0;
  HEAP32[i32 >> 2] = i21;
  if (!i21) {
   HEAP32[i32 >> 2] = 2;
   L4 : do if ((HEAP16[i1 >> 1] | 0) == 23117) {
    i2 = i1 + 2 | 0;
    i21 = _FT_Stream_Seek(i28, HEAPU16[i2 >> 1] | 0) | 0;
    HEAP32[i32 >> 2] = i21;
    L6 : do if (!i21) {
     i21 = _FT_Stream_ReadFields(i28, 116796, i3) | 0;
     HEAP32[i32 >> 2] = i21;
     if (!i21) {
      HEAP32[i32 >> 2] = 2;
      L9 : do switch (HEAP16[i3 >> 1] | 0) {
      case 17742:
       {
        i1 = i3 + 2 | 0;
        i29 = _FT_Stream_Seek(i28, (HEAPU16[i1 >> 1] | 0) + (HEAPU16[i2 >> 1] | 0) | 0) | 0;
        HEAP32[i32 >> 2] = i29;
        do if (!i29) {
         i29 = _FT_Stream_EnterFrame(i28, (HEAPU16[i3 + 4 >> 1] | 0) - (HEAPU16[i1 >> 1] | 0) | 0) | 0;
         HEAP32[i32 >> 2] = i29;
         if (!i29) {
          i4 = _FT_Stream_GetUShortLE(i28) | 0;
          i1 = _FT_Stream_GetUShortLE(i28) | 0;
          L14 : do if (!(i1 << 16 >> 16)) {
           i1 = 0;
           i2 = 0;
          } else {
           i3 = i28 + 32 | 0;
           while (1) {
            i2 = _FT_Stream_GetUShortLE(i28) | 0;
            if (i1 << 16 >> 16 == -32760) break;
            HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (((i2 & 65535) * 12 | 0) + 4);
            i1 = _FT_Stream_GetUShortLE(i28) | 0;
            if (!(i1 << 16 >> 16)) {
             i1 = 0;
             i2 = 0;
             break L14;
            }
           }
           i29 = _FT_Stream_Pos(i28) | 0;
           i1 = i2;
           i2 = i29 + 4 + (HEAP32[i3 >> 2] | 0) - (HEAP32[i28 + 36 >> 2] | 0) | 0;
          } while (0);
          _FT_Stream_ExitFrame(i28);
          if (!((i2 | 0) != 0 & i1 << 16 >> 16 != 0)) {
           HEAP32[i32 >> 2] = 3;
           break;
          }
          i1 = i1 & 65535;
          if ((i1 * 118 | 0) >>> 0 > (HEAP32[i28 + 4 >> 2] | 0) >>> 0) {
           HEAP32[i32 >> 2] = 3;
           break;
          }
          HEAP32[i38 >> 2] = i1;
          if ((i1 | 0) <= (i31 | 0)) {
           HEAP32[i32 >> 2] = 6;
           break;
          }
          if ((i31 | 0) >= 0) {
           i29 = _ft_mem_alloc(i33, 172, i32) | 0;
           HEAP32[i37 >> 2] = i29;
           if (!(HEAP32[i32 >> 2] | 0)) {
            i29 = _FT_Stream_Seek(i28, i2 + (i31 * 12 | 0) | 0) | 0;
            HEAP32[i32 >> 2] = i29;
            do if (!i29) {
             i29 = _FT_Stream_EnterFrame(i28, 12) | 0;
             HEAP32[i32 >> 2] = i29;
             if (i29 | 0) break;
             i1 = i4 & 65535;
             i29 = ((_FT_Stream_GetUShortLE(i28) | 0) & 65535) << i1;
             HEAP32[HEAP32[i37 >> 2] >> 2] = i29;
             i1 = ((_FT_Stream_GetUShortLE(i28) | 0) & 65535) << i1;
             HEAP32[(HEAP32[i37 >> 2] | 0) + 164 >> 2] = i1;
             i1 = i28 + 32 | 0;
             HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 8;
             _FT_Stream_ExitFrame(i28);
             i1 = _fnt_font_load(HEAP32[i37 >> 2] | 0, i28) | 0;
             HEAP32[i32 >> 2] = i1;
             i29 = 74;
             break L9;
            } while (0);
            break L4;
           }
          }
         }
        } while (0);
        i29 = 88;
        break L1;
       }
      case 17744:
       {
        i1 = _FT_Stream_Seek(i28, HEAPU16[i2 >> 1] | 0) | 0;
        HEAP32[i32 >> 2] = i1;
        L38 : do if (!i1) {
         i1 = _FT_Stream_ReadFields(i28, 116820, i5) | 0;
         HEAP32[i32 >> 2] = i1;
         if (!i1) {
          if ((HEAP32[i5 >> 2] | 0) == 17744) if ((HEAP16[i5 + 4 >> 1] | 0) == 332) if ((HEAP16[i5 + 8 >> 1] | 0) == 224) if ((HEAP16[i5 + 10 >> 1] | 0) == 267) {
           HEAP32[i38 >> 2] = 0;
           i4 = i5 + 6 | 0;
           L46 : do if (HEAP16[i4 >> 1] | 0) {
            i3 = i5 + 12 | 0;
            i21 = i6 + 8 | 0;
            i2 = 0;
            while (1) {
             i1 = _FT_Stream_ReadFields(i28, 116872, i6) | 0;
             HEAP32[i32 >> 2] = i1;
             if (i1 | 0) {
              i2 = 2;
              break L38;
             }
             i2 = i2 + 1 << 16 >> 16;
             if ((HEAP32[i3 >> 2] | 0) == (HEAP32[i21 >> 2] | 0)) break;
             if ((i2 & 65535) >= (HEAPU16[i4 >> 1] | 0)) break L46;
            }
            i20 = i6 + 16 | 0;
            i1 = _FT_Stream_Seek(i28, HEAP32[i20 >> 2] | 0) | 0;
            HEAP32[i32 >> 2] = i1;
            if (i1 | 0) {
             i2 = 2;
             break L38;
            }
            i1 = _FT_Stream_ReadFields(i28, 116904, i7) | 0;
            HEAP32[i32 >> 2] = i1;
            if (i1 | 0) {
             i2 = 2;
             break L38;
            }
            i18 = HEAP32[i20 >> 2] | 0;
            i19 = i7 + 12 | 0;
            i8 = i7 + 14 | 0;
            if ((HEAPU16[i8 >> 1] | 0) == (0 - (HEAPU16[i19 >> 1] | 0) | 0)) {
             i2 = 0;
             i1 = 0;
             break L38;
            }
            i9 = i18 + 16 | 0;
            i10 = i24 + 4 | 0;
            i11 = i22 + 12 | 0;
            i12 = i22 + 14 | 0;
            i13 = i25 + 4 | 0;
            i14 = i23 + 12 | 0;
            i15 = i23 + 14 | 0;
            i16 = i26 + 4 | 0;
            i17 = i27 + 4 | 0;
            i7 = 0;
            i1 = 0;
            L56 : while (1) {
             i1 = _FT_Stream_Seek(i28, i9 + (i1 << 3) | 0) | 0;
             HEAP32[i32 >> 2] = i1;
             if (i1 | 0) {
              i2 = 2;
              break L38;
             }
             i1 = _FT_Stream_ReadFields(i28, 116936, i24) | 0;
             HEAP32[i32 >> 2] = i1;
             if (i1 | 0) {
              i2 = 2;
              break L38;
             }
             i1 = HEAP32[i10 >> 2] | 0;
             if ((i1 | 0) >= 0) {
              i29 = 45;
              break;
             }
             i2 = i1 & 2147483647;
             HEAP32[i10 >> 2] = i2;
             i2 = (HEAP32[i20 >> 2] | 0) + i2 | 0;
             i1 = _FT_Stream_Seek(i28, i2) | 0;
             HEAP32[i32 >> 2] = i1;
             if (i1 | 0) {
              i2 = 2;
              break L38;
             }
             i1 = _FT_Stream_ReadFields(i28, 116904, i22) | 0;
             HEAP32[i32 >> 2] = i1;
             if (i1 | 0) {
              i2 = 2;
              break L38;
             }
             if ((HEAPU16[i12 >> 1] | 0) != (0 - (HEAPU16[i11 >> 1] | 0) | 0)) {
              i6 = i2 + 16 | 0;
              i5 = 0;
              i1 = 0;
              do {
               i1 = _FT_Stream_Seek(i28, i6 + (i1 << 3) | 0) | 0;
               HEAP32[i32 >> 2] = i1;
               if (i1 | 0) {
                i2 = 2;
                break L38;
               }
               i1 = _FT_Stream_ReadFields(i28, 116936, i25) | 0;
               HEAP32[i32 >> 2] = i1;
               if (i1 | 0) {
                i2 = 2;
                break L38;
               }
               i1 = HEAP32[i13 >> 2] | 0;
               if ((i1 | 0) >= 0) {
                i29 = 53;
                break L56;
               }
               i2 = i1 & 2147483647;
               HEAP32[i13 >> 2] = i2;
               i2 = (HEAP32[i20 >> 2] | 0) + i2 | 0;
               i1 = _FT_Stream_Seek(i28, i2) | 0;
               HEAP32[i32 >> 2] = i1;
               if (i1 | 0) {
                i2 = 2;
                break L38;
               }
               i1 = _FT_Stream_ReadFields(i28, 116904, i23) | 0;
               HEAP32[i32 >> 2] = i1;
               if (i1 | 0) {
                i2 = 2;
                break L38;
               }
               if ((HEAPU16[i15 >> 1] | 0) != (0 - (HEAPU16[i14 >> 1] | 0) | 0)) {
                i4 = i2 + 16 | 0;
                i3 = 0;
                i1 = 0;
                do {
                 i1 = _FT_Stream_Seek(i28, i4 + (i1 << 3) | 0) | 0;
                 HEAP32[i32 >> 2] = i1;
                 if (i1 | 0) {
                  i2 = 2;
                  break L38;
                 }
                 i1 = _FT_Stream_ReadFields(i28, 116936, i26) | 0;
                 HEAP32[i32 >> 2] = i1;
                 if (i1 | 0) {
                  i2 = 2;
                  break L38;
                 }
                 if ((HEAP32[i13 >> 2] | 0) < 0) {
                  i29 = 61;
                  break L56;
                 }
                 if ((HEAP32[i24 >> 2] | 0) == 8) {
                  i1 = _FT_Stream_Seek(i28, (HEAP32[i16 >> 2] | 0) + i18 | 0) | 0;
                  HEAP32[i32 >> 2] = i1;
                  if (i1 | 0) {
                   i2 = 2;
                   break L38;
                  }
                  i1 = _FT_Stream_ReadFields(i28, 116952, i27) | 0;
                  HEAP32[i32 >> 2] = i1;
                  if (i1 | 0) {
                   i2 = 2;
                   break L38;
                  }
                  i1 = HEAP32[i38 >> 2] | 0;
                  if ((i1 | 0) == (i31 | 0)) {
                   i2 = _ft_mem_alloc(i33, 172, i32) | 0;
                   HEAP32[i37 >> 2] = i2;
                   i1 = HEAP32[i32 >> 2] | 0;
                   if (i1 | 0) {
                    i2 = 2;
                    break L38;
                   }
                   HEAP32[i2 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) - (HEAP32[i21 >> 2] | 0);
                   HEAP32[i2 + 164 >> 2] = HEAP32[i17 >> 2];
                   i1 = _fnt_font_load(i2, i28) | 0;
                   HEAP32[i32 >> 2] = i1;
                   if (i1 | 0) {
                    i2 = 13;
                    break L38;
                   }
                   i1 = HEAP32[i38 >> 2] | 0;
                  }
                  HEAP32[i38 >> 2] = i1 + 1;
                 }
                 i3 = i3 + 1 << 16 >> 16;
                 i1 = i3 & 65535;
                } while (i1 >>> 0 < ((HEAPU16[i15 >> 1] | 0) + (HEAPU16[i14 >> 1] | 0) | 0) >>> 0);
               }
               i5 = i5 + 1 << 16 >> 16;
               i1 = i5 & 65535;
              } while (i1 >>> 0 < ((HEAPU16[i12 >> 1] | 0) + (HEAPU16[i11 >> 1] | 0) | 0) >>> 0);
             }
             i7 = i7 + 1 << 16 >> 16;
             i1 = i7 & 65535;
             if (i1 >>> 0 >= ((HEAPU16[i8 >> 1] | 0) + (HEAPU16[i19 >> 1] | 0) | 0) >>> 0) {
              i2 = 0;
              i1 = 0;
              break L38;
             }
            }
            if ((i29 | 0) == 45) {
             HEAP32[i32 >> 2] = 3;
             i2 = 2;
             i1 = 3;
             break L38;
            } else if ((i29 | 0) == 53) {
             HEAP32[i32 >> 2] = 3;
             i2 = 2;
             i1 = 3;
             break L38;
            } else if ((i29 | 0) == 61) {
             HEAP32[i32 >> 2] = 3;
             i2 = 2;
             i1 = 3;
             break L38;
            }
           } while (0);
           HEAP32[i32 >> 2] = 3;
           i2 = 2;
           i1 = 3;
           break;
          }
          HEAP32[i32 >> 2] = 3;
          i2 = 2;
          i1 = 3;
         } else i2 = 2;
        } else i2 = 2; while (0);
        if (!i2) i29 = 74; else switch (i2 & 15) {
        case 2:
         {
          i29 = 88;
          break L1;
         }
        case 13:
         break;
        default:
         {
          i1 = 0;
          break L1;
         }
        }
        break;
       }
      default:
       {
        i1 = 2;
        i29 = 74;
       }
      } while (0);
      do if ((i29 | 0) == 74) {
       i2 = HEAP32[i38 >> 2] | 0;
       if (!i2) {
        HEAP32[i32 >> 2] = 3;
        break L6;
       }
       if ((i2 | 0) > (i31 | 0)) break; else {
        HEAP32[i32 >> 2] = 6;
        break L6;
       }
      } while (0);
      if (!i1) {
       i29 = 88;
       break L1;
      } else break L4;
     }
    } while (0);
    i29 = 88;
    break L1;
   } while (0);
   i1 = HEAP32[i34 >> 2] | 0;
   i2 = HEAP32[i35 >> 2] | 0;
   i3 = HEAP32[i37 >> 2] | 0;
   if (!i3) i29 = 88; else {
    i4 = i3 + 160 | 0;
    if (HEAP32[i4 >> 2] | 0) _FT_Stream_ReleaseFrame(i2, i4);
    i29 = i3 + 168 | 0;
    _ft_mem_free(i1, HEAP32[i29 >> 2] | 0);
    HEAP32[i29 >> 2] = 0;
    _ft_mem_free(i1, i3);
    HEAP32[i37 >> 2] = 0;
    i29 = 88;
   }
  } else i29 = 88;
 } else i29 = 88; while (0);
 if ((i29 | 0) == 88) i1 = HEAP32[i32 >> 2] | 0;
 HEAP32[i36 >> 2] = i1;
 i3 = (i31 | 0) < 0;
 if (i3 & (i1 | 0) == 0) {
  i38 = 0;
  STACKTOP = i39;
  return i38 | 0;
 }
 do if ((i1 & 255 | 0) == 2) {
  i1 = _ft_mem_alloc(i33, 172, i36) | 0;
  HEAP32[i37 >> 2] = i1;
  i2 = HEAP32[i36 >> 2] | 0;
  if (i2 | 0) {
   i38 = i2;
   STACKTOP = i39;
   return i38 | 0;
  }
  HEAP32[i38 >> 2] = 1;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 164 >> 2] = HEAP32[i30 + 4 >> 2];
  i30 = _fnt_font_load(i1, i30) | 0;
  HEAP32[i36 >> 2] = i30;
  if (!i30) {
   if ((i31 | 0) > 0) {
    HEAP32[i36 >> 2] = 6;
    break;
   }
   if (i3) {
    i38 = 0;
    STACKTOP = i39;
    return i38 | 0;
   } else i29 = 97;
  }
 } else if (!i1) i29 = 97; else if (!i38) {
  i38 = i1;
  STACKTOP = i39;
  return i38 | 0;
 } while (0);
 do if ((i29 | 0) == 97) {
  i7 = HEAP32[i37 >> 2] | 0;
  HEAP32[i38 + 4 >> 2] = i31;
  i1 = i38 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i2 | 18;
  i3 = i7 + 100 | 0;
  if ((HEAP16[i3 >> 1] | 0) == (HEAP16[i7 + 102 >> 1] | 0)) HEAP32[i1 >> 2] = i2 | 22;
  if (HEAP8[i7 + 86 >> 0] | 0) {
   i31 = i38 + 12 | 0;
   HEAP32[i31 >> 2] = HEAP32[i31 >> 2] | 1;
  }
  if ((HEAPU16[i7 + 90 >> 1] | 0) > 799) {
   i31 = i38 + 12 | 0;
   HEAP32[i31 >> 2] = HEAP32[i31 >> 2] | 2;
  }
  i6 = _ft_mem_realloc(i33, 16, 0, 1, 0, i36) | 0;
  HEAP32[i38 + 32 >> 2] = i6;
  if (!(HEAP32[i36 >> 2] | 0)) {
   HEAP32[i38 + 28 >> 2] = 1;
   HEAP16[i6 + 2 >> 1] = HEAP16[i3 >> 1] | 0;
   i4 = i7 + 96 | 0;
   HEAP16[i6 >> 1] = (HEAPU16[i7 + 84 >> 1] | 0) + (HEAPU16[i4 >> 1] | 0);
   i31 = HEAPU16[i7 + 74 >> 1] << 6;
   i1 = i6 + 4 | 0;
   HEAP32[i1 >> 2] = i31;
   i5 = HEAP16[i7 + 78 >> 1] | 0;
   i2 = HEAP16[i7 + 76 >> 1] | 0;
   i2 = i2 << 16 >> 16 ? i2 & 65535 : 72;
   i3 = i6 + 12 | 0;
   i31 = (_FT_MulDiv(i31, i2, 72) | 0) + 32 & -64;
   HEAP32[i3 >> 2] = i31;
   i4 = HEAPU16[i4 >> 1] << 6;
   if ((i31 | 0) > (i4 | 0)) {
    HEAP32[i3 >> 2] = i4;
    i31 = _FT_MulDiv(i4, 72, i2) | 0;
    HEAP32[i1 >> 2] = i31;
    i1 = i31;
   } else i1 = HEAP32[i1 >> 2] | 0;
   i1 = (_FT_MulDiv(i1, i5 << 16 >> 16 ? i5 & 65535 : 72, 72) | 0) + 32 & -64;
   HEAP32[i6 + 8 >> 2] = i1;
   i1 = i32 + 4 | 0;
   i31 = i1;
   HEAP32[i31 >> 2] = 0;
   HEAP32[i31 + 4 >> 2] = 0;
   HEAP32[i32 >> 2] = i38;
   if ((HEAP8[i7 + 92 >> 0] | 0) == 77) {
    HEAP32[i1 >> 2] = 1634889070;
    HEAP16[i32 + 8 >> 1] = 1;
   }
   i32 = _FT_CMap_New(12752, 0, i32, 0) | 0;
   HEAP32[i36 >> 2] = i32;
   if (i32 | 0) break;
   if (HEAP32[i38 + 36 >> 2] | 0) HEAP32[i38 + 92 >> 2] = HEAP32[HEAP32[i38 + 40 >> 2] >> 2];
   i1 = HEAP8[i7 + 105 >> 0] | 0;
   i2 = HEAP8[i7 + 104 >> 0] | 0;
   if ((i1 & 255) < (i2 & 255)) {
    HEAP32[i36 >> 2] = 3;
    break;
   }
   HEAP32[i38 + 16 >> 2] = (i1 & 255) + 2 - (i2 & 255);
   i4 = i7 + 116 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   i2 = HEAP32[i7 + 8 >> 2] | 0;
   if (i2 >>> 0 <= i1 >>> 0) {
    HEAP32[i36 >> 2] = 3;
    break;
   }
   i1 = i2 - i1 | 0;
   i2 = _ft_mem_alloc(i33, i1 + 1 | 0, i36) | 0;
   i3 = i7 + 168 | 0;
   HEAP32[i3 >> 2] = i2;
   if (!(HEAP32[i36 >> 2] | 0)) {
    _memcpy(i2 | 0, (HEAP32[i7 + 160 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) | 0, i1 | 0) | 0;
    HEAP8[(HEAP32[i3 >> 2] | 0) + i1 >> 0] = 0;
    i32 = HEAP32[i3 >> 2] | 0;
    i1 = _ft_mem_realloc(i33, 1, i1, (_strlen(i32) | 0) + 1 | 0, i32, i36) | 0;
    HEAP32[i3 >> 2] = i1;
    if (!(HEAP32[i36 >> 2] | 0)) {
     HEAP32[i38 + 20 >> 2] = i1;
     i2 = i38 + 24 | 0;
     HEAP32[i2 >> 2] = 281615;
     i38 = HEAP32[i38 + 12 >> 2] | 0;
     i1 = (i38 & 1 | 0) != 0;
     if (!(i38 & 2)) if (i1) i1 = 355515; else {
      i38 = 0;
      STACKTOP = i39;
      return i38 | 0;
     } else i1 = i1 ? 281034 : 355510;
     HEAP32[i2 >> 2] = i1;
     i38 = 0;
     STACKTOP = i39;
     return i38 | 0;
    }
   }
  }
 } while (0);
 i4 = HEAP32[i34 >> 2] | 0;
 i1 = HEAP32[i35 >> 2] | 0;
 i2 = HEAP32[i37 >> 2] | 0;
 if (i2 | 0) {
  i3 = i2 + 160 | 0;
  if (HEAP32[i3 >> 2] | 0) _FT_Stream_ReleaseFrame(i1, i3);
  i35 = i2 + 168 | 0;
  _ft_mem_free(i4, HEAP32[i35 >> 2] | 0);
  HEAP32[i35 >> 2] = 0;
  _ft_mem_free(i4, i2);
  HEAP32[i37 >> 2] = 0;
 }
 i37 = i38 + 32 | 0;
 _ft_mem_free(i4, HEAP32[i37 >> 2] | 0);
 HEAP32[i37 >> 2] = 0;
 HEAP32[i38 + 28 >> 2] = 0;
 i38 = HEAP32[i36 >> 2] | 0;
 STACKTOP = i39;
 return i38 | 0;
}

function _cff_glyph_load(i39, i2, i3, i1) {
 i39 = i39 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i40 = 0;
 i40 = STACKTOP;
 STACKTOP = STACKTOP + 800 | 0;
 i38 = i40 + 776 | 0;
 i36 = i40 + 32 | 0;
 i34 = i40 + 16 | 0;
 i35 = i40 + 8 | 0;
 i31 = i40;
 i29 = i40 + 792 | 0;
 if (!i39) {
  i39 = 37;
  STACKTOP = i40;
  return i39 | 0;
 }
 i5 = i1 | 3;
 i4 = (i2 | 0) == 0 ? i5 : i1;
 i32 = (i4 & 1 | 0) == 0 ? i2 : 0;
 do if (!i32) i27 = HEAP32[i39 + 4 >> 2] | 0; else {
  i1 = HEAP32[i39 + 4 >> 2] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) {
   i27 = i1;
   break;
  } else {
   i39 = 35;
   STACKTOP = i40;
   return i39 | 0;
  }
 } while (0);
 i22 = i27 + 656 | 0;
 i24 = HEAP32[i22 >> 2] | 0;
 if ((HEAP32[i24 + 1456 >> 2] | 0) == 65535) i37 = 11; else {
  i1 = HEAP32[i24 + 1164 >> 2] | 0;
  if (!i1) i37 = 11; else if (!i3) {
   i3 = 0;
   i37 = 12;
  } else if ((HEAP32[i24 + 1168 >> 2] | 0) >>> 0 < i3 >>> 0) i1 = 6; else {
   i1 = HEAP16[i1 + (i3 << 1) >> 1] | 0;
   if (!(i1 << 16 >> 16)) i1 = 6; else {
    i3 = i1 & 65535;
    i37 = 12;
   }
  }
 }
 if ((i37 | 0) == 11) if ((HEAP32[i24 + 12 >> 2] | 0) >>> 0 > i3 >>> 0) i37 = 12; else i1 = 6;
 L18 : do if ((i37 | 0) == 12) {
  i33 = (i4 & 1024 | 0) == 0 ? i4 : i5;
  i28 = i39 + 164 | 0;
  HEAP32[i28 >> 2] = 65536;
  i30 = i39 + 168 | 0;
  HEAP32[i30 >> 2] = 65536;
  i26 = (i32 | 0) != 0;
  do if (i26) {
   HEAP32[i28 >> 2] = HEAP32[i32 + 16 >> 2];
   HEAP32[i30 >> 2] = HEAP32[i32 + 20 >> 2];
   i2 = HEAP32[i32 >> 2] | 0;
   i1 = HEAP32[i2 + 532 >> 2] | 0;
   i2 = HEAP32[i2 + 104 >> 2] | 0;
   i4 = HEAP32[i32 + 44 >> 2] | 0;
   if ((i4 | 0) != -1) if ((i33 & 8 | 0) == 0 & (HEAP32[i1 + 96 >> 2] | 0) != 0) {
    if (FUNCTION_TABLE_iiiiiiii[HEAP32[i1 + 72 >> 2] & 1](i27, i4, i3, i33, i2, i39 + 76 | 0, i38) | 0) break;
    HEAP16[i39 + 110 >> 1] = 0;
    HEAP16[i39 + 108 >> 1] = 0;
    HEAP32[i39 + 24 >> 2] = HEAPU16[i38 + 2 >> 1] << 6;
    HEAP32[i39 + 28 >> 2] = HEAPU16[i38 >> 1] << 6;
    i32 = HEAP16[i38 + 4 >> 1] | 0;
    HEAP32[i39 + 32 >> 2] = i32 << 16 >> 16 << 6;
    i36 = HEAP16[i38 + 6 >> 1] | 0;
    HEAP32[i39 + 36 >> 2] = i36 << 16 >> 16 << 6;
    HEAP32[i39 + 40 >> 2] = HEAPU16[i38 + 8 >> 1] << 6;
    i34 = HEAP16[i38 + 10 >> 1] | 0;
    HEAP32[i39 + 44 >> 2] = i34 << 16 >> 16 << 6;
    i1 = HEAP16[i38 + 12 >> 1] | 0;
    HEAP32[i39 + 48 >> 2] = i1 << 16 >> 16 << 6;
    HEAP32[i39 + 52 >> 2] = HEAPU16[i38 + 14 >> 1] << 6;
    HEAP32[i39 + 72 >> 2] = 1651078259;
    i38 = (i33 & 16 | 0) == 0;
    HEAP32[i39 + 100 >> 2] = (i38 ? i32 : i34) << 16 >> 16;
    HEAP32[i39 + 104 >> 2] = (i38 ? i36 : i1) << 16 >> 16;
    i1 = i27 + 532 | 0;
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 112 >> 2] & 31](i27, 0, i3, i31, i35);
    HEAP32[i39 + 56 >> 2] = HEAPU16[i35 >> 1];
    if (!(HEAP8[i27 + 292 >> 0] | 0)) i37 = 20; else if (!(HEAP16[i27 + 330 >> 1] | 0)) i37 = 20; else {
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 112 >> 2] & 31](i27, 1, i3, i31, i35);
     i1 = HEAPU16[i35 >> 1] | 0;
    }
    do if ((i37 | 0) == 20) if ((HEAP16[i27 + 364 >> 1] | 0) == -1) {
     i1 = (HEAP16[i27 + 220 >> 1] | 0) - (HEAP16[i27 + 222 >> 1] | 0) | 0;
     break;
    } else {
     i1 = (HEAP16[i27 + 434 >> 1] | 0) - (HEAP16[i27 + 436 >> 1] | 0) | 0;
     break;
    } while (0);
    HEAP32[i39 + 60 >> 2] = i1;
    i1 = 0;
    break L18;
   }
  } while (0);
  if (!(i33 & 16384)) {
   i9 = HEAP32[i24 + 1896 >> 2] | 0;
   if (!i9) {
    i16 = i24 + 1372 | 0;
    HEAP32[i34 >> 2] = HEAP32[i16 >> 2];
    HEAP32[i34 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
    HEAP32[i34 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
    HEAP32[i34 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
    i16 = 0;
    i2 = HEAP32[i24 + 1396 >> 2] | 0;
    i4 = HEAP32[i24 + 1400 >> 2] | 0;
   } else {
    L41 : do switch (HEAP8[i24 + 2924 >> 0] | 0) {
    case 0:
     {
      i1 = HEAP8[(HEAP32[i24 + 2932 >> 2] | 0) + i3 >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = i24 + 2940 | 0;
      i5 = i24 + 2944 | 0;
      if ((i3 - (HEAP32[i4 >> 2] | 0) | 0) >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0) {
       i1 = HEAP8[i24 + 2948 >> 0] | 0;
       break L41;
      }
      i2 = HEAP32[i24 + 2932 >> 2] | 0;
      i6 = i2 + (HEAP32[i24 + 2936 >> 2] | 0) | 0;
      i1 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
      i2 = i2 + 2 | 0;
      while (1) {
       if (i1 >>> 0 > i3 >>> 0) {
        i1 = 0;
        break L41;
       }
       i7 = i2 + 3 | 0;
       i8 = HEAPU8[i2 + 1 >> 0] << 8 | HEAPU8[i2 + 2 >> 0];
       if (i8 >>> 0 > i3 >>> 0) break;
       if (i7 >>> 0 < i6 >>> 0) {
        i1 = i8;
        i2 = i7;
       } else {
        i1 = 0;
        break L41;
       }
      }
      i25 = HEAP8[i2 >> 0] | 0;
      HEAP32[i4 >> 2] = i1;
      HEAP32[i5 >> 2] = i8 - i1;
      HEAP8[i24 + 2948 >> 0] = i25;
      i1 = i25;
      break;
     }
    default:
     i1 = 0;
    } while (0);
    i5 = HEAP32[i24 + 1392 >> 2] | 0;
    i4 = HEAP32[i24 + 1900 + ((((i1 & 255) >>> 0 < i9 >>> 0 ? i1 : i9 + 255 & 255) & 255) << 2) >> 2] | 0;
    i1 = HEAP32[i4 + 68 >> 2] | 0;
    i2 = i4 + 48 | 0;
    HEAP32[i34 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i34 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i34 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i34 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
    i2 = HEAP32[i4 + 72 >> 2] | 0;
    i4 = HEAP32[i4 + 76 >> 2] | 0;
    if ((i5 | 0) == (i1 | 0)) i16 = 0; else {
     i16 = _FT_MulDiv(HEAP32[i28 >> 2] | 0, i5, i1) | 0;
     HEAP32[i28 >> 2] = i16;
     i16 = _FT_MulDiv(HEAP32[i30 >> 2] | 0, i5, i1) | 0;
     HEAP32[i30 >> 2] = i16;
     i16 = 1;
    }
   }
   i25 = i39 + 108 | 0;
   i23 = i39 + 110 | 0;
   HEAP16[i23 >> 1] = 0;
   HEAP16[i25 >> 1] = 0;
   i15 = (i33 >>> 1 & 1 ^ 1) & 255;
   i20 = i33 & 1;
   i21 = (i20 | 0) != 0;
   i14 = i39 + 160 | 0;
   HEAP8[i14 >> 0] = i15;
   HEAP8[i39 + 161 >> 0] = i20 ^ 1;
   i20 = i39 + 72 | 0;
   HEAP32[i20 >> 2] = 1869968492;
   i7 = HEAP32[i22 >> 2] | 0;
   i6 = i36 + 12 | 0;
   _memset(i6 + 12 | 0, 0, 716) | 0;
   HEAP8[i36 + 65 >> 0] = 1;
   i8 = i36 + 4 | 0;
   HEAP32[i8 >> 2] = i27;
   i18 = i36 + 8 | 0;
   HEAP32[i18 >> 2] = i39;
   HEAP32[i36 >> 2] = HEAP32[i27 + 100 >> 2];
   i1 = i39 + 156 | 0;
   i5 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
   HEAP32[i6 >> 2] = i5;
   HEAP32[i36 + 16 >> 2] = i5 + 20;
   HEAP32[i36 + 20 >> 2] = i5 + 56;
   _FT_GlyphLoader_Rewind(i5);
   i5 = i36 + 72 | 0;
   HEAP32[i5 >> 2] = 0;
   i6 = i36 + 68 | 0;
   HEAP32[i6 >> 2] = 0;
   if (i26 & i15 << 24 >> 24 != 0) {
    HEAP32[i5 >> 2] = HEAP32[HEAP32[i32 + 40 >> 2] >> 2];
    HEAP32[i6 >> 2] = HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2];
   }
   i13 = i36 + 24 | 0;
   HEAP32[i13 >> 2] = 0;
   HEAP32[i13 + 4 >> 2] = 0;
   HEAP32[i13 + 8 >> 2] = 0;
   HEAP32[i13 + 12 >> 2] = 0;
   HEAP32[i13 + 16 >> 2] = 0;
   HEAP32[i13 + 20 >> 2] = 0;
   i13 = i36 + 76 | 0;
   HEAP32[i13 >> 2] = i7;
   i19 = HEAP32[i7 + 92 >> 2] | 0;
   HEAP32[i36 + 700 >> 2] = i19;
   HEAP32[i36 + 716 >> 2] = HEAP32[i7 + 1308 >> 2];
   HEAP32[i36 + 708 >> 2] = (HEAP32[i7 + 1368 >> 2] | 0) == 1 ? 0 : i19 >>> 0 < 1240 ? 107 : i19 >>> 0 < 33900 ? 1131 : 32768;
   HEAP32[i36 + 728 >> 2] = i33 >>> 16 & 15;
   if (i33 & 256 | 0) HEAP8[i36 + 561 >> 0] = 1;
   i19 = i33 & 1024;
   HEAP8[i36 + 66 >> 0] = 0;
   i17 = i27 + 128 | 0;
   i1 = HEAP32[(HEAP32[i17 >> 2] | 0) + 48 >> 2] | 0;
   if (!i1) i1 = _cff_index_access_element((HEAP32[i22 >> 2] | 0) + 1176 | 0, i3, i35, i31) | 0; else {
    i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i1 >> 2] >> 2] & 127](HEAP32[i1 + 4 >> 2] | 0, i3, i38) | 0;
    HEAP32[i35 >> 2] = HEAP32[i38 >> 2];
    HEAP32[i31 >> 2] = HEAP32[i38 + 4 >> 2];
   }
   do if (!i1) {
    i11 = HEAP32[(HEAP32[i8 >> 2] | 0) + 656 >> 2] | 0;
    i12 = HEAP32[i11 + 1896 >> 2] | 0;
    if (!i12) i1 = i11 + 1324 | 0; else {
     L69 : do switch (HEAP8[i11 + 2924 >> 0] | 0) {
     case 0:
      {
       i1 = HEAP8[(HEAP32[i11 + 2932 >> 2] | 0) + i3 >> 0] | 0;
       break;
      }
     case 3:
      {
       i6 = i11 + 2940 | 0;
       i7 = i11 + 2944 | 0;
       if ((i3 - (HEAP32[i6 >> 2] | 0) | 0) >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
        i1 = HEAP8[i11 + 2948 >> 0] | 0;
        break L69;
       }
       i5 = HEAP32[i11 + 2932 >> 2] | 0;
       i8 = i5 + (HEAP32[i11 + 2936 >> 2] | 0) | 0;
       i1 = HEAPU8[i5 >> 0] << 8 | HEAPU8[i5 + 1 >> 0];
       i5 = i5 + 2 | 0;
       while (1) {
        if (i1 >>> 0 > i3 >>> 0) {
         i1 = 0;
         break L69;
        }
        i9 = i5 + 3 | 0;
        i10 = HEAPU8[i5 + 1 >> 0] << 8 | HEAPU8[i5 + 2 >> 0];
        if (i10 >>> 0 > i3 >>> 0) break;
        if (i9 >>> 0 < i8 >>> 0) {
         i1 = i10;
         i5 = i9;
        } else {
         i1 = 0;
         break L69;
        }
       }
       i9 = HEAP8[i5 >> 0] | 0;
       HEAP32[i6 >> 2] = i1;
       HEAP32[i7 >> 2] = i10 - i1;
       HEAP8[i11 + 2948 >> 0] = i9;
       i1 = i9;
       break;
      }
     default:
      i1 = 0;
     } while (0);
     i5 = i1 & 255;
     if (i5 >>> 0 >= i12 >>> 0) {
      i1 = 3;
      break;
     }
     i1 = HEAP32[i11 + 1900 + (i5 << 2) >> 2] | 0;
     if (i26 & (HEAP32[i36 + 68 >> 2] | 0) != 0) HEAP32[i36 + 72 >> 2] = HEAP32[(HEAP32[i32 + 40 >> 2] | 0) + 4 + (i5 << 2) >> 2];
    }
    i7 = HEAP32[i1 + 544 >> 2] | 0;
    HEAP32[i36 + 696 >> 2] = i7;
    HEAP32[i36 + 712 >> 2] = HEAP32[i1 + 568 >> 2];
    HEAP32[i36 + 704 >> 2] = (HEAP32[(HEAP32[i13 >> 2] | 0) + 1368 >> 2] | 0) == 1 ? 0 : i7 >>> 0 < 1240 ? 107 : i7 >>> 0 < 33900 ? 1131 : 32768;
    i7 = i36 + 552 | 0;
    HEAP32[i7 >> 2] = HEAP32[i1 + 528 >> 2];
    HEAP32[i36 + 556 >> 2] = HEAP32[i1 + 532 >> 2];
    HEAP32[i36 + 736 >> 2] = i1;
    i6 = HEAP32[i31 >> 2] | 0;
    i1 = _cf2_decoder_parse_charstrings(i36, HEAP32[i35 >> 2] | 0, i6) | 0;
    if ((i1 & 255 | 0) == 164) {
     HEAP8[i14 >> 0] = 0;
     i1 = _cf2_decoder_parse_charstrings(i36, HEAP32[i35 >> 2] | 0, i6) | 0;
     i15 = 0;
     i10 = 1;
    } else i10 = i16;
    i5 = HEAP32[(HEAP32[i17 >> 2] | 0) + 48 >> 2] | 0;
    if (!i5) {
     i5 = HEAP32[i22 >> 2] | 0;
     if (!(HEAP32[i5 + 1204 >> 2] | 0)) _FT_Stream_ReleaseFrame(HEAP32[i5 + 1176 >> 2] | 0, i35);
    } else {
     HEAP32[i38 >> 2] = HEAP32[i35 >> 2];
     HEAP32[i38 + 4 >> 2] = i6;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] & 63](HEAP32[i5 + 4 >> 2] | 0, i38);
    }
    if (!i1) {
     i1 = HEAP32[(HEAP32[i17 >> 2] | 0) + 48 >> 2] | 0;
     if (!i1) {
      i5 = HEAP32[i24 + 1200 >> 2] | 0;
      if (i5 | 0) {
       i5 = (HEAP32[i24 + 1204 >> 2] | 0) + (HEAP32[i5 + (i3 << 2) >> 2] | 0) + -1 | 0;
       i37 = 69;
      }
     } else {
      i6 = 0;
      i5 = 0;
      i37 = 69;
     }
     if ((i37 | 0) == 69) {
      HEAP32[i39 + 136 >> 2] = i5;
      HEAP32[i39 + 140 >> 2] = i6;
     }
     i5 = HEAP32[i18 >> 2] | 0;
     if (i5) {
      i1 = i5 + 108 | 0;
      i24 = HEAP32[i36 + 16 >> 2] | 0;
      HEAP32[i1 >> 2] = HEAP32[i24 >> 2];
      HEAP32[i1 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
      HEAP32[i1 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
      HEAP32[i1 + 12 >> 2] = HEAP32[i24 + 12 >> 2];
      HEAP32[i1 + 16 >> 2] = HEAP32[i24 + 16 >> 2];
      i1 = HEAP32[(HEAP32[i17 >> 2] | 0) + 48 >> 2] | 0;
     }
     do if (i1 | 0) {
      i5 = HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0;
      if (!i5) break;
      i16 = i36 + 32 | 0;
      HEAP32[i38 >> 2] = HEAP32[i16 >> 2];
      HEAP32[i38 + 4 >> 2] = 0;
      i18 = i36 + 40 | 0;
      i17 = i38 + 8 | 0;
      HEAP32[i17 >> 2] = HEAP32[i18 >> 2];
      i24 = i36 + 44 | 0;
      i22 = i38 + 12 | 0;
      HEAP32[i22 >> 2] = HEAP32[i24 >> 2];
      i1 = FUNCTION_TABLE_iiiii[i5 & 127](HEAP32[i1 + 4 >> 2] | 0, i3, 0, i38) | 0;
      HEAP32[i16 >> 2] = HEAP32[i38 >> 2];
      HEAP32[i18 >> 2] = HEAP32[i17 >> 2];
      HEAP32[i24 >> 2] = HEAP32[i22 >> 2];
      if (i1 | 0) break L18;
     } while (0);
     if (i19 | 0) {
      i1 = HEAP32[i39 + 156 >> 2] | 0;
      HEAP32[i39 + 32 >> 2] = HEAP32[i36 + 32 >> 2];
      HEAP32[i39 + 40 >> 2] = HEAP32[i7 >> 2];
      i39 = i1 + 12 | 0;
      HEAP32[i39 >> 2] = HEAP32[i34 >> 2];
      HEAP32[i39 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
      HEAP32[i39 + 8 >> 2] = HEAP32[i34 + 8 >> 2];
      HEAP32[i39 + 12 >> 2] = HEAP32[i34 + 12 >> 2];
      HEAP32[i1 + 28 >> 2] = i2;
      HEAP32[i1 + 32 >> 2] = i4;
      HEAP8[i1 + 8 >> 0] = 1;
      i1 = 0;
      break L18;
     }
     i8 = i39 + 24 | 0;
     i9 = i27 + 250 | 0;
     if (!(HEAP16[i9 >> 1] | 0)) i1 = HEAP32[i7 >> 2] | 0; else {
      HEAP16[i31 >> 1] = 0;
      HEAP16[i29 >> 1] = 0;
      FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i27 + 532 >> 2] | 0) + 112 >> 2] & 31](i27, 0, i3, i31, i29);
      i1 = HEAPU16[i29 >> 1] | 0;
      HEAP32[i39 + 32 >> 2] = HEAP16[i31 >> 1];
     }
     i7 = i39 + 40 | 0;
     HEAP32[i7 >> 2] = i1;
     HEAP32[i39 + 56 >> 2] = i1;
     HEAP8[(HEAP32[i39 + 156 >> 2] | 0) + 8 >> 0] = 0;
     do if (!(HEAP8[i27 + 292 >> 0] | 0)) i37 = 84; else {
      if (!(HEAP16[i27 + 330 >> 1] | 0)) {
       i37 = 84;
       break;
      }
      HEAP16[i31 >> 1] = 0;
      HEAP16[i29 >> 1] = 0;
      FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i27 + 532 >> 2] | 0) + 112 >> 2] & 31](i27, 1, i3, i31, i29);
      HEAP32[i39 + 48 >> 2] = HEAP16[i31 >> 1];
      i1 = HEAPU16[i29 >> 1] | 0;
      i5 = i39 + 52 | 0;
      HEAP32[i5 >> 2] = i1;
      i6 = 1;
     } while (0);
     if ((i37 | 0) == 84) {
      if ((HEAP16[i27 + 364 >> 1] | 0) == -1) {
       i3 = HEAP16[i27 + 220 >> 1] | 0;
       i1 = i27 + 222 | 0;
      } else {
       i3 = HEAP16[i27 + 434 >> 1] | 0;
       i1 = i27 + 436 | 0;
      }
      i1 = i3 - (HEAP16[i1 >> 1] | 0) | 0;
      i5 = i39 + 52 | 0;
      HEAP32[i5 >> 2] = i1;
      i6 = 0;
     }
     HEAP32[i39 + 60 >> 2] = i1;
     HEAP32[i20 >> 2] = 1869968492;
     i3 = i39 + 124 | 0;
     HEAP32[i3 >> 2] = 0;
     do if (i26) {
      if ((HEAPU16[i32 + 14 >> 1] | 0) >= 24) {
       i1 = 4;
       break;
      }
      HEAP32[i3 >> 2] = 256;
      i1 = 260;
     } else i1 = 4; while (0);
     HEAP32[i3 >> 2] = i1;
     do if ((HEAP32[i34 >> 2] | 0) == 65536) {
      if ((HEAP32[i34 + 12 >> 2] | 0) != 65536) {
       i37 = 95;
       break;
      }
      if (HEAP32[i34 + 4 >> 2] | 0) {
       i37 = 95;
       break;
      }
      if (HEAP32[i34 + 8 >> 2] | 0) i37 = 95;
     } else i37 = 95; while (0);
     if ((i37 | 0) == 95) _FT_Outline_Transform(i25, i34);
     if (i4 | i2 | 0) _FT_Outline_Translate(i25, i2, i4);
     HEAP32[i35 >> 2] = HEAP32[i7 >> 2];
     i32 = i35 + 4 | 0;
     HEAP32[i32 >> 2] = 0;
     _FT_Vector_Transform(i35, i34);
     HEAP32[i7 >> 2] = (HEAP32[i35 >> 2] | 0) + i2;
     HEAP32[i35 >> 2] = 0;
     HEAP32[i32 >> 2] = HEAP32[i5 >> 2];
     _FT_Vector_Transform(i35, i34);
     HEAP32[i5 >> 2] = (HEAP32[i32 >> 2] | 0) + i4;
     if (!(i21 & i10 << 24 >> 24 == 0)) {
      i2 = HEAP32[i39 + 112 >> 2] | 0;
      i4 = HEAP32[i28 >> 2] | 0;
      i3 = HEAP32[i30 >> 2] | 0;
      if (!(i15 << 24 >> 24)) i37 = 101; else if (!(HEAP32[i36 + 68 >> 2] | 0)) i37 = 101;
      do if ((i37 | 0) == 101) {
       i1 = HEAP16[i23 >> 1] | 0;
       if (i1 << 16 >> 16 <= 0) break;
       i1 = i1 << 16 >> 16;
       while (1) {
        i37 = _FT_MulFix(HEAP32[i2 >> 2] | 0, i4) | 0;
        HEAP32[i2 >> 2] = i37;
        i37 = i2 + 4 | 0;
        i36 = _FT_MulFix(HEAP32[i37 >> 2] | 0, i3) | 0;
        HEAP32[i37 >> 2] = i36;
        if ((i1 | 0) > 1) {
         i2 = i2 + 8 | 0;
         i1 = i1 + -1 | 0;
        } else break;
       }
      } while (0);
      i37 = _FT_MulFix(HEAP32[i7 >> 2] | 0, i4) | 0;
      HEAP32[i7 >> 2] = i37;
      i37 = _FT_MulFix(HEAP32[i5 >> 2] | 0, i3) | 0;
      HEAP32[i5 >> 2] = i37;
     }
     _FT_Outline_Get_CBox(i25, i38);
     i1 = HEAP32[i38 >> 2] | 0;
     HEAP32[i8 >> 2] = (HEAP32[i38 + 8 >> 2] | 0) - i1;
     i2 = HEAP32[i38 + 12 >> 2] | 0;
     HEAP32[i39 + 28 >> 2] = i2 - (HEAP32[i38 + 4 >> 2] | 0);
     if (!(HEAP16[i9 >> 1] | 0)) HEAP32[i39 + 32 >> 2] = i1;
     HEAP32[i39 + 36 >> 2] = i2;
     do if (i6) HEAP32[i39 + 44 >> 2] = (HEAP32[i39 + 32 >> 2] | 0) - ((HEAP32[i7 >> 2] | 0) / 2 | 0); else {
      if (!(i33 & 16)) break;
      _ft_synthesize_vertical_metrics(i8, HEAP32[i5 >> 2] | 0);
     } while (0);
     i1 = 0;
     break L18;
    }
   } while (0);
  } else i1 = 6;
 } while (0);
 i39 = i1;
 STACKTOP = i40;
 return i39 | 0;
}

function _pfr_slot_load(i29, i28, i1, i25) {
 i29 = i29 | 0;
 i28 = i28 | 0;
 i1 = i1 | 0;
 i25 = i25 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i33 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i30 = i33;
 i27 = HEAP32[i29 + 4 >> 2] | 0;
 i31 = i29 + 108 | 0;
 i26 = (i1 | 0) == 0 ? 0 : i1 + -1 | 0;
 if (!i27) {
  i32 = 6;
  STACKTOP = i33;
  return i32 | 0;
 }
 if (i26 >>> 0 >= (HEAP32[i27 + 408 >> 2] | 0) >>> 0) {
  i32 = 6;
  STACKTOP = i33;
  return i32 | 0;
 }
 L7 : do if (!(i25 & 9)) {
  i32 = HEAP32[i27 + 104 >> 2] | 0;
  i14 = HEAP32[i27 + 416 >> 2] | 0;
  i2 = HEAP32[i27 + 380 >> 2] | 0;
  if (i2 | 0) {
   i16 = i28 + 12 | 0;
   i3 = HEAPU16[i16 >> 1] | 0;
   i4 = i28 + 14 | 0;
   i1 = 0;
   i6 = HEAP32[i27 + 388 >> 2] | 0;
   while (1) {
    if ((HEAP32[i6 >> 2] | 0) == (i3 | 0)) if ((HEAP32[i6 + 4 >> 2] | 0) == (HEAPU16[i4 >> 1] | 0)) break;
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i2 >>> 0) break L7; else i6 = i6 + 36 | 0;
   }
   i3 = i6 + 8 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   if (!(_FT_Stream_Seek(i32, (HEAP32[i6 + 24 >> 2] | 0) + (HEAP32[i27 + 432 >> 2] | 0) | 0) | 0)) {
    i2 = i6 + 28 | 0;
    if (!(_FT_Stream_EnterFrame(i32, Math_imul(HEAP32[i2 >> 2] | 0, (i1 & 1 | 4) + (i1 >>> 1 & 1) + (i1 >>> 2 & 1) | 0) | 0) | 0)) {
     i15 = i32 + 32 | 0;
     i10 = HEAP32[i15 >> 2] | 0;
     i19 = i32 + 36 | 0;
     i11 = HEAP32[i19 >> 2] | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     i7 = HEAP32[i3 >> 2] | 0;
     i8 = HEAP32[i14 + (i26 << 4) >> 2] | 0;
     i6 = i7 & 1;
     i4 = i7 & 2;
     i9 = (i4 | 0) == 0;
     i7 = i7 & 4;
     i12 = (i7 | 0) == 0;
     i7 = (i6 | 4) + (i4 >>> 1) + (i7 >>> 2) | 0;
     L18 : do if (!i6) {
      i6 = 0;
      while (1) {
       if (i6 >>> 0 >= i1 >>> 0) {
        i13 = 25;
        break L18;
       }
       i2 = (i6 + i1 | 0) >>> 1;
       i3 = i10 + (Math_imul(i2, i7) | 0) | 0;
       if ((i3 + i7 | 0) >>> 0 > i11 >>> 0) {
        i13 = 25;
        break L18;
       }
       i34 = HEAPU8[i3 >> 0] | 0;
       i4 = i34 >>> 0 < i8 >>> 0;
       if ((i34 | 0) == (i8 | 0)) break; else {
        i6 = i4 ? i2 : i6;
        i1 = i4 ? i1 : i2;
       }
      }
      i1 = i3 + 1 | 0;
     } else {
      i6 = 0;
      i3 = i1;
      while (1) {
       if (i6 >>> 0 >= i3 >>> 0) {
        i13 = 25;
        break L18;
       }
       i4 = (i6 + i3 | 0) >>> 1;
       i1 = i10 + (Math_imul(i4, i7) | 0) | 0;
       if ((i1 + i7 | 0) >>> 0 > i11 >>> 0) {
        i13 = 25;
        break L18;
       }
       i1 = i1 + 2 | 0;
       i34 = i1 + -2 | 0;
       i34 = HEAPU8[i34 >> 0] << 8 | HEAPU8[i34 + 1 >> 0];
       i2 = i34 >>> 0 < i8 >>> 0;
       if ((i34 | 0) == (i8 | 0)) break; else {
        i6 = i2 ? i4 : i6;
        i3 = i2 ? i3 : i4;
       }
      }
     } while (0);
     if ((i13 | 0) == 25) {
      _FT_Stream_ExitFrame(i32);
      break;
     }
     if (i9) {
      i3 = i1 + 1 | 0;
      i9 = HEAPU8[i1 >> 0] | 0;
     } else {
      i3 = i1 + 2 | 0;
      i9 = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
     }
     i1 = HEAPU8[i3 >> 0] | 0;
     if (i12) {
      i1 = i1 << 8;
      i2 = 1;
     } else {
      i1 = HEAPU8[i3 + 1 >> 0] << 8 | i1 << 16;
      i2 = 2;
     }
     i8 = HEAPU8[i3 + i2 >> 0] | i1;
     _FT_Stream_ExitFrame(i32);
     if (i9 | 0) {
      i3 = i14 + (i26 << 4) + 4 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      i7 = i27 + 304 | 0;
      i1 = HEAP32[i7 >> 2] | 0;
      i2 = HEAP32[i27 + 300 >> 2] | 0;
      if ((i1 | 0) == (i2 | 0)) {
       i6 = i4;
       i2 = i4;
      } else {
       i6 = _FT_MulDiv(i4, i2, i1) | 0;
       i2 = HEAP32[i3 >> 2] | 0;
       i1 = HEAP32[i7 >> 2] | 0;
      }
      HEAP32[i29 + 56 >> 2] = i6;
      i4 = _FT_MulDiv(HEAPU16[i16 >> 1] << 8, i2, i1) | 0;
      if (!(_FT_Stream_Seek(i32, (HEAP32[i27 + 188 >> 2] | 0) + i8 | 0) | 0)) if (!(_FT_Stream_EnterFrame(i32, i9) | 0)) {
       i2 = HEAP32[i15 >> 2] | 0;
       i6 = HEAP32[i19 >> 2] | 0;
       i3 = i2 + 1 | 0;
       L45 : do if (i3 >>> 0 <= i6 >>> 0) {
        i8 = HEAP8[i2 >> 0] | 0;
        switch (i8 & 3) {
        case 0:
         {
          i1 = i2 + 2 | 0;
          if (i1 >>> 0 > i6 >>> 0) break L45;
          i24 = HEAP8[i3 >> 0] | 0;
          i23 = i24 << 28 >> 28;
          i24 = i24 >> 4;
          i17 = i1;
          break;
         }
        case 1:
         {
          i1 = i2 + 3 | 0;
          if (i1 >>> 0 > i6 >>> 0) break L45;
          i23 = HEAP8[i2 + 2 >> 0] | 0;
          i24 = HEAP8[i3 >> 0] | 0;
          i17 = i1;
          break;
         }
        case 2:
         {
          i1 = i2 + 5 | 0;
          if (i1 >>> 0 > i6 >>> 0) break L45;
          i23 = (HEAPU8[i2 + 3 >> 0] << 8 | HEAPU8[i2 + 4 >> 0]) << 16 >> 16;
          i24 = (HEAPU8[i3 >> 0] << 8 | HEAPU8[i2 + 2 >> 0]) << 16 >> 16;
          i17 = i1;
          break;
         }
        case 3:
         {
          i1 = i2 + 7 | 0;
          if (i1 >>> 0 > i6 >>> 0) break L45;
          i23 = HEAPU8[i2 + 5 >> 0] << 8 | HEAPU8[i2 + 4 >> 0] << 16 | HEAPU8[i2 + 6 >> 0];
          i24 = HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i3 >> 0] << 16 | HEAPU8[i2 + 3 >> 0];
          i17 = i1;
          break;
         }
        default:
         {}
        }
        switch ((i8 & 255) >>> 2 & 3) {
        case 0:
         {
          i20 = 0;
          i21 = 0;
          i18 = i17;
          break;
         }
        case 1:
         {
          i1 = i17 + 1 | 0;
          if (i1 >>> 0 > i6 >>> 0) break L45;
          i21 = HEAPU8[i17 >> 0] | 0;
          i20 = i21 & 15;
          i21 = i21 >>> 4;
          i18 = i1;
          break;
         }
        case 2:
         {
          i1 = i17 + 2 | 0;
          if (i1 >>> 0 > i6 >>> 0) break L45;
          i20 = HEAPU8[i17 + 1 >> 0] | 0;
          i21 = HEAPU8[i17 >> 0] | 0;
          i18 = i1;
          break;
         }
        case 3:
         {
          i1 = i17 + 4 | 0;
          if (i1 >>> 0 > i6 >>> 0) break L45;
          i20 = HEAPU8[i17 + 2 >> 0] << 8 | HEAPU8[i17 + 3 >> 0];
          i21 = HEAPU8[i17 >> 0] << 8 | HEAPU8[i17 + 1 >> 0];
          i18 = i1;
          break;
         }
        default:
         {}
        }
        switch ((i8 & 255) >>> 4 & 3) {
        case 0:
         {
          i22 = i4;
          i5 = i18;
          break;
         }
        case 1:
         {
          i5 = i18 + 1 | 0;
          if (i5 >>> 0 > i6 >>> 0) break L45;
          i22 = HEAP8[i18 >> 0] << 8;
          break;
         }
        case 2:
         {
          i5 = i18 + 2 | 0;
          if (i5 >>> 0 > i6 >>> 0) break L45;
          i22 = (HEAPU8[i18 >> 0] << 8 | HEAPU8[i18 + 1 >> 0]) << 16 >> 16;
          break;
         }
        case 3:
         {
          i5 = i18 + 3 | 0;
          if (i5 >>> 0 > i6 >>> 0) break L45;
          i22 = HEAPU8[i18 + 1 >> 0] << 8 | HEAPU8[i18 >> 0] << 16 | HEAPU8[i18 + 2 >> 0];
          break;
         }
        default:
         {}
        }
        i6 = i5;
        if ((i23 | 0) <= (2147483647 - i20 | 0)) {
         HEAP32[i29 + 72 >> 2] = 1651078259;
         i3 = i29 + 80 | 0;
         HEAP32[i3 >> 2] = i21;
         i1 = i29 + 76 | 0;
         HEAP32[i1 >> 2] = i20;
         i34 = i21 + 7 >> 3;
         i4 = i29 + 84 | 0;
         HEAP32[i4 >> 2] = i34;
         HEAP8[i29 + 94 >> 0] = 1;
         i21 = i21 << 6;
         HEAP32[i29 + 24 >> 2] = i21;
         HEAP32[i29 + 28 >> 2] = i20 << 6;
         HEAP32[i29 + 32 >> 2] = i24 << 6;
         HEAP32[i29 + 36 >> 2] = i23 << 6;
         HEAP32[i29 + 40 >> 2] = (i22 >> 2) + 32 & -64;
         HEAP32[i29 + 44 >> 2] = 0 - i21 >> 1;
         HEAP32[i29 + 48 >> 2] = 0;
         HEAP32[i29 + 52 >> 2] = HEAP32[i28 + 32 >> 2];
         HEAP32[i29 + 100 >> 2] = i24;
         HEAP32[i29 + 104 >> 2] = i20 + i23;
         if (!(_ft_glyphslot_alloc_bitmap(i29, Math_imul(i34, i20) | 0) | 0)) {
          i12 = HEAP32[i19 >> 2] | 0;
          i2 = HEAP32[i27 + 208 >> 2] & 2;
          i1 = HEAP32[i1 >> 2] | 0;
          L78 : do if (i1 | 0) {
           i14 = HEAP32[i3 >> 2] | 0;
           if (!i14) break;
           i10 = HEAP32[i29 + 88 >> 2] | 0;
           i13 = HEAP32[i4 >> 2] | 0;
           i7 = Math_imul(i14, i1) | 0;
           i24 = (i2 | 0) == 0;
           i34 = i10 + (Math_imul(i13, i1 + -1 | 0) | 0) | 0;
           i13 = i24 ? 0 - i13 | 0 : i13;
           i10 = i24 ? i34 : i10;
           switch ((i8 & 255) >>> 6 & 3) {
           case 0:
            {
             i9 = i12 - i6 << 3;
             i9 = i9 >>> 0 > i7 >>> 0 ? i7 : i9;
             if (!i9) break L78;
             i2 = 0;
             i1 = 128;
             i6 = i10;
             i3 = i14;
             i4 = i5;
             i5 = 0;
             i8 = i9;
             i7 = i10;
             do {
              if (!((i8 ^ i9) & 7)) {
               i2 = HEAPU8[i4 >> 0] | 0;
               i4 = i4 + 1 | 0;
              }
              i5 = ((i2 & 128 | 0) == 0 ? 0 : i1) | i5;
              i2 = i2 << 1;
              i1 = i1 >>> 1;
              i3 = i3 + -1 | 0;
              do if (!i3) {
               HEAP8[i6 >> 0] = i5;
               i7 = i7 + i13 | 0;
               i1 = 128;
               i6 = i7;
               i3 = i14;
               i5 = 0;
              } else {
               if (i1 | 0) break;
               HEAP8[i6 >> 0] = i5;
               i1 = 128;
               i6 = i6 + 1 | 0;
               i5 = 0;
              } while (0);
              i8 = i8 + -1 | 0;
             } while ((i8 | 0) != 0);
             if ((i1 | 0) == 128) break L78;
             HEAP8[i6 >> 0] = i5;
             break L78;
            }
           case 1:
            {
             if (!i7) break L78;
             i1 = i5;
             i4 = 0;
             i3 = 128;
             i8 = i10;
             i5 = i14;
             i9 = 1;
             i11 = i7;
             i2 = 0;
             i6 = 1;
             i7 = 0;
             while (1) {
              L100 : do if (i9) {
               i9 = i1;
               i1 = i7;
               while (1) {
                i7 = i1;
                while (1) {
                 if (i6 | 0) break;
                 if (!i7) {
                  i2 = 0;
                  i6 = 1;
                  i7 = 0;
                 } else {
                  i1 = i9;
                  i2 = i7;
                  i6 = 1;
                  break L100;
                 }
                }
                if (i9 >>> 0 >= i12 >>> 0) {
                 i1 = i9;
                 break L100;
                }
                i1 = i9 + 1 | 0;
                i7 = HEAPU8[i9 >> 0] | 0;
                i2 = i7 >>> 4;
                i7 = i7 & 15;
                if (!i2) {
                 i9 = i1;
                 i2 = 0;
                 i6 = 0;
                 i1 = i7;
                } else {
                 i6 = 0;
                 break;
                }
               }
              } while (0);
              i4 = ((i6 | 0) == 0 ? 0 : i3) | i4;
              i3 = i3 >>> 1;
              i5 = i5 + -1 | 0;
              do if (!i5) {
               HEAP8[i8 >> 0] = i4;
               i10 = i10 + i13 | 0;
               i3 = 128;
               i8 = i10;
               i5 = i14;
               i4 = 0;
              } else {
               if (i3 | 0) break;
               HEAP8[i8 >> 0] = i4;
               i3 = 128;
               i8 = i8 + 1 | 0;
               i4 = 0;
              } while (0);
              i11 = i11 + -1 | 0;
              if (!i11) break; else {
               i9 = (i2 | 0) < 2 & 1;
               i2 = i2 + -1 | 0;
              }
             }
             if ((i3 | 0) == 128) break L78;
             HEAP8[i8 >> 0] = i4;
             break L78;
            }
           case 2:
            {
             if (!i7) break L78;
             i2 = 128;
             i6 = i10;
             i4 = i14;
             i9 = 1;
             i11 = i7;
             i1 = 0;
             i3 = 1;
             i7 = 0;
             while (1) {
              L120 : do if (i9) while (1) {
               if (i5 >>> 0 >= i12 >>> 0) break L120;
               i8 = i5 + 1 | 0;
               i34 = HEAP8[i5 >> 0] | 0;
               i1 = i34 & 255;
               i3 = i3 ^ 1;
               if (!(i34 << 24 >> 24)) i5 = i8; else {
                i5 = i8;
                break;
               }
              } while (0);
              i7 = ((i3 | 0) == 0 ? 0 : i2) | i7;
              i2 = i2 >>> 1;
              i4 = i4 + -1 | 0;
              do if (!i4) {
               HEAP8[i6 >> 0] = i7;
               i8 = i10 + i13 | 0;
               i2 = 128;
               i6 = i8;
               i4 = i14;
               i7 = 0;
              } else {
               if (i2 | 0) {
                i8 = i10;
                break;
               }
               HEAP8[i6 >> 0] = i7;
               i2 = 128;
               i6 = i6 + 1 | 0;
               i7 = 0;
               i8 = i10;
              } while (0);
              i11 = i11 + -1 | 0;
              if (!i11) break; else {
               i9 = (i1 | 0) < 2 & 1;
               i1 = i1 + -1 | 0;
               i10 = i8;
              }
             }
             if ((i2 | 0) == 128) break L78;
             HEAP8[i6 >> 0] = i7;
             break L78;
            }
           default:
            break L45;
           }
          } while (0);
          _FT_Stream_ExitFrame(i32);
          i34 = 0;
          STACKTOP = i33;
          return i34 | 0;
         }
        }
       } while (0);
       _FT_Stream_ExitFrame(i32);
      }
     }
    }
   }
  }
 } while (0);
 if (i25 & 16384 | 0) {
  i34 = 6;
  STACKTOP = i33;
  return i34 | 0;
 }
 i3 = HEAP32[i27 + 416 >> 2] | 0;
 HEAP32[i29 + 72 >> 2] = 1869968492;
 i7 = i29 + 110 | 0;
 HEAP16[i7 >> 1] = 0;
 HEAP16[i31 >> 1] = 0;
 i32 = HEAP32[i27 + 188 >> 2] | 0;
 i24 = HEAP32[i27 + 104 >> 2] | 0;
 i34 = HEAP32[i3 + (i26 << 4) + 12 >> 2] | 0;
 i1 = HEAP32[i3 + (i26 << 4) + 8 >> 2] | 0;
 i2 = i29 + 188 | 0;
 _FT_GlyphLoader_Rewind(HEAP32[i2 >> 2] | 0);
 HEAP32[i29 + 176 >> 2] = 0;
 i1 = _pfr_glyph_load_rec(i29 + 160 | 0, i24, i32, i34, i1) | 0;
 if (i1 | 0) {
  i34 = i1;
  STACKTOP = i33;
  return i34 | 0;
 }
 i4 = i25 & 1;
 i1 = (HEAP32[i2 >> 2] | 0) + 20 | 0;
 HEAP32[i31 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i31 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i31 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i31 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i31 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 i1 = i29 + 124 | 0;
 i2 = HEAP32[i1 >> 2] & -6;
 HEAP32[i1 >> 2] = i2 | 4;
 if (i28 | 0) if ((HEAPU16[i28 + 14 >> 1] | 0) < 24) HEAP32[i1 >> 2] = i2 | 260;
 i5 = i29 + 40 | 0;
 HEAP32[i5 >> 2] = 0;
 i6 = i29 + 52 | 0;
 HEAP32[i6 >> 2] = 0;
 i1 = HEAP32[i3 + (i26 << 4) + 4 >> 2] | 0;
 i2 = HEAP32[i27 + 304 >> 2] | 0;
 i3 = HEAP32[i27 + 300 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) i1 = _FT_MulDiv(i1, i3, i2) | 0;
 HEAP32[(HEAP32[i27 + 324 >> 2] & 1 | 0 ? i6 : i5) >> 2] = i1;
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i29 + 56 >> 2] = i1;
 HEAP32[i29 + 60 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i29 + 44 >> 2] = 0;
 HEAP32[i29 + 48 >> 2] = 0;
 if (!i4) {
  i4 = HEAP32[i28 + 16 >> 2] | 0;
  i3 = HEAP32[i28 + 20 >> 2] | 0;
  if ((HEAP16[i7 >> 1] | 0) > 0) {
   i1 = 0;
   i2 = HEAP32[i29 + 112 >> 2] | 0;
   while (1) {
    i34 = _FT_MulFix(HEAP32[i2 >> 2] | 0, i4) | 0;
    HEAP32[i2 >> 2] = i34;
    i34 = i2 + 4 | 0;
    i32 = _FT_MulFix(HEAP32[i34 >> 2] | 0, i3) | 0;
    HEAP32[i34 >> 2] = i32;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (HEAP16[i7 >> 1] | 0)) break; else i2 = i2 + 8 | 0;
   }
   i1 = HEAP32[i5 >> 2] | 0;
  }
  i34 = _FT_MulFix(i1, i4) | 0;
  HEAP32[i5 >> 2] = i34;
  i34 = _FT_MulFix(HEAP32[i6 >> 2] | 0, i3) | 0;
  HEAP32[i6 >> 2] = i34;
 }
 _FT_Outline_Get_CBox(i31, i30);
 i32 = HEAP32[i30 >> 2] | 0;
 HEAP32[i29 + 24 >> 2] = (HEAP32[i30 + 8 >> 2] | 0) - i32;
 i34 = HEAP32[i30 + 4 >> 2] | 0;
 HEAP32[i29 + 28 >> 2] = (HEAP32[i30 + 12 >> 2] | 0) - i34;
 HEAP32[i29 + 32 >> 2] = i32;
 HEAP32[i29 + 36 >> 2] = i34;
 i34 = 0;
 STACKTOP = i33;
 return i34 | 0;
}
function _cf2_glyphpath_pushPrevElem(i21, i20, i22, i12, i14, i17) {
 i21 = i21 | 0;
 i20 = i20 | 0;
 i22 = i22 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i23 = 0, i24 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i23 = i24;
 i16 = i21 + 11748 | 0;
 i15 = (HEAP32[i16 >> 2] | 0) == 2;
 i9 = i15 ? i21 + 11752 | 0 : i21 + 11768 | 0;
 i15 = i15 ? i21 + 11760 | 0 : i21 + 11776 | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 i3 = HEAP32[i22 >> 2] | 0;
 i11 = i15 + 4 | 0;
 i2 = HEAP32[i11 >> 2] | 0;
 i13 = i22 + 4 | 0;
 i4 = HEAP32[i13 >> 2] | 0;
 if ((i1 | 0) == (i3 | 0) & (i2 | 0) == (i4 | 0)) {
  i15 = 0;
  i19 = 0;
  i5 = 0;
 } else {
  i5 = HEAP32[i9 >> 2] | 0;
  i10 = i9 + 4 | 0;
  i6 = HEAP32[i10 >> 2] | 0;
  i7 = i12 + 16 - i3 >> 5;
  i8 = i14 + 16 - i4 >> 5;
  i1 = _FT_MulFix(i1 + 16 - i5 >> 5, i8) | 0;
  i1 = i1 - (_FT_MulFix(i2 + 16 - i6 >> 5, i7) | 0) | 0;
  if (!i1) {
   i15 = 0;
   i19 = 0;
   i5 = 0;
  } else {
   i2 = _FT_MulFix(16 - i5 + i3 >> 5, i8) | 0;
   i1 = _FT_DivFix(i2 - (_FT_MulFix(16 - i6 + i4 >> 5, i7) | 0) | 0, i1) | 0;
   i2 = HEAP32[i9 >> 2] | 0;
   i2 = (_FT_MulFix(i1, (HEAP32[i15 >> 2] | 0) - i2 | 0) | 0) + i2 | 0;
   i3 = HEAP32[i10 >> 2] | 0;
   i3 = (_FT_MulFix(i1, (HEAP32[i11 >> 2] | 0) - i3 | 0) | 0) + i3 | 0;
   i1 = HEAP32[i9 >> 2] | 0;
   i8 = HEAP32[i15 >> 2] | 0;
   if ((i1 | 0) == (i8 | 0)) {
    i19 = i2 - i1 | 0;
    i2 = (((i19 | 0) < 0 ? 0 - i19 | 0 : i19) | 0) < (HEAP32[i21 + 11700 >> 2] | 0) ? i1 : i2;
   }
   i1 = HEAP32[i10 >> 2] | 0;
   i7 = HEAP32[i11 >> 2] | 0;
   if ((i1 | 0) == (i7 | 0)) {
    i19 = i3 - i1 | 0;
    i1 = (((i19 | 0) < 0 ? 0 - i19 | 0 : i19) | 0) < (HEAP32[i21 + 11700 >> 2] | 0) ? i1 : i3;
   } else i1 = i3;
   i6 = HEAP32[i22 >> 2] | 0;
   if ((i6 | 0) == (i12 | 0)) {
    i4 = i2 - i12 | 0;
    i4 = (((i4 | 0) < 0 ? 0 - i4 | 0 : i4) | 0) < (HEAP32[i21 + 11700 >> 2] | 0) ? i12 : i2;
   } else i4 = i2;
   i3 = HEAP32[i13 >> 2] | 0;
   if ((i3 | 0) == (i14 | 0)) {
    i2 = i1 - i14 | 0;
    i2 = (((i2 | 0) < 0 ? 0 - i2 | 0 : i2) | 0) < (HEAP32[i21 + 11700 >> 2] | 0);
    i5 = i2 ? i14 : i1;
    i2 = i2 ? i14 : i1;
   } else {
    i5 = i1;
    i2 = i1;
   }
   i19 = i4 - ((i6 + i8 | 0) / 2 | 0) | 0;
   i1 = HEAP32[i21 + 11696 >> 2] | 0;
   if ((((i19 | 0) < 0 ? 0 - i19 | 0 : i19) | 0) > (i1 | 0)) {
    i15 = 0;
    i19 = i4;
   } else {
    i19 = i2 - ((i3 + i7 | 0) / 2 | 0) | 0;
    if ((((i19 | 0) < 0 ? 0 - i19 | 0 : i19) | 0) > (i1 | 0)) {
     i15 = 0;
     i19 = i4;
    } else {
     HEAP32[i15 >> 2] = i4;
     HEAP32[i15 + 4 >> 2] = i5;
     i15 = 1;
     i19 = i4;
    }
   }
  }
 }
 i18 = i21 + 11728 | 0;
 i9 = i18;
 i8 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i9 + 4 >> 2] | 0;
 i14 = i23;
 HEAP32[i14 >> 2] = i8;
 HEAP32[i14 + 4 >> 2] = i9;
 switch (HEAP32[i16 >> 2] | 0) {
 case 2:
  {
   HEAP32[i23 + 32 >> 2] = 2;
   i6 = HEAP32[i21 + 11764 >> 2] | 0;
   i7 = (_FT_MulFix(HEAP32[i21 + 11644 >> 2] | 0, HEAP32[i21 + 11760 >> 2] | 0) | 0) + (_FT_MulFix(HEAP32[i21 + 11648 >> 2] | 0, i6) | 0) | 0;
   do if (!(i17 << 24 >> 24)) {
    i1 = HEAP32[i20 + 20 >> 2] | 0;
    if (i1 | 0) if (HEAP8[i20 + 13 >> 0] | 0) {
     i4 = i20 + 24 | 0;
     i2 = i1 + -1 | 0;
     i1 = HEAP32[i4 >> 2] | 0;
     while (1) {
      if (i1 >>> 0 >= i2 >>> 0) break;
      i3 = i1 + 1 | 0;
      if ((HEAP32[i20 + 28 + (i3 * 20 | 0) + 8 >> 2] | 0) > (i6 | 0)) break; else i1 = i3;
     }
     L30 : do if (!i1) i14 = 40; else {
      while (1) {
       i2 = i20 + 28 + (i1 * 20 | 0) + 8 | 0;
       if ((HEAP32[i2 >> 2] | 0) <= (i6 | 0)) break;
       i1 = i1 + -1 | 0;
       if (!i1) {
        i14 = 40;
        break L30;
       }
      }
      HEAP32[i4 >> 2] = i1;
      i2 = HEAP32[i2 >> 2] | 0;
      i14 = 42;
     } while (0);
     if ((i14 | 0) == 40) {
      HEAP32[i4 >> 2] = 0;
      i2 = HEAP32[i20 + 36 >> 2] | 0;
      if ((i2 | 0) > (i6 | 0)) {
       i3 = 0;
       i1 = i20 + 16 | 0;
      } else {
       i1 = 0;
       i14 = 42;
      }
     }
     if ((i14 | 0) == 42) {
      i3 = i1;
      i1 = i20 + 28 + (i1 * 20 | 0) + 16 | 0;
     }
     i1 = _FT_MulFix(i6 - i2 | 0, HEAP32[i1 >> 2] | 0) | 0;
     i1 = (HEAP32[i20 + 28 + (i3 * 20 | 0) + 12 >> 2] | 0) + i1 | 0;
     break;
    }
    i1 = _FT_MulFix(i6, HEAP32[i20 + 16 >> 2] | 0) | 0;
   } else {
    i1 = HEAP32[i21 + 3896 >> 2] | 0;
    if (i1 | 0) if (HEAP8[i21 + 3889 >> 0] | 0) {
     i4 = i21 + 3900 | 0;
     i2 = i1 + -1 | 0;
     i1 = HEAP32[i4 >> 2] | 0;
     while (1) {
      if (i1 >>> 0 >= i2 >>> 0) break;
      i3 = i1 + 1 | 0;
      if ((HEAP32[i21 + 3904 + (i3 * 20 | 0) + 8 >> 2] | 0) > (i6 | 0)) break; else i1 = i3;
     }
     L50 : do if (!i1) i14 = 26; else {
      while (1) {
       i2 = i21 + 3904 + (i1 * 20 | 0) + 8 | 0;
       if ((HEAP32[i2 >> 2] | 0) <= (i6 | 0)) break;
       i1 = i1 + -1 | 0;
       if (!i1) {
        i14 = 26;
        break L50;
       }
      }
      HEAP32[i4 >> 2] = i1;
      i2 = HEAP32[i2 >> 2] | 0;
      i14 = 28;
     } while (0);
     if ((i14 | 0) == 26) {
      HEAP32[i4 >> 2] = 0;
      i2 = HEAP32[i21 + 3912 >> 2] | 0;
      if ((i2 | 0) > (i6 | 0)) {
       i3 = 0;
       i1 = i21 + 3892 | 0;
      } else {
       i1 = 0;
       i14 = 28;
      }
     }
     if ((i14 | 0) == 28) {
      i3 = i1;
      i1 = i21 + 3904 + (i1 * 20 | 0) + 16 | 0;
     }
     i1 = _FT_MulFix(i6 - i2 | 0, HEAP32[i1 >> 2] | 0) | 0;
     i1 = (HEAP32[i21 + 3904 + (i3 * 20 | 0) + 12 >> 2] | 0) + i1 | 0;
     break;
    }
    i1 = _FT_MulFix(i6, HEAP32[i21 + 3892 >> 2] | 0) | 0;
   } while (0);
   i14 = (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 60 >> 2] | 0, i7) | 0) + (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 68 >> 2] | 0, i1) | 0) + (HEAP32[i21 + 11656 >> 2] | 0) | 0;
   HEAP32[i23 + 8 >> 2] = i14;
   i16 = (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 64 >> 2] | 0, i7) | 0) + (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 72 >> 2] | 0, i1) | 0) + (HEAP32[i21 + 11660 >> 2] | 0) | 0;
   HEAP32[i23 + 12 >> 2] = i16;
   if (!((i8 | 0) == (i14 | 0) & (i9 | 0) == (i16 | 0))) {
    i13 = HEAP32[i21 + 4 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[i13 + 4 >> 2] & 63](i13, i23);
    i13 = i23 + 8 | 0;
    i14 = HEAP32[i13 + 4 >> 2] | 0;
    i16 = i18;
    HEAP32[i16 >> 2] = HEAP32[i13 >> 2];
    HEAP32[i16 + 4 >> 2] = i14;
   }
   break;
  }
 case 4:
  {
   HEAP32[i23 + 32 >> 2] = 4;
   i6 = HEAP32[i21 + 11764 >> 2] | 0;
   i10 = i21 + 11644 | 0;
   i11 = i21 + 11648 | 0;
   i7 = (_FT_MulFix(HEAP32[i10 >> 2] | 0, HEAP32[i21 + 11760 >> 2] | 0) | 0) + (_FT_MulFix(HEAP32[i11 >> 2] | 0, i6) | 0) | 0;
   i12 = i20 + 20 | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   if (!i1) i14 = 48; else if (!(HEAP8[i20 + 13 >> 0] | 0)) i14 = 48; else {
    i4 = i20 + 24 | 0;
    i2 = i1 + -1 | 0;
    i1 = HEAP32[i4 >> 2] | 0;
    while (1) {
     if (i1 >>> 0 >= i2 >>> 0) break;
     i3 = i1 + 1 | 0;
     if ((HEAP32[i20 + 28 + (i3 * 20 | 0) + 8 >> 2] | 0) > (i6 | 0)) break; else i1 = i3;
    }
    L72 : do if (!i1) i14 = 56; else {
     while (1) {
      i2 = i20 + 28 + (i1 * 20 | 0) + 8 | 0;
      if ((HEAP32[i2 >> 2] | 0) <= (i6 | 0)) break;
      i1 = i1 + -1 | 0;
      if (!i1) {
       i14 = 56;
       break L72;
      }
     }
     HEAP32[i4 >> 2] = i1;
     i2 = HEAP32[i2 >> 2] | 0;
     i14 = 58;
    } while (0);
    if ((i14 | 0) == 56) {
     HEAP32[i4 >> 2] = 0;
     i2 = HEAP32[i20 + 36 >> 2] | 0;
     if ((i2 | 0) > (i6 | 0)) {
      i3 = 0;
      i1 = i20 + 16 | 0;
     } else {
      i1 = 0;
      i14 = 58;
     }
    }
    if ((i14 | 0) == 58) {
     i3 = i1;
     i1 = i20 + 28 + (i1 * 20 | 0) + 16 | 0;
    }
    i1 = _FT_MulFix(i6 - i2 | 0, HEAP32[i1 >> 2] | 0) | 0;
    i1 = (HEAP32[i20 + 28 + (i3 * 20 | 0) + 12 >> 2] | 0) + i1 | 0;
   }
   if ((i14 | 0) == 48) i1 = _FT_MulFix(i6, HEAP32[i20 + 16 >> 2] | 0) | 0;
   i6 = (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 60 >> 2] | 0, i7) | 0) + (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 68 >> 2] | 0, i1) | 0) | 0;
   i13 = i21 + 11656 | 0;
   HEAP32[i23 + 8 >> 2] = i6 + (HEAP32[i13 >> 2] | 0);
   i6 = (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 64 >> 2] | 0, i7) | 0) + (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 72 >> 2] | 0, i1) | 0) | 0;
   i9 = i21 + 11660 | 0;
   HEAP32[i23 + 12 >> 2] = i6 + (HEAP32[i9 >> 2] | 0);
   i6 = HEAP32[i21 + 11772 >> 2] | 0;
   i7 = (_FT_MulFix(HEAP32[i10 >> 2] | 0, HEAP32[i21 + 11768 >> 2] | 0) | 0) + (_FT_MulFix(HEAP32[i11 >> 2] | 0, i6) | 0) | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   if (!i1) i14 = 62; else if (!(HEAP8[i20 + 13 >> 0] | 0)) i14 = 62; else {
    i4 = i20 + 24 | 0;
    i2 = i1 + -1 | 0;
    i1 = HEAP32[i4 >> 2] | 0;
    while (1) {
     if (i1 >>> 0 >= i2 >>> 0) break;
     i3 = i1 + 1 | 0;
     if ((HEAP32[i20 + 28 + (i3 * 20 | 0) + 8 >> 2] | 0) > (i6 | 0)) break; else i1 = i3;
    }
    L93 : do if (!i1) i14 = 70; else {
     while (1) {
      i2 = i20 + 28 + (i1 * 20 | 0) + 8 | 0;
      if ((HEAP32[i2 >> 2] | 0) <= (i6 | 0)) break;
      i1 = i1 + -1 | 0;
      if (!i1) {
       i14 = 70;
       break L93;
      }
     }
     HEAP32[i4 >> 2] = i1;
     i2 = HEAP32[i2 >> 2] | 0;
     i14 = 72;
    } while (0);
    if ((i14 | 0) == 70) {
     HEAP32[i4 >> 2] = 0;
     i2 = HEAP32[i20 + 36 >> 2] | 0;
     if ((i2 | 0) > (i6 | 0)) {
      i3 = 0;
      i1 = i20 + 16 | 0;
     } else {
      i1 = 0;
      i14 = 72;
     }
    }
    if ((i14 | 0) == 72) {
     i3 = i1;
     i1 = i20 + 28 + (i1 * 20 | 0) + 16 | 0;
    }
    i1 = _FT_MulFix(i6 - i2 | 0, HEAP32[i1 >> 2] | 0) | 0;
    i1 = (HEAP32[i20 + 28 + (i3 * 20 | 0) + 12 >> 2] | 0) + i1 | 0;
   }
   if ((i14 | 0) == 62) i1 = _FT_MulFix(i6, HEAP32[i20 + 16 >> 2] | 0) | 0;
   i8 = (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 60 >> 2] | 0, i7) | 0) + (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 68 >> 2] | 0, i1) | 0) | 0;
   HEAP32[i23 + 16 >> 2] = i8 + (HEAP32[i13 >> 2] | 0);
   i8 = (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 64 >> 2] | 0, i7) | 0) + (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 72 >> 2] | 0, i1) | 0) | 0;
   HEAP32[i23 + 20 >> 2] = i8 + (HEAP32[i9 >> 2] | 0);
   i8 = i23 + 24 | 0;
   i7 = HEAP32[i21 + 11780 >> 2] | 0;
   i6 = (_FT_MulFix(HEAP32[i10 >> 2] | 0, HEAP32[i21 + 11776 >> 2] | 0) | 0) + (_FT_MulFix(HEAP32[i11 >> 2] | 0, i7) | 0) | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   if (!i1) i14 = 76; else if (!(HEAP8[i20 + 13 >> 0] | 0)) i14 = 76; else {
    i4 = i20 + 24 | 0;
    i2 = i1 + -1 | 0;
    i1 = HEAP32[i4 >> 2] | 0;
    while (1) {
     if (i1 >>> 0 >= i2 >>> 0) break;
     i3 = i1 + 1 | 0;
     if ((HEAP32[i20 + 28 + (i3 * 20 | 0) + 8 >> 2] | 0) > (i7 | 0)) break; else i1 = i3;
    }
    L114 : do if (!i1) i14 = 84; else {
     while (1) {
      i2 = i20 + 28 + (i1 * 20 | 0) + 8 | 0;
      if ((HEAP32[i2 >> 2] | 0) <= (i7 | 0)) break;
      i1 = i1 + -1 | 0;
      if (!i1) {
       i14 = 84;
       break L114;
      }
     }
     HEAP32[i4 >> 2] = i1;
     i2 = HEAP32[i2 >> 2] | 0;
     i14 = 86;
    } while (0);
    if ((i14 | 0) == 84) {
     HEAP32[i4 >> 2] = 0;
     i2 = HEAP32[i20 + 36 >> 2] | 0;
     if ((i2 | 0) > (i7 | 0)) {
      i3 = 0;
      i1 = i20 + 16 | 0;
     } else {
      i1 = 0;
      i14 = 86;
     }
    }
    if ((i14 | 0) == 86) {
     i3 = i1;
     i1 = i20 + 28 + (i1 * 20 | 0) + 16 | 0;
    }
    i1 = _FT_MulFix(i7 - i2 | 0, HEAP32[i1 >> 2] | 0) | 0;
    i1 = (HEAP32[i20 + 28 + (i3 * 20 | 0) + 12 >> 2] | 0) + i1 | 0;
   }
   if ((i14 | 0) == 76) i1 = _FT_MulFix(i7, HEAP32[i20 + 16 >> 2] | 0) | 0;
   i14 = (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 60 >> 2] | 0, i6) | 0) + (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 68 >> 2] | 0, i1) | 0) | 0;
   HEAP32[i8 >> 2] = i14 + (HEAP32[i13 >> 2] | 0);
   i13 = (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 64 >> 2] | 0, i6) | 0) + (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 72 >> 2] | 0, i1) | 0) | 0;
   HEAP32[i23 + 28 >> 2] = i13 + (HEAP32[i9 >> 2] | 0);
   i13 = HEAP32[i21 + 4 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[i13 + 12 >> 2] & 63](i13, i23);
   i13 = i8;
   i14 = HEAP32[i13 + 4 >> 2] | 0;
   i16 = i18;
   HEAP32[i16 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i16 + 4 >> 2] = i14;
   break;
  }
 default:
  {}
 }
 i8 = i15 << 24 >> 24 != 0;
 i1 = i17 << 24 >> 24 == 0;
 do if (!(i1 & i8)) {
  i6 = HEAP32[i22 + 4 >> 2] | 0;
  i7 = _FT_MulFix(HEAP32[i21 + 11644 >> 2] | 0, HEAP32[i22 >> 2] | 0) | 0;
  i7 = (_FT_MulFix(HEAP32[i21 + 11648 >> 2] | 0, i6) | 0) + i7 | 0;
  do if (i1) {
   i1 = HEAP32[i20 + 20 >> 2] | 0;
   if (i1 | 0) if (HEAP8[i20 + 13 >> 0] | 0) {
    i4 = i20 + 24 | 0;
    i2 = i1 + -1 | 0;
    i1 = HEAP32[i4 >> 2] | 0;
    while (1) {
     if (i1 >>> 0 >= i2 >>> 0) break;
     i3 = i1 + 1 | 0;
     if ((HEAP32[i20 + 28 + (i3 * 20 | 0) + 8 >> 2] | 0) > (i6 | 0)) break; else i1 = i3;
    }
    L140 : do if (!i1) i14 = 115; else {
     while (1) {
      i2 = i20 + 28 + (i1 * 20 | 0) + 8 | 0;
      if ((HEAP32[i2 >> 2] | 0) <= (i6 | 0)) break;
      i1 = i1 + -1 | 0;
      if (!i1) {
       i14 = 115;
       break L140;
      }
     }
     HEAP32[i4 >> 2] = i1;
     i2 = HEAP32[i2 >> 2] | 0;
     i14 = 117;
    } while (0);
    if ((i14 | 0) == 115) {
     HEAP32[i4 >> 2] = 0;
     i2 = HEAP32[i20 + 36 >> 2] | 0;
     if ((i2 | 0) > (i6 | 0)) {
      i3 = 0;
      i1 = i20 + 16 | 0;
     } else {
      i1 = 0;
      i14 = 117;
     }
    }
    if ((i14 | 0) == 117) {
     i3 = i1;
     i1 = i20 + 28 + (i1 * 20 | 0) + 16 | 0;
    }
    i1 = _FT_MulFix(i6 - i2 | 0, HEAP32[i1 >> 2] | 0) | 0;
    i1 = (HEAP32[i20 + 28 + (i3 * 20 | 0) + 12 >> 2] | 0) + i1 | 0;
    break;
   }
   i1 = _FT_MulFix(i6, HEAP32[i20 + 16 >> 2] | 0) | 0;
  } else {
   i1 = HEAP32[i21 + 3896 >> 2] | 0;
   if (i1 | 0) if (HEAP8[i21 + 3889 >> 0] | 0) {
    i4 = i21 + 3900 | 0;
    i2 = i1 + -1 | 0;
    i1 = HEAP32[i4 >> 2] | 0;
    while (1) {
     if (i1 >>> 0 >= i2 >>> 0) break;
     i3 = i1 + 1 | 0;
     if ((HEAP32[i21 + 3904 + (i3 * 20 | 0) + 8 >> 2] | 0) > (i6 | 0)) break; else i1 = i3;
    }
    L160 : do if (!i1) i14 = 101; else {
     while (1) {
      i2 = i21 + 3904 + (i1 * 20 | 0) + 8 | 0;
      if ((HEAP32[i2 >> 2] | 0) <= (i6 | 0)) break;
      i1 = i1 + -1 | 0;
      if (!i1) {
       i14 = 101;
       break L160;
      }
     }
     HEAP32[i4 >> 2] = i1;
     i2 = HEAP32[i2 >> 2] | 0;
     i14 = 103;
    } while (0);
    if ((i14 | 0) == 101) {
     HEAP32[i4 >> 2] = 0;
     i2 = HEAP32[i21 + 3912 >> 2] | 0;
     if ((i2 | 0) > (i6 | 0)) {
      i3 = 0;
      i1 = i21 + 3892 | 0;
     } else {
      i1 = 0;
      i14 = 103;
     }
    }
    if ((i14 | 0) == 103) {
     i3 = i1;
     i1 = i21 + 3904 + (i1 * 20 | 0) + 16 | 0;
    }
    i1 = _FT_MulFix(i6 - i2 | 0, HEAP32[i1 >> 2] | 0) | 0;
    i1 = (HEAP32[i21 + 3904 + (i3 * 20 | 0) + 12 >> 2] | 0) + i1 | 0;
    break;
   }
   i1 = _FT_MulFix(i6, HEAP32[i21 + 3892 >> 2] | 0) | 0;
  } while (0);
  i2 = _FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 60 >> 2] | 0, i7) | 0;
  i2 = (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 68 >> 2] | 0, i1) | 0) + i2 | 0;
  HEAP32[i23 + 8 >> 2] = i2 + (HEAP32[i21 + 11656 >> 2] | 0);
  i2 = _FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 64 >> 2] | 0, i7) | 0;
  i1 = (_FT_MulFix(HEAP32[(HEAP32[i21 >> 2] | 0) + 72 >> 2] | 0, i1) | 0) + i2 | 0;
  i1 = i1 + (HEAP32[i21 + 11660 >> 2] | 0) | 0;
  HEAP32[i23 + 12 >> 2] = i1;
  i2 = i23 + 8 | 0;
  if ((HEAP32[i2 >> 2] | 0) == (HEAP32[i18 >> 2] | 0)) if ((i1 | 0) == (HEAP32[i21 + 11732 >> 2] | 0)) break;
  HEAP32[i23 + 32 >> 2] = 2;
  i16 = i18;
  i17 = HEAP32[i16 + 4 >> 2] | 0;
  i20 = i23;
  HEAP32[i20 >> 2] = HEAP32[i16 >> 2];
  HEAP32[i20 + 4 >> 2] = i17;
  i20 = HEAP32[i21 + 4 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[i20 + 4 >> 2] & 63](i20, i23);
  i20 = i2;
  i21 = HEAP32[i20 + 4 >> 2] | 0;
  i23 = i18;
  HEAP32[i23 >> 2] = HEAP32[i20 >> 2];
  HEAP32[i23 + 4 >> 2] = i21;
 } while (0);
 if (!i8) {
  STACKTOP = i24;
  return;
 }
 i23 = i22;
 HEAP32[i23 >> 2] = i19;
 HEAP32[i23 + 4 >> 2] = i5;
 STACKTOP = i24;
 return;
}

function _af_latin_metrics_init(i37, i38) {
 i37 = i37 | 0;
 i38 = i38 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i39 = 0, i40 = 0;
 i40 = STACKTOP;
 STACKTOP = STACKTOP + 10064 | 0;
 i35 = i40 + 3192 | 0;
 i33 = i40 + 4 | 0;
 i7 = i40;
 i39 = HEAP32[i38 + 92 >> 2] | 0;
 i32 = i37 + 40 | 0;
 HEAP32[i32 >> 2] = HEAPU16[i38 + 68 >> 1];
 if (_FT_Select_Charmap(i38, 1970170211) | 0) {
  _FT_Set_Charmap(i38, i39) | 0;
  STACKTOP = i40;
  return 0;
 }
 i6 = HEAP32[i38 + 100 >> 2] | 0;
 _memset(i35 + 4 | 0, 0, 2996) | 0;
 HEAP32[i35 >> 2] = i6;
 i6 = i37 + 52 | 0;
 HEAP32[i6 >> 2] = 0;
 i8 = i37 + 1624 | 0;
 HEAP32[i8 >> 2] = 0;
 i2 = HEAP32[23324 + (HEAP32[(HEAP32[i37 >> 2] | 0) + 8 >> 2] << 2) >> 2] | 0;
 i36 = i37 + 36 | 0;
 i1 = _FT_Get_Char_Index(HEAP32[HEAP32[i36 >> 2] >> 2] | 0, HEAP32[i2 + 8 >> 2] | 0) | 0;
 if (!i1) {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if (i1 | 0) {
   i1 = _FT_Get_Char_Index(HEAP32[HEAP32[i36 >> 2] >> 2] | 0, i1) | 0;
   if (!i1) {
    i1 = HEAP32[i2 + 16 >> 2] | 0;
    if (i1 | 0) {
     i1 = _FT_Get_Char_Index(HEAP32[HEAP32[i36 >> 2] >> 2] | 0, i1) | 0;
     if (i1 | 0) i34 = 7;
    }
   } else i34 = 7;
  }
 } else i34 = 7;
 do if ((i34 | 0) == 7) if (!(_FT_Load_Glyph(i38, i1, 1) | 0)) {
  i1 = HEAP32[i38 + 84 >> 2] | 0;
  if ((HEAP16[i1 + 110 >> 1] | 0) >= 1) {
   _memset(i33 | 0, 0, 3188) | 0;
   i5 = i33 + 40 | 0;
   HEAP32[i5 >> 2] = HEAP32[i32 >> 2];
   HEAP32[i33 + 8 >> 2] = 65536;
   HEAP32[i33 + 12 >> 2] = 65536;
   HEAP32[i33 + 16 >> 2] = 0;
   HEAP32[i33 + 20 >> 2] = 0;
   HEAP32[i33 + 4 >> 2] = i38;
   HEAP32[i33 + 24 >> 2] = 0;
   HEAP32[i33 + 28 >> 2] = 0;
   HEAP32[i35 + 2988 >> 2] = i33;
   HEAP32[i35 + 2980 >> 2] = 0;
   if (!(_af_glyph_hints_reload(i35, i1 + 108 | 0) | 0)) {
    HEAP32[i7 >> 2] = 0;
    if (!(_af_latin_hints_compute_segments(i35, 0) | 0)) {
     _af_latin_hints_link_segments(i35, 0, 0, 0);
     i1 = HEAP32[i35 + 52 >> 2] | 0;
     i31 = HEAP32[i35 + 44 >> 2] | 0;
     i4 = i1 + (i31 * 48 | 0) | 0;
     if ((i31 | 0) > 0) {
      i2 = 0;
      do {
       i3 = HEAP32[i1 + 20 >> 2] | 0;
       if (i3) if (i3 >>> 0 > i1 >>> 0 ? (HEAP32[i3 + 20 >> 2] | 0) == (i1 | 0) : 0) {
        i3 = (HEAP16[i1 + 2 >> 1] | 0) - (HEAP16[i3 + 2 >> 1] | 0) | 0;
        if (i2 >>> 0 < 16) {
         HEAP32[i37 + 56 + (i2 * 12 | 0) >> 2] = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
         i2 = i2 + 1 | 0;
        }
       }
       i1 = i1 + 48 | 0;
      } while (i1 >>> 0 < i4 >>> 0);
      HEAP32[i7 >> 2] = i2;
     }
     _af_sort_and_quantize_widths(i7, i37 + 56 | 0, ((HEAP32[i5 >> 2] | 0) >>> 0) / 100 | 0);
     HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
     HEAP32[i7 >> 2] = 0;
     if (!(_af_latin_hints_compute_segments(i35, 1) | 0)) {
      _af_latin_hints_link_segments(i35, 0, 0, 1);
      i1 = HEAP32[i35 + 1520 >> 2] | 0;
      i31 = HEAP32[i35 + 1512 >> 2] | 0;
      i4 = i1 + (i31 * 48 | 0) | 0;
      if ((i31 | 0) > 0) {
       i2 = 0;
       do {
        i3 = HEAP32[i1 + 20 >> 2] | 0;
        if (i3) if (i3 >>> 0 > i1 >>> 0 ? (HEAP32[i3 + 20 >> 2] | 0) == (i1 | 0) : 0) {
         i3 = (HEAP16[i1 + 2 >> 1] | 0) - (HEAP16[i3 + 2 >> 1] | 0) | 0;
         if (i2 >>> 0 < 16) {
          HEAP32[i37 + 1628 + (i2 * 12 | 0) >> 2] = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
          i2 = i2 + 1 | 0;
         }
        }
        i1 = i1 + 48 | 0;
       } while (i1 >>> 0 < i4 >>> 0);
       HEAP32[i7 >> 2] = i2;
      }
      _af_sort_and_quantize_widths(i7, i37 + 1628 | 0, ((HEAP32[i5 >> 2] | 0) >>> 0) / 100 | 0);
      HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
      break;
     }
    }
   }
  }
 } while (0);
 if (!(HEAP32[i6 >> 2] | 0)) i1 = ((HEAP32[i32 >> 2] | 0) * 50 | 0) / 2048 | 0; else i1 = HEAP32[i37 + 56 >> 2] | 0;
 HEAP32[i37 + 248 >> 2] = (i1 | 0) / 5 | 0;
 HEAP32[i37 + 252 >> 2] = i1;
 HEAP8[i37 + 256 >> 0] = 0;
 if (!(HEAP32[i8 >> 2] | 0)) i1 = ((HEAP32[i32 >> 2] | 0) * 50 | 0) / 2048 | 0; else i1 = HEAP32[i37 + 1628 >> 2] | 0;
 HEAP32[i37 + 1820 >> 2] = (i1 | 0) / 5 | 0;
 HEAP32[i37 + 1824 >> 2] = i1;
 HEAP8[i37 + 1828 >> 0] = 0;
 _af_glyph_hints_done(i35);
 i1 = 20344 + (HEAP32[(HEAP32[i37 >> 2] | 0) + 12 >> 2] << 3) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != 759) {
  i30 = i37 + 1832 | 0;
  i31 = i38 + 84 | 0;
  do {
   i2 = 283130 + i2 | 0;
   i3 = HEAP8[i2 >> 0] | 0;
   L51 : do if (!(i3 << 24 >> 24)) {
    i5 = 0;
    i6 = 0;
   } else {
    i28 = i1 + 4 | 0;
    i27 = 0;
    i29 = 0;
    while (1) {
     L55 : while (1) {
      i2 = i2 + 1 | 0;
      i4 = i3 & 255;
      if (i3 << 24 >> 24 < 0) {
       i5 = (i3 & 255) < 224;
       i3 = (i3 & 255) < 240;
       i6 = i5 ? 1 : i3 ? 2 : 3;
       i3 = (i5 ? 31 : i3 ? 15 : 7) & i4;
       i4 = i6;
       i5 = i2;
       while (1) {
        i3 = HEAP8[i5 >> 0] & 63 | i3 << 6;
        i4 = i4 + -1 | 0;
        if (!i4) break; else i5 = i5 + 1 | 0;
       }
       i2 = i2 + i6 | 0;
      } else i3 = i4;
      i3 = _FT_Get_Char_Index(HEAP32[HEAP32[i36 >> 2] >> 2] | 0, i3) | 0;
      L63 : do if (i3 | 0) {
       i24 = _FT_Load_Glyph(i38, i3, 1) | 0;
       i3 = HEAP32[i31 >> 2] | 0;
       i4 = HEAP16[i3 + 108 >> 1] | 0;
       i25 = HEAP32[i3 + 112 >> 2] | 0;
       i26 = HEAP32[i3 + 116 >> 2] | 0;
       i13 = HEAP32[i3 + 120 >> 2] | 0;
       if (!i24) if ((HEAP16[i3 + 110 >> 1] | 0) >= 3) {
        i12 = i4 << 16 >> 16;
        if (i4 << 16 >> 16 > 0) {
         i3 = 0;
         i9 = -1;
         i7 = 0;
         i8 = 0;
         i6 = 0;
         i10 = 0;
        } else {
         i3 = 0;
         i4 = 1;
         break L55;
        }
        while (1) {
         i11 = HEAP16[i13 + (i10 << 1) >> 1] | 0;
         if ((i11 | 0) > (i6 | 0)) {
          if (!(HEAP16[i28 >> 1] & 1)) {
           i5 = i6;
           i4 = i9;
           while (1) {
            i24 = HEAP32[i25 + (i5 << 3) + 4 >> 2] | 0;
            i23 = (i4 | 0) < 0 | (i24 | 0) < (i3 | 0);
            i4 = i23 ? i5 : i4;
            i3 = i23 ? i24 : i3;
            if ((i5 | 0) < (i11 | 0)) i5 = i5 + 1 | 0; else break;
           }
          } else {
           i5 = i6;
           i4 = i9;
           while (1) {
            i24 = HEAP32[i25 + (i5 << 3) + 4 >> 2] | 0;
            i23 = (i4 | 0) < 0 | (i24 | 0) > (i3 | 0);
            i4 = i23 ? i5 : i4;
            i3 = i23 ? i24 : i3;
            if ((i5 | 0) < (i11 | 0)) i5 = i5 + 1 | 0; else break;
           }
          }
          i24 = (i4 | 0) == (i9 | 0);
          i23 = i24 ? i7 : i6;
          i24 = i24 ? i8 : i11;
          i14 = i4;
         } else {
          i23 = i7;
          i24 = i8;
          i14 = i9;
         }
         i10 = i10 + 1 | 0;
         if ((i10 | 0) == (i12 | 0)) break; else {
          i9 = i14;
          i7 = i23;
          i8 = i24;
          i6 = i11 + 1 | 0;
         }
        }
        if ((i14 | 0) <= -1) {
         i4 = 1;
         break L55;
        }
        i12 = i25 + (i14 << 3) | 0;
        i11 = HEAP32[i12 >> 2] | 0;
        i8 = (HEAP8[i26 + i14 >> 0] & 3) == 1 ? i14 : -1;
        i7 = i14;
        i4 = i8;
        while (1) {
         i5 = i7;
         i7 = (i7 | 0) > (i23 | 0) ? i7 + -1 | 0 : i24;
         i6 = (HEAP32[i25 + (i7 << 3) + 4 >> 2] | 0) - i3 | 0;
         i6 = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
         if ((i6 | 0) > 5) {
          i22 = (HEAP32[i25 + (i7 << 3) >> 2] | 0) - i11 | 0;
          if ((((i22 | 0) < 0 ? 0 - i22 | 0 : i22) | 0) <= (i6 * 20 | 0)) {
           i22 = i5;
           i5 = i8;
           break;
          }
         }
         i22 = (HEAP8[i26 + i7 >> 0] & 3) == 1;
         i5 = i22 ? i7 : i8;
         i4 = (i4 | 0) < 0 & i22 ? i7 : i4;
         if ((i7 | 0) == (i14 | 0)) {
          i22 = i14;
          break;
         } else i8 = i5;
        }
        i8 = i14;
        i7 = i5;
        while (1) {
         i5 = i8;
         i8 = (i8 | 0) < (i24 | 0) ? i8 + 1 | 0 : i23;
         i21 = i25 + (i8 << 3) | 0;
         i6 = (HEAP32[i25 + (i8 << 3) + 4 >> 2] | 0) - i3 | 0;
         i6 = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
         if ((i6 | 0) > 5) {
          i20 = (HEAP32[i21 >> 2] | 0) - i11 | 0;
          if ((((i20 | 0) < 0 ? 0 - i20 | 0 : i20) | 0) <= (i6 * 20 | 0)) {
           i8 = i4;
           break;
          }
         }
         i20 = (HEAP8[i26 + i8 >> 0] & 3) == 1;
         i6 = (i7 | 0) < 0 & i20 ? i8 : i7;
         i4 = i20 ? i8 : i4;
         if ((i8 | 0) == (i14 | 0)) {
          i5 = i14;
          i8 = i4;
          i7 = i6;
          break;
         } else i7 = i6;
        }
        i20 = HEAP16[i28 >> 1] | 0;
        L92 : do if (!(i20 & 8)) {
         i6 = i7;
         i4 = i22;
        } else {
         i6 = HEAP32[i32 >> 2] | 0;
         i19 = (i6 >>> 0) / 25 | 0;
         i18 = (HEAP32[i25 + (i5 << 3) >> 2] | 0) - (HEAP32[i25 + (i22 << 3) >> 2] | 0) | 0;
         if ((((i18 | 0) < 0 ? 0 - i18 | 0 : i18) | 0) >= (i19 | 0)) {
          i6 = i7;
          i4 = i22;
          break;
         }
         if ((2 - i22 + i5 | 0) > (i24 - i23 | 0)) {
          i6 = i7;
          i4 = i22;
          break;
         } else i4 = i14;
         do {
          i4 = (i4 | 0) > (i23 | 0) ? i4 + -1 | 0 : i24;
          i9 = HEAP32[i25 + (i4 << 3) >> 2] | 0;
          i10 = (i4 | 0) == (i14 | 0);
         } while (!((i9 | 0) != (i11 | 0) | i10));
         i18 = i6 >>> 2;
         if (i10) break L63;
         i15 = (i9 | 0) < (HEAP32[i12 >> 2] | 0);
         i10 = 0;
         i6 = 0;
         i9 = 0;
         i16 = i5;
         i4 = i5;
         L99 : while (1) {
          if (!(i9 << 24 >> 24)) {
           i6 = (HEAP8[i26 + i16 >> 0] & 3) == 1 ? i16 : -1;
           i9 = 1;
           i4 = i16;
           i10 = i6;
          }
          i16 = (i16 | 0) < (i24 | 0) ? i16 + 1 | 0 : i23;
          i12 = i25 + (i4 << 3) | 0;
          i17 = HEAP32[i25 + (i4 << 3) + 4 >> 2] | 0;
          i14 = i3 - i17 | 0;
          do if ((((i14 | 0) < 0 ? 0 - i14 | 0 : i14) | 0) > (i18 | 0)) i9 = 0; else {
           i11 = i25 + (i16 << 3) | 0;
           i14 = (HEAP32[i25 + (i16 << 3) + 4 >> 2] | 0) - i17 | 0;
           i14 = (i14 | 0) < 0 ? 0 - i14 | 0 : i14;
           if ((i14 | 0) > 5) {
            i11 = HEAP32[i11 >> 2] | 0;
            i12 = HEAP32[i12 >> 2] | 0;
            i13 = i11 - i12 | 0;
            if ((((i13 | 0) < 0 ? 0 - i13 | 0 : i13) | 0) <= (i14 * 20 | 0)) {
             i9 = 0;
             break;
            }
           } else {
            i11 = HEAP32[i11 >> 2] | 0;
            i12 = HEAP32[i12 >> 2] | 0;
           }
           i13 = (HEAP8[i26 + i16 >> 0] & 3) == 1;
           i6 = (i6 | 0) < 0 & i13 ? i16 : i6;
           i10 = i13 ? i16 : i10;
           i13 = i11 - i12 | 0;
           if (i15 ^ (i11 | 0) > (i12 | 0)) break;
           if ((((i13 | 0) < 0 ? 0 - i13 | 0 : i13) | 0) >= (i19 | 0)) break L99;
          } while (0);
          if ((i16 | 0) == (i22 | 0)) {
           i6 = i7;
           i4 = i22;
           break L92;
          }
         }
         i8 = i14 * 20 | 0;
         i5 = i16;
         i3 = i10;
         while (1) {
          i7 = (i5 | 0) < (i24 | 0) ? i5 + 1 | 0 : i23;
          i19 = (HEAP32[i25 + (i7 << 3) + 4 >> 2] | 0) - i17 | 0;
          if ((((i19 | 0) < 0 ? 0 - i19 | 0 : i19) | 0) > 5) {
           i19 = (HEAP32[i21 >> 2] | 0) - i12 | 0;
           if ((((i19 | 0) < 0 ? 0 - i19 | 0 : i19) | 0) <= (i8 | 0)) break;
          }
          i6 = ((i6 | 0) < 0 ? (HEAP8[i26 + i7 >> 0] & 3) == 1 : 0) ? i7 : i6;
          if ((i7 | 0) == (i22 | 0)) {
           i8 = i22;
           i3 = i17;
           i5 = i22;
           break L92;
          } else {
           i5 = i7;
           i3 = i7;
          }
         }
         i8 = i3;
         i3 = i17;
         i5 = (i7 | 0) > (i23 | 0) ? i7 + -1 | 0 : i24;
        } while (0);
        if ((i8 | i6 | 0) > -1) {
         i25 = (HEAP32[i25 + (i8 << 3) >> 2] | 0) - (HEAP32[i25 + (i6 << 3) >> 2] | 0) | 0;
         if (((i25 | 0) < 0 ? 0 - i25 | 0 : i25) >>> 0 > (HEAP32[i32 >> 2] | 0) >>> 3 >>> 0) {
          i4 = 1;
          break L55;
         }
        }
        if ((HEAP8[i26 + i4 >> 0] & 3) == 1) if ((HEAP8[i26 + i5 >> 0] & 3) == 1) {
         i4 = 1;
         break L55;
        }
        if (!(i20 & 2)) {
         i4 = 0;
         break L55;
        }
       }
      } while (0);
      i3 = HEAP8[i2 >> 0] | 0;
      if (!(i3 << 24 >> 24)) {
       i5 = i27;
       i6 = i29;
       break L51;
      }
     }
     i6 = ((i4 ^ 1) & 1) + i29 | 0;
     i5 = (i4 & 1) + i27 | 0;
     HEAP32[(i4 ? i35 + (i27 << 2) | 0 : i33 + (i29 << 2) | 0) >> 2] = i3;
     i3 = HEAP8[i2 >> 0] | 0;
     if (!(i3 << 24 >> 24)) break; else {
      i27 = i5;
      i29 = i6;
     }
    }
   } while (0);
   i11 = (i6 | 0) == 0;
   if (i5 | i6 | 0) {
    i10 = (i5 | 0) == 0;
    if (i6 >>> 0 > 1) {
     i4 = 1;
     do {
      i7 = HEAP32[i33 + (i4 << 2) >> 2] | 0;
      i2 = i4;
      do {
       i3 = i2;
       i2 = i2 + -1 | 0;
       i8 = i33 + (i2 << 2) | 0;
       i9 = HEAP32[i8 >> 2] | 0;
       if ((i7 | 0) >= (i9 | 0)) break;
       HEAP32[i33 + (i3 << 2) >> 2] = i9;
       HEAP32[i8 >> 2] = i7;
      } while ((i2 | 0) != 0);
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i6 | 0));
    }
    if (i5 >>> 0 > 1) {
     i4 = 1;
     do {
      i7 = HEAP32[i35 + (i4 << 2) >> 2] | 0;
      i2 = i4;
      do {
       i3 = i2;
       i2 = i2 + -1 | 0;
       i8 = i35 + (i2 << 2) | 0;
       i9 = HEAP32[i8 >> 2] | 0;
       if ((i7 | 0) >= (i9 | 0)) break;
       HEAP32[i35 + (i3 << 2) >> 2] = i9;
       HEAP32[i8 >> 2] = i7;
      } while ((i2 | 0) != 0);
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i5 | 0));
    }
    i9 = HEAP32[i30 >> 2] | 0;
    i7 = i37 + 1836 + (i9 * 28 | 0) | 0;
    i8 = i37 + 1836 + (i9 * 28 | 0) + 12 | 0;
    HEAP32[i30 >> 2] = i9 + 1;
    if (i10) {
     i2 = HEAP32[i33 + (i6 >>> 1 << 2) >> 2] | 0;
     i34 = 104;
    } else {
     i4 = HEAP32[i35 + (i5 >>> 1 << 2) >> 2] | 0;
     if (i11) {
      i2 = i4;
      i34 = 104;
     } else {
      HEAP32[i7 >> 2] = i4;
      i3 = HEAP32[i33 + (i6 >>> 1 << 2) >> 2] | 0;
      HEAP32[i8 >> 2] = i3;
      if ((i3 | 0) == (i4 | 0)) i34 = 105; else {
       i2 = HEAP16[i1 + 4 >> 1] | 0;
       if ((i2 & 1 | 0) != ((i3 | 0) > (i4 | 0) | 0)) {
        i29 = (i3 + i4 | 0) / 2 | 0;
        HEAP32[i8 >> 2] = i29;
        HEAP32[i7 >> 2] = i29;
       }
      }
     }
    }
    if ((i34 | 0) == 104) {
     HEAP32[i8 >> 2] = i2;
     HEAP32[i7 >> 2] = i2;
     i34 = 105;
    }
    if ((i34 | 0) == 105) {
     i34 = 0;
     i2 = HEAP16[i1 + 4 >> 1] | 0;
    }
    i3 = i37 + 1836 + (i9 * 28 | 0) + 24 | 0;
    i29 = i2 & 65535;
    i2 = i29 << 1 & 6;
    HEAP32[i3 >> 2] = i2;
    if (i29 & 4 | 0) HEAP32[i3 >> 2] = i2 | 8;
   }
   i1 = i1 + 8 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while ((i2 | 0) != 759);
 }
 i1 = 0;
 i2 = 0;
 i4 = 48;
 while (1) {
  i3 = _FT_Get_Char_Index(HEAP32[HEAP32[i36 >> 2] >> 2] | 0, i4) | 0;
  if (i3) if (!(_FT_Get_Advance(i38, i3, 2051, i35) | 0)) {
   i3 = HEAP32[i35 >> 2] | 0;
   if (!(i2 << 24 >> 24)) {
    i1 = i3;
    i2 = 1;
   } else if ((i3 | 0) != (i1 | 0)) {
    i1 = 0;
    break;
   }
  }
  i4 = i4 + 1 | 0;
  if (i4 >>> 0 >= 58) {
   i1 = 1;
   break;
  }
 }
 HEAP8[i37 + 32 >> 0] = i1;
 _FT_Set_Charmap(i38, i39) | 0;
 STACKTOP = i40;
 return 0;
}

function _FcConfigSubstituteWithPat(i1, i22, i23, i24) {
 i1 = i1 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i33 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i21 = i33 + 104 | 0;
 i31 = i33 + 96 | 0;
 i30 = i33 + 88 | 0;
 i29 = i33 + 80 | 0;
 i28 = i33 + 72 | 0;
 i10 = i33 + 64 | 0;
 i25 = i33 + 48 | 0;
 i26 = i33 + 32 | 0;
 i27 = i33 + 16 | 0;
 i9 = i33;
 L1 : do if (!i1) {
  i1 = HEAP32[91920] | 0;
  if (!i1) {
   while (1) {
    i1 = _FcInitLoadConfigAndFonts() | 0;
    i2 = HEAP32[91920] | 0;
    if (!i2) HEAP32[91920] = i1;
    if (!i2) break;
    _FcConfigDestroy(i1);
    i1 = HEAP32[91920] | 0;
    if (i1 | 0) break L1;
   }
   if (!i1) {
    i32 = 0;
    STACKTOP = i33;
    return i32 | 0;
   }
  }
 } while (0);
 switch (i24 | 0) {
 case 0:
  {
   i8 = HEAP32[i1 + 20 >> 2] | 0;
   i2 = _FcGetDefaultLangs() | 0;
   if (i2 | 0) {
    i6 = _FcStrListCreate(i2) | 0;
    i7 = _FcLangSetCreate() | 0;
    _FcLangSetAdd(i7, 349875) | 0;
    _FcStrSetDestroy(i2);
    L13 : do if (i6 | 0) {
     i4 = i25 + 8 | 0;
     i5 = i21 + 8 | 0;
     i2 = _FcStrListNext(i6) | 0;
     if (i2 | 0) L15 : while (1) {
      i3 = _FcPatternObjectFindElt(i22, 34) | 0;
      if (i3 | 0) {
       i19 = HEAP32[i3 + 4 >> 2] | 0;
       i20 = i19;
       i3 = (i20 & 1 | 0) == 0 ? i19 : (i20 & -2) + i3 | 0;
       if (i3 | 0) do {
        _FcValueCanonicalize(i21, i3 + 8 | 0);
        if ((HEAP32[i21 >> 2] | 0) == 8) {
         i19 = _FcLangSetCreate() | 0;
         _FcLangSetAdd(i19, i2) | 0;
         i20 = _FcLangSetContains(HEAP32[i5 >> 2] | 0, i19) | 0;
         _FcLangSetDestroy(i19);
         if (i20 | 0) break L15;
         if (_FcLangSetContains(HEAP32[i5 >> 2] | 0, i7) | 0) break L15;
        } else {
         if (!(_FcStrCmpIgnoreCase(HEAP32[i5 >> 2] | 0, i2) | 0)) break L15;
         if (!(_FcStrCmpIgnoreCase(HEAP32[i5 >> 2] | 0, 349875) | 0)) break L15;
        }
        i19 = HEAP32[i3 >> 2] | 0;
        i20 = i19;
        i3 = (i20 & 1 | 0) == 0 ? i19 : (i20 & -2) + i3 | 0;
       } while ((i3 | 0) != 0);
      }
      HEAP32[i25 >> 2] = 3;
      HEAP32[i4 >> 2] = i2;
      HEAP32[i21 >> 2] = HEAP32[i25 >> 2];
      HEAP32[i21 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
      HEAP32[i21 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
      HEAP32[i21 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
      _FcPatternObjectAddWithBinding(i22, 34, i21, 0, 1) | 0;
      i2 = _FcStrListNext(i6) | 0;
      if (!i2) break L13;
     }
    } while (0);
    _FcStrListDone(i6);
    _FcLangSetDestroy(i7);
   }
   if ((_FcPatternObjectGet(i22, 44, 0, i9) | 0) == 1) {
    i2 = _FcGetPrgname() | 0;
    if (!i2) i4 = i8; else {
     _FcPatternObjectAddString(i22, 44, i2) | 0;
     i4 = i8;
    }
   } else i4 = i8;
   break;
  }
 case 1:
  {
   i4 = HEAP32[i1 + 24 >> 2] | 0;
   break;
  }
 case 2:
  {
   i4 = HEAP32[i1 + 28 >> 2] | 0;
   break;
  }
 default:
  {
   i32 = 0;
   STACKTOP = i33;
   return i32 | 0;
  }
 }
 i2 = HEAP32[i1 + 32 >> 2] | 0;
 i3 = i2 + 50 | 0;
 i1 = i3 << 2;
 i20 = _malloc(i1) | 0;
 if (!i20) {
  i32 = 0;
  STACKTOP = i33;
  return i32 | 0;
 }
 i18 = _malloc(i1) | 0;
 i17 = (i18 | 0) == 0;
 if (i17) {
  _free(i20);
  i32 = 0;
  STACKTOP = i33;
  return i32 | 0;
 }
 i19 = _malloc(i1) | 0;
 if (!i19) {
  i2 = 0;
  i1 = 0;
  i32 = 132;
 } else {
  if (HEAP32[91917] & 4 | 0) {
   _printf(348433, i10) | 0;
   _FcPatternPrint(i22);
  }
  if (i4 | 0) {
   i14 = (i2 | 0) > -50;
   i15 = (i24 | 0) == 0;
   i16 = (i24 | 0) == 1;
   i13 = ((i3 | 0) > 1 ? i3 : 1) << 2;
   do {
    i1 = HEAP32[i4 + 4 >> 2] | 0;
    if (i14) {
     _memset(i18 | 0, 0, i13 | 0) | 0;
     _memset(i20 | 0, 0, i13 | 0) | 0;
     _memset(i19 | 0, 0, i13 | 0) | 0;
    }
    L56 : do if (i1 | 0) {
     L57 : while (1) {
      L59 : do switch (HEAP32[i1 + 4 >> 2] | 0) {
      case 2:
       {
        i9 = i1 + 8 | 0;
        i2 = HEAP32[i9 >> 2] | 0;
        i7 = HEAP32[i2 >> 2] & -1025;
        if (HEAP32[91917] & 4) {
         _printf(348487, i29) | 0;
         _FcEditPrint(HEAP32[i9 >> 2] | 0);
         _puts(348499) | 0;
         i2 = HEAP32[i9 >> 2] | 0;
        }
        i8 = _FcConfigValues(i22, i23, i24, HEAP32[i2 + 8 >> 2] | 0, HEAP32[i2 + 12 >> 2] | 0) | 0;
        i2 = HEAP32[i19 + (i7 << 2) >> 2] | 0;
        if (i2 | 0) if (i15 | (HEAP32[i2 >> 2] | 0) == 1) {
         i12 = _FcPatternObjectFindElt(i22, HEAP32[i2 + 8 >> 2] | 0) | 0;
         HEAP32[i18 + (i7 << 2) >> 2] = i12;
        }
        i3 = HEAP32[i9 >> 2] | 0;
        L68 : do switch ((HEAP32[i3 + 4 >> 2] & 65535) << 16 >> 16) {
        case 11:
         {
          i5 = i20 + (i7 << 2) | 0;
          i6 = HEAP32[i5 >> 2] | 0;
          if (!i6) i32 = 88; else {
           i2 = (HEAP32[i18 + (i7 << 2) >> 2] | 0) + 4 | 0;
           _FcConfigAdd(i2, i6, 1, i8, HEAP32[i3 >> 2] | 0);
           i3 = HEAP32[i2 >> 2] | 0;
           L72 : do if (i3 | 0) {
            while (1) {
             if ((i3 | 0) == (i6 | 0)) break;
             i2 = HEAP32[i3 >> 2] | 0;
             if (!i2) break L72; else {
              i12 = i3;
              i3 = i2;
              i2 = i12;
             }
            }
            HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
            HEAP32[i6 >> 2] = 0;
            _FcValueListDestroy(i6);
           } while (0);
           HEAP32[i5 >> 2] = i8;
          }
          break;
         }
        case 12:
         {
          i32 = 88;
          break;
         }
        case 14:
         {
          i2 = HEAP32[i20 + (i7 << 2) >> 2] | 0;
          if (!i2) i32 = 101; else _FcConfigAdd((HEAP32[i18 + (i7 << 2) >> 2] | 0) + 4 | 0, i2, 0, i8, HEAP32[i3 >> 2] | 0);
          break;
         }
        case 13:
         {
          i32 = 101;
          break;
         }
        case 15:
         {
          i2 = HEAP32[i20 + (i7 << 2) >> 2] | 0;
          if (!i2) i32 = 106; else _FcConfigAdd((HEAP32[i18 + (i7 << 2) >> 2] | 0) + 4 | 0, i2, 1, i8, HEAP32[i3 >> 2] | 0);
          break;
         }
        case 16:
         {
          i32 = 106;
          break;
         }
        case 17:
         {
          i5 = HEAP32[i20 + (i7 << 2) >> 2] | 0;
          if (!i5) i32 = 114; else {
           i2 = (HEAP32[i18 + (i7 << 2) >> 2] | 0) + 4 | 0;
           i3 = HEAP32[i2 >> 2] | 0;
           if (i3 | 0) {
            while (1) {
             if ((i3 | 0) == (i5 | 0)) break;
             i2 = HEAP32[i3 >> 2] | 0;
             if (!i2) break L68; else {
              i12 = i3;
              i3 = i2;
              i2 = i12;
             }
            }
            HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
            HEAP32[i5 >> 2] = 0;
            _FcValueListDestroy(i5);
           }
          }
          break;
         }
        case 18:
         {
          i32 = 114;
          break;
         }
        default:
         _FcValueListDestroy(i8);
        } while (0);
        if ((i32 | 0) == 88) {
         i32 = 0;
         i2 = _FcPatternObjectFindElt(i22, HEAP32[i3 >> 2] | 0) | 0;
         if (i2 | 0) {
          i6 = i2 + 4 | 0;
          i2 = HEAP32[i6 >> 2] | 0;
          if (i2 | 0) do {
           i3 = i6;
           i5 = i2;
           while (1) {
            if ((i5 | 0) == (i2 | 0)) {
             i32 = 93;
             break;
            }
            i3 = HEAP32[i5 >> 2] | 0;
            if (!i3) break; else {
             i12 = i5;
             i5 = i3;
             i3 = i12;
            }
           }
           if ((i32 | 0) == 93) {
            i32 = 0;
            HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
            HEAP32[i2 >> 2] = 0;
            _FcValueListDestroy(i2);
            i2 = HEAP32[i6 >> 2] | 0;
           }
          } while ((i2 | 0) != 0);
         }
         i2 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
         do if (i8 | 0) {
          i3 = _FcPatternObjectInsertElt(i22, i2) | 0;
          if (!i3) break;
          _FcConfigAdd(i3 + 4 | 0, 0, 1, i8, i2);
         } while (0);
         HEAP32[i20 + (i7 << 2) >> 2] = 0;
        } else if ((i32 | 0) == 101) {
         i32 = 0;
         i2 = HEAP32[i3 >> 2] | 0;
         if (i8 | 0) {
          i3 = _FcPatternObjectInsertElt(i22, i2) | 0;
          if (i3 | 0) _FcConfigAdd(i3 + 4 | 0, 0, 0, i8, i2);
         }
        } else if ((i32 | 0) == 106) {
         i32 = 0;
         i2 = HEAP32[i3 >> 2] | 0;
         if (i8 | 0) {
          i3 = _FcPatternObjectInsertElt(i22, i2) | 0;
          if (i3 | 0) _FcConfigAdd(i3 + 4 | 0, 0, 1, i8, i2);
         }
        } else if ((i32 | 0) == 114) {
         i32 = 0;
         i2 = _FcPatternObjectFindElt(i22, HEAP32[i3 >> 2] | 0) | 0;
         if (i2 | 0) {
          i6 = i2 + 4 | 0;
          i2 = HEAP32[i6 >> 2] | 0;
          if (i2 | 0) do {
           i3 = i6;
           i5 = i2;
           while (1) {
            if ((i5 | 0) == (i2 | 0)) {
             i32 = 119;
             break;
            }
            i3 = HEAP32[i5 >> 2] | 0;
            if (!i3) break; else {
             i12 = i5;
             i5 = i3;
             i3 = i12;
            }
           }
           if ((i32 | 0) == 119) {
            i32 = 0;
            HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
            HEAP32[i2 >> 2] = 0;
            _FcValueListDestroy(i2);
            i2 = HEAP32[i6 >> 2] | 0;
           }
          } while ((i2 | 0) != 0);
         }
        }
        i2 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
        i3 = _FcPatternObjectFindElt(i22, i2) | 0;
        if (i3 | 0) if (!(HEAP32[i3 + 4 >> 2] | 0)) _FcPatternObjectDel(i22, i2) | 0;
        if (HEAP32[91917] & 4 | 0) {
         _printf(348501, i30) | 0;
         _FcPatternPrint(i22);
        }
        break;
       }
      case 1:
       {
        i12 = i1 + 8 | 0;
        i11 = HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] & -1025;
        if (HEAP32[91917] & 4 | 0) {
         _printf(348453, i28) | 0;
         _FcTestPrint(HEAP32[i12 >> 2] | 0);
        }
        if (i16) if (!(HEAP32[HEAP32[i12 >> 2] >> 2] | 0)) i10 = i23; else i32 = 42; else i32 = 42;
        if ((i32 | 0) == 42) {
         i32 = 0;
         i10 = i22;
        }
        if (!i10) i5 = 0; else i5 = _FcPatternObjectFindElt(i10, HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] | 0) | 0;
        i2 = i18 + (i11 << 2) | 0;
        if (!(HEAP32[i2 >> 2] | 0)) {
         i3 = HEAP32[i12 >> 2] | 0;
         if ((HEAP32[i3 >> 2] | 0) == (i24 | 0)) {
          HEAP32[i2 >> 2] = i5;
          HEAP32[i19 + (i11 << 2) >> 2] = i3;
         }
        }
        i3 = HEAP32[i12 >> 2] | 0;
        if (!i5) {
         if ((HEAP32[i3 + 4 >> 2] | 0) != 1) {
          i32 = 51;
          break L57;
         }
         HEAP32[i20 + (i11 << 2) >> 2] = 0;
         break L59;
        }
        i9 = i5 + 4 | 0;
        i7 = HEAP32[i9 >> 2] | 0;
        i2 = HEAP32[i3 + 16 >> 2] | 0;
        L147 : do if (!i2) i3 = 0; else {
         i8 = i3 + 4 | 0;
         i6 = i3 + 12 | 0;
         if (!i7) {
          while (1) {
           if ((HEAP32[i2 >> 2] & 65535 | 0) != 36) break;
           i2 = i2 + 8 | 0;
           _FcConfigEvaluate(i26, i10, i23, i24, HEAP32[i2 >> 2] | 0);
           HEAP32[i25 >> 2] = HEAP32[i26 >> 2];
           HEAP32[i25 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
           HEAP32[i25 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
           HEAP32[i25 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
           i2 = HEAP32[i2 + 4 >> 2] | 0;
           HEAP32[i21 >> 2] = HEAP32[i26 >> 2];
           HEAP32[i21 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
           HEAP32[i21 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
           HEAP32[i21 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
           _FcValueDestroy(i21);
           if (!i2) {
            i3 = 0;
            break L147;
           }
          }
          _FcConfigEvaluate(i27, i10, i23, i24, i2);
          HEAP32[i25 >> 2] = HEAP32[i27 >> 2];
          HEAP32[i25 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
          HEAP32[i25 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
          HEAP32[i25 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
          HEAP32[i21 >> 2] = HEAP32[i27 >> 2];
          HEAP32[i21 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
          HEAP32[i21 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
          HEAP32[i21 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
          _FcValueDestroy(i21);
          i3 = 0;
          break;
         } else i3 = 0;
         do {
          if ((HEAP32[i2 >> 2] & 65535 | 0) == 36) {
           i2 = i2 + 8 | 0;
           _FcConfigEvaluate(i26, i10, i23, i24, HEAP32[i2 >> 2] | 0);
           HEAP32[i25 >> 2] = HEAP32[i26 >> 2];
           HEAP32[i25 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
           HEAP32[i25 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
           HEAP32[i25 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
           i2 = HEAP32[i2 + 4 >> 2] | 0;
          } else {
           _FcConfigEvaluate(i27, i10, i23, i24, i2);
           HEAP32[i25 >> 2] = HEAP32[i27 >> 2];
           HEAP32[i25 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
           HEAP32[i25 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
           HEAP32[i25 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
           i2 = 0;
          }
          i5 = i7;
          do {
           if (!(_FcConfigCompareValue(i5 + 8 | 0, HEAP32[i6 >> 2] | 0, i25) | 0)) {
            if ((HEAP32[i8 >> 2] | 0) == 1) {
             i3 = 0;
             break;
            }
           } else i3 = (i3 | 0) == 0 ? i5 : i3;
           i35 = HEAP32[i5 >> 2] | 0;
           i34 = i35;
           i5 = (i34 & 1 | 0) == 0 ? i35 : (i34 & -2) + i5 | 0;
          } while ((i5 | 0) != 0);
          HEAP32[i21 >> 2] = HEAP32[i25 >> 2];
          HEAP32[i21 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
          HEAP32[i21 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
          HEAP32[i21 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
          _FcValueDestroy(i21);
         } while ((i2 | 0) != 0);
        } while (0);
        i2 = i20 + (i11 << 2) | 0;
        do if (!(HEAP32[i2 >> 2] | 0)) {
         if ((HEAP32[HEAP32[i12 >> 2] >> 2] | 0) != (i24 | 0)) break;
         HEAP32[i2 >> 2] = i3;
        } while (0);
        if (!i3) {
         i32 = 74;
         break L57;
        }
        switch (HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) {
        case 2:
         if ((i3 | 0) == (HEAP32[i9 >> 2] | 0)) break L59; else {
          i32 = 74;
          break L57;
         }
        case 3:
         if ((i3 | 0) == (HEAP32[i9 >> 2] | 0)) {
          i32 = 74;
          break L57;
         } else break L59;
        default:
         break L59;
        }
       }
      default:
       {}
      } while (0);
      i1 = HEAP32[i1 >> 2] | 0;
      if (!i1) break L56;
     }
     if ((i32 | 0) == 51) {
      i32 = 0;
      if (!(HEAP32[91917] & 4)) break;
      _puts(348478) | 0;
      break;
     } else if ((i32 | 0) == 74) {
      i32 = 0;
      if (!(HEAP32[91917] & 4)) break;
      _puts(348478) | 0;
      break;
     }
    } while (0);
    i4 = HEAP32[i4 >> 2] | 0;
   } while ((i4 | 0) != 0);
  }
  if (HEAP32[91917] & 4 | 0) {
   _printf(348525, i31) | 0;
   _FcPatternPrint(i22);
  }
  if (i17) {
   i2 = 1;
   i1 = i19;
  } else {
   i2 = 1;
   i1 = i19;
   i32 = 132;
  }
 }
 if ((i32 | 0) == 132) _free(i18);
 _free(i20);
 if (!i19) {
  i35 = i2;
  STACKTOP = i33;
  return i35 | 0;
 }
 _free(i1);
 i35 = i2;
 STACKTOP = i33;
 return i35 | 0;
}

function _fribidi_get_par_embedding_levels(i21, i18, i4, i22) {
 i21 = i21 | 0;
 i18 = i18 | 0;
 i4 = i4 | 0;
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i23 = 0, i24 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i24;
 L1 : do if (!i18) i1 = 1; else {
  i23 = __fribidi__run_list_encode_bidi_types__internal__(i21, i18) | 0;
  if (!i23) {
   i23 = 0;
   STACKTOP = i24;
   return i23 | 0;
  }
  i20 = HEAP32[i4 >> 2] | 0;
  i2 = i20 & 1;
  L6 : do if (!(i20 & 16)) {
   i1 = i23;
   do {
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    i3 = HEAP32[i1 + 16 >> 2] | 0;
    if ((i3 | 0) == 128) break L6;
   } while (!(i3 & 256 | 0));
   i2 = i3 & 1;
   HEAP32[i4 >> 2] = i2 | 272;
   i2 = i2 & 255;
  } while (0);
  i20 = i2 & 1 | 272;
  i17 = __fribidi__new_run_list__internal__() | 0;
  do if (i17) {
   i15 = _malloc(504) | 0;
   i19 = i23 + 4 | 0;
   i1 = HEAP32[i19 >> 2] | 0;
   i3 = i1 + 16 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   L15 : do if ((i4 | 0) != 128) {
    i14 = i5 + 4 | 0;
    i9 = i2;
    i5 = 64;
    i6 = 0;
    i7 = 0;
    i8 = 0;
    do {
     L19 : do if (!(i5 & 64)) while (1) {
      if (i4 & 1052672 | 0) {
       i13 = i1;
       i1 = i4;
       break L19;
      }
      if ((i4 | 0) == 2107456) break L15;
      HEAP8[i1 + 20 >> 0] = i9;
      HEAP32[i3 >> 2] = i5;
      i1 = HEAP32[i1 + 4 >> 2] | 0;
      i3 = i1 + 16 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if ((i4 | 0) == 128) break L15;
     } else {
      i3 = i4;
      while (1) {
       if (i3 & 1052672 | 0) {
        i13 = i1;
        i1 = i3;
        break L19;
       }
       if ((i3 | 0) == 2107456) break L15;
       HEAP8[i1 + 20 >> 0] = i9;
       i1 = HEAP32[i1 + 4 >> 2] | 0;
       i3 = HEAP32[i1 + 16 >> 2] | 0;
       if ((i3 | 0) == 128) break L15;
      }
     } while (0);
     if (!(i1 & 16)) {
      if ((i1 | 0) == 4128) {
       i1 = HEAP32[i13 + 12 >> 2] | 0;
       if (i1) {
        i3 = i9;
        i4 = i8;
        while (1) {
         do if (!i6) {
          i6 = 0;
          i8 = i7;
         } else if ((i7 | 0) > (i4 | 0)) {
          i8 = i7 + -1 | 0;
          break;
         } else {
          i6 = i6 + -1 | 0;
          i3 = HEAP8[i15 + (i6 << 3) + 4 >> 0] | 0;
          i5 = HEAP32[i15 + (i6 << 3) >> 2] | 0;
          i8 = i7;
          i4 = (i7 | 0) == (i4 | 0) ? 0 : i4;
          break;
         } while (0);
         i1 = i1 + -1 | 0;
         if (!i1) {
          i9 = i3;
          i7 = i8;
          i8 = i4;
          break;
         } else i7 = i8;
        }
       }
      }
     } else {
      i12 = i1 & 1;
      i10 = (i1 & 16384 | 0) == 0 ? 64 : i12 | 272;
      i1 = HEAP32[i13 + 12 >> 2] | 0;
      if (i1) {
       i11 = i12 | 2;
       i4 = i8;
       while (1) {
        i3 = (i11 + (i9 & 255) & 254) - i12 | 0;
        if ((i3 << 24 | 0) < 1040187392) {
         HEAP8[i15 + (i6 << 3) + 4 >> 0] = i9;
         HEAP32[i15 + (i6 << 3) >> 2] = i5;
         i3 = i3 & 255;
         i5 = i10;
         i6 = i6 + 1 | 0;
         i8 = i7;
         i4 = i9 << 24 >> 24 == 60 ? i7 : i4;
        } else {
         i3 = i9;
         i8 = i7 + 1 | 0;
        }
        i1 = i1 + -1 | 0;
        if (!i1) {
         i9 = i3;
         i7 = i8;
         i8 = i4;
         break;
        } else {
         i9 = i3;
         i7 = i8;
        }
       }
      }
     }
     HEAP8[i13 + 20 >> 0] = -1;
     i1 = i13 + 4 | 0;
     i3 = HEAP32[i1 >> 2] | 0;
     HEAP32[i14 >> 2] = i3;
     i4 = HEAP32[i13 >> 2] | 0;
     if (i4 | 0) {
      HEAP32[i4 + 4 >> 2] = i3;
      HEAP32[HEAP32[i1 >> 2] >> 2] = i4;
     }
     HEAP32[i13 >> 2] = HEAP32[i17 >> 2];
     HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] = i13;
     HEAP32[i1 >> 2] = i17;
     HEAP32[i17 >> 2] = i13;
     i1 = HEAP32[i14 >> 2] | 0;
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
    } while ((i4 | 0) != 128);
   } while (0);
   _free(i15);
   i1 = HEAP32[i19 >> 2] | 0;
   if (!i1) i3 = 0; else {
    i3 = HEAP32[i1 + 16 >> 2] | 0;
    if ((i3 | 0) == 128) i3 = i1; else {
     do {
      i4 = HEAP32[i1 >> 2] | 0;
      if ((HEAP32[i4 + 16 >> 2] | 0) == (i3 | 0)) if ((HEAP8[i4 + 20 >> 0] | 0) == (HEAP8[i1 + 20 >> 0] | 0)) {
       i15 = HEAP32[i1 + 4 >> 2] | 0;
       HEAP32[i4 + 4 >> 2] = i15;
       HEAP32[i15 >> 2] = i4;
       i15 = i4 + 12 | 0;
       HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i1 + 12 >> 2] | 0);
       __fribidi__free_run__internal__(i1);
       i1 = i4;
      }
      i1 = HEAP32[i1 + 4 >> 2] | 0;
      i3 = HEAP32[i1 + 16 >> 2] | 0;
     } while ((i3 | 0) != 128);
     i3 = HEAP32[i19 >> 2] | 0;
    }
   }
   i5 = i3 + 16 | 0;
   i4 = HEAP32[i5 >> 2] | 0;
   if ((i4 | 0) == 128) {
    i1 = i3;
    i3 = i3 + 16 | 0;
   } else {
    i11 = i20;
    i1 = i3;
    do {
     i8 = HEAP32[i1 >> 2] | 0;
     i3 = HEAP8[i8 + 20 >> 0] | 0;
     i6 = HEAP8[i1 + 20 >> 0] | 0;
     i9 = i3 << 24 >> 24 == i6 << 24 >> 24;
     if (i9) i10 = HEAP32[i8 + 16 >> 2] | 0; else i10 = HEAP8[(i3 << 24 >> 24 > i6 << 24 >> 24 ? i8 : i1) + 20 >> 0] & 1 | 272;
     i7 = HEAP32[i1 + 4 >> 2] | 0;
     i3 = HEAP8[i7 + 20 >> 0] | 0;
     if (i3 << 24 >> 24 == i6 << 24 >> 24) i3 = HEAP32[i7 + 16 >> 2] | 0; else i3 = HEAP8[(i3 << 24 >> 24 > i6 << 24 >> 24 ? i7 : i1) + 20 >> 0] & 1 | 272;
     i11 = (i10 & 16 | 0) == 0 ? i11 : i10;
     if ((i4 | 0) == 524320) {
      if (i9) {
       HEAP32[i8 + 4 >> 2] = i7;
       HEAP32[i7 >> 2] = i8;
       i15 = i8 + 12 | 0;
       HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i1 + 12 >> 2] | 0);
       __fribidi__free_run__internal__(i1);
       i1 = i8;
      } else HEAP32[i5 >> 2] = i10;
      if ((i10 | 0) == (i3 | 0)) {
       i3 = HEAP32[i1 + 4 >> 2] | 0;
       if ((HEAP8[i1 + 20 >> 0] | 0) == (HEAP8[i3 + 20 >> 0] | 0)) {
        i1 = HEAP32[i3 >> 2] | 0;
        i15 = HEAP32[i3 + 4 >> 2] | 0;
        HEAP32[i1 + 4 >> 2] = i15;
        HEAP32[i15 >> 2] = i1;
        i15 = i1 + 12 | 0;
        HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i3 + 12 >> 2] | 0);
        __fribidi__free_run__internal__(i3);
       }
      }
     } else if ((i4 | 0) == 544 & (i11 | 0) == 275) {
      HEAP32[i5 >> 2] = 546;
      if ((i3 | 0) == 524320) HEAP32[i7 + 16 >> 2] = 546;
     }
     i1 = HEAP32[i1 + 4 >> 2] | 0;
     i5 = i1 + 16 | 0;
     i4 = HEAP32[i5 >> 2] | 0;
    } while ((i4 | 0) != 128);
    i1 = HEAP32[i19 >> 2] | 0;
    i4 = HEAP32[i1 + 16 >> 2] | 0;
    i3 = i1 + 16 | 0;
    if ((i4 | 0) != 128) {
     i6 = 1;
     i5 = 64;
     i7 = i20;
     i13 = i1;
     i14 = HEAP8[i1 + 20 >> 0] | 0;
     i12 = i3;
     do {
      i8 = HEAP32[i13 >> 2] | 0;
      i9 = HEAP8[i8 + 20 >> 0] | 0;
      if (i9 << 24 >> 24 == i14 << 24 >> 24) i10 = HEAP32[i8 + 16 >> 2] | 0; else i10 = HEAP8[(i9 << 24 >> 24 > i14 << 24 >> 24 ? i8 : i13) + 20 >> 0] & 1 | 272;
      i9 = i13;
      i13 = HEAP32[i13 + 4 >> 2] | 0;
      i8 = i14;
      i14 = HEAP8[i13 + 20 >> 0] | 0;
      i11 = i14 << 24 >> 24 == i8 << 24 >> 24;
      if (i11) i8 = HEAP32[i13 + 16 >> 2] | 0; else i8 = HEAP8[(i14 << 24 >> 24 > i8 << 24 >> 24 ? i13 : i9) + 20 >> 0] & 1 | 272;
      i7 = (i10 & 16 | 0) == 0 ? i7 : i10;
      do if ((i4 | 0) == 275) {
       HEAP32[i12 >> 2] = 273;
       i6 = 1;
       i5 = 64;
      } else {
       if (i6) if ((i5 | 0) == (i8 | 0) & (((i5 & 512 | 0) == 0 | ((i4 & 327680 | 0) == 0 ? 1 : (HEAP32[i9 + 12 >> 2] | 0) != 1)) ^ 1)) if ((i5 | 0) == 544 | (i4 | 0) == 263200) {
        HEAP32[i12 >> 2] = i10;
        i4 = i10;
       }
       if ((i4 | 0) == 132128) {
        i16 = (i5 | 0) == 544;
        i6 = (i8 | 0) == 544;
        i5 = i16 | i6;
        i4 = i5 ? 544 : 132128;
        i6 = ((i16 | i6) ^ 1) & 1;
        i5 = i5 ? 544 : 64;
        i16 = 78;
       } else if (!(i4 & 1024)) i6 = 1; else {
        i6 = 1;
        i5 = 64;
        i16 = 78;
       }
       if ((i16 | 0) == 78) {
        i16 = 0;
        HEAP32[i12 >> 2] = i5;
       }
       if ((i7 | 0) == 272 & (i4 | 0) == 544) {
        HEAP32[i12 >> 2] = 272;
        i5 = i11 ? 544 : 64;
        i7 = 272;
        break;
       }
       i4 = HEAP32[i13 >> 2] | 0;
       i5 = HEAP8[i4 + 20 >> 0] | 0;
       if (i5 << 24 >> 24 == i14 << 24 >> 24) {
        i5 = HEAP32[i4 + 16 >> 2] | 0;
        break;
       } else {
        i5 = HEAP8[(i5 << 24 >> 24 > i14 << 24 >> 24 ? i4 : i13) + 20 >> 0] & 1 | 272;
        break;
       }
      } while (0);
      i12 = i13 + 16 | 0;
      i4 = HEAP32[i12 >> 2] | 0;
     } while ((i4 | 0) != 128);
    }
   }
   if (!i1) i1 = 0; else {
    i3 = HEAP32[i3 >> 2] | 0;
    if ((i3 | 0) != 128) {
     do {
      i4 = HEAP32[i1 >> 2] | 0;
      do if ((HEAP8[i4 + 20 >> 0] | 0) == (HEAP8[i1 + 20 >> 0] | 0)) {
       i5 = HEAP32[i4 + 16 >> 2] | 0;
       if ((i5 | 0) != (i3 | 0)) if (!(i3 & 64 & i5)) break;
       i16 = HEAP32[i1 + 4 >> 2] | 0;
       HEAP32[i4 + 4 >> 2] = i16;
       HEAP32[i16 >> 2] = i4;
       i16 = i4 + 12 | 0;
       HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i1 + 12 >> 2] | 0);
       __fribidi__free_run__internal__(i1);
       i1 = i4;
      } while (0);
      i1 = HEAP32[i1 + 4 >> 2] | 0;
      i3 = HEAP32[i1 + 16 >> 2] | 0;
     } while ((i3 | 0) != 128);
     i1 = HEAP32[i19 >> 2] | 0;
    }
   }
   i9 = i1 + 16 | 0;
   i3 = HEAP32[i9 >> 2] | 0;
   if ((i3 | 0) != 128) {
    i8 = i1;
    i10 = HEAP8[i1 + 20 >> 0] | 0;
    i7 = i9;
    do {
     i4 = HEAP32[i8 >> 2] | 0;
     i5 = HEAP8[i4 + 20 >> 0] | 0;
     if (i5 << 24 >> 24 == i10 << 24 >> 24) if (!(HEAP32[i4 + 16 >> 2] & 512)) i6 = HEAP32[i4 + 16 >> 2] | 0; else i6 = 273; else i6 = HEAP8[(i5 << 24 >> 24 > i10 << 24 >> 24 ? i4 : i8) + 20 >> 0] & 1 | 272;
     i4 = i8;
     i8 = HEAP32[i8 + 4 >> 2] | 0;
     i5 = i10;
     i10 = HEAP8[i8 + 20 >> 0] | 0;
     if (i10 << 24 >> 24 == i5 << 24 >> 24) if (!(HEAP32[i8 + 16 >> 2] & 512)) i4 = HEAP32[i8 + 16 >> 2] | 0; else i4 = 273; else i4 = HEAP8[(i10 << 24 >> 24 > i5 << 24 >> 24 ? i8 : i4) + 20 >> 0] & 1 | 272;
     if ((i3 & 576 | 0) == 64) {
      if ((i6 | 0) == (i4 | 0)) i3 = i6; else i3 = i5 & 1 | 272;
      HEAP32[i7 >> 2] = i3;
     }
     i7 = i8 + 16 | 0;
     i3 = HEAP32[i7 >> 2] | 0;
    } while ((i3 | 0) != 128);
   }
   if (!i1) i1 = 0; else {
    i3 = HEAP32[i9 >> 2] | 0;
    if ((i3 | 0) != 128) {
     do {
      i4 = HEAP32[i1 >> 2] | 0;
      if ((HEAP32[i4 + 16 >> 2] | 0) == (i3 | 0)) if ((HEAP8[i4 + 20 >> 0] | 0) == (HEAP8[i1 + 20 >> 0] | 0)) {
       i16 = HEAP32[i1 + 4 >> 2] | 0;
       HEAP32[i4 + 4 >> 2] = i16;
       HEAP32[i16 >> 2] = i4;
       i16 = i4 + 12 | 0;
       HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i1 + 12 >> 2] | 0);
       __fribidi__free_run__internal__(i1);
       i1 = i4;
      }
      i1 = HEAP32[i1 + 4 >> 2] | 0;
      i3 = HEAP32[i1 + 16 >> 2] | 0;
     } while ((i3 | 0) != 128);
     i1 = HEAP32[i19 >> 2] | 0;
    }
   }
   i4 = HEAP32[i1 + 16 >> 2] | 0;
   i9 = (i4 | 0) == 128;
   if (i9) i11 = i2; else {
    i3 = i2;
    i8 = i1;
    i7 = i4;
    do {
     i6 = i8 + 20 | 0;
     i5 = HEAP8[i6 >> 0] | 0;
     if (!(i7 & 512)) i5 = ((i5 ^ i7) & 1) + i5 | 0; else i5 = i5 + 2 & -2;
     i7 = i5 & 255;
     HEAP8[i6 >> 0] = i7;
     i3 = (i5 << 24 >> 24 | 0) > (i3 << 24 >> 24 | 0) ? i7 : i3;
     i8 = HEAP32[i8 + 4 >> 2] | 0;
     i7 = HEAP32[i8 + 16 >> 2] | 0;
    } while ((i7 | 0) != 128);
    i11 = i3;
   }
   if (!((i1 | 0) == 0 | i9)) do {
    i3 = HEAP32[i1 >> 2] | 0;
    if ((HEAP32[i3 + 16 >> 2] | 0) == (i4 | 0)) if ((HEAP8[i3 + 20 >> 0] | 0) == (HEAP8[i1 + 20 >> 0] | 0)) {
     i16 = HEAP32[i1 + 4 >> 2] | 0;
     HEAP32[i3 + 4 >> 2] = i16;
     HEAP32[i16 >> 2] = i3;
     i16 = i3 + 12 | 0;
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i1 + 12 >> 2] | 0);
     __fribidi__free_run__internal__(i1);
     i1 = i3;
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    i4 = HEAP32[i1 + 16 >> 2] | 0;
   } while ((i4 | 0) != 128);
   if ((HEAP32[i17 + 4 >> 2] | 0) == (i17 | 0)) i10 = i17; else {
    if (!(__fribidi__shadow_run_list__internal__(i23, i17, 1) | 0)) break;
    i1 = HEAP32[i19 >> 2] | 0;
    if ((i1 | 0) != (i23 | 0)) {
     i3 = i1 + 20 | 0;
     if ((HEAP8[i3 >> 0] | 0) == -1) HEAP8[i3 >> 0] = i2;
    }
    if ((HEAP32[i1 + 16 >> 2] | 0) == 128) i10 = 0; else {
     do {
      i3 = i1 + 20 | 0;
      if ((HEAP8[i3 >> 0] | 0) == -1) HEAP8[i3 >> 0] = HEAP8[(HEAP32[i1 >> 2] | 0) + 20 >> 0] | 0;
      i1 = HEAP32[i1 + 4 >> 2] | 0;
     } while ((HEAP32[i1 + 16 >> 2] | 0) != 128);
     i10 = 0;
    }
   }
   i9 = __fribidi__new_run_list__internal__() | 0;
   L193 : do if (!i9) i1 = 0; else {
    i1 = i18 + -1 | 0;
    L195 : do if ((i1 | 0) > -2) {
     i6 = i9;
     i7 = i1;
     i5 = 1;
     i8 = i1;
     L196 : while (1) {
      if ((i8 | 0) > -1) i3 = HEAP32[i21 + (i8 << 2) >> 2] | 0; else i3 = 64;
      i18 = (i5 | 0) != 0;
      i4 = i18 | (i3 & 8192 | 0) == 0;
      i1 = i4 ? i5 : 1;
      i4 = i4 ? i7 : i8;
      do if (i18) {
       if (i3 & 9449472 | 0) {
        i3 = i6;
        i4 = i7;
        i1 = i5;
        break;
       }
       i3 = __fribidi__new_run__internal__() | 0;
       if (!i3) break L196;
       HEAP32[i3 + 8 >> 2] = i8 + 1;
       HEAP32[i3 + 12 >> 2] = i7 - i8;
       HEAP32[i3 + 16 >> 2] = i20;
       HEAP8[i3 + 20 >> 0] = i2;
       i4 = HEAP32[i3 >> 2] | 0;
       i1 = i3 + 4 | 0;
       if (i4 | 0) {
        HEAP32[i4 + 4 >> 2] = HEAP32[i1 >> 2];
        HEAP32[HEAP32[i1 >> 2] >> 2] = i4;
       }
       HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
       HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = i3;
       HEAP32[i1 >> 2] = i6;
       HEAP32[i6 >> 2] = i3;
       i4 = i7;
       i1 = 0;
      } else i3 = i6; while (0);
      i8 = i8 + -1 | 0;
      if ((i8 | 0) <= -2) break L195; else {
       i6 = i3;
       i7 = i4;
       i5 = i1;
      }
     }
     __fribidi__free_run_list__internal__(i9);
     i1 = 0;
     break L193;
    } while (0);
    if (!(__fribidi__shadow_run_list__internal__(i23, i9, 0) | 0)) i1 = 0; else {
     i2 = HEAP32[i19 >> 2] | 0;
     if ((HEAP32[i2 + 16 >> 2] | 0) == 128) i1 = 1; else {
      i1 = 0;
      do {
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if (i3) {
        _memset(i22 + i1 | 0, HEAP8[i2 + 20 >> 0] | 0, i3 | 0) | 0;
        i1 = i1 + i3 | 0;
       }
       i2 = HEAP32[i2 + 4 >> 2] | 0;
      } while ((HEAP32[i2 + 16 >> 2] | 0) != 128);
      i1 = 1;
     }
    }
   } while (0);
   __fribidi__free_run_list__internal__(i23);
   if (i10 | 0) __fribidi__free_run_list__internal__(i10);
   if (!i1) i1 = 0; else {
    i1 = (i11 & 255) + 1 | 0;
    break L1;
   }
   STACKTOP = i24;
   return i1 | 0;
  } while (0);
  __fribidi__free_run_list__internal__(i23);
  i23 = 0;
  STACKTOP = i24;
  return i23 | 0;
 } while (0);
 i23 = i1 & 255;
 STACKTOP = i24;
 return i23 | 0;
}

function _iconv(i1, i28, i29, i30, i31) {
 i1 = i1 | 0;
 i28 = i28 | 0;
 i29 = i29 | 0;
 i30 = i30 | 0;
 i31 = i31 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i39 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i32 = i39;
 i33 = i39 + 16 | 0;
 i34 = i39 + 12 | 0;
 i35 = i39 + 8 | 0;
 i36 = i39 + 20 | 0;
 i19 = i1;
 i1 = i19 & 65535;
 i19 = 362407 + (i19 >>> 16) | 0;
 i17 = i19 + 1 | 0;
 i20 = 362407 + i1 | 0;
 i18 = i20 + 1 | 0;
 i37 = i32;
 HEAP32[i37 >> 2] = 0;
 HEAP32[i37 + 4 >> 2] = 0;
 i19 = HEAP8[i19 >> 0] | 0;
 i20 = HEAP8[i20 >> 0] | 0;
 i37 = (___pthread_self_8() | 0) + 188 | 0;
 i38 = HEAP32[i37 >> 2] | 0;
 do if (!i28) i1 = 0; else if (!(HEAP32[i28 >> 2] | 0)) i1 = 0; else {
  i2 = HEAP32[i29 >> 2] | 0;
  if (!i2) i1 = 0; else {
   HEAP32[i37 >> 2] = 90772;
   i21 = i19 & 255;
   i22 = i21 + 128 | 0;
   i23 = (i21 & 254 | 0) == 196;
   i24 = i19 << 24 >> 24 == -38;
   i25 = i19 << 24 >> 24 == -40;
   i26 = i20 & 255;
   i11 = i26 + -192 | 0;
   i27 = i11 >>> 0 > 8;
   i10 = i1;
   i11 = 366773 + i11 | 0;
   i12 = i26 + 128 | 0;
   i13 = 128 - i26 | 0;
   i14 = (i13 | 0) == 0;
   i15 = (i19 & -2) << 24 >> 24 == -60;
   i16 = (i21 + -192 | 0) >>> 0 < 7;
   i1 = 0;
   i7 = HEAP32[i28 >> 2] | 0;
   i9 = i2;
   L5 : while (1) {
    i6 = HEAP8[i7 >> 0] | 0;
    i3 = i6 & 255;
    L7 : do if (i6 << 24 >> 24 < 0 | i16) {
     do switch (i19 << 24 >> 24) {
     case -57:
      {
       i1 = 84;
       i8 = 114;
       break L5;
      }
     case -56:
      {
       i2 = _mbrtowc(i33, i7, i9, i32) | 0;
       switch (i2 | 0) {
       case -1:
        {
         i1 = 84;
         i8 = 114;
         break L5;
        }
       case -2:
        {
         i1 = 22;
         break L5;
        }
       case 0:
        {
         i2 = 1;
         break;
        }
       default:
        {}
       }
       i3 = HEAP32[i33 >> 2] | 0;
       i8 = 86;
       break L7;
      }
     case -58:
      {
       if (i9 >>> 0 < 4) {
        i1 = 22;
        break L5;
       }
       i3 = HEAP32[i7 >> 2] | 0;
       i8 = 14;
       break;
      }
     case -61:
     case -64:
      {
       if (i9 >>> 0 < 4) {
        i1 = 22;
        break L5;
       }
       i3 = _get_32(i7, i21) | 0;
       i8 = 14;
       break;
      }
     case -63:
     case -62:
     case -59:
     case -60:
      {
       if (i9 >>> 0 < 2) {
        i1 = 22;
        break L5;
       }
       i3 = _get_16(i7, i21) | 0;
       switch (i3 & -1024 | 0) {
       case 56320:
        {
         i1 = 84;
         i8 = 114;
         break L5;
        }
       case 55296:
        break;
       default:
        {
         i2 = 2;
         i8 = 86;
         break L7;
        }
       }
       if (i23) {
        i1 = 84;
        i8 = 114;
        break L5;
       }
       if (i9 >>> 0 < 4) {
        i1 = 22;
        break L5;
       }
       i4 = (_get_16(i7 + 2 | 0, i21) | 0) + -56320 | 0;
       if (i4 >>> 0 > 1023) {
        i1 = 84;
        i8 = 114;
        break L5;
       }
       i2 = 4;
       i3 = (i3 << 10) + -56557568 + i4 | 0;
       i8 = 86;
       break L7;
      }
     case -47:
      {
       if ((i3 + -161 | 0) >>> 0 < 63) {
        i2 = 1;
        i3 = i3 + 65216 | 0;
        i8 = 86;
        break L7;
       }
       if (i9 >>> 0 < 2) {
        i1 = 22;
        break L5;
       }
       i4 = HEAP8[i7 + 1 >> 0] | 0;
       i5 = i4 & 255;
       i2 = i3 + -129 | 0;
       if (i2 >>> 0 >= 31) {
        if ((i3 & 240 | 0) != 224) {
         i1 = 84;
         i8 = 114;
         break L5;
        }
        i2 = i3 + -193 | 0;
       }
       i2 = i2 << 1;
       i3 = i5 + -64 | 0;
       if (i3 >>> 0 < 95) {
        if (i4 << 24 >> 24 == 127) {
         i1 = 84;
         i8 = 114;
         break L5;
        }
        i3 = i3 + (i4 << 24 >> 24 >> 7 << 24 >> 24) | 0;
       } else {
        i3 = i5 + -159 | 0;
        i8 = i3 >>> 0 < 94;
        i3 = i8 ? i3 : i5;
        i2 = i2 | i8 & 1;
       }
       i3 = HEAP16[125118 + (i2 * 188 | 0) + (i3 << 1) >> 1] | 0;
       if (!(i3 << 16 >> 16)) {
        i1 = 84;
        i8 = 114;
        break L5;
       } else {
        i2 = 2;
        i3 = i3 & 65535;
        i8 = 86;
        break L7;
       }
      }
     case -48:
      {
       if (i9 >>> 0 < 2) {
        i1 = 22;
        break L5;
       }
       i4 = HEAPU8[i7 + 1 >> 0] | 0;
       i5 = i4 + -161 | 0;
       if (i6 << 24 >> 24 == -114) {
        if (i5 >>> 0 > 62) {
         i1 = 84;
         i8 = 114;
         break L5;
        }
        i2 = 2;
        i3 = i4 + 65216 | 0;
        i8 = 86;
        break L7;
       } else {
        i2 = i3 + -161 | 0;
        if (i2 >>> 0 > 83 | i5 >>> 0 > 93) {
         i1 = 84;
         i8 = 114;
         break L5;
        }
        i3 = HEAP16[125118 + (i2 * 188 | 0) + (i5 << 1) >> 1] | 0;
        if (!(i3 << 16 >> 16)) {
         i1 = 84;
         i8 = 114;
         break L5;
        } else {
         i2 = 2;
         i3 = i3 & 65535;
         i8 = 86;
         break L7;
        }
       }
      }
     case -38:
      {
       if ((i6 & 255) < 161) {
        i1 = 84;
        i8 = 114;
        break L5;
       }
       break;
      }
     case -40:
     case -39:
      break;
     case -32:
      {
       if (i9 >>> 0 < 2) {
        i1 = 22;
        break L5;
       }
       i2 = HEAPU8[i7 + 1 >> 0] | 0;
       i4 = i2 + -64 | 0;
       if (i4 >>> 0 > 190 | (i2 + -127 | 0) >>> 0 < 34) {
        i1 = 84;
        i8 = 114;
        break L5;
       }
       i4 = i4 >>> 0 > 62 ? i2 + -98 | 0 : i4;
       i2 = i3 + -161 | 0;
       if (i2 >>> 0 <= 88) {
        i3 = HEAPU16[199134 + (i2 * 314 | 0) + (i4 << 1) >> 1] | 0;
        if ((i2 | 0) == 39) {
         i2 = i4 + -58 | 0;
         if (i2 >>> 0 < 9) i2 = 261 >>> (i2 & 511) & 511; else i2 = 0;
        } else i2 = 0;
        i3 = i2 << 17 & 131072 | i3;
        if (!i3) {
         i1 = 84;
         i8 = 114;
         break L5;
        } else {
         i2 = 2;
         i8 = 86;
         break L7;
        }
       }
       i2 = i3 + -135 | 0;
       if (i2 >>> 0 > 119) {
        i1 = 84;
        i8 = 114;
        break L5;
       }
       i3 = i4 + (((i6 & 255) < 161 ? i2 : i3 + -224 | 0) * 157 | 0) | 0;
       i4 = HEAPU16[188790 + (i3 << 1) >> 1] | 0;
       i3 = (HEAPU16[188790 + ((i3 >>> 4) + 4867 << 1) >> 1] | 0) >>> (i3 & 15) << 17 & 131072 | i4;
       if ((i3 & 196352 | 0) != 56320) if (!i3) {
        i1 = 84;
        i8 = 114;
        break L5;
       } else {
        i2 = 2;
        i8 = 86;
        break L7;
       }
       if (i27) i2 = 2; else i2 = HEAP8[i11 >> 0] | 0;
       if (i2 >>> 0 > (HEAP32[i31 >> 2] | 0) >>> 0) {
        i1 = 7;
        i8 = 114;
        break L5;
       }
       HEAP32[i34 >> 2] = 366783 + (i4 & 255);
       HEAP32[i35 >> 2] = 4;
       i2 = 2;
       i1 = (_iconv(i10, i34, i35, i30, i31) | 0) + i1 | 0;
       break L7;
      }
     case -24:
      {
       if (i9 >>> 0 < 2) {
        i1 = 22;
        break L5;
       }
       i4 = HEAP8[i7 + 1 >> 0] | 0;
       i5 = i4 & 255;
       i6 = i3 + -161 | 0;
       i2 = i5 + -161 | 0;
       if (!(i6 >>> 0 > 92 | i2 >>> 0 > 93)) {
        i3 = HEAP16[227080 + (i6 * 188 | 0) + (i2 << 1) >> 1] | 0;
        if (!(i3 << 16 >> 16)) {
         i1 = 84;
         i8 = 114;
         break L5;
        } else {
         i2 = 2;
         i3 = i3 & 65535;
         i8 = 86;
         break L7;
        }
       }
       i3 = i3 + -129 | 0;
       if (i3 >>> 0 > 92) {
        i1 = 84;
        i8 = 114;
        break L5;
       }
       if (i3 >>> 0 > 68 & (i4 & 255) > 82) {
        i1 = 84;
        i8 = 114;
        break L5;
       }
       i2 = i5 + -65 | 0;
       do if (i2 >>> 0 >= 26) {
        if ((i5 + -97 | 0) >>> 0 < 26) {
         i2 = i5 + -71 | 0;
         break;
        }
        if ((i5 + -129 | 0) >>> 0 >= 126) {
         i1 = 84;
         i8 = 114;
         break L5;
        }
        i2 = i5 + -77 | 0;
       } while (0);
       i3 = (i3 >>> 0 < 32 ? i3 * 178 | 0 : (i6 * 84 | 0) + 5696 | 0) + 44032 + i2 | 0;
       if (i3 >>> 0 < 44032) {
        i2 = 2;
        i8 = 86;
        break L7;
       } else i7 = 44032;
       while (1) {
        i6 = i3 - i7 | 0;
        i4 = 0;
        i2 = 0;
        do {
         i5 = 0;
         do {
          i2 = (((HEAPU16[227080 + (i4 * 188 | 0) + (i5 << 1) >> 1] | 0) - i7 | 0) >>> 0 <= i6 >>> 0 & 1) + i2 | 0;
          i5 = i5 + 1 | 0;
         } while ((i5 | 0) != 94);
         i4 = i4 + 1 | 0;
        } while ((i4 | 0) != 93);
        i7 = i3 + 1 | 0;
        i3 = i2 + i3 | 0;
        if (i3 >>> 0 < i7 >>> 0) {
         i2 = 2;
         i8 = 86;
         break L7;
        }
       }
      }
     default:
      {
       if (i3 >>> 0 < i22 >>> 0) {
        i2 = 1;
        i8 = 86;
        break L7;
       }
       i8 = i3 - i22 | 0;
       i7 = (i8 * 5 | 0) >>> 2;
       i8 = i8 << 1 & 6;
       i8 = HEAPU8[i17 + (i7 + 1) >> 0] << 8 - i8 & 1023 | (HEAPU8[i17 + i7 >> 0] | 0) >>> i8;
       i3 = (i8 | 0) == 0 ? i3 : HEAPU16[244564 + (i8 << 1) >> 1] | 0;
       if ((i3 | 0) == 1) {
        i1 = 84;
        i8 = 114;
        break L5;
       } else {
        i2 = 1;
        i8 = 86;
        break L7;
       }
      }
     } while (0);
     if ((i8 | 0) == 14) if (i3 >>> 0 > 1114111 | (i3 & -2048 | 0) == 55296) {
      i1 = 84;
      i8 = 114;
      break L5;
     } else {
      i2 = 4;
      i8 = 86;
      break;
     }
     i4 = i3 + -129 | 0;
     if (i4 >>> 0 > 125) {
      i1 = 84;
      i8 = 114;
      break L5;
     }
     if (i9 >>> 0 < 2) {
      i1 = 22;
      break L5;
     }
     i2 = HEAP8[i7 + 1 >> 0] | 0;
     i5 = i2 & 255;
     if (i24 & (i2 & 255) < 161) {
      i1 = 84;
      i8 = 114;
      break L5;
     }
     i3 = i5 + -64 | 0;
     if (!(i2 << 24 >> 24 == 127 | i3 >>> 0 > 190)) {
      i2 = 2;
      i3 = HEAPU16[140910 + (i4 * 380 | 0) + ((i3 >>> 0 > 63 ? i5 + -65 | 0 : i3) << 1) >> 1] | 0;
      i8 = 86;
      break;
     }
     if (!(i25 & (i5 + -48 | 0) >>> 0 < 10)) {
      i1 = 84;
      i8 = 114;
      break L5;
     }
     if (i9 >>> 0 < 4) {
      i1 = 22;
      break L5;
     }
     i3 = (HEAPU8[i7 + 2 >> 0] | 0) + -129 | 0;
     if (i3 >>> 0 > 126) {
      i1 = 84;
      i8 = 114;
      break L5;
     }
     i2 = (HEAPU8[i7 + 3 >> 0] | 0) + -48 | 0;
     if (i2 >>> 0 > 9) {
      i1 = 84;
      i8 = 114;
      break L5;
     }
     i7 = 0;
     i3 = ((i5 + (i4 * 10 | 0) | 0) * 1260 | 0) + -60352 + (i3 * 10 | 0) + i2 | 0;
     do {
      i6 = i3 - i7 | 0;
      i5 = 0;
      i2 = 0;
      do {
       i4 = 0;
       do {
        i2 = (((HEAPU16[140910 + (i5 * 380 | 0) + (i4 << 1) >> 1] | 0) - i7 | 0) >>> 0 <= i6 >>> 0 & 1) + i2 | 0;
        i4 = i4 + 1 | 0;
       } while ((i4 | 0) != 190);
       i5 = i5 + 1 | 0;
      } while ((i5 | 0) != 126);
      i7 = i3 + 1 | 0;
      i3 = i2 + i3 | 0;
     } while (i3 >>> 0 >= i7 >>> 0);
     i2 = 4;
     i8 = 86;
    } else {
     i2 = 1;
     i8 = 86;
    } while (0);
    if ((i8 | 0) == 86) {
     L111 : do switch (i20 << 24 >> 24) {
     case -58:
      {
       i4 = HEAP32[i31 >> 2] | 0;
       if (i4 >>> 0 < 4) {
        i1 = 7;
        i8 = 114;
        break L5;
       }
       i8 = HEAP32[i30 >> 2] | 0;
       HEAP32[i8 >> 2] = i3;
       HEAP32[i30 >> 2] = i8 + 4;
       i3 = 4;
       i8 = 111;
       break;
      }
     case -56:
      {
       i5 = HEAP32[i31 >> 2] | 0;
       if (i5 >>> 0 < 4) {
        i3 = _wctomb(i36, i3) | 0;
        if (i5 >>> 0 < i3 >>> 0) {
         i8 = 92;
         break L5;
        }
        i4 = HEAP32[i30 >> 2] | 0;
        _memcpy(i4 | 0, i36 | 0, i3 | 0) | 0;
       } else {
        i4 = HEAP32[i30 >> 2] | 0;
        i3 = _wctomb(i4, i3) | 0;
       }
       HEAP32[i30 >> 2] = i4 + i3;
       i4 = i5;
       i8 = 111;
       break;
      }
     case -57:
      {
       if (i3 >>> 0 > 127) i8 = 96; else i8 = 97;
       break;
      }
     case -63:
     case -62:
     case -59:
     case -60:
      {
       i4 = HEAP32[i31 >> 2] | 0;
       if (i15 | i3 >>> 0 < 65536) {
        if (i4 >>> 0 < 2) {
         i1 = 7;
         i8 = 114;
         break L5;
        }
        i8 = HEAP32[i30 >> 2] | 0;
        _put_16(i8, i3 >>> 0 > 65535 ? 65533 : i3, i26);
        HEAP32[i30 >> 2] = i8 + 2;
        i3 = 2;
        i8 = 111;
        break L111;
       } else {
        if (i4 >>> 0 < 4) {
         i1 = 7;
         i8 = 114;
         break L5;
        }
        i8 = i3 + -65536 | 0;
        i3 = HEAP32[i30 >> 2] | 0;
        _put_16(i3, i8 >>> 10 | 55296, i26);
        _put_16(i3 + 2 | 0, i8 & 1023 | 56320, i26);
        HEAP32[i30 >> 2] = i3 + 4;
        i3 = 4;
        i8 = 111;
        break L111;
       }
      }
     case -61:
     case -64:
      {
       i4 = HEAP32[i31 >> 2] | 0;
       if (i4 >>> 0 < 4) {
        i1 = 7;
        i8 = 114;
        break L5;
       }
       i8 = HEAP32[i30 >> 2] | 0;
       _put_32(i8, i3, i26);
       HEAP32[i30 >> 2] = i8 + 4;
       i3 = 4;
       i8 = 111;
       break;
      }
     default:
      i8 = 97;
     } while (0);
     L129 : while (1) if ((i8 | 0) == 96) {
      i1 = i1 + 1 | 0;
      i3 = 42;
      i8 = 97;
      continue;
     } else if ((i8 | 0) == 97) {
      i5 = HEAP32[i31 >> 2] | 0;
      if (!i5) {
       i1 = 7;
       i8 = 114;
       break L5;
      }
      if (i3 >>> 0 >= i12 >>> 0) {
       if (i14) {
        i8 = 96;
        continue;
       } else i4 = 0;
       while (1) {
        i7 = (i4 * 5 | 0) >>> 2;
        i8 = i4 << 1 & 6;
        if ((i3 | 0) == (HEAPU16[244564 + ((HEAPU8[i18 + (i7 + 1) >> 0] << 8 - i8 & 1023 | (HEAPU8[i18 + i7 >> 0] | 0) >>> i8) << 1) >> 1] | 0)) break;
        i4 = i4 + 1 | 0;
        if (i4 >>> 0 >= i13 >>> 0) {
         i8 = 96;
         continue L129;
        }
       }
       i3 = i4 + 128 | 0;
      }
      i4 = HEAP32[i30 >> 2] | 0;
      HEAP32[i30 >> 2] = i4 + 1;
      HEAP8[i4 >> 0] = i3;
      i3 = 1;
      i4 = i5;
      i8 = 111;
      continue;
     } else if ((i8 | 0) == 111) {
      i8 = 0;
      HEAP32[i31 >> 2] = i4 - i3;
      break;
     }
    }
    i7 = (HEAP32[i28 >> 2] | 0) + i2 | 0;
    HEAP32[i28 >> 2] = i7;
    i9 = i9 - i2 | 0;
    HEAP32[i29 >> 2] = i9;
    if (!i9) {
     i8 = 113;
     break;
    }
   }
   if ((i8 | 0) == 92) i1 = 7; else if ((i8 | 0) == 113) {
    HEAP32[i37 >> 2] = i38;
    break;
   }
   i36 = ___errno_location() | 0;
   HEAP32[i36 >> 2] = i1;
   HEAP32[i37 >> 2] = i38;
   i1 = -1;
  }
 } while (0);
 STACKTOP = i39;
 return i1 | 0;
}

function _af_latin_hints_apply(i23, i27, i17) {
 i23 = i23 | 0;
 i27 = i27 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i24 = i28 + 8 | 0;
 i25 = i28 + 4 | 0;
 i26 = i28;
 i1 = _af_glyph_hints_reload(i23, i27) | 0;
 if (i1 | 0) {
  i27 = i1;
  STACKTOP = i28;
  return i27 | 0;
 }
 i22 = i17 + 24 | 0;
 i21 = i23 + 2980 | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 do if ((i1 & 1 | 0) == 0 | (HEAP32[i22 >> 2] | 0) == 1 & (i1 & 8 | 0) == 0) {
  i1 = _af_latin_hints_detect_features(i23, HEAP32[i17 + 52 >> 2] | 0, i17 + 56 | 0, 0) | 0;
  if (!i1) {
   i1 = HEAP32[i21 >> 2] | 0;
   break;
  } else {
   i27 = i1;
   STACKTOP = i28;
   return i27 | 0;
  }
 } while (0);
 if (!(i1 & 2)) {
  i1 = _af_latin_hints_detect_features(i23, HEAP32[i17 + 1624 >> 2] | 0, i17 + 1628 | 0, 1) | 0;
  if (i1 | 0) {
   i27 = i1;
   STACKTOP = i28;
   return i27 | 0;
  }
  i1 = HEAP32[i23 + 1532 >> 2] | 0;
  i19 = HEAP32[i23 + 1524 >> 2] | 0;
  i12 = i1 + (i19 * 48 | 0) | 0;
  i13 = HEAP32[i17 + 1616 >> 2] | 0;
  if ((i19 | 0) > 0) {
   i14 = i17 + 40 | 0;
   i15 = i17 + 1832 | 0;
   i16 = i23 + 1536 | 0;
   do {
    i2 = _FT_MulFix(((HEAP32[i14 >> 2] | 0) >>> 0) / 40 | 0, i13) | 0;
    if (HEAP32[i15 >> 2] | 0) {
     i10 = i1 + 13 | 0;
     i11 = i1 + 12 | 0;
     i9 = 0;
     i5 = 0;
     i3 = 0;
     i2 = (i2 | 0) < 32 ? i2 : 32;
     do {
      i8 = i17 + 1836 + (i9 * 28 | 0) | 0;
      i4 = HEAP32[i17 + 1836 + (i9 * 28 | 0) + 24 >> 2] | 0;
      if (i4 & 1) {
       i19 = i4 >>> 2 & 1;
       i6 = i19 & 255;
       i7 = (i4 & 2 | 0) != 0;
       if (!((i19 | 0) == 0 & (i7 ^ (HEAP8[i10 >> 0] | 0) == (HEAP32[i16 >> 2] | 0) ^ 1))) {
        i19 = (HEAP16[i1 >> 1] | 0) - (HEAP32[i8 >> 2] | 0) | 0;
        i19 = _FT_MulFix((i19 | 0) < 0 ? 0 - i19 | 0 : i19, i13) | 0;
        i18 = (i19 | 0) < (i2 | 0);
        i2 = i18 ? i19 : i2;
        i3 = i18 ? i6 : i3;
        i5 = i18 ? i8 : i5;
        if (!(i6 << 24 >> 24 != 0 | ((i19 | 0) == 0 | (HEAP8[i11 >> 0] & 1) == 0))) {
         i4 = HEAP16[i1 >> 1] | 0;
         if (i7 ^ (i4 | 0) < (HEAP32[i8 >> 2] | 0)) {
          i8 = i17 + 1836 + (i9 * 28 | 0) + 12 | 0;
          i19 = i4 - (HEAP32[i8 >> 2] | 0) | 0;
          i19 = _FT_MulFix((i19 | 0) < 0 ? 0 - i19 | 0 : i19, i13) | 0;
          i18 = (i19 | 0) < (i2 | 0);
          i5 = i18 ? i8 : i5;
          i3 = i18 ? 0 : i3;
          i2 = i18 ? i19 : i2;
         }
        }
       }
      }
      i9 = i9 + 1 | 0;
     } while (i9 >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0);
     if (i5 | 0) {
      HEAP32[i1 + 20 >> 2] = i5;
      if (i3 << 24 >> 24) HEAP8[i11 >> 0] = HEAP8[i11 >> 0] | 8;
     }
    }
    i1 = i1 + 48 | 0;
   } while (i1 >>> 0 < i12 >>> 0);
  }
 }
 i18 = i23 + 24 | 0;
 i19 = i23 + 28 | 0;
 i17 = 0;
 L33 : while (1) {
  i16 = (i17 | 0) == 0;
  do if (i16) {
   i1 = HEAP32[i21 >> 2] | 0;
   if (!((HEAP32[i22 >> 2] | 0) == 1 & (i1 & 8 | 0) == 0)) if (!(i1 & 1)) {
    i20 = 30;
    break;
   } else {
    i17 = 1;
    continue L33;
   }
   _af_warper_compute(i24, i23, 0, i25, i26);
   i2 = HEAP32[i25 >> 2] | 0;
   i3 = HEAP32[i26 >> 2] | 0;
   i16 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i19 >> 2] | 0;
   i4 = i1 + (i16 * 40 | 0) | 0;
   if ((i16 | 0) > 0) do {
    i16 = (_FT_MulFix(HEAP16[i1 + 12 >> 1] | 0, i2) | 0) + i3 | 0;
    HEAP32[i1 + 16 >> 2] = i16;
    i1 = i1 + 40 | 0;
   } while (i1 >>> 0 < i4 >>> 0);
  } else if ((i17 | 0) == 1) if (!(HEAP32[i21 >> 2] & 2)) i20 = 30; else break L33; while (0);
  if ((i20 | 0) == 30) {
   i20 = 0;
   i14 = HEAP32[i23 + 44 + (i17 * 1468 | 0) + 20 >> 2] | 0;
   i12 = HEAP32[i23 + 44 + (i17 * 1468 | 0) + 12 >> 2] | 0;
   i15 = i14 + (i12 * 48 | 0) | 0;
   i13 = (i12 | 0) > 0;
   if ((i17 | 0) == 1 & i13) {
    i10 = i14;
    i1 = 0;
    do {
     i6 = HEAP8[i10 + 12 >> 0] | 0;
     i5 = i6 & 255;
     L51 : do if (!(i5 & 4)) {
      i4 = HEAP32[i10 + 24 >> 2] | 0;
      i8 = i10 + 20 | 0;
      i2 = HEAP32[i8 >> 2] | 0;
      i9 = (i4 | 0) != 0;
      do if (i9 & (i2 | 0) != 0) {
       i3 = i4 + 20 | 0;
       if (!(HEAP32[i3 >> 2] | 0)) i5 = i10; else {
        i7 = HEAP8[i4 + 12 >> 0] | 0;
        if (!(i7 & 8)) if (!(i5 & 8)) {
         i5 = i10;
         break;
        } else {
         i5 = i10;
         i3 = i8;
         i2 = i6;
        } else {
         i5 = i4;
         i2 = i7;
        }
        HEAP32[i3 >> 2] = 0;
        HEAP8[i5 + 12 >> 0] = i2 & -9;
        i2 = HEAP32[i8 >> 2] | 0;
        i20 = 38;
       }
      } else i20 = 38; while (0);
      do if ((i20 | 0) == 38) {
       i20 = 0;
       i3 = (i2 | 0) != 0;
       if (i3 | i9 ^ 1) if (i3) {
        i5 = i10;
        break;
       } else break L51; else {
        i2 = HEAP32[i4 + 20 >> 2] | 0;
        if (!i2) break L51; else {
         i5 = i4;
         i4 = i10;
         break;
        }
       }
      } while (0);
      i2 = HEAP32[i2 + 8 >> 2] | 0;
      HEAP32[i5 + 8 >> 2] = i2;
      i11 = i5 + 12 | 0;
      i3 = HEAP8[i11 >> 0] | 4;
      HEAP8[i11 >> 0] = i3;
      if (i4 | 0) if (!(HEAP32[i4 + 20 >> 2] | 0)) {
       i11 = i4 + 12 | 0;
       i9 = HEAP8[i11 >> 0] | 0;
       i8 = (_af_latin_compute_stem_width(i23, 1, (HEAP32[i4 + 4 >> 2] | 0) - (HEAP32[i5 + 4 >> 2] | 0) | 0, i3 & 255, i9 & 255) | 0) + i2 | 0;
       HEAP32[i4 + 8 >> 2] = i8;
       HEAP8[i11 >> 0] = i9 | 4;
      }
      i1 = (i1 | 0) == 0 ? i10 : i1;
     } while (0);
     i10 = i10 + 48 | 0;
    } while (i10 >>> 0 < i15 >>> 0);
   } else i1 = 0;
   if (i13) {
    i2 = 0;
    i11 = i14;
    do {
     i9 = i11 + 12 | 0;
     i10 = HEAP8[i9 >> 0] | 0;
     i4 = i10 & 255;
     do if (!(i4 & 4)) {
      i3 = HEAP32[i11 + 24 >> 2] | 0;
      if (!i3) {
       i2 = i2 + 1 | 0;
       break;
      }
      if (HEAP32[i3 + 20 >> 2] | 0) {
       i8 = HEAP32[i3 + 8 >> 2] | 0;
       i8 = (_af_latin_compute_stem_width(i23, i17, (HEAP32[i11 + 4 >> 2] | 0) - (HEAP32[i3 + 4 >> 2] | 0) | 0, HEAPU8[i3 + 12 >> 0] | 0, i4) | 0) + i8 | 0;
       HEAP32[i11 + 8 >> 2] = i8;
       HEAP8[i9 >> 0] = i10 | 4;
       break;
      }
      if (!i1) {
       i6 = HEAP32[i11 + 4 >> 2] | 0;
       i7 = (HEAP32[i3 + 4 >> 2] | 0) - i6 | 0;
       i8 = i3 + 12 | 0;
       i4 = _af_latin_compute_stem_width(i23, i17, i7, i4, HEAPU8[i8 >> 0] | 0) | 0;
       i1 = (i4 | 0) < 65;
       if ((i4 | 0) < 96) {
        i6 = (i7 >> 1) + i6 | 0;
        i30 = i6 + 32 & -64;
        i5 = i30 - (i1 ? 32 : 38) | 0;
        i29 = i6 - i5 | 0;
        i1 = i30 | (i1 ? 32 : 26);
        i6 = i6 - i1 | 0;
        i1 = ((((i29 | 0) < 0 ? 0 - i29 | 0 : i29) | 0) < (((i6 | 0) < 0 ? 0 - i6 | 0 : i6) | 0) ? i5 : i1) - ((i4 | 0) / 2 | 0) | 0;
        i5 = i11 + 8 | 0;
        HEAP32[i5 >> 2] = i1;
        i1 = i1 + i4 | 0;
        i4 = i3;
       } else {
        i5 = i11 + 8 | 0;
        i1 = i6 + 32 & -64;
        i4 = i11;
       }
       HEAP32[i4 + 8 >> 2] = i1;
       i30 = i10 | 4;
       HEAP8[i9 >> 0] = i30;
       i1 = HEAP32[i5 >> 2] | 0;
       i1 = (_af_latin_compute_stem_width(i23, i17, i7, i30 & 255, HEAPU8[i8 >> 0] | 0) | 0) + i1 | 0;
       HEAP32[i3 + 8 >> 2] = i1;
       i1 = i11;
       break;
      }
      i6 = HEAP32[i11 + 4 >> 2] | 0;
      i5 = i6 - (HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[i1 + 8 >> 2] | 0) | 0;
      i6 = (HEAP32[i3 + 4 >> 2] | 0) - i6 | 0;
      i7 = (i6 >> 1) + i5 | 0;
      i8 = i3 + 12 | 0;
      i30 = HEAPU8[i8 >> 0] | 0;
      i4 = _af_latin_compute_stem_width(i23, i17, i6, i4, i30) | 0;
      do if (!(i30 & 4)) if ((i4 | 0) < 96) {
       i5 = i7 + 32 & -64;
       i30 = (i4 | 0) < 65;
       i29 = i5 - (i30 ? 32 : 38) | 0;
       i6 = i7 - i29 | 0;
       i30 = i5 | (i30 ? 32 : 26);
       i7 = i7 - i30 | 0;
       i30 = (((i6 | 0) < 0 ? 0 - i6 | 0 : i6) | 0) < (((i7 | 0) < 0 ? 0 - i7 | 0 : i7) | 0) ? i29 : i30;
       i4 = (i4 | 0) / 2 | 0;
       HEAP32[i11 + 8 >> 2] = i30 - i4;
       i4 = i30 + i4 | 0;
       break;
      } else {
       i29 = i5 + 32 & -64;
       i32 = i4 >>> 1;
       i31 = i29 + i32 - i7 | 0;
       i30 = (i6 + 32 + i5 & -64) - i4 | 0;
       i7 = i30 + (i32 - i7) | 0;
       i30 = (((i31 | 0) < 0 ? 0 - i31 | 0 : i31) | 0) < (((i7 | 0) < 0 ? 0 - i7 | 0 : i7) | 0) ? i29 : i30;
       HEAP32[i11 + 8 >> 2] = i30;
       i4 = i30 + i4 | 0;
       break;
      } else {
       i4 = (HEAP32[i3 + 8 >> 2] | 0) - i4 | 0;
       i3 = i11;
      } while (0);
      HEAP32[i3 + 8 >> 2] = i4;
      HEAP8[i9 >> 0] = i10 | 4;
      HEAP8[i8 >> 0] = HEAP8[i8 >> 0] | 4;
      if (i11 >>> 0 > i14 >>> 0) {
       i3 = i11 + 8 | 0;
       i4 = HEAP32[i11 + -40 >> 2] | 0;
       if ((HEAP32[i3 >> 2] | 0) < (i4 | 0)) HEAP32[i3 >> 2] = i4;
      }
     } while (0);
     i11 = i11 + 48 | 0;
    } while (i11 >>> 0 < i15 >>> 0);
    i7 = i2;
    i2 = i1;
   } else {
    i7 = 0;
    i2 = i1;
   }
   i1 = i12 * 48 | 0;
   L100 : do if (i16) {
    i6 = (i1 | 0) == 576;
    switch (i1 | 0) {
    case 288:
     {
      i1 = i14;
      i5 = 4;
      i3 = 2;
      break;
     }
    case 576:
     {
      i1 = i14 + 48 | 0;
      i5 = 9;
      i3 = 5;
      break;
     }
    default:
     break L100;
    }
    i32 = HEAP32[i14 + (i3 * 48 | 0) + 4 >> 2] | 0;
    i32 = i32 - (HEAP32[i14 + (i5 * 48 | 0) + 4 >> 2] | 0) + (i32 - (HEAP32[i1 + 4 >> 2] | 0)) | 0;
    if ((((i32 | 0) < 0 ? 0 - i32 | 0 : i32) | 0) < 8) {
     i4 = i14 + (i5 * 48 | 0) + 8 | 0;
     i3 = (HEAP32[i14 + (i3 * 48 | 0) + 8 >> 2] << 1) - (HEAP32[i1 + 8 >> 2] | 0) | 0;
     i1 = (HEAP32[i4 >> 2] | 0) - i3 | 0;
     HEAP32[i4 >> 2] = i3;
     i3 = HEAP32[i14 + (i5 * 48 | 0) + 24 >> 2] | 0;
     i4 = (i3 | 0) != 0;
     if (i4) {
      i32 = i3 + 8 | 0;
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) - i1;
     }
     if (i6) {
      i32 = i14 + 392 | 0;
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) - i1;
      i32 = i14 + 536 | 0;
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) - i1;
     }
     i32 = i14 + (i5 * 48 | 0) + 12 | 0;
     HEAP8[i32 >> 0] = HEAP8[i32 >> 0] | 4;
     if (i4) {
      i32 = i3 + 12 | 0;
      HEAP8[i32 >> 0] = HEAP8[i32 >> 0] | 4;
     }
    }
   } while (0);
   if (i13 & ((i7 | 0) != 0 | (i2 | 0) == 0)) {
    i1 = i14;
    do {
     i9 = i1 + 12 | 0;
     i8 = HEAP8[i9 >> 0] | 0;
     if (!(i8 & 4)) {
      i3 = HEAP32[i1 + 28 >> 2] | 0;
      if (!i3) i20 = 81; else {
       i4 = HEAP32[i3 + 4 >> 2] | 0;
       i5 = HEAP32[i1 + 4 >> 2] | 0;
       i32 = i4 - i5 | 0;
       if ((((i32 | 0) < 0 ? 0 - i32 | 0 : i32) | 0) < 80) {
        i6 = i2;
        i3 = i5 - i4 + (HEAP32[i3 + 8 >> 2] | 0) | 0;
        i2 = i8;
       } else i20 = 81;
      }
      do if ((i20 | 0) == 81) {
       i20 = 0;
       if (!i2) {
        i6 = i1;
        i3 = (HEAP32[i1 + 4 >> 2] | 0) + 32 & -64;
        i2 = i8;
        break;
       } else i6 = i1;
       while (1) {
        i4 = i6 + -48 | 0;
        if (i4 >>> 0 < i14 >>> 0) {
         i5 = 0;
         break;
        }
        if (!(HEAP8[i6 + -36 >> 0] & 4)) i6 = i4; else {
         i5 = 1;
         break;
        }
       }
       i7 = i1;
       while (1) {
        i3 = i7 + 48 | 0;
        if (i3 >>> 0 >= i15 >>> 0) break;
        if (!(HEAP8[i7 + 60 >> 0] & 4)) i7 = i3; else {
         i20 = 88;
         break;
        }
       }
       if ((i20 | 0) == 88) {
        i20 = 0;
        if (i4 >>> 0 < i1 >>> 0 & i5 & i3 >>> 0 > i1 >>> 0) {
         i4 = HEAP32[i7 + 52 >> 2] | 0;
         i5 = HEAP32[i6 + -44 >> 2] | 0;
         i3 = HEAP32[i6 + -40 >> 2] | 0;
         if ((i4 | 0) == (i5 | 0)) {
          i6 = i2;
          i2 = i8;
          break;
         }
         i3 = (_FT_MulDiv((HEAP32[i1 + 4 >> 2] | 0) - i5 | 0, (HEAP32[i7 + 56 >> 2] | 0) - i3 | 0, i4 - i5 | 0) | 0) + i3 | 0;
         i6 = i2;
         i2 = HEAP8[i9 >> 0] | 0;
         break;
        }
       }
       i6 = i2;
       i3 = ((HEAP32[i1 + 4 >> 2] | 0) + 16 - (HEAP32[i2 + 4 >> 2] | 0) & -32) + (HEAP32[i2 + 8 >> 2] | 0) | 0;
       i2 = i8;
      } while (0);
      i4 = i1 + 8 | 0;
      HEAP32[i4 >> 2] = i3;
      HEAP8[i9 >> 0] = i2 | 4;
      if (i1 >>> 0 > i14 >>> 0) {
       i2 = HEAP32[i1 + -40 >> 2] | 0;
       if ((i3 | 0) < (i2 | 0)) HEAP32[i4 >> 2] = i2; else i2 = i3;
      } else i2 = i3;
      i3 = i1 + 48 | 0;
      if (i3 >>> 0 < i15 >>> 0) if (!(HEAP8[i1 + 60 >> 0] & 4)) {
       i2 = i6;
       i1 = i3;
      } else {
       i1 = HEAP32[i1 + 56 >> 2] | 0;
       if ((i2 | 0) > (i1 | 0)) {
        HEAP32[i4 >> 2] = i1;
        i2 = i6;
        i1 = i3;
       } else {
        i2 = i6;
        i1 = i3;
       }
      } else {
       i2 = i6;
       i1 = i3;
      }
     } else i1 = i1 + 48 | 0;
    } while (i1 >>> 0 < i15 >>> 0);
   }
   i1 = HEAP32[i23 + 44 + (i17 * 1468 | 0) + 8 >> 2] | 0;
   i2 = HEAP32[i23 + 44 + (i17 * 1468 | 0) >> 2] | 0;
   i5 = i1 + (i2 * 48 | 0) | 0;
   i2 = (i2 | 0) > 0;
   if (i16) {
    if (i2) do {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if (i2 | 0) {
      i4 = HEAP32[i1 + 44 >> 2] | 0;
      i3 = HEAP32[i2 + 8 >> 2] | 0;
      i2 = i1 + 40 | 0;
      while (1) {
       i2 = HEAP32[i2 >> 2] | 0;
       HEAP32[i2 + 16 >> 2] = i3;
       HEAP16[i2 >> 1] = HEAP16[i2 >> 1] | 4;
       if ((i2 | 0) == (i4 | 0)) break; else i2 = i2 + 32 | 0;
      }
     }
     i1 = i1 + 48 | 0;
    } while (i1 >>> 0 < i5 >>> 0);
   } else if (i2) do {
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if (i2 | 0) {
     i4 = HEAP32[i1 + 44 >> 2] | 0;
     i3 = HEAP32[i2 + 8 >> 2] | 0;
     i2 = i1 + 40 | 0;
     while (1) {
      i2 = HEAP32[i2 >> 2] | 0;
      HEAP32[i2 + 20 >> 2] = i3;
      HEAP16[i2 >> 1] = HEAP16[i2 >> 1] | 8;
      if ((i2 | 0) == (i4 | 0)) break; else i2 = i2 + 32 | 0;
     }
    }
    i1 = i1 + 48 | 0;
   } while (i1 >>> 0 < i5 >>> 0);
   _af_glyph_hints_align_strong_points(i23, i17);
   _af_glyph_hints_align_weak_points(i23, i17);
  }
  i17 = i17 + 1 | 0;
  if ((i17 | 0) == 2) break;
 }
 i32 = HEAP32[i18 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i5 = i1 + (i32 * 40 | 0) | 0;
 if ((i32 | 0) <= 0) {
  i32 = 0;
  STACKTOP = i28;
  return i32 | 0;
 }
 i4 = HEAP32[i27 + 4 >> 2] | 0;
 i3 = HEAP32[i27 + 8 >> 2] | 0;
 while (1) {
  HEAP32[i4 >> 2] = HEAP32[i1 + 16 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 20 >> 2];
  i2 = HEAPU16[i1 >> 1] | 0;
  if (!(i2 & 1)) i2 = ((i2 & 2) >>> 1) + 1 << 24 >> 24; else i2 = 0;
  HEAP8[i3 >> 0] = i2;
  i1 = i1 + 40 | 0;
  if (i1 >>> 0 >= i5 >>> 0) {
   i1 = 0;
   break;
  } else {
   i4 = i4 + 8 | 0;
   i3 = i3 + 1 | 0;
  }
 }
 STACKTOP = i28;
 return i1 | 0;
}

function _vfscanf(i34, i1, i25) {
 i34 = i34 | 0;
 i1 = i1 | 0;
 i25 = i25 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i35 = 0, i36 = 0, f37 = f0;
 i36 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i29 = i36 + 8 | 0;
 i30 = i36 + 17 | 0;
 i31 = i36;
 i32 = i36 + 16 | 0;
 if ((HEAP32[i34 + 76 >> 2] | 0) > -1) i35 = ___lockfile(i34) | 0; else i35 = 0;
 i2 = HEAP8[i1 >> 0] | 0;
 L4 : do if (!(i2 << 24 >> 24)) i1 = 0; else {
  i18 = i34 + 4 | 0;
  i19 = i34 + 100 | 0;
  i20 = i34 + 108 | 0;
  i21 = i34 + 8 | 0;
  i22 = i30 + 10 | 0;
  i23 = i30 + 33 | 0;
  i17 = i29 + 4 | 0;
  i24 = i30 + 46 | 0;
  i26 = i30 + 94 | 0;
  i27 = i30 + 1 | 0;
  i28 = i30 + 1 | 0;
  i5 = i1;
  i13 = 0;
  i1 = 0;
  i4 = 0;
  i3 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace(i2 & 255) | 0)) {
    i2 = i2 << 24 >> 24 == 37;
    L10 : do if (i2) {
     i8 = i5 + 1 | 0;
     i6 = HEAP8[i8 >> 0] | 0;
     L12 : do switch (i6 << 24 >> 24) {
     case 37:
      break L10;
     case 42:
      {
       i16 = 0;
       i5 = i5 + 2 | 0;
       break;
      }
     default:
      {
       i2 = (i6 & 255) + -48 | 0;
       if (i2 >>> 0 < 10) if ((HEAP8[i5 + 2 >> 0] | 0) == 36) {
        i16 = _arg_n(i25, i2) | 0;
        i5 = i5 + 3 | 0;
        break L12;
       }
       i5 = (HEAP32[i25 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       i16 = HEAP32[i5 >> 2] | 0;
       HEAP32[i25 >> 2] = i5 + 4;
       i5 = i8;
      }
     } while (0);
     i2 = HEAP8[i5 >> 0] | 0;
     i6 = i2 & 255;
     if ((i6 + -48 | 0) >>> 0 < 10) {
      i8 = 0;
      do {
       i8 = (i8 * 10 | 0) + -48 + i6 | 0;
       i5 = i5 + 1 | 0;
       i2 = HEAP8[i5 >> 0] | 0;
       i6 = i2 & 255;
      } while ((i6 + -48 | 0) >>> 0 < 10);
     } else i8 = 0;
     i2 = i2 << 24 >> 24 == 109;
     i15 = (i16 | 0) != 0;
     i4 = i2 ? 0 : i4;
     i3 = i2 ? 0 : i3;
     i5 = i2 ? i5 + 1 | 0 : i5;
     i2 = i15 & i2;
     i6 = i5 + 1 | 0;
     switch (HEAP8[i5 >> 0] | 0) {
     case 104:
      {
       i14 = (HEAP8[i6 >> 0] | 0) == 104;
       i9 = i14 ? -2 : -1;
       i5 = i14 ? i5 + 2 | 0 : i6;
       break;
      }
     case 108:
      {
       i14 = (HEAP8[i6 >> 0] | 0) == 108;
       i9 = i14 ? 3 : 1;
       i5 = i14 ? i5 + 2 | 0 : i6;
       break;
      }
     case 106:
      {
       i9 = 3;
       i5 = i6;
       break;
      }
     case 116:
     case 122:
      {
       i9 = 1;
       i5 = i6;
       break;
      }
     case 76:
      {
       i9 = 2;
       i5 = i6;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       i9 = 0;
       break;
      }
     default:
      {
       i33 = 137;
       break L6;
      }
     }
     i11 = HEAPU8[i5 >> 0] | 0;
     i12 = (i11 & 47 | 0) == 3;
     i11 = i12 ? i11 | 32 : i11;
     i12 = i12 ? 1 : i9;
     i10 = i11 & 255;
     switch (i10 << 24 >> 24) {
     case 99:
      {
       i8 = (i8 | 0) > 1 ? i8 : 1;
       break;
      }
     case 91:
      break;
     case 110:
      {
       _store_int(i16, i12, i13, ((i13 | 0) < 0) << 31 >> 31);
       i6 = i13;
       break L8;
      }
     default:
      {
       ___shlim(i34, 0);
       do {
        i6 = HEAP32[i18 >> 2] | 0;
        if (i6 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0) {
         HEAP32[i18 >> 2] = i6 + 1;
         i6 = HEAPU8[i6 >> 0] | 0;
        } else i6 = ___shgetc(i34) | 0;
       } while ((_isspace(i6) | 0) != 0);
       if (!(HEAP32[i19 >> 2] | 0)) i6 = HEAP32[i18 >> 2] | 0; else {
        i6 = (HEAP32[i18 >> 2] | 0) + -1 | 0;
        HEAP32[i18 >> 2] = i6;
       }
       i13 = (HEAP32[i20 >> 2] | 0) + i13 + i6 - (HEAP32[i21 >> 2] | 0) | 0;
      }
     }
     ___shlim(i34, i8);
     i6 = HEAP32[i18 >> 2] | 0;
     i9 = HEAP32[i19 >> 2] | 0;
     if (i6 >>> 0 < i9 >>> 0) HEAP32[i18 >> 2] = i6 + 1; else {
      if ((___shgetc(i34) | 0) < 0) {
       i33 = 137;
       break L6;
      }
      i9 = HEAP32[i19 >> 2] | 0;
     }
     if (i9 | 0) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
     L55 : do switch (i10 << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       i14 = (i11 | 0) == 99;
       L57 : do if ((i11 | 16 | 0) == 115) {
        _memset(i27 | 0, -1, 256) | 0;
        HEAP8[i30 >> 0] = 0;
        if ((i11 | 0) == 115) {
         HEAP8[i23 >> 0] = 0;
         HEAP8[i22 >> 0] = 0;
         HEAP8[i22 + 1 >> 0] = 0;
         HEAP8[i22 + 2 >> 0] = 0;
         HEAP8[i22 + 3 >> 0] = 0;
         HEAP8[i22 + 4 >> 0] = 0;
        }
       } else {
        i6 = i5 + 1 | 0;
        i11 = (HEAP8[i6 >> 0] | 0) == 94;
        i10 = i11 & 1;
        i5 = i11 ? i5 + 2 | 0 : i6;
        _memset(i28 | 0, i11 & 1 | 0, 256) | 0;
        HEAP8[i30 >> 0] = 0;
        switch (HEAP8[i5 >> 0] | 0) {
        case 45:
         {
          i6 = i24;
          i33 = 64;
          break;
         }
        case 93:
         {
          i6 = i26;
          i33 = 64;
          break;
         }
        default:
         i11 = (i10 ^ 1) & 255;
        }
        if ((i33 | 0) == 64) {
         i33 = 0;
         i11 = (i10 ^ 1) & 255;
         HEAP8[i6 >> 0] = i11;
         i5 = i5 + 1 | 0;
        }
        while (1) {
         i6 = HEAP8[i5 >> 0] | 0;
         L69 : do switch (i6 << 24 >> 24) {
         case 0:
          {
           i33 = 137;
           break L6;
          }
         case 93:
          break L57;
         case 45:
          {
           i10 = i5 + 1 | 0;
           i6 = HEAP8[i10 >> 0] | 0;
           switch (i6 << 24 >> 24) {
           case 93:
           case 0:
            {
             i6 = 45;
             break L69;
            }
           default:
            {}
           }
           i5 = HEAP8[i5 + -1 >> 0] | 0;
           if ((i5 & 255) < (i6 & 255)) {
            i5 = i5 & 255;
            do {
             i5 = i5 + 1 | 0;
             HEAP8[i30 + i5 >> 0] = i11;
             i6 = HEAP8[i10 >> 0] | 0;
            } while ((i5 | 0) < (i6 & 255 | 0));
            i5 = i10;
           } else i5 = i10;
           break;
          }
         default:
          {}
         } while (0);
         HEAP8[i30 + ((i6 & 255) + 1) >> 0] = i11;
         i5 = i5 + 1 | 0;
        }
       } while (0);
       i6 = i14 ? i8 + 1 | 0 : 31;
       i11 = (i12 | 0) == 1;
       L77 : do if (i11) {
        if (i2) {
         i3 = _malloc(i6 << 2) | 0;
         if (!i3) {
          i4 = 0;
          i3 = 0;
          i2 = 1;
          i33 = 137;
          break L6;
         }
        } else i3 = i16;
        HEAP32[i29 >> 2] = 0;
        HEAP32[i17 >> 2] = 0;
        i10 = i6;
        i4 = 0;
        L82 : while (1) {
         i9 = (i3 | 0) == 0;
         do {
          L86 : while (1) {
           i6 = HEAP32[i18 >> 2] | 0;
           if (i6 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0) {
            HEAP32[i18 >> 2] = i6 + 1;
            i6 = HEAPU8[i6 >> 0] | 0;
           } else i6 = ___shgetc(i34) | 0;
           if (!(HEAP8[i30 + (i6 + 1) >> 0] | 0)) break L82;
           HEAP8[i32 >> 0] = i6;
           switch (_mbrtowc(i31, i32, 1, i29) | 0) {
           case -1:
            {
             i4 = 0;
             i33 = 137;
             break L6;
            }
           case -2:
            break;
           default:
            break L86;
           }
          }
          if (!i9) {
           HEAP32[i3 + (i4 << 2) >> 2] = HEAP32[i31 >> 2];
           i4 = i4 + 1 | 0;
          }
         } while (!(i2 & (i4 | 0) == (i10 | 0)));
         i4 = i10 << 1 | 1;
         i6 = _realloc(i3, i4 << 2) | 0;
         if (!i6) {
          i4 = 0;
          i2 = 1;
          i33 = 137;
          break L6;
         } else {
          i12 = i10;
          i10 = i4;
          i3 = i6;
          i4 = i12;
         }
        }
        if (!(_mbsinit(i29) | 0)) {
         i4 = 0;
         i33 = 137;
         break L6;
        } else {
         i6 = i4;
         i4 = 0;
         i10 = i3;
        }
       } else {
        if (i2) {
         i4 = _malloc(i6) | 0;
         if (!i4) {
          i4 = 0;
          i3 = 0;
          i2 = 1;
          i33 = 137;
          break L6;
         } else {
          i9 = i6;
          i3 = 0;
         }
         while (1) {
          do {
           i6 = HEAP32[i18 >> 2] | 0;
           if (i6 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0) {
            HEAP32[i18 >> 2] = i6 + 1;
            i6 = HEAPU8[i6 >> 0] | 0;
           } else i6 = ___shgetc(i34) | 0;
           if (!(HEAP8[i30 + (i6 + 1) >> 0] | 0)) {
            i6 = i3;
            i10 = 0;
            i3 = 0;
            break L77;
           }
           HEAP8[i4 + i3 >> 0] = i6;
           i3 = i3 + 1 | 0;
          } while ((i3 | 0) != (i9 | 0));
          i3 = i9 << 1 | 1;
          i6 = _realloc(i4, i3) | 0;
          if (!i6) {
           i3 = 0;
           i2 = 1;
           i33 = 137;
           break L6;
          } else {
           i12 = i9;
           i9 = i3;
           i4 = i6;
           i3 = i12;
          }
         }
        }
        if (!i16) {
         i4 = i9;
         while (1) {
          i3 = HEAP32[i18 >> 2] | 0;
          if (i3 >>> 0 < i4 >>> 0) {
           HEAP32[i18 >> 2] = i3 + 1;
           i3 = HEAPU8[i3 >> 0] | 0;
          } else i3 = ___shgetc(i34) | 0;
          if (!(HEAP8[i30 + (i3 + 1) >> 0] | 0)) {
           i6 = 0;
           i4 = 0;
           i10 = 0;
           i3 = 0;
           break L77;
          }
          i4 = HEAP32[i19 >> 2] | 0;
         }
        } else {
         i6 = 0;
         i4 = i9;
         while (1) {
          i3 = HEAP32[i18 >> 2] | 0;
          if (i3 >>> 0 < i4 >>> 0) {
           HEAP32[i18 >> 2] = i3 + 1;
           i3 = HEAPU8[i3 >> 0] | 0;
          } else i3 = ___shgetc(i34) | 0;
          if (!(HEAP8[i30 + (i3 + 1) >> 0] | 0)) {
           i4 = i16;
           i10 = 0;
           i3 = 0;
           break L77;
          }
          HEAP8[i16 + i6 >> 0] = i3;
          i6 = i6 + 1 | 0;
          i4 = HEAP32[i19 >> 2] | 0;
         }
        }
       } while (0);
       if (!(HEAP32[i19 >> 2] | 0)) i9 = HEAP32[i18 >> 2] | 0; else {
        i9 = (HEAP32[i18 >> 2] | 0) + -1 | 0;
        HEAP32[i18 >> 2] = i9;
       }
       i9 = i9 - (HEAP32[i21 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) | 0;
       if (!i9) {
        i33 = 139;
        break L6;
       }
       if (!((i9 | 0) == (i8 | 0) | i14 ^ 1)) {
        i33 = 139;
        break L6;
       }
       do if (i2) if (i11) {
        HEAP32[i16 >> 2] = i10;
        break;
       } else {
        HEAP32[i16 >> 2] = i4;
        break;
       } while (0);
       if (!i14) {
        if (i10 | 0) HEAP32[i10 + (i6 << 2) >> 2] = 0;
        if (!i4) {
         i4 = 0;
         break L55;
        }
        HEAP8[i4 + i6 >> 0] = 0;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       i6 = 16;
       i33 = 125;
       break;
      }
     case 111:
      {
       i6 = 8;
       i33 = 125;
       break;
      }
     case 117:
     case 100:
      {
       i6 = 10;
       i33 = 125;
       break;
      }
     case 105:
      {
       i6 = 0;
       i33 = 125;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       d7 = +___floatscan(i34, i12, 0);
       if ((HEAP32[i20 >> 2] | 0) == ((HEAP32[i21 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0)) {
        i33 = 139;
        break L6;
       }
       if (i16) switch (i12 | 0) {
       case 0:
        {
         f37 = Math_fround(d7);
         HEAPF32[i16 >> 2] = f37;
         break L55;
        }
       case 1:
        {
         HEAPF64[i16 >> 3] = d7;
         break L55;
        }
       case 2:
        {
         HEAPF64[i16 >> 3] = d7;
         break L55;
        }
       default:
        break L55;
       }
       break;
      }
     default:
      {}
     } while (0);
     do if ((i33 | 0) == 125) {
      i33 = 0;
      i6 = ___intscan(i34, i6, 0, -1, -1) | 0;
      if ((HEAP32[i20 >> 2] | 0) == ((HEAP32[i21 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0)) {
       i33 = 139;
       break L6;
      }
      if (i15 & (i11 | 0) == 112) {
       HEAP32[i16 >> 2] = i6;
       break;
      } else {
       _store_int(i16, i12, i6, tempRet0);
       break;
      }
     } while (0);
     i1 = (i15 & 1) + i1 | 0;
     i6 = (HEAP32[i20 >> 2] | 0) + i13 + (HEAP32[i18 >> 2] | 0) - (HEAP32[i21 >> 2] | 0) | 0;
     break L8;
    } while (0);
    i5 = i5 + (i2 & 1) | 0;
    ___shlim(i34, 0);
    i2 = HEAP32[i18 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0) {
     HEAP32[i18 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
    } else i2 = ___shgetc(i34) | 0;
    if ((i2 | 0) != (HEAPU8[i5 >> 0] | 0)) {
     i33 = 22;
     break L6;
    }
    i6 = i13 + 1 | 0;
   } else {
    while (1) {
     i2 = i5 + 1 | 0;
     if (!(_isspace(HEAPU8[i2 >> 0] | 0) | 0)) break; else i5 = i2;
    }
    ___shlim(i34, 0);
    do {
     i2 = HEAP32[i18 >> 2] | 0;
     if (i2 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0) {
      HEAP32[i18 >> 2] = i2 + 1;
      i2 = HEAPU8[i2 >> 0] | 0;
     } else i2 = ___shgetc(i34) | 0;
    } while ((_isspace(i2) | 0) != 0);
    if (!(HEAP32[i19 >> 2] | 0)) i2 = HEAP32[i18 >> 2] | 0; else {
     i2 = (HEAP32[i18 >> 2] | 0) + -1 | 0;
     HEAP32[i18 >> 2] = i2;
    }
    i6 = (HEAP32[i20 >> 2] | 0) + i13 + i2 - (HEAP32[i21 >> 2] | 0) | 0;
   } while (0);
   i5 = i5 + 1 | 0;
   i2 = HEAP8[i5 >> 0] | 0;
   if (!(i2 << 24 >> 24)) break L4; else i13 = i6;
  }
  if ((i33 | 0) == 22) {
   if (HEAP32[i19 >> 2] | 0) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
   if ((i1 | 0) != 0 | (i2 | 0) > -1) break; else {
    i2 = 0;
    i33 = 138;
   }
  } else if ((i33 | 0) == 137) {
   i2 = i2 & 1;
   if (!i1) i33 = 138;
  } else if ((i33 | 0) == 139) i2 = i2 & 1;
  if ((i33 | 0) == 138) i1 = -1;
  if (i2) {
   _free(i4);
   _free(i3);
  }
 } while (0);
 if (i35 | 0) ___unlockfile(i34);
 STACKTOP = i36;
 return i1 | 0;
}

function _T42_Face_Init(i1, i30, i20, i24, i25) {
 i1 = i1 | 0;
 i30 = i30 | 0;
 i20 = i20 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0, i33 = 0;
 i32 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i31 = i32 + 312 | 0;
 i18 = i32 + 8 | 0;
 i19 = i32;
 i27 = i30 + 132 | 0;
 i26 = i30 + 500 | 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i30 >> 2] = 1;
 i21 = i30 + 96 | 0;
 i28 = _ft_module_get_service(HEAP32[i21 >> 2] | 0, 284871) | 0;
 HEAP32[i30 + 484 >> 2] = i28;
 i29 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, 284857) | 0;
 HEAP32[i30 + 488 >> 2] = i29;
 if (!i29) {
  i31 = 11;
  STACKTOP = i32;
  return i31 | 0;
 }
 i5 = HEAP32[i30 + 100 >> 2] | 0;
 _memset(i18 | 0, 0, 304) | 0;
 i17 = _ft_mem_alloc(i5, 12, i19) | 0;
 i22 = i30 + 492 | 0;
 HEAP32[i22 >> 2] = i17;
 do if (!(HEAP32[i19 >> 2] | 0)) {
  HEAP32[i30 + 496 >> 2] = 12;
  i4 = HEAP32[i30 + 104 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[HEAP32[i29 + 4 >> 2] >> 2] & 31](i18, 0, 0, i5);
  HEAP32[i18 + 72 >> 2] = i4;
  i8 = i18 + 80 | 0;
  HEAP32[i8 >> 2] = 0;
  i7 = i18 + 76 | 0;
  HEAP32[i7 >> 2] = 0;
  i6 = i18 + 84 | 0;
  HEAP8[i6 >> 0] = 0;
  i1 = _FT_Stream_Seek(i4, 0) | 0;
  HEAP32[i31 >> 2] = i1;
  do if (!i1) {
   i1 = _FT_Stream_EnterFrame(i4, 17) | 0;
   HEAP32[i31 >> 2] = i1;
   if (!i1) {
    if (_memcmp(HEAP32[i4 + 32 >> 2] | 0, 280745, 17) | 0) {
     HEAP32[i31 >> 2] = 2;
     _FT_Stream_ExitFrame(i4);
     i1 = 2;
     i23 = 15;
     break;
    }
    _FT_Stream_ExitFrame(i4);
    i1 = _FT_Stream_Seek(i4, 0) | 0;
    HEAP32[i31 >> 2] = i1;
    if (!i1) {
     i1 = HEAP32[i4 + 4 >> 2] | 0;
     if (!(HEAP32[i4 + 20 >> 2] | 0)) {
      HEAP32[i7 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i4 + 8 >> 2] | 0);
      HEAP32[i8 >> 2] = i1;
      HEAP8[i6 >> 0] = 1;
      i1 = _FT_Stream_Skip(i4, i1) | 0;
      HEAP32[i31 >> 2] = i1;
      if (i1 | 0) {
       i23 = 15;
       break;
      }
      i1 = HEAP32[i8 >> 2] | 0;
     } else {
      i2 = _ft_mem_alloc(i5, i1, i31) | 0;
      HEAP32[i7 >> 2] = i2;
      i3 = HEAP32[i31 >> 2] | 0;
      if (i3 | 0) {
       i1 = i3;
       i23 = 15;
       break;
      }
      i2 = _FT_Stream_Read(i4, i2, i1) | 0;
      HEAP32[i31 >> 2] = i2;
      if (i2 | 0) {
       i1 = i2;
       i23 = 15;
       break;
      }
      HEAP32[i8 >> 2] = i1;
     }
     i2 = HEAP32[i7 >> 2] | 0;
     HEAP32[i18 + 4 >> 2] = i2;
     HEAP32[i18 >> 2] = i2;
     i3 = i18 + 8 | 0;
     HEAP32[i3 >> 2] = i2 + i1;
     HEAP32[i19 >> 2] = 0;
     i17 = i18;
    } else i23 = 15;
   } else i23 = 15;
  } else i23 = 15; while (0);
  if ((i23 | 0) == 15) {
   if (HEAP8[i6 >> 0] | 0) {
    HEAP32[i19 >> 2] = i1;
    break;
   }
   _ft_mem_free(i5, HEAP32[i7 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i17 = HEAP32[i31 >> 2] | 0;
   HEAP32[i19 >> 2] = i17;
   if (i17 | 0) break;
   i17 = i18;
   i3 = i18 + 8 | 0;
   i2 = 0;
   i1 = HEAP32[i8 >> 2] | 0;
  }
  HEAP32[i17 >> 2] = i2;
  i16 = i2 + i1 | 0;
  HEAP32[i3 >> 2] = i16;
  i7 = i18 + 12 | 0;
  HEAP32[i7 >> 2] = 0;
  i8 = i18 + 28 | 0;
  FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](i18);
  i2 = HEAP32[i17 >> 2] | 0;
  L27 : do if (i2 >>> 0 < i16 >>> 0) {
   i9 = i18 + 32 | 0;
   i10 = i18 + 56 | 0;
   i11 = i31 + 8 | 0;
   i12 = i18 + 68 | 0;
   i13 = i18 + 64 | 0;
   i14 = i30 + 164 | 0;
   i15 = i30 + 460 | 0;
   i1 = 0;
   i4 = i2;
   while (1) {
    i3 = HEAP8[i4 >> 0] | 0;
    L31 : do if ((i4 + 25 | 0) >>> 0 < i16 >>> 0 & i3 << 24 >> 24 == 70) {
     i6 = (_strncmp(i4, 280763, 13) | 0) == 0;
     i2 = HEAP32[i9 >> 2] | 0;
     if (i6) {
      FUNCTION_TABLE_vi[i2 & 127](i18);
      FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](i18);
      i2 = HEAP32[i17 >> 2] | 0;
      L34 : do if (i2 >>> 0 < i16 >>> 0) {
       i3 = i2;
       while (1) {
        if ((i3 + 5 | 0) >>> 0 < i16 >>> 0 & (HEAP8[i3 >> 0] | 0) == 107) if (!(_strncmp(i3, 280777, 5) | 0)) break;
        FUNCTION_TABLE_vi[HEAP32[i9 >> 2] & 127](i18);
        if (HEAP32[i7 >> 2] | 0) {
         i23 = 52;
         break L27;
        }
        FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](i18);
        i3 = HEAP32[i17 >> 2] | 0;
        if (i3 >>> 0 >= i16 >>> 0) break L34;
       }
       FUNCTION_TABLE_vi[HEAP32[i9 >> 2] & 127](i18);
       FUNCTION_TABLE_vii[HEAP32[i10 >> 2] & 63](i18, i31);
       i2 = (HEAP32[i11 >> 2] | 0) == 3 ? HEAP32[i17 >> 2] | 0 : i2;
      } while (0);
      HEAP32[i17 >> 2] = i2;
     } else i23 = 50;
    } else {
     i2 = HEAP32[i9 >> 2] | 0;
     if ((i4 + 2 | 0) >>> 0 < i16 >>> 0 & i3 << 24 >> 24 == 47) {
      i6 = i4 + 1 | 0;
      HEAP32[i17 >> 2] = i6;
      FUNCTION_TABLE_vi[i2 & 127](i18);
      if (HEAP32[i7 >> 2] | 0) {
       i23 = 52;
       break L27;
      }
      i4 = HEAP32[i17 >> 2] | 0;
      i5 = i4 - i6 | 0;
      if (i4 >>> 0 < i16 >>> 0 & (i5 + -1 | 0) >>> 0 < 21) {
       i4 = 0;
       while (1) {
        i3 = 11792 + (i4 * 36 | 0) | 0;
        i2 = HEAP32[i3 >> 2] | 0;
        if (!i2) i3 = 9; else if ((HEAP8[i6 >> 0] | 0) == (HEAP8[i2 >> 0] | 0)) if ((i5 | 0) == (_strlen(i2) | 0)) if (!(_memcmp(i6, i2, i5) | 0)) {
         i2 = HEAP32[11792 + (i4 * 36 | 0) + 8 >> 2] | 0;
         do if ((i4 + -15 | 0) >>> 0 < 4) {
          FUNCTION_TABLE_vii[HEAP32[11792 + (i4 * 36 | 0) + 12 >> 2] & 63](i30, i18);
          i2 = HEAP32[i7 >> 2] | 0;
         } else {
          switch (HEAP32[11792 + (i4 * 36 | 0) + 4 >> 2] | 0) {
          case 3:
           {
            HEAP32[i31 >> 2] = i27;
            break;
           }
          case 2:
           {
            HEAP32[i31 >> 2] = i14;
            break;
           }
          case 5:
           {
            HEAP32[i31 >> 2] = i15;
            break;
           }
          default:
           HEAP32[i31 >> 2] = i27;
          }
          if ((i2 + -9 | 0) >>> 0 < 2) {
           i2 = FUNCTION_TABLE_iiiiii[HEAP32[i12 >> 2] & 127](i18, i3, i31, 0, 0) | 0;
           break;
          } else {
           i2 = FUNCTION_TABLE_iiiiii[HEAP32[i13 >> 2] & 127](i18, i3, i31, 0, 0) | 0;
           break;
          }
         } while (0);
         HEAP32[i7 >> 2] = i2;
         i33 = (i2 | 0) == 0;
         i3 = i33 ? 7 : 1;
         i1 = i33 ? i1 : i2;
        } else i3 = 0; else i3 = 0; else i3 = 0;
        switch (i3 & 15) {
        case 6:
         {
          i23 = 52;
          break L27;
         }
        case 7:
         break L31;
        case 9:
        case 0:
         break;
        default:
         break L27;
        }
        i4 = i4 + 1 | 0;
        if ((i4 | 0) >= 20) break L31;
       }
      }
     } else i23 = 50;
    } while (0);
    if ((i23 | 0) == 50) {
     i23 = 0;
     FUNCTION_TABLE_vi[i2 & 127](i18);
     if (HEAP32[i7 >> 2] | 0) {
      i23 = 52;
      break L27;
     }
    }
    FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](i18);
    i4 = HEAP32[i17 >> 2] | 0;
    if (i4 >>> 0 >= i16 >>> 0) {
     i23 = 52;
     break;
    }
   }
  } else i23 = 52; while (0);
  if ((i23 | 0) == 52) i1 = HEAP32[i7 >> 2] | 0;
  HEAP32[i19 >> 2] = i1;
  if (!i1) {
   if ((HEAP8[i30 + 433 >> 0] | 0) != 42) {
    HEAP32[i19 >> 2] = 2;
    break;
   }
   i10 = HEAP32[i18 + 144 >> 2] | 0;
   HEAP32[i30 + 416 >> 2] = i10;
   i1 = i18 + 212 | 0;
   if (!(HEAP32[i1 >> 2] | 0)) HEAP32[i19 >> 2] = 3;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i30 + 396 >> 2] = HEAP32[i18 + 200 >> 2];
   HEAP32[i30 + 424 >> 2] = HEAP32[i18 + 224 >> 2];
   HEAP32[i30 + 428 >> 2] = HEAP32[i18 + 228 >> 2];
   i17 = i18 + 148 | 0;
   HEAP32[i30 + 400 >> 2] = HEAP32[i17 >> 2];
   i33 = i18 + 172 | 0;
   i8 = i30 + 420 | 0;
   HEAP32[i8 >> 2] = HEAP32[i33 >> 2];
   HEAP32[i17 >> 2] = 0;
   HEAP32[i33 >> 2] = 0;
   if ((HEAP32[i30 + 368 >> 2] | 0) == 1) {
    i11 = HEAP32[i18 + 108 >> 2] | 0;
    L82 : do if ((i11 | 0) > 0) {
     i12 = i30 + 384 | 0;
     i13 = i30 + 388 | 0;
     i9 = i18 + 116 | 0;
     if ((i10 | 0) < 1) {
      i1 = 0;
      while (1) {
       HEAP16[(HEAP32[i12 >> 2] | 0) + (i1 << 1) >> 1] = 0;
       HEAP32[(HEAP32[i13 >> 2] | 0) + (i1 << 2) >> 2] = 280783;
       i1 = i1 + 1 | 0;
       if ((i1 | 0) == (i11 | 0)) {
        i2 = 0;
        i1 = 0;
        break L82;
       }
      }
     } else {
      i2 = 0;
      i1 = 0;
      i7 = 0;
     }
     do {
      HEAP16[(HEAP32[i12 >> 2] | 0) + (i7 << 1) >> 1] = 0;
      HEAP32[(HEAP32[i13 >> 2] | 0) + (i7 << 2) >> 2] = 280783;
      i5 = HEAP32[(HEAP32[i9 >> 2] | 0) + (i7 << 2) >> 2] | 0;
      L89 : do if (i5) {
       i6 = HEAP32[i8 >> 2] | 0;
       i3 = 0;
       while (1) {
        i4 = HEAP32[i6 + (i3 << 2) >> 2] | 0;
        if (!(_strcmp(i5, i4) | 0)) break;
        i3 = i3 + 1 | 0;
        if ((i3 | 0) >= (i10 | 0)) break L89;
       }
       HEAP16[(HEAP32[i12 >> 2] | 0) + (i7 << 1) >> 1] = i3;
       HEAP32[(HEAP32[i13 >> 2] | 0) + (i7 << 2) >> 2] = i4;
       i33 = (_strcmp(280783, i4) | 0) == 0;
       i2 = (i7 | 0) < (i2 | 0) | i33 ? i2 : i7 + 1 | 0;
       i1 = i33 ? i1 : (i7 | 0) < (i1 | 0) ? i7 : i1;
      } while (0);
      i7 = i7 + 1 | 0;
     } while ((i7 | 0) != (i11 | 0));
    } else {
     i2 = 0;
     i1 = 0;
    } while (0);
    HEAP32[i30 + 376 >> 2] = i1;
    HEAP32[i30 + 380 >> 2] = i2;
    HEAP32[i30 + 372 >> 2] = HEAP32[i18 + 88 >> 2];
   }
  }
 } while (0);
 i1 = HEAP32[i18 + 140 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i18 + 92 | 0);
 i1 = HEAP32[i18 + 248 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i18 + 200 | 0);
 i1 = HEAP32[i18 + 196 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i18 + 148 | 0);
 i1 = HEAP32[i18 + 300 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i18 + 252 | 0);
 if (!(HEAP8[i18 + 84 >> 0] | 0)) {
  i33 = i18 + 76 | 0;
  _ft_mem_free(HEAP32[i18 + 16 >> 2] | 0, HEAP32[i33 >> 2] | 0);
  HEAP32[i33 >> 2] = 0;
 }
 FUNCTION_TABLE_vi[HEAP32[i18 + 24 >> 2] & 127](i18);
 i1 = HEAP32[i19 >> 2] | 0;
 if ((i20 | 0) < 0 | (i1 | 0) != 0) {
  i33 = i1;
  STACKTOP = i32;
  return i33 | 0;
 }
 if ((i20 | 0) > 0) {
  i33 = 6;
  STACKTOP = i32;
  return i33 | 0;
 }
 HEAP32[i30 + 16 >> 2] = HEAP32[i30 + 416 >> 2];
 HEAP32[i30 + 36 >> 2] = 0;
 HEAP32[i30 + 4 >> 2] = 0;
 i7 = i30 + 8 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i1 = i2 | 529;
 HEAP32[i7 >> 2] = i1;
 if (HEAP8[i30 + 156 >> 0] | 0) {
  i1 = i2 | 533;
  HEAP32[i7 >> 2] = i1;
 }
 HEAP32[i7 >> 2] = i1 | 2048;
 i1 = HEAP32[i30 + 144 >> 2] | 0;
 i2 = i30 + 20 | 0;
 HEAP32[i2 >> 2] = i1;
 i6 = i30 + 24 | 0;
 HEAP32[i6 >> 2] = 281615;
 L122 : do if (!i1) {
  i1 = HEAP32[i30 + 364 >> 2] | 0;
  if (i1 | 0) HEAP32[i2 >> 2] = i1;
 } else {
  i2 = HEAP32[i30 + 140 >> 2] | 0;
  if (i2 | 0) {
   i3 = HEAP8[i2 >> 0] | 0;
   if (i3 << 24 >> 24) {
    L128 : while (1) {
     i5 = i3 << 24 >> 24 == 0;
     L130 : while (1) {
      i4 = HEAP8[i1 >> 0] | 0;
      if (i3 << 24 >> 24 == i4 << 24 >> 24) {
       i23 = 89;
       break;
      }
      switch (i3 << 24 >> 24) {
      case 45:
      case 32:
       break L130;
      default:
       {}
      }
      switch (i4 << 24 >> 24) {
      case 0:
       break L128;
      case 45:
      case 32:
       break;
      default:
       break L122;
      }
      if (i5) break L122; else i1 = i1 + 1 | 0;
     }
     if ((i23 | 0) == 89) {
      i23 = 0;
      i1 = i1 + 1 | 0;
     }
     i2 = i2 + 1 | 0;
     i3 = HEAP8[i2 >> 0] | 0;
     if (!(i3 << 24 >> 24)) break L122;
    }
    HEAP32[i6 >> 2] = i2;
   }
  }
 } while (0);
 HEAP32[i30 + 28 >> 2] = 0;
 HEAP32[i30 + 32 >> 2] = 0;
 HEAP32[i31 >> 2] = 9;
 i33 = _FT_Get_Module(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, 280791) | 0;
 HEAP32[i31 + 20 >> 2] = i33;
 HEAP32[i31 + 4 >> 2] = HEAP32[i22 >> 2];
 HEAP32[i31 + 8 >> 2] = HEAP32[i30 + 496 >> 2];
 if (i24 | 0) {
  HEAP32[i31 >> 2] = 25;
  HEAP32[i31 + 24 >> 2] = i24;
  HEAP32[i31 + 28 >> 2] = i25;
 }
 i1 = _FT_Open_Face(HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] | 0, i31, 0, i26) | 0;
 if (i1 | 0) {
  i33 = i1;
  STACKTOP = i32;
  return i33 | 0;
 }
 _FT_Done_Size(HEAP32[(HEAP32[i26 >> 2] | 0) + 88 >> 2] | 0) | 0;
 i2 = i30 + 52 | 0;
 i3 = HEAP32[i26 >> 2] | 0;
 i1 = i3 + 52 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP16[i30 + 68 >> 1] = HEAP16[i3 + 68 >> 1] | 0;
 HEAP16[i30 + 70 >> 1] = HEAP16[i3 + 70 >> 1] | 0;
 HEAP16[i30 + 72 >> 1] = HEAP16[i3 + 72 >> 1] | 0;
 HEAP16[i30 + 74 >> 1] = HEAP16[i3 + 74 >> 1] | 0;
 HEAP16[i30 + 76 >> 1] = HEAP16[i3 + 76 >> 1] | 0;
 HEAP16[i30 + 78 >> 1] = HEAP16[i3 + 78 >> 1] | 0;
 HEAP16[i30 + 80 >> 1] = HEAP16[i27 + 26 >> 1] | 0;
 HEAP16[i30 + 82 >> 1] = HEAP16[i30 + 160 >> 1] | 0;
 i2 = i30 + 12 | 0;
 i1 = (HEAP32[i30 + 152 >> 2] | 0) != 0 & 1;
 HEAP32[i2 >> 2] = i1;
 if (HEAP32[i3 + 12 >> 2] & 2 | 0) HEAP32[i2 >> 2] = i1 | 2;
 if (HEAP32[i3 + 8 >> 2] & 32 | 0) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 32;
 if (!i28) {
  i33 = 0;
  STACKTOP = i32;
  return i33 | 0;
 }
 i2 = HEAP32[i29 + 20 >> 2] | 0;
 HEAP32[i31 >> 2] = i30;
 i3 = i31 + 8 | 0;
 HEAP16[i3 >> 1] = 3;
 i4 = i31 + 10 | 0;
 HEAP16[i4 >> 1] = 1;
 i5 = i31 + 4 | 0;
 HEAP32[i5 >> 2] = 1970170211;
 i6 = i2 + 12 | 0;
 i1 = _FT_CMap_New(HEAP32[i6 >> 2] | 0, 0, i31, 0) | 0;
 L155 : do if ((i1 | 0) == 0 | (i1 & 255 | 0) == 163) {
  HEAP16[i3 >> 1] = 7;
  switch (HEAP32[i30 + 368 >> 2] | 0) {
  case 2:
   {
    HEAP32[i5 >> 2] = 1094995778;
    HEAP16[i4 >> 1] = 0;
    i1 = i2;
    break;
   }
  case 4:
   {
    HEAP32[i5 >> 2] = 1094992453;
    HEAP16[i4 >> 1] = 1;
    i1 = i2 + 4 | 0;
    break;
   }
  case 1:
   {
    HEAP32[i5 >> 2] = 1094992451;
    HEAP16[i4 >> 1] = 2;
    i1 = i2 + 8 | 0;
    break;
   }
  case 3:
   {
    HEAP32[i5 >> 2] = 1818326065;
    HEAP16[i4 >> 1] = 3;
    i1 = i6;
    break;
   }
  default:
   {
    i1 = 0;
    break L155;
   }
  }
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) i1 = 0; else i1 = _FT_CMap_New(i1, 0, i31, 0) | 0;
 } while (0);
 i33 = i1;
 STACKTOP = i32;
 return i33 | 0;
}

function _sfnt_init_face(i4, i41, i40, i1, i2) {
 i4 = i4 | 0;
 i41 = i41 | 0;
 i40 = i40 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i42 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i32 = i42 + 52 | 0;
 i33 = i42 + 8 | 0;
 i34 = i42 + 4 | 0;
 i37 = i42;
 i2 = i41 + 532 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i3 = i41 + 96 | 0;
 do if (!i1) {
  i1 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0, 283071) | 0;
  if (!i1) {
   i41 = 11;
   STACKTOP = i42;
   return i41 | 0;
  } else {
   HEAP32[i2 >> 2] = i1;
   HEAP32[i41 + 508 >> 2] = HEAP32[i1 >> 2];
   i38 = i1;
   break;
  }
 } else i38 = i1; while (0);
 i31 = _ft_module_get_service(HEAP32[i3 >> 2] | 0, 284871) | 0;
 HEAP32[i41 + 536 >> 2] = i31;
 i31 = HEAP32[i4 + 28 >> 2] | 0;
 i29 = i41 + 132 | 0;
 HEAP32[i29 >> 2] = 0;
 i30 = i41 + 136 | 0;
 HEAP32[i30 >> 2] = 0;
 i39 = i41 + 140 | 0;
 HEAP32[i39 >> 2] = 0;
 i3 = _FT_Stream_Pos(i4) | 0;
 i2 = _FT_Stream_ReadULong(i4, i37) | 0;
 i1 = HEAP32[i37 >> 2] | 0;
 L7 : do if (!i1) {
  i19 = i33 + 4 | 0;
  i20 = i33 + 8 | 0;
  i21 = i33 + 12 | 0;
  i22 = i33 + 16 | 0;
  i23 = i33 + 24 | 0;
  i24 = i33 + 28 | 0;
  i25 = i33 + 32 | 0;
  i26 = i33 + 36 | 0;
  i27 = i33 + 40 | 0;
  i36 = i41 + 104 | 0;
  i28 = i41 + 8 | 0;
  i18 = i4;
  L9 : while (1) {
   if ((i2 | 0) < 1953658213) {
    i35 = 85;
    break;
   }
   if ((i2 | 0) < 1954115633) {
    i35 = 91;
    break;
   }
   if ((i2 | 0) < 2001684038) {
    i35 = 97;
    break;
   }
   switch (i2 | 0) {
   case 2001684038:
    break;
   default:
    {
     i1 = 2;
     break L7;
    }
   }
   i1 = _FT_Stream_Seek(i18, i3) | 0;
   HEAP32[i37 >> 2] = i1;
   if (i1 | 0) break L7;
   i16 = i18 + 28 | 0;
   i17 = HEAP32[i16 >> 2] | 0;
   HEAP32[i32 >> 2] = 0;
   i1 = _FT_Stream_ReadFields(i18, 118084, i33) | 0;
   HEAP32[i32 >> 2] = i1;
   if (i1 | 0) {
    i35 = 65;
    break;
   }
   i1 = HEAP32[i19 >> 2] | 0;
   if ((i1 | 0) < 2001684038) switch (i1 | 0) {
   case 1953784678:
    {
     i1 = 8;
     i35 = 65;
     break L9;
    }
   default:
    {}
   } else switch (i1 | 0) {
   case 2001684038:
    {
     i1 = 8;
     i35 = 65;
     break L9;
    }
   default:
    {}
   }
   i1 = HEAP32[i20 >> 2] | 0;
   if ((i1 | 0) != (HEAP32[i18 + 4 >> 2] | 0)) {
    i1 = 8;
    i35 = 65;
    break;
   }
   i15 = HEAP16[i21 >> 1] | 0;
   i2 = i15 & 65535;
   if (!(i15 << 16 >> 16)) {
    i1 = 8;
    i35 = 65;
    break;
   }
   if (((i2 * 20 | 0) + 44 | 0) >>> 0 >= i1 >>> 0) {
    i1 = 8;
    i35 = 65;
    break;
   }
   i3 = HEAP32[i22 >> 2] | 0;
   if (!((i2 << 4 | 12) >>> 0 < i3 >>> 0 & (i3 & 3 | 0) == 0)) {
    i1 = 8;
    i35 = 65;
    break;
   }
   i1 = (HEAP32[i24 >> 2] | 0) != 0;
   if (!(HEAP32[i23 >> 2] | 0)) {
    if (!((HEAP32[i25 >> 2] | 0) == 0 & (i1 ^ 1))) {
     i1 = 8;
     i35 = 65;
     break;
    }
   } else if (i1 & (HEAP32[i25 >> 2] | 0) == 0) {
    i1 = 8;
    i35 = 65;
    break;
   }
   if (!((HEAP32[i26 >> 2] | 0) != 0 | (HEAP32[i27 >> 2] | 0) == 0)) {
    i1 = 8;
    i35 = 65;
    break;
   }
   i15 = _ft_mem_alloc(i17, i3, i32) | 0;
   L30 : do if (!(HEAP32[i32 >> 2] | 0)) {
    i14 = _ft_mem_alloc(i17, 40, i32) | 0;
    if (!(HEAP32[i32 >> 2] | 0)) {
     i13 = HEAP16[i21 >> 1] | 0;
     i3 = i13 & 65535;
     if (!(i13 << 16 >> 16)) i1 = 0; else {
      i2 = i3;
      i1 = 0;
      do {
       i2 = i2 >>> 1;
       i1 = i1 + 1 | 0;
      } while ((i2 | 0) != 0);
     }
     i7 = i1 + -1 | 0;
     i13 = 16 << i7;
     i3 = (i3 << 4) - i13 | 0;
     HEAP8[i15 >> 0] = (HEAP32[i19 >> 2] | 0) >>> 24;
     HEAP8[i15 + 1 >> 0] = (HEAP32[i19 >> 2] | 0) >>> 16;
     HEAP8[i15 + 2 >> 0] = (HEAP32[i19 >> 2] | 0) >>> 8;
     HEAP8[i15 + 3 >> 0] = HEAP32[i19 >> 2];
     HEAP8[i15 + 4 >> 0] = (HEAPU16[i21 >> 1] | 0) >>> 8;
     HEAP8[i15 + 5 >> 0] = HEAP16[i21 >> 1];
     HEAP8[i15 + 6 >> 0] = i13 >>> 8;
     HEAP8[i15 + 7 >> 0] = i13;
     HEAP8[i15 + 8 >> 0] = i7 >>> 8;
     HEAP8[i15 + 9 >> 0] = i7;
     HEAP8[i15 + 10 >> 0] = i3 >>> 8;
     i7 = i15 + 12 | 0;
     HEAP8[i15 + 11 >> 0] = i3;
     i3 = _ft_mem_realloc(i17, 24, 0, HEAPU16[i21 >> 1] | 0, 0, i32) | 0;
     if (HEAP32[i32 >> 2] | 0) {
      i4 = i14;
      i2 = 0;
      i1 = i14;
      break;
     }
     i2 = _ft_mem_realloc(i17, 4, 0, HEAPU16[i21 >> 1] | 0, 0, i32) | 0;
     if (HEAP32[i32 >> 2] | 0) {
      i4 = i14;
      i1 = i14;
      break;
     }
     i13 = _FT_Stream_EnterFrame(i18, (HEAPU16[i21 >> 1] | 0) * 20 | 0) | 0;
     HEAP32[i32 >> 2] = i13;
     if (i13 | 0) {
      i4 = i14;
      i1 = i14;
      break;
     }
     L40 : do if (HEAP16[i21 >> 1] | 0) {
      i1 = 0;
      i4 = 0;
      while (1) {
       i5 = i3 + (i4 * 24 | 0) | 0;
       i13 = _FT_Stream_GetULong(i18) | 0;
       HEAP32[i5 >> 2] = i13;
       i13 = _FT_Stream_GetULong(i18) | 0;
       HEAP32[i3 + (i4 * 24 | 0) + 4 >> 2] = i13;
       i13 = _FT_Stream_GetULong(i18) | 0;
       HEAP32[i3 + (i4 * 24 | 0) + 8 >> 2] = i13;
       i13 = _FT_Stream_GetULong(i18) | 0;
       HEAP32[i3 + (i4 * 24 | 0) + 12 >> 2] = i13;
       i13 = _FT_Stream_GetULong(i18) | 0;
       HEAP32[i3 + (i4 * 24 | 0) + 16 >> 2] = i13;
       i13 = i1;
       i1 = HEAP32[i5 >> 2] | 0;
       if (i1 >>> 0 <= i13 >>> 0) break;
       HEAP32[i2 + (i4 << 2) >> 2] = i5;
       i4 = i4 + 1 | 0;
       if ((i4 | 0) >= (HEAPU16[i21 >> 1] | 0)) break L40;
      }
      _FT_Stream_ExitFrame(i18);
      HEAP32[i32 >> 2] = 8;
      i4 = i14;
      i1 = i14;
      break L30;
     } while (0);
     _FT_Stream_ExitFrame(i18);
     _qsort(i2, HEAPU16[i21 >> 1] | 0, 4, 186);
     i13 = HEAP16[i21 >> 1] | 0;
     i10 = i13 & 65535;
     i4 = (i10 * 20 | 0) + 44 | 0;
     i1 = i10 << 4 | 12;
     i13 = i13 << 16 >> 16 == 0;
     L46 : do if (!i13) {
      i11 = HEAP32[i20 >> 2] | 0;
      i12 = HEAP32[i22 >> 2] | 0;
      i9 = 0;
      while (1) {
       i5 = HEAP32[i2 + (i9 << 2) >> 2] | 0;
       if ((HEAP32[i5 + 4 >> 2] | 0) != (i4 | 0)) break;
       i6 = HEAP32[i5 + 8 >> 2] | 0;
       if (i11 >>> 0 < i6 >>> 0 | i4 >>> 0 > (i11 - i6 | 0) >>> 0) break;
       i8 = HEAP32[i5 + 12 >> 2] | 0;
       if (i6 >>> 0 > i8 >>> 0 | (i12 >>> 0 < i8 >>> 0 | i1 >>> 0 > (i12 - i8 | 0) >>> 0)) break;
       HEAP32[i5 + 20 >> 2] = i1;
       i4 = (i6 + 3 & -4) + i4 | 0;
       i1 = (i8 + 3 & -4) + i1 | 0;
       i9 = i9 + 1 | 0;
       if ((i9 | 0) >= (i10 | 0)) break L46;
      }
      HEAP32[i32 >> 2] = 8;
      i4 = i14;
      i1 = i14;
      break L30;
     } while (0);
     i5 = HEAP32[i23 >> 2] | 0;
     do if (i5) {
      if ((i5 | 0) == (i4 | 0)) {
       i4 = (HEAP32[i24 >> 2] | 0) + i4 | 0;
       if (i4 >>> 0 <= (HEAP32[i20 >> 2] | 0) >>> 0) break;
      }
      HEAP32[i32 >> 2] = 8;
      i4 = i14;
      i1 = i14;
      break L30;
     } while (0);
     i5 = HEAP32[i26 >> 2] | 0;
     do if (!i5) i5 = HEAP32[i20 >> 2] | 0; else {
      if ((i5 | 0) == (i4 + 3 & -4 | 0)) {
       i4 = (HEAP32[i27 >> 2] | 0) + i5 | 0;
       i5 = HEAP32[i20 >> 2] | 0;
       if (i4 >>> 0 <= i5 >>> 0) break;
      }
      HEAP32[i32 >> 2] = 8;
      i4 = i14;
      i1 = i14;
      break L30;
     } while (0);
     if (!((i4 | 0) == (i5 | 0) ? (i1 | 0) == (HEAP32[i22 >> 2] | 0) : 0)) {
      HEAP32[i32 >> 2] = 8;
      i4 = i14;
      i1 = i14;
      break;
     }
     do if (!i13) {
      i9 = i18 + 32 | 0;
      i8 = 0;
      while (1) {
       i5 = i3 + (i8 * 24 | 0) | 0;
       HEAP8[i7 >> 0] = (HEAP32[i5 >> 2] | 0) >>> 24;
       HEAP8[i7 + 1 >> 0] = (HEAP32[i5 >> 2] | 0) >>> 16;
       HEAP8[i7 + 2 >> 0] = (HEAP32[i5 >> 2] | 0) >>> 8;
       HEAP8[i7 + 3 >> 0] = HEAP32[i5 >> 2];
       i5 = i3 + (i8 * 24 | 0) + 16 | 0;
       HEAP8[i7 + 4 >> 0] = (HEAP32[i5 >> 2] | 0) >>> 24;
       HEAP8[i7 + 5 >> 0] = (HEAP32[i5 >> 2] | 0) >>> 16;
       HEAP8[i7 + 6 >> 0] = (HEAP32[i5 >> 2] | 0) >>> 8;
       HEAP8[i7 + 7 >> 0] = HEAP32[i5 >> 2];
       i5 = i3 + (i8 * 24 | 0) + 20 | 0;
       HEAP8[i7 + 8 >> 0] = (HEAP32[i5 >> 2] | 0) >>> 24;
       HEAP8[i7 + 9 >> 0] = (HEAP32[i5 >> 2] | 0) >>> 16;
       HEAP8[i7 + 10 >> 0] = (HEAP32[i5 >> 2] | 0) >>> 8;
       HEAP8[i7 + 11 >> 0] = HEAP32[i5 >> 2];
       i6 = i3 + (i8 * 24 | 0) + 12 | 0;
       HEAP8[i7 + 12 >> 0] = (HEAP32[i6 >> 2] | 0) >>> 24;
       HEAP8[i7 + 13 >> 0] = (HEAP32[i6 >> 2] | 0) >>> 16;
       HEAP8[i7 + 14 >> 0] = (HEAP32[i6 >> 2] | 0) >>> 8;
       HEAP8[i7 + 15 >> 0] = HEAP32[i6 >> 2];
       i7 = i7 + 16 | 0;
       i13 = _FT_Stream_Seek(i18, HEAP32[i3 + (i8 * 24 | 0) + 4 >> 2] | 0) | 0;
       HEAP32[i32 >> 2] = i13;
       if (i13 | 0) {
        i4 = i14;
        i1 = i14;
        break L30;
       }
       i1 = i3 + (i8 * 24 | 0) + 8 | 0;
       i13 = _FT_Stream_EnterFrame(i18, HEAP32[i1 >> 2] | 0) | 0;
       HEAP32[i32 >> 2] = i13;
       if (i13 | 0) {
        i4 = i14;
        i1 = i14;
        break L30;
       }
       i1 = HEAP32[i1 >> 2] | 0;
       i4 = HEAP32[i6 >> 2] | 0;
       if ((i1 | 0) == (i4 | 0)) _memcpy(i15 + (HEAP32[i5 >> 2] | 0) | 0, HEAP32[i9 >> 2] | 0, i1 | 0) | 0; else {
        HEAP32[i34 >> 2] = i4;
        i13 = _FT_Gzip_Uncompress(i17, i15 + (HEAP32[i5 >> 2] | 0) | 0, i34, HEAP32[i9 >> 2] | 0, i1) | 0;
        HEAP32[i32 >> 2] = i13;
        if (i13 | 0) break;
        if ((HEAP32[i34 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) {
         i35 = 55;
         break;
        }
       }
       _FT_Stream_ExitFrame(i18);
       i1 = (HEAP32[i6 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0;
       if (i1 & 3 | 0) do {
        HEAP8[i15 + i1 >> 0] = 0;
        i1 = i1 + 1 | 0;
       } while ((i1 & 3 | 0) != 0);
       i8 = i8 + 1 | 0;
       if ((i8 | 0) >= (HEAPU16[i21 >> 1] | 0)) {
        i35 = 61;
        break;
       }
      }
      if ((i35 | 0) == 55) {
       i35 = 0;
       HEAP32[i32 >> 2] = 8;
      } else if ((i35 | 0) == 61) {
       i35 = 0;
       i1 = HEAP32[i22 >> 2] | 0;
       break;
      }
      i4 = i14;
      i1 = i14;
      break L30;
     } while (0);
     _FT_Stream_OpenMemory(i14, i15, i1);
     HEAP32[i14 + 28 >> 2] = HEAP32[i16 >> 2];
     HEAP32[i14 + 24 >> 2] = 61;
     _FT_Stream_Free(HEAP32[i36 >> 2] | 0, (HEAP32[i28 >> 2] | 0) >>> 10 & 1);
     HEAP32[i36 >> 2] = i14;
     HEAP32[i28 >> 2] = HEAP32[i28 >> 2] & -1025;
     i4 = i14;
     i1 = i14;
    } else {
     i4 = i14;
     i3 = 0;
     i2 = 0;
     i1 = i14;
    }
   } else {
    i4 = 0;
    i3 = 0;
    i2 = 0;
    i1 = 0;
   } while (0);
   _ft_mem_free(i17, i3);
   _ft_mem_free(i17, i2);
   if (!(HEAP32[i32 >> 2] | 0)) HEAP32[i37 >> 2] = 0; else {
    _ft_mem_free(i17, i15);
    _FT_Stream_Close(i4);
    _ft_mem_free(i17, i1);
    i1 = HEAP32[i32 >> 2] | 0;
    HEAP32[i37 >> 2] = i1;
    if (i1 | 0) break L7;
   }
   i2 = HEAP32[i36 >> 2] | 0;
   i4 = _FT_Stream_Pos(i2) | 0;
   i3 = _FT_Stream_ReadULong(i2, i37) | 0;
   i1 = HEAP32[i37 >> 2] | 0;
   if (!i1) {
    i18 = i2;
    i2 = i3;
    i3 = i4;
   } else break L7;
  }
  L97 : do if ((i35 | 0) == 65) {
   HEAP32[i37 >> 2] = i1;
   break L7;
  } else if ((i35 | 0) == 85) {
   if ((i2 | 0) < 131072) switch (i2 | 0) {
   case 65536:
    break L97;
   default:
    {
     i1 = 2;
     break L7;
    }
   }
   if ((i2 | 0) < 1330926671) switch (i2 | 0) {
   case 131072:
    break L97;
   default:
    {
     i1 = 2;
     break L7;
    }
   } else switch (i2 | 0) {
   case 1330926671:
    break L97;
   default:
    {
     i1 = 2;
     break L7;
    }
   }
  } else if ((i35 | 0) == 91) if ((i2 | 0) < 1953784678) switch (i2 | 0) {
  case 1953658213:
   break L97;
  default:
   {
    i1 = 2;
    break L7;
   }
  } else switch (i2 | 0) {
  case 1953784678:
   break L97;
  default:
   {
    i1 = 2;
    break L7;
   }
  } else if ((i35 | 0) == 97) switch (i2 | 0) {
  case 1954115633:
   break;
  default:
   {
    i1 = 2;
    break L7;
   }
  } while (0);
  HEAP32[i29 >> 2] = 1953784678;
  if ((i2 | 0) == 1953784678) {
   i1 = _FT_Stream_ReadFields(i18, 118144, i29) | 0;
   HEAP32[i37 >> 2] = i1;
   if (i1 | 0) break;
   i1 = HEAP32[i39 >> 2] | 0;
   if (!i1) {
    i1 = 8;
    break;
   }
   if (i1 >>> 0 > (HEAP32[i18 + 4 >> 2] | 0) >>> 5 >>> 0) {
    i1 = 10;
    break;
   }
   i1 = _ft_mem_realloc(i31, 4, 0, i1, 0, i37) | 0;
   i2 = i41 + 144 | 0;
   HEAP32[i2 >> 2] = i1;
   i1 = HEAP32[i37 >> 2] | 0;
   if (i1 | 0) break;
   i1 = _FT_Stream_EnterFrame(i18, HEAP32[i39 >> 2] << 2) | 0;
   HEAP32[i37 >> 2] = i1;
   if (i1 | 0) break;
   if ((HEAP32[i39 >> 2] | 0) > 0) {
    i1 = 0;
    do {
     i35 = _FT_Stream_GetULong(i18) | 0;
     HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] = i35;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < (HEAP32[i39 >> 2] | 0));
   }
   _FT_Stream_ExitFrame(i18);
   i1 = HEAP32[i37 >> 2] | 0;
   if (i1 | 0) {
    i41 = i1;
    STACKTOP = i42;
    return i41 | 0;
   }
  } else {
   HEAP32[i30 >> 2] = 65536;
   HEAP32[i39 >> 2] = 1;
   i2 = _ft_mem_alloc(i31, 4, i37) | 0;
   HEAP32[i41 + 144 >> 2] = i2;
   i1 = HEAP32[i37 >> 2] | 0;
   if (i1 | 0) break;
   HEAP32[i2 >> 2] = i3;
  }
  i3 = HEAP32[i36 >> 2] | 0;
  i2 = (i40 | 0) > 0 ? i40 : 0;
  if ((i2 | 0) >= (HEAP32[i39 >> 2] | 0)) {
   i41 = 6;
   STACKTOP = i42;
   return i41 | 0;
  }
  i1 = _FT_Stream_Seek(i3, HEAP32[(HEAP32[i41 + 144 >> 2] | 0) + (i2 << 2) >> 2] | 0) | 0;
  if (i1 | 0) {
   i41 = i1;
   STACKTOP = i42;
   return i41 | 0;
  }
  i1 = FUNCTION_TABLE_iii[HEAP32[i38 + 88 >> 2] & 255](i41, i3) | 0;
  if (i1 | 0) {
   i41 = i1;
   STACKTOP = i42;
   return i41 | 0;
  }
  HEAP32[i41 >> 2] = HEAP32[i39 >> 2];
  HEAP32[i41 + 4 >> 2] = i2;
  i41 = 0;
  STACKTOP = i42;
  return i41 | 0;
 } while (0);
 i41 = i1;
 STACKTOP = i42;
 return i41 | 0;
}

function _ass_gaussian_blur(i41, i42, d3) {
 i41 = i41 | 0;
 i42 = i42 | 0;
 d3 = +d3;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i43 = 0, i44 = 0, d45 = 0.0, d46 = 0.0, d47 = 0.0, d48 = 0.0, i49 = 0;
 i44 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 i43 = i44 + 232 | 0;
 i36 = i44 + 128 | 0;
 i37 = i44;
 i40 = i44 + 344 | 0;
 do if (d3 < 1.9) {
  i1 = i40 + 8 | 0;
  HEAP32[i1 >> 2] = 0;
  i2 = i40 + 4 | 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i40 >> 2] = 0;
  if (d3 < .5) {
   d6 = d3 * .085 * d3 * d3;
   i24 = i40;
   d3 = d3 * .5 - d6 * 4.0;
   d8 = 0.0;
   d9 = 0.0;
   i5 = 0;
   i4 = 0;
   i17 = 0;
   break;
  } else {
   d3 = .5 / d3;
   d9 = +_exp(-d3);
   d32 = d9 * d9;
   d3 = d9 * +Math_sqrt(+(d3 / 3.141592653589793));
   d9 = d9 * d32;
   d6 = d3 * d9;
   d9 = d32 * d9;
   d31 = d6 * d9;
   i24 = i40;
   d8 = d31;
   d9 = d31 * (d32 * d9);
   i5 = 0;
   i4 = 0;
   i17 = 0;
   break;
  }
 } else {
  if (d3 < 6.693) {
   HEAP32[i40 >> 2] = 0;
   i11 = d3 < 2.8 ? 1 : d3 < 4.4 ? 2 : 3;
   d6 = 1.0;
   i34 = i11 + -1 | 0;
  } else {
   +_frexp((d3 + .7) / 26.5, i40);
   i11 = (HEAP32[i40 >> 2] | 0) + 3 >> 1;
   HEAP32[i40 >> 2] = i11;
   d6 = +Math_pow(.25, +(+(i11 | 0)));
   d3 = d6 * d3;
   i11 = d3 < 3.15 - d6 * 1.5 ? 0 : d3 < 5.3 - d6 * 5.2 ? 1 : 2;
   i34 = i11;
  }
  i38 = i40 + 4 | 0;
  HEAP32[i38 >> 2] = i11;
  i39 = i40 + 8 | 0;
  HEAP32[i39 >> 2] = i34;
  i35 = 90676 + (i34 << 4) | 0;
  d32 = d6 * d6;
  d29 = d6 * d32;
  d30 = (d6 * 2520.0 + 5204.0 + d32 * 1092.0 + d29 * 3280.0) / 12096.0;
  d16 = d32 * 273.0;
  d31 = (2943.0 - d6 * 210.0 - d16 - d29 * 2460.0) / 12096.0;
  d32 = (486.0 - d6 * 924.0 - d32 * 546.0 + d29 * 984.0) / 12096.0;
  d29 = (17.0 - d6 * 126.0 + d16 - d29 * 164.0) / 12096.0;
  i10 = i43 + 8 | 0;
  i5 = i43 + 16 | 0;
  i4 = i43 + 24 | 0;
  i7 = i43 + 32 | 0;
  i1 = i43 + 56 | 0;
  i2 = i1 + 56 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
  d6 = d29 * (d29 + d29) + (d32 * (d32 + d32) + (d30 * d30 + d31 * (d31 + d31)));
  HEAPF64[i43 >> 3] = d6;
  d46 = d29 + d31;
  d9 = d32 + 0.0;
  d14 = d29 * d9;
  d8 = d14 + (d32 * d46 + (d30 * d31 + d31 * (d32 + d30)));
  HEAPF64[i10 >> 3] = d8;
  d15 = d30 + 0.0;
  d16 = d31 + 0.0;
  d45 = d29 * d16;
  HEAPF64[i5 >> 3] = d45 + (d32 * d15 + (d30 * d32 + d31 * d46));
  HEAPF64[i4 >> 3] = d29 * d15 + (d32 * d16 + (d30 * d29 + d31 * d9));
  d16 = d30 * 0.0;
  d15 = d29 + 0.0;
  HEAPF64[i7 >> 3] = d45 + (d32 * d9 + (d16 + d31 * d15));
  d16 = d16 + d31 * 0.0;
  HEAPF64[i43 + 40 >> 3] = d14 + (d16 + d32 * d15);
  HEAPF64[i43 + 48 >> 3] = d29 * d15 + (d32 * 0.0 + d16);
  i5 = i11 << 1;
  i7 = (i11 | 0) > 0;
  L11 : do if (i7) {
   i1 = 0;
   i2 = 6;
   while (1) {
    i2 = i2 + 1 | 0;
    i4 = 0;
    d9 = d8;
    while (1) {
     i33 = i4;
     i4 = i4 + 1 | 0;
     d8 = +HEAPF64[i43 + (i4 << 3) >> 3];
     HEAPF64[i43 + (i33 << 3) >> 3] = (d9 + d6 * 2.0 + d8) * .25;
     if ((i33 | 0) == (i2 | 0)) break; else {
      d9 = d6;
      d6 = d8;
     }
    }
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i5 | 0)) break L11;
    d6 = +HEAPF64[i43 >> 3];
    d8 = +HEAPF64[i10 >> 3];
   }
  } while (0);
  i33 = HEAP32[90676 + (i34 << 4) + 12 >> 2] | 0;
  i2 = i33 + i11 | 0;
  i4 = i2 + 3 | 0;
  d3 = .5 / d3;
  d6 = +_exp(-d3);
  d8 = d6 * d6;
  d3 = +Math_sqrt(+(d3 / 3.141592653589793));
  HEAPF64[i36 >> 3] = d3;
  d3 = d6 * d3;
  i5 = i36 + 8 | 0;
  HEAPF64[i5 >> 3] = d3;
  if ((i4 | 0) >= 2) {
   i1 = 2;
   while (1) {
    d6 = d8 * d6;
    d3 = d3 * d6;
    HEAPF64[i36 + (i1 << 3) >> 3] = d3;
    if ((i1 | 0) == (i4 | 0)) break; else i1 = i1 + 1 | 0;
   }
  }
  _memset(i36 + (i4 << 3) + 8 | 0, 0, 72 - (i2 << 3) | 0) | 0;
  if ((i2 | 0) >= 0) {
   d15 = +HEAPF64[i36 + 16 >> 3];
   d14 = +HEAPF64[i5 >> 3];
   i1 = 0;
   d3 = +HEAPF64[i36 + 24 >> 3];
   d6 = d15;
   d8 = d14;
   d9 = +HEAPF64[i36 >> 3];
   while (1) {
    d16 = +HEAPF64[i36 + (i1 + 3 << 3) >> 3];
    HEAPF64[i36 + (i1 << 3) >> 3] = d30 * d9 + d31 * (d14 + d8) + d32 * (d15 + d6) + d29 * (d3 + d16);
    if ((i1 | 0) == (i2 | 0)) break; else {
     d48 = d15;
     d47 = d14;
     d45 = d9;
     d46 = d8;
     d3 = d6;
     i1 = i1 + 1 | 0;
     d15 = d16;
     d14 = d48;
     d9 = d47;
     d8 = d45;
     d6 = d46;
    }
   }
  }
  if (i7) {
   i4 = 0;
   do {
    i28 = i2;
    i2 = i2 + -1 | 0;
    if ((i28 | 0) >= 1) {
     i1 = 0;
     d3 = +HEAPF64[i5 >> 3];
     d6 = +HEAPF64[i36 >> 3];
     while (1) {
      i28 = i1;
      i1 = i1 + 1 | 0;
      d8 = +HEAPF64[i36 + (i1 << 3) >> 3];
      HEAPF64[i36 + (i28 << 3) >> 3] = (d3 + d6 * 2.0 + d8) * .25;
      if ((i28 | 0) == (i2 | 0)) break; else {
       d3 = d6;
       d6 = d8;
      }
     }
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i11 | 0));
  }
  d8 = +HEAPF64[i43 >> 3];
  d6 = d8 * 3.0;
  i2 = 0;
  do {
   i5 = HEAP32[90676 + (i34 << 4) + (i2 << 2) >> 2] | 0;
   d3 = +HEAPF64[i43 + (i5 << 3) >> 3];
   HEAPF64[i37 + (i2 << 5) + (i2 << 3) >> 3] = d6 + +HEAPF64[i43 + (i5 << 1 << 3) >> 3] - d3 * 4.0;
   i4 = i2;
   i2 = i2 + 1 | 0;
   if ((i2 | 0) < 4) {
    d3 = d8 - d3;
    i1 = i2;
    do {
     i28 = HEAP32[90676 + (i34 << 4) + (i1 << 2) >> 2] | 0;
     d48 = +HEAPF64[i43 + (i28 + i5 << 3) >> 3] + +HEAPF64[i43 + (i28 - i5 << 3) >> 3] + (d3 - +HEAPF64[i43 + (i28 << 3) >> 3]) * 2.0;
     HEAPF64[i37 + (i1 << 5) + (i4 << 3) >> 3] = d48;
     HEAPF64[i37 + (i4 << 5) + (i1 << 3) >> 3] = d48;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != 4);
   }
  } while ((i2 | 0) != 4);
  i11 = i37 + 32 | 0;
  i12 = i37 + 40 | 0;
  i13 = i37 + 48 | 0;
  i17 = i37 + 56 | 0;
  i18 = i37 + 96 | 0;
  i19 = i37 + 104 | 0;
  i20 = i37 + 112 | 0;
  i21 = i37 + 120 | 0;
  i22 = i37 + 64 | 0;
  i23 = i37 + 72 | 0;
  i24 = i37 + 80 | 0;
  i25 = i37 + 88 | 0;
  i26 = i37 + 8 | 0;
  i27 = i37 + 16 | 0;
  i28 = i37 + 24 | 0;
  i10 = 0;
  do {
   i7 = i37 + (i10 << 5) + (i10 << 3) | 0;
   d3 = 1.0 / +HEAPF64[i7 >> 3];
   HEAPF64[i7 >> 3] = 1.0;
   if (!i10) {
    i1 = i37;
    i4 = i26;
    i5 = i27;
    i2 = i28;
    i7 = 27;
   } else {
    i1 = i37 + (i10 << 3) | 0;
    d48 = d3 * +HEAPF64[i1 >> 3];
    HEAPF64[i1 >> 3] = 0.0;
    i1 = i37 + (i10 << 5) | 0;
    HEAPF64[i37 >> 3] = +HEAPF64[i37 >> 3] - d48 * +HEAPF64[i1 >> 3];
    i4 = i37 + (i10 << 5) + 8 | 0;
    HEAPF64[i26 >> 3] = +HEAPF64[i26 >> 3] - d48 * +HEAPF64[i4 >> 3];
    i5 = i37 + (i10 << 5) + 16 | 0;
    HEAPF64[i27 >> 3] = +HEAPF64[i27 >> 3] - d48 * +HEAPF64[i5 >> 3];
    i2 = i37 + (i10 << 5) + 24 | 0;
    HEAPF64[i28 >> 3] = +HEAPF64[i28 >> 3] - d48 * +HEAPF64[i2 >> 3];
    if ((i10 | 0) == 1) i7 = 28; else i7 = 27;
   }
   if ((i7 | 0) == 27) {
    i7 = i37 + 32 + (i10 << 3) | 0;
    d48 = d3 * +HEAPF64[i7 >> 3];
    HEAPF64[i7 >> 3] = 0.0;
    HEAPF64[i11 >> 3] = +HEAPF64[i11 >> 3] - d48 * +HEAPF64[i1 >> 3];
    HEAPF64[i12 >> 3] = +HEAPF64[i12 >> 3] - d48 * +HEAPF64[i4 >> 3];
    HEAPF64[i13 >> 3] = +HEAPF64[i13 >> 3] - d48 * +HEAPF64[i5 >> 3];
    HEAPF64[i17 >> 3] = +HEAPF64[i17 >> 3] - d48 * +HEAPF64[i2 >> 3];
    if ((i10 | 0) == 2) i7 = 29; else i7 = 28;
   }
   if ((i7 | 0) == 28) {
    i7 = 0;
    i49 = i37 + 64 + (i10 << 3) | 0;
    d48 = d3 * +HEAPF64[i49 >> 3];
    HEAPF64[i49 >> 3] = 0.0;
    HEAPF64[i22 >> 3] = +HEAPF64[i22 >> 3] - d48 * +HEAPF64[i1 >> 3];
    HEAPF64[i23 >> 3] = +HEAPF64[i23 >> 3] - d48 * +HEAPF64[i4 >> 3];
    HEAPF64[i24 >> 3] = +HEAPF64[i24 >> 3] - d48 * +HEAPF64[i5 >> 3];
    HEAPF64[i25 >> 3] = +HEAPF64[i25 >> 3] - d48 * +HEAPF64[i2 >> 3];
    if ((i10 | 0) != 3) i7 = 29;
   }
   if ((i7 | 0) == 29) {
    i49 = i37 + 96 + (i10 << 3) | 0;
    d48 = d3 * +HEAPF64[i49 >> 3];
    HEAPF64[i49 >> 3] = 0.0;
    HEAPF64[i18 >> 3] = +HEAPF64[i18 >> 3] - d48 * +HEAPF64[i1 >> 3];
    HEAPF64[i19 >> 3] = +HEAPF64[i19 >> 3] - d48 * +HEAPF64[i4 >> 3];
    HEAPF64[i20 >> 3] = +HEAPF64[i20 >> 3] - d48 * +HEAPF64[i5 >> 3];
    HEAPF64[i21 >> 3] = +HEAPF64[i21 >> 3] - d48 * +HEAPF64[i2 >> 3];
   }
   HEAPF64[i1 >> 3] = d3 * +HEAPF64[i1 >> 3];
   HEAPF64[i4 >> 3] = d3 * +HEAPF64[i4 >> 3];
   HEAPF64[i5 >> 3] = d3 * +HEAPF64[i5 >> 3];
   HEAPF64[i2 >> 3] = d3 * +HEAPF64[i2 >> 3];
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) != 4);
  d9 = +HEAPF64[i36 >> 3];
  i1 = HEAP32[i35 >> 2] | 0;
  d46 = +HEAPF64[i36 + (i1 << 3) >> 3] + (d8 - +HEAPF64[i43 + (i1 << 3) >> 3] - d9);
  i1 = HEAP32[90676 + (i34 << 4) + 4 >> 2] | 0;
  d47 = +HEAPF64[i36 + (i1 << 3) >> 3] + (d8 - +HEAPF64[i43 + (i1 << 3) >> 3] - d9);
  i1 = HEAP32[90676 + (i34 << 4) + 8 >> 2] | 0;
  d48 = +HEAPF64[i36 + (i1 << 3) >> 3] + (d8 - +HEAPF64[i43 + (i1 << 3) >> 3] - d9);
  d9 = +HEAPF64[i36 + (i33 << 3) >> 3] + (d8 - +HEAPF64[i43 + (i33 << 3) >> 3] - d9);
  d3 = d46 * +HEAPF64[i37 >> 3] + 0.0 + d47 * +HEAPF64[i26 >> 3] + d48 * +HEAPF64[i27 >> 3] + d9 * +HEAPF64[i28 >> 3];
  d6 = d46 * +HEAPF64[i11 >> 3] + 0.0 + d47 * +HEAPF64[i12 >> 3] + d48 * +HEAPF64[i13 >> 3] + d9 * +HEAPF64[i17 >> 3];
  d8 = d46 * +HEAPF64[i22 >> 3] + 0.0 + d47 * +HEAPF64[i23 >> 3] + d48 * +HEAPF64[i24 >> 3] + d9 * +HEAPF64[i25 >> 3];
  d9 = d46 * +HEAPF64[i18 >> 3] + 0.0 + d47 * +HEAPF64[i19 >> 3] + d48 * +HEAPF64[i20 >> 3] + d9 * +HEAPF64[i21 >> 3];
  i1 = i39;
  i24 = i40;
  i2 = i38;
  d3 = d3 < 0.0 ? 0.0 : d3;
  d6 = d6 < 0.0 ? 0.0 : d6;
  d8 = d8 < 0.0 ? 0.0 : d8;
  d9 = d9 < 0.0 ? 0.0 : d9;
  i5 = HEAP32[i38 >> 2] | 0;
  i4 = HEAP32[i39 >> 2] | 0;
  i17 = HEAP32[i40 >> 2] | 0;
 } while (0);
 i18 = i40 + 12 | 0;
 HEAP16[i18 >> 1] = ~~(d3 * 65536.0 + .5);
 HEAP16[i40 + 14 >> 1] = ~~(d6 * 65536.0 + .5);
 HEAP16[i40 + 16 >> 1] = ~~(d8 * 65536.0 + .5);
 HEAP16[i40 + 18 >> 1] = ~~(d9 * 65536.0 + .5);
 i11 = HEAP32[i42 + 8 >> 2] | 0;
 i7 = HEAP32[i42 + 12 >> 2] | 0;
 i21 = ((i4 + i5 << 1) + 17 << i17) + -5 | 0;
 i20 = -1 << i17;
 i19 = (i21 + i11 & i20) + -4 | 0;
 i20 = (i21 + i7 & i20) + -4 | 0;
 i21 = 1 << (HEAP32[i41 >> 2] | 0) + -1;
 i4 = Math_imul(i21 + -1 + i19 & 0 - i21, i20) | 0;
 i21 = _ass_aligned_alloc(i21 << 1, i4 << 2, 0) | 0;
 if (!i21) {
  i49 = 0;
  STACKTOP = i44;
  return i49 | 0;
 }
 i22 = i42 + 20 | 0;
 i23 = i42 + 16 | 0;
 FUNCTION_TABLE_viiiii[HEAP32[i41 + 36 >> 2] & 31](i21, HEAP32[i22 >> 2] | 0, HEAP32[i23 >> 2] | 0, i11, i7);
 HEAP32[i43 >> 2] = i21;
 HEAP32[i43 + 4 >> 2] = i21 + (i4 << 1);
 i12 = (i17 | 0) > 0;
 if (i12) {
  i13 = i41 + 48 | 0;
  i5 = 0;
  i4 = 0;
  i10 = i21;
  do {
   i4 = i4 ^ 1;
   i49 = i10;
   i10 = HEAP32[i43 + (i4 << 2) >> 2] | 0;
   FUNCTION_TABLE_viiii[HEAP32[i13 >> 2] & 31](i10, i49, i11, i7);
   i7 = i7 + 5 >> 1;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (i17 | 0));
  if (i12) {
   i12 = i41 + 44 | 0;
   i5 = 0;
   while (1) {
    i4 = i4 ^ 1;
    i13 = HEAP32[i43 + (i4 << 2) >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[i12 >> 2] & 31](i13, i10, i11, i7);
    i11 = i11 + 5 >> 1;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) >= (i17 | 0)) {
     i10 = i13;
     break;
    } else i10 = i13;
   }
  }
 } else {
  i4 = 0;
  i10 = i21;
 }
 i5 = HEAP32[i2 >> 2] | 0;
 if (i5) {
  i4 = i4 ^ 1;
  i49 = HEAP32[i43 + (i4 << 2) >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[i41 + 60 + (i5 + -1 << 2) >> 2] & 31](i49, i10, i11, i7);
  i11 = (i5 << 1) + i11 | 0;
  i10 = i49;
 }
 i5 = i4 ^ 1;
 FUNCTION_TABLE_viiiii[HEAP32[i41 + 84 + (HEAP32[i1 >> 2] << 2) >> 2] & 31](HEAP32[i43 + (i5 << 2) >> 2] | 0, i10, i11, i7, i18);
 i4 = i11 + 8 + (HEAP32[i1 >> 2] << 1) | 0;
 if ((HEAP32[i24 >> 2] | 0) > 0) {
  i12 = i41 + 52 | 0;
  i11 = 0;
  while (1) {
   i10 = i5 ^ 1;
   FUNCTION_TABLE_viiii[HEAP32[i12 >> 2] & 31](HEAP32[i43 + (i10 << 2) >> 2] | 0, HEAP32[i43 + (i5 << 2) >> 2] | 0, i4, i7);
   i4 = (i4 << 1) + 4 | 0;
   i11 = i11 + 1 | 0;
   if ((i11 | 0) >= (HEAP32[i24 >> 2] | 0)) {
    i12 = i4;
    i5 = i10;
    break;
   } else i5 = i10;
  }
 } else i12 = i4;
 i4 = HEAP32[i2 >> 2] | 0;
 if (i4) {
  i49 = i5 ^ 1;
  FUNCTION_TABLE_viiii[HEAP32[i41 + 72 + (i4 + -1 << 2) >> 2] & 31](HEAP32[i43 + (i49 << 2) >> 2] | 0, HEAP32[i43 + (i5 << 2) >> 2] | 0, i12, i7);
  i7 = (HEAP32[i2 >> 2] << 1) + i7 | 0;
  i5 = i49;
 }
 i4 = i5 ^ 1;
 FUNCTION_TABLE_viiiii[HEAP32[i41 + 96 + (HEAP32[i1 >> 2] << 2) >> 2] & 31](HEAP32[i43 + (i4 << 2) >> 2] | 0, HEAP32[i43 + (i5 << 2) >> 2] | 0, i12, i7, i18);
 i5 = i7 + 8 + (HEAP32[i1 >> 2] << 1) | 0;
 if ((HEAP32[i24 >> 2] | 0) > 0) {
  i11 = i41 + 56 | 0;
  i10 = 0;
  while (1) {
   i7 = i4 ^ 1;
   FUNCTION_TABLE_viiii[HEAP32[i11 >> 2] & 31](HEAP32[i43 + (i7 << 2) >> 2] | 0, HEAP32[i43 + (i4 << 2) >> 2] | 0, i12, i5);
   i5 = (i5 << 1) + 4 | 0;
   i10 = i10 + 1 | 0;
   if ((i10 | 0) >= (HEAP32[i24 >> 2] | 0)) {
    i4 = i7;
    break;
   } else i4 = i7;
  }
 }
 if (!((i12 | 0) == (i19 | 0) & (i5 | 0) == (i20 | 0))) ___assert_fail(359837, 359862, 898, 359873);
 if (_realloc_bitmap(i41, i42, i19, i20) | 0) {
  i49 = ((HEAP32[i2 >> 2] | 0) + 8 + (HEAP32[i1 >> 2] | 0) << HEAP32[i24 >> 2]) + -4 | 0;
  HEAP32[i42 >> 2] = (HEAP32[i42 >> 2] | 0) - i49;
  i1 = i42 + 4 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - i49;
  FUNCTION_TABLE_viiiii[HEAP32[i41 + 40 >> 2] & 31](HEAP32[i22 >> 2] | 0, HEAP32[i23 >> 2] | 0, HEAP32[i43 + (i4 << 2) >> 2] | 0, i19, i20);
  _ass_aligned_free(i21);
  i1 = 1;
 } else {
  _ass_aligned_free(i21);
  i1 = 0;
 }
 i49 = i1;
 STACKTOP = i44;
 return i49 | 0;
}

function _sfnt_load_face(i8, i20, i1, i4, i5) {
 i8 = i8 | 0;
 i20 = i20 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i18 = i21 + 28 | 0;
 i19 = i21;
 i17 = HEAP32[i20 + 532 >> 2] | 0;
 L1 : do if ((i4 | 0) > 0) {
  i1 = 0;
  i2 = 0;
  i3 = 0;
  while (1) {
   switch (HEAP32[i5 + (i3 << 3) >> 2] | 0) {
   case 1768386662:
    {
     i1 = 1;
     break;
    }
   case 1768386675:
    {
     i2 = 1;
     break;
    }
   default:
    {}
   }
   i3 = i3 + 1 | 0;
   if ((i3 | 0) == (i4 | 0)) {
    i7 = i1;
    break L1;
   }
  }
 } else {
  i7 = 0;
  i2 = 0;
 } while (0);
 i6 = i20 + 128 | 0;
 L9 : do if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] | 0)) {
  i4 = HEAP16[i20 + 152 >> 1] | 0;
  i1 = HEAP32[i20 + 156 >> 2] | 0;
  i5 = i1 + ((i4 & 65535) << 4) | 0;
  i4 = i4 << 16 >> 16 == 0;
  L11 : do if (i4) i1 = 0; else {
   i3 = i1;
   do {
    if ((HEAP32[i3 >> 2] | 0) == 1735162214) if (HEAP32[i3 + 12 >> 2] | 0) {
     i1 = 1;
     break L9;
    }
    i3 = i3 + 16 | 0;
   } while (i3 >>> 0 < i5 >>> 0);
   if (i4) i1 = 0; else while (1) {
    if ((HEAP32[i1 >> 2] | 0) == 1128678944) if (HEAP32[i1 + 12 >> 2] | 0) break L11;
    i1 = i1 + 16 | 0;
    if (i1 >>> 0 >= i5 >>> 0) {
     i1 = 0;
     break;
    }
   }
  } while (0);
  i1 = (i1 | 0) != 0;
 } else i1 = 1; while (0);
 i3 = (FUNCTION_TABLE_iiiii[HEAP32[i20 + 508 >> 2] & 127](i20, 1935829368, i8, 0) | 0) == 0;
 i5 = i1 & (i3 ^ 1) & 1;
 if (i3 | i1 ^ 1) {
  i1 = HEAP32[i17 + 68 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i10 = 19;
  } else {
   i1 = FUNCTION_TABLE_iii[i1 & 255](i20, i8) | 0;
   HEAP32[i18 >> 2] = i1;
   i1 = (i1 | 0) == 0;
   if (i3 | i1 ^ 1) i10 = 19;
  }
 } else {
  i1 = 0;
  i10 = 19;
 }
 if ((i10 | 0) == 19) {
  i3 = FUNCTION_TABLE_iii[HEAP32[i17 + 24 >> 2] & 255](i20, i8) | 0;
  HEAP32[i18 >> 2] = i3;
  if (i3) {
   i20 = i3;
   STACKTOP = i21;
   return i20 | 0;
  }
 }
 i16 = i20 + 178 | 0;
 if (!(HEAP16[i16 >> 1] | 0)) {
  HEAP32[i18 >> 2] = 8;
  i20 = 8;
  STACKTOP = i21;
  return i20 | 0;
 }
 FUNCTION_TABLE_iii[HEAP32[i17 + 36 >> 2] & 255](i20, i8) | 0;
 FUNCTION_TABLE_iii[HEAP32[i17 + 32 >> 2] & 255](i20, i8) | 0;
 FUNCTION_TABLE_iii[HEAP32[i17 + 48 >> 2] & 255](i20, i8) | 0;
 i9 = FUNCTION_TABLE_iii[HEAP32[i17 + 44 >> 2] & 255](i20, i8) | 0;
 HEAP32[i18 >> 2] = i9;
 if (i1) i3 = i5; else {
  i4 = i17 + 28 | 0;
  i1 = FUNCTION_TABLE_iiii[HEAP32[i4 >> 2] & 127](i20, i8, 0) | 0;
  HEAP32[i18 >> 2] = i1;
  do if (!i1) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i17 + 92 >> 2] & 127](i20, i8, 0) | 0;
   HEAP32[i18 >> 2] = i1;
   if ((i1 & 255 | 0) != 142) {
    if (!i1) {
     i3 = i5;
     break;
    }
    STACKTOP = i21;
    return i1 | 0;
   }
   HEAP32[i18 >> 2] = 147;
   i1 = HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] | 0;
   if (!i1) {
    i20 = 147;
    STACKTOP = i21;
    return i20 | 0;
   }
   if (!(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0)) {
    i20 = 147;
    STACKTOP = i21;
    return i20 | 0;
   } else {
    HEAP16[i20 + 250 >> 1] = 0;
    HEAP32[i18 >> 2] = 0;
    i3 = i5;
    break;
   }
  } else {
   if ((i1 & 255 | 0) != 142) {
    i20 = i1;
    STACKTOP = i21;
    return i20 | 0;
   }
   if ((HEAP32[i20 + 148 >> 2] | 0) == 1953658213) {
    HEAP32[i18 >> 2] = 0;
    i3 = 0;
    break;
   }
   HEAP32[i18 >> 2] = 143;
   i1 = HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] | 0;
   if (!i1) {
    i20 = 143;
    STACKTOP = i21;
    return i20 | 0;
   }
   if (!(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0)) {
    i20 = 143;
    STACKTOP = i21;
    return i20 | 0;
   } else {
    HEAP16[i20 + 250 >> 1] = 0;
    HEAP32[i18 >> 2] = 0;
    i3 = i5;
    break;
   }
  } while (0);
  i1 = FUNCTION_TABLE_iiii[HEAP32[i4 >> 2] & 127](i20, i8, 1) | 0;
  HEAP32[i18 >> 2] = i1;
  if (!i1) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i17 + 92 >> 2] & 127](i20, i8, 1) | 0;
   HEAP32[i18 >> 2] = i1;
   if (!i1) HEAP8[i20 + 292 >> 0] = 1; else i10 = 38;
  } else i10 = 38;
  if ((i10 | 0) == 38) if (!((i1 | 0) == 0 | (i1 & 255 | 0) == 142)) {
   i20 = i1;
   STACKTOP = i21;
   return i20 | 0;
  }
  i15 = FUNCTION_TABLE_iii[HEAP32[i17 + 40 >> 2] & 255](i20, i8) | 0;
  HEAP32[i18 >> 2] = i15;
  if (i15) HEAP16[i20 + 364 >> 1] = -1;
 }
 i1 = HEAP32[i17 + 96 >> 2] | 0;
 do if (i1 | 0) {
  i1 = FUNCTION_TABLE_iii[i1 & 255](i20, i8) | 0;
  HEAP32[i18 >> 2] = i1;
  if (i1 | 0) if ((i1 & 255 | 0) == 142) {
   HEAP32[i18 >> 2] = 0;
   break;
  } else {
   i20 = i1;
   STACKTOP = i21;
   return i20 | 0;
  }
 } while (0);
 i1 = FUNCTION_TABLE_iii[HEAP32[i17 + 64 >> 2] & 255](i20, i8) | 0;
 HEAP32[i18 >> 2] = i1;
 do if (i1 | 0) if ((i1 & 255 | 0) == 142) {
  HEAP32[i20 + 548 >> 2] = 0;
  break;
 } else {
  i20 = i1;
  STACKTOP = i21;
  return i20 | 0;
 } while (0);
 FUNCTION_TABLE_iii[HEAP32[i17 + 60 >> 2] & 255](i20, i8) | 0;
 i4 = FUNCTION_TABLE_iii[HEAP32[i17 + 56 >> 2] & 255](i20, i8) | 0;
 HEAP32[i18 >> 2] = i4;
 HEAP32[i20 + 16 >> 2] = HEAPU16[i20 + 264 >> 1];
 i4 = i20 + 20 | 0;
 HEAP32[i4 >> 2] = 0;
 i5 = i20 + 24 | 0;
 HEAP32[i5 >> 2] = 0;
 i15 = i20 + 364 | 0;
 if ((HEAP16[i15 >> 1] | 0) == -1) i10 = 58; else if (!(HEAP16[i20 + 428 >> 1] & 256)) i10 = 58; else {
  do if (!(i7 << 24 >> 24)) {
   i1 = _tt_face_get_name(i20, 16, i4) | 0;
   HEAP32[i18 >> 2] = i1;
   if (!i1) if (!(HEAP32[i4 >> 2] | 0)) {
    i10 = 53;
    break;
   } else break; else {
    i20 = i1;
    STACKTOP = i21;
    return i20 | 0;
   }
  } else i10 = 53; while (0);
  if ((i10 | 0) == 53) {
   i1 = _tt_face_get_name(i20, 1, i4) | 0;
   HEAP32[i18 >> 2] = i1;
   if (i1 | 0) {
    i20 = i1;
    STACKTOP = i21;
    return i20 | 0;
   }
  }
  if (!(i2 << 24 >> 24)) {
   i1 = _tt_face_get_name(i20, 17, i5) | 0;
   HEAP32[i18 >> 2] = i1;
   if (i1 | 0) {
    i20 = i1;
    STACKTOP = i21;
    return i20 | 0;
   }
  }
  if (!(HEAP32[i5 >> 2] | 0)) {
   i1 = _tt_face_get_name(i20, 2, i5) | 0;
   HEAP32[i18 >> 2] = i1;
   if (i1 | 0) {
    i20 = i1;
    STACKTOP = i21;
    return i20 | 0;
   }
  }
 }
 if ((i10 | 0) == 58) {
  i1 = _tt_face_get_name(i20, 21, i4) | 0;
  HEAP32[i18 >> 2] = i1;
  if (i1 | 0) {
   i20 = i1;
   STACKTOP = i21;
   return i20 | 0;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  do if (!(i7 << 24 >> 24 != 0 | (i1 | 0) != 0)) {
   i1 = _tt_face_get_name(i20, 16, i4) | 0;
   HEAP32[i18 >> 2] = i1;
   if (!i1) {
    i1 = HEAP32[i4 >> 2] | 0;
    break;
   } else {
    i20 = i1;
    STACKTOP = i21;
    return i20 | 0;
   }
  } while (0);
  if (!i1) {
   i1 = _tt_face_get_name(i20, 1, i4) | 0;
   HEAP32[i18 >> 2] = i1;
   if (i1 | 0) {
    i20 = i1;
    STACKTOP = i21;
    return i20 | 0;
   }
  }
  i1 = _tt_face_get_name(i20, 22, i5) | 0;
  HEAP32[i18 >> 2] = i1;
  if (i1 | 0) {
   i20 = i1;
   STACKTOP = i21;
   return i20 | 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  do if (!(i2 << 24 >> 24 != 0 | (i1 | 0) != 0)) {
   i1 = _tt_face_get_name(i20, 17, i5) | 0;
   HEAP32[i18 >> 2] = i1;
   if (!i1) {
    i1 = HEAP32[i5 >> 2] | 0;
    break;
   } else {
    i20 = i1;
    STACKTOP = i21;
    return i20 | 0;
   }
  } while (0);
  if (!i1) {
   i1 = _tt_face_get_name(i20, 2, i5) | 0;
   HEAP32[i18 >> 2] = i1;
   if (i1 | 0) {
    i20 = i1;
    STACKTOP = i21;
    return i20 | 0;
   }
  }
 }
 i13 = i20 + 8 | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 i5 = i3 << 24 >> 24 == 1;
 i2 = ((HEAP32[i20 + 732 >> 2] & -2 | 0) == 2 ? i2 | 16384 : i2) | i5 & 1;
 i1 = i2 | 24;
 if (!i9) i1 = (HEAP32[i20 + 468 >> 2] | 0) == 196608 ? i1 : i2 | 536;
 i1 = (HEAP32[i20 + 480 >> 2] | 0) == 0 ? i1 : i1 | 4;
 i14 = i20 + 292 | 0;
 i1 = (HEAP8[i14 >> 0] | 0) == 0 ? i1 : i1 | 32;
 i1 = (HEAP32[i20 + 752 >> 2] | 0) == 0 ? i1 : i1 | 64;
 i12 = HEAP16[i20 + 152 >> 1] | 0;
 i2 = HEAP32[i20 + 156 >> 2] | 0;
 i4 = i2 + ((i12 & 65535) << 4) | 0;
 L134 : do if (i12 << 16 >> 16) {
  i3 = i2;
  while (1) {
   if ((HEAP32[i3 >> 2] | 0) == 1735162214) if (HEAP32[i3 + 12 >> 2] | 0) {
    i3 = i2;
    break;
   }
   i3 = i3 + 16 | 0;
   if (i3 >>> 0 >= i4 >>> 0) break L134;
  }
  while (1) {
   if ((HEAP32[i3 >> 2] | 0) == 1719034226) if (HEAP32[i3 + 12 >> 2] | 0) break;
   i3 = i3 + 16 | 0;
   if (i3 >>> 0 >= i4 >>> 0) break L134;
  }
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) == 1735811442) if (HEAP32[i2 + 12 >> 2] | 0) break;
   i2 = i2 + 16 | 0;
   if (i2 >>> 0 >= i4 >>> 0) {
    i2 = 0;
    break;
   }
  }
  i1 = (i2 | 0) == 0 ? i1 : i1 | 256;
 } while (0);
 HEAP32[i13 >> 2] = i1;
 if (i5) if ((HEAP16[i15 >> 1] | 0) == -1) i10 = 86; else {
  i2 = HEAPU16[i20 + 428 >> 1] | 0;
  i3 = (i2 & 512 | 0) == 0 ? i2 & 1 : 1;
  i1 = i3;
  i2 = i2 & 32;
  i3 = i3 | 2;
 } else i10 = 86;
 if ((i10 | 0) == 86) {
  i2 = HEAPU16[i20 + 204 >> 1] | 0;
  i3 = i2 << 1 & 2;
  i1 = i3;
  i2 = i2 & 2;
  i3 = i3 | 1;
 }
 HEAP32[i20 + 12 >> 2] = (i2 | 0) == 0 ? i1 : i3;
 _tt_face_build_cmaps(i20);
 i3 = HEAP32[i20 + 36 >> 2] | 0;
 L158 : do if ((i3 | 0) > 0) {
  i4 = HEAP32[i20 + 40 >> 2] | 0;
  i2 = 0;
  while (1) {
   i5 = HEAP32[i4 + (i2 << 2) >> 2] | 0;
   i1 = HEAP16[i5 + 10 >> 1] | 0;
   L162 : do switch (HEAP16[i5 + 8 >> 1] | 0) {
   case 2:
    {
     i1 = 20172;
     i10 = 98;
     break;
    }
   case 0:
    {
     i1 = 20184;
     i10 = 98;
     break;
    }
   case 1:
    {
     if (!(i1 << 16 >> 16)) {
      i1 = 20196;
      i10 = 98;
     } else i1 = 0;
     break;
    }
   case 3:
    switch (i1 << 16 >> 16) {
    case 0:
     {
      i1 = 20208;
      i10 = 98;
      break L162;
     }
    case 10:
     {
      i1 = 20220;
      i10 = 98;
      break L162;
     }
    case 1:
     {
      i1 = 20232;
      i10 = 98;
      break L162;
     }
    case 2:
     {
      i1 = 20244;
      i10 = 98;
      break L162;
     }
    case 3:
     {
      i1 = 20256;
      i10 = 98;
      break L162;
     }
    case 4:
     {
      i1 = 20268;
      i10 = 98;
      break L162;
     }
    case 5:
     {
      i1 = 20280;
      i10 = 98;
      break L162;
     }
    case 6:
     {
      i1 = 20292;
      i10 = 98;
      break L162;
     }
    default:
     {
      i1 = 0;
      break L162;
     }
    }
   default:
    i1 = 0;
   } while (0);
   if ((i10 | 0) == 98) {
    i10 = 0;
    i1 = HEAP32[i1 + 8 >> 2] | 0;
   }
   HEAP32[i5 + 4 >> 2] = i1;
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (i3 | 0)) break L158;
  }
 } while (0);
 i12 = HEAP32[i20 + 736 >> 2] | 0;
 L178 : do if (!i12) i1 = HEAP32[i13 >> 2] | 0; else {
  i3 = HEAP32[(HEAP32[i20 + 104 >> 2] | 0) + 28 >> 2] | 0;
  i2 = HEAP16[i16 >> 1] | 0;
  i1 = HEAP16[i20 + 366 >> 1] | 0;
  if (!(i2 << 16 >> 16)) i10 = 106; else if ((HEAP16[i15 >> 1] | 0) == -1) i10 = 106; else i4 = i1;
  if ((i10 | 0) == 106) {
   i4 = 1;
   i2 = 1;
  }
  i8 = _ft_mem_realloc(i3, 16, 0, i12, 0, i18) | 0;
  i11 = i20 + 32 | 0;
  HEAP32[i11 >> 2] = i8;
  i1 = HEAP32[i18 >> 2] | 0;
  L186 : do if (!i1) {
   i9 = i17 + 108 | 0;
   i10 = i19 + 20 | 0;
   i6 = i4 << 16 >> 16;
   i7 = i2 & 65535;
   i4 = (i2 & 65535) >>> 1 & 65535;
   i5 = i19 + 2 | 0;
   i1 = FUNCTION_TABLE_iiii[HEAP32[i9 >> 2] & 127](i20, 0, i19) | 0;
   HEAP32[i18 >> 2] = i1;
   if (!i1) {
    i3 = 0;
    i2 = i8;
    while (1) {
     HEAP16[i2 + (i3 << 4) >> 1] = (HEAP32[i10 >> 2] | 0) >>> 6;
     i17 = HEAPU16[i19 >> 1] | 0;
     i8 = (((Math_imul(i17, i6) | 0) + i4 | 0) / (i7 | 0) | 0) & 65535;
     HEAP16[i2 + (i3 << 4) + 2 >> 1] = i8;
     HEAP32[i2 + (i3 << 4) + 8 >> 2] = i17 << 6;
     i17 = HEAPU16[i5 >> 1] << 6;
     HEAP32[i2 + (i3 << 4) + 12 >> 2] = i17;
     HEAP32[i2 + (i3 << 4) + 4 >> 2] = i17;
     i3 = i3 + 1 | 0;
     if (i3 >>> 0 >= i12 >>> 0) break;
     i2 = HEAP32[i11 >> 2] | 0;
     i1 = FUNCTION_TABLE_iiii[HEAP32[i9 >> 2] & 127](i20, i3, i19) | 0;
     HEAP32[i18 >> 2] = i1;
     if (i1 | 0) break L186;
    }
    i1 = HEAP32[i13 >> 2] | 2;
    HEAP32[i13 >> 2] = i1;
    HEAP32[i20 + 28 >> 2] = i12;
    break L178;
   }
  } while (0);
  i20 = i1;
  STACKTOP = i21;
  return i20 | 0;
 } while (0);
 if (!(i1 & 3)) {
  i1 = i1 | 1;
  HEAP32[i13 >> 2] = i1;
 }
 if (!(i1 & 1)) {
  i20 = 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 HEAP32[i20 + 52 >> 2] = HEAP16[i20 + 196 >> 1];
 HEAP32[i20 + 56 >> 2] = HEAP16[i20 + 198 >> 1];
 HEAP32[i20 + 60 >> 2] = HEAP16[i20 + 200 >> 1];
 HEAP32[i20 + 64 >> 2] = HEAP16[i20 + 202 >> 1];
 HEAP16[i20 + 68 >> 1] = HEAP16[i16 >> 1] | 0;
 i18 = HEAP16[i20 + 220 >> 1] | 0;
 i3 = i20 + 70 | 0;
 HEAP16[i3 >> 1] = i18;
 i19 = HEAP16[i20 + 222 >> 1] | 0;
 i4 = i20 + 72 | 0;
 HEAP16[i4 >> 1] = i19;
 i1 = (i18 & 65535) - (i19 & 65535) + (HEAPU16[i20 + 224 >> 1] | 0) | 0;
 i5 = i20 + 74 | 0;
 HEAP16[i5 >> 1] = i1;
 if (!((i18 | i19) << 16 >> 16)) if ((HEAP16[i15 >> 1] | 0) != -1) {
  i1 = HEAP16[i20 + 434 >> 1] | 0;
  i2 = HEAP16[i20 + 436 >> 1] | 0;
  if (!((i2 | i1) << 16 >> 16)) {
   i19 = HEAP16[i20 + 440 >> 1] | 0;
   HEAP16[i3 >> 1] = i19;
   i1 = HEAPU16[i20 + 442 >> 1] | 0;
   HEAP16[i4 >> 1] = 0 - i1;
   i1 = (i19 & 65535) + i1 | 0;
  } else {
   HEAP16[i3 >> 1] = i1;
   HEAP16[i4 >> 1] = i2;
   i1 = (i1 << 16 >> 16) - (i2 << 16 >> 16) + (HEAP16[i20 + 438 >> 1] | 0) | 0;
  }
  HEAP16[i5 >> 1] = i1;
 }
 HEAP16[i20 + 76 >> 1] = HEAP16[i20 + 226 >> 1] | 0;
 if (!(HEAP8[i14 >> 0] | 0)) i1 = i1 << 16 >> 16; else i1 = HEAPU16[i20 + 306 >> 1] | 0;
 HEAP16[i20 + 78 >> 1] = i1;
 i19 = HEAP16[i20 + 478 >> 1] | 0;
 HEAP16[i20 + 80 >> 1] = (HEAPU16[i20 + 476 >> 1] | 0) - (((i19 << 16 >> 16) / 2 | 0) & 65535);
 HEAP16[i20 + 82 >> 1] = i19;
 i20 = 0;
 STACKTOP = i21;
 return i20 | 0;
}

function __bdf_add_property(i17, i16, i3) {
 i17 = i17 | 0;
 i16 = i16 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0, i19 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i20 + 4 | 0;
 i19 = i20;
 i18 = HEAP32[i17 + 278664 >> 2] | 0;
 HEAP32[i19 >> 2] = 0;
 i14 = i17 + 128 | 0;
 i5 = HEAP32[i14 >> 2] | 0;
 i6 = HEAP32[i5 + 12 >> 2] | 0;
 i7 = HEAP8[i16 >> 0] | 0;
 i9 = i7 << 24 >> 24 == 0;
 if (i9) i1 = 0; else {
  i2 = i16;
  i1 = 0;
  i4 = i7;
  do {
   i2 = i2 + 1 | 0;
   i1 = (i1 * 31 | 0) + (i4 << 24 >> 24) | 0;
   i4 = HEAP8[i2 >> 0] | 0;
  } while (i4 << 24 >> 24 != 0);
 }
 i2 = HEAP32[i5 + 4 >> 2] | 0;
 i4 = i6 + (((i1 >>> 0) % (i2 >>> 0) | 0) << 2) | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 L5 : do if (i1 | 0) {
  i5 = i6 + (i2 + -1 << 2) | 0;
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if ((HEAP8[i2 >> 0] | 0) == i7 << 24 >> 24) if (!(_strcmp(i2, i16) | 0)) break;
   i1 = i4 + -4 | 0;
   i4 = i1 >>> 0 < i6 >>> 0 ? i5 : i1;
   i1 = HEAP32[i4 >> 2] | 0;
   if (!i1) break L5;
  }
  i9 = HEAP32[i17 + 80 >> 2] | 0;
  i8 = HEAP32[i1 + 4 >> 2] | 0;
  switch (HEAP32[i9 + (i8 << 4) + 4 >> 2] | 0) {
  case 1:
   {
    i1 = i9 + (i8 << 4) + 12 | 0;
    _ft_mem_free(i18, HEAP32[i1 >> 2] | 0);
    HEAP32[i1 >> 2] = 0;
    if (!i3) {
     i19 = 0;
     STACKTOP = i20;
     return i19 | 0;
    }
    if (!(HEAP8[i3 >> 0] | 0)) {
     i19 = 0;
     STACKTOP = i20;
     return i19 | 0;
    }
    i18 = _ft_mem_strdup(i18, i3, i19) | 0;
    HEAP32[i1 >> 2] = i18;
    i19 = HEAP32[i19 >> 2] | 0;
    STACKTOP = i20;
    return i19 | 0;
   }
  case 2:
   {
    if (!i3) i1 = 0; else {
     i1 = HEAP8[i3 >> 0] | 0;
     if (!(i1 << 24 >> 24)) i1 = 0; else {
      i7 = i1 << 24 >> 24 == 45;
      i1 = i7 ? i3 + 1 | 0 : i3;
      i2 = HEAP8[i1 >> 0] | 0;
      L26 : do if (i2 << 24 >> 24 == 48) {
       switch (HEAP8[i1 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i5 = 281756;
         i6 = 10;
         i3 = i1;
         i2 = 48;
         break L26;
        }
       }
       i2 = i1 + 2 | 0;
       i5 = 281724;
       i6 = 16;
       i3 = i2;
       i2 = HEAP8[i2 >> 0] | 0;
      } else {
       i5 = 281756;
       i6 = 10;
       i3 = i1;
      } while (0);
      i4 = i2 << 24 >> 24;
      if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
       i1 = 0;
       i2 = i4;
       do {
        i1 = Math_imul(i1, i6) | 0;
        i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 | 0;
        i3 = i3 + 1 | 0;
        i19 = HEAP8[i3 >> 0] | 0;
        i2 = i19 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i19 & 255) >>> 3) >> 0] | 0) != 0);
      }
      i1 = i7 ? 0 - i1 | 0 : i1;
     }
    }
    HEAP32[i9 + (i8 << 4) + 12 >> 2] = i1;
    i19 = 0;
    STACKTOP = i20;
    return i19 | 0;
   }
  case 3:
   {
    L37 : do if (!i3) i1 = 0; else {
     i1 = HEAP8[i3 >> 0] | 0;
     L39 : do switch (i1 << 24 >> 24) {
     case 0:
      {
       i1 = 0;
       break L37;
      }
     case 48:
      {
       switch (HEAP8[i3 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i4 = 281756;
         i5 = 10;
         i1 = 48;
         break L39;
        }
       }
       i1 = i3 + 2 | 0;
       i3 = i1;
       i4 = 281724;
       i5 = 16;
       i1 = HEAP8[i1 >> 0] | 0;
       break;
      }
     default:
      {
       i4 = 281756;
       i5 = 10;
      }
     } while (0);
     i2 = i1 << 24 >> 24;
     if (!(HEAPU8[i4 + ((i1 & 255) >>> 3) >> 0] & 1 << (i2 & 7))) i1 = 0; else {
      i1 = 0;
      do {
       i1 = Math_imul(i1, i5) | 0;
       i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 | 0;
       i3 = i3 + 1 | 0;
       i19 = HEAP8[i3 >> 0] | 0;
       i2 = i19 << 24 >> 24;
      } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i19 & 255) >>> 3) >> 0] | 0) != 0);
     }
    } while (0);
    HEAP32[i9 + (i8 << 4) + 12 >> 2] = i1;
    i19 = 0;
    STACKTOP = i20;
    return i19 | 0;
   }
  default:
   {
    i19 = 0;
    STACKTOP = i20;
    return i19 | 0;
   }
  }
 } while (0);
 i10 = i17 + 278676 | 0;
 i11 = i17 + 278688 | 0;
 i6 = HEAP32[i11 >> 2] | 0;
 if (i9) i1 = 0; else {
  i2 = i16;
  i1 = 0;
  i4 = i7;
  do {
   i2 = i2 + 1 | 0;
   i1 = (i1 * 31 | 0) + (i4 << 24 >> 24) | 0;
   i4 = HEAP8[i2 >> 0] | 0;
  } while (i4 << 24 >> 24 != 0);
 }
 i12 = i17 + 278680 | 0;
 i8 = HEAP32[i12 >> 2] | 0;
 i1 = i6 + (((i1 >>> 0) % (i8 >>> 0) | 0) << 2) | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 L53 : do if (!i4) i15 = 35; else {
  i5 = i6 + (i8 + -1 << 2) | 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if ((HEAP8[i2 >> 0] | 0) == i7 << 24 >> 24) if (!(_strcmp(i2, i16) | 0)) break L53;
   i4 = i1 + -4 | 0;
   i1 = i4 >>> 0 < i6 >>> 0 ? i5 : i4;
   i4 = HEAP32[i1 >> 2] | 0;
   if (!i4) {
    i15 = 35;
    break;
   }
  }
 } while (0);
 L60 : do if ((i15 | 0) == 35) {
  HEAP32[i13 >> 2] = 0;
  if (i9) i1 = 0; else {
   i2 = i16;
   i1 = 0;
   i4 = i7;
   do {
    i2 = i2 + 1 | 0;
    i1 = (i1 * 31 | 0) + (i4 << 24 >> 24) | 0;
    i4 = HEAP8[i2 >> 0] | 0;
   } while (i4 << 24 >> 24 != 0);
  }
  i2 = i6 + (((i1 >>> 0) % (i8 >>> 0) | 0) << 2) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  L66 : do if (!i1) i15 = 42; else {
   i4 = i6 + (i8 + -1 << 2) | 0;
   while (1) {
    i1 = HEAP32[i1 >> 2] | 0;
    if ((HEAP8[i1 >> 0] | 0) == i7 << 24 >> 24) if (!(_strcmp(i1, i16) | 0)) break L66;
    i1 = i2 + -4 | 0;
    i2 = i1 >>> 0 < i6 >>> 0 ? i4 : i1;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i15 = 42;
     break;
    }
   }
  } while (0);
  do if ((i15 | 0) == 42) {
   i8 = i17 + 278672 | 0;
   i7 = HEAP32[i8 >> 2] | 0;
   i1 = i17 + 278668 | 0;
   i7 = _ft_mem_realloc(i18, 16, i7, i7 + 1 | 0, HEAP32[i1 >> 2] | 0, i13) | 0;
   HEAP32[i1 >> 2] = i7;
   i1 = HEAP32[i13 >> 2] | 0;
   if (!i1) {
    i2 = HEAP32[i8 >> 2] | 0;
    i4 = i7 + (i2 << 4) | 0;
    HEAP32[i4 >> 2] = 0;
    HEAP32[i4 + 4 >> 2] = 0;
    HEAP32[i4 + 8 >> 2] = 0;
    HEAP32[i4 + 12 >> 2] = 0;
    i5 = (_strlen(i16) | 0) + 1 | 0;
    i6 = _ft_mem_realloc(i18, 1, 0, i5, 0, i13) | 0;
    HEAP32[i4 >> 2] = i6;
    i1 = HEAP32[i13 >> 2] | 0;
    if (!i1) {
     _memcpy(i6 | 0, i16 | 0, i5 | 0) | 0;
     HEAP32[i7 + (i2 << 4) + 4 >> 2] = 1;
     HEAP32[i7 + (i2 << 4) + 8 >> 2] = 0;
     i1 = _hash_insert(HEAP32[i4 >> 2] | 0, (HEAP32[i8 >> 2] | 0) + 83 | 0, i10, i18) | 0;
     HEAP32[i13 >> 2] = i1;
     if (!i1) {
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
      i7 = HEAP8[i16 >> 0] | 0;
      i6 = HEAP32[i11 >> 2] | 0;
      break;
     }
    }
   }
   HEAP32[i19 >> 2] = i1;
   i19 = i1;
   STACKTOP = i20;
   return i19 | 0;
  } while (0);
  HEAP32[i19 >> 2] = 0;
  if (!(i7 << 24 >> 24)) i1 = 0; else {
   i2 = i16;
   i1 = 0;
   i4 = i7;
   do {
    i2 = i2 + 1 | 0;
    i1 = (i1 * 31 | 0) + (i4 << 24 >> 24) | 0;
    i4 = HEAP8[i2 >> 0] | 0;
   } while (i4 << 24 >> 24 != 0);
  }
  i2 = HEAP32[i12 >> 2] | 0;
  i1 = i6 + (((i1 >>> 0) % (i2 >>> 0) | 0) << 2) | 0;
  i4 = HEAP32[i1 >> 2] | 0;
  if (!i4) i4 = 0; else {
   i5 = i6 + (i2 + -1 << 2) | 0;
   while (1) {
    i2 = HEAP32[i4 >> 2] | 0;
    if ((HEAP8[i2 >> 0] | 0) == i7 << 24 >> 24) if (!(_strcmp(i2, i16) | 0)) break L60;
    i4 = i1 + -4 | 0;
    i1 = i4 >>> 0 < i6 >>> 0 ? i5 : i4;
    i4 = HEAP32[i1 >> 2] | 0;
    if (!i4) {
     i4 = 0;
     break;
    }
   }
  }
 } while (0);
 i11 = i17 + 76 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i5 = i17 + 72 | 0;
 if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
  if (!i1) {
   i1 = _ft_mem_realloc(i18, 16, 0, 1, 0, i19) | 0;
   HEAP32[i17 + 80 >> 2] = i1;
   i2 = HEAP32[i19 >> 2] | 0;
   if (i2) {
    i19 = i2;
    STACKTOP = i20;
    return i19 | 0;
   }
  } else {
   i2 = i17 + 80 | 0;
   i1 = _ft_mem_realloc(i18, 16, i1, i1 + 1 | 0, HEAP32[i2 >> 2] | 0, i19) | 0;
   HEAP32[i2 >> 2] = i1;
   i2 = HEAP32[i19 >> 2] | 0;
   if (i2) {
    i19 = i2;
    STACKTOP = i20;
    return i19 | 0;
   }
  }
  i13 = i1 + (HEAP32[i5 >> 2] << 4) | 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i13 + 4 >> 2] = 0;
  HEAP32[i13 + 8 >> 2] = 0;
  HEAP32[i13 + 12 >> 2] = 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 if (i1 >>> 0 > 82) i1 = (HEAP32[i17 + 278668 >> 2] | 0) + (i1 + -83 << 4) | 0; else i1 = 18108 + (i1 << 4) | 0;
 i9 = HEAP32[i17 + 80 >> 2] | 0;
 i10 = HEAP32[i11 >> 2] | 0;
 i8 = i9 + (i10 << 4) | 0;
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 i13 = i1 + 4 | 0;
 HEAP32[i9 + (i10 << 4) + 4 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i9 + (i10 << 4) + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 switch (HEAP32[i13 >> 2] | 0) {
 case 1:
  {
   i1 = i9 + (i10 << 4) + 12 | 0;
   HEAP32[i1 >> 2] = 0;
   if (i3 | 0) if (HEAP8[i3 >> 0] | 0) {
    i13 = _ft_mem_strdup(i18, i3, i19) | 0;
    HEAP32[i1 >> 2] = i13;
    i1 = HEAP32[i19 >> 2] | 0;
    if (i1 | 0) {
     i19 = i1;
     STACKTOP = i20;
     return i19 | 0;
    }
   }
   break;
  }
 case 2:
  {
   if (!i3) i1 = 0; else {
    i1 = HEAP8[i3 >> 0] | 0;
    if (!(i1 << 24 >> 24)) i1 = 0; else {
     i7 = i1 << 24 >> 24 == 45;
     i1 = i7 ? i3 + 1 | 0 : i3;
     i2 = HEAP8[i1 >> 0] | 0;
     L115 : do if (i2 << 24 >> 24 == 48) {
      switch (HEAP8[i1 + 1 >> 0] | 0) {
      case 88:
      case 120:
       break;
      default:
       {
        i5 = 281756;
        i6 = 10;
        i3 = i1;
        i2 = 48;
        break L115;
       }
      }
      i2 = i1 + 2 | 0;
      i5 = 281724;
      i6 = 16;
      i3 = i2;
      i2 = HEAP8[i2 >> 0] | 0;
     } else {
      i5 = 281756;
      i6 = 10;
      i3 = i1;
     } while (0);
     i4 = i2 << 24 >> 24;
     if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
      i1 = 0;
      i2 = i4;
      do {
       i1 = Math_imul(i1, i6) | 0;
       i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 | 0;
       i3 = i3 + 1 | 0;
       i13 = HEAP8[i3 >> 0] | 0;
       i2 = i13 << 24 >> 24;
      } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i13 & 255) >>> 3) >> 0] | 0) != 0);
     }
     i1 = i7 ? 0 - i1 | 0 : i1;
    }
   }
   HEAP32[i9 + (i10 << 4) + 12 >> 2] = i1;
   break;
  }
 case 3:
  {
   L125 : do if (!i3) i1 = 0; else {
    i1 = HEAP8[i3 >> 0] | 0;
    L127 : do switch (i1 << 24 >> 24) {
    case 0:
     {
      i1 = 0;
      break L125;
     }
    case 48:
     {
      switch (HEAP8[i3 + 1 >> 0] | 0) {
      case 88:
      case 120:
       break;
      default:
       {
        i4 = 281756;
        i5 = 10;
        i1 = 48;
        break L127;
       }
      }
      i1 = i3 + 2 | 0;
      i3 = i1;
      i4 = 281724;
      i5 = 16;
      i1 = HEAP8[i1 >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 281756;
      i5 = 10;
     }
    } while (0);
    i2 = i1 << 24 >> 24;
    if (!(HEAPU8[i4 + ((i1 & 255) >>> 3) >> 0] & 1 << (i2 & 7))) i1 = 0; else {
     i1 = 0;
     do {
      i1 = Math_imul(i1, i5) | 0;
      i1 = (HEAPU8[281788 + i2 >> 0] | 0) + i1 | 0;
      i3 = i3 + 1 | 0;
      i13 = HEAP8[i3 >> 0] | 0;
      i2 = i13 << 24 >> 24;
     } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i13 & 255) >>> 3) >> 0] | 0) != 0);
    }
   } while (0);
   HEAP32[i9 + (i10 << 4) + 12 >> 2] = i1;
   break;
  }
 default:
  {}
 }
 if (!(_strncmp(i16, 281687, 7) | 0)) switch (HEAP8[i16 + 7 >> 0] | 0) {
 case 9:
 case 13:
 case 10:
 case 0:
 case 32:
  break;
 default:
  i15 = 84;
 } else i15 = 84;
 if ((i15 | 0) == 84) {
  i1 = _hash_insert(HEAP32[i8 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i14 >> 2] | 0, i18) | 0;
  HEAP32[i19 >> 2] = i1;
  if (i1 | 0) {
   i19 = i1;
   STACKTOP = i20;
   return i19 | 0;
  }
 }
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 L141 : do if (!(_strncmp(i16, 282047, 12) | 0)) {
  switch (HEAP8[i16 + 12 >> 0] | 0) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   break;
  default:
   break L141;
  }
  HEAP32[i17 + 36 >> 2] = HEAP32[i9 + (i10 << 4) + 12 >> 2];
  i19 = 0;
  STACKTOP = i20;
  return i19 | 0;
 } while (0);
 L146 : do if (!(_strncmp(i16, 281954, 11) | 0)) {
  switch (HEAP8[i16 + 11 >> 0] | 0) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   break;
  default:
   break L146;
  }
  HEAP32[i17 + 40 >> 2] = HEAP32[i9 + (i10 << 4) + 12 >> 2];
  i19 = 0;
  STACKTOP = i20;
  return i19 | 0;
 } while (0);
 L151 : do if (!(_strncmp(i16, 281966, 12) | 0)) {
  switch (HEAP8[i16 + 12 >> 0] | 0) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   break;
  default:
   break L151;
  }
  HEAP32[i17 + 44 >> 2] = HEAP32[i9 + (i10 << 4) + 12 >> 2];
  i19 = 0;
  STACKTOP = i20;
  return i19 | 0;
 } while (0);
 if (_strncmp(i16, 350448, 7) | 0) {
  i19 = 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 switch (HEAP8[i16 + 7 >> 0] | 0) {
 case 9:
 case 13:
 case 10:
 case 0:
 case 32:
  break;
 default:
  {
   i19 = 0;
   STACKTOP = i20;
   return i19 | 0;
  }
 }
 i1 = HEAP32[i9 + (i10 << 4) + 12 >> 2] | 0;
 if (!i1) {
  HEAP32[i19 >> 2] = 3;
  i19 = 3;
  STACKTOP = i20;
  return i19 | 0;
 }
 switch (HEAP8[i1 >> 0] | 0) {
 case 80:
 case 112:
  {
   HEAP32[i17 + 28 >> 2] = 8;
   i19 = 0;
   STACKTOP = i20;
   return i19 | 0;
  }
 case 77:
 case 109:
  {
   HEAP32[i17 + 28 >> 2] = 16;
   i19 = 0;
   STACKTOP = i20;
   return i19 | 0;
  }
 case 67:
 case 99:
  {
   HEAP32[i17 + 28 >> 2] = 32;
   i19 = 0;
   STACKTOP = i20;
   return i19 | 0;
  }
 default:
  {
   i19 = 0;
   STACKTOP = i20;
   return i19 | 0;
  }
 }
 return 0;
}

function _FcTypecheckExpr(i18, i1, i2) {
 i18 = i18 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i19 + 96 | 0;
 i4 = i19 + 88 | 0;
 i13 = i19 + 80 | 0;
 i15 = i19 + 72 | 0;
 i17 = i19 + 64 | 0;
 i16 = i19 + 56 | 0;
 i12 = i19 + 48 | 0;
 i10 = i19 + 40 | 0;
 i9 = i19 + 32 | 0;
 i8 = i19 + 24 | 0;
 i14 = i19 + 16 | 0;
 i11 = i19 + 8 | 0;
 i7 = i19;
 if (!i1) {
  STACKTOP = i19;
  return;
 } else i6 = i2;
 L3 : while (1) {
  i3 = i1;
  L5 : while (1) {
   switch ((HEAP32[i3 >> 2] & 65535) << 16 >> 16) {
   case 1:
   case 0:
    {
     i1 = 4;
     break L3;
    }
   case 2:
    {
     i1 = 14;
     break L3;
    }
   case 3:
    {
     i1 = 23;
     break L3;
    }
   case 5:
    {
     i1 = 33;
     break L3;
    }
   case 6:
    {
     i1 = 43;
     break L3;
    }
   case 7:
    {
     i1 = 53;
     break L3;
    }
   case 4:
    {
     i1 = 62;
     break L3;
    }
   case 9:
    {
     i1 = 72;
     break L3;
    }
   case 10:
    {
     i1 = 98;
     break L3;
    }
   case 25:
   case 26:
   case 24:
   case 30:
   case 29:
   case 28:
   case 27:
   case 23:
   case 22:
    {
     i1 = 127;
     break L3;
    }
   case 37:
   case 38:
   case 39:
   case 40:
    {
     i1 = 149;
     break L5;
    }
   case 35:
    {
     i1 = 139;
     break L5;
    }
   case 19:
    {
     i1 = i3 + 8 | 0;
     _FcTypecheckExpr(i18, HEAP32[i1 >> 2] | 0, 4);
     i1 = i1 + 4 | 0;
     _FcTypecheckExpr(i18, HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0, i6);
     i1 = (HEAP32[i1 >> 2] | 0) + 8 | 0;
     break;
    }
   case 34:
   case 33:
   case 32:
   case 31:
   case 21:
   case 20:
   case 36:
    {
     i1 = i3 + 8 | 0;
     _FcTypecheckExpr(i18, HEAP32[i1 >> 2] | 0, i6);
     break;
    }
   default:
    {
     i1 = 160;
     break L3;
    }
   }
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i1) {
    i1 = 160;
    break L3;
   } else i3 = i1;
  }
  L11 : do if ((i1 | 0) == 139) {
   switch (((i6 | 0) == 1 ? 2 : i6) | 0) {
   case 4:
   case -1:
    {
     i2 = 4;
     break L11;
    }
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i1 = 354216;
     break;
    }
   case 3:
    {
     i1 = 354184;
     break;
    }
   case 9:
    {
     i1 = 354223;
     break;
    }
   case 5:
    {
     i1 = 354172;
     break;
    }
   case 6:
    {
     i1 = 355024;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 8:
    {
     i1 = 354156;
     break;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i4 >> 2] = 354179;
   HEAP32[i4 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i4);
   i2 = 4;
  } else if ((i1 | 0) == 149) if ((i6 + -1 | 0) >>> 0 < 2) i2 = 2; else {
   switch (i6 | 0) {
   case 9:
   case -1:
    {
     i2 = 2;
     break L11;
    }
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 8:
    {
     i1 = 354156;
     break;
    }
   case 3:
    {
     i1 = 354184;
     break;
    }
   case 4:
    {
     i1 = 354179;
     break;
    }
   case 5:
    {
     i1 = 354172;
     break;
    }
   case 6:
    {
     i1 = 355024;
     break;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i5 >> 2] = 354216;
   HEAP32[i5 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i5);
   i2 = 2;
  } while (0);
  i1 = HEAP32[i3 + 8 >> 2] | 0;
  if (!i1) {
   i1 = 160;
   break;
  } else i6 = i2;
 }
 switch (i1 | 0) {
 case 4:
  {
   if ((i6 + -1 | 0) >>> 0 < 2) {
    STACKTOP = i19;
    return;
   }
   switch (i6 | 0) {
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 8:
    {
     i1 = 354156;
     break;
    }
   case 3:
    {
     i1 = 354184;
     break;
    }
   case 4:
    {
     i1 = 354179;
     break;
    }
   case 5:
    {
     i1 = 354172;
     break;
    }
   case 6:
    {
     i1 = 355024;
     break;
    }
   case 9:
   case -1:
    {
     STACKTOP = i19;
     return;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i7 >> 2] = 354216;
   HEAP32[i7 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i7);
   STACKTOP = i19;
   return;
  }
 case 14:
  {
   switch (((i6 | 0) == 1 ? 2 : i6) | 0) {
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i1 = 354216;
     break;
    }
   case 9:
    {
     i1 = 354223;
     break;
    }
   case 4:
    {
     i1 = 354179;
     break;
    }
   case 5:
    {
     i1 = 354172;
     break;
    }
   case 6:
    {
     i1 = 355024;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 8:
   case -1:
   case 3:
    {
     STACKTOP = i19;
     return;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i11 >> 2] = 354184;
   HEAP32[i11 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i11);
   STACKTOP = i19;
   return;
  }
 case 23:
  {
   switch (((i6 | 0) == 1 ? 2 : i6) | 0) {
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i1 = 354216;
     break;
    }
   case 3:
    {
     i1 = 354184;
     break;
    }
   case 4:
    {
     i1 = 354179;
     break;
    }
   case 9:
    {
     i1 = 354223;
     break;
    }
   case 6:
    {
     i1 = 355024;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 8:
    {
     i1 = 354156;
     break;
    }
   case 5:
   case -1:
    {
     STACKTOP = i19;
     return;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i14 >> 2] = 354172;
   HEAP32[i14 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i14);
   STACKTOP = i19;
   return;
  }
 case 33:
  {
   switch (((i6 | 0) == 1 ? 2 : i6) | 0) {
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i1 = 354216;
     break;
    }
   case 3:
    {
     i1 = 354184;
     break;
    }
   case 9:
    {
     i1 = 354223;
     break;
    }
   case 5:
    {
     i1 = 354172;
     break;
    }
   case 6:
    {
     i1 = 355024;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 8:
    {
     i1 = 354156;
     break;
    }
   case 4:
   case -1:
    {
     STACKTOP = i19;
     return;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i8 >> 2] = 354179;
   HEAP32[i8 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i8);
   STACKTOP = i19;
   return;
  }
 case 43:
  {
   switch (((i6 | 0) == 1 ? 2 : i6) | 0) {
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i1 = 354216;
     break;
    }
   case 3:
    {
     i1 = 354184;
     break;
    }
   case 4:
    {
     i1 = 354179;
     break;
    }
   case 5:
    {
     i1 = 354172;
     break;
    }
   case 9:
    {
     i1 = 354223;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 8:
    {
     i1 = 354156;
     break;
    }
   case 6:
   case -1:
    {
     STACKTOP = i19;
     return;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i9 >> 2] = 355024;
   HEAP32[i9 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i9);
   STACKTOP = i19;
   return;
  }
 case 53:
  {
   switch (((i6 | 0) == 1 ? 2 : i6) | 0) {
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i1 = 354216;
     break;
    }
   case 9:
    {
     i1 = 354223;
     break;
    }
   case 4:
    {
     i1 = 354179;
     break;
    }
   case 5:
    {
     i1 = 354172;
     break;
    }
   case 6:
    {
     i1 = 355024;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 3:
   case -1:
   case 8:
    {
     STACKTOP = i19;
     return;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i10 >> 2] = 354156;
   HEAP32[i10 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i10);
   STACKTOP = i19;
   return;
  }
 case 62:
  {
   switch (((i6 | 0) == 1 ? 2 : i6) | 0) {
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i1 = 354216;
     break;
    }
   case 3:
    {
     i1 = 354184;
     break;
    }
   case 4:
    {
     i1 = 354179;
     break;
    }
   case 5:
    {
     i1 = 354172;
     break;
    }
   case 6:
    {
     i1 = 355024;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 8:
    {
     i1 = 354156;
     break;
    }
   case 9:
   case -1:
    {
     STACKTOP = i19;
     return;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i12 >> 2] = 354223;
   HEAP32[i12 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i12);
   STACKTOP = i19;
   return;
  }
 case 72:
  {
   i1 = _FcNameGetObjectType(_FcObjectName(HEAP32[i3 + 8 >> 2] | 0) | 0) | 0;
   if (!i1) {
    STACKTOP = i19;
    return;
   }
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   i1 = (i1 | 0) == 1 ? 2 : i1;
   i3 = (i6 | 0) == 1 ? 2 : i6;
   if ((i1 | 0) == (i3 | 0)) {
    STACKTOP = i19;
    return;
   }
   if ((i3 | 0) == 3 & (i1 | 0) == 8) {
    STACKTOP = i19;
    return;
   }
   if ((i3 | 0) == 8 & (i1 | 0) == 3) {
    STACKTOP = i19;
    return;
   }
   if ((i1 | 0) == -1 | ((i3 | 0) == -1 | (i3 | 0) == 9 & (i1 | 0) == 2)) {
    STACKTOP = i19;
    return;
   }
   switch (i1 | 0) {
   case 0:
    {
     i2 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i2 = 354216;
     break;
    }
   case 3:
    {
     i2 = 354184;
     break;
    }
   case 4:
    {
     i2 = 354179;
     break;
    }
   case 5:
    {
     i2 = 354172;
     break;
    }
   case 6:
    {
     i2 = 355024;
     break;
    }
   case 7:
    {
     i2 = 354164;
     break;
    }
   case 8:
    {
     i2 = 354156;
     break;
    }
   case 9:
    {
     i2 = 354223;
     break;
    }
   default:
    i2 = 354148;
   }
   switch (i3 | 0) {
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i1 = 354216;
     break;
    }
   case 3:
    {
     i1 = 354184;
     break;
    }
   case 4:
    {
     i1 = 354179;
     break;
    }
   case 5:
    {
     i1 = 354172;
     break;
    }
   case 6:
    {
     i1 = 355024;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 8:
    {
     i1 = 354156;
     break;
    }
   case 9:
    {
     i1 = 354223;
     break;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i16 >> 2] = i2;
   HEAP32[i16 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i16);
   STACKTOP = i19;
   return;
  }
 case 98:
  {
   i1 = i3 + 8 | 0;
   i2 = _FcNameGetConstant(HEAP32[i1 >> 2] | 0) | 0;
   if (!i2) {
    HEAP32[i15 >> 2] = HEAP32[i1 >> 2];
    _FcConfigMessage(i18, 1, 354229, i15);
    STACKTOP = i19;
    return;
   }
   i1 = _FcNameGetObjectType(HEAP32[i2 + 4 >> 2] | 0) | 0;
   if (!i1) {
    STACKTOP = i19;
    return;
   }
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   i1 = (i1 | 0) == 1 ? 2 : i1;
   i3 = (i6 | 0) == 1 ? 2 : i6;
   if ((i1 | 0) == (i3 | 0)) {
    STACKTOP = i19;
    return;
   }
   if ((i3 | 0) == 3 & (i1 | 0) == 8) {
    STACKTOP = i19;
    return;
   }
   if ((i3 | 0) == 8 & (i1 | 0) == 3) {
    STACKTOP = i19;
    return;
   }
   if ((i1 | 0) == -1 | ((i3 | 0) == -1 | (i3 | 0) == 9 & (i1 | 0) == 2)) {
    STACKTOP = i19;
    return;
   }
   switch (i1 | 0) {
   case 0:
    {
     i2 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i2 = 354216;
     break;
    }
   case 3:
    {
     i2 = 354184;
     break;
    }
   case 4:
    {
     i2 = 354179;
     break;
    }
   case 5:
    {
     i2 = 354172;
     break;
    }
   case 6:
    {
     i2 = 355024;
     break;
    }
   case 7:
    {
     i2 = 354164;
     break;
    }
   case 8:
    {
     i2 = 354156;
     break;
    }
   case 9:
    {
     i2 = 354223;
     break;
    }
   default:
    i2 = 354148;
   }
   switch (i3 | 0) {
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i1 = 354216;
     break;
    }
   case 3:
    {
     i1 = 354184;
     break;
    }
   case 4:
    {
     i1 = 354179;
     break;
    }
   case 5:
    {
     i1 = 354172;
     break;
    }
   case 6:
    {
     i1 = 355024;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 8:
    {
     i1 = 354156;
     break;
    }
   case 9:
    {
     i1 = 354223;
     break;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i17 >> 2] = i2;
   HEAP32[i17 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i17);
   STACKTOP = i19;
   return;
  }
 case 127:
  {
   switch (((i6 | 0) == 1 ? 2 : i6) | 0) {
   case 0:
    {
     i1 = 354191;
     break;
    }
   case 2:
   case 1:
    {
     i1 = 354216;
     break;
    }
   case 3:
    {
     i1 = 354184;
     break;
    }
   case 9:
    {
     i1 = 354223;
     break;
    }
   case 5:
    {
     i1 = 354172;
     break;
    }
   case 6:
    {
     i1 = 355024;
     break;
    }
   case 7:
    {
     i1 = 354164;
     break;
    }
   case 8:
    {
     i1 = 354156;
     break;
    }
   case 4:
   case -1:
    {
     STACKTOP = i19;
     return;
    }
   default:
    i1 = 354148;
   }
   HEAP32[i13 >> 2] = 354179;
   HEAP32[i13 + 4 >> 2] = i1;
   _FcConfigMessage(i18, 1, 354196, i13);
   STACKTOP = i19;
   return;
  }
 case 160:
  {
   STACKTOP = i19;
   return;
  }
 }
}

function _FT_Open_Face(i16, i17, i18, i35) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i35 = i35 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i36 = 0, i37 = 0, i38 = 0;
 i38 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i15 = i38 + 4 | 0;
 i34 = i38;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i34 >> 2] = 0;
 i33 = (i35 | 0) == 0;
 i19 = (i18 | 0) > -1;
 if (!((i17 | 0) != 0 & (i19 & i33 ^ 1))) {
  i37 = 6;
  STACKTOP = i38;
  return i37 | 0;
 }
 if (!(HEAP32[i17 >> 2] & 2)) i27 = 0; else i27 = (HEAP32[i17 + 16 >> 2] | 0) != 0;
 i13 = i27 & 1;
 HEAP32[i15 >> 2] = 0;
 L7 : do if (!i16) {
  i28 = 0;
  i29 = 0;
  i5 = 33;
  i36 = 102;
 } else {
  i7 = HEAP32[i16 >> 2] | 0;
  i8 = FUNCTION_TABLE_iii[HEAP32[i7 + 4 >> 2] & 255](i7, 40) | 0;
  if (!i8) {
   i28 = 0;
   i29 = 0;
   i5 = 64;
   i36 = 102;
  } else {
   i9 = i8;
   i10 = i9 + 40 | 0;
   do {
    HEAP8[i9 >> 0] = 0;
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) < (i10 | 0));
   HEAP32[i8 + 28 >> 2] = i7;
   i6 = HEAP32[i17 >> 2] | 0;
   do if (!(i6 & 1)) {
    if (!(i6 & 4)) if (!(i6 & 2)) i1 = 6; else {
     i6 = i17 + 16 | 0;
     if (!(HEAP32[i6 >> 2] | 0)) i1 = 6; else {
      FUNCTION_TABLE_vii[HEAP32[i7 + 8 >> 2] & 63](i7, i8);
      i3 = HEAP32[i6 >> 2] | 0;
      i4 = i3;
      i36 = 14;
      break;
     }
    } else {
     i10 = i17 + 12 | 0;
     i6 = _FT_Stream_Open(i8, HEAP32[i10 >> 2] | 0) | 0;
     HEAP32[i8 + 16 >> 2] = HEAP32[i10 >> 2];
     if (!i6) {
      i4 = i8;
      i3 = i8;
      i36 = 14;
      break;
     } else i1 = i6;
    }
    FUNCTION_TABLE_vii[HEAP32[i7 + 8 >> 2] & 63](i7, i8);
    HEAP32[i15 >> 2] = 0;
    i12 = 0;
    i11 = 0;
   } else {
    i4 = HEAP32[i17 + 8 >> 2] | 0;
    HEAP32[i8 >> 2] = HEAP32[i17 + 4 >> 2];
    HEAP32[i8 + 4 >> 2] = i4;
    HEAP32[i8 + 8 >> 2] = 0;
    HEAP32[i8 + 32 >> 2] = 0;
    HEAP32[i8 + 20 >> 2] = 0;
    HEAP32[i8 + 24 >> 2] = 0;
    i4 = i8;
    i3 = i8;
    i36 = 14;
   } while (0);
   L19 : do if ((i36 | 0) == 14) {
    HEAP32[i4 + 28 >> 2] = i7;
    HEAP32[i15 >> 2] = i4;
    i12 = HEAP32[i16 >> 2] | 0;
    i1 = HEAP32[i17 >> 2] | 0;
    do if (!(i1 & 8)) i36 = 26; else {
     i6 = HEAP32[i17 + 20 >> 2] | 0;
     if (!i6) i36 = 26; else {
      if (!(HEAP32[HEAP32[i6 >> 2] >> 2] & 1)) i5 = 32; else {
       if (!(i1 & 16)) {
        i1 = 0;
        i3 = 0;
       } else {
        i1 = HEAP32[i17 + 28 >> 2] | 0;
        i3 = HEAP32[i17 + 24 >> 2] | 0;
       }
       i1 = _open_face(i6, i15, i13, i18, i3, i1, i34) | 0;
       if (!i1) {
        i14 = i6;
        break;
       }
       i3 = HEAP32[i15 >> 2] | 0;
       i5 = i1;
       i4 = i3;
      }
      if (!i4) {
       i28 = i12;
       i29 = i6;
       i36 = 102;
       break L7;
      }
      i1 = HEAP32[i4 + 28 >> 2] | 0;
      i2 = HEAP32[i4 + 24 >> 2] | 0;
      if (i2 | 0) FUNCTION_TABLE_vi[i2 & 127](i4);
      if (i27) {
       i28 = i12;
       i29 = i6;
       i36 = 102;
       break L7;
      }
      FUNCTION_TABLE_vii[HEAP32[i1 + 8 >> 2] & 63](i1, i3);
      i28 = i12;
      i29 = i6;
      i36 = 102;
      break L7;
     }
    } while (0);
    L36 : do if ((i36 | 0) == 26) {
     i14 = HEAP32[i16 + 16 >> 2] | 0;
     i8 = i16 + 20 + (i14 << 2) | 0;
     if ((i14 | 0) <= 0) {
      i11 = 0;
      i1 = 11;
      break L19;
     }
     i9 = i17 + 24 | 0;
     i10 = i17 + 28 | 0;
     i3 = 0;
     i7 = i16 + 20 | 0;
     i1 = 11;
     while (1) {
      i6 = HEAP32[i7 >> 2] | 0;
      if (HEAP32[HEAP32[i6 >> 2] >> 2] & 1) {
       if (!(HEAP32[i17 >> 2] & 16)) {
        i1 = 0;
        i3 = 0;
       } else {
        i1 = HEAP32[i10 >> 2] | 0;
        i3 = HEAP32[i9 >> 2] | 0;
       }
       i1 = _open_face(i6, i15, i13, i18, i3, i1, i34) | 0;
       if (!i1) {
        i14 = i6;
        break L36;
       }
       if ((i1 & 255 | 0) == 142 & (_strcmp(HEAP32[(HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + 8 >> 2] | 0, 280791) | 0) == 0) {
        i4 = HEAP32[i15 >> 2] | 0;
        i3 = HEAP32[i4 + 20 >> 2] | 0;
        if (i3 | 0) if (FUNCTION_TABLE_iiiii[i3 & 127](i4, 0, 0, 0) | 0) {
         i11 = i6;
         break L19;
        }
        HEAP32[i4 + 8 >> 2] = 0;
        i1 = _open_face_PS_from_sfnt_stream(i16, i4, i18, i35) | 0;
        if (!i1) break;
       }
       if ((i1 & 255 | 0) == 2) i3 = i6; else {
        i11 = i6;
        break L19;
       }
      }
      i7 = i7 + 4 | 0;
      if (i7 >>> 0 >= i8 >>> 0) {
       i11 = i3;
       break L19;
      }
     }
     i1 = HEAP32[i4 + 28 >> 2] | 0;
     i2 = HEAP32[i4 + 24 >> 2] | 0;
     if (i2 | 0) FUNCTION_TABLE_vi[i2 & 127](i4);
     if (i27) {
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     }
     FUNCTION_TABLE_vii[HEAP32[i1 + 8 >> 2] & 63](i1, i4);
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    } while (0);
    i8 = FUNCTION_TABLE_iii[HEAP32[i12 + 4 >> 2] & 255](i12, 12) | 0;
    L63 : do if (!i8) {
     i21 = 0;
     i2 = 64;
     i20 = HEAP32[i34 >> 2] | 0;
     i36 = 103;
    } else {
     i13 = HEAP32[i34 >> 2] | 0;
     HEAP32[i8 + 8 >> 2] = i13;
     i11 = i13 + 96 | 0;
     i25 = HEAP32[i11 >> 2] | 0;
     i27 = i25 + 20 | 0;
     i24 = HEAP32[i27 >> 2] | 0;
     HEAP32[i8 + 4 >> 2] = 0;
     HEAP32[i8 >> 2] = i24;
     HEAP32[(i24 | 0 ? i24 + 4 | 0 : i25 + 16 | 0) >> 2] = i8;
     HEAP32[i27 >> 2] = i8;
     L66 : do if (i19) {
      i1 = _FT_New_GlyphSlot(i13, 0) | 0;
      if (i1 | 0) {
       i21 = i8;
       i2 = i1;
       i20 = i13;
       i36 = 103;
       break L63;
      }
      if (!i13) {
       i26 = i8;
       i30 = 35;
       i31 = 0;
       i32 = 0;
       break L63;
      }
      i1 = HEAP32[i11 >> 2] | 0;
      if (!i1) {
       i21 = i8;
       i2 = 34;
       i20 = i13;
       i36 = 103;
       break L63;
      }
      i6 = HEAP32[i1 + 12 >> 2] | 0;
      i7 = HEAP32[i13 + 100 >> 2] | 0;
      i2 = HEAP32[i6 + 40 >> 2] | 0;
      if ((i2 | 0) > 0) {
       i1 = i7 + 4 | 0;
       i3 = FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 255](i7, i2) | 0;
       if (!i3) {
        i21 = i8;
        i2 = 64;
        i20 = i13;
        i36 = 103;
        break L63;
       }
       _memset(i3 | 0, 0, i2 | 0) | 0;
      } else {
       if (i2 | 0) {
        i21 = i8;
        i2 = 6;
        i20 = i13;
        i36 = 103;
        break L63;
       }
       i3 = 0;
       i1 = i7 + 4 | 0;
      }
      i4 = FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 255](i7, 12) | 0;
      L77 : do if (!i4) {
       if (!i3) {
        i21 = i8;
        i2 = 64;
        i20 = i13;
        i36 = 103;
        break L63;
       }
       i2 = 64;
       i1 = i7 + 8 | 0;
      } else {
       i9 = i4;
       i10 = i9 + 12 | 0;
       do {
        HEAP8[i9 >> 0] = 0;
        i9 = i9 + 1 | 0;
       } while ((i9 | 0) < (i10 | 0));
       HEAP32[i3 >> 2] = i13;
       HEAP32[i3 + 40 >> 2] = 0;
       i1 = HEAP32[i6 + 56 >> 2] | 0;
       do if (i1 | 0) {
        i2 = FUNCTION_TABLE_ii[i1 & 63](i3) | 0;
        if (!i2) break;
        i1 = i7 + 8 | 0;
        FUNCTION_TABLE_vii[HEAP32[i1 >> 2] & 63](i7, i4);
        break L77;
       } while (0);
       HEAP32[i4 + 8 >> 2] = i3;
       i34 = i13 + 112 | 0;
       i32 = HEAP32[i34 >> 2] | 0;
       HEAP32[i4 + 4 >> 2] = 0;
       HEAP32[i4 >> 2] = i32;
       HEAP32[(i32 | 0 ? i32 + 4 | 0 : i13 + 108 | 0) >> 2] = i4;
       HEAP32[i34 >> 2] = i4;
       HEAP32[i13 + 88 >> 2] = i3;
       break L66;
      } while (0);
      FUNCTION_TABLE_vii[HEAP32[i1 >> 2] & 63](i7, i3);
      i21 = i8;
      i20 = i13;
      i36 = 103;
      break L63;
     } while (0);
     i3 = HEAP32[i13 + 8 >> 2] | 0;
     if (i3 & 1 | 0) {
      i2 = i13 + 74 | 0;
      i1 = HEAP16[i2 >> 1] | 0;
      if (i1 << 16 >> 16 < 0) {
       i1 = 0 - (i1 & 65535) & 65535;
       HEAP16[i2 >> 1] = i1;
      }
      if (!(i3 & 32)) HEAP16[i13 + 78 >> 1] = i1;
     }
     if (i3 & 2 | 0) {
      i5 = HEAP32[i13 + 28 >> 2] | 0;
      if ((i5 | 0) > 0) {
       i4 = HEAP32[i13 + 32 >> 2] | 0;
       i3 = 0;
       do {
        i1 = i4 + (i3 << 4) | 0;
        i2 = HEAP16[i1 >> 1] | 0;
        if (i2 << 16 >> 16 < 0) HEAP16[i1 >> 1] = 0 - (i2 & 65535);
        i1 = i4 + (i3 << 4) + 8 | 0;
        i2 = HEAP32[i1 >> 2] | 0;
        if ((i2 | 0) < 0) HEAP32[i1 >> 2] = 0 - i2 << 16 >> 16;
        i1 = i4 + (i3 << 4) + 12 | 0;
        i2 = HEAP32[i1 >> 2] | 0;
        if ((i2 | 0) < 0) HEAP32[i1 >> 2] = 0 - i2;
        i3 = i3 + 1 | 0;
       } while ((i3 | 0) < (i5 | 0));
      }
     }
     i1 = HEAP32[i13 + 128 >> 2] | 0;
     HEAP32[i1 >> 2] = 65536;
     HEAP32[i1 + 4 >> 2] = 0;
     HEAP32[i1 + 8 >> 2] = 0;
     HEAP32[i1 + 12 >> 2] = 65536;
     HEAP32[i1 + 16 >> 2] = 0;
     HEAP32[i1 + 20 >> 2] = 0;
     i1 = i1 + 56 | 0;
     HEAP32[i1 >> 2] = 1;
     if (!i33) {
      HEAP32[i35 >> 2] = i13;
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     }
     i5 = HEAP32[i11 >> 2] | 0;
     if (!i5) {
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     }
     HEAP32[i1 >> 2] = 0;
     i3 = HEAP32[i5 + 8 >> 2] | 0;
     i4 = i5 + 16 | 0;
     i1 = HEAP32[i4 >> 2] | 0;
     if (!i1) {
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     }
     while (1) {
      if ((HEAP32[i1 + 8 >> 2] | 0) == (i13 | 0)) break;
      i2 = HEAP32[i1 + 4 >> 2] | 0;
      if (!i2) {
       i37 = 0;
       i36 = 114;
       break;
      } else i1 = i2;
     }
     if ((i36 | 0) == 114) {
      STACKTOP = i38;
      return i37 | 0;
     }
     i36 = HEAP32[i1 >> 2] | 0;
     i37 = HEAP32[i1 + 4 >> 2] | 0;
     HEAP32[(i36 | 0 ? i36 + 4 | 0 : i4) >> 2] = i37;
     HEAP32[(i37 | 0 ? i37 : i5 + 20 | 0) >> 2] = i36;
     FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i1);
     _destroy_face(i3, i13, i5);
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    } while (0);
    if ((i36 | 0) == 103) {
     i26 = i21;
     i30 = i2;
     i31 = i20;
     i32 = i20;
    }
    if (!i26) {
     i22 = i12;
     i23 = i14;
     i24 = i30;
     i25 = i31;
     break L7;
    }
    if (!i31) {
     i37 = i30;
     STACKTOP = i38;
     return i37 | 0;
    }
    i3 = HEAP32[i31 + 96 >> 2] | 0;
    if (!i3) {
     i37 = i30;
     STACKTOP = i38;
     return i37 | 0;
    }
    i34 = (HEAP32[i31 + 128 >> 2] | 0) + 56 | 0;
    i35 = HEAP32[i34 >> 2] | 0;
    HEAP32[i34 >> 2] = i35 + -1;
    if ((i35 | 0) > 1) {
     i37 = i30;
     STACKTOP = i38;
     return i37 | 0;
    }
    i4 = HEAP32[i3 + 8 >> 2] | 0;
    i5 = i3 + 16 | 0;
    i1 = HEAP32[i5 >> 2] | 0;
    if (!i1) {
     i37 = i30;
     STACKTOP = i38;
     return i37 | 0;
    }
    while (1) {
     if ((HEAP32[i1 + 8 >> 2] | 0) == (i32 | 0)) break;
     i2 = HEAP32[i1 + 4 >> 2] | 0;
     if (!i2) {
      i37 = i30;
      i36 = 114;
      break;
     } else i1 = i2;
    }
    if ((i36 | 0) == 114) {
     STACKTOP = i38;
     return i37 | 0;
    }
    i36 = HEAP32[i1 >> 2] | 0;
    i37 = HEAP32[i1 + 4 >> 2] | 0;
    HEAP32[(i36 | 0 ? i36 + 4 | 0 : i5) >> 2] = i37;
    HEAP32[(i37 | 0 ? i37 : i3 + 20 | 0) >> 2] = i36;
    FUNCTION_TABLE_vii[HEAP32[i4 + 8 >> 2] & 63](i4, i1);
    _destroy_face(i4, i31, i3);
    i37 = i30;
    STACKTOP = i38;
    return i37 | 0;
   } while (0);
   L148 : do switch ((i1 & 255) << 24 >> 24) {
   case 85:
   case 2:
   case 81:
    {
     i3 = HEAP32[i15 >> 2] | 0;
     i1 = _IsMacBinary(i16, i3, i18, i35) | 0;
     if ((i1 & 255 | 0) == 2) i1 = _IsMacResource(i16, i3, 0, i18, i35) | 0;
     switch ((i1 & 255) << 24 >> 24) {
     case 85:
     case 2:
      {
       if (HEAP32[i17 >> 2] & 4) i1 = _load_face_in_embedded_rfork(i16, i3, i18, i35, i17) | 0;
       break;
      }
     default:
      {}
     }
     if (i1 | 0) {
      i4 = (i1 & 255 | 0) == 2 ? 2 : i1;
      i1 = i3;
      break L148;
     }
     if (!i3) {
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     }
     i1 = HEAP32[i3 + 28 >> 2] | 0;
     i2 = HEAP32[i3 + 24 >> 2] | 0;
     if (i2 | 0) FUNCTION_TABLE_vi[i2 & 127](i3);
     if (i27) {
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     }
     FUNCTION_TABLE_vii[HEAP32[i1 + 8 >> 2] & 63](i1, i3);
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
   default:
    {
     i4 = i1;
     i1 = HEAP32[i15 >> 2] | 0;
    }
   } while (0);
   if (!i1) {
    i28 = i12;
    i29 = i11;
    i5 = i4;
    i36 = 102;
   } else {
    i2 = HEAP32[i1 + 28 >> 2] | 0;
    i3 = HEAP32[i1 + 24 >> 2] | 0;
    if (i3 | 0) FUNCTION_TABLE_vi[i3 & 127](i1);
    if (i27) {
     i28 = i12;
     i29 = i11;
     i5 = i4;
     i36 = 102;
    } else {
     FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i1);
     i28 = i12;
     i29 = i11;
     i5 = i4;
     i36 = 102;
    }
   }
  }
 } while (0);
 if ((i36 | 0) == 102) {
  i22 = i28;
  i23 = i29;
  i24 = i5;
  i25 = HEAP32[i34 >> 2] | 0;
 }
 if (!i25) {
  i37 = i24;
  STACKTOP = i38;
  return i37 | 0;
 }
 _destroy_face(i22, i25, i23);
 i37 = i24;
 STACKTOP = i38;
 return i37 | 0;
}

function _outline_stroke(i1, i2, i65, i3, i4, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i65 = i65 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i5 = 0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i66 = 0, i67 = 0, d68 = 0.0, d69 = 0.0, d70 = 0.0, d71 = 0.0, d72 = 0.0, d73 = 0.0;
 i67 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 i61 = i67 + 232 | 0;
 i62 = i67 + 184 | 0;
 i63 = i67 + 32 | 0;
 i64 = i67;
 i5 = (i3 | 0) > (i4 | 0) ? i3 : i4;
 if ((i5 | 0) < (i6 | 0)) ___assert_fail(359943, 359954, 1306, 359968);
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i63 >> 2] = i1;
 i60 = i63 + 4 | 0;
 HEAP32[i60 >> 2] = i2;
 i55 = i63 + 8 | 0;
 HEAP32[i55 >> 2] = 0;
 i56 = i63 + 12 | 0;
 HEAP32[i56 >> 2] = 0;
 i57 = i63 + 16 | 0;
 HEAPF64[i57 >> 3] = +(i3 | 0);
 i58 = i63 + 24 | 0;
 HEAPF64[i58 >> 3] = +(i4 | 0);
 i59 = i63 + 32 | 0;
 HEAPF64[i59 >> 3] = 1.0 / +(((i6 | 0) > (i3 | 0) ? i6 : i3) | 0);
 i54 = i63 + 40 | 0;
 HEAPF64[i54 >> 3] = 1.0 / +(((i6 | 0) > (i4 | 0) ? i6 : i4) | 0);
 i52 = i63 + 48 | 0;
 HEAP32[i52 >> 2] = i6;
 i53 = i63 + 52 | 0;
 HEAP8[i53 >> 0] = 1;
 d7 = +(i6 | 0) / +(i5 | 0);
 HEAPF64[i63 + 104 >> 3] = 1.0 - d7;
 d8 = +Math_sqrt(+(d7 * 2.0));
 d68 = d7 + 1.0;
 i50 = i63 + 112 | 0;
 HEAPF64[i50 >> 3] = d7 * 8.0 + 1.0 - d68 * 4.0 * d8;
 HEAPF64[i63 + 120 >> 3] = d7 * .25;
 HEAPF64[i63 + 128 >> 3] = d68 * (d68 * 8.0);
 HEAPF64[i63 + 136 >> 3] = d7 * (d7 * 390.0);
 HEAPF64[i63 + 144 >> 3] = d8;
 i3 = HEAP32[i65 >> 2] | 0;
 i51 = i65 + 16 | 0;
 i1 = HEAP32[i51 >> 2] | 0;
 L4 : do if (i3 | 0) {
  i2 = 0;
  while (1) {
   if (((HEAP32[i1 + (i2 << 3) >> 2] | 0) + 268435456 | 0) >>> 0 > 536870911) {
    i1 = 0;
    i66 = 66;
    break;
   }
   if (((HEAP32[i1 + (i2 << 3) + 4 >> 2] | 0) + 268435456 | 0) >>> 0 > 536870911) {
    i1 = 0;
    i66 = 66;
    break;
   }
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i3 >>> 0) break L4;
  }
  if ((i66 | 0) == 66) {
   STACKTOP = i67;
   return i1 | 0;
  }
 } while (0);
 i27 = i65 + 8 | 0;
 do if (HEAP32[i27 >> 2] | 0) {
  i28 = i65 + 20 | 0;
  i20 = i63 + 96 | 0;
  i24 = i63 + 100 | 0;
  i23 = i63 + 64 | 0;
  i26 = i63 + 72 | 0;
  i29 = i63 + 60 | 0;
  i30 = i63 + 56 | 0;
  i31 = i63 + 80 | 0;
  i25 = i63 + 88 | 0;
  i32 = i62 + 4 | 0;
  i33 = i62 + 4 | 0;
  i34 = i64 + 8 | 0;
  i35 = i64 + 16 | 0;
  i36 = i61 + 8 | 0;
  i37 = i61 + 16 | 0;
  i38 = i61 + 24 | 0;
  i39 = i62 + 8 | 0;
  i40 = i62 + 16 | 0;
  i41 = i62 + 24 | 0;
  i42 = i62 + 32 | 0;
  i43 = i62 + 40 | 0;
  i44 = i64 + 24 | 0;
  i45 = i61 + 8 | 0;
  i46 = i61 + 16 | 0;
  i47 = i61 + 24 | 0;
  i48 = i61 + 32 | 0;
  i49 = i61 + 40 | 0;
  i21 = 0;
  i22 = i1;
  L15 : while (1) {
   i18 = HEAP8[(HEAP32[i28 >> 2] | 0) + i21 >> 0] | 0;
   i22 = i22 + ((i18 & 3) << 3) | 0;
   i17 = (i18 & 4) == 0;
   i19 = i1;
   i1 = i17 ? i1 : i22;
   i19 = i17 ? i22 : i19;
   L17 : do switch (i18 & 3) {
   case 1:
    {
     i18 = i22 + -8 | 0;
     if (!(_add_line_294(i63, HEAP32[i18 >> 2] | 0, HEAP32[i18 + 4 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i19 + 4 >> 2] | 0) | 0)) break L15;
     break;
    }
   case 2:
    {
     i14 = i22 + -16 | 0;
     i13 = HEAP32[i14 >> 2] | 0;
     i14 = HEAP32[i14 + 4 >> 2] | 0;
     i3 = i64;
     HEAP32[i3 >> 2] = i13;
     HEAP32[i3 + 4 >> 2] = i14;
     i3 = i22 + -8 | 0;
     i2 = HEAP32[i3 >> 2] | 0;
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     i6 = i34;
     HEAP32[i6 >> 2] = i2;
     HEAP32[i6 + 4 >> 2] = i3;
     i6 = i19;
     i5 = HEAP32[i6 >> 2] | 0;
     i6 = HEAP32[i6 + 4 >> 2] | 0;
     i9 = i35;
     HEAP32[i9 >> 2] = i5;
     HEAP32[i9 + 4 >> 2] = i6;
     i9 = i2 - i13 | 0;
     i10 = i3 - i14 | 0;
     i11 = HEAP32[i52 >> 2] | 0;
     i12 = 0 - i11 | 0;
     if ((i10 | 0) < (i11 | 0) & ((i10 | 0) > (i12 | 0) & ((i9 | 0) > (i12 | 0) & (i9 | 0) < (i11 | 0)))) if (_add_line_294(i63, i13, i14, i5, i6) | 0) break L17; else break L15;
     i4 = i5 - i2 | 0;
     i2 = i6 - i3 | 0;
     if ((i2 | 0) < (i11 | 0) & ((i4 | 0) > (i12 | 0) & (i4 | 0) < (i11 | 0) & (i2 | 0) > (i12 | 0))) if (_add_line_294(i63, i13, i14, i5, i6) | 0) break L17; else break L15;
     d71 = +HEAPF64[i54 >> 3];
     d8 = +(i10 | 0) * d71;
     HEAPF64[i61 >> 3] = d8;
     d70 = +HEAPF64[i59 >> 3];
     d73 = +(0 - i9 | 0) * d70;
     HEAPF64[i36 >> 3] = d73;
     d71 = +(i2 | 0) * d71;
     HEAPF64[i37 >> 3] = d71;
     d70 = +(0 - i4 | 0) * d70;
     HEAPF64[i38 >> 3] = d70;
     d72 = +Math_sqrt(+(d8 * d8 + d73 * d73));
     d68 = 1.0 / d72;
     d7 = +Math_sqrt(+(d71 * d71 + d70 * d70));
     d69 = 1.0 / d7;
     d8 = d8 * d68;
     HEAPF64[i62 >> 3] = d8;
     d68 = d73 * d68;
     HEAPF64[i39 >> 3] = d68;
     HEAPF64[i40 >> 3] = d72;
     HEAPF64[i41 >> 3] = d71 * d69;
     HEAPF64[i42 >> 3] = d70 * d69;
     HEAPF64[i43 >> 3] = d7;
     i2 = HEAP8[i53 >> 0] | 0;
     if (!(_start_segment(i63, i13, i14, d8, d68, 3) | 0)) {
      i66 = 16;
      break L15;
     }
     if (!(_process_quadratic(i63, i64, i61, i62, 3, i2 << 24 >> 24 != 0) | 0)) break L15;
     break;
    }
   case 3:
    {
     i18 = i22 + -24 | 0;
     i17 = HEAP32[i18 >> 2] | 0;
     i18 = HEAP32[i18 + 4 >> 2] | 0;
     i10 = i64;
     HEAP32[i10 >> 2] = i17;
     HEAP32[i10 + 4 >> 2] = i18;
     i10 = i22 + -16 | 0;
     i9 = HEAP32[i10 >> 2] | 0;
     i10 = HEAP32[i10 + 4 >> 2] | 0;
     i6 = i34;
     HEAP32[i6 >> 2] = i9;
     HEAP32[i6 + 4 >> 2] = i10;
     i6 = i22 + -8 | 0;
     i5 = HEAP32[i6 >> 2] | 0;
     i6 = HEAP32[i6 + 4 >> 2] | 0;
     i15 = i35;
     HEAP32[i15 >> 2] = i5;
     HEAP32[i15 + 4 >> 2] = i6;
     i15 = i19;
     i14 = HEAP32[i15 >> 2] | 0;
     i15 = HEAP32[i15 + 4 >> 2] | 0;
     i3 = i44;
     HEAP32[i3 >> 2] = i14;
     HEAP32[i3 + 4 >> 2] = i15;
     i3 = i9 - i17 | 0;
     i4 = i10 - i18 | 0;
     i12 = HEAP32[i52 >> 2] | 0;
     i13 = 0 - i12 | 0;
     if ((i4 | 0) < (i12 | 0) & ((i4 | 0) > (i13 | 0) & ((i3 | 0) > (i13 | 0) & (i3 | 0) < (i12 | 0)))) {
      i3 = i5 - i17 | 0;
      i4 = i6 - i18 | 0;
      if ((i4 | 0) < (i12 | 0) & ((i3 | 0) > (i13 | 0) & (i3 | 0) < (i12 | 0) & (i4 | 0) > (i13 | 0))) if (_add_line_294(i63, i17, i18, i14, i15) | 0) break L17; else break L15; else {
       i2 = 8;
       i16 = i3;
       i11 = i4;
      }
     } else {
      i2 = 9;
      i16 = i3;
      i11 = i4;
     }
     i4 = i14 - i5 | 0;
     i3 = i15 - i6 | 0;
     if ((i3 | 0) < (i12 | 0) & ((i3 | 0) > (i13 | 0) & ((i4 | 0) > (i13 | 0) & (i4 | 0) < (i12 | 0)))) {
      i4 = i14 - i9 | 0;
      i3 = i15 - i10 | 0;
      if ((i3 | 0) < (i12 | 0) & ((i4 | 0) > (i13 | 0) & (i4 | 0) < (i12 | 0) & (i3 | 0) > (i13 | 0))) if (_add_line_294(i63, i17, i18, i14, i15) | 0) break L17; else break L15;
      i2 = i2 | 4;
      if ((i2 | 0) == 12) if (_add_line_294(i63, i17, i18, i14, i15) | 0) break L17; else break L15;
     }
     i13 = i2 >> 2;
     i15 = HEAP32[i64 + (i13 << 3) >> 2] | 0;
     i14 = i2 & 3;
     i2 = HEAP32[i64 + (i14 << 3) >> 2] | 0;
     i14 = (HEAP32[i64 + (i13 << 3) + 4 >> 2] | 0) - (HEAP32[i64 + (i14 << 3) + 4 >> 2] | 0) | 0;
     d68 = +HEAPF64[i54 >> 3];
     d72 = +(i11 | 0) * d68;
     HEAPF64[i61 >> 3] = d72;
     d69 = +HEAPF64[i59 >> 3];
     d7 = +(0 - i16 | 0) * d69;
     HEAPF64[i45 >> 3] = d7;
     HEAPF64[i46 >> 3] = +(i14 | 0) * d68;
     HEAPF64[i47 >> 3] = +(i2 - i15 | 0) * d69;
     d68 = +(i3 | 0) * d68;
     HEAPF64[i48 >> 3] = d68;
     d69 = +(0 - i4 | 0) * d69;
     HEAPF64[i49 >> 3] = d69;
     d8 = +Math_sqrt(+(d72 * d72 + d7 * d7));
     d73 = 1.0 / d8;
     d71 = +Math_sqrt(+(d68 * d68 + d69 * d69));
     d70 = 1.0 / d71;
     d72 = d72 * d73;
     HEAPF64[i62 >> 3] = d72;
     d73 = d7 * d73;
     HEAPF64[i39 >> 3] = d73;
     HEAPF64[i40 >> 3] = d8;
     HEAPF64[i41 >> 3] = d68 * d70;
     HEAPF64[i42 >> 3] = d69 * d70;
     HEAPF64[i43 >> 3] = d71;
     i2 = HEAP8[i53 >> 0] | 0;
     if (!(_start_segment(i63, i17, i18, d72, d73, 3) | 0)) {
      i66 = 27;
      break L15;
     }
     if (!(_process_cubic(i63, i64, i61, i62, 3, i2 << 24 >> 24 != 0) | 0)) break L15;
     break;
    }
   default:
    break L15;
   } while (0);
   if ((i1 | 0) == (i22 | 0)) {
    i5 = HEAP32[i19 >> 2] | 0;
    i4 = HEAP32[i19 + 4 >> 2] | 0;
    if (!(HEAP8[i53 >> 0] | 0)) {
     if (!(_add_line_294(i63, i5, i4, HEAP32[i20 >> 2] | 0, HEAP32[i24 >> 2] | 0) | 0)) break;
     if (!(_start_segment(i63, HEAP32[i20 >> 2] | 0, HEAP32[i24 >> 2] | 0, +HEAPF64[i23 >> 3], +HEAPF64[i26 >> 3], 3) | 0)) break;
     i4 = (HEAP32[i29 >> 2] & 3 ^ 3) & HEAP32[i30 >> 2];
     i2 = HEAP32[i20 >> 2] | 0;
     i3 = HEAP32[i24 >> 2] | 0;
     i5 = ~~(+HEAPF64[i23 >> 3] * +HEAPF64[i57 >> 3]);
     i6 = ~~(+HEAPF64[i26 >> 3] * +HEAPF64[i58 >> 3]);
     if (i4 & 1 | 0) {
      HEAP32[i62 >> 2] = i5 + i2;
      HEAP32[i33 >> 2] = i6 + i3;
      i19 = HEAP32[i63 >> 2] | 0;
      HEAP32[i61 >> 2] = HEAP32[i62 >> 2];
      HEAP32[i61 + 4 >> 2] = HEAP32[i62 + 4 >> 2];
      if (!(_outline_add_point(i19, i61, 1) | 0)) break;
     }
     if (i4 & 2 | 0) {
      HEAP32[i62 >> 2] = i2 - i5;
      HEAP32[i32 >> 2] = i3 - i6;
      i19 = HEAP32[i60 >> 2] | 0;
      HEAP32[i61 >> 2] = HEAP32[i62 >> 2];
      HEAP32[i61 + 4 >> 2] = HEAP32[i62 + 4 >> 2];
      if (!(_outline_add_point(i19, i61, 1) | 0)) break;
     }
     d7 = +HEAPF64[i31 >> 3];
     d8 = +HEAPF64[i25 >> 3];
     if (d7 != +HEAPF64[i23 >> 3] ? 1 : d8 != +HEAPF64[i26 >> 3]) {
      i6 = (HEAP32[i29 >> 2] & 3 ^ 3) & ~HEAP32[i30 >> 2];
      i4 = HEAP32[i20 >> 2] | 0;
      i5 = HEAP32[i24 >> 2] | 0;
      i3 = ~~(d7 * +HEAPF64[i57 >> 3]);
      i2 = ~~(d8 * +HEAPF64[i58 >> 3]);
      if (i6 & 1 | 0) {
       i18 = HEAP32[(HEAP32[i63 >> 2] | 0) + 16 >> 2] | 0;
       i19 = HEAP32[i55 >> 2] | 0;
       HEAP32[i18 + (i19 << 3) >> 2] = i3 + i4;
       HEAP32[i18 + (i19 << 3) + 4 >> 2] = i2 + i5;
      }
      if (i6 & 2 | 0) {
       i18 = HEAP32[(HEAP32[i60 >> 2] | 0) + 16 >> 2] | 0;
       i19 = HEAP32[i56 >> 2] | 0;
       HEAP32[i18 + (i19 << 3) >> 2] = i4 - i3;
       HEAP32[i18 + (i19 << 3) + 4 >> 2] = i5 - i2;
      }
     }
     HEAP8[i53 >> 0] = 1;
     i4 = 2;
    } else {
     d8 = +HEAPF64[i50 >> 3];
     if (d8 > 0.0) {
      i2 = 15;
      d7 = 1.0;
      do {
       d73 = .7071067811865476 / +Math_sqrt(+d7);
       HEAPF64[i61 + (i2 << 3) >> 3] = d73;
       d73 = d7 * d73;
       i2 = i2 + -1 | 0;
       d7 = d73 + 1.0;
      } while ((i2 | 0) != 0 & d73 < d8);
     } else {
      i2 = 15;
      d7 = 1.0;
     }
     i3 = i61 + (i2 << 3) | 0;
     HEAPF64[i3 >> 3] = 1.0 / d7;
     i2 = 15 - i2 | 0;
     if (!(_process_arc(i63, i5, i4, 1.0, 0.0, 0.0, 1.0, i3, i2, 1) | 0)) {
      i66 = 36;
      break;
     }
     if (!(_process_arc(i63, i5, i4, 0.0, 1.0, -1.0, 0.0, i3, i2, 1) | 0)) {
      i66 = 36;
      break;
     }
     if (!(_process_arc(i63, i5, i4, -1.0, 0.0, 0.0, -1.0, i3, i2, 1) | 0)) {
      i66 = 36;
      break;
     }
     if (_process_arc(i63, i5, i4, 0.0, -1.0, 1.0, 0.0, i3, i2, 1) | 0) i4 = 0; else break;
    }
    i2 = HEAP32[i63 >> 2] | 0;
    i3 = HEAP32[i2 + 8 >> 2] | 0;
    if (!i3) {
     i66 = 51;
     break;
    }
    i2 = (HEAP32[i2 + 20 >> 2] | 0) + (i3 + -1) | 0;
    i3 = HEAP8[i2 >> 0] | 0;
    if ((i3 & 255) > 3) {
     i66 = 53;
     break;
    }
    HEAP8[i2 >> 0] = i3 | 4;
    if (i4 | 0) {
     i2 = HEAP32[i60 >> 2] | 0;
     i3 = HEAP32[i2 + 8 >> 2] | 0;
     if (!i3) {
      i66 = 56;
      break;
     }
     i2 = (HEAP32[i2 + 20 >> 2] | 0) + (i3 + -1) | 0;
     i3 = HEAP8[i2 >> 0] | 0;
     if ((i3 & 255) > 3) {
      i66 = 58;
      break;
     }
     HEAP8[i2 >> 0] = i3 | 4;
    }
    HEAP32[i55 >> 2] = HEAP32[HEAP32[i63 >> 2] >> 2];
    HEAP32[i56 >> 2] = HEAP32[HEAP32[i60 >> 2] >> 2];
   }
   i21 = i21 + 1 | 0;
   if (i21 >>> 0 >= (HEAP32[i27 >> 2] | 0) >>> 0) {
    i66 = 63;
    break;
   }
  }
  if ((i66 | 0) != 16) if ((i66 | 0) != 27) if ((i66 | 0) != 36) if ((i66 | 0) == 51) ___assert_fail(359983, 359954, 272, 360003); else if ((i66 | 0) == 53) ___assert_fail(360025, 359954, 273, 360003); else if ((i66 | 0) == 56) ___assert_fail(359983, 359954, 272, 360003); else if ((i66 | 0) == 58) ___assert_fail(360025, 359954, 273, 360003); else if ((i66 | 0) == 63) {
   if ((i1 | 0) == (i22 | 0)) break;
   ___assert_fail(360093, 359954, 1380, 359968);
  }
  i66 = 0;
  STACKTOP = i67;
  return i66 | 0;
 } while (0);
 if ((i1 | 0) == ((HEAP32[i51 >> 2] | 0) + (HEAP32[i65 >> 2] << 3) | 0)) {
  i66 = 1;
  STACKTOP = i67;
  return i66 | 0;
 } else ___assert_fail(360093, 359954, 1380, 359968);
 return 0;
}

function _process_quadratic(i34, i24, i25, i26, i14, i27) {
 i34 = i34 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i14 = i14 | 0;
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, i11 = 0, i12 = 0, d13 = 0.0, i15 = 0, d16 = 0.0, d17 = 0.0, d18 = 0.0, i19 = 0, i20 = 0, i21 = 0, d22 = 0.0, d23 = 0.0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i35 = 0;
 i35 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i33 = i35 + 88 | 0;
 i32 = i35 + 160 | 0;
 i28 = i35 + 48 | 0;
 i29 = i35;
 i31 = i26 + 24 | 0;
 d16 = +HEAPF64[i26 >> 3];
 i15 = i26 + 8 | 0;
 d18 = +HEAPF64[i15 >> 3];
 d23 = +HEAPF64[i31 >> 3];
 i30 = i26 + 32 | 0;
 d17 = +HEAPF64[i30 >> 3];
 d22 = d16 * d23 + d18 * d17;
 d23 = d16 * d17 - d18 * d23;
 i12 = d23 < 0.0 ? 1 : 2;
 do if (!(i12 & i14)) {
  i12 = i14;
  i1 = i14;
 } else {
  d16 = +Math_abs(+d23);
  d3 = +HEAPF64[i26 + 16 >> 3];
  d9 = +HEAPF64[i26 + 40 >> 3];
  d17 = d22 * d3 + d9;
  d18 = d3 + d22 * d9;
  d10 = d16 * d3;
  d13 = d16 * d9;
  if (!(d17 < d16 & d18 < d16)) {
   i12 = (d22 + d10 < 1.0 & d22 + d13 < 1.0 ? i12 : 0) ^ i14;
   i1 = i14;
   break;
  }
  d9 = (d9 * d17 + d3 * d18) * .5;
  if (d9 < d10 & d9 < d13) {
   i2 = HEAP32[i24 >> 2] | 0;
   i8 = i24 + 4 | 0;
   i4 = HEAP32[i8 >> 2] | 0;
   if (i27) {
    i1 = i34 + 56 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | i12;
    i1 = i34 + 60 | 0;
   } else {
    i1 = i34 + 60 | 0;
    i5 = i12 & ~HEAP32[i1 >> 2];
    i6 = ~~(+HEAPF64[i34 + 80 >> 3] * +HEAPF64[i34 + 16 >> 3]);
    i7 = ~~(+HEAPF64[i34 + 88 >> 3] * +HEAPF64[i34 + 24 >> 3]);
    if (i5 & 1 | 0) {
     HEAP32[i32 >> 2] = i6 + i2;
     HEAP32[i32 + 4 >> 2] = i7 + i4;
     i21 = HEAP32[i34 >> 2] | 0;
     HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
     HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
     if (!(_outline_add_point(i21, i33, 1) | 0)) {
      i34 = 0;
      STACKTOP = i35;
      return i34 | 0;
     }
    }
    if (i5 & 2) {
     HEAP32[i32 >> 2] = i2 - i6;
     HEAP32[i32 + 4 >> 2] = i4 - i7;
     i21 = HEAP32[i34 + 4 >> 2] | 0;
     HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
     HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
     if (!(_outline_add_point(i21, i33, 1) | 0)) {
      i34 = 0;
      STACKTOP = i35;
      return i34 | 0;
     }
    }
   }
   HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | i12;
   if (d17 < 0.0 | d18 < 0.0) {
    i5 = HEAP32[i24 >> 2] | 0;
    i1 = HEAP32[i8 >> 2] | 0;
    i6 = i34 + 16 | 0;
    i2 = ~~(+HEAPF64[i6 >> 3] * 0.0);
    i7 = i34 + 24 | 0;
    i4 = ~~(+HEAPF64[i7 >> 3] * 0.0);
    i8 = (i12 & 1 | 0) == 0;
    if (!i8) {
     HEAP32[i32 >> 2] = i2 + i5;
     HEAP32[i32 + 4 >> 2] = i4 + i1;
     i21 = HEAP32[i34 >> 2] | 0;
     HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
     HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
     if (!(_outline_add_point(i21, i33, 1) | 0)) {
      i34 = 0;
      STACKTOP = i35;
      return i34 | 0;
     }
    }
    i11 = (i12 & 2 | 0) == 0;
    if (!i11) {
     HEAP32[i32 >> 2] = i5 - i2;
     HEAP32[i32 + 4 >> 2] = i1 - i4;
     i21 = HEAP32[i34 + 4 >> 2] | 0;
     HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
     HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
     if (!(_outline_add_point(i21, i33, 1) | 0)) {
      i34 = 0;
      STACKTOP = i35;
      return i34 | 0;
     }
    }
    i4 = HEAP32[i24 + 16 >> 2] | 0;
    i5 = HEAP32[i24 + 20 >> 2] | 0;
    i2 = ~~(+HEAPF64[i6 >> 3] * 0.0);
    i1 = ~~(+HEAPF64[i7 >> 3] * 0.0);
    if (!i8) {
     HEAP32[i32 >> 2] = i2 + i4;
     HEAP32[i32 + 4 >> 2] = i1 + i5;
     i21 = HEAP32[i34 >> 2] | 0;
     HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
     HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
     if (!(_outline_add_point(i21, i33, 1) | 0)) {
      i34 = 0;
      STACKTOP = i35;
      return i34 | 0;
     }
    }
    if (!i11) {
     HEAP32[i32 >> 2] = i4 - i2;
     HEAP32[i32 + 4 >> 2] = i5 - i1;
     i21 = HEAP32[i34 + 4 >> 2] | 0;
     HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
     HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
     if (!(_outline_add_point(i21, i33, 1) | 0)) {
      i34 = 0;
      STACKTOP = i35;
      return i34 | 0;
     }
    }
   } else {
    d18 = d17 / d16;
    i5 = HEAP32[i24 >> 2] | 0;
    i1 = HEAP32[i8 >> 2] | 0;
    i2 = ~~(d18 * +HEAPF64[i26 >> 3] * +HEAPF64[i34 + 16 >> 3]);
    i4 = ~~(d18 * +HEAPF64[i15 >> 3] * +HEAPF64[i34 + 24 >> 3]);
    if (i12 & 1 | 0) {
     HEAP32[i32 >> 2] = i2 + i5;
     HEAP32[i32 + 4 >> 2] = i4 + i1;
     i21 = HEAP32[i34 >> 2] | 0;
     HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
     HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
     if (!(_outline_add_point(i21, i33, 1) | 0)) {
      i34 = 0;
      STACKTOP = i35;
      return i34 | 0;
     }
    }
    if (i12 & 2 | 0) {
     HEAP32[i32 >> 2] = i5 - i2;
     HEAP32[i32 + 4 >> 2] = i1 - i4;
     i21 = HEAP32[i34 + 4 >> 2] | 0;
     HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
     HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
     if (!(_outline_add_point(i21, i33, 1) | 0)) {
      i34 = 0;
      STACKTOP = i35;
      return i34 | 0;
     }
    }
   }
   i1 = ~i12 & i14;
   if (!i1) {
    i34 = i34 + 80 | 0;
    HEAP32[i34 >> 2] = HEAP32[i31 >> 2];
    HEAP32[i34 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
    HEAP32[i34 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
    HEAP32[i34 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
    i34 = 1;
    STACKTOP = i35;
    return i34 | 0;
   }
  } else i1 = i14;
  i12 = i12 ^ i14;
 } while (0);
 if (i12) {
  d18 = d22 + 3.0;
  d3 = d22 + 1.0;
  if (d18 * d18 < d3 * +HEAPF64[i34 + 128 >> 3]) {
   d13 = 1.0 / d3;
   d3 = +HEAPF64[i26 + 16 >> 3];
   d17 = d3 * 2.0;
   d18 = +HEAPF64[i26 + 40 >> 3];
   d9 = d18 * 2.0;
   d16 = +Math_abs(+(d23 * (d13 * d17 - d18)));
   d10 = +HEAPF64[i34 + 144 >> 3];
   if (d16 < d10 * (d17 + d22 * d18)) if (+Math_abs(+(d23 * (d13 * d9 - d3))) < d10 * (d22 * d3 + d9)) {
    d9 = d13 * (+HEAPF64[i26 >> 3] + +HEAPF64[i26 + 24 >> 3]);
    d3 = d13 * (+HEAPF64[i15 >> 3] + +HEAPF64[i30 >> 3]);
    i2 = HEAP32[i24 >> 2] | 0;
    i4 = HEAP32[i24 + 4 >> 2] | 0;
    i21 = ~i12;
    i7 = i34 + 60 | 0;
    HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & i21;
    i7 = i34 + 16 | 0;
    i5 = ~~(+HEAPF64[i34 + 80 >> 3] * +HEAPF64[i7 >> 3]);
    i8 = i34 + 24 | 0;
    i6 = ~~(+HEAPF64[i34 + 88 >> 3] * +HEAPF64[i8 >> 3]);
    i11 = (i12 & 1 | 0) == 0;
    if (!i11) {
     HEAP32[i32 >> 2] = i5 + i2;
     HEAP32[i32 + 4 >> 2] = i6 + i4;
     i20 = HEAP32[i34 >> 2] | 0;
     HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
     HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
     if (!(_outline_add_point(i20, i33, 2) | 0)) {
      i34 = 0;
      STACKTOP = i35;
      return i34 | 0;
     }
    }
    i20 = (i12 & 2 | 0) == 0;
    if (!i20) {
     HEAP32[i32 >> 2] = i2 - i5;
     HEAP32[i32 + 4 >> 2] = i4 - i6;
     i19 = HEAP32[i34 + 4 >> 2] | 0;
     HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
     HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
     if (!(_outline_add_point(i19, i33, 2) | 0)) {
      i34 = 0;
      STACKTOP = i35;
      return i34 | 0;
     }
    }
    i15 = HEAP32[i24 + 8 >> 2] | 0;
    i19 = HEAP32[i24 + 12 >> 2] | 0;
    i14 = ~~(d9 * +HEAPF64[i7 >> 3]);
    i12 = ~~(d3 * +HEAPF64[i8 >> 3]);
    if (!i11) {
     i6 = i14 + i15 | 0;
     i7 = i12 + i19 | 0;
     i8 = HEAP32[i34 >> 2] | 0;
     i2 = HEAP32[i8 >> 2] | 0;
     i5 = i8 + 4 | 0;
     i4 = HEAP32[i5 >> 2] | 0;
     do if (i2 >>> 0 < i4 >>> 0) i4 = i8 + 16 | 0; else {
      i2 = i4 << 1;
      i4 = ___errno_location() | 0;
      HEAP32[i4 >> 2] = 0;
      i4 = i8 + 16 | 0;
      i11 = _ass_try_realloc_array(HEAP32[i4 >> 2] | 0, i2, 8) | 0;
      HEAP32[i4 >> 2] = i11;
      i11 = ___errno_location() | 0;
      if (!(HEAP32[i11 >> 2] | 0)) {
       HEAP32[i5 >> 2] = i2;
       i2 = HEAP32[i8 >> 2] | 0;
       break;
      } else {
       i34 = 0;
       STACKTOP = i35;
       return i34 | 0;
      }
     } while (0);
     i11 = (HEAP32[i4 >> 2] | 0) + (i2 << 3) | 0;
     HEAP32[i11 >> 2] = i6;
     HEAP32[i11 + 4 >> 2] = i7;
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    }
    if (!i20) {
     i8 = i15 - i14 | 0;
     i6 = i19 - i12 | 0;
     i7 = HEAP32[i34 + 4 >> 2] | 0;
     i2 = HEAP32[i7 >> 2] | 0;
     i5 = i7 + 4 | 0;
     i4 = HEAP32[i5 >> 2] | 0;
     do if (i2 >>> 0 < i4 >>> 0) i4 = i7 + 16 | 0; else {
      i2 = i4 << 1;
      i4 = ___errno_location() | 0;
      HEAP32[i4 >> 2] = 0;
      i4 = i7 + 16 | 0;
      i20 = _ass_try_realloc_array(HEAP32[i4 >> 2] | 0, i2, 8) | 0;
      HEAP32[i4 >> 2] = i20;
      i20 = ___errno_location() | 0;
      if (!(HEAP32[i20 >> 2] | 0)) {
       HEAP32[i5 >> 2] = i2;
       i2 = HEAP32[i7 >> 2] | 0;
       break;
      } else {
       i34 = 0;
       STACKTOP = i35;
       return i34 | 0;
      }
     } while (0);
     i20 = (HEAP32[i4 >> 2] | 0) + (i2 << 3) | 0;
     HEAP32[i20 >> 2] = i8;
     HEAP32[i20 + 4 >> 2] = i6;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    }
    i1 = i1 & i21;
    if (!i1) {
     i34 = i34 + 80 | 0;
     HEAP32[i34 >> 2] = HEAP32[i31 >> 2];
     HEAP32[i34 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
     HEAP32[i34 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
     HEAP32[i34 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
     i34 = 1;
     STACKTOP = i35;
     return i34 | 0;
    }
   }
  }
 }
 i14 = HEAP32[i24 + 8 >> 2] | 0;
 i12 = i14 + (HEAP32[i24 >> 2] | 0) | 0;
 i15 = HEAP32[i24 + 12 >> 2] | 0;
 i4 = i15 + (HEAP32[i24 + 4 >> 2] | 0) | 0;
 i21 = i24 + 16 | 0;
 i14 = (HEAP32[i21 >> 2] | 0) + i14 | 0;
 i15 = (HEAP32[i24 + 20 >> 2] | 0) + i15 | 0;
 i19 = i12 + 2 + i14 >> 2;
 i5 = i28 + 16 | 0;
 HEAP32[i5 >> 2] = i19;
 i20 = i4 + 2 + i15 >> 2;
 HEAP32[i28 + 20 >> 2] = i20;
 HEAP32[i28 + 8 >> 2] = i12 >> 1;
 HEAP32[i28 + 12 >> 2] = i4 >> 1;
 HEAP32[i28 + 24 >> 2] = i14 >> 1;
 HEAP32[i28 + 28 >> 2] = i15 >> 1;
 i15 = i24;
 i14 = HEAP32[i15 >> 2] | 0;
 i15 = HEAP32[i15 + 4 >> 2] | 0;
 i24 = i28;
 HEAP32[i24 >> 2] = i14;
 HEAP32[i24 + 4 >> 2] = i15;
 i24 = HEAP32[i21 + 4 >> 2] | 0;
 i4 = i28 + 32 | 0;
 HEAP32[i4 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i4 + 4 >> 2] = i24;
 d23 = +HEAPF64[i25 >> 3] * .5;
 HEAPF64[i29 >> 3] = d23;
 d10 = +HEAPF64[i25 + 8 >> 3] * .5;
 HEAPF64[i29 + 8 >> 3] = d10;
 d3 = +HEAPF64[i25 + 16 >> 3] * .5;
 HEAPF64[i29 + 32 >> 3] = d3;
 d9 = +HEAPF64[i25 + 24 >> 3] * .5;
 HEAPF64[i29 + 40 >> 3] = d9;
 d3 = (d23 + d3) * .5;
 i4 = i29 + 16 | 0;
 HEAPF64[i4 >> 3] = d3;
 d9 = (d10 + d9) * .5;
 HEAPF64[i29 + 24 >> 3] = d9;
 d10 = +Math_sqrt(+(d3 * d3 + d9 * d9));
 do if (d10 < +HEAPF64[i34 + 120 >> 3]) {
  i2 = ~i1;
  i4 = i34 + 60 | 0;
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & i2;
  i5 = i34 + 16 | 0;
  i6 = ~~(+HEAPF64[i34 + 80 >> 3] * +HEAPF64[i5 >> 3]);
  i8 = i34 + 24 | 0;
  i7 = ~~(+HEAPF64[i34 + 88 >> 3] * +HEAPF64[i8 >> 3]);
  i11 = (i1 & 1 | 0) == 0;
  if (!i11) {
   HEAP32[i32 >> 2] = i6 + i14;
   HEAP32[i32 + 4 >> 2] = i7 + i15;
   i29 = HEAP32[i34 >> 2] | 0;
   HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
   HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
   if (!(_outline_add_point(i29, i33, 1) | 0)) {
    i1 = 0;
    break;
   }
  }
  i12 = (i1 & 2 | 0) == 0;
  if (!i12) {
   HEAP32[i32 >> 2] = i14 - i6;
   HEAP32[i32 + 4 >> 2] = i15 - i7;
   i29 = HEAP32[i34 + 4 >> 2] | 0;
   HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
   HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
   if (!(_outline_add_point(i29, i33, 1) | 0)) {
    i1 = 0;
    break;
   }
  }
  if (_start_segment(i34, i19, i20, +HEAPF64[i31 >> 3], +HEAPF64[i30 >> 3], i1) | 0) {
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & i2;
   i2 = ~~(+HEAPF64[i31 >> 3] * +HEAPF64[i5 >> 3]);
   i1 = ~~(+HEAPF64[i30 >> 3] * +HEAPF64[i8 >> 3]);
   if (!i11) {
    HEAP32[i32 >> 2] = i2 + i19;
    HEAP32[i32 + 4 >> 2] = i1 + i20;
    i31 = HEAP32[i34 >> 2] | 0;
    HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
    HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
    if (!(_outline_add_point(i31, i33, 1) | 0)) {
     i1 = 0;
     break;
    }
   }
   if (!i12) {
    HEAP32[i32 >> 2] = i19 - i2;
    HEAP32[i32 + 4 >> 2] = i20 - i1;
    i34 = HEAP32[i34 + 4 >> 2] | 0;
    HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
    HEAP32[i33 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
    if (!(_outline_add_point(i34, i33, 1) | 0)) {
     i1 = 0;
     break;
    }
   }
   i1 = 1;
  } else i1 = 0;
 } else {
  d23 = 1.0 / d10;
  HEAP32[i33 >> 2] = HEAP32[i26 >> 2];
  HEAP32[i33 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
  HEAP32[i33 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
  HEAP32[i33 + 12 >> 2] = HEAP32[i26 + 12 >> 2];
  HEAPF64[i33 + 16 >> 3] = +HEAPF64[i26 + 16 >> 3] * .5;
  i2 = i33 + 24 | 0;
  HEAPF64[i2 >> 3] = d23 * d3;
  HEAPF64[i33 + 32 >> 3] = d23 * d9;
  HEAPF64[i33 + 40 >> 3] = d10;
  i32 = i33 + 48 | 0;
  HEAP32[i32 >> 2] = HEAP32[i31 >> 2];
  HEAP32[i32 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
  HEAP32[i32 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
  HEAP32[i32 + 12 >> 2] = HEAP32[i31 + 12 >> 2];
  HEAPF64[i33 + 64 >> 3] = +HEAPF64[i26 + 40 >> 3] * .5;
  if (_process_quadratic(i34, i28, i29, i33, i1, i27) | 0) i1 = _process_quadratic(i34, i5, i4, i2, i1, 0) | 0; else i1 = 0;
 } while (0);
 i34 = i1;
 STACKTOP = i35;
 return i34 | 0;
}

function _af_cjk_hints_apply(i24, i29, i2) {
 i24 = i24 | 0;
 i29 = i29 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i30 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i25 = i30 + 8 | 0;
 i26 = i30 + 4 | 0;
 i27 = i30;
 i1 = _af_glyph_hints_reload(i24, i29) | 0;
 if (i1 | 0) {
  i29 = i1;
  STACKTOP = i30;
  return i29 | 0;
 }
 i23 = i2 + 24 | 0;
 i22 = i24 + 2980 | 0;
 i1 = HEAP32[i22 >> 2] | 0;
 do if ((i1 & 1 | 0) == 0 | (HEAP32[i23 >> 2] | 0) == 1 & (i1 & 8 | 0) == 0) {
  i1 = _af_cjk_hints_detect_features(i24, 0) | 0;
  if (!i1) {
   _af_cjk_hints_compute_blue_edges(i24, i2, 0);
   i1 = HEAP32[i22 >> 2] | 0;
   break;
  } else {
   i29 = i1;
   STACKTOP = i30;
   return i29 | 0;
  }
 } while (0);
 do if (!(i1 & 2)) {
  i1 = _af_cjk_hints_detect_features(i24, 1) | 0;
  if (!i1) {
   _af_cjk_hints_compute_blue_edges(i24, i2, 1);
   break;
  } else {
   i29 = i1;
   STACKTOP = i30;
   return i29 | 0;
  }
 } while (0);
 i19 = i24 + 24 | 0;
 i20 = i24 + 28 | 0;
 i21 = i24 + 2984 | 0;
 i18 = 0;
 while (1) {
  i17 = (i18 | 0) == 0;
  if (i17) {
   i1 = HEAP32[i22 >> 2] | 0;
   if (i1 & 1 | 0) {
    i18 = 1;
    continue;
   }
   if ((HEAP32[i23 >> 2] | 0) == 1 & (i1 & 8 | 0) == 0) {
    _af_warper_compute(i25, i24, 0, i26, i27);
    i2 = HEAP32[i26 >> 2] | 0;
    i3 = HEAP32[i27 >> 2] | 0;
    i17 = HEAP32[i19 >> 2] | 0;
    i1 = HEAP32[i20 >> 2] | 0;
    i4 = i1 + (i17 * 40 | 0) | 0;
    if ((i17 | 0) > 0) do {
     i17 = (_FT_MulFix(HEAP16[i1 + 12 >> 1] | 0, i2) | 0) + i3 | 0;
     HEAP32[i1 + 16 >> 2] = i17;
     i1 = i1 + 40 | 0;
    } while (i1 >>> 0 < i4 >>> 0);
   } else i28 = 17;
  } else if ((i18 | 0) == 1) if (!(HEAP32[i22 >> 2] & 2)) i28 = 17; else break;
  if ((i28 | 0) == 17) {
   i28 = 0;
   i13 = i24 + 44 + (i18 * 1468 | 0) + 20 | 0;
   i14 = HEAP32[i13 >> 2] | 0;
   i16 = i24 + 44 + (i18 * 1468 | 0) + 12 | 0;
   i11 = HEAP32[i16 >> 2] | 0;
   i15 = i14 + (i11 * 48 | 0) | 0;
   i12 = (i11 | 0) > 0;
   L30 : do if (i12) {
    i7 = i14;
    i2 = 0;
    do {
     i3 = HEAP8[i7 + 12 >> 0] | 0;
     do if (!(i3 & 4)) {
      i1 = HEAP32[i7 + 20 >> 2] | 0;
      i4 = HEAP32[i7 + 24 >> 2] | 0;
      if (!i1) {
       if (!i4) break;
       i1 = HEAP32[i4 + 20 >> 2] | 0;
       if (!i1) break;
       i5 = i7;
       i6 = i4;
       i3 = HEAP8[i4 + 12 >> 0] | 0;
      } else {
       i5 = i4;
       i6 = i7;
      }
      i1 = HEAP32[i1 + 8 >> 2] | 0;
      HEAP32[i6 + 8 >> 2] = i1;
      HEAP8[i6 + 12 >> 0] = i3 | 4;
      if (i5 | 0) if (!(HEAP32[i5 + 20 >> 2] | 0)) {
       i10 = (_af_cjk_compute_stem_width(i24, i18, (HEAP32[i5 + 4 >> 2] | 0) - (HEAP32[i6 + 4 >> 2] | 0) | 0) | 0) + i1 | 0;
       HEAP32[i5 + 8 >> 2] = i10;
       i10 = i5 + 12 | 0;
       HEAP8[i10 >> 0] = HEAP8[i10 >> 0] | 4;
      }
      i2 = (i2 | 0) == 0 ? i7 : i2;
     } while (0);
     i7 = i7 + 48 | 0;
    } while (i7 >>> 0 < i15 >>> 0);
    if ((i18 | 0) == 1) {
     i2 = 0;
     i3 = 0;
     i1 = 0;
     i8 = i14;
     while (1) {
      i4 = i8 + 12 | 0;
      i5 = HEAP8[i4 >> 0] | 0;
      L49 : do if (!(i5 & 4)) {
       i6 = HEAP32[i8 + 24 >> 2] | 0;
       if (!i6) {
        i1 = i1 + 1 | 0;
        break;
       }
       do if (i3 << 24 >> 24) {
        i7 = i2 + 64 | 0;
        if ((HEAP32[i8 + 8 >> 2] | 0) >= (i7 | 0)) if ((HEAP32[i6 + 8 >> 2] | 0) >= (i7 | 0)) break;
        i1 = i1 + 1 | 0;
        break L49;
       } while (0);
       if (HEAP32[i6 + 20 >> 2] | 0) {
        i10 = HEAP32[i6 + 8 >> 2] | 0;
        i10 = (_af_cjk_compute_stem_width(i24, 1, (HEAP32[i8 + 4 >> 2] | 0) - (HEAP32[i6 + 4 >> 2] | 0) | 0) | 0) + i10 | 0;
        HEAP32[i8 + 8 >> 2] = i10;
        HEAP8[i4 >> 0] = i5 | 4;
        break;
       }
       if (i6 >>> 0 < i8 >>> 0) {
        i2 = HEAP32[i6 + 8 >> 2] | 0;
        i2 = (_af_cjk_compute_stem_width(i24, 1, (HEAP32[i8 + 4 >> 2] | 0) - (HEAP32[i6 + 4 >> 2] | 0) | 0) | 0) + i2 | 0;
        HEAP32[i8 + 8 >> 2] = i2;
        HEAP8[i4 >> 0] = i5 | 4;
        i3 = 1;
        break;
       } else {
        _af_hint_normal_stem(i24, i8, i6, 0, 1) | 0;
        HEAP8[i4 >> 0] = HEAP8[i4 >> 0] | 4;
        i2 = i6 + 12 | 0;
        HEAP8[i2 >> 0] = HEAP8[i2 >> 0] | 4;
        i2 = HEAP32[i6 + 8 >> 2] | 0;
        i3 = 1;
        break;
       }
      } while (0);
      i8 = i8 + 48 | 0;
      if (i8 >>> 0 >= i15 >>> 0) break L30;
     }
    } else {
     i3 = 0;
     i8 = 0;
     i9 = 0;
     i1 = 0;
     i10 = i14;
    }
    while (1) {
     i6 = i10 + 12 | 0;
     i4 = HEAP8[i6 >> 0] | 0;
     L69 : do if (!(i4 & 4)) {
      i7 = HEAP32[i10 + 24 >> 2] | 0;
      if (!i7) {
       i4 = i8;
       i5 = i9;
       i1 = i1 + 1 | 0;
       break;
      }
      do if (i9 << 24 >> 24) {
       i5 = i8 + 64 | 0;
       if ((HEAP32[i10 + 8 >> 2] | 0) >= (i5 | 0)) if ((HEAP32[i7 + 8 >> 2] | 0) >= (i5 | 0)) break;
       i4 = i8;
       i5 = i9;
       i1 = i1 + 1 | 0;
       break L69;
      } while (0);
      if (HEAP32[i7 + 20 >> 2] | 0) {
       i5 = HEAP32[i7 + 8 >> 2] | 0;
       i5 = (_af_cjk_compute_stem_width(i24, i18, (HEAP32[i10 + 4 >> 2] | 0) - (HEAP32[i7 + 4 >> 2] | 0) | 0) | 0) + i5 | 0;
       HEAP32[i10 + 8 >> 2] = i5;
       HEAP8[i6 >> 0] = i4 | 4;
       i4 = i8;
       i5 = i9;
       break;
      }
      if (i7 >>> 0 < i10 >>> 0) {
       i5 = HEAP32[i7 + 8 >> 2] | 0;
       i5 = (_af_cjk_compute_stem_width(i24, i18, (HEAP32[i10 + 4 >> 2] | 0) - (HEAP32[i7 + 4 >> 2] | 0) | 0) | 0) + i5 | 0;
       HEAP32[i10 + 8 >> 2] = i5;
       HEAP8[i6 >> 0] = i4 | 4;
       i4 = i5;
       i5 = 1;
       break;
      }
      if (!i2) i3 = _af_hint_normal_stem(i24, i10, i7, 0, 0) | 0; else _af_hint_normal_stem(i24, i10, i7, i3, i18) | 0;
      HEAP8[i6 >> 0] = HEAP8[i6 >> 0] | 4;
      i4 = i7 + 12 | 0;
      HEAP8[i4 >> 0] = HEAP8[i4 >> 0] | 4;
      i4 = HEAP32[i7 + 8 >> 2] | 0;
      i5 = 1;
      i2 = i10;
     } else {
      i4 = i8;
      i5 = i9;
     } while (0);
     i10 = i10 + 48 | 0;
     if (i10 >>> 0 >= i15 >>> 0) break; else {
      i8 = i4;
      i9 = i5;
     }
    }
   } else i1 = 0; while (0);
   i2 = i11 * 48 | 0;
   L92 : do if (i17) {
    i8 = (i2 | 0) == 576;
    switch (i2 | 0) {
    case 288:
     {
      i2 = i14;
      i6 = 4;
      i4 = 2;
      break;
     }
    case 576:
     {
      i2 = i14 + 48 | 0;
      i6 = 9;
      i4 = 5;
      break;
     }
    default:
     break L92;
    }
    i5 = i14 + (i6 * 48 | 0) | 0;
    i3 = HEAP32[i14 + (i4 * 48 | 0) + 4 >> 2] | 0;
    i3 = i3 - (HEAP32[i14 + (i6 * 48 | 0) + 4 >> 2] | 0) + (i3 - (HEAP32[i2 + 4 >> 2] | 0)) | 0;
    i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
    if ((HEAP32[i2 + 24 >> 2] | 0) == (i2 + 48 | 0)) if ((HEAP32[i14 + (i4 * 48 | 0) + 24 >> 2] | 0) == (i14 + (i4 * 48 | 0) + 48 | 0)) {
     i7 = HEAP32[i14 + (i6 * 48 | 0) + 24 >> 2] | 0;
     if ((i3 | 0) < 8 & (i7 | 0) == (i5 + 48 | 0)) {
      i3 = i14 + (i6 * 48 | 0) + 8 | 0;
      i11 = (HEAP32[i14 + (i4 * 48 | 0) + 8 >> 2] << 1) - (HEAP32[i2 + 8 >> 2] | 0) | 0;
      i2 = (HEAP32[i3 >> 2] | 0) - i11 | 0;
      HEAP32[i3 >> 2] = i11;
      i3 = (i7 | 0) == 0;
      if (!i3) {
       i11 = i7 + 8 | 0;
       HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - i2;
      }
      if (i8) {
       i11 = i14 + 392 | 0;
       HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - i2;
       i11 = i14 + 536 | 0;
       HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - i2;
      }
      i11 = i14 + (i6 * 48 | 0) + 12 | 0;
      HEAP8[i11 >> 0] = HEAP8[i11 >> 0] | 4;
      if (!i3) {
       i11 = i7 + 12 | 0;
       HEAP8[i11 >> 0] = HEAP8[i11 >> 0] | 4;
      }
     }
    }
   } while (0);
   if (!((i1 | 0) == 0 | i12 ^ 1)) {
    i5 = i14;
    do {
     i2 = i5 + 12 | 0;
     i3 = HEAP8[i2 >> 0] | 0;
     if (!(i3 & 4)) {
      i4 = HEAP32[i5 + 28 >> 2] | 0;
      if (i4) {
       HEAP32[i5 + 8 >> 2] = (HEAP32[i4 + 8 >> 2] | 0) - (HEAP32[i4 + 4 >> 2] | 0) + (HEAP32[i5 + 4 >> 2] | 0);
       HEAP8[i2 >> 0] = i3 | 4;
       i1 = i1 + -1 | 0;
      }
     }
     i5 = i5 + 48 | 0;
    } while (i5 >>> 0 < i15 >>> 0);
    if (i12 & (i1 | 0) != 0) {
     i7 = i14;
     do {
      do if (!(HEAP8[i7 + 12 >> 0] & 4)) {
       i5 = i7;
       while (1) {
        i4 = i5 + -48 | 0;
        if (i4 >>> 0 < i14 >>> 0) {
         i2 = 1;
         i1 = 0;
         break;
        }
        if (!(HEAP8[i5 + -36 >> 0] & 4)) i5 = i4; else {
         i2 = 0;
         i1 = 1;
         break;
        }
       }
       i6 = i7;
       while (1) {
        i3 = i6 + 48 | 0;
        if (i3 >>> 0 >= i15 >>> 0) {
         i28 = 82;
         break;
        }
        if (!(HEAP8[i6 + 60 >> 0] & 4)) i6 = i3; else {
         i1 = 1;
         break;
        }
       }
       if ((i28 | 0) == 82) {
        i28 = 0;
        if (i1) i1 = 0; else break;
       }
       if (i2) {
        HEAP32[i7 + 8 >> 2] = (HEAP32[i6 + 56 >> 2] | 0) - (HEAP32[i6 + 52 >> 2] | 0) + (HEAP32[i7 + 4 >> 2] | 0);
        break;
       }
       if (!i1) {
        HEAP32[i7 + 8 >> 2] = (HEAP32[i5 + -40 >> 2] | 0) - (HEAP32[i5 + -44 >> 2] | 0) + (HEAP32[i7 + 4 >> 2] | 0);
        break;
       }
       i3 = HEAP16[i3 >> 1] | 0;
       i12 = HEAP16[i4 >> 1] | 0;
       i2 = i12 << 16 >> 16;
       i1 = HEAP32[i5 + -40 >> 2] | 0;
       if (i3 << 16 >> 16 != i12 << 16 >> 16) i1 = (_FT_MulDiv((HEAP16[i7 >> 1] | 0) - i2 | 0, (HEAP32[i6 + 56 >> 2] | 0) - i1 | 0, (i3 << 16 >> 16) - i2 | 0) | 0) + i1 | 0;
       HEAP32[i7 + 8 >> 2] = i1;
      } while (0);
      i7 = i7 + 48 | 0;
     } while (i7 >>> 0 < i15 >>> 0);
    }
   }
   i3 = HEAP32[i13 >> 2] | 0;
   i1 = HEAP32[i16 >> 2] | 0;
   i8 = i3 + (i1 * 48 | 0) | 0;
   if (i17) i2 = HEAP32[i21 >> 2] & 1; else if ((i18 | 0) == 1) i2 = (HEAP32[i21 >> 2] | 0) >>> 1 & 1; else i2 = 0;
   if ((i1 | 0) > 0) {
    i7 = i17 ? 4 : 8;
    if (!(i2 << 24 >> 24)) do {
     i5 = HEAP32[i3 + 40 >> 2] | 0;
     i6 = (HEAP32[i3 + 8 >> 2] | 0) - (HEAP32[i3 + 4 >> 2] | 0) | 0;
     if (i17) {
      i2 = i5;
      do {
       i4 = HEAP32[i2 + 44 >> 2] | 0;
       i1 = i2 + 40 | 0;
       while (1) {
        i1 = HEAP32[i1 >> 2] | 0;
        i16 = i1 + 16 | 0;
        HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + i6;
        HEAP16[i1 >> 1] = HEAPU16[i1 >> 1] | i7;
        if ((i1 | 0) == (i4 | 0)) break; else i1 = i1 + 32 | 0;
       }
       i2 = HEAP32[i2 + 16 >> 2] | 0;
      } while ((i2 | 0) != (i5 | 0));
     } else {
      i2 = i5;
      do {
       i4 = HEAP32[i2 + 44 >> 2] | 0;
       i1 = i2 + 40 | 0;
       while (1) {
        i1 = HEAP32[i1 >> 2] | 0;
        i16 = i1 + 20 | 0;
        HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + i6;
        HEAP16[i1 >> 1] = HEAPU16[i1 >> 1] | i7;
        if ((i1 | 0) == (i4 | 0)) break; else i1 = i1 + 32 | 0;
       }
       i2 = HEAP32[i2 + 16 >> 2] | 0;
      } while ((i2 | 0) != (i5 | 0));
     }
     i3 = i3 + 48 | 0;
    } while (i3 >>> 0 < i8 >>> 0); else do {
     i5 = HEAP32[i3 + 40 >> 2] | 0;
     i6 = i3 + 8 | 0;
     if (i17) {
      i2 = i5;
      do {
       i4 = HEAP32[i2 + 44 >> 2] | 0;
       i1 = i2 + 40 | 0;
       while (1) {
        i1 = HEAP32[i1 >> 2] | 0;
        HEAP32[i1 + 16 >> 2] = HEAP32[i6 >> 2];
        HEAP16[i1 >> 1] = HEAPU16[i1 >> 1] | i7;
        if ((i1 | 0) == (i4 | 0)) break; else i1 = i1 + 32 | 0;
       }
       i2 = HEAP32[i2 + 16 >> 2] | 0;
      } while ((i2 | 0) != (i5 | 0));
     } else {
      i2 = i5;
      do {
       i4 = HEAP32[i2 + 44 >> 2] | 0;
       i1 = i2 + 40 | 0;
       while (1) {
        i1 = HEAP32[i1 >> 2] | 0;
        HEAP32[i1 + 20 >> 2] = HEAP32[i6 >> 2];
        HEAP16[i1 >> 1] = HEAPU16[i1 >> 1] | i7;
        if ((i1 | 0) == (i4 | 0)) break; else i1 = i1 + 32 | 0;
       }
       i2 = HEAP32[i2 + 16 >> 2] | 0;
      } while ((i2 | 0) != (i5 | 0));
     }
     i3 = i3 + 48 | 0;
    } while (i3 >>> 0 < i8 >>> 0);
   }
   _af_glyph_hints_align_strong_points(i24, i18);
   _af_glyph_hints_align_weak_points(i24, i18);
  }
  i18 = i18 + 1 | 0;
  if ((i18 | 0) == 2) break;
 }
 i28 = HEAP32[i19 >> 2] | 0;
 i1 = HEAP32[i20 >> 2] | 0;
 i5 = i1 + (i28 * 40 | 0) | 0;
 if ((i28 | 0) <= 0) {
  i29 = 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 i4 = HEAP32[i29 + 4 >> 2] | 0;
 i3 = HEAP32[i29 + 8 >> 2] | 0;
 while (1) {
  HEAP32[i4 >> 2] = HEAP32[i1 + 16 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 20 >> 2];
  i2 = HEAPU16[i1 >> 1] | 0;
  if (!(i2 & 1)) i2 = ((i2 & 2) >>> 1) + 1 << 24 >> 24; else i2 = 0;
  HEAP8[i3 >> 0] = i2;
  i1 = i1 + 40 | 0;
  if (i1 >>> 0 >= i5 >>> 0) {
   i1 = 0;
   break;
  } else {
   i4 = i4 + 8 | 0;
   i3 = i3 + 1 | 0;
  }
 }
 STACKTOP = i30;
 return i1 | 0;
}

function _parse_charstrings(i3, i27) {
 i3 = i3 | 0;
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i33 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i31 = i33;
 i22 = i33 + 4 | 0;
 i30 = i27 + 208 | 0;
 i29 = i27 + 156 | 0;
 i25 = i27 + 260 | 0;
 i20 = HEAP32[i27 + 16 >> 2] | 0;
 i5 = HEAP32[i3 + 488 >> 2] | 0;
 i17 = i27 + 8 | 0;
 i18 = HEAP32[i17 >> 2] | 0;
 i19 = i27 + 36 | 0;
 i4 = FUNCTION_TABLE_ii[HEAP32[i19 >> 2] & 63](i27) | 0;
 L1 : do if ((i4 | 0) < 0) {
  HEAP32[i31 >> 2] = 3;
  i2 = i27 + 12 | 0;
  i1 = 3;
 } else {
  if (!i4) {
   STACKTOP = i33;
   return;
  }
  i32 = i27 + 12 | 0;
  if (HEAP32[i32 >> 2] | 0) {
   STACKTOP = i33;
   return;
  }
  i24 = i27 + 152 | 0;
  if (!(HEAP32[i24 >> 2] | 0)) {
   i2 = i4 + 6 | 0;
   i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i30, i2, i20) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break;
   }
   i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i29, i2, i20) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break;
   }
   i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i25, 4, i20) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break;
   }
  }
  i14 = i27 + 28 | 0;
  i15 = i27 + 32 | 0;
  i16 = i3 + 128 | 0;
  i28 = i27 + 200 | 0;
  i23 = i27 + 180 | 0;
  i13 = i3 + 172 | 0;
  i12 = i4 + 5 | 0;
  i11 = i5 + 16 | 0;
  i26 = i27 + 252 | 0;
  i4 = 0;
  i10 = 0;
  i21 = 0;
  L15 : while (1) {
   FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i27);
   i1 = HEAP32[i27 >> 2] | 0;
   if (i1 >>> 0 >= i18 >>> 0) {
    i3 = 60;
    break;
   }
   L18 : do if (!i4) {
    i8 = i1;
    while (1) {
     i1 = i8 + 3 | 0;
     L21 : do if (i1 >>> 0 < i18 >>> 0) {
      switch (HEAP8[i1 >> 0] | 0) {
      case 37:
      case 125:
      case 123:
      case 93:
      case 91:
      case 62:
      case 60:
      case 41:
      case 40:
      case 47:
      case 0:
      case 12:
      case 9:
      case 10:
      case 13:
      case 32:
       break;
      default:
       break L21;
      }
      if ((HEAP8[i8 >> 0] | 0) == 101) if ((HEAP8[i8 + 1 >> 0] | 0) == 110) if ((HEAP8[i8 + 2 >> 0] | 0) == 100) {
       i4 = 0;
       i3 = 60;
       break L15;
      }
     } while (0);
     FUNCTION_TABLE_vi[HEAP32[i15 >> 2] & 127](i27);
     i7 = HEAP32[i27 >> 2] | 0;
     if (i7 >>> 0 >= i18 >>> 0) {
      i3 = 36;
      break L15;
     }
     if (HEAP32[i32 >> 2] | 0) {
      i3 = 79;
      break L15;
     }
     if ((HEAP8[i8 >> 0] | 0) == 47) {
      if ((i8 + 2 | 0) >>> 0 >= i18 >>> 0) {
       i3 = 40;
       break L15;
      }
      i1 = HEAP32[(HEAP32[i16 >> 2] | 0) + 48 >> 2] | 0;
      i5 = HEAP32[i17 >> 2] | 0;
      FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i27);
      i2 = HEAP32[i27 >> 2] | 0;
      if (i2 >>> 0 >= i5 >>> 0) {
       i3 = 45;
       break L15;
      }
      if (((HEAPU8[i2 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
       i3 = 45;
       break L15;
      }
      i6 = FUNCTION_TABLE_ii[HEAP32[i19 >> 2] & 63](i27) | 0;
      FUNCTION_TABLE_vi[HEAP32[i15 >> 2] & 127](i27);
      i2 = HEAP32[i27 >> 2] | 0;
      i3 = i2 + 1 | 0;
      if ((i6 | 0) <= -1) {
       i3 = 45;
       break L15;
      }
      if ((i6 | 0) >= (i5 - i3 | 0)) {
       i3 = 45;
       break L15;
      }
      HEAP32[i27 >> 2] = i2 + (i6 + 1);
      if (HEAP32[i32 >> 2] | 0) {
       i3 = 79;
       break L15;
      }
      if (!(HEAP32[i24 >> 2] | 0)) {
       i9 = i3;
       i2 = i7;
       i1 = i8;
       break L18;
      }
     }
     FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i27);
     i8 = HEAP32[i27 >> 2] | 0;
     if (i8 >>> 0 >= i18 >>> 0) {
      i4 = 0;
      i3 = 60;
      break L15;
     }
    }
   } else {
    i8 = i1;
    while (1) {
     i1 = i8 + 3 | 0;
     L40 : do if (i1 >>> 0 < i18 >>> 0) {
      switch (HEAP8[i1 >> 0] | 0) {
      case 37:
      case 125:
      case 123:
      case 93:
      case 91:
      case 62:
      case 60:
      case 41:
      case 40:
      case 47:
      case 0:
      case 12:
      case 9:
      case 10:
      case 13:
      case 32:
       break;
      default:
       break L40;
      }
      switch (HEAP8[i8 >> 0] | 0) {
      case 100:
       {
        if ((HEAP8[i8 + 1 >> 0] | 0) != 101) break L40;
        if ((HEAP8[i8 + 2 >> 0] | 0) == 102) {
         i3 = 60;
         break L15;
        } else break L40;
       }
      case 101:
       {
        if ((HEAP8[i8 + 1 >> 0] | 0) != 110) break L40;
        if ((HEAP8[i8 + 2 >> 0] | 0) == 100) {
         i3 = 60;
         break L15;
        } else break L40;
       }
      default:
       break L40;
      }
     } while (0);
     FUNCTION_TABLE_vi[HEAP32[i15 >> 2] & 127](i27);
     i7 = HEAP32[i27 >> 2] | 0;
     if (i7 >>> 0 >= i18 >>> 0) {
      i3 = 36;
      break L15;
     }
     if (HEAP32[i32 >> 2] | 0) {
      i3 = 79;
      break L15;
     }
     if ((HEAP8[i8 >> 0] | 0) == 47) {
      if ((i8 + 2 | 0) >>> 0 >= i18 >>> 0) {
       i3 = 40;
       break L15;
      }
      i1 = HEAP32[(HEAP32[i16 >> 2] | 0) + 48 >> 2] | 0;
      i5 = HEAP32[i17 >> 2] | 0;
      FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i27);
      i2 = HEAP32[i27 >> 2] | 0;
      if (i2 >>> 0 >= i5 >>> 0) {
       i3 = 45;
       break L15;
      }
      if (((HEAPU8[i2 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
       i3 = 45;
       break L15;
      }
      i6 = FUNCTION_TABLE_ii[HEAP32[i19 >> 2] & 63](i27) | 0;
      FUNCTION_TABLE_vi[HEAP32[i15 >> 2] & 127](i27);
      i2 = HEAP32[i27 >> 2] | 0;
      i3 = i2 + 1 | 0;
      if ((i6 | 0) <= -1) {
       i3 = 45;
       break L15;
      }
      if ((i6 | 0) >= (i5 - i3 | 0)) {
       i3 = 45;
       break L15;
      }
      HEAP32[i27 >> 2] = i2 + (i6 + 1);
      if (HEAP32[i32 >> 2] | 0) {
       i3 = 79;
       break L15;
      }
      if (!(HEAP32[i24 >> 2] | 0)) {
       i9 = i3;
       i2 = i7;
       i1 = i8;
       break L18;
      }
     }
     FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i27);
     i8 = HEAP32[i27 >> 2] | 0;
     if (i8 >>> 0 >= i18 >>> 0) {
      i3 = 60;
      break L15;
     }
    }
   } while (0);
   i3 = i1 + 1 | 0;
   i2 = i2 - i3 | 0;
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i28 >> 2] & 127](i29, i4, i3, i2 + 1 | 0) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break L1;
   }
   HEAP8[(HEAP32[(HEAP32[i23 >> 2] | 0) + (i4 << 2) >> 2] | 0) + i2 >> 0] = 0;
   if ((HEAP8[i3 >> 0] | 0) == 46) {
    i5 = (_strcmp(280783, HEAP32[(HEAP32[i23 >> 2] | 0) + (i4 << 2) >> 2] | 0) | 0) == 0;
    i3 = i5 ? 1 : i10;
    i5 = i5 ? i4 : i21;
   } else {
    i3 = i10;
    i5 = i21;
   }
   i1 = HEAP32[i13 >> 2] | 0;
   if ((i4 | 0) < (i12 | 0) & (i1 | 0) > -1) {
    if (i6 >>> 0 <= i1 >>> 0) {
     i3 = 55;
     break;
    }
    i2 = _ft_mem_alloc(i20, i6, i31) | 0;
    i1 = HEAP32[i31 >> 2] | 0;
    if (i1 | 0) {
     i2 = i32;
     break L1;
    }
    _memcpy(i2 | 0, i9 | 0, i6 | 0) | 0;
    FUNCTION_TABLE_viii[HEAP32[i11 >> 2] & 31](i2, i6, 4330);
    i1 = HEAP32[i13 >> 2] | 0;
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i26 >> 2] & 127](i30, i4, i2 + i1 | 0, i6 - i1 | 0) | 0;
    HEAP32[i31 >> 2] = i1;
    _ft_mem_free(i20, i2);
    i1 = HEAP32[i31 >> 2] | 0;
   } else {
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i26 >> 2] & 127](i30, i4, i9, i6) | 0;
    HEAP32[i31 >> 2] = i1;
   }
   if (!i1) {
    i4 = i4 + 1 | 0;
    i10 = i3;
    i21 = i5;
   } else {
    i2 = i32;
    break L1;
   }
  }
  if ((i3 | 0) == 36) {
   HEAP32[i31 >> 2] = 3;
   i2 = i32;
   i1 = 3;
   break;
  } else if ((i3 | 0) == 40) {
   HEAP32[i31 >> 2] = 3;
   i2 = i32;
   i1 = 3;
   break;
  } else if ((i3 | 0) == 45) {
   if (i1 | 0) {
    STACKTOP = i33;
    return;
   }
   HEAP32[i32 >> 2] = 3;
   STACKTOP = i33;
   return;
  } else if ((i3 | 0) == 55) {
   HEAP32[i31 >> 2] = 3;
   i2 = i32;
   i1 = 3;
   break;
  } else if ((i3 | 0) == 60) {
   HEAP32[i24 >> 2] = i4;
   if (!(i10 << 24 >> 24)) {
    HEAP8[i22 >> 0] = HEAP8[280115] | 0;
    HEAP8[i22 + 1 >> 0] = HEAP8[280116] | 0;
    HEAP8[i22 + 2 >> 0] = HEAP8[280117] | 0;
    HEAP8[i22 + 3 >> 0] = HEAP8[280118] | 0;
    HEAP8[i22 + 4 >> 0] = HEAP8[280119] | 0;
    i2 = i27 + 304 | 0;
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i25, 0, HEAP32[HEAP32[i23 >> 2] >> 2] | 0, HEAP32[HEAP32[i27 + 184 >> 2] >> 2] | 0) | 0;
    HEAP32[i31 >> 2] = i1;
    if (!i1) {
     i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i25, 1, HEAP32[HEAP32[i27 + 232 >> 2] >> 2] | 0, HEAP32[HEAP32[i27 + 236 >> 2] >> 2] | 0) | 0;
     HEAP32[i31 >> 2] = i1;
     if (!i1) {
      i1 = FUNCTION_TABLE_iiiii[HEAP32[i28 >> 2] & 127](i29, 0, 280783, 8) | 0;
      HEAP32[i31 >> 2] = i1;
      if (!i1) {
       i1 = FUNCTION_TABLE_iiiii[HEAP32[i26 >> 2] & 127](i30, 0, i22, 5) | 0;
       HEAP32[i31 >> 2] = i1;
       if (!i1) {
        i3 = i27 + 284 | 0;
        i2 = i27 + 288 | 0;
        i1 = FUNCTION_TABLE_iiiii[HEAP32[i28 >> 2] & 127](i29, i4, HEAP32[HEAP32[i3 >> 2] >> 2] | 0, HEAP32[HEAP32[i2 >> 2] >> 2] | 0) | 0;
        HEAP32[i31 >> 2] = i1;
        if (!i1) {
         i1 = FUNCTION_TABLE_iiiii[HEAP32[i26 >> 2] & 127](i30, i4, HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0) | 0;
         HEAP32[i31 >> 2] = i1;
         if (!i1) {
          HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
          STACKTOP = i33;
          return;
         }
        }
       }
      }
     }
    }
    i2 = i32;
    break;
   }
   i1 = HEAP32[HEAP32[i23 >> 2] >> 2] | 0;
   if (!(_strcmp(280783, i1) | 0)) {
    STACKTOP = i33;
    return;
   }
   i5 = i27 + 304 | 0;
   i4 = i27 + 184 | 0;
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i5 >> 2] & 127](i25, 0, i1, HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break;
   }
   i2 = i27 + 232 | 0;
   i3 = i27 + 236 | 0;
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i5 >> 2] & 127](i25, 1, HEAP32[HEAP32[i2 >> 2] >> 2] | 0, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break;
   }
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i5 >> 2] & 127](i25, 2, HEAP32[(HEAP32[i23 >> 2] | 0) + (i21 << 2) >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + (i21 << 2) >> 2] | 0) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break;
   }
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i5 >> 2] & 127](i25, 3, HEAP32[(HEAP32[i2 >> 2] | 0) + (i21 << 2) >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + (i21 << 2) >> 2] | 0) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break;
   }
   i3 = i27 + 284 | 0;
   i2 = i27 + 288 | 0;
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i28 >> 2] & 127](i29, i21, HEAP32[HEAP32[i3 >> 2] >> 2] | 0, HEAP32[HEAP32[i2 >> 2] >> 2] | 0) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break;
   }
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i26 >> 2] & 127](i30, i21, HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break;
   }
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i28 >> 2] & 127](i29, 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] | 0) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break;
   }
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i26 >> 2] & 127](i30, 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] | 0) | 0;
   HEAP32[i31 >> 2] = i1;
   if (i1 | 0) {
    i2 = i32;
    break;
   }
   STACKTOP = i33;
   return;
  } else if ((i3 | 0) == 79) {
   STACKTOP = i33;
   return;
  }
 } while (0);
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i33;
 return;
}

function _FT_Outline_EmboldenXY(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0;
 i50 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i44 = i50 + 8 | 0;
 i45 = i50;
 if (!i4) {
  i49 = 20;
  STACKTOP = i50;
  return i49 | 0;
 }
 i46 = (i3 | 0) / 2 | 0;
 i47 = (i2 | 0) / 2 | 0;
 i48 = (i3 + 1 | 0) >>> 0 < 3;
 i49 = (i2 + 1 | 0) >>> 0 < 3;
 if (i48 & i49) {
  i49 = 0;
  STACKTOP = i50;
  return i49 | 0;
 }
 i1 = _FT_Outline_Get_Orientation(i4) | 0;
 if ((i1 | 0) == 2) {
  i49 = (HEAP16[i4 >> 1] | 0) == 0 ? 0 : 6;
  STACKTOP = i50;
  return i49 | 0;
 }
 i41 = HEAP32[i4 + 4 >> 2] | 0;
 i5 = HEAP16[i4 >> 1] | 0;
 if (i5 << 16 >> 16 <= 0) {
  i49 = 0;
  STACKTOP = i50;
  return i49 | 0;
 }
 i42 = i44 + 4 | 0;
 i43 = i45 + 4 | 0;
 i39 = (i1 | 0) == 0;
 i40 = i47 >> 31;
 i34 = (i2 | 0) < -1 ? 0 - i47 | 0 : i47;
 i35 = 0 - (i40 | 1) | 0;
 i36 = i34 & 65535;
 i37 = i34 >>> 16;
 i38 = i46 >> 31;
 i30 = (i3 | 0) < -1 ? 0 - i46 | 0 : i46;
 i31 = 0 - (i38 | 1) | 0;
 i32 = i30 & 65535;
 i33 = i30 >>> 16;
 i29 = HEAP32[i4 + 12 >> 2] | 0;
 i27 = i5 << 16 >> 16;
 i12 = 0;
 i24 = 0;
 while (1) {
  i28 = HEAP16[i29 + (i24 << 1) >> 1] | 0;
  i25 = HEAP32[i41 + (i12 << 3) >> 2] | 0;
  i26 = HEAP32[i41 + (i12 << 3) + 4 >> 2] | 0;
  i3 = HEAP32[i41 + (i28 << 3) + 4 >> 2] | 0;
  i1 = i25 - (HEAP32[i41 + (i28 << 3) >> 2] | 0) | 0;
  HEAP32[i44 >> 2] = i1;
  i3 = i26 - i3 | 0;
  HEAP32[i42 >> 2] = i3;
  i2 = _FT_Vector_Length(i44) | 0;
  if (!i2) i2 = 0; else {
   i8 = i1 >> 31;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i9 = (i2 | 0) < 0;
   i8 = i9 ? 0 - (i8 | 1) | 0 : i8;
   i11 = i9 ? 0 - i2 | 0 : i2;
   i10 = (i11 | 0) == 0;
   do if (i10) i1 = 2147483647; else {
    if (i1 >>> 0 <= (i11 >>> 17 ^ 65535) >>> 0) {
     i1 = (((i1 << 16) + (i11 >>> 1) | 0) >>> 0) / (i11 >>> 0) | 0;
     break;
    }
    i23 = i1 << 16;
    i5 = i23 + (i11 >>> 1) | 0;
    i1 = (i5 >>> 0 < i23 >>> 0 & 1) + (i1 >>> 16) | 0;
    if (i1 >>> 0 < i11 >>> 0) {
     i6 = Math_clz32(i1 | 0) | 0;
     i7 = 32 - i6 | 0;
     i23 = i5 >>> i7 | i1 << i6;
     i4 = (i23 >>> 0) / (i11 >>> 0) | 0;
     i1 = i4;
     i4 = i23 - (Math_imul(i4, i11) | 0) | 0;
     i6 = i5 << i6;
     while (1) {
      i4 = i4 << 1 | i6 >>> 31;
      i5 = i4 >>> 0 < i11 >>> 0;
      i1 = (i5 ^ 1) & 1 | i1 << 1;
      i7 = i7 + -1 | 0;
      if (!i7) break; else {
       i4 = i4 - (i5 ? 0 : i11) | 0;
       i6 = i6 << 1;
      }
     }
    } else i1 = 2147483647;
   } while (0);
   i8 = (i8 | 0) < 0 ? 0 - i1 | 0 : i1;
   HEAP32[i44 >> 2] = i8;
   i7 = i3 >> 31;
   i1 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
   i7 = i9 ? 0 - (i7 | 1) | 0 : i7;
   do if (i10) i1 = 2147483647; else {
    if (i1 >>> 0 <= (i11 >>> 17 ^ 65535) >>> 0) {
     i1 = (((i1 << 16) + (i11 >>> 1) | 0) >>> 0) / (i11 >>> 0) | 0;
     break;
    }
    i23 = i1 << 16;
    i4 = i23 + (i11 >>> 1) | 0;
    i1 = (i4 >>> 0 < i23 >>> 0 & 1) + (i1 >>> 16) | 0;
    if (i1 >>> 0 < i11 >>> 0) {
     i5 = Math_clz32(i1 | 0) | 0;
     i6 = 32 - i5 | 0;
     i23 = i4 >>> i6 | i1 << i5;
     i3 = (i23 >>> 0) / (i11 >>> 0) | 0;
     i1 = i3;
     i3 = i23 - (Math_imul(i3, i11) | 0) | 0;
     i5 = i4 << i5;
     while (1) {
      i3 = i3 << 1 | i5 >>> 31;
      i4 = i3 >>> 0 < i11 >>> 0;
      i1 = (i4 ^ 1) & 1 | i1 << 1;
      i6 = i6 + -1 | 0;
      if (!i6) break; else {
       i3 = i3 - (i4 ? 0 : i11) | 0;
       i5 = i5 << 1;
      }
     }
    } else i1 = 2147483647;
   } while (0);
   i3 = (i7 | 0) < 0 ? 0 - i1 | 0 : i1;
   HEAP32[i42 >> 2] = i3;
   i1 = i8;
  }
  if ((i12 | 0) <= (i28 | 0)) {
   i21 = i12;
   i22 = i25;
   i23 = i26;
   while (1) {
    i20 = (i21 | 0) < (i28 | 0);
    i17 = i21;
    i21 = i21 + 1 | 0;
    if (i20) {
     i18 = HEAP32[i41 + (i21 << 3) >> 2] | 0;
     i19 = HEAP32[i41 + (i21 << 3) + 4 >> 2] | 0;
    } else {
     i18 = i25;
     i19 = i26;
    }
    i4 = i18 - i22 | 0;
    HEAP32[i45 >> 2] = i4;
    i11 = i19 - i23 | 0;
    HEAP32[i43 >> 2] = i11;
    i16 = i2;
    i2 = _FT_Vector_Length(i45) | 0;
    if (i2) {
     i9 = i4 >> 31;
     i4 = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
     i10 = (i2 | 0) < 0;
     i9 = i10 ? 0 - (i9 | 1) | 0 : i9;
     i13 = i10 ? 0 - i2 | 0 : i2;
     i12 = (i13 | 0) == 0;
     do if (i12) i4 = 2147483647; else {
      if (i4 >>> 0 <= (i13 >>> 17 ^ 65535) >>> 0) {
       i4 = (((i4 << 16) + (i13 >>> 1) | 0) >>> 0) / (i13 >>> 0) | 0;
       break;
      }
      i15 = i4 << 16;
      i6 = i15 + (i13 >>> 1) | 0;
      i4 = (i6 >>> 0 < i15 >>> 0 & 1) + (i4 >>> 16) | 0;
      if (i4 >>> 0 < i13 >>> 0) {
       i7 = Math_clz32(i4 | 0) | 0;
       i8 = 32 - i7 | 0;
       i15 = i6 >>> i8 | i4 << i7;
       i5 = (i15 >>> 0) / (i13 >>> 0) | 0;
       i4 = i5;
       i5 = i15 - (Math_imul(i5, i13) | 0) | 0;
       i7 = i6 << i7;
       while (1) {
        i5 = i5 << 1 | i7 >>> 31;
        i6 = i5 >>> 0 < i13 >>> 0;
        i4 = (i6 ^ 1) & 1 | i4 << 1;
        i8 = i8 + -1 | 0;
        if (!i8) break; else {
         i5 = i5 - (i6 ? 0 : i13) | 0;
         i7 = i7 << 1;
        }
       }
      } else i4 = 2147483647;
     } while (0);
     i4 = (i9 | 0) < 0 ? 0 - i4 | 0 : i4;
     HEAP32[i45 >> 2] = i4;
     i15 = i11 >> 31;
     i5 = (i11 | 0) < 0 ? 0 - i11 | 0 : i11;
     i10 = i10 ? 0 - (i15 | 1) | 0 : i15;
     do if (i12) i5 = 2147483647; else {
      if (i5 >>> 0 <= (i13 >>> 17 ^ 65535) >>> 0) {
       i5 = (((i5 << 16) + (i13 >>> 1) | 0) >>> 0) / (i13 >>> 0) | 0;
       break;
      }
      i15 = i5 << 16;
      i7 = i15 + (i13 >>> 1) | 0;
      i5 = (i7 >>> 0 < i15 >>> 0 & 1) + (i5 >>> 16) | 0;
      if (i5 >>> 0 < i13 >>> 0) {
       i8 = Math_clz32(i5 | 0) | 0;
       i9 = 32 - i8 | 0;
       i15 = i7 >>> i9 | i5 << i8;
       i6 = (i15 >>> 0) / (i13 >>> 0) | 0;
       i5 = i6;
       i6 = i15 - (Math_imul(i6, i13) | 0) | 0;
       i8 = i7 << i8;
       while (1) {
        i6 = i6 << 1 | i8 >>> 31;
        i7 = i6 >>> 0 < i13 >>> 0;
        i5 = (i7 ^ 1) & 1 | i5 << 1;
        i9 = i9 + -1 | 0;
        if (!i9) break; else {
         i6 = i6 - (i7 ? 0 : i13) | 0;
         i8 = i8 << 1;
        }
       }
      } else i5 = 2147483647;
     } while (0);
     i11 = (i10 | 0) < 0 ? 0 - i5 | 0 : i5;
     HEAP32[i43 >> 2] = i11;
    }
    if ((i1 | 0) == 0 | (i4 | 0) == 65536) i9 = i1; else {
     i7 = i1 >> 31;
     i6 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
     i8 = (i4 | 0) < 0;
     i5 = i8 ? 0 - i4 | 0 : i4;
     if (((i5 >>> 8) + i6 | 0) >>> 0 < 8191) i5 = ((Math_imul(i5, i6) | 0) + 32768 | 0) >>> 16; else {
      i15 = i6 & 65535;
      i5 = (Math_imul(i5 >>> 16, i15) | 0) + (Math_imul(i6 >>> 16, i5) | 0) + (((Math_imul(i5 & 65535, i15) | 0) + 32768 | 0) >>> 16) | 0;
     }
     i9 = ((i8 ? 0 - (i7 | 1) | 0 : i7) | 0) < 0 ? 0 - i5 | 0 : i5;
    }
    if ((i3 | 0) == 0 | (i11 | 0) == 65536) i5 = i3; else {
     i7 = i3 >> 31;
     i6 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
     i8 = (i11 | 0) < 0;
     i5 = i8 ? 0 - i11 | 0 : i11;
     if (((i5 >>> 8) + i6 | 0) >>> 0 < 8191) i5 = ((Math_imul(i5, i6) | 0) + 32768 | 0) >>> 16; else {
      i15 = i6 & 65535;
      i5 = (Math_imul(i5 >>> 16, i15) | 0) + (Math_imul(i6 >>> 16, i5) | 0) + (((Math_imul(i5 & 65535, i15) | 0) + 32768 | 0) >>> 16) | 0;
     }
     i5 = ((i8 ? 0 - (i7 | 1) | 0 : i7) | 0) < 0 ? 0 - i5 | 0 : i5;
    }
    i13 = i5 + i9 | 0;
    do if ((i13 | 0) > -61440) {
     i15 = i13 + 65536 | 0;
     i12 = i11 + i3 | 0;
     i14 = i4 + i1 | 0;
     i14 = i39 ? i14 : 0 - i14 | 0;
     i12 = i39 ? 0 - i12 | 0 : i12;
     if (!((i3 | 0) == 65536 | (i4 | 0) == 0)) {
      i6 = i4 >> 31;
      i4 = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
      i5 = (i3 | 0) < 0;
      i3 = i5 ? 0 - i3 | 0 : i3;
      if ((i4 + (i3 >>> 8) | 0) >>> 0 < 8191) i3 = ((Math_imul(i4, i3) | 0) + 32768 | 0) >>> 16; else {
       i10 = i4 & 65535;
       i3 = (Math_imul(i10, i3 >>> 16) | 0) + (Math_imul(i4 >>> 16, i3) | 0) + (((Math_imul(i10, i3 & 65535) | 0) + 32768 | 0) >>> 16) | 0;
      }
      i4 = ((i5 ? 0 - (i6 | 1) | 0 : i6) | 0) < 0 ? 0 - i3 | 0 : i3;
     }
     if ((i11 | 0) == 0 | (i1 | 0) == 65536) i1 = i11; else {
      i6 = i11 >> 31;
      i3 = (i11 | 0) < 0 ? 0 - i11 | 0 : i11;
      i5 = (i1 | 0) < 0;
      i1 = i5 ? 0 - i1 | 0 : i1;
      if (((i1 >>> 8) + i3 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i3) | 0) + 32768 | 0) >>> 16; else {
       i11 = i3 & 65535;
       i1 = (Math_imul(i1 >>> 16, i11) | 0) + (Math_imul(i3 >>> 16, i1) | 0) + (((Math_imul(i1 & 65535, i11) | 0) + 32768 | 0) >>> 16) | 0;
      }
      i1 = ((i5 ? 0 - (i6 | 1) | 0 : i6) | 0) < 0 ? 0 - i1 | 0 : i1;
     }
     i10 = i4 - i1 | 0;
     i10 = i39 ? 0 - i10 | 0 : i10;
     i9 = (i16 | 0) < (i2 | 0) ? i16 : i2;
     i7 = (i10 | 0) == 65536;
     if (i48 | i7) i6 = i46; else {
      i3 = (i10 | 0) < 0;
      i1 = i3 ? 0 - i10 | 0 : i10;
      if (((i1 >>> 8) + i30 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i30) | 0) + 32768 | 0) >>> 16; else i1 = (Math_imul(i1 >>> 16, i32) | 0) + (Math_imul(i1, i33) | 0) + (((Math_imul(i1 & 65535, i32) | 0) + 32768 | 0) >>> 16) | 0;
      i6 = ((i3 ? i31 : i38) | 0) < 0 ? 0 - i1 | 0 : i1;
     }
     i8 = (i9 | 0) == 0 | (i13 | 0) == 0;
     if (i8) i1 = i9; else {
      i4 = i9 >> 31;
      i3 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
      i5 = (i13 | 0) < -65536;
      i1 = i5 ? -65536 - i13 | 0 : i15;
      if (((i1 >>> 8) + i3 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i3) | 0) + 32768 | 0) >>> 16; else {
       i16 = i3 & 65535;
       i1 = (Math_imul(i1 >>> 16, i16) | 0) + (Math_imul(i1, i3 >>> 16) | 0) + (((Math_imul(i1 & 65535, i16) | 0) + 32768 | 0) >>> 16) | 0;
      }
      i1 = ((i5 ? 0 - (i4 | 1) | 0 : i4) | 0) < 0 ? 0 - i1 | 0 : i1;
     }
     if ((i6 | 0) > (i1 | 0)) i3 = _FT_MulDiv(i12, i9, i10) | 0; else i3 = _FT_MulDiv(i12, i46, i15) | 0;
     if (i49 | i7) i7 = i47; else {
      i4 = (i10 | 0) < 0;
      i1 = i4 ? 0 - i10 | 0 : i10;
      if (((i1 >>> 8) + i34 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i34) | 0) + 32768 | 0) >>> 16; else i1 = (Math_imul(i1 >>> 16, i36) | 0) + (Math_imul(i1, i37) | 0) + (((Math_imul(i1 & 65535, i36) | 0) + 32768 | 0) >>> 16) | 0;
      i7 = ((i4 ? i35 : i40) | 0) < 0 ? 0 - i1 | 0 : i1;
     }
     if (i8) i1 = i9; else {
      i5 = i9 >> 31;
      i4 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
      i6 = (i13 | 0) < -65536;
      i1 = i6 ? -65536 - i13 | 0 : i15;
      if (((i1 >>> 8) + i4 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i4) | 0) + 32768 | 0) >>> 16; else {
       i16 = i4 & 65535;
       i1 = (Math_imul(i1 >>> 16, i16) | 0) + (Math_imul(i1, i4 >>> 16) | 0) + (((Math_imul(i1 & 65535, i16) | 0) + 32768 | 0) >>> 16) | 0;
      }
      i1 = ((i6 ? 0 - (i5 | 1) | 0 : i5) | 0) < 0 ? 0 - i1 | 0 : i1;
     }
     if ((i7 | 0) > (i1 | 0)) {
      i1 = _FT_MulDiv(i14, i9, i10) | 0;
      break;
     } else {
      i1 = _FT_MulDiv(i14, i47, i15) | 0;
      break;
     }
    } else {
     i3 = 0;
     i1 = 0;
    } while (0);
    HEAP32[i41 + (i17 << 3) >> 2] = i22 + i46 + i3;
    HEAP32[i41 + (i17 << 3) + 4 >> 2] = i23 + i47 + i1;
    i3 = i45;
    i1 = HEAP32[i3 >> 2] | 0;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    i23 = i44;
    HEAP32[i23 >> 2] = i1;
    HEAP32[i23 + 4 >> 2] = i3;
    if (!i20) break; else {
     i22 = i18;
     i23 = i19;
    }
   }
  }
  i24 = i24 + 1 | 0;
  if ((i24 | 0) >= (i27 | 0)) {
   i1 = 0;
   break;
  } else i12 = i28 + 1 | 0;
 }
 STACKTOP = i50;
 return i1 | 0;
}

function _gray_render_line(i38, i39, i43) {
 i38 = i38 | 0;
 i39 = i39 | 0;
 i43 = i43 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i40 = 0, i41 = 0, i42 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0;
 i44 = i38 + 228 | 0;
 i4 = HEAP32[i44 >> 2] | 0;
 i5 = i4 >> 8;
 i45 = i43 >> 8;
 i46 = i38 + 224 | 0;
 i2 = HEAP32[i46 >> 2] | 0;
 i4 = i2 - i4 | 0;
 i40 = i45 << 8;
 i41 = i43 - i40 | 0;
 i42 = i38 + 220 | 0;
 i3 = HEAP32[i42 >> 2] | 0;
 i13 = i39 - i3 | 0;
 i2 = i43 - i2 | 0;
 i1 = (i5 | 0) > (i45 | 0);
 if (((i1 ? i45 : i5) | 0) >= (HEAP32[i38 + 176 >> 2] | 0)) {
  HEAP32[i42 >> 2] = i39;
  HEAP32[i46 >> 2] = i43;
  HEAP32[i44 >> 2] = i40;
  return;
 }
 i37 = i38 + 172 | 0;
 i30 = HEAP32[i37 >> 2] | 0;
 if (((i1 ? i5 : i45) | 0) < (i30 | 0)) {
  HEAP32[i42 >> 2] = i39;
  HEAP32[i46 >> 2] = i43;
  HEAP32[i44 >> 2] = i40;
  return;
 }
 if ((i5 | 0) == (i45 | 0)) {
  _gray_render_scanline(i38, i5, i3, i4, i39, i41);
  HEAP32[i42 >> 2] = i39;
  HEAP32[i46 >> 2] = i43;
  HEAP32[i44 >> 2] = i40;
  return;
 }
 i1 = (i2 | 0) < 0;
 if (!i13) {
  i21 = i3 >> 8;
  i27 = i3 - (i21 << 8) << 1;
  i26 = i2 >> 31;
  i25 = i26 + 256 & -256;
  i26 = i26 | 1;
  i7 = i25 - i4 | 0;
  i6 = Math_imul(i27, i7) | 0;
  i23 = i38 + 188 | 0;
  i6 = (HEAP32[i23 >> 2] | 0) + i6 | 0;
  HEAP32[i23 >> 2] = i6;
  i24 = i38 + 192 | 0;
  i7 = (HEAP32[i24 >> 2] | 0) + i7 | 0;
  HEAP32[i24 >> 2] = i7;
  i9 = i26 + i5 | 0;
  i10 = i9 - i30 | 0;
  i22 = HEAP32[i38 + 168 >> 2] | 0;
  i21 = ((i22 | 0) < (i21 | 0) ? i22 : i21) - (HEAP32[i38 + 164 >> 2] | 0) | 0;
  i21 = (i21 | 0) > -1 ? i21 : -1;
  i22 = i38 + 156 | 0;
  i1 = HEAP32[i22 >> 2] | 0;
  if ((i21 | 0) == (i1 | 0)) if ((i10 | 0) == (HEAP32[i38 + 160 >> 2] | 0)) {
   i2 = i6;
   i3 = i7;
  } else i47 = 8; else i47 = 8;
  if ((i47 | 0) == 8) {
   if (!((HEAP32[i38 + 196 >> 2] | 0) != 0 | (i7 | i6 | 0) == 0)) {
    i5 = HEAP32[i38 + 180 >> 2] | 0;
    i5 = (i1 | 0) > (i5 | 0) ? i5 : i1;
    i1 = (HEAP32[i38 + 1420 >> 2] | 0) + (HEAP32[i38 + 160 >> 2] << 2) | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    L19 : do if (!i2) {
     i2 = 0;
     i47 = 13;
    } else while (1) {
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) > (i5 | 0)) {
      i47 = 13;
      break L19;
     }
     if ((i3 | 0) == (i5 | 0)) {
      i8 = i2;
      break L19;
     }
     i1 = i2 + 12 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     if (!i2) {
      i2 = 0;
      i47 = 13;
      break;
     }
    } while (0);
    do if ((i47 | 0) == 13) {
     i3 = i38 + 208 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if ((i4 | 0) < (HEAP32[i38 + 204 >> 2] | 0)) {
      i37 = HEAP32[i38 + 200 >> 2] | 0;
      HEAP32[i3 >> 2] = i4 + 1;
      i8 = i37 + (i4 << 4) | 0;
      HEAP32[i8 >> 2] = i5;
      HEAP32[i37 + (i4 << 4) + 8 >> 2] = 0;
      HEAP32[i37 + (i4 << 4) + 4 >> 2] = 0;
      HEAP32[i37 + (i4 << 4) + 12 >> 2] = i2;
      HEAP32[i1 >> 2] = i8;
      break;
     } else _longjmp(i38 | 0, 1);
    } while (0);
    i37 = i8 + 8 | 0;
    HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + i6;
    i37 = i8 + 4 | 0;
    HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + i7;
   }
   HEAP32[i23 >> 2] = 0;
   HEAP32[i24 >> 2] = 0;
   HEAP32[i22 >> 2] = i21;
   HEAP32[i38 + 160 >> 2] = i10;
   i2 = 0;
   i3 = 0;
  }
  i20 = HEAP32[i38 + 184 >> 2] | 0;
  if (i10 >>> 0 < i20 >>> 0) i1 = (i21 | 0) >= (HEAP32[i38 + 180 >> 2] | 0); else i1 = 1;
  i1 = i1 & 1;
  i11 = i38 + 196 | 0;
  HEAP32[i11 >> 2] = i1;
  i12 = (i25 << 1) + -256 | 0;
  i13 = Math_imul(i12, i27) | 0;
  do if ((i9 | 0) == (i45 | 0)) {
   i28 = i2;
   i29 = i3;
  } else {
   i14 = i38 + 160 | 0;
   i15 = i38 + 180 | 0;
   i16 = i38 + 1420 | 0;
   i17 = i38 + 208 | 0;
   i18 = i38 + 204 | 0;
   i19 = i38 + 200 | 0;
   i8 = i10;
   i4 = i10;
   while (1) {
    i6 = i2 + i13 | 0;
    i7 = i3 + i12 | 0;
    i9 = i9 + i26 | 0;
    i37 = i8;
    i8 = i9 - i30 | 0;
    if ((i8 | 0) == (i37 | 0)) {
     i2 = i6;
     i3 = i7;
    } else {
     if (!((i1 | 0) != 0 | (i7 | i6 | 0) == 0)) {
      i5 = HEAP32[i15 >> 2] | 0;
      i5 = (i21 | 0) > (i5 | 0) ? i5 : i21;
      i2 = (HEAP32[i16 >> 2] | 0) + (i4 << 2) | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      L43 : do if (!i1) {
       i1 = 0;
       i47 = 28;
      } else while (1) {
       i3 = HEAP32[i1 >> 2] | 0;
       if ((i3 | 0) > (i5 | 0)) {
        i47 = 28;
        break L43;
       }
       if ((i3 | 0) == (i5 | 0)) break L43;
       i2 = i1 + 12 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i1 = 0;
        i47 = 28;
        break;
       }
      } while (0);
      if ((i47 | 0) == 28) {
       i47 = 0;
       i3 = HEAP32[i17 >> 2] | 0;
       if ((i3 | 0) >= (HEAP32[i18 >> 2] | 0)) {
        i47 = 29;
        break;
       }
       i36 = HEAP32[i19 >> 2] | 0;
       HEAP32[i17 >> 2] = i3 + 1;
       i37 = i36 + (i3 << 4) | 0;
       HEAP32[i37 >> 2] = i5;
       HEAP32[i36 + (i3 << 4) + 8 >> 2] = 0;
       HEAP32[i36 + (i3 << 4) + 4 >> 2] = 0;
       HEAP32[i36 + (i3 << 4) + 12 >> 2] = i1;
       HEAP32[i2 >> 2] = i37;
       i1 = i37;
      }
      i37 = i1 + 8 | 0;
      HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + i6;
      i37 = i1 + 4 | 0;
      HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + i7;
     }
     HEAP32[i22 >> 2] = i21;
     HEAP32[i14 >> 2] = i8;
     i2 = 0;
     i3 = 0;
     i4 = i8;
    }
    if (i8 >>> 0 < i20 >>> 0) i1 = (i21 | 0) >= (HEAP32[i15 >> 2] | 0); else i1 = 1;
    i1 = i1 & 1;
    HEAP32[i11 >> 2] = i1;
    if ((i9 | 0) == (i45 | 0)) {
     i47 = 36;
     break;
    }
   }
   if ((i47 | 0) == 29) {
    HEAP32[i23 >> 2] = i6;
    HEAP32[i24 >> 2] = i7;
    _longjmp(i38 | 0, 1);
   } else if ((i47 | 0) == 36) {
    HEAP32[i23 >> 2] = i2;
    HEAP32[i24 >> 2] = i3;
    i28 = i2;
    i29 = i3;
    break;
   }
  } while (0);
  i47 = i41 + -256 + i25 | 0;
  i45 = i28 + (Math_imul(i27, i47) | 0) | 0;
  HEAP32[i23 >> 2] = i45;
  HEAP32[i24 >> 2] = i29 + i47;
  HEAP32[i42 >> 2] = i39;
  HEAP32[i46 >> 2] = i43;
  HEAP32[i44 >> 2] = i40;
  return;
 }
 i34 = i2 >> 31;
 i33 = i34 + 256 & -256;
 i34 = i34 | 1;
 i32 = i1 ? 0 - i2 | 0 : i2;
 i25 = Math_imul(i1 ? i4 : 256 - i4 | 0, i13) | 0;
 i27 = (i25 | 0) % (i32 | 0) | 0;
 i28 = (i27 | 0) < 0 ? i32 : 0;
 i25 = ((i25 | 0) / (i32 | 0) | 0) + i3 + (i27 >> 31) | 0;
 _gray_render_scanline(i38, i5, i3, i4, i25, i33);
 i24 = i34 + i5 | 0;
 i10 = i25 >> 8;
 i11 = i24 - (HEAP32[i37 >> 2] | 0) | 0;
 i29 = i38 + 168 | 0;
 i31 = HEAP32[i29 >> 2] | 0;
 i30 = i38 + 164 | 0;
 i10 = ((i31 | 0) < (i10 | 0) ? i31 : i10) - (HEAP32[i30 >> 2] | 0) | 0;
 i10 = (i10 | 0) > -1 ? i10 : -1;
 i31 = i38 + 156 | 0;
 i2 = HEAP32[i31 >> 2] | 0;
 if ((i10 | 0) == (i2 | 0)) {
  if ((i11 | 0) != (HEAP32[i38 + 160 >> 2] | 0)) i47 = 40;
 } else i47 = 40;
 if ((i47 | 0) == 40) {
  i9 = i38 + 188 | 0;
  if (!(HEAP32[i38 + 196 >> 2] | 0)) {
   i7 = HEAP32[i9 >> 2] | 0;
   i1 = i38 + 192 | 0;
   i8 = HEAP32[i1 >> 2] | 0;
   if (i8 | i7) {
    i6 = HEAP32[i38 + 180 >> 2] | 0;
    i6 = (i2 | 0) > (i6 | 0) ? i6 : i2;
    i2 = (HEAP32[i38 + 1420 >> 2] | 0) + (HEAP32[i38 + 160 >> 2] << 2) | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    L70 : do if (!i3) {
     i3 = 0;
     i47 = 47;
    } else while (1) {
     i4 = HEAP32[i3 >> 2] | 0;
     if ((i4 | 0) > (i6 | 0)) {
      i47 = 47;
      break L70;
     }
     if ((i4 | 0) == (i6 | 0)) {
      i12 = i3;
      break L70;
     }
     i2 = i3 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if (!i3) {
      i3 = 0;
      i47 = 47;
      break;
     }
    } while (0);
    do if ((i47 | 0) == 47) {
     i4 = i38 + 208 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) < (HEAP32[i38 + 204 >> 2] | 0)) {
      i26 = HEAP32[i38 + 200 >> 2] | 0;
      HEAP32[i4 >> 2] = i5 + 1;
      i12 = i26 + (i5 << 4) | 0;
      HEAP32[i12 >> 2] = i6;
      HEAP32[i26 + (i5 << 4) + 8 >> 2] = 0;
      HEAP32[i26 + (i5 << 4) + 4 >> 2] = 0;
      HEAP32[i26 + (i5 << 4) + 12 >> 2] = i3;
      HEAP32[i2 >> 2] = i12;
      break;
     } else _longjmp(i38 | 0, 1);
    } while (0);
    i26 = i12 + 8 | 0;
    HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + i7;
    i26 = i12 + 4 | 0;
    HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + i8;
   }
  } else i1 = i38 + 192 | 0;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i31 >> 2] = i10;
  HEAP32[i38 + 160 >> 2] = i11;
 }
 i26 = i38 + 184 | 0;
 if (i11 >>> 0 < (HEAP32[i26 >> 2] | 0) >>> 0) i1 = (i10 | 0) >= (HEAP32[i38 + 180 >> 2] | 0); else i1 = 1;
 i23 = i38 + 196 | 0;
 HEAP32[i23 >> 2] = i1 & 1;
 L87 : do if ((i24 | 0) == (i45 | 0)) {
  i35 = i25;
  i36 = 256 - i33 | 0;
 } else {
  i12 = i13 << 8;
  i14 = (i12 | 0) % (i32 | 0) | 0;
  i13 = ((i14 | 0) < 0 ? i32 : 0) + i14 | 0;
  i12 = (i14 >> 31) + ((i12 | 0) / (i32 | 0) | 0) | 0;
  i14 = 256 - i33 | 0;
  i15 = i38 + 160 | 0;
  i16 = i38 + 180 | 0;
  i17 = i38 + 188 | 0;
  i18 = i38 + 192 | 0;
  i19 = i38 + 1420 | 0;
  i20 = i38 + 208 | 0;
  i21 = i38 + 204 | 0;
  i22 = i38 + 200 | 0;
  i1 = i25;
  i11 = i27 - i32 + i28 | 0;
  i9 = i24;
  while (1) {
   i10 = i13 + i11 | 0;
   i11 = i10 - ((i10 | 0) > -1 ? i32 : 0) | 0;
   i10 = i12 + i1 + (i10 >>> 31 ^ 1) | 0;
   _gray_render_scanline(i38, i9, i1, i14, i10, i33);
   i9 = i9 + i34 | 0;
   i5 = i10 >> 8;
   i6 = i9 - (HEAP32[i37 >> 2] | 0) | 0;
   i1 = HEAP32[i29 >> 2] | 0;
   i5 = ((i1 | 0) < (i5 | 0) ? i1 : i5) - (HEAP32[i30 >> 2] | 0) | 0;
   i5 = (i5 | 0) > -1 ? i5 : -1;
   i1 = HEAP32[i31 >> 2] | 0;
   if ((i5 | 0) == (i1 | 0)) {
    if ((i6 | 0) != (HEAP32[i15 >> 2] | 0)) i47 = 59;
   } else i47 = 59;
   if ((i47 | 0) == 59) {
    i47 = 0;
    if (!(HEAP32[i23 >> 2] | 0)) {
     i7 = HEAP32[i17 >> 2] | 0;
     i8 = HEAP32[i18 >> 2] | 0;
     if (i8 | i7 | 0) {
      i4 = HEAP32[i16 >> 2] | 0;
      i4 = (i1 | 0) > (i4 | 0) ? i4 : i1;
      i2 = (HEAP32[i19 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      L99 : do if (!i1) {
       i1 = 0;
       i47 = 65;
      } else while (1) {
       i3 = HEAP32[i1 >> 2] | 0;
       if ((i3 | 0) > (i4 | 0)) {
        i47 = 65;
        break L99;
       }
       if ((i3 | 0) == (i4 | 0)) break L99;
       i2 = i1 + 12 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i1 = 0;
        i47 = 65;
        break;
       }
      } while (0);
      if ((i47 | 0) == 65) {
       i47 = 0;
       i3 = HEAP32[i20 >> 2] | 0;
       if ((i3 | 0) >= (HEAP32[i21 >> 2] | 0)) break;
       i27 = HEAP32[i22 >> 2] | 0;
       HEAP32[i20 >> 2] = i3 + 1;
       i28 = i27 + (i3 << 4) | 0;
       HEAP32[i28 >> 2] = i4;
       HEAP32[i27 + (i3 << 4) + 8 >> 2] = 0;
       HEAP32[i27 + (i3 << 4) + 4 >> 2] = 0;
       HEAP32[i27 + (i3 << 4) + 12 >> 2] = i1;
       HEAP32[i2 >> 2] = i28;
       i1 = i28;
      }
      i28 = i1 + 8 | 0;
      HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + i7;
      i28 = i1 + 4 | 0;
      HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + i8;
     }
    }
    HEAP32[i17 >> 2] = 0;
    HEAP32[i18 >> 2] = 0;
    HEAP32[i31 >> 2] = i5;
    HEAP32[i15 >> 2] = i6;
   }
   if (i6 >>> 0 < (HEAP32[i26 >> 2] | 0) >>> 0) i1 = (i5 | 0) >= (HEAP32[i16 >> 2] | 0); else i1 = 1;
   HEAP32[i23 >> 2] = i1 & 1;
   if ((i9 | 0) == (i45 | 0)) {
    i35 = i10;
    i36 = i14;
    break L87;
   } else i1 = i10;
  }
  _longjmp(i38 | 0, 1);
 } while (0);
 _gray_render_scanline(i38, i45, i35, i36, i39, i41);
 HEAP32[i42 >> 2] = i39;
 HEAP32[i46 >> 2] = i43;
 HEAP32[i44 >> 2] = i40;
 return;
}

function _IsMacResource(i24, i23, i1, i5, i26) {
 i24 = i24 | 0;
 i23 = i23 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i26 = i26 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i25 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i21 = i28 + 16 | 0;
 i2 = i28 + 12 | 0;
 i3 = i28 + 8 | 0;
 i27 = i28 + 4 | 0;
 i4 = i28;
 i25 = HEAP32[i24 >> 2] | 0;
 i1 = _FT_Raccess_Get_HeaderInfo(0, i23, i1, i2, i3) | 0;
 if (i1 | 0) {
  i27 = i1;
  STACKTOP = i28;
  return i27 | 0;
 }
 i2 = HEAP32[i2 >> 2] | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (_FT_Raccess_Get_DataOffsets(i24, i23, i2, i1, 1347375956, 1, i27, i4) | 0) {
  i1 = _FT_Raccess_Get_DataOffsets(i24, i23, i2, i1, 1936092788, 0, i27, i4) | 0;
  if (i1 | 0) {
   i27 = i1;
   STACKTOP = i28;
   return i27 | 0;
  }
  i11 = HEAP32[i4 >> 2] | 0;
  i4 = (i5 | 0) % (i11 | 0) | 0;
  i7 = HEAP32[i24 >> 2] | 0;
  i4 = (i4 | 0) == -1 ? 0 : i4;
  L9 : do if ((i4 | 0) < (i11 | 0)) {
   i1 = HEAP32[i27 >> 2] | 0;
   i5 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   i10 = i23 + 20 | 0;
   i2 = HEAP32[i10 >> 2] | 0;
   if (!i2) {
    i2 = i23 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (i3 >>> 0 < i5 >>> 0) {
     i2 = 85;
     break;
    } else i8 = i2;
   } else {
    if (FUNCTION_TABLE_iiiii[i2 & 127](i23, i5, 0, 0) | 0) {
     i2 = 85;
     break;
    }
    i3 = i23 + 4 | 0;
    i8 = i3;
    i3 = HEAP32[i3 >> 2] | 0;
   }
   i9 = i23 + 8 | 0;
   HEAP32[i9 >> 2] = i5;
   do if ((i5 + 3 | 0) >>> 0 < i3 >>> 0) {
    i2 = HEAP32[i10 >> 2] | 0;
    if (!i2) {
     i2 = (HEAP32[i23 >> 2] | 0) + i5 | 0;
     if (!i2) {
      HEAP32[i9 >> 2] = i5 + 4;
      i6 = 0;
     } else {
      i3 = i5;
      i22 = 82;
     }
    } else {
     if ((FUNCTION_TABLE_iiiii[i2 & 127](i23, i5, i21, 4) | 0) != 4) break;
     i2 = i21;
     i3 = HEAP32[i9 >> 2] | 0;
     i22 = 82;
    }
    if ((i22 | 0) == 82) {
     i2 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
     HEAP32[i9 >> 2] = i3 + 4;
     if ((i2 | 0) == -1) {
      i2 = 1;
      break L9;
     } else i6 = i2;
    }
    i2 = _open_face_PS_from_sfnt_stream(i24, i23, i4, i26) | 0;
    if (!i2) {
     i2 = 0;
     break L9;
    }
    i4 = i5 + 4 | 0;
    i3 = HEAP32[i10 >> 2] | 0;
    if (!i3) {
     if ((HEAP32[i8 >> 2] | 0) >>> 0 < i4 >>> 0) break L9;
    } else if (FUNCTION_TABLE_iiiii[i3 & 127](i23, i4, 0, 0) | 0) break L9;
    HEAP32[i9 >> 2] = i4;
    if ((i6 | 0) > 0) {
     i2 = FUNCTION_TABLE_iii[HEAP32[i7 + 4 >> 2] & 255](i7, i6) | 0;
     if (!i2) {
      i2 = 64;
      break L9;
     }
     _memset(i2 | 0, 0, i6 | 0) | 0;
     i5 = i2;
     i4 = HEAP32[i9 >> 2] | 0;
    } else if (!i6) i5 = 0; else {
     i2 = 6;
     break L9;
    }
    i3 = HEAP32[i8 >> 2] | 0;
    if (i3 >>> 0 <= i4 >>> 0) {
     i2 = 85;
     break L9;
    }
    i2 = HEAP32[i10 >> 2] | 0;
    if (!i2) {
     i2 = i3 - i4 | 0;
     i2 = i2 >>> 0 > i6 >>> 0 ? i6 : i2;
     _memcpy(i5 | 0, (HEAP32[i23 >> 2] | 0) + i4 | 0, i2 | 0) | 0;
    } else i2 = FUNCTION_TABLE_iiiii[i2 & 127](i23, i4, i5, i6) | 0;
    HEAP32[i9 >> 2] = i2 + i4;
    if (i2 >>> 0 < i6 >>> 0) {
     i2 = 85;
     break L9;
    }
    if ((i6 | 0) > 4) {
     i2 = (_memcmp(i5, 280874, 4) | 0) != 0;
     i2 = i2 ? 280791 : 280879;
    } else i2 = 280791;
    i2 = _open_face_from_buffer(i24, i5, i6, 0, i2, i26) | 0;
    break L9;
   } while (0);
   i2 = 85;
  } else {
   i2 = 1;
   i1 = HEAP32[i27 >> 2] | 0;
  } while (0);
  if (i1 | 0) FUNCTION_TABLE_vii[HEAP32[i25 + 8 >> 2] & 63](i25, i1);
  HEAP32[i27 >> 2] = 0;
  if (i2 | 0) {
   i27 = i2;
   STACKTOP = i28;
   return i27 | 0;
  }
  HEAP32[HEAP32[i26 >> 2] >> 2] = i11;
  i27 = 0;
  STACKTOP = i28;
  return i27 | 0;
 }
 i20 = HEAP32[i27 >> 2] | 0;
 i18 = HEAP32[i4 >> 2] | 0;
 i19 = HEAP32[i24 >> 2] | 0;
 L56 : do switch (i5 | 0) {
 case 0:
 case -1:
  {
   i7 = (i18 | 0) > 0;
   if (i7) {
    i4 = i23 + 20 | 0;
    i5 = i23 + 4 | 0;
    i6 = i23 + 8 | 0;
    i17 = 0;
    i3 = 0;
    do {
     i2 = HEAP32[i20 + (i3 << 2) >> 2] | 0;
     i1 = HEAP32[i4 >> 2] | 0;
     if (!i1) {
      i1 = HEAP32[i5 >> 2] | 0;
      if (i1 >>> 0 < i2 >>> 0) {
       i1 = 85;
       i22 = 65;
       break L56;
      }
     } else {
      if (FUNCTION_TABLE_iiiii[i1 & 127](i23, i2, 0, 0) | 0) {
       i1 = 85;
       i22 = 64;
       break L56;
      }
      i1 = HEAP32[i5 >> 2] | 0;
     }
     HEAP32[i6 >> 2] = i2;
     if ((i2 + 3 | 0) >>> 0 >= i1 >>> 0) {
      i22 = 16;
      break;
     }
     i1 = HEAP32[i4 >> 2] | 0;
     if (!i1) {
      i1 = (HEAP32[i23 >> 2] | 0) + i2 | 0;
      if (!i1) {
       HEAP32[i6 >> 2] = i2 + 4;
       i1 = 0;
      } else i22 = 17;
     } else {
      if ((FUNCTION_TABLE_iiiii[i1 & 127](i23, i2, i21, 4) | 0) != 4) {
       i22 = 16;
       break;
      }
      i1 = i21;
      i2 = HEAP32[i6 >> 2] | 0;
      i22 = 17;
     }
     if ((i22 | 0) == 17) {
      i22 = 0;
      i1 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
      HEAP32[i6 >> 2] = i2 + 4;
      if ((i1 | 0) < 0) {
       i1 = 9;
       i22 = 64;
       break L56;
      }
     }
     i16 = i17;
     i17 = i17 + 6 + i1 | 0;
     if (i17 >>> 0 < i16 >>> 0) {
      i1 = 9;
      i22 = 64;
      break L56;
     }
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) < (i18 | 0));
    if ((i22 | 0) == 16) {
     i1 = 85;
     i22 = 64;
     break L56;
    }
    i15 = i17 + 2 | 0;
    if (i15 >>> 0 < 6) {
     i1 = 10;
     i22 = 64;
    } else if ((i15 | 0) > 0) {
     i16 = FUNCTION_TABLE_iii[HEAP32[i19 + 4 >> 2] & 255](i19, i15) | 0;
     if (!i16) {
      i1 = 64;
      i22 = 64;
     } else {
      _memset(i16 | 0, 0, i15 | 0) | 0;
      HEAP8[i16 >> 0] = -128;
      HEAP8[i16 + 1 >> 0] = 1;
      i14 = i16 + 2 | 0;
      HEAP8[i14 >> 0] = 0;
      HEAP8[i14 + 1 >> 0] = 0;
      HEAP8[i14 + 2 >> 0] = 0;
      HEAP8[i14 + 3 >> 0] = 0;
      L82 : do if (i7) {
       i12 = i23 + 20 | 0;
       i13 = i23 + 4 | 0;
       i14 = i23 + 8 | 0;
       i4 = 2;
       i1 = 6;
       i3 = 0;
       i10 = 1;
       i11 = 0;
       while (1) {
        i5 = HEAP32[i20 + (i11 << 2) >> 2] | 0;
        i2 = HEAP32[i12 >> 2] | 0;
        if (!i2) {
         i2 = HEAP32[i13 >> 2] | 0;
         if (i2 >>> 0 < i5 >>> 0) break L82;
        } else {
         if (FUNCTION_TABLE_iiiii[i2 & 127](i23, i5, 0, 0) | 0) break L82;
         i2 = HEAP32[i13 >> 2] | 0;
        }
        HEAP32[i14 >> 2] = i5;
        if ((i5 + 3 | 0) >>> 0 >= i2 >>> 0) {
         i22 = 35;
         break;
        }
        i6 = HEAP32[i12 >> 2] | 0;
        if (!i6) {
         i6 = (HEAP32[i23 >> 2] | 0) + i5 | 0;
         if (!i6) {
          i5 = i5 + 4 | 0;
          HEAP32[i14 >> 2] = i5;
          i8 = 0;
         } else {
          i2 = i6;
          i22 = 36;
         }
        } else {
         if ((FUNCTION_TABLE_iiiii[i6 & 127](i23, i5, i21, 4) | 0) != 4) {
          i22 = 35;
          break;
         }
         i2 = i21;
         i5 = HEAP32[i14 >> 2] | 0;
         i22 = 36;
        }
        if ((i22 | 0) == 36) {
         i22 = 0;
         i2 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
         i5 = i5 + 4 | 0;
         HEAP32[i14 >> 2] = i5;
         if ((i2 | 0) < 0) break L82;
         i8 = i2;
         i2 = HEAP32[i13 >> 2] | 0;
        }
        if ((i5 + 1 | 0) >>> 0 >= i2 >>> 0) {
         i22 = 44;
         break;
        }
        i2 = HEAP32[i12 >> 2] | 0;
        if (!i2) {
         i2 = (HEAP32[i23 >> 2] | 0) + i5 | 0;
         if (!i2) {
          HEAP32[i14 >> 2] = i5 + 2;
          i2 = i10;
         } else i22 = 45;
        } else {
         if ((FUNCTION_TABLE_iiiii[i2 & 127](i23, i5, i21, 2) | 0) != 2) {
          i22 = 44;
          break;
         }
         i2 = i21;
         i5 = HEAP32[i14 >> 2] | 0;
         i22 = 45;
        }
        if ((i22 | 0) == 45) {
         i22 = 0;
         i6 = HEAP8[i2 >> 0] | 0;
         i7 = i6 & 255;
         HEAP32[i14 >> 2] = i5 + 2;
         if (!(i6 << 24 >> 24)) i2 = i10; else {
          i9 = i8 >>> 0 > 2 ? i8 + -2 | 0 : 0;
          if ((i7 | 0) == (i10 | 0)) {
           i3 = i9 + i3 | 0;
           i2 = i10;
          } else {
           i2 = i4 + 3 | 0;
           if (i2 >>> 0 > i15 >>> 0) break L82;
           HEAP8[i16 + i4 >> 0] = i3;
           HEAP8[i16 + (i4 + 1) >> 0] = i3 >>> 8;
           HEAP8[i16 + (i4 + 2) >> 0] = i3 >>> 16;
           HEAP8[i16 + i2 >> 0] = i3 >>> 24;
           if (i6 << 24 >> 24 == 5) {
            i22 = 60;
            break L82;
           }
           i2 = i1 + 6 | 0;
           if (i2 >>> 0 > i15 >>> 0) break L82;
           HEAP8[i16 + i1 >> 0] = -128;
           i4 = i1 + 2 | 0;
           HEAP8[i16 + (i1 + 1) >> 0] = i6;
           HEAP8[i16 + i4 >> 0] = 0;
           HEAP8[i16 + (i1 + 3) >> 0] = 0;
           HEAP8[i16 + (i1 + 4) >> 0] = 0;
           HEAP8[i16 + (i1 + 5) >> 0] = 0;
           i1 = i2;
           i3 = i9;
           i2 = i7;
          }
          if (i1 >>> 0 > i17 >>> 0) break L82;
          i8 = i1 + i9 | 0;
          if (i8 >>> 0 > i17 >>> 0) break L82;
          i1 = i16 + i1 | 0;
          i7 = HEAP32[i14 >> 2] | 0;
          i5 = HEAP32[i13 >> 2] | 0;
          if (i5 >>> 0 <= i7 >>> 0) break L82;
          i6 = HEAP32[i12 >> 2] | 0;
          if (!i6) {
           i10 = i5 - i7 | 0;
           i10 = i10 >>> 0 > i9 >>> 0 ? i9 : i10;
           _memcpy(i1 | 0, (HEAP32[i23 >> 2] | 0) + i7 | 0, i10 | 0) | 0;
           i1 = i10;
          } else i1 = FUNCTION_TABLE_iiiii[i6 & 127](i23, i7, i1, i9) | 0;
          HEAP32[i14 >> 2] = i1 + i7;
          if (i1 >>> 0 < i9 >>> 0) break L82; else i1 = i8;
         }
        }
        i11 = i11 + 1 | 0;
        if ((i11 | 0) >= (i18 | 0)) {
         i22 = 60;
         break L82;
        } else i10 = i2;
       }
       if ((i22 | 0) == 35) break; else if ((i22 | 0) == 44) break;
      } else {
       i4 = 2;
       i1 = 6;
       i3 = 0;
       i22 = 60;
      } while (0);
      if ((i22 | 0) == 60) {
       i2 = i1 + 2 | 0;
       if (i2 >>> 0 <= i15 >>> 0) {
        HEAP8[i16 + i1 >> 0] = -128;
        HEAP8[i16 + (i1 + 1) >> 0] = 3;
        i1 = i4 + 3 | 0;
        if (i1 >>> 0 <= i15 >>> 0) {
         HEAP8[i16 + i4 >> 0] = i3;
         HEAP8[i16 + (i4 + 1) >> 0] = i3 >>> 8;
         HEAP8[i16 + (i4 + 2) >> 0] = i3 >>> 16;
         HEAP8[i16 + i1 >> 0] = i3 >>> 24;
         i1 = _open_face_from_buffer(i24, i16, i2, 0, 280868, i26) | 0;
         i22 = 64;
         break L56;
        }
       }
      }
      FUNCTION_TABLE_vii[HEAP32[i19 + 8 >> 2] & 63](i19, i16);
      i1 = 1;
      i22 = 64;
     }
    } else {
     i1 = 6;
     i22 = 64;
    }
   } else {
    i1 = 10;
    i22 = 64;
   }
   break;
  }
 default:
  {
   i1 = 1;
   i22 = 64;
  }
 } while (0);
 if ((i22 | 0) == 64) if (i20) i22 = 65;
 if ((i22 | 0) == 65) FUNCTION_TABLE_vii[HEAP32[i25 + 8 >> 2] & 63](i25, i20);
 HEAP32[i27 >> 2] = 0;
 if (i1 | 0) {
  i27 = i1;
  STACKTOP = i28;
  return i27 | 0;
 }
 HEAP32[HEAP32[i26 >> 2] >> 2] = 1;
 i27 = 0;
 STACKTOP = i28;
 return i27 | 0;
}

function _tt_face_init(i1, i19, i4, i5, i6) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i17 = i20 + 8 | 0;
 i18 = i20;
 i3 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i19 + 96 >> 2] | 0) + 4 >> 2] | 0, 283071) | 0;
 if (!i3) {
  i19 = 11;
  STACKTOP = i20;
  return i19 | 0;
 }
 i2 = _FT_Stream_Seek(i1, 0) | 0;
 if (i2 | 0) {
  i19 = i2;
  STACKTOP = i20;
  return i19 | 0;
 }
 i1 = FUNCTION_TABLE_iiiiii[HEAP32[i3 + 4 >> 2] & 127](i1, i19, i4, i5, i6) | 0;
 i13 = i19 + 104 | 0;
 i15 = HEAP32[i13 >> 2] | 0;
 if (i1 | 0) {
  i19 = i1;
  STACKTOP = i20;
  return i19 | 0;
 }
 i1 = HEAP32[i19 + 148 >> 2] | 0;
 L10 : do if ((i1 | 0) < 131072) {
  switch (i1 | 0) {
  case 65536:
   break L10;
  default:
   i1 = 2;
  }
  STACKTOP = i20;
  return i1 | 0;
 } else if ((i1 | 0) < 1953658213) {
  switch (i1 | 0) {
  case 131072:
   break L10;
  default:
   i1 = 2;
  }
  STACKTOP = i20;
  return i1 | 0;
 } else {
  switch (i1 | 0) {
  case 1953658213:
   break L10;
  default:
   i1 = 2;
  }
  STACKTOP = i20;
  return i1 | 0;
 } while (0);
 i16 = i19 + 8 | 0;
 HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 2048;
 if ((i4 | 0) < 0) {
  i19 = 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 i1 = FUNCTION_TABLE_iiiiii[HEAP32[i3 + 8 >> 2] & 127](i15, i19, i4, i5, i6) | 0;
 if (i1 | 0) {
  i19 = i1;
  STACKTOP = i20;
  return i19 | 0;
 }
 i1 = HEAP32[i19 + 20 >> 2] | 0;
 if (!i1) i14 = 17; else if (!(_strstr(i1, 279784) | 0)) if (!(_strstr(i1, 279804) | 0)) if (!(_strstr(i1, 279824) | 0)) if (!(_strstr(i1, 279844) | 0)) if (!(_strstr(i1, 279864) | 0)) if (!(_strstr(i1, 279884) | 0)) if (!(_strstr(i1, 279904) | 0)) if (!(_strstr(i1, 279924) | 0)) if (!(_strstr(i1, 279944) | 0)) i14 = 17; else i14 = 65; else i14 = 65; else i14 = 65; else i14 = 65; else i14 = 65; else i14 = 65; else i14 = 65; else i14 = 65; else i14 = 65;
 L36 : do if ((i14 | 0) == 17) {
  i1 = i17;
  i2 = i1 + 68 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
  i10 = i19 + 152 | 0;
  i1 = HEAP16[i10 >> 1] | 0;
  L38 : do if (!(i1 << 16 >> 16)) {
   i4 = 0;
   i14 = 46;
  } else {
   i11 = i19 + 156 | 0;
   i12 = i19 + 508 | 0;
   i9 = 0;
   i2 = 0;
   i8 = 0;
   while (1) {
    i4 = HEAP32[i11 >> 2] | 0;
    i3 = HEAP32[i4 + (i8 << 4) >> 2] | 0;
    L42 : do if ((i3 | 0) < 1718642541) switch (i3 | 0) {
    case 1668707360:
     {
      i7 = 0;
      i2 = 1;
      i14 = 25;
      break;
     }
    default:
     {}
    } else if ((i3 | 0) < 1886545264) {
     switch (i3 | 0) {
     case 1718642541:
      break;
     default:
      break L42;
     }
     i7 = 1;
     i14 = 25;
     break;
    } else {
     switch (i3 | 0) {
     case 1886545264:
      break;
     default:
      break L42;
     }
     i7 = 2;
     i14 = 25;
     break;
    } while (0);
    if ((i14 | 0) == 25) {
     i14 = 0;
     i1 = 0;
     i3 = 0;
     while (1) {
      if ((HEAP32[i4 + (i8 << 4) + 12 >> 2] | 0) == (HEAP32[5332 + (i1 * 24 | 0) + (i7 << 3) + 4 >> 2] | 0)) {
       do if (!i3) {
        i3 = HEAP32[i12 >> 2] | 0;
        if (!i3) i3 = 0; else if (!(FUNCTION_TABLE_iiiii[i3 & 127](i19, HEAP32[i4 + (i8 << 4) >> 2] | 0, HEAP32[i13 >> 2] | 0, 0) | 0)) {
         i6 = HEAP32[i13 >> 2] | 0;
         i4 = HEAP32[(HEAP32[i11 >> 2] | 0) + (i8 << 4) + 12 >> 2] | 0;
         if (_FT_Stream_EnterFrame(i6, i4) | 0) {
          i3 = 0;
          break;
         }
         if (i4 >>> 0 > 3) {
          i3 = 0;
          i5 = i4;
          do {
           i3 = (_FT_Stream_GetULong(i6) | 0) + i3 | 0;
           i5 = i5 + -4 | 0;
          } while (i5 >>> 0 > 3);
          i4 = i4 & 3;
         } else i3 = 0;
         if (i4) {
          i5 = 3;
          while (1) {
           i3 = (((_FT_Stream_GetChar(i6) | 0) & 255) << (i5 << 3)) + i3 | 0;
           i4 = i4 + -1 | 0;
           if (!i4) break; else i5 = i5 + -1 | 0;
          }
         }
         _FT_Stream_ExitFrame(i6);
        } else i3 = 0;
       } while (0);
       i5 = i17 + (i1 << 2) | 0;
       i4 = HEAP32[i5 >> 2] | 0;
       i6 = i4 + 1 | 0;
       if ((HEAP32[5332 + (i1 * 24 | 0) + (i7 << 3) >> 2] | 0) == (i3 | 0)) {
        HEAP32[i5 >> 2] = i6;
        i4 = i6;
       }
       if ((i4 | 0) == 3) break L38;
      }
      i1 = i1 + 1 | 0;
      if ((i1 | 0) >= 17) break;
      i4 = HEAP32[i11 >> 2] | 0;
     }
     i1 = HEAP16[i10 >> 1] | 0;
    }
    i3 = i9 + 1 << 16 >> 16;
    if ((i3 & 65535) < (i1 & 65535)) {
     i9 = i3;
     i8 = i3 & 65535;
    } else break;
   }
   if (!(i2 << 24 >> 24)) {
    i4 = 0;
    i14 = 46;
   } else if ((HEAP32[i17 >> 2] | 0) != 3) if ((HEAP32[i17 + 4 >> 2] | 0) != 3) if ((HEAP32[i17 + 8 >> 2] | 0) != 3) if ((HEAP32[i17 + 12 >> 2] | 0) != 3) if ((HEAP32[i17 + 16 >> 2] | 0) != 3) if ((HEAP32[i17 + 20 >> 2] | 0) != 3) if ((HEAP32[i17 + 24 >> 2] | 0) != 3) if ((HEAP32[i17 + 28 >> 2] | 0) != 3) if ((HEAP32[i17 + 32 >> 2] | 0) != 3) {
    if ((HEAP32[i17 + 36 >> 2] | 0) == 3) break;
    if ((HEAP32[i17 + 40 >> 2] | 0) == 3) break;
    if ((HEAP32[i17 + 44 >> 2] | 0) == 3) break;
    if ((HEAP32[i17 + 48 >> 2] | 0) == 3) break;
    if ((HEAP32[i17 + 52 >> 2] | 0) == 3) break;
    if ((HEAP32[i17 + 56 >> 2] | 0) == 3) break;
    if ((HEAP32[i17 + 60 >> 2] | 0) == 3) break;
    if ((HEAP32[i17 + 64 >> 2] | 0) == 3) {
     i14 = 65;
     break L36;
    } else break L36;
   }
  } while (0);
  L96 : do if ((i14 | 0) == 46) {
   while (1) {
    i14 = 0;
    i2 = i17 + (i4 << 2) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    i3 = i1 + 1 | 0;
    if (i4 >>> 0 >= 5) {
     HEAP32[i2 >> 2] = i3;
     i1 = i3;
    }
    i4 = i4 + 1 | 0;
    if ((i1 | 0) == 3) break L96;
    if ((i4 | 0) >= 17) break; else i14 = 46;
   }
   break L36;
  } while (0);
  i14 = 65;
 } while (0);
 if ((i14 | 0) == 65) HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 8192;
 i2 = HEAP32[i15 + 28 >> 2] | 0;
 i11 = i19 + 508 | 0;
 i13 = FUNCTION_TABLE_iiiii[HEAP32[i11 >> 2] & 127](i19, 1751412088, i15, i18) | 0;
 HEAP32[i17 >> 2] = i13;
 i1 = HEAP32[i18 >> 2] | 0;
 if (!((i13 | 0) != 0 | i1 >>> 0 < 8)) {
  i3 = i19 + 704 | 0;
  i1 = _FT_Stream_ExtractFrame(i15, i1, i3) | 0;
  HEAP32[i17 >> 2] = i1;
  if (i1 | 0) {
   i19 = i1;
   STACKTOP = i20;
   return i19 | 0;
  }
  i1 = HEAP32[i3 >> 2] | 0;
  i5 = i1 + (HEAP32[i18 >> 2] | 0) | 0;
  i6 = HEAPU8[i1 + 2 >> 0] << 8 | HEAPU8[i1 + 3 >> 0];
  i7 = HEAPU8[i1 + 5 >> 0] << 16 | HEAPU8[i1 + 4 >> 0] << 24 | HEAPU8[i1 + 6 >> 0] << 8 | HEAPU8[i1 + 7 >> 0];
  i7 = i7 >>> 0 > 4294901759 ? i7 & 65535 : i7;
  if ((i6 >>> 0 > 255 ? 1 : (HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0] | 0) != 0) | (i7 + -4 | 0) >>> 0 > 65533) {
   HEAP32[i17 >> 2] = 3;
   i14 = 78;
  } else {
   i13 = _ft_mem_realloc(i2, 1, 0, i6, 0, i17) | 0;
   i4 = i19 + 720 | 0;
   HEAP32[i4 >> 2] = i13;
   if (!(HEAP32[i17 >> 2] | 0)) {
    L119 : do if (!i6) i1 = 0; else {
     i3 = i1 + 8 | 0;
     i1 = 0;
     do {
      i2 = i3;
      i3 = i3 + i7 | 0;
      if (i3 >>> 0 > i5 >>> 0) break L119;
      HEAP8[(HEAP32[i4 >> 2] | 0) + i1 >> 0] = HEAP8[i2 >> 0] | 0;
      i1 = i1 + 1 | 0;
     } while (i1 >>> 0 < i6 >>> 0);
    } while (0);
    HEAP32[i19 + 712 >> 2] = i1;
    HEAP32[i19 + 708 >> 2] = HEAP32[i18 >> 2];
    HEAP32[i19 + 716 >> 2] = i7;
   } else i14 = 78;
  }
  if ((i14 | 0) == 78) {
   _FT_Stream_ReleaseFrame(i15, i3);
   HEAP32[i19 + 708 >> 2] = 0;
  }
  i1 = HEAP32[i17 >> 2] | 0;
  if (i1 | 0) {
   i19 = i1;
   STACKTOP = i20;
   return i19 | 0;
  }
 }
 L130 : do if (!(HEAP32[i16 >> 2] & 1)) i1 = 0; else {
  i10 = i19 + 128 | 0;
  L132 : do if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] | 0)) {
   i2 = i19 + 668 | 0;
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i11 >> 2] & 127](i19, 1735162214, i15, i2) | 0;
   if ((i1 & 255 | 0) == 142) {
    HEAP32[i2 >> 2] = 0;
    i14 = 85;
   } else if (!i1) i14 = 85;
   do if ((i14 | 0) == 85) if (!(FUNCTION_TABLE_iiiii[HEAP32[i11 >> 2] & 127](i19, 1819239265, i15, i17) | 0)) {
    i1 = HEAP32[i17 >> 2] | 0;
    if (!(HEAP16[i19 + 210 >> 1] | 0)) if (i1 >>> 0 > 131071) {
     i1 = 8;
     break;
    } else i2 = 1; else if (i1 >>> 0 > 262143) {
     i1 = 8;
     break;
    } else i2 = 2;
    i13 = i1 >>> i2;
    i8 = i19 + 696 | 0;
    HEAP32[i8 >> 2] = i13;
    i9 = i19 + 16 | 0;
    i12 = HEAP32[i9 >> 2] | 0;
    i3 = i12 + 1 | 0;
    do if (!(i13 >>> 0 > i12 >>> 0 | (i13 | 0) == (i3 | 0))) {
     i1 = i3 << i2;
     i3 = HEAP32[i19 + 156 >> 2] | 0;
     i13 = HEAP16[i19 + 152 >> 1] | 0;
     i6 = i3 + ((i13 & 65535) << 4) | 0;
     i7 = _FT_Stream_Pos(i15) | 0;
     if (!(i13 << 16 >> 16)) i2 = 2147483647; else {
      i5 = i3 + 16 | 0;
      i5 = ((i6 >>> 0 > i5 >>> 0 ? i6 : i5) + ~i3 | 0) >>> 4;
      i2 = 2147483647;
      i4 = i3;
      do {
       i13 = (HEAP32[i4 + 8 >> 2] | 0) - i7 | 0;
       i2 = (i13 | 0) > 0 & (i13 | 0) < (i2 | 0) ? i13 : i2;
       i4 = i4 + 16 | 0;
      } while (i4 >>> 0 < i6 >>> 0);
      i3 = i3 + (i5 + 1 << 4) | 0;
     }
     if ((i3 | 0) == (i6 | 0)) i2 = (HEAP32[i15 + 4 >> 2] | 0) - i7 | 0;
     if (i1 >>> 0 > i2 >>> 0) {
      i1 = HEAP32[i17 >> 2] | 0;
      break;
     } else {
      HEAP32[i8 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
      HEAP32[i17 >> 2] = i1;
      break;
     }
    } while (0);
    i1 = _FT_Stream_ExtractFrame(i15, i1, i19 + 700 | 0) | 0;
    if (!i1) {
     i14 = 101;
     break L132;
    } else break L132;
   } else i1 = 144; while (0);
  } else i14 = 101; while (0);
  do if ((i14 | 0) == 101) {
   i1 = _tt_face_load_cvt(i19, i15) | 0;
   if (!i1) {
    if (!(FUNCTION_TABLE_iiiii[HEAP32[i11 >> 2] & 127](i19, 1718642541, i15, i17) | 0)) {
     i1 = HEAP32[i17 >> 2] | 0;
     HEAP32[i19 + 628 >> 2] = i1;
     i1 = _FT_Stream_ExtractFrame(i15, i1, i19 + 632 | 0) | 0;
     if (i1 | 0) break;
    } else {
     HEAP32[i19 + 632 >> 2] = 0;
     HEAP32[i19 + 628 >> 2] = 0;
    }
    if (!(FUNCTION_TABLE_iiiii[HEAP32[i11 >> 2] & 127](i19, 1886545264, i15, i17) | 0)) {
     i1 = HEAP32[i17 >> 2] | 0;
     HEAP32[i19 + 636 >> 2] = i1;
     i1 = _FT_Stream_ExtractFrame(i15, i1, i19 + 640 | 0) | 0;
    } else {
     HEAP32[i19 + 640 >> 2] = 0;
     HEAP32[i19 + 636 >> 2] = 0;
     i1 = 0;
    }
   }
  } while (0);
  if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] | 0)) if (HEAP32[i19 + 28 >> 2] | 0) if (HEAP32[i19 + 700 >> 2] | 0) {
   i5 = i19 + 696 | 0;
   L175 : do if (HEAP32[i5 >> 2] | 0) {
    i2 = 0;
    i3 = 0;
    i4 = 0;
    do {
     _tt_face_get_location(i19, i4, i17) | 0;
     if (HEAP32[i17 >> 2] | 0) {
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 > 1) break L175; else i3 = i4;
     }
     i4 = i4 + 1 | 0;
    } while (i4 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0);
    if ((i2 | 0) == 1) {
     do if (i3) {
      i17 = (_FT_Get_Glyph_Name(i19, i3, i18, 8) | 0) == 0;
      if (i17 & (HEAP8[i18 >> 0] | 0) == 46) if (!(_strncmp(i18, 280783, 8) | 0)) break; else break L130; else break L130;
     } while (0);
     HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & -2;
     break L130;
    }
   } while (0);
  }
 } while (0);
 HEAP32[i19 + 512 >> 2] = 62;
 HEAP32[i19 + 520 >> 2] = 45;
 HEAP32[i19 + 524 >> 2] = 46;
 HEAP32[i19 + 528 >> 2] = 47;
 HEAP32[i19 + 516 >> 2] = 55;
 i19 = i1;
 STACKTOP = i20;
 return i19 | 0;
}

function _gray_raster_render(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i37 = STACKTOP;
 STACKTOP = STACKTOP + 18160 | 0;
 i28 = i37 + 17840 | 0;
 i29 = i37 + 17832 | 0;
 i30 = i37 + 17828 | 0;
 i31 = i37 + 17824 | 0;
 i32 = i37 + 17820 | 0;
 i33 = i37 + 17816 | 0;
 i34 = i37 + 17812 | 0;
 i35 = i37 + 16384 | 0;
 i4 = i37;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  i36 = 6;
  STACKTOP = i37;
  return i36 | 0;
 }
 if (!i5) {
  i36 = 20;
  STACKTOP = i37;
  return i36 | 0;
 }
 i1 = HEAP16[i5 + 2 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  i36 = 0;
  STACKTOP = i37;
  return i36 | 0;
 }
 i2 = HEAP16[i5 >> 1] | 0;
 if (i2 << 16 >> 16 < 1) {
  i36 = 0;
  STACKTOP = i37;
  return i36 | 0;
 }
 i3 = HEAP32[i5 + 12 >> 2] | 0;
 if (!i3) {
  i36 = 20;
  STACKTOP = i37;
  return i36 | 0;
 }
 if (!(HEAP32[i5 + 4 >> 2] | 0)) {
  i36 = 20;
  STACKTOP = i37;
  return i36 | 0;
 }
 if ((i1 << 16 >> 16 | 0) != ((HEAP16[i3 + ((i2 << 16 >> 16) + -1 << 1) >> 1] | 0) + 1 | 0)) {
  i36 = 20;
  STACKTOP = i37;
  return i36 | 0;
 }
 i1 = HEAP32[i6 + 8 >> 2] | 0;
 i3 = (i1 & 2 | 0) == 0;
 if (i3) {
  if (!i7) {
   i36 = 6;
   STACKTOP = i37;
   return i36 | 0;
  }
  if (!(HEAP32[i7 + 4 >> 2] | 0)) {
   i36 = 0;
   STACKTOP = i37;
   return i36 | 0;
  }
  if (!(HEAP32[i7 >> 2] | 0)) {
   i36 = 0;
   STACKTOP = i37;
   return i36 | 0;
  }
  if (!(HEAP32[i7 + 12 >> 2] | 0)) {
   i36 = 6;
   STACKTOP = i37;
   return i36 | 0;
  }
 }
 if (!(i1 & 1)) {
  i36 = 19;
  STACKTOP = i37;
  return i36 | 0;
 }
 do if (i3) {
  HEAP32[i35 + 1180 >> 2] = 0;
  HEAP32[i35 + 1184 >> 2] = 0;
  HEAP32[i35 + 1188 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i35 + 1192 >> 2] = HEAP32[i7 >> 2];
 } else {
  i2 = i35 + 1180 | 0;
  if (!(i1 & 4)) {
   HEAP32[i2 >> 2] = -32768;
   HEAP32[i35 + 1184 >> 2] = -32768;
   HEAP32[i35 + 1188 >> 2] = 32767;
   HEAP32[i35 + 1192 >> 2] = 32767;
   break;
  } else {
   i27 = i6 + 32 | 0;
   HEAP32[i2 >> 2] = HEAP32[i27 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
   break;
  }
 } while (0);
 i25 = i35 + 1412 | 0;
 HEAP32[i25 >> 2] = i4;
 i26 = i35 + 1416 | 0;
 HEAP32[i26 >> 2] = 16384;
 i27 = i35 + 1420 | 0;
 HEAP32[i27 >> 2] = i4;
 i20 = i35 + 200 | 0;
 HEAP32[i20 >> 2] = 0;
 i21 = i35 + 204 | 0;
 HEAP32[i21 >> 2] = 0;
 i22 = i35 + 208 | 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i35 + 188 >> 2] = 0;
 HEAP32[i35 + 192 >> 2] = 0;
 i23 = i35 + 196 | 0;
 HEAP32[i23 >> 2] = 1;
 i24 = i35 + 1136 | 0;
 HEAP32[i24 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i24 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i24 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i24 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i24 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i22 >> 2] = 0;
 HEAP32[i23 >> 2] = 1;
 i24 = i35 + 1404 | 0;
 HEAP32[i24 >> 2] = 128;
 i18 = i35 + 1388 | 0;
 HEAP32[i18 >> 2] = 0;
 i19 = i35 + 1400 | 0;
 HEAP32[i19 >> 2] = 0;
 if (i3) {
  i1 = i35 + 1156 | 0;
  HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
  HEAP32[i1 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
  HEAP32[i35 + 1392 >> 2] = 27;
  i1 = i35;
 } else {
  HEAP32[i35 + 1392 >> 2] = HEAP32[i6 + 12 >> 2];
  i1 = HEAP32[i6 + 28 >> 2] | 0;
 }
 i17 = i35 + 1396 | 0;
 HEAP32[i17 >> 2] = i1;
 i2 = HEAP32[i35 + 1140 >> 2] | 0;
 i1 = HEAP16[i35 + 1138 >> 1] | 0;
 i9 = i2 + (i1 << 16 >> 16 << 3) | 0;
 if (i1 << 16 >> 16 < 1) {
  i8 = i35 + 164 | 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  i8 = i35 + 168 | 0;
  i1 = 0;
  i5 = 0;
  i2 = 0;
  i7 = 0;
 } else {
  i3 = HEAP32[i2 >> 2] | 0;
  i8 = i35 + 168 | 0;
  HEAP32[i8 >> 2] = i3;
  i10 = i35 + 164 | 0;
  HEAP32[i10 >> 2] = i3;
  i5 = HEAP32[i2 + 4 >> 2] | 0;
  i11 = i35 + 176 | 0;
  HEAP32[i11 >> 2] = i5;
  i12 = i35 + 172 | 0;
  HEAP32[i12 >> 2] = i5;
  if (i1 << 16 >> 16 == 1) {
   i4 = i3;
   i2 = i5;
   i1 = i5;
  } else {
   i7 = i2 + 8 | 0;
   i1 = i2;
   i4 = i3;
   i6 = i3;
   i2 = i5;
   while (1) {
    i3 = HEAP32[i7 >> 2] | 0;
    i1 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i3 | 0) < (i4 | 0)) {
     HEAP32[i10 >> 2] = i3;
     i4 = i3;
    }
    if ((i3 | 0) > (i6 | 0)) {
     HEAP32[i8 >> 2] = i3;
     i6 = i3;
    }
    if ((i1 | 0) < (i2 | 0)) {
     HEAP32[i12 >> 2] = i1;
     i2 = i1;
    }
    if ((i1 | 0) > (i5 | 0)) HEAP32[i11 >> 2] = i1; else i1 = i5;
    i3 = i7 + 8 | 0;
    if (i3 >>> 0 < i9 >>> 0) {
     i16 = i7;
     i7 = i3;
     i5 = i1;
     i1 = i16;
    } else {
     i3 = i6;
     break;
    }
   }
  }
  i5 = i4 >> 6;
  HEAP32[i10 >> 2] = i5;
  i7 = i2 >> 6;
  HEAP32[i12 >> 2] = i7;
  i16 = i3 + 63 >> 6;
  HEAP32[i8 >> 2] = i16;
  i2 = i1 + 63 >> 6;
  HEAP32[i11 >> 2] = i2;
  i1 = i16;
 }
 i3 = HEAP32[i35 + 1180 >> 2] | 0;
 L70 : do if ((i1 | 0) > (i3 | 0)) {
  i4 = i35 + 164 | 0;
  i9 = HEAP32[i35 + 1188 >> 2] | 0;
  if ((i5 | 0) < (i9 | 0)) {
   i15 = i35 + 176 | 0;
   i6 = HEAP32[i35 + 1184 >> 2] | 0;
   if ((i2 | 0) > (i6 | 0)) {
    i16 = i35 + 172 | 0;
    i10 = HEAP32[i35 + 1192 >> 2] | 0;
    if ((i7 | 0) < (i10 | 0)) {
     if ((i5 | 0) < (i3 | 0)) HEAP32[i4 >> 2] = i3; else i3 = i5;
     if ((i7 | 0) < (i6 | 0)) HEAP32[i16 >> 2] = i6; else i6 = i7;
     if ((i1 | 0) > (i9 | 0)) {
      HEAP32[i8 >> 2] = i9;
      i1 = i9;
     }
     if ((i2 | 0) > (i10 | 0)) {
      HEAP32[i15 >> 2] = i10;
      i2 = i10;
     }
     i14 = i35 + 180 | 0;
     HEAP32[i14 >> 2] = i1 - i3;
     i13 = i2 - i6 | 0;
     i12 = i35 + 184 | 0;
     HEAP32[i12 >> 2] = i13;
     i1 = HEAP32[i24 >> 2] | 0;
     HEAP32[i31 >> 2] = (i13 | 0) / (i1 | 0) | 0;
     if (!(HEAP32[i31 >> 2] | 0)) HEAP32[i31 >> 2] = 1;
     if ((HEAP32[i31 >> 2] | 0) > 38) HEAP32[i31 >> 2] = 39;
     i13 = i35 + 1408 | 0;
     HEAP32[i13 >> 2] = 0;
     HEAP32[i32 >> 2] = i6;
     HEAP32[i34 >> 2] = i2;
     HEAP32[i30 >> 2] = 0;
     if ((HEAP32[i30 >> 2] | 0) >= (HEAP32[i31 >> 2] | 0)) {
      i1 = 0;
      break;
     }
     i8 = i28 + 4 | 0;
     i9 = i35 + 1424 | 0;
     i10 = i35 + 1392 | 0;
     i11 = i35 + 1196 | 0;
     while (1) {
      HEAP32[i33 >> 2] = (HEAP32[i32 >> 2] | 0) + i1;
      if ((HEAP32[i30 >> 2] | 0) == ((HEAP32[i31 >> 2] | 0) + -1 | 0)) i36 = 56; else if ((HEAP32[i33 >> 2] | 0) > (HEAP32[i34 >> 2] | 0)) i36 = 56;
      if ((i36 | 0) == 56) {
       i36 = 0;
       HEAP32[i33 >> 2] = HEAP32[i34 >> 2];
      }
      HEAP32[i28 >> 2] = HEAP32[i32 >> 2];
      HEAP32[i8 >> 2] = HEAP32[i33 >> 2];
      HEAP32[i29 >> 2] = i28;
      if ((HEAP32[i29 >> 2] | 0) >>> 0 >= i28 >>> 0) do {
       i2 = HEAP32[i25 >> 2] | 0;
       HEAP32[i27 >> 2] = i2;
       i4 = (HEAP32[(HEAP32[i29 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[HEAP32[i29 >> 2] >> 2] | 0) | 0;
       HEAP32[i9 >> 2] = i4;
       i1 = i4 << 2;
       i3 = (i1 | 0) % 16 | 0;
       i1 = ((i3 | 0) > 0 ? 16 - i3 | 0 : 0) + i1 | 0;
       i3 = HEAP32[i26 >> 2] | 0;
       i3 = i3 - ((i3 | 0) % 16 | 0) | 0;
       HEAP32[i20 >> 2] = i2 + i1;
       L104 : do if ((i3 | 0) > (i1 | 0)) {
        i7 = i3 - i1 | 0;
        HEAP32[i21 >> 2] = i7 >> 4;
        if ((i7 | 0) < 32) {
         i36 = 80;
         break;
        }
        do if ((i4 | 0) > 0) {
         HEAP32[i2 >> 2] = 0;
         if ((i4 | 0) == 1) break; else i1 = 1;
         do {
          HEAP32[(HEAP32[i27 >> 2] | 0) + (i1 << 2) >> 2] = 0;
          i1 = i1 + 1 | 0;
         } while ((i1 | 0) < (i4 | 0));
        } while (0);
        HEAP32[i22 >> 2] = 0;
        HEAP32[i23 >> 2] = 1;
        HEAP32[i16 >> 2] = HEAP32[HEAP32[i29 >> 2] >> 2];
        HEAP32[i15 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 4 >> 2];
        HEAP32[i12 >> 2] = (HEAP32[(HEAP32[i29 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[HEAP32[i29 >> 2] >> 2] | 0);
        switch (_gray_convert_glyph_inner(i35) | 0) {
        case 64:
         {
          i36 = 80;
          break L104;
         }
        case 0:
         break;
        default:
         {
          i1 = 1;
          break L70;
         }
        }
        do if (HEAP32[i22 >> 2] | 0) {
         HEAP32[i18 >> 2] = 0;
         if ((HEAP32[i9 >> 2] | 0) > 0) {
          i7 = 0;
          do {
           i1 = HEAP32[(HEAP32[i27 >> 2] | 0) + (i7 << 2) >> 2] | 0;
           do if (i1 | 0) {
            i4 = 0;
            i6 = 0;
            i3 = 0;
            do {
             i2 = HEAP32[i1 >> 2] | 0;
             if (i3 & (i2 | 0) > (i4 | 0)) _gray_hline(i35, i4, i7, i6 << 9, i2 - i4 | 0);
             i6 = (HEAP32[i1 + 4 >> 2] | 0) + i6 | 0;
             i5 = i6 << 9;
             i2 = i5 - (HEAP32[i1 + 8 >> 2] | 0) | 0;
             do if (i2 | 0) {
              i3 = HEAP32[i1 >> 2] | 0;
              if ((i3 | 0) <= -1) break;
              _gray_hline(i35, i3, i7, i2, 1);
             } while (0);
             i4 = (HEAP32[i1 >> 2] | 0) + 1 | 0;
             i1 = HEAP32[i1 + 12 >> 2] | 0;
             i3 = (i6 | 0) != 0;
            } while ((i1 | 0) != 0);
            if (!i3) break;
            _gray_hline(i35, i4, i7, i5, (HEAP32[i14 >> 2] | 0) - i4 | 0);
           } while (0);
           i7 = i7 + 1 | 0;
          } while ((i7 | 0) < (HEAP32[i9 >> 2] | 0));
         }
         i1 = HEAP32[i10 >> 2] | 0;
         if (!i1) break;
         i2 = HEAP32[i18 >> 2] | 0;
         if ((i2 | 0) <= 0) break;
         FUNCTION_TABLE_viiii[i1 & 31](HEAP32[i19 >> 2] | 0, i2, i11, HEAP32[i17 >> 2] | 0);
        } while (0);
        HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + -8;
       } else i36 = 80; while (0);
       if ((i36 | 0) == 80) {
        i36 = 0;
        i1 = HEAP32[HEAP32[i29 >> 2] >> 2] | 0;
        i2 = HEAP32[(HEAP32[i29 >> 2] | 0) + 4 >> 2] | 0;
        i7 = i2 - i1 >> 1;
        i3 = i7 + i1 | 0;
        if (!i7) {
         i1 = 1;
         break L70;
        }
        if ((i1 - i2 | 0) >= (HEAP32[i24 >> 2] | 0)) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
        HEAP32[(HEAP32[i29 >> 2] | 0) + 8 >> 2] = i1;
        HEAP32[(HEAP32[i29 >> 2] | 0) + 12 >> 2] = i3;
        HEAP32[HEAP32[i29 >> 2] >> 2] = i3;
        HEAP32[(HEAP32[i29 >> 2] | 0) + 4 >> 2] = i2;
        HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 8;
       }
      } while ((HEAP32[i29 >> 2] | 0) >>> 0 >= i28 >>> 0);
      HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
      HEAP32[i32 >> 2] = HEAP32[i33 >> 2];
      if ((HEAP32[i30 >> 2] | 0) >= (HEAP32[i31 >> 2] | 0)) break;
      i1 = HEAP32[i24 >> 2] | 0;
     }
     if ((HEAP32[i13 >> 2] | 0) <= 8) {
      i1 = 0;
      break;
     }
     i1 = HEAP32[i24 >> 2] | 0;
     if ((i1 | 0) <= 16) {
      i1 = 0;
      break;
     }
     HEAP32[i24 >> 2] = i1 >>> 1;
     i1 = 0;
    } else i1 = 0;
   } else i1 = 0;
  } else i1 = 0;
 } else i1 = 0; while (0);
 i36 = i1;
 STACKTOP = i37;
 return i36 | 0;
}

function _decfloat(i23, i2, i26, i25, i24, i20) {
 i23 = i23 | 0;
 i2 = i2 | 0;
 i26 = i26 | 0;
 i25 = i25 | 0;
 i24 = i24 | 0;
 i20 = i20 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, i12 = 0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, d31 = 0.0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i27 = i30;
 i28 = i25 + i26 | 0;
 i29 = 0 - i28 | 0;
 i21 = i23 + 4 | 0;
 i22 = i23 + 100 | 0;
 i3 = 0;
 L1 : while (1) {
  switch (i2 | 0) {
  case 46:
   {
    i19 = 6;
    break L1;
   }
  case 48:
   break;
  default:
   {
    i14 = 0;
    i8 = i3;
    i9 = 0;
    i7 = 0;
    break L1;
   }
  }
  i2 = HEAP32[i21 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
   HEAP32[i21 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
   i3 = 1;
   continue;
  } else {
   i2 = ___shgetc(i23) | 0;
   i3 = 1;
   continue;
  }
 }
 if ((i19 | 0) == 6) {
  i2 = HEAP32[i21 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
   HEAP32[i21 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i23) | 0;
  if ((i2 | 0) == 48) {
   i3 = 0;
   i2 = 0;
   while (1) {
    i3 = _i64Add(i3 | 0, i2 | 0, -1, -1) | 0;
    i7 = tempRet0;
    i2 = HEAP32[i21 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
     HEAP32[i21 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
    } else i2 = ___shgetc(i23) | 0;
    if ((i2 | 0) == 48) i2 = i7; else {
     i14 = 1;
     i8 = 1;
     i9 = i3;
     break;
    }
   }
  } else {
   i14 = 1;
   i8 = i3;
   i9 = 0;
   i7 = 0;
  }
 }
 HEAP32[i27 >> 2] = 0;
 i6 = i2 + -48 | 0;
 i4 = (i2 | 0) == 46;
 L20 : do if (i4 | i6 >>> 0 < 10) {
  i19 = i27 + 496 | 0;
  i15 = 0;
  i3 = 0;
  i12 = 0;
  i16 = i14;
  i17 = i8;
  i18 = i6;
  i8 = 0;
  i6 = 0;
  L22 : while (1) {
   do if (i4) if (!i16) {
    i16 = 1;
    i9 = i8;
    i7 = i6;
   } else break L22; else {
    i8 = _i64Add(i8 | 0, i6 | 0, 1, 0) | 0;
    i6 = tempRet0;
    i14 = (i2 | 0) != 48;
    if ((i3 | 0) >= 125) {
     if (!i14) break;
     HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 1;
     break;
    }
    i4 = i27 + (i3 << 2) | 0;
    if (!i15) i2 = i18; else i2 = i2 + -48 + ((HEAP32[i4 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[i4 >> 2] = i2;
    i15 = i15 + 1 | 0;
    i17 = (i15 | 0) == 9;
    i15 = i17 ? 0 : i15;
    i3 = (i17 & 1) + i3 | 0;
    i12 = i14 ? i8 : i12;
    i17 = 1;
   } while (0);
   i2 = HEAP32[i21 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
    HEAP32[i21 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
   } else i2 = ___shgetc(i23) | 0;
   i18 = i2 + -48 | 0;
   i4 = (i2 | 0) == 46;
   if (!(i4 | i18 >>> 0 < 10)) {
    i14 = i16;
    i4 = i17;
    i19 = 29;
    break L20;
   }
  }
  i2 = i15;
  i4 = (i17 | 0) != 0;
  i19 = 37;
 } else {
  i15 = 0;
  i3 = 0;
  i12 = 0;
  i4 = i8;
  i8 = 0;
  i6 = 0;
  i19 = 29;
 } while (0);
 do if ((i19 | 0) == 29) {
  i18 = (i14 | 0) == 0;
  i9 = i18 ? i8 : i9;
  i7 = i18 ? i6 : i7;
  i4 = (i4 | 0) != 0;
  if (!(i4 & (i2 | 32 | 0) == 101)) if ((i2 | 0) > -1) {
   i2 = i15;
   i19 = 37;
   break;
  } else {
   i2 = i15;
   i19 = 39;
   break;
  }
  i4 = _scanexp(i23, i20) | 0;
  i2 = tempRet0;
  if ((i4 | 0) == 0 & (i2 | 0) == -2147483648) {
   if (!i20) {
    ___shlim(i23, 0);
    d1 = 0.0;
    break;
   }
   if (!(HEAP32[i22 >> 2] | 0)) {
    i4 = 0;
    i2 = 0;
   } else {
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -1;
    i4 = 0;
    i2 = 0;
   }
  }
  i17 = _i64Add(i4 | 0, i2 | 0, i9 | 0, i7 | 0) | 0;
  i2 = i15;
  i7 = tempRet0;
  i19 = 41;
 } while (0);
 if ((i19 | 0) == 37) if (!(HEAP32[i22 >> 2] | 0)) i19 = 39; else {
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -1;
  if (i4) {
   i17 = i9;
   i19 = 41;
  } else i19 = 40;
 }
 if ((i19 | 0) == 39) if (i4) {
  i17 = i9;
  i19 = 41;
 } else i19 = 40;
 do if ((i19 | 0) == 40) {
  i29 = ___errno_location() | 0;
  HEAP32[i29 >> 2] = 22;
  ___shlim(i23, 0);
  d1 = 0.0;
 } else if ((i19 | 0) == 41) {
  i4 = HEAP32[i27 >> 2] | 0;
  if (!i4) {
   d1 = +(i24 | 0) * 0.0;
   break;
  }
  if (((i6 | 0) < 0 | (i6 | 0) == 0 & i8 >>> 0 < 10) & ((i17 | 0) == (i8 | 0) & (i7 | 0) == (i6 | 0))) if ((i26 | 0) > 30 | (i4 >>> i26 | 0) == 0) {
   d1 = +(i24 | 0) * +(i4 >>> 0);
   break;
  }
  i23 = (i25 | 0) / -2 | 0;
  i22 = ((i23 | 0) < 0) << 31 >> 31;
  if ((i7 | 0) > (i22 | 0) | (i7 | 0) == (i22 | 0) & i17 >>> 0 > i23 >>> 0) {
   i29 = ___errno_location() | 0;
   HEAP32[i29 >> 2] = 34;
   d1 = +(i24 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  i23 = i25 + -106 | 0;
  i22 = ((i23 | 0) < 0) << 31 >> 31;
  if ((i7 | 0) < (i22 | 0) | (i7 | 0) == (i22 | 0) & i17 >>> 0 < i23 >>> 0) {
   i29 = ___errno_location() | 0;
   HEAP32[i29 >> 2] = 34;
   d1 = +(i24 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (i2) {
   if ((i2 | 0) < 9) {
    i6 = i27 + (i3 << 2) | 0;
    i4 = HEAP32[i6 >> 2] | 0;
    do {
     i4 = i4 * 10 | 0;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != 9);
    HEAP32[i6 >> 2] = i4;
   }
   i3 = i3 + 1 | 0;
  }
  if ((i12 | 0) < 9) if ((i12 | 0) <= (i17 | 0) & (i17 | 0) < 18) {
   i2 = HEAP32[i27 >> 2] | 0;
   if ((i17 | 0) == 9) {
    d1 = +(i24 | 0) * +(i2 >>> 0);
    break;
   }
   if ((i17 | 0) < 9) {
    d1 = +(i24 | 0) * +(i2 >>> 0) / +(HEAP32[91684 + (8 - i17 << 2) >> 2] | 0);
    break;
   }
   i23 = i26 + 27 + (Math_imul(i17, -3) | 0) | 0;
   if ((i23 | 0) > 30 | (i2 >>> i23 | 0) == 0) {
    d1 = +(i24 | 0) * +(i2 >>> 0) * +(HEAP32[91684 + (i17 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  i2 = (i17 | 0) % 9 | 0;
  if (!i2) {
   i2 = 0;
   i6 = 0;
  } else {
   i12 = (i17 | 0) > -1 ? i2 : i2 + 9 | 0;
   i8 = HEAP32[91684 + (8 - i12 << 2) >> 2] | 0;
   if (!i3) {
    i6 = 0;
    i3 = 0;
    i4 = i17;
   } else {
    i9 = 1e9 / (i8 | 0) | 0;
    i6 = 0;
    i7 = 0;
    i4 = i17;
    i2 = 0;
    do {
     i21 = i27 + (i2 << 2) | 0;
     i22 = HEAP32[i21 >> 2] | 0;
     i23 = ((i22 >>> 0) / (i8 >>> 0) | 0) + i6 | 0;
     HEAP32[i21 >> 2] = i23;
     i6 = Math_imul(i9, (i22 >>> 0) % (i8 >>> 0) | 0) | 0;
     i23 = (i2 | 0) == (i7 | 0) & (i23 | 0) == 0;
     i4 = i23 ? i4 + -9 | 0 : i4;
     i7 = i23 ? i7 + 1 & 127 : i7;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i3 | 0));
    if (!i6) i6 = i7; else {
     HEAP32[i27 + (i3 << 2) >> 2] = i6;
     i6 = i7;
     i3 = i3 + 1 | 0;
    }
   }
   i2 = 0;
   i17 = 9 - i12 + i4 | 0;
  }
  L101 : while (1) {
   i12 = (i17 | 0) < 18;
   i14 = (i17 | 0) == 18;
   i15 = i27 + (i6 << 2) | 0;
   while (1) {
    if (!i12) {
     if (!i14) {
      i4 = i17;
      break L101;
     }
     if ((HEAP32[i15 >> 2] | 0) >>> 0 >= 9007199) {
      i4 = 18;
      break L101;
     }
    }
    i4 = 0;
    i16 = i3;
    i3 = i3 + 127 | 0;
    while (1) {
     i7 = i3 & 127;
     i8 = i27 + (i7 << 2) | 0;
     i3 = _bitshift64Shl(HEAP32[i8 >> 2] | 0, 0, 29) | 0;
     i3 = _i64Add(i3 | 0, tempRet0 | 0, i4 | 0, 0) | 0;
     i4 = tempRet0;
     if (i4 >>> 0 > 0 | (i4 | 0) == 0 & i3 >>> 0 > 1e9) {
      i9 = ___udivdi3(i3 | 0, i4 | 0, 1e9, 0) | 0;
      i3 = ___uremdi3(i3 | 0, i4 | 0, 1e9, 0) | 0;
     } else i9 = 0;
     HEAP32[i8 >> 2] = i3;
     i23 = (i7 | 0) == (i6 | 0);
     i16 = (i3 | 0) == 0 & (((i7 | 0) != (i16 + 127 & 127 | 0) | i23) ^ 1) ? i7 : i16;
     if (i23) break; else {
      i4 = i9;
      i3 = i7 + -1 | 0;
     }
    }
    i2 = i2 + -29 | 0;
    if (i9 | 0) break; else i3 = i16;
   }
   i6 = i6 + 127 & 127;
   i3 = i16 + 127 & 127;
   i4 = i27 + ((i16 + 126 & 127) << 2) | 0;
   if ((i6 | 0) == (i16 | 0)) HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | HEAP32[i27 + (i3 << 2) >> 2]; else i3 = i16;
   HEAP32[i27 + (i6 << 2) >> 2] = i9;
   i17 = i17 + 9 | 0;
  }
  L119 : while (1) {
   i16 = i3 + 1 & 127;
   i17 = i27 + ((i3 + 127 & 127) << 2) | 0;
   i14 = i4;
   while (1) {
    i8 = (i14 | 0) == 18;
    i15 = (i14 | 0) > 27 ? 9 : 1;
    i18 = i6;
    while (1) {
     i4 = 0;
     while (1) {
      i6 = i4 + i18 & 127;
      if ((i6 | 0) == (i3 | 0)) {
       i4 = 2;
       i19 = 88;
       break;
      }
      i6 = HEAP32[i27 + (i6 << 2) >> 2] | 0;
      i7 = HEAP32[91716 + (i4 << 2) >> 2] | 0;
      if (i6 >>> 0 < i7 >>> 0) {
       i4 = 2;
       i19 = 88;
       break;
      }
      if (i6 >>> 0 > i7 >>> 0) break;
      i4 = i4 + 1 | 0;
      if ((i4 | 0) >= 2) {
       i19 = 88;
       break;
      }
     }
     if ((i19 | 0) == 88) {
      i19 = 0;
      if (i8 & (i4 | 0) == 2) {
       d1 = 0.0;
       i7 = 0;
       break L119;
      }
     }
     i2 = i15 + i2 | 0;
     if ((i18 | 0) == (i3 | 0)) i18 = i3; else break;
    }
    i9 = (1 << i15) + -1 | 0;
    i12 = 1e9 >>> i15;
    i8 = 0;
    i6 = i18;
    i4 = i14;
    i7 = i18;
    do {
     i21 = i27 + (i7 << 2) | 0;
     i22 = HEAP32[i21 >> 2] | 0;
     i23 = (i22 >>> i15) + i8 | 0;
     HEAP32[i21 >> 2] = i23;
     i8 = Math_imul(i22 & i9, i12) | 0;
     i23 = (i7 | 0) == (i6 | 0) & (i23 | 0) == 0;
     i4 = i23 ? i4 + -9 | 0 : i4;
     i6 = i23 ? i6 + 1 & 127 : i6;
     i7 = i7 + 1 & 127;
    } while ((i7 | 0) != (i3 | 0));
    if (!i8) {
     i14 = i4;
     continue;
    }
    if ((i16 | 0) != (i6 | 0)) break;
    HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 1;
    i14 = i4;
   }
   HEAP32[i27 + (i3 << 2) >> 2] = i8;
   i3 = i16;
  }
  do {
   i6 = i7 + i18 & 127;
   i4 = i3 + 1 & 127;
   if ((i6 | 0) == (i3 | 0)) {
    HEAP32[i27 + (i4 + -1 << 2) >> 2] = 0;
    i3 = i4;
   }
   d1 = d1 * 1.0e9 + +((HEAP32[i27 + (i6 << 2) >> 2] | 0) >>> 0);
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != 2);
  d13 = +(i24 | 0);
  d5 = d13 * d1;
  i6 = i2 + 53 | 0;
  i8 = i6 - i25 | 0;
  i9 = (i8 | 0) < (i26 | 0);
  i7 = i9 ? ((i8 | 0) > 0 ? i8 : 0) : i26;
  if ((i7 | 0) < 53) {
   d31 = +_copysignl(+_scalbn(1.0, 105 - i7 | 0), d5);
   d10 = +_fmodl(d5, +_scalbn(1.0, 53 - i7 | 0));
   d11 = d31;
   d1 = d10;
   d10 = d31 + (d5 - d10);
  } else {
   d11 = 0.0;
   d1 = 0.0;
   d10 = d5;
  }
  i4 = i18 + 2 & 127;
  if ((i4 | 0) == (i3 | 0)) d5 = d1; else {
   i4 = HEAP32[i27 + (i4 << 2) >> 2] | 0;
   do if (i4 >>> 0 < 5e8) {
    if (!i4) if ((i18 + 3 & 127 | 0) == (i3 | 0)) break;
    d1 = d13 * .25 + d1;
   } else {
    if ((i4 | 0) != 5e8) {
     d1 = d13 * .75 + d1;
     break;
    }
    if ((i18 + 3 & 127 | 0) == (i3 | 0)) {
     d1 = d13 * .5 + d1;
     break;
    } else {
     d1 = d13 * .75 + d1;
     break;
    }
   } while (0);
   if ((53 - i7 | 0) > 1) if (+_fmodl(d1, 1.0) != 0.0) d5 = d1; else d5 = d1 + 1.0; else d5 = d1;
  }
  d1 = d10 + d5 - d11;
  do if ((i6 & 2147483647 | 0) > (-2 - i28 | 0)) {
   i3 = !(+Math_abs(+d1) >= 9007199254740992.0);
   i2 = ((i3 ^ 1) & 1) + i2 | 0;
   d1 = i3 ? d1 : d1 * .5;
   if ((i2 + 50 | 0) <= (i29 | 0)) if (!(d5 != 0.0 & (i9 & ((i7 | 0) != (i8 | 0) | i3)))) break;
   i29 = ___errno_location() | 0;
   HEAP32[i29 >> 2] = 34;
  } while (0);
  d1 = +_scalbnl(d1, i2);
 } while (0);
 STACKTOP = i30;
 return +d1;
}

function _printf_core(i15, i2, i25, i26, i27) {
 i15 = i15 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i27 = i27 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i21 = i28 + 16 | 0;
 i22 = i28;
 i19 = i28 + 24 | 0;
 i23 = i28 + 8 | 0;
 i24 = i28 + 20 | 0;
 HEAP32[i21 >> 2] = i2;
 i16 = (i15 | 0) != 0;
 i17 = i19 + 40 | 0;
 i18 = i17;
 i19 = i19 + 39 | 0;
 i20 = i23 + 4 | 0;
 i3 = 0;
 i1 = 0;
 i7 = 0;
 L1 : while (1) {
  do if ((i1 | 0) > -1) if ((i3 | 0) > (2147483647 - i1 | 0)) {
   i1 = ___errno_location() | 0;
   HEAP32[i1 >> 2] = 75;
   i1 = -1;
   break;
  } else {
   i1 = i3 + i1 | 0;
   break;
  } while (0);
  i3 = HEAP8[i2 >> 0] | 0;
  if (!(i3 << 24 >> 24)) {
   i14 = 87;
   break;
  } else i4 = i2;
  L9 : while (1) {
   switch (i3 << 24 >> 24) {
   case 37:
    {
     i3 = i4;
     i14 = 9;
     break L9;
    }
   case 0:
    {
     i3 = i4;
     break L9;
    }
   default:
    {}
   }
   i13 = i4 + 1 | 0;
   HEAP32[i21 >> 2] = i13;
   i3 = HEAP8[i13 >> 0] | 0;
   i4 = i13;
  }
  L12 : do if ((i14 | 0) == 9) while (1) {
   i14 = 0;
   if ((HEAP8[i4 + 1 >> 0] | 0) != 37) break L12;
   i3 = i3 + 1 | 0;
   i4 = i4 + 2 | 0;
   HEAP32[i21 >> 2] = i4;
   if ((HEAP8[i4 >> 0] | 0) == 37) i14 = 9; else break;
  } while (0);
  i3 = i3 - i2 | 0;
  if (i16) _out(i15, i2, i3);
  if (i3 | 0) {
   i2 = i4;
   continue;
  }
  i5 = i4 + 1 | 0;
  i3 = (HEAP8[i5 >> 0] | 0) + -48 | 0;
  if (i3 >>> 0 < 10) {
   i13 = (HEAP8[i4 + 2 >> 0] | 0) == 36;
   i12 = i13 ? i3 : -1;
   i7 = i13 ? 1 : i7;
   i5 = i13 ? i4 + 3 | 0 : i5;
  } else i12 = -1;
  HEAP32[i21 >> 2] = i5;
  i3 = HEAP8[i5 >> 0] | 0;
  i4 = (i3 << 24 >> 24) + -32 | 0;
  L24 : do if (i4 >>> 0 < 32) {
   i6 = 0;
   i8 = i3;
   while (1) {
    i3 = 1 << i4;
    if (!(i3 & 75913)) {
     i3 = i8;
     break L24;
    }
    i6 = i3 | i6;
    i5 = i5 + 1 | 0;
    HEAP32[i21 >> 2] = i5;
    i3 = HEAP8[i5 >> 0] | 0;
    i4 = (i3 << 24 >> 24) + -32 | 0;
    if (i4 >>> 0 >= 32) break; else i8 = i3;
   }
  } else i6 = 0; while (0);
  if (i3 << 24 >> 24 == 42) {
   i4 = i5 + 1 | 0;
   i3 = (HEAP8[i4 >> 0] | 0) + -48 | 0;
   if (i3 >>> 0 < 10) if ((HEAP8[i5 + 2 >> 0] | 0) == 36) {
    HEAP32[i27 + (i3 << 2) >> 2] = 10;
    i3 = HEAP32[i26 + ((HEAP8[i4 >> 0] | 0) + -48 << 3) >> 2] | 0;
    i7 = 1;
    i5 = i5 + 3 | 0;
   } else i14 = 23; else i14 = 23;
   if ((i14 | 0) == 23) {
    i14 = 0;
    if (i7 | 0) {
     i1 = -1;
     break;
    }
    if (i16) {
     i7 = (HEAP32[i25 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     i3 = HEAP32[i7 >> 2] | 0;
     HEAP32[i25 >> 2] = i7 + 4;
     i7 = 0;
     i5 = i4;
    } else {
     i3 = 0;
     i7 = 0;
     i5 = i4;
    }
   }
   HEAP32[i21 >> 2] = i5;
   i13 = (i3 | 0) < 0;
   i3 = i13 ? 0 - i3 | 0 : i3;
   i6 = i13 ? i6 | 8192 : i6;
  } else {
   i3 = _getint(i21) | 0;
   if ((i3 | 0) < 0) {
    i1 = -1;
    break;
   }
   i5 = HEAP32[i21 >> 2] | 0;
  }
  do if ((HEAP8[i5 >> 0] | 0) == 46) {
   if ((HEAP8[i5 + 1 >> 0] | 0) != 42) {
    HEAP32[i21 >> 2] = i5 + 1;
    i4 = _getint(i21) | 0;
    i5 = HEAP32[i21 >> 2] | 0;
    break;
   }
   i8 = i5 + 2 | 0;
   i4 = (HEAP8[i8 >> 0] | 0) + -48 | 0;
   if (i4 >>> 0 < 10) if ((HEAP8[i5 + 3 >> 0] | 0) == 36) {
    HEAP32[i27 + (i4 << 2) >> 2] = 10;
    i4 = HEAP32[i26 + ((HEAP8[i8 >> 0] | 0) + -48 << 3) >> 2] | 0;
    i5 = i5 + 4 | 0;
    HEAP32[i21 >> 2] = i5;
    break;
   }
   if (i7 | 0) {
    i1 = -1;
    break L1;
   }
   if (i16) {
    i13 = (HEAP32[i25 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i4 = HEAP32[i13 >> 2] | 0;
    HEAP32[i25 >> 2] = i13 + 4;
   } else i4 = 0;
   HEAP32[i21 >> 2] = i8;
   i5 = i8;
  } else i4 = -1; while (0);
  i11 = 0;
  while (1) {
   if (((HEAP8[i5 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    i1 = -1;
    break L1;
   }
   i13 = i5 + 1 | 0;
   HEAP32[i21 >> 2] = i13;
   i8 = HEAP8[(HEAP8[i5 >> 0] | 0) + -65 + (367066 + (i11 * 58 | 0)) >> 0] | 0;
   i9 = i8 & 255;
   if ((i9 + -1 | 0) >>> 0 < 8) {
    i11 = i9;
    i5 = i13;
   } else break;
  }
  if (!(i8 << 24 >> 24)) {
   i1 = -1;
   break;
  }
  i10 = (i12 | 0) > -1;
  do if (i8 << 24 >> 24 == 19) if (i10) {
   i1 = -1;
   break L1;
  } else i14 = 49; else {
   if (i10) {
    HEAP32[i27 + (i12 << 2) >> 2] = i9;
    i10 = i26 + (i12 << 3) | 0;
    i12 = HEAP32[i10 + 4 >> 2] | 0;
    i14 = i22;
    HEAP32[i14 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i14 + 4 >> 2] = i12;
    i14 = 49;
    break;
   }
   if (!i16) {
    i1 = 0;
    break L1;
   }
   _pop_arg(i22, i9, i25);
  } while (0);
  if ((i14 | 0) == 49) {
   i14 = 0;
   if (!i16) {
    i3 = 0;
    i2 = i13;
    continue;
   }
  }
  i5 = HEAP8[i5 >> 0] | 0;
  i5 = (i11 | 0) != 0 & (i5 & 15 | 0) == 3 ? i5 & -33 : i5;
  i10 = i6 & -65537;
  i12 = (i6 & 8192 | 0) == 0 ? i6 : i10;
  L71 : do switch (i5 | 0) {
  case 110:
   switch ((i11 & 255) << 24 >> 24) {
   case 0:
    {
     HEAP32[HEAP32[i22 >> 2] >> 2] = i1;
     i3 = 0;
     i2 = i13;
     continue L1;
    }
   case 1:
    {
     HEAP32[HEAP32[i22 >> 2] >> 2] = i1;
     i3 = 0;
     i2 = i13;
     continue L1;
    }
   case 2:
    {
     i3 = HEAP32[i22 >> 2] | 0;
     HEAP32[i3 >> 2] = i1;
     HEAP32[i3 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i3 = 0;
     i2 = i13;
     continue L1;
    }
   case 3:
    {
     HEAP16[HEAP32[i22 >> 2] >> 1] = i1;
     i3 = 0;
     i2 = i13;
     continue L1;
    }
   case 4:
    {
     HEAP8[HEAP32[i22 >> 2] >> 0] = i1;
     i3 = 0;
     i2 = i13;
     continue L1;
    }
   case 6:
    {
     HEAP32[HEAP32[i22 >> 2] >> 2] = i1;
     i3 = 0;
     i2 = i13;
     continue L1;
    }
   case 7:
    {
     i3 = HEAP32[i22 >> 2] | 0;
     HEAP32[i3 >> 2] = i1;
     HEAP32[i3 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i3 = 0;
     i2 = i13;
     continue L1;
    }
   default:
    {
     i3 = 0;
     i2 = i13;
     continue L1;
    }
   }
  case 112:
   {
    i5 = 120;
    i4 = i4 >>> 0 > 8 ? i4 : 8;
    i2 = i12 | 8;
    i14 = 61;
    break;
   }
  case 88:
  case 120:
   {
    i2 = i12;
    i14 = 61;
    break;
   }
  case 111:
   {
    i5 = i22;
    i2 = HEAP32[i5 >> 2] | 0;
    i5 = HEAP32[i5 + 4 >> 2] | 0;
    i9 = _fmt_o(i2, i5, i17) | 0;
    i10 = i18 - i9 | 0;
    i6 = 0;
    i8 = 367530;
    i4 = (i12 & 8 | 0) == 0 | (i4 | 0) > (i10 | 0) ? i4 : i10 + 1 | 0;
    i10 = i12;
    i14 = 67;
    break;
   }
  case 105:
  case 100:
   {
    i5 = i22;
    i2 = HEAP32[i5 >> 2] | 0;
    i5 = HEAP32[i5 + 4 >> 2] | 0;
    if ((i5 | 0) < 0) {
     i2 = _i64Subtract(0, 0, i2 | 0, i5 | 0) | 0;
     i5 = tempRet0;
     i6 = i22;
     HEAP32[i6 >> 2] = i2;
     HEAP32[i6 + 4 >> 2] = i5;
     i6 = 1;
     i8 = 367530;
     i14 = 66;
     break L71;
    } else {
     i6 = (i12 & 2049 | 0) != 0 & 1;
     i8 = (i12 & 2048 | 0) == 0 ? ((i12 & 1 | 0) == 0 ? 367530 : 367532) : 367531;
     i14 = 66;
     break L71;
    }
   }
  case 117:
   {
    i5 = i22;
    i6 = 0;
    i8 = 367530;
    i2 = HEAP32[i5 >> 2] | 0;
    i5 = HEAP32[i5 + 4 >> 2] | 0;
    i14 = 66;
    break;
   }
  case 99:
   {
    HEAP8[i19 >> 0] = HEAP32[i22 >> 2];
    i2 = i19;
    i6 = 0;
    i8 = 367530;
    i9 = i17;
    i5 = 1;
    i4 = i10;
    break;
   }
  case 109:
   {
    i5 = ___errno_location() | 0;
    i5 = _strerror(HEAP32[i5 >> 2] | 0) | 0;
    i14 = 71;
    break;
   }
  case 115:
   {
    i5 = HEAP32[i22 >> 2] | 0;
    i5 = i5 | 0 ? i5 : 367540;
    i14 = 71;
    break;
   }
  case 67:
   {
    HEAP32[i23 >> 2] = HEAP32[i22 >> 2];
    HEAP32[i20 >> 2] = 0;
    HEAP32[i22 >> 2] = i23;
    i9 = -1;
    i5 = i23;
    i14 = 75;
    break;
   }
  case 83:
   {
    i2 = HEAP32[i22 >> 2] | 0;
    if (!i4) {
     _pad(i15, 32, i3, 0, i12);
     i2 = 0;
     i14 = 84;
    } else {
     i9 = i4;
     i5 = i2;
     i14 = 75;
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    i3 = _fmt_fp(i15, +HEAPF64[i22 >> 3], i3, i4, i12, i5) | 0;
    i2 = i13;
    continue L1;
   }
  default:
   {
    i6 = 0;
    i8 = 367530;
    i9 = i17;
    i5 = i4;
    i4 = i12;
   }
  } while (0);
  L95 : do if ((i14 | 0) == 61) {
   i12 = i22;
   i11 = HEAP32[i12 >> 2] | 0;
   i12 = HEAP32[i12 + 4 >> 2] | 0;
   i9 = _fmt_x(i11, i12, i17, i5 & 32) | 0;
   i8 = (i2 & 8 | 0) == 0 | (i11 | 0) == 0 & (i12 | 0) == 0;
   i6 = i8 ? 0 : 2;
   i8 = i8 ? 367530 : 367530 + (i5 >> 4) | 0;
   i10 = i2;
   i2 = i11;
   i5 = i12;
   i14 = 67;
  } else if ((i14 | 0) == 66) {
   i9 = _fmt_u(i2, i5, i17) | 0;
   i10 = i12;
   i14 = 67;
  } else if ((i14 | 0) == 71) {
   i14 = 0;
   i12 = _memchr(i5, 0, i4) | 0;
   i11 = (i12 | 0) == 0;
   i2 = i5;
   i6 = 0;
   i8 = 367530;
   i9 = i11 ? i5 + i4 | 0 : i12;
   i5 = i11 ? i4 : i12 - i5 | 0;
   i4 = i10;
  } else if ((i14 | 0) == 75) {
   i14 = 0;
   i8 = i5;
   i2 = 0;
   i4 = 0;
   while (1) {
    i6 = HEAP32[i8 >> 2] | 0;
    if (!i6) break;
    i4 = _wctomb(i24, i6) | 0;
    if ((i4 | 0) < 0 | i4 >>> 0 > (i9 - i2 | 0) >>> 0) break;
    i2 = i4 + i2 | 0;
    if (i9 >>> 0 > i2 >>> 0) i8 = i8 + 4 | 0; else break;
   }
   if ((i4 | 0) < 0) {
    i1 = -1;
    break L1;
   }
   _pad(i15, 32, i3, i2, i12);
   if (!i2) {
    i2 = 0;
    i14 = 84;
   } else {
    i6 = 0;
    while (1) {
     i4 = HEAP32[i5 >> 2] | 0;
     if (!i4) {
      i14 = 84;
      break L95;
     }
     i4 = _wctomb(i24, i4) | 0;
     i6 = i4 + i6 | 0;
     if ((i6 | 0) > (i2 | 0)) {
      i14 = 84;
      break L95;
     }
     _out(i15, i24, i4);
     if (i6 >>> 0 >= i2 >>> 0) {
      i14 = 84;
      break;
     } else i5 = i5 + 4 | 0;
    }
   }
  } while (0);
  if ((i14 | 0) == 67) {
   i14 = 0;
   i5 = (i2 | 0) != 0 | (i5 | 0) != 0;
   i12 = (i4 | 0) != 0 | i5;
   i5 = ((i5 ^ 1) & 1) + (i18 - i9) | 0;
   i2 = i12 ? i9 : i17;
   i9 = i17;
   i5 = i12 ? ((i4 | 0) > (i5 | 0) ? i4 : i5) : i4;
   i4 = (i4 | 0) > -1 ? i10 & -65537 : i10;
  } else if ((i14 | 0) == 84) {
   i14 = 0;
   _pad(i15, 32, i3, i2, i12 ^ 8192);
   i3 = (i3 | 0) > (i2 | 0) ? i3 : i2;
   i2 = i13;
   continue;
  }
  i11 = i9 - i2 | 0;
  i10 = (i5 | 0) < (i11 | 0) ? i11 : i5;
  i12 = i10 + i6 | 0;
  i3 = (i3 | 0) < (i12 | 0) ? i12 : i3;
  _pad(i15, 32, i3, i12, i4);
  _out(i15, i8, i6);
  _pad(i15, 48, i3, i12, i4 ^ 65536);
  _pad(i15, 48, i10, i11, 0);
  _out(i15, i2, i11);
  _pad(i15, 32, i3, i12, i4 ^ 8192);
  i2 = i13;
 }
 L114 : do if ((i14 | 0) == 87) if (!i15) if (!i7) i1 = 0; else {
  i1 = 1;
  while (1) {
   i2 = HEAP32[i27 + (i1 << 2) >> 2] | 0;
   if (!i2) break;
   _pop_arg(i26 + (i1 << 3) | 0, i2, i25);
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 10) {
    i1 = 1;
    break L114;
   }
  }
  while (1) {
   if (HEAP32[i27 + (i1 << 2) >> 2] | 0) {
    i1 = -1;
    break L114;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 10) {
    i1 = 1;
    break;
   }
  }
 } while (0);
 STACKTOP = i28;
 return i1 | 0;
}

function _fmt_fp(i25, d4, i27, i11, i26, i18) {
 i25 = i25 | 0;
 d4 = +d4;
 i27 = i27 | 0;
 i11 = i11 | 0;
 i26 = i26 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 i3 = i28 + 8 | 0;
 i13 = i28;
 i24 = i28 + 524 | 0;
 i23 = i24;
 i5 = i28 + 512 | 0;
 HEAP32[i13 >> 2] = 0;
 i22 = i5 + 12 | 0;
 ___DOUBLE_BITS(d4) | 0;
 if ((tempRet0 | 0) < 0) {
  d4 = -d4;
  i20 = 1;
  i19 = 367547;
 } else {
  i20 = (i26 & 2049 | 0) != 0 & 1;
  i19 = (i26 & 2048 | 0) == 0 ? ((i26 & 1 | 0) == 0 ? 367548 : 367553) : 367550;
 }
 ___DOUBLE_BITS(d4) | 0;
 i21 = tempRet0 & 2146435072;
 do if (i21 >>> 0 < 2146435072 | (i21 | 0) == 2146435072 & 0 < 0) {
  d4 = +_frexpl(d4, i13) * 2.0;
  i1 = d4 != 0.0;
  if (i1) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
  i15 = i18 | 32;
  if ((i15 | 0) == 97) {
   i10 = i18 & 32;
   i9 = (i10 | 0) == 0 ? i19 : i19 + 9 | 0;
   i8 = i20 | 2;
   i1 = 12 - i11 | 0;
   do if (!(i11 >>> 0 > 11 | (i1 | 0) == 0)) {
    d6 = 8.0;
    do {
     i1 = i1 + -1 | 0;
     d6 = d6 * 16.0;
    } while ((i1 | 0) != 0);
    if ((HEAP8[i9 >> 0] | 0) == 45) {
     d4 = -(d6 + (-d4 - d6));
     break;
    } else {
     d4 = d4 + d6 - d6;
     break;
    }
   } while (0);
   i2 = HEAP32[i13 >> 2] | 0;
   i1 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   i1 = _fmt_u(i1, ((i1 | 0) < 0) << 31 >> 31, i22) | 0;
   if ((i1 | 0) == (i22 | 0)) {
    i1 = i5 + 11 | 0;
    HEAP8[i1 >> 0] = 48;
   }
   HEAP8[i1 + -1 >> 0] = (i2 >> 31 & 2) + 43;
   i7 = i1 + -2 | 0;
   HEAP8[i7 >> 0] = i18 + 15;
   i5 = (i11 | 0) < 1;
   i3 = (i26 & 8 | 0) == 0;
   i1 = i24;
   do {
    i21 = ~~d4;
    i2 = i1 + 1 | 0;
    HEAP8[i1 >> 0] = HEAPU8[367578 + i21 >> 0] | i10;
    d4 = (d4 - +(i21 | 0)) * 16.0;
    if ((i2 - i23 | 0) == 1) if (i3 & (i5 & d4 == 0.0)) i1 = i2; else {
     HEAP8[i2 >> 0] = 46;
     i1 = i1 + 2 | 0;
    } else i1 = i2;
   } while (d4 != 0.0);
   i21 = i1 - i23 | 0;
   i23 = i22 - i7 | 0;
   i22 = (i11 | 0) != 0 & (i21 + -2 | 0) < (i11 | 0) ? i11 + 2 | 0 : i21;
   i1 = i23 + i8 + i22 | 0;
   _pad(i25, 32, i27, i1, i26);
   _out(i25, i9, i8);
   _pad(i25, 48, i27, i1, i26 ^ 65536);
   _out(i25, i24, i21);
   _pad(i25, 48, i22 - i21 | 0, 0, 0);
   _out(i25, i7, i23);
   _pad(i25, 32, i27, i1, i26 ^ 8192);
   break;
  }
  i2 = (i11 | 0) < 0 ? 6 : i11;
  if (i1) {
   i1 = (HEAP32[i13 >> 2] | 0) + -28 | 0;
   HEAP32[i13 >> 2] = i1;
   d4 = d4 * 268435456.0;
  } else i1 = HEAP32[i13 >> 2] | 0;
  i21 = (i1 | 0) < 0 ? i3 : i3 + 288 | 0;
  i3 = i21;
  do {
   i17 = ~~d4 >>> 0;
   HEAP32[i3 >> 2] = i17;
   i3 = i3 + 4 | 0;
   d4 = (d4 - +(i17 >>> 0)) * 1.0e9;
  } while (d4 != 0.0);
  if ((i1 | 0) > 0) {
   i5 = i21;
   i8 = i3;
   while (1) {
    i7 = (i1 | 0) < 29 ? i1 : 29;
    i1 = i8 + -4 | 0;
    if (i1 >>> 0 >= i5 >>> 0) {
     i3 = 0;
     do {
      i16 = _bitshift64Shl(HEAP32[i1 >> 2] | 0, 0, i7 | 0) | 0;
      i16 = _i64Add(i16 | 0, tempRet0 | 0, i3 | 0, 0) | 0;
      i17 = tempRet0;
      i14 = ___uremdi3(i16 | 0, i17 | 0, 1e9, 0) | 0;
      HEAP32[i1 >> 2] = i14;
      i3 = ___udivdi3(i16 | 0, i17 | 0, 1e9, 0) | 0;
      i1 = i1 + -4 | 0;
     } while (i1 >>> 0 >= i5 >>> 0);
     if (i3) {
      i5 = i5 + -4 | 0;
      HEAP32[i5 >> 2] = i3;
     }
    }
    i3 = i8;
    while (1) {
     if (i3 >>> 0 <= i5 >>> 0) break;
     i1 = i3 + -4 | 0;
     if (!(HEAP32[i1 >> 2] | 0)) i3 = i1; else break;
    }
    i1 = (HEAP32[i13 >> 2] | 0) - i7 | 0;
    HEAP32[i13 >> 2] = i1;
    if ((i1 | 0) > 0) i8 = i3; else break;
   }
  } else i5 = i21;
  if ((i1 | 0) < 0) {
   i11 = ((i2 + 25 | 0) / 9 | 0) + 1 | 0;
   i12 = (i15 | 0) == 102;
   do {
    i10 = 0 - i1 | 0;
    i10 = (i10 | 0) < 9 ? i10 : 9;
    if (i5 >>> 0 < i3 >>> 0) {
     i7 = (1 << i10) + -1 | 0;
     i8 = 1e9 >>> i10;
     i9 = 0;
     i1 = i5;
     do {
      i17 = HEAP32[i1 >> 2] | 0;
      HEAP32[i1 >> 2] = (i17 >>> i10) + i9;
      i9 = Math_imul(i17 & i7, i8) | 0;
      i1 = i1 + 4 | 0;
     } while (i1 >>> 0 < i3 >>> 0);
     i1 = (HEAP32[i5 >> 2] | 0) == 0 ? i5 + 4 | 0 : i5;
     if (!i9) {
      i5 = i1;
      i1 = i3;
     } else {
      HEAP32[i3 >> 2] = i9;
      i5 = i1;
      i1 = i3 + 4 | 0;
     }
    } else {
     i5 = (HEAP32[i5 >> 2] | 0) == 0 ? i5 + 4 | 0 : i5;
     i1 = i3;
    }
    i3 = i12 ? i21 : i5;
    i3 = (i1 - i3 >> 2 | 0) > (i11 | 0) ? i3 + (i11 << 2) | 0 : i1;
    i1 = (HEAP32[i13 >> 2] | 0) + i10 | 0;
    HEAP32[i13 >> 2] = i1;
   } while ((i1 | 0) < 0);
   i1 = i5;
   i11 = i3;
  } else {
   i1 = i5;
   i11 = i3;
  }
  i17 = i21;
  if (i1 >>> 0 < i11 >>> 0) {
   i3 = (i17 - i1 >> 2) * 9 | 0;
   i7 = HEAP32[i1 >> 2] | 0;
   if (i7 >>> 0 >= 10) {
    i5 = 10;
    do {
     i5 = i5 * 10 | 0;
     i3 = i3 + 1 | 0;
    } while (i7 >>> 0 >= i5 >>> 0);
   }
  } else i3 = 0;
  i12 = (i15 | 0) == 103;
  i14 = (i2 | 0) != 0;
  i5 = i2 - ((i15 | 0) != 102 ? i3 : 0) + ((i14 & i12) << 31 >> 31) | 0;
  if ((i5 | 0) < (((i11 - i17 >> 2) * 9 | 0) + -9 | 0)) {
   i5 = i5 + 9216 | 0;
   i10 = i21 + 4 + (((i5 | 0) / 9 | 0) + -1024 << 2) | 0;
   i5 = ((i5 | 0) % 9 | 0) + 1 | 0;
   if ((i5 | 0) < 9) {
    i7 = 10;
    do {
     i7 = i7 * 10 | 0;
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != 9);
   } else i7 = 10;
   i8 = HEAP32[i10 >> 2] | 0;
   i9 = (i8 >>> 0) % (i7 >>> 0) | 0;
   i5 = (i10 + 4 | 0) == (i11 | 0);
   if (i5 & (i9 | 0) == 0) i5 = i10; else {
    d6 = (((i8 >>> 0) / (i7 >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    i16 = (i7 | 0) / 2 | 0;
    d4 = i9 >>> 0 < i16 >>> 0 ? .5 : i5 & (i9 | 0) == (i16 | 0) ? 1.0 : 1.5;
    if (i20) {
     i16 = (HEAP8[i19 >> 0] | 0) == 45;
     d4 = i16 ? -d4 : d4;
     d6 = i16 ? -d6 : d6;
    }
    i5 = i8 - i9 | 0;
    HEAP32[i10 >> 2] = i5;
    if (d6 + d4 != d6) {
     i16 = i5 + i7 | 0;
     HEAP32[i10 >> 2] = i16;
     if (i16 >>> 0 > 999999999) {
      i3 = i10;
      while (1) {
       i5 = i3 + -4 | 0;
       HEAP32[i3 >> 2] = 0;
       if (i5 >>> 0 < i1 >>> 0) {
        i1 = i1 + -4 | 0;
        HEAP32[i1 >> 2] = 0;
       }
       i16 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
       HEAP32[i5 >> 2] = i16;
       if (i16 >>> 0 > 999999999) i3 = i5; else break;
      }
     } else i5 = i10;
     i3 = (i17 - i1 >> 2) * 9 | 0;
     i8 = HEAP32[i1 >> 2] | 0;
     if (i8 >>> 0 >= 10) {
      i7 = 10;
      do {
       i7 = i7 * 10 | 0;
       i3 = i3 + 1 | 0;
      } while (i8 >>> 0 >= i7 >>> 0);
     }
    } else i5 = i10;
   }
   i5 = i5 + 4 | 0;
   i5 = i11 >>> 0 > i5 >>> 0 ? i5 : i11;
   i16 = i1;
  } else {
   i5 = i11;
   i16 = i1;
  }
  i15 = i5;
  while (1) {
   if (i15 >>> 0 <= i16 >>> 0) {
    i13 = 0;
    break;
   }
   i1 = i15 + -4 | 0;
   if (!(HEAP32[i1 >> 2] | 0)) i15 = i1; else {
    i13 = 1;
    break;
   }
  }
  i11 = 0 - i3 | 0;
  do if (i12) {
   i1 = ((i14 ^ 1) & 1) + i2 | 0;
   if ((i1 | 0) > (i3 | 0) & (i3 | 0) > -5) {
    i8 = i18 + -1 | 0;
    i2 = i1 + -1 - i3 | 0;
   } else {
    i8 = i18 + -2 | 0;
    i2 = i1 + -1 | 0;
   }
   i1 = i26 & 8;
   if (!i1) {
    if (i13) {
     i7 = HEAP32[i15 + -4 >> 2] | 0;
     if (!i7) i5 = 9; else if (!((i7 >>> 0) % 10 | 0)) {
      i5 = 0;
      i1 = 10;
      do {
       i1 = i1 * 10 | 0;
       i5 = i5 + 1 | 0;
      } while (!((i7 >>> 0) % (i1 >>> 0) | 0 | 0));
     } else i5 = 0;
    } else i5 = 9;
    i1 = ((i15 - i17 >> 2) * 9 | 0) + -9 | 0;
    if ((i8 | 32 | 0) == 102) {
     i10 = i1 - i5 | 0;
     i10 = (i10 | 0) > 0 ? i10 : 0;
     i2 = (i2 | 0) < (i10 | 0) ? i2 : i10;
     i10 = 0;
     break;
    } else {
     i10 = i1 + i3 - i5 | 0;
     i10 = (i10 | 0) > 0 ? i10 : 0;
     i2 = (i2 | 0) < (i10 | 0) ? i2 : i10;
     i10 = 0;
     break;
    }
   } else i10 = i1;
  } else {
   i8 = i18;
   i10 = i26 & 8;
  } while (0);
  i12 = i2 | i10;
  i7 = (i12 | 0) != 0 & 1;
  i9 = (i8 | 32 | 0) == 102;
  if (i9) {
   i14 = 0;
   i1 = (i3 | 0) > 0 ? i3 : 0;
  } else {
   i1 = (i3 | 0) < 0 ? i11 : i3;
   i1 = _fmt_u(i1, ((i1 | 0) < 0) << 31 >> 31, i22) | 0;
   i5 = i22;
   if ((i5 - i1 | 0) < 2) do {
    i1 = i1 + -1 | 0;
    HEAP8[i1 >> 0] = 48;
   } while ((i5 - i1 | 0) < 2);
   HEAP8[i1 + -1 >> 0] = (i3 >> 31 & 2) + 43;
   i1 = i1 + -2 | 0;
   HEAP8[i1 >> 0] = i8;
   i14 = i1;
   i1 = i5 - i1 | 0;
  }
  i1 = i20 + 1 + i2 + i7 + i1 | 0;
  _pad(i25, 32, i27, i1, i26);
  _out(i25, i19, i20);
  _pad(i25, 48, i27, i1, i26 ^ 65536);
  if (i9) {
   i7 = i16 >>> 0 > i21 >>> 0 ? i21 : i16;
   i10 = i24 + 9 | 0;
   i8 = i10;
   i9 = i24 + 8 | 0;
   i5 = i7;
   do {
    i3 = _fmt_u(HEAP32[i5 >> 2] | 0, 0, i10) | 0;
    if ((i5 | 0) == (i7 | 0)) {
     if ((i3 | 0) == (i10 | 0)) {
      HEAP8[i9 >> 0] = 48;
      i3 = i9;
     }
    } else if (i3 >>> 0 > i24 >>> 0) {
     _memset(i24 | 0, 48, i3 - i23 | 0) | 0;
     do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
    }
    _out(i25, i3, i8 - i3 | 0);
    i5 = i5 + 4 | 0;
   } while (i5 >>> 0 <= i21 >>> 0);
   if (i12 | 0) _out(i25, 367594, 1);
   if (i5 >>> 0 < i15 >>> 0 & (i2 | 0) > 0) while (1) {
    i3 = _fmt_u(HEAP32[i5 >> 2] | 0, 0, i10) | 0;
    if (i3 >>> 0 > i24 >>> 0) {
     _memset(i24 | 0, 48, i3 - i23 | 0) | 0;
     do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
    }
    _out(i25, i3, (i2 | 0) < 9 ? i2 : 9);
    i5 = i5 + 4 | 0;
    i3 = i2 + -9 | 0;
    if (!(i5 >>> 0 < i15 >>> 0 & (i2 | 0) > 9)) {
     i2 = i3;
     break;
    } else i2 = i3;
   }
   _pad(i25, 48, i2 + 9 | 0, 9, 0);
  } else {
   i12 = i13 ? i15 : i16 + 4 | 0;
   if ((i2 | 0) > -1) {
    i13 = i24 + 9 | 0;
    i10 = (i10 | 0) == 0;
    i11 = i13;
    i8 = 0 - i23 | 0;
    i9 = i24 + 8 | 0;
    i7 = i16;
    do {
     i3 = _fmt_u(HEAP32[i7 >> 2] | 0, 0, i13) | 0;
     if ((i3 | 0) == (i13 | 0)) {
      HEAP8[i9 >> 0] = 48;
      i3 = i9;
     }
     do if ((i7 | 0) == (i16 | 0)) {
      i5 = i3 + 1 | 0;
      _out(i25, i3, 1);
      if (i10 & (i2 | 0) < 1) {
       i3 = i5;
       break;
      }
      _out(i25, 367594, 1);
      i3 = i5;
     } else {
      if (i3 >>> 0 <= i24 >>> 0) break;
      _memset(i24 | 0, 48, i3 + i8 | 0) | 0;
      do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
     } while (0);
     i23 = i11 - i3 | 0;
     _out(i25, i3, (i2 | 0) > (i23 | 0) ? i23 : i2);
     i2 = i2 - i23 | 0;
     i7 = i7 + 4 | 0;
    } while (i7 >>> 0 < i12 >>> 0 & (i2 | 0) > -1);
   }
   _pad(i25, 48, i2 + 18 | 0, 18, 0);
   _out(i25, i14, i22 - i14 | 0);
  }
  _pad(i25, 32, i27, i1, i26 ^ 8192);
 } else {
  i24 = (i18 & 32 | 0) != 0;
  i1 = i20 + 3 | 0;
  _pad(i25, 32, i27, i1, i26 & -65537);
  _out(i25, i19, i20);
  _out(i25, d4 != d4 | 0.0 != 0.0 ? (i24 ? 367609 : 367574) : i24 ? 367566 : 367570, 3);
  _pad(i25, 32, i27, i1, i26 ^ 8192);
 } while (0);
 STACKTOP = i28;
 return ((i1 | 0) < (i27 | 0) ? i27 : i1) | 0;
}

function _PS_Conv_ToFixed(i17, i16, i4) {
 i17 = i17 | 0;
 i16 = i16 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0, i19 = 0;
 i1 = HEAP32[i17 >> 2] | 0;
 if (i1 >>> 0 >= i16 >>> 0) {
  i18 = 0;
  return i18 | 0;
 }
 i3 = HEAP8[i1 >> 0] | 0;
 L4 : do switch (i3 << 24 >> 24) {
 case 43:
 case 45:
  {
   i2 = i1 + 1 | 0;
   if ((i2 | 0) == (i16 | 0)) {
    i18 = 0;
    return i18 | 0;
   } else {
    i18 = i3 << 24 >> 24 == 45 & 1;
    i1 = i2;
    i3 = HEAP8[i2 >> 0] | 0;
    break L4;
   }
  }
 default:
  i18 = 0;
 } while (0);
 i5 = i1;
 do if (i3 << 24 >> 24 == 46) {
  i1 = 0;
  i7 = 0;
 } else {
  L12 : do if (i1 >>> 0 < i16 >>> 0) {
   switch (i3 << 24 >> 24) {
   case 43:
   case 45:
    {
     i2 = i1 + 1 | 0;
     if ((i2 | 0) == (i16 | 0)) {
      i2 = 0;
      break L12;
     } else i8 = i3 << 24 >> 24 == 45 & 1;
     break;
    }
   default:
    {
     i2 = i1;
     i8 = 0;
    }
   }
   L17 : do if (i2 >>> 0 < i16 >>> 0) {
    i7 = 0;
    i6 = 0;
    while (1) {
     i3 = HEAP8[i2 >> 0] | 0;
     switch (i3 << 24 >> 24) {
     case 0:
     case 12:
     case 9:
     case 10:
     case 13:
     case 32:
      {
       i3 = i7;
       break L17;
      }
     default:
      {}
     }
     if (i3 << 24 >> 24 < 0) {
      i3 = i7;
      break L17;
     }
     i15 = i3 & 127;
     i3 = HEAP8[284035 + i15 >> 0] | 0;
     if ((i15 + -48 | 0) >>> 0 >= 10) {
      i3 = i7;
      break L17;
     }
     if ((i7 | 0) > 214748364) {
      i3 = i7;
      i6 = 1;
     } else {
      i15 = (i7 | 0) == 214748364 & i3 << 24 >> 24 > 7;
      i3 = i15 ? 214748364 : (i7 * 10 | 0) + (i3 << 24 >> 24) | 0;
      i6 = i15 ? 1 : i6;
     }
     i2 = i2 + 1 | 0;
     if (i2 >>> 0 < i16 >>> 0) i7 = i3; else break L17;
    }
   } else {
    i3 = 0;
    i6 = 0;
   } while (0);
   i11 = i6 << 24 >> 24 == 0 ? i3 : 2147483647;
   i11 = i8 << 24 >> 24 == 0 ? i11 : 0 - i11 | 0;
   i6 = i2;
   if ((i2 | 0) == (i1 | 0)) i2 = 0; else {
    if (i2 >>> 0 < i16 >>> 0) if ((HEAP8[i2 >> 0] | 0) == 35) {
     i3 = i2 + 1 | 0;
     if (i3 >>> 0 >= i16 >>> 0 | (i11 + -2 | 0) >>> 0 > 34) {
      i2 = 0;
      break;
     }
     i3 = HEAP8[i3 >> 0] | 0;
     switch (i3 << 24 >> 24) {
     case 43:
     case 45:
      {
       if ((i2 + 2 | 0) == (i16 | 0)) {
        i2 = 0;
        break L12;
       } else {
        i6 = 2;
        i12 = i3 << 24 >> 24 == 45 & 1;
       }
       break;
      }
     default:
      {
       i6 = 1;
       i12 = 0;
      }
     }
     i9 = 2147483647 / (i11 | 0) | 0;
     L35 : do if ((i2 + i6 | 0) >>> 0 < i16 >>> 0) {
      i10 = (2147483647 % (i11 | 0) | 0) << 24 >> 24;
      i8 = 0;
      i3 = 0;
      while (1) {
       i7 = HEAP8[i2 + i6 >> 0] | 0;
       switch (i7 << 24 >> 24) {
       case 0:
       case 12:
       case 9:
       case 10:
       case 13:
       case 32:
        {
         i7 = i8;
         break L35;
        }
       default:
        {}
       }
       if (i7 << 24 >> 24 < 0) {
        i7 = i8;
        break L35;
       }
       i15 = HEAP8[284035 + (i7 & 127) >> 0] | 0;
       i7 = i15 << 24 >> 24;
       if (!(i15 << 24 >> 24 > -1 & (i7 | 0) < (i11 | 0))) {
        i7 = i8;
        break L35;
       }
       if ((i8 | 0) > (i9 | 0)) {
        i7 = i8;
        i3 = 1;
       } else {
        i15 = (i8 | 0) == (i9 | 0) & (i7 | 0) > (i10 | 0);
        i7 = i7 + (Math_imul(i8, i11) | 0) | 0;
        i7 = i15 ? i9 : i7;
        i3 = i15 ? 1 : i3;
       }
       i6 = i6 + 1 | 0;
       if ((i2 + i6 | 0) >>> 0 < i16 >>> 0) i8 = i7; else break L35;
      }
     } else {
      i7 = 0;
      i3 = 0;
     } while (0);
     i3 = i3 << 24 >> 24 == 0 ? i7 : 2147483647;
     if ((i6 | 0) == 1) {
      i2 = 0;
      break;
     } else {
      i3 = i12 << 24 >> 24 == 0 ? i3 : 0 - i3 | 0;
      i5 = i2 + i6 | 0;
     }
    } else {
     i3 = i11;
     i5 = i6;
    } else {
     i3 = i11;
     i5 = i6;
    }
    i2 = i3;
   }
  } else i2 = 0; while (0);
  if ((i5 | 0) == (i1 | 0)) {
   i18 = 0;
   return i18 | 0;
  } else {
   i7 = (i2 | 0) > 32767;
   i1 = i7 ? i2 : i2 << 16;
   i7 = i7 & 1;
   break;
  }
 } while (0);
 i6 = i5;
 if (i6 >>> 0 < i16 >>> 0) if ((HEAP8[i6 >> 0] | 0) == 46) {
  i8 = (i1 | 0) == 0;
  i3 = 1;
  i2 = 0;
  i5 = i6;
  L55 : while (1) {
   if ((i2 | 0) >= 214748364) {
    i13 = 38;
    break;
   }
   while (1) {
    i5 = i5 + 1 | 0;
    if (i5 >>> 0 >= i16 >>> 0) break L55;
    i6 = HEAP8[i5 >> 0] | 0;
    switch (i6 << 24 >> 24) {
    case 0:
    case 12:
    case 9:
    case 10:
    case 13:
    case 32:
     break L55;
    default:
     {}
    }
    if (i6 << 24 >> 24 < 0) break L55;
    i6 = i6 & 127;
    if ((i6 + -48 | 0) >>> 0 > 9) break L55;
    i2 = (HEAP8[284035 + i6 >> 0] | 0) + (i2 * 10 | 0) | 0;
    if (!(i8 & (i4 | 0) > 0)) break;
    i4 = i4 + -1 | 0;
    if ((i2 | 0) >= 214748364) {
     i13 = 38;
     break L55;
    }
   }
   i3 = i3 * 10 | 0;
   if ((i3 | 0) >= 214748364) {
    i13 = 49;
    break;
   }
  }
  L65 : do if ((i13 | 0) == 38) while (1) {
   i5 = i5 + 1 | 0;
   if (i5 >>> 0 >= i16 >>> 0) break L65;
   i6 = HEAP8[i5 >> 0] | 0;
   switch (i6 << 24 >> 24) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    break L65;
   default:
    {}
   }
   if (i6 << 24 >> 24 < 0) break L65;
   if (((i6 & 127) + -48 | 0) >>> 0 > 9) break L65;
  } else if ((i13 | 0) == 49) if (i8) while (1) {
   i5 = i5 + 1 | 0;
   if (i5 >>> 0 >= i16 >>> 0) break L65;
   i6 = HEAP8[i5 >> 0] | 0;
   switch (i6 << 24 >> 24) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    break L65;
   default:
    {}
   }
   if (i6 << 24 >> 24 < 0) break L65;
   if (((i6 & 127) + -48 | 0) >>> 0 > 9) break L65;
  } else while (1) {
   i5 = i5 + 1 | 0;
   if (i5 >>> 0 >= i16 >>> 0) break L65;
   i6 = HEAP8[i5 >> 0] | 0;
   switch (i6 << 24 >> 24) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    break L65;
   default:
    {}
   }
   if (i6 << 24 >> 24 < 0) break L65;
   if (((i6 & 127) + -48 | 0) >>> 0 > 9) break L65;
  } while (0);
 } else {
  i3 = 1;
  i2 = 0;
 } else {
  i3 = 1;
  i2 = 0;
 }
 i15 = i5;
 i6 = i15 + 1 | 0;
 L86 : do if (i6 >>> 0 < i16 >>> 0) {
  switch (HEAP8[i15 >> 0] | 0) {
  case 69:
  case 101:
   break;
  default:
   {
    i8 = 0;
    break L86;
   }
  }
  i5 = HEAP8[i6 >> 0] | 0;
  switch (i5 << 24 >> 24) {
  case 43:
  case 45:
   {
    if ((i15 + 2 | 0) == (i16 | 0)) {
     i18 = 0;
     return i18 | 0;
    } else {
     i6 = 2;
     i10 = i5 << 24 >> 24 == 45 & 1;
    }
    break;
   }
  default:
   {
    i6 = 1;
    i10 = 0;
   }
  }
  L93 : do if ((i15 + i6 | 0) >>> 0 < i16 >>> 0) {
   i9 = 0;
   i8 = 0;
   i5 = i6;
   while (1) {
    i6 = HEAP8[i15 + i5 >> 0] | 0;
    switch (i6 << 24 >> 24) {
    case 0:
    case 12:
    case 9:
    case 10:
    case 13:
    case 32:
     break L93;
    default:
     {}
    }
    if (i6 << 24 >> 24 < 0) break L93;
    i14 = i6 & 127;
    i6 = HEAP8[284035 + i14 >> 0] | 0;
    if ((i14 + -48 | 0) >>> 0 >= 10) break L93;
    if ((i9 | 0) > 214748364) {
     i6 = i9;
     i8 = 1;
    } else {
     i14 = (i9 | 0) == 214748364 & i6 << 24 >> 24 > 7;
     i6 = i14 ? 214748364 : (i9 * 10 | 0) + (i6 << 24 >> 24) | 0;
     i8 = i14 ? 1 : i8;
    }
    i5 = i5 + 1 | 0;
    if ((i15 + i5 | 0) >>> 0 < i16 >>> 0) i9 = i6; else {
     i9 = i6;
     break L93;
    }
   }
  } else {
   i9 = 0;
   i8 = 0;
   i5 = i6;
  } while (0);
  i6 = i15 + i5 | 0;
  i13 = i8 << 24 >> 24 == 0 ? i9 : 2147483647;
  i13 = i10 << 24 >> 24 == 0 ? i13 : 0 - i13 | 0;
  if ((i5 | 0) == 1) {
   i18 = 0;
   return i18 | 0;
  }
  if (i6 >>> 0 < i16 >>> 0) if ((HEAP8[i6 >> 0] | 0) == 35) {
   i14 = i5 + 1 | 0;
   i6 = i15 + i14 | 0;
   if ((i13 + -2 | 0) >>> 0 > 34 | i6 >>> 0 >= i16 >>> 0) {
    i18 = 0;
    return i18 | 0;
   }
   i6 = HEAP8[i6 >> 0] | 0;
   switch (i6 << 24 >> 24) {
   case 43:
   case 45:
    {
     i5 = i5 + 2 | 0;
     if ((i15 + i5 | 0) == (i16 | 0)) {
      i18 = 0;
      return i18 | 0;
     } else i12 = i6 << 24 >> 24 == 45 & 1;
     break;
    }
   default:
    {
     i5 = i14;
     i12 = 0;
    }
   }
   i10 = 2147483647 / (i13 | 0) | 0;
   L116 : do if ((i15 + i5 | 0) >>> 0 < i16 >>> 0) {
    i11 = (2147483647 % (i13 | 0) | 0) << 24 >> 24;
    i9 = 0;
    i6 = 0;
    while (1) {
     i8 = HEAP8[i15 + i5 >> 0] | 0;
     switch (i8 << 24 >> 24) {
     case 0:
     case 12:
     case 9:
     case 10:
     case 13:
     case 32:
      {
       i8 = i5;
       break L116;
      }
     default:
      {}
     }
     if (i8 << 24 >> 24 < 0) {
      i8 = i5;
      break L116;
     }
     i19 = HEAP8[284035 + (i8 & 127) >> 0] | 0;
     i8 = i19 << 24 >> 24;
     if (!(i19 << 24 >> 24 > -1 & (i8 | 0) < (i13 | 0))) {
      i8 = i5;
      break L116;
     }
     if ((i9 | 0) > (i10 | 0)) i6 = 1; else {
      i19 = (i9 | 0) == (i10 | 0) & (i8 | 0) > (i11 | 0);
      i9 = i8 + (Math_imul(i9, i13) | 0) | 0;
      i9 = i19 ? i10 : i9;
      i6 = i19 ? 1 : i6;
     }
     i5 = i5 + 1 | 0;
     if ((i15 + i5 | 0) >>> 0 >= i16 >>> 0) {
      i8 = i5;
      break L116;
     }
    }
   } else {
    i9 = 0;
    i6 = 0;
    i8 = i5;
   } while (0);
   i5 = i6 << 24 >> 24 == 0 ? i9 : 2147483647;
   if ((i8 | 0) == (i14 | 0) | (i8 | 0) == 1) {
    i19 = 0;
    return i19 | 0;
   } else {
    i6 = i12 << 24 >> 24 == 0 ? i5 : 0 - i5 | 0;
    i5 = i8;
   }
  } else i6 = i13; else i6 = i13;
  i8 = (i6 | 0) < -1e3 & 1;
  i7 = (i6 | 0) > 1e3 ? 1 : i7;
  i4 = ((i6 + 1e3 | 0) >>> 0 > 2e3 ? 0 : i6) + i4 | 0;
  i5 = i15 + i5 | 0;
 } else i8 = 0; while (0);
 HEAP32[i17 >> 2] = i5;
 if (!(i2 | i1)) {
  i19 = 0;
  return i19 | 0;
 }
 L133 : do if (!(i7 << 24 >> 24)) {
  if (i8 << 24 >> 24) {
   i19 = 0;
   return i19 | 0;
  }
  if ((i4 | 0) > 0) while (1) {
   if ((i1 | 0) > 214748363) {
    i1 = 2147483647;
    break L133;
   }
   i1 = i1 * 10 | 0;
   if ((i2 | 0) > 214748363) {
    if ((i3 | 0) == 1) {
     i1 = 2147483647;
     break L133;
    }
    i3 = (i3 | 0) / 10 | 0;
   } else i2 = i2 * 10 | 0;
   i5 = i4 + -1 | 0;
   if ((i4 | 0) > 1) i4 = i5; else {
    i4 = i5;
    break;
   }
  }
  L148 : do if ((i4 | 0) < 0) {
   i5 = i4;
   while (1) {
    i4 = (i3 | 0) < 214748364;
    i2 = i4 ? i2 : (i2 | 0) / 10 | 0;
    if (!((i1 + 9 | 0) >>> 0 > 18 | (i2 | 0) != 0)) {
     i1 = 0;
     break;
    }
    i3 = i4 ? i3 * 10 | 0 : i3;
    i1 = (i1 | 0) / 10 | 0;
    if ((i5 | 0) < -1) i5 = i5 + 1 | 0; else break L148;
   }
   return i1 | 0;
  } while (0);
  if (i2) i1 = (_FT_DivFix(i2, i3) | 0) + i1 | 0;
 } else i1 = 2147483647; while (0);
 i19 = i18 << 24 >> 24 == 0 ? i1 : 0 - i1 | 0;
 return i19 | 0;
}

function _tt_sbit_decoder_load_image(i20, i13, i21, i22) {
 i20 = i20 | 0;
 i13 = i13 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i23 = 0, i24 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i23 = i24;
 i7 = (HEAP32[i20 + 36 >> 2] | 0) + (HEAP32[i20 + 28 >> 2] | 0) | 0;
 i11 = HEAP32[i20 + 40 >> 2] | 0;
 i5 = HEAP32[i20 + 32 >> 2] | 0;
 if (!i5) {
  i23 = 6;
  STACKTOP = i24;
  return i23 | 0;
 } else i6 = i7;
 while (1) {
  i8 = HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0];
  if (i8 >>> 0 <= i13 >>> 0) if ((HEAPU8[i6 + 2 >> 0] << 8 | HEAPU8[i6 + 3 >> 0]) >>> 0 >= i13 >>> 0) break;
  i5 = i5 + -1 | 0;
  if (!i5) {
   i12 = 6;
   i10 = 64;
   break;
  } else i6 = i6 + 8 | 0;
 }
 if ((i10 | 0) == 64) {
  STACKTOP = i24;
  return i12 | 0;
 }
 i5 = HEAPU8[i6 + 5 >> 0] << 16 | HEAPU8[i6 + 4 >> 0] << 24 | HEAPU8[i6 + 6 >> 0] << 8 | HEAPU8[i6 + 7 >> 0];
 i10 = i11;
 if (i5 >>> 0 > (i10 - i7 | 0) >>> 0) {
  i23 = 8;
  STACKTOP = i24;
  return i23 | 0;
 }
 i5 = i7 + i5 | 0;
 if ((i5 + 8 | 0) >>> 0 > i11 >>> 0) {
  i23 = 6;
  STACKTOP = i24;
  return i23 | 0;
 }
 i5 = i5 + 2 | 0;
 i9 = i5 + -2 | 0;
 i5 = i5 + 2 | 0;
 i15 = i5 + -2 | 0;
 i15 = HEAPU8[i15 >> 0] << 8 | HEAPU8[i15 + 1 >> 0];
 i5 = i5 + 4 | 0;
 i14 = i5 + -4 | 0;
 i14 = HEAPU8[i14 + 1 >> 0] << 16 | HEAPU8[i14 >> 0] << 24 | HEAPU8[i14 + 2 >> 0] << 8 | HEAPU8[i14 + 3 >> 0];
 L17 : do switch (((HEAPU8[i9 >> 0] << 8 | HEAPU8[i9 + 1 >> 0]) & 65535) << 16 >> 16) {
 case 1:
  {
   i2 = i5 + (i13 - i8 << 2) | 0;
   if ((i2 + 8 | 0) >>> 0 > i11 >>> 0) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   i4 = i2 + 4 | 0;
   i2 = i4 + -4 | 0;
   i2 = HEAPU8[i2 + 1 >> 0] << 16 | HEAPU8[i2 >> 0] << 24 | HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0];
   i4 = i4 + 4 + -4 | 0;
   i4 = HEAPU8[i4 + 1 >> 0] << 16 | HEAPU8[i4 >> 0] << 24 | HEAPU8[i4 + 2 >> 0] << 8 | HEAPU8[i4 + 3 >> 0];
   if ((i2 | 0) == (i4 | 0)) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   break;
  }
 case 2:
  {
   if ((i5 + 12 | 0) >>> 0 > i11 >>> 0) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   i2 = i5 + 4 | 0;
   i6 = i2 + -4 | 0;
   i6 = HEAPU8[i6 + 1 >> 0] << 16 | HEAPU8[i6 >> 0] << 24 | HEAPU8[i6 + 2 >> 0] << 8 | HEAPU8[i6 + 3 >> 0];
   i4 = HEAP32[i20 + 12 >> 2] | 0;
   i5 = i2 + 5 | 0;
   if (i5 >>> 0 > i11 >>> 0) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   HEAP16[i4 >> 1] = HEAPU8[i2 >> 0] | 0;
   HEAP16[i4 + 2 >> 1] = HEAPU8[i2 + 1 >> 0] | 0;
   HEAP16[i4 + 4 >> 1] = HEAP8[i2 + 2 >> 0] | 0;
   HEAP16[i4 + 6 >> 1] = HEAP8[i2 + 3 >> 0] | 0;
   HEAP16[i4 + 8 >> 1] = HEAPU8[i2 + 4 >> 0] | 0;
   if ((i2 + 8 | 0) >>> 0 > i11 >>> 0) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   } else {
    HEAP16[i4 + 10 >> 1] = HEAP8[i5 >> 0] | 0;
    HEAP16[i4 + 12 >> 1] = HEAP8[i2 + 6 >> 0] | 0;
    HEAP16[i4 + 14 >> 1] = HEAPU8[i2 + 7 >> 0] | 0;
    HEAP8[i20 + 16 >> 0] = 1;
    i4 = Math_imul(i6, i13 - i8 | 0) | 0;
    i2 = i4;
    i4 = i4 + i6 | 0;
    break L17;
   }
  }
 case 3:
  {
   i2 = i5 + (i13 - i8 << 1) | 0;
   if ((i2 + 4 | 0) >>> 0 > i11 >>> 0) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   i4 = i2 + 2 | 0;
   i2 = i4 + -2 | 0;
   i2 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
   i4 = i4 + 2 + -2 | 0;
   i4 = HEAPU8[i4 >> 0] << 8 | HEAPU8[i4 + 1 >> 0];
   if ((i2 | 0) == (i4 | 0)) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   break;
  }
 case 4:
  {
   i6 = i5 + 4 | 0;
   if (i6 >>> 0 > i11 >>> 0) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   i7 = i6 + -4 | 0;
   i7 = HEAPU8[i7 + 1 >> 0] << 16 | HEAPU8[i7 >> 0] << 24 | HEAPU8[i7 + 2 >> 0] << 8 | HEAPU8[i7 + 3 >> 0];
   if ((i6 + 4 | 0) >>> 0 > i11 >>> 0) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   if (i7 | 0 ? i7 >>> 0 <= ((i10 - i6 >> 2) + -1 | 0) >>> 0 : 0) i5 = 0; else {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   while (1) {
    if ((HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0] | 0) == (i13 | 0)) {
     i10 = 20;
     break;
    }
    i5 = i5 + 1 | 0;
    if (i5 >>> 0 >= i7 >>> 0) {
     i12 = 6;
     i10 = 64;
     break;
    } else i6 = i6 + 4 | 0;
   }
   if ((i10 | 0) == 20) {
    i2 = HEAPU8[i6 + 2 >> 0] << 8 | HEAPU8[i6 + 3 >> 0];
    i4 = HEAPU8[i6 + 6 >> 0] << 8 | HEAPU8[i6 + 7 >> 0];
    break L17;
   } else if ((i10 | 0) == 64) {
    STACKTOP = i24;
    return i12 | 0;
   }
   break;
  }
 case 19:
 case 5:
  {
   if ((i5 + 16 | 0) >>> 0 > i11 >>> 0) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   i7 = i5 + 4 | 0;
   i9 = HEAPU8[i5 + 1 >> 0] << 16 | HEAPU8[i5 >> 0] << 24 | HEAPU8[i5 + 2 >> 0] << 8 | HEAPU8[i5 + 3 >> 0];
   i5 = HEAP32[i20 + 12 >> 2] | 0;
   i6 = i7 + 5 | 0;
   if (i6 >>> 0 > i11 >>> 0) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   HEAP16[i5 >> 1] = HEAPU8[i7 >> 0] | 0;
   HEAP16[i5 + 2 >> 1] = HEAPU8[i7 + 1 >> 0] | 0;
   HEAP16[i5 + 4 >> 1] = HEAP8[i7 + 2 >> 0] | 0;
   HEAP16[i5 + 6 >> 1] = HEAP8[i7 + 3 >> 0] | 0;
   HEAP16[i5 + 8 >> 1] = HEAPU8[i7 + 4 >> 0] | 0;
   i8 = i7 + 8 | 0;
   if (i8 >>> 0 > i11 >>> 0) {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   HEAP16[i5 + 10 >> 1] = HEAP8[i6 >> 0] | 0;
   HEAP16[i5 + 12 >> 1] = HEAP8[i7 + 6 >> 0] | 0;
   HEAP16[i5 + 14 >> 1] = HEAPU8[i7 + 7 >> 0] | 0;
   HEAP8[i20 + 16 >> 0] = 1;
   i5 = i8 + 4 | 0;
   i8 = HEAPU8[i8 + 1 >> 0] << 16 | HEAPU8[i8 >> 0] << 24 | HEAPU8[i8 + 2 >> 0] << 8 | HEAPU8[i8 + 3 >> 0];
   if (i8 >>> 0 <= i10 - i5 >> 1 >>> 0 & (i8 | 0) != 0) i7 = 0; else {
    i23 = 6;
    STACKTOP = i24;
    return i23 | 0;
   }
   while (1) {
    if ((HEAPU8[i5 >> 0] << 8 | HEAPU8[i5 + 1 >> 0] | 0) == (i13 | 0)) {
     i10 = 28;
     break;
    }
    i6 = i7 + 1 | 0;
    if (i6 >>> 0 < i8 >>> 0) {
     i7 = i6;
     i5 = i5 + 2 | 0;
    } else {
     i12 = 6;
     i10 = 64;
     break;
    }
   }
   if ((i10 | 0) == 28) {
    i4 = Math_imul(i7, i9) | 0;
    i2 = i4;
    i4 = i4 + i9 | 0;
    break L17;
   } else if ((i10 | 0) == 64) {
    STACKTOP = i24;
    return i12 | 0;
   }
   break;
  }
 default:
  {
   i23 = 6;
   STACKTOP = i24;
   return i23 | 0;
  }
 } while (0);
 if (i4 >>> 0 < i2 >>> 0) {
  i23 = 6;
  STACKTOP = i24;
  return i23 | 0;
 }
 i7 = i4 - i2 | 0;
 i9 = HEAP32[i20 + 4 >> 2] | 0;
 if ((i4 + i14 | 0) >>> 0 > (HEAP32[i20 + 24 >> 2] | 0) >>> 0) i1 = 6; else {
  i2 = _FT_Stream_Seek(i9, i2 + i14 + (HEAP32[i20 + 20 >> 2] | 0) | 0) | 0;
  if (!i2) {
   i2 = _FT_Stream_ExtractFrame(i9, i7, i23) | 0;
   if (!i2) {
    i4 = HEAP32[i23 >> 2] | 0;
    i8 = i4 + i7 | 0;
    i6 = i15 & 65535;
    switch (i6 << 16 >> 16) {
    case 17:
    case 8:
    case 2:
    case 1:
     {
      i16 = 0;
      i10 = 35;
      break;
     }
    case 18:
    case 9:
    case 7:
    case 6:
     {
      i16 = 1;
      i10 = 35;
      break;
     }
    default:
     {
      i3 = i4;
      i10 = 41;
     }
    }
    do if ((i10 | 0) == 35) {
     i5 = HEAP32[i20 + 12 >> 2] | 0;
     i2 = i4 + 5 | 0;
     if ((i7 | 0) < 5) i1 = 6; else {
      HEAP16[i5 >> 1] = HEAPU8[i4 >> 0] | 0;
      HEAP16[i5 + 2 >> 1] = HEAPU8[i4 + 1 >> 0] | 0;
      HEAP16[i5 + 4 >> 1] = HEAP8[i4 + 2 >> 0] | 0;
      HEAP16[i5 + 6 >> 1] = HEAP8[i4 + 3 >> 0] | 0;
      HEAP16[i5 + 8 >> 1] = HEAPU8[i4 + 4 >> 0] | 0;
      if (!(i16 << 24 >> 24)) {
       HEAP16[i5 + 10 >> 1] = 0;
       HEAP16[i5 + 12 >> 1] = 0;
       i3 = i2;
       i2 = 0;
      } else {
       if ((i7 | 0) < 8) {
        i1 = 6;
        break;
       }
       HEAP16[i5 + 10 >> 1] = HEAP8[i2 >> 0] | 0;
       HEAP16[i5 + 12 >> 1] = HEAP8[i4 + 6 >> 0] | 0;
       i3 = i4 + 8 | 0;
       i2 = HEAPU8[i4 + 7 >> 0] | 0;
      }
      HEAP16[i5 + 14 >> 1] = i2;
      HEAP8[i20 + 16 >> 0] = 1;
      i10 = 41;
     }
    } while (0);
    L90 : do if ((i10 | 0) == 41) {
     i2 = i3;
     L92 : do switch (i6 << 16 >> 16) {
     case 19:
     case 18:
     case 17:
      {
       i1 = 7;
       break L90;
      }
     case 6:
     case 1:
      {
       i18 = 35;
       i19 = i2;
       break;
      }
     case 7:
     case 2:
      {
       i18 = HEAP32[i20 + 12 >> 2] | 0;
       i19 = HEAPU16[i18 + 2 >> 1] | 0;
       i18 = HEAPU16[i18 >> 1] | 0;
       i1 = Math_imul((i19 + 7 | 0) >>> 3, i18) | 0;
       if (((Math_imul(i18, i19) | 0) + 7 | 0) >>> 3 >>> 0 < i1 >>> 0) if ((i1 | 0) == (i8 - i2 | 0)) {
        i18 = 35;
        i19 = i2;
        break L92;
       }
       i18 = 36;
       i19 = i2;
       break;
      }
     case 5:
      {
       i18 = 36;
       i19 = i2;
       break;
      }
     case 8:
      {
       i1 = i3 + 1 | 0;
       if (i1 >>> 0 > i8 >>> 0) {
        i1 = 0;
        break L90;
       }
       i17 = i1;
       i10 = 48;
       break;
      }
     case 9:
      {
       i17 = i2;
       i10 = 48;
       break;
      }
     default:
      {
       i1 = 8;
       break L90;
      }
     } while (0);
     if ((i10 | 0) == 48) {
      i18 = 37;
      i19 = i17;
     }
     i5 = i20 + 17 | 0;
     if (!(HEAP8[i5 >> 0] | 0)) {
      i3 = HEAP32[i20 + 8 >> 2] | 0;
      if (!(HEAP8[i20 + 16 >> 0] | 0)) {
       i1 = 6;
       break;
      }
      i4 = HEAP32[i20 + 12 >> 2] | 0;
      i1 = HEAPU16[i4 + 2 >> 1] | 0;
      i4 = HEAPU16[i4 >> 1] | 0;
      HEAP32[i3 + 4 >> 2] = i1;
      HEAP32[i3 >> 2] = i4;
      switch (HEAP8[i20 + 18 >> 0] | 0) {
      case 1:
       {
        HEAP8[i3 + 18 >> 0] = 1;
        i2 = 2;
        i1 = (i1 + 7 | 0) >>> 3;
        break;
       }
      case 2:
       {
        HEAP8[i3 + 18 >> 0] = 3;
        i2 = 4;
        i1 = (i1 + 3 | 0) >>> 2;
        break;
       }
      case 4:
       {
        HEAP8[i3 + 18 >> 0] = 4;
        i2 = 16;
        i1 = (i1 + 1 | 0) >>> 1;
        break;
       }
      case 8:
       {
        HEAP8[i3 + 18 >> 0] = 2;
        i2 = 256;
        break;
       }
      case 32:
       {
        HEAP8[i3 + 18 >> 0] = 7;
        i2 = 256;
        i1 = i1 << 2;
        break;
       }
      default:
       {
        i1 = 3;
        break L90;
       }
      }
      HEAP32[i3 + 8 >> 2] = i1;
      HEAP16[i3 + 16 >> 1] = i2;
      i1 = Math_imul(i1, i4) | 0;
      if (i1 | 0) {
       i1 = _ft_glyphslot_alloc_bitmap(HEAP32[(HEAP32[i20 >> 2] | 0) + 84 >> 2] | 0, i1) | 0;
       if (i1 | 0) break;
       HEAP8[i5 >> 0] = 1;
      }
     }
     i1 = FUNCTION_TABLE_iiiiii[i18 & 127](i20, i19, i8, i21, i22) | 0;
    } while (0);
    _FT_Stream_ReleaseFrame(i9, i23);
   } else i1 = i2;
  } else i1 = i2;
 }
 i23 = i1;
 STACKTOP = i24;
 return i23 | 0;
}

function _ass_drawing_parse(i23, i21) {
 i23 = i23 | 0;
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i24 = 0, d25 = 0.0, i26 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i20 = i24 + 24 | 0;
 i22 = i24 + 16 | 0;
 i18 = i24 + 8 | 0;
 i19 = i24;
 i1 = i19;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 i1 = HEAP32[i23 >> 2] | 0;
 HEAP32[i20 >> 2] = i1;
 if (!i1) i5 = 0; else {
  i2 = HEAP8[i1 >> 0] | 0;
  if (!(i2 << 24 >> 24)) i5 = 0; else {
   i6 = 0;
   i4 = 0;
   i5 = 0;
   i3 = 0;
   i9 = -1;
   i10 = 0;
   while (1) {
    i7 = (i6 | 0) != 0;
    L5 : do if (i7 & i2 << 24 >> 24 == 99) {
     i3 = i6 + 12 | 0;
     i2 = HEAP32[i3 >> 2] | 0;
     if (!i2) {
      i3 = 0;
      i7 = i10;
     } else if ((HEAP32[i2 >> 2] | 0) == 5) {
      i2 = HEAP32[i2 + 12 >> 2] | 0;
      if (!i2) {
       i3 = 0;
       i7 = i10;
      } else if ((HEAP32[i2 >> 2] | 0) == 5) {
       i17 = _calloc(1, 20) | 0;
       HEAP32[i4 + 12 >> 2] = i17;
       HEAP32[i17 + 16 >> 2] = i4;
       HEAP32[i17 >> 2] = 5;
       i4 = i6 + 4 | 0;
       i6 = HEAP32[i4 + 4 >> 2] | 0;
       i7 = i17 + 4 | 0;
       HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
       HEAP32[i7 + 4 >> 2] = i6;
       i7 = HEAP32[i3 >> 2] | 0;
       i3 = _calloc(1, 20) | 0;
       HEAP32[i17 + 12 >> 2] = i3;
       HEAP32[i3 + 16 >> 2] = i17;
       HEAP32[i3 >> 2] = 5;
       i17 = i7 + 4 | 0;
       i6 = HEAP32[i17 + 4 >> 2] | 0;
       i4 = i3 + 4 | 0;
       HEAP32[i4 >> 2] = HEAP32[i17 >> 2];
       HEAP32[i4 + 4 >> 2] = i6;
       i7 = HEAP32[i7 + 12 >> 2] | 0;
       i4 = _calloc(1, 20) | 0;
       HEAP32[i3 + 12 >> 2] = i4;
       HEAP32[i4 + 16 >> 2] = i3;
       HEAP32[i4 >> 2] = 5;
       i7 = i7 + 4 | 0;
       i3 = HEAP32[i7 + 4 >> 2] | 0;
       i6 = i4 + 4 | 0;
       HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
       HEAP32[i6 + 4 >> 2] = i3;
       i6 = 0;
       i3 = 0;
       i7 = i10;
      } else {
       i3 = 0;
       i7 = i10;
      }
     } else {
      i3 = 0;
      i7 = i10;
     }
    } else {
     switch (i3 | 0) {
     case 0:
      {
       if (_mystrtod(i20, i18) | 0) {
        i7 = ~~(+HEAPF64[i18 >> 3] * 64.0);
        i1 = (HEAP32[i20 >> 2] | 0) + -1 | 0;
        HEAP32[i20 >> 2] = i1;
        i3 = 1;
        break L5;
       }
       break;
      }
     case 1:
      {
       if (_mystrtod(i20, i18) | 0) {
        i3 = ~~(+HEAPF64[i18 >> 3] * 64.0);
        i1 = (HEAP32[i20 >> 2] | 0) + -1 | 0;
        HEAP32[i20 >> 2] = i1;
        if ((i9 | 0) == -1) {
         i9 = -1;
         i3 = 2;
         i7 = i10;
         break L5;
        }
        i8 = _calloc(1, 20) | 0;
        if (!i5) {
         i2 = i8;
         i4 = 0;
        } else {
         HEAP32[i4 + 12 >> 2] = i8;
         HEAP32[i8 + 16 >> 2] = i4;
         i2 = i5;
        }
        HEAP32[i8 >> 2] = i9;
        HEAP32[i8 + 4 >> 2] = i10;
        HEAP32[i8 + 8 >> 2] = i3;
        i3 = i7 | (i9 | 0) != 5;
        i9 = i3 ? i9 : 5;
        i5 = i2;
        i6 = i3 ? i6 : i4;
        i3 = 0;
        i4 = i8;
        i7 = i10;
        break L5;
       }
       break;
      }
     default:
      {}
     }
     i1 = HEAP32[i20 >> 2] | 0;
     switch (HEAP8[i1 >> 0] | 0) {
     case 109:
      {
       i9 = 0;
       i3 = 0;
       i7 = i10;
       break L5;
      }
     case 110:
      {
       i9 = 1;
       i3 = 0;
       i7 = i10;
       break L5;
      }
     case 108:
      {
       i9 = 2;
       i3 = 0;
       i7 = i10;
       break L5;
      }
     case 98:
      {
       i9 = 3;
       i3 = 0;
       i7 = i10;
       break L5;
      }
     case 113:
      {
       i9 = 4;
       i3 = 0;
       i7 = i10;
       break L5;
      }
     case 115:
      {
       i9 = 5;
       i3 = 0;
       i7 = i10;
       break L5;
      }
     default:
      {
       i3 = 0;
       i7 = i10;
       break L5;
      }
     }
    } while (0);
    i1 = i1 + 1 | 0;
    HEAP32[i20 >> 2] = i1;
    i2 = HEAP8[i1 >> 0] | 0;
    if (!(i2 << 24 >> 24)) break; else i10 = i7;
   }
  }
 }
 i17 = i23 + 80 | 0;
 HEAP32[i17 >> 2] = i5;
 i16 = i23 + 4 | 0;
 d25 = +(1 << (HEAP32[i16 >> 2] | 0) + -1 | 0);
 i11 = i23 + 88 | 0;
 HEAPF64[i11 >> 3] = +HEAPF64[i23 + 16 >> 3] / d25;
 i15 = i23 + 24 | 0;
 i12 = i23 + 96 | 0;
 HEAPF64[i12 >> 3] = +HEAPF64[i15 >> 3] / d25;
 do if (!i5) {
  i1 = i23 + 40 | 0;
  i2 = i23 + 104 | 0;
  i3 = i23 + 108 | 0;
  i4 = i23 + 112 | 0;
  i6 = i23 + 116 | 0;
 } else {
  i13 = i19 + 4 | 0;
  i2 = i23 + 104 | 0;
  i3 = i23 + 108 | 0;
  i4 = i23 + 112 | 0;
  i6 = i23 + 116 | 0;
  i1 = i23 + 40 | 0;
  i14 = i18 + 4 | 0;
  i7 = 0;
  while (1) {
   L36 : while (1) switch (HEAP32[i5 >> 2] | 0) {
   case 1:
    {
     i8 = 30;
     break L36;
    }
   case 0:
    {
     i8 = 31;
     break L36;
    }
   case 2:
    {
     i8 = 35;
     break L36;
    }
   case 3:
    {
     i10 = i5 + 12 | 0;
     i9 = HEAP32[i10 >> 2] | 0;
     if (!i9) {
      i8 = 43;
      break L36;
     }
     if ((HEAP32[i9 >> 2] | 0) != 3) {
      i8 = 43;
      break L36;
     }
     i8 = HEAP32[i9 + 12 >> 2] | 0;
     if (!i8) {
      i8 = 43;
      break L36;
     }
     if ((HEAP32[i8 >> 2] | 0) != 3) {
      i8 = 43;
      break L36;
     }
     i5 = HEAP32[i5 + 16 >> 2] | 0;
     if (!i5) {
      i5 = i9;
      continue L36;
     } else {
      i8 = 41;
      break L36;
     }
    }
   case 5:
    {
     i10 = i5 + 12 | 0;
     i9 = HEAP32[i10 >> 2] | 0;
     if (!i9) {
      i8 = 48;
      break L36;
     }
     if ((HEAP32[i9 >> 2] | 0) != 5) {
      i8 = 48;
      break L36;
     }
     i8 = HEAP32[i9 + 12 >> 2] | 0;
     if (!i8) {
      i8 = 48;
      break L36;
     }
     if ((HEAP32[i8 >> 2] | 0) != 5) {
      i8 = 48;
      break L36;
     }
     i5 = HEAP32[i5 + 16 >> 2] | 0;
     if (!i5) {
      i5 = i9;
      continue L36;
     } else {
      i8 = 45;
      break L36;
     }
    }
   default:
    {
     i8 = 49;
     break L36;
    }
   }
   if ((i8 | 0) == 30) {
    i9 = i5 + 4 | 0;
    i10 = HEAP32[i9 + 4 >> 2] | 0;
    i9 = _lrint(+HEAPF64[i11 >> 3] * +(HEAP32[i9 >> 2] | 0)) | 0;
    HEAP32[i19 >> 2] = i9;
    i10 = _lrint(+HEAPF64[i12 >> 3] * +(i10 | 0)) | 0;
    HEAP32[i13 >> 2] = i10;
    i8 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = (i8 | 0) > (i9 | 0) ? i9 : i8;
    i8 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = (i8 | 0) > (i10 | 0) ? i10 : i8;
    i8 = HEAP32[i4 >> 2] | 0;
    HEAP32[i4 >> 2] = (i8 | 0) > (i9 | 0) ? i8 : i9;
    i9 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = (i9 | 0) > (i10 | 0) ? i9 : i10;
    i5 = HEAP32[i5 + 12 >> 2] | 0;
   } else if ((i8 | 0) == 31) {
    i8 = 0;
    i9 = i5 + 4 | 0;
    i10 = HEAP32[i9 + 4 >> 2] | 0;
    i9 = _lrint(+HEAPF64[i11 >> 3] * +(HEAP32[i9 >> 2] | 0)) | 0;
    HEAP32[i19 >> 2] = i9;
    i10 = _lrint(+HEAPF64[i12 >> 3] * +(i10 | 0)) | 0;
    HEAP32[i13 >> 2] = i10;
    i26 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = (i26 | 0) > (i9 | 0) ? i9 : i26;
    i26 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = (i26 | 0) > (i10 | 0) ? i10 : i26;
    i26 = HEAP32[i4 >> 2] | 0;
    HEAP32[i4 >> 2] = (i26 | 0) > (i9 | 0) ? i26 : i9;
    i9 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = (i9 | 0) > (i10 | 0) ? i9 : i10;
    if (i7) {
     if (!(_outline_add_segment(i1, 1) | 0)) break;
     if (!(_outline_close_contour(i1) | 0)) break;
    }
    i5 = HEAP32[i5 + 12 >> 2] | 0;
    i7 = 0;
   } else if ((i8 | 0) == 35) {
    i10 = i5 + 4 | 0;
    i26 = HEAP32[i10 + 4 >> 2] | 0;
    i10 = _lrint(+HEAPF64[i11 >> 3] * +(HEAP32[i10 >> 2] | 0)) | 0;
    HEAP32[i18 >> 2] = i10;
    i26 = _lrint(+HEAPF64[i12 >> 3] * +(i26 | 0)) | 0;
    HEAP32[i14 >> 2] = i26;
    i9 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = (i9 | 0) > (i10 | 0) ? i10 : i9;
    i9 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = (i9 | 0) > (i26 | 0) ? i26 : i9;
    i9 = HEAP32[i4 >> 2] | 0;
    HEAP32[i4 >> 2] = (i9 | 0) > (i10 | 0) ? i9 : i10;
    i10 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = (i10 | 0) > (i26 | 0) ? i10 : i26;
    if (!i7) {
     HEAP32[i20 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i20 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
     if (!(_outline_add_point(i1, i20, 0) | 0)) {
      i8 = 38;
      break;
     }
    };
    HEAP32[i20 >> 2] = HEAP32[i18 >> 2];
    HEAP32[i20 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
    if (!(_outline_add_point(i1, i20, 1) | 0)) {
     i8 = 38;
     break;
    }
    i5 = HEAP32[i5 + 12 >> 2] | 0;
    i7 = 1;
   } else if ((i8 | 0) == 41) {
    i8 = 0;
    if (!(_drawing_add_curve(i23, i5, 0, i7 & 1) | 0)) break;
    i5 = HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) + 12 >> 2] | 0;
    i7 = 1;
   } else if ((i8 | 0) == 43) i5 = HEAP32[i5 + 12 >> 2] | 0; else if ((i8 | 0) == 45) {
    i8 = 0;
    if (!(_drawing_add_curve(i23, i5, 1, i7 & 1) | 0)) break;
    i5 = HEAP32[i10 >> 2] | 0;
    i7 = 1;
   } else if ((i8 | 0) == 48) i5 = HEAP32[i5 + 12 >> 2] | 0; else if ((i8 | 0) == 49) i5 = HEAP32[i5 + 12 >> 2] | 0;
   if (!i5) {
    i8 = 50;
    break;
   }
  }
  if ((i8 | 0) != 38) if ((i8 | 0) == 50) {
   if (!i7) break;
   if (_outline_add_segment(i1, 1) | 0) if (_outline_close_contour(i1) | 0) break;
  }
  i1 = HEAP32[i17 >> 2] | 0;
  if (!i1) {
   i26 = 0;
   STACKTOP = i24;
   return i26 | 0;
  }
  do {
   i26 = i1;
   i1 = HEAP32[i1 + 12 >> 2] | 0;
   _free(i26);
  } while ((i1 | 0) != 0);
  i1 = 0;
  STACKTOP = i24;
  return i1 | 0;
 } while (0);
 i7 = HEAP32[i2 >> 2] | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i3 = HEAP32[i23 + 76 >> 2] | 0;
 if (i3 | 0) {
  i26 = HEAP32[i23 + 48 >> 2] | 0;
  HEAP32[i22 >> 2] = HEAP32[i23 + 40 >> 2];
  HEAP32[i22 + 4 >> 2] = i26;
  _ass_msg(i3, 6, 360146, i22);
 }
 if (!i21) {
  HEAP32[i23 + 64 >> 2] = i4 - i7;
  i4 = ~~(+HEAPF64[i15 >> 3] * (+HEAPF64[i23 + 8 >> 3] / +(1 << (HEAP32[i16 >> 2] | 0) + -1 | 0)) * 64.0);
  HEAP32[i23 + 36 >> 2] = i4;
  i4 = i2 - i5 - i4 | 0;
  HEAP32[i23 + 32 >> 2] = i4;
  i5 = HEAP32[i23 + 40 >> 2] | 0;
  if (i5 | 0) {
   i3 = HEAP32[i23 + 56 >> 2] | 0;
   i2 = 0;
   do {
    i26 = i3 + (i2 << 3) + 4 | 0;
    HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) - i4;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i5 | 0));
  }
 }
 i2 = HEAP32[i17 >> 2] | 0;
 if (!i2) {
  i26 = i1;
  STACKTOP = i24;
  return i26 | 0;
 }
 do {
  i26 = i2;
  i2 = HEAP32[i2 + 12 >> 2] | 0;
  _free(i26);
 } while ((i2 | 0) != 0);
 STACKTOP = i24;
 return i1 | 0;
}

function _af_cjk_hints_detect_features(i26, i27) {
 i26 = i26 | 0;
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i28 = 0, i29 = 0, i30 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i28 = i30;
 i22 = i26 + 44 + (i27 * 1468 | 0) + 8 | 0;
 i1 = HEAP32[i22 >> 2] | 0;
 i7 = i26 + 44 + (i27 * 1468 | 0) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i6 = i1 + (i2 * 48 | 0) | 0;
 i3 = _af_latin_hints_compute_segments(i26, i27) | 0;
 if (i3 | 0) {
  i29 = i3;
  STACKTOP = i30;
  return i29 | 0;
 }
 if ((i2 | 0) > 0) do {
  i3 = HEAP32[i1 + 40 >> 2] | 0;
  i5 = HEAP32[i1 + 44 >> 2] | 0;
  i2 = HEAP16[i3 >> 1] & 3;
  i4 = HEAP8[i1 >> 0] & -2;
  L7 : while (1) {
   do {
    if ((i3 | 0) == (i5 | 0)) break L7;
    i3 = HEAP32[i3 + 32 >> 2] | 0;
    i25 = HEAP16[i3 >> 1] & 3;
    i24 = i2;
    i2 = i25 & 65535;
    if (!((i24 | 0) != 0 | i25 << 16 >> 16 != 0)) break L7;
   } while ((i3 | 0) != (i5 | 0));
   i3 = i5;
   i4 = i4 | 1;
  }
  HEAP8[i1 >> 0] = i4;
  i1 = i1 + 48 | 0;
 } while (i1 >>> 0 < i6 >>> 0);
 i3 = HEAP32[i22 >> 2] | 0;
 i25 = HEAP32[i7 >> 2] | 0;
 i18 = i3 + (i25 * 48 | 0) | 0;
 i7 = HEAP32[i26 + 44 + (i27 * 1468 | 0) + 24 >> 2] | 0;
 i20 = i26 + 2988 | 0;
 i8 = (HEAP32[(HEAP32[i20 >> 2] | 0) + 40 >> 2] | 0) / 256 | 0;
 i21 = (i27 | 0) == 0 ? i26 + 4 | 0 : i26 + 12 | 0;
 i19 = _FT_DivFix(192, HEAP32[i21 >> 2] | 0) | 0;
 if ((i25 | 0) > 0) {
  i6 = i3;
  do {
   if ((HEAP8[i6 + 1 >> 0] | 0) == (i7 | 0)) {
    i9 = i6 + 2 | 0;
    i11 = i6 + 4 | 0;
    i12 = i6 + 6 | 0;
    i15 = i6 + 32 | 0;
    i16 = i6 + 36 | 0;
    i17 = i6 + 20 | 0;
    i5 = i3;
    do {
     do if ((i5 | 0) != (i6 | 0)) if ((i7 | 0) == (0 - (HEAP8[i5 + 1 >> 0] | 0) | 0)) {
      i10 = (HEAP16[i5 + 2 >> 1] | 0) - (HEAP16[i9 >> 1] | 0) | 0;
      if ((i10 | 0) >= 0) {
       i13 = HEAP16[i11 >> 1] | 0;
       i24 = HEAP16[i12 >> 1] | 0;
       i25 = HEAP16[i5 + 4 >> 1] | 0;
       i23 = HEAP16[i5 + 6 >> 1] | 0;
       i13 = ((i24 << 16 >> 16 > i23 << 16 >> 16 ? i23 : i24) << 16 >> 16) - ((i13 << 16 >> 16 < i25 << 16 >> 16 ? i25 : i13) << 16 >> 16) | 0;
       if ((i13 | 0) >= (i8 | 0)) {
        i14 = i10 << 3;
        i1 = HEAP32[i15 >> 2] | 0;
        do if ((i14 | 0) < (i1 * 9 | 0)) {
         if ((i14 | 0) >= (i1 * 7 | 0)) if ((HEAP32[i16 >> 2] | 0) >= (i13 | 0)) break;
         HEAP32[i15 >> 2] = i10;
         HEAP32[i16 >> 2] = i13;
         HEAP32[i17 >> 2] = i5;
        } while (0);
        i2 = i5 + 32 | 0;
        i4 = HEAP32[i2 >> 2] | 0;
        if ((i14 | 0) < (i4 * 9 | 0)) {
         i1 = i5 + 36 | 0;
         if ((i14 | 0) >= (i4 * 7 | 0)) if ((HEAP32[i1 >> 2] | 0) >= (i13 | 0)) break;
         HEAP32[i2 >> 2] = i10;
         HEAP32[i1 >> 2] = i13;
         HEAP32[i5 + 20 >> 2] = i6;
        }
       }
      }
     } while (0);
     i5 = i5 + 48 | 0;
    } while (i5 >>> 0 < i18 >>> 0);
   }
   i6 = i6 + 48 | 0;
  } while (i6 >>> 0 < i18 >>> 0);
  i6 = i3;
  do {
   i7 = i6 + 20 | 0;
   i8 = HEAP32[i7 >> 2] | 0;
   L42 : do if (i8 | 0) {
    i9 = i8 + 20 | 0;
    if ((HEAP32[i9 >> 2] | 0) == (i6 | 0)) {
     i10 = HEAP16[i8 + 2 >> 1] | 0;
     i11 = HEAP16[i6 + 2 >> 1] | 0;
     if (i10 << 16 >> 16 > i11 << 16 >> 16) {
      i12 = HEAP32[i6 + 32 >> 2] | 0;
      if ((i12 | 0) < (i19 | 0)) {
       i13 = i6 + 36 | 0;
       i14 = i12 << 2;
       i5 = i3;
       while (1) {
        i1 = HEAP16[i5 + 2 >> 1] | 0;
        if (!((i6 | 0) == (i5 | 0) ? 1 : i1 << 16 >> 16 > i11 << 16 >> 16)) {
         i15 = HEAP32[i5 + 20 >> 2] | 0;
         if (i15 | 0) if ((HEAP32[i15 + 20 >> 2] | 0) == (i5 | 0)) {
          i2 = HEAP16[i15 + 2 >> 1] | 0;
          if (i2 << 16 >> 16 >= i10 << 16 >> 16) if (!(i11 << 16 >> 16 == i1 << 16 >> 16 ? i10 << 16 >> 16 == i2 << 16 >> 16 : 0)) {
           i25 = HEAP32[i5 + 32 >> 2] | 0;
           if ((i25 | 0) > (i12 | 0) & (i14 | 0) > (i25 | 0)) {
            if ((HEAP32[i13 >> 2] | 0) < ((HEAP32[i5 + 36 >> 2] | 0) * 3 | 0)) break; else i2 = i3;
            do {
             i4 = i2 + 20 | 0;
             i1 = HEAP32[i4 >> 2] | 0;
             if ((i1 | 0) == (i5 | 0)) {
              i1 = i8;
              i29 = 41;
             } else if ((i1 | 0) == (i15 | 0)) {
              i1 = i6;
              i29 = 41;
             }
             if ((i29 | 0) == 41) {
              i29 = 0;
              HEAP32[i4 >> 2] = 0;
              HEAP32[i2 + 24 >> 2] = i1;
             }
             i2 = i2 + 48 | 0;
            } while (i2 >>> 0 < i18 >>> 0);
           }
          }
         }
        }
        i5 = i5 + 48 | 0;
        if (i5 >>> 0 >= i18 >>> 0) break L42;
       }
       HEAP32[i9 >> 2] = 0;
       HEAP32[i7 >> 2] = 0;
      }
     }
    }
   } while (0);
   i6 = i6 + 48 | 0;
  } while (i6 >>> 0 < i18 >>> 0);
  do {
   i1 = i3 + 20 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   do if (i2 | 0) {
    i4 = i2 + 28 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    HEAP32[i4 >> 2] = i5 + 1;
    i6 = i2 + 20 | 0;
    if ((HEAP32[i6 >> 2] | 0) != (i3 | 0)) {
     HEAP32[i1 >> 2] = 0;
     i1 = HEAP32[i2 + 32 >> 2] | 0;
     if ((i1 | 0) >= (i19 | 0)) if ((HEAP32[i3 + 32 >> 2] | 0) >= (i1 << 2 | 0)) {
      HEAP32[i4 >> 2] = i5;
      break;
     }
     HEAP32[i3 + 24 >> 2] = HEAP32[i6 >> 2];
    }
   } while (0);
   i3 = i3 + 48 | 0;
  } while (i3 >>> 0 < i18 >>> 0);
 }
 i23 = i26 + 44 + (i27 * 1468 | 0) | 0;
 i24 = HEAP32[i26 >> 2] | 0;
 i1 = HEAP32[i20 >> 2] | 0;
 i3 = HEAP32[i22 >> 2] | 0;
 i2 = HEAP32[i23 >> 2] | 0;
 i22 = i3 + (i2 * 48 | 0) | 0;
 i25 = i26 + 44 + (i27 * 1468 | 0) + 12 | 0;
 HEAP32[i25 >> 2] = 0;
 i21 = HEAP32[i21 >> 2] | 0;
 i1 = i1 + 44 + (i27 * 1572 | 0) + 204 | 0;
 if ((_FT_MulFix(HEAP32[i1 >> 2] | 0, i21) | 0) > 16) i20 = _FT_DivFix(16, i21) | 0; else i20 = HEAP32[i1 >> 2] | 0;
 L81 : do if ((i2 | 0) > 0) {
  i1 = i26 + 44 + (i27 * 1468 | 0) + 20 | 0;
  while (1) {
   i17 = HEAP32[i25 >> 2] | 0;
   if ((i17 | 0) > 0) {
    i18 = HEAP32[i1 >> 2] | 0;
    i7 = i3 + 1 | 0;
    i2 = HEAP8[i7 >> 0] | 0;
    i6 = i3 + 2 | 0;
    i19 = i3 + 20 | 0;
    i5 = 0;
    i15 = 65535;
    i16 = 0;
    while (1) {
     i14 = i18 + (i16 * 48 | 0) | 0;
     do if ((HEAP8[i18 + (i16 * 48 | 0) + 13 >> 0] | 0) == i2 << 24 >> 24) {
      i4 = (HEAP16[i6 >> 1] | 0) - (HEAP16[i14 >> 1] | 0) | 0;
      i4 = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
      if ((i4 | 0) < (i20 | 0) & (i4 | 0) < (i15 | 0)) {
       i11 = HEAP32[i19 >> 2] | 0;
       if (i11 | 0) {
        i12 = HEAP32[i18 + (i16 * 48 | 0) + 40 >> 2] | 0;
        i13 = i11 + 2 | 0;
        i8 = 0;
        i10 = i12;
        do {
         i9 = HEAP32[i10 + 20 >> 2] | 0;
         if (i9) {
          i26 = HEAP16[i13 >> 1] | 0;
          i27 = HEAP16[i9 + 2 >> 1] | 0;
          i8 = i26 << 16 >> 16 > i27 << 16 >> 16;
          i8 = ((i8 ? i26 : i27) << 16 >> 16) - (HEAP16[(i8 ? i9 : i11) + 2 >> 1] | 0) | 0;
          if ((i8 | 0) >= (i20 | 0)) break;
         }
         i10 = HEAP32[i10 + 16 >> 2] | 0;
        } while ((i10 | 0) != (i12 | 0));
        if ((i8 | 0) >= (i20 | 0)) {
         i4 = i15;
         break;
        }
       }
       i5 = i14;
      } else i4 = i15;
     } else i4 = i15; while (0);
     i16 = i16 + 1 | 0;
     if ((i16 | 0) == (i17 | 0)) break; else i15 = i4;
    }
    if (!i5) i29 = 73; else {
     HEAP32[i3 + 16 >> 2] = HEAP32[i5 + 40 >> 2];
     i27 = i5 + 44 | 0;
     HEAP32[(HEAP32[i27 >> 2] | 0) + 16 >> 2] = i3;
     HEAP32[i27 >> 2] = i3;
    }
   } else {
    i2 = i3 + 1 | 0;
    i7 = i2;
    i6 = i3 + 2 | 0;
    i2 = HEAP8[i2 >> 0] | 0;
    i29 = 73;
   }
   if ((i29 | 0) == 73) {
    i29 = 0;
    i2 = _af_axis_hints_new_edge(i23, HEAP16[i6 >> 1] | 0, i2 << 24 >> 24, i24, i28) | 0;
    if (i2 | 0) break;
    i2 = HEAP32[i28 >> 2] | 0;
    i4 = i2;
    i5 = i4 + 40 | 0;
    do {
     HEAP32[i4 >> 2] = 0;
     i4 = i4 + 4 | 0;
    } while ((i4 | 0) < (i5 | 0));
    HEAP32[i2 + 40 >> 2] = i3;
    HEAP32[i2 + 44 >> 2] = i3;
    HEAP8[i2 + 13 >> 0] = HEAP8[i7 >> 0] | 0;
    i27 = HEAP16[i6 >> 1] | 0;
    HEAP16[i2 >> 1] = i27;
    i27 = _FT_MulFix(i27 << 16 >> 16, i21) | 0;
    HEAP32[i2 + 4 >> 2] = i27;
    HEAP32[i2 + 8 >> 2] = i27;
    HEAP32[i3 + 16 >> 2] = i3;
   }
   i3 = i3 + 48 | 0;
   if (i3 >>> 0 >= i22 >>> 0) break L81;
  }
  i29 = i2;
  STACKTOP = i30;
  return i29 | 0;
 } else i1 = i26 + 44 + (i27 * 1468 | 0) + 20 | 0; while (0);
 i4 = HEAP32[i1 >> 2] | 0;
 i28 = HEAP32[i25 >> 2] | 0;
 i11 = i4 + (i28 * 48 | 0) | 0;
 if ((i28 | 0) > 0) i1 = i4; else {
  i29 = 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 do {
  i3 = HEAP32[i1 + 40 >> 2] | 0;
  if (i3 | 0) {
   i2 = i3;
   do {
    HEAP32[i2 + 12 >> 2] = i1;
    i2 = HEAP32[i2 + 16 >> 2] | 0;
   } while ((i2 | 0) != (i3 | 0));
  }
  i1 = i1 + 48 | 0;
 } while (i1 >>> 0 < i11 >>> 0);
 do {
  i7 = HEAP32[i4 + 40 >> 2] | 0;
  i8 = i4 + 24 | 0;
  i9 = i4 + 28 | 0;
  i3 = 0;
  i5 = 0;
  i6 = i7;
  do {
   i1 = HEAP8[i6 >> 0] & 1;
   i5 = (i1 & 255) + i5 | 0;
   i3 = ((i1 ^ 1) & 255) + i3 | 0;
   i1 = HEAP32[i6 + 24 >> 2] | 0;
   if (!i1) i10 = 0; else i10 = (HEAP32[i1 + 12 >> 2] | 0) != (i4 | 0);
   i2 = HEAP32[i6 + 20 >> 2] | 0;
   do if (i10 | (i2 | 0) != 0) {
    i2 = i10 ? i1 : i2;
    i1 = HEAP32[(i10 ? i9 : i8) >> 2] | 0;
    if (!i1) i29 = 88; else {
     i28 = (HEAP16[i4 >> 1] | 0) - (HEAP16[i1 >> 1] | 0) | 0;
     i25 = HEAP16[i6 + 2 >> 1] | 0;
     i26 = HEAP16[i2 + 2 >> 1] | 0;
     i27 = i25 << 16 >> 16 > i26 << 16 >> 16;
     if ((((i27 ? i25 : i26) << 16 >> 16) - (HEAP16[(i27 ? i2 : i6) + 2 >> 1] | 0) | 0) < (((i28 | 0) < 0 ? 0 - i28 | 0 : i28) | 0)) i29 = 88;
    }
    if ((i29 | 0) == 88) {
     i29 = 0;
     i1 = HEAP32[i2 + 12 >> 2] | 0;
    }
    if (i10) {
     HEAP32[i9 >> 2] = i1;
     i28 = i1 + 12 | 0;
     HEAP8[i28 >> 0] = HEAP8[i28 >> 0] | 2;
     break;
    } else {
     HEAP32[i8 >> 2] = i1;
     break;
    }
   } while (0);
   i6 = HEAP32[i6 + 16 >> 2] | 0;
  } while ((i6 | 0) != (i7 | 0));
  HEAP8[i4 + 12 >> 0] = (i5 | 0) > 0 & (i5 | 0) >= (i3 | 0) & 1;
  if (HEAP32[i9 >> 2] | 0) if (HEAP32[i8 >> 2] | 0) HEAP32[i9 >> 2] = 0;
  i4 = i4 + 48 | 0;
 } while (i4 >>> 0 < i11 >>> 0);
 i1 = 0;
 STACKTOP = i30;
 return i1 | 0;
}
function _ps_parser_to_token(i12, i10) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = i10 + 8 | 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 i9 = i10 + 4 | 0;
 HEAP32[i9 >> 2] = 0;
 i6 = i12 + 8 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i2 = HEAP32[i12 >> 2] | 0;
 i1 = i2;
 L1 : do if (i1 >>> 0 < i7 >>> 0) while (1) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 0:
  case 12:
  case 9:
  case 10:
  case 13:
  case 32:
   {
    i1 = i2;
    break;
   }
  case 37:
   {
    i2 = 37;
    L5 : while (1) {
     switch (i2 << 24 >> 24) {
     case 10:
     case 13:
      break L5;
     default:
      {}
     }
     i2 = i1 + 1 | 0;
     if (i2 >>> 0 >= i7 >>> 0) {
      i1 = i2;
      break;
     }
     i1 = i2;
     i2 = HEAP8[i2 >> 0] | 0;
    }
    break;
   }
  default:
   break L1;
  }
  i1 = i1 + 1 | 0;
  i2 = i1;
  if (i1 >>> 0 >= i7 >>> 0) break L1;
 } while (0);
 HEAP32[i12 >> 2] = i2;
 i1 = i2;
 if (i1 >>> 0 >= i7 >>> 0) return;
 L15 : do switch (HEAP8[i1 >> 0] | 0) {
 case 40:
  {
   HEAP32[i11 >> 2] = 2;
   HEAP32[i10 >> 2] = i2;
   i2 = 0;
   L19 : while (1) {
    L21 : while (1) {
     i4 = i1 + 1 | 0;
     L23 : do switch (HEAP8[i1 >> 0] | 0) {
     case 40:
      {
       i8 = 20;
       break L21;
      }
     case 41:
      {
       i8 = 22;
       break L21;
      }
     case 92:
      {
       if ((i4 | 0) == (i7 | 0)) {
        i1 = i7;
        i8 = 23;
        break L19;
       }
       i3 = HEAP8[i4 >> 0] | 0;
       switch (i3 << 24 >> 24) {
       case 41:
       case 40:
       case 92:
       case 102:
       case 98:
       case 116:
       case 114:
       case 110:
        {
         i1 = i1 + 2 | 0;
         break L23;
        }
       default:
        {}
       }
       if (i4 >>> 0 < i7 >>> 0 & (i3 & -8) << 24 >> 24 == 48) {
        i3 = 0;
        i1 = i4;
        do {
         i1 = i1 + 1 | 0;
         i3 = i3 + 1 | 0;
         if (!(i1 >>> 0 < i7 >>> 0 & i3 >>> 0 < 3)) break L23;
        } while ((HEAP8[i1 >> 0] & -8) << 24 >> 24 == 48);
       } else i1 = i4;
       break;
      }
     default:
      i1 = i4;
     } while (0);
     if (i1 >>> 0 >= i7 >>> 0) {
      i8 = 23;
      break L19;
     }
    }
    if ((i8 | 0) == 20) i2 = i2 + 1 | 0; else if ((i8 | 0) == 22) {
     i1 = i2 + -1 | 0;
     if (!i1) {
      i8 = 24;
      break;
     } else i2 = i1;
    }
    if (i4 >>> 0 < i7 >>> 0) i1 = i4; else {
     i1 = i4;
     i8 = 23;
     break;
    }
   }
   if ((i8 | 0) == 23) {
    i8 = 91;
    break L15;
   } else if ((i8 | 0) == 24) {
    i1 = i4;
    HEAP32[i9 >> 2] = i1;
    break L15;
   }
   break;
  }
 case 123:
  {
   HEAP32[i11 >> 2] = 3;
   HEAP32[i10 >> 2] = i2;
   i3 = 0;
   L41 : do {
    switch (HEAP8[i1 >> 0] | 0) {
    case 123:
     {
      i4 = 0;
      i3 = i3 + 1 | 0;
      i1 = i2;
      break;
     }
    case 125:
     {
      i3 = i3 + -1 | 0;
      if (!i3) {
       i8 = 29;
       break L41;
      } else {
       i4 = 0;
       i1 = i2;
      }
      break;
     }
    case 40:
     {
      i1 = i2;
      L47 : do if (i1 >>> 0 < i7 >>> 0) {
       i2 = 0;
       while (1) {
        L50 : while (1) {
         i5 = i1 + 1 | 0;
         L52 : do switch (HEAP8[i1 >> 0] | 0) {
         case 40:
          {
           i8 = 40;
           break L50;
          }
         case 41:
          {
           i8 = 42;
           break L50;
          }
         case 92:
          {
           if ((i5 | 0) == (i7 | 0)) {
            i2 = 3;
            i1 = i7;
            break L47;
           }
           i4 = HEAP8[i5 >> 0] | 0;
           switch (i4 << 24 >> 24) {
           case 41:
           case 40:
           case 92:
           case 102:
           case 98:
           case 116:
           case 114:
           case 110:
            {
             i1 = i1 + 2 | 0;
             break L52;
            }
           default:
            {}
           }
           if (i5 >>> 0 < i7 >>> 0 & (i4 & -8) << 24 >> 24 == 48) {
            i4 = 0;
            i1 = i5;
            do {
             i1 = i1 + 1 | 0;
             i4 = i4 + 1 | 0;
             if (!(i1 >>> 0 < i7 >>> 0 & i4 >>> 0 < 3)) break L52;
            } while ((HEAP8[i1 >> 0] & -8) << 24 >> 24 == 48);
           } else i1 = i5;
           break;
          }
         default:
          i1 = i5;
         } while (0);
         if (i1 >>> 0 >= i7 >>> 0) {
          i2 = 3;
          break L47;
         }
        }
        if ((i8 | 0) == 40) {
         i8 = 0;
         i2 = i2 + 1 | 0;
        } else if ((i8 | 0) == 42) {
         i8 = 0;
         i1 = i2 + -1 | 0;
         if (!i1) {
          i2 = 0;
          i1 = i5;
          break L47;
         } else i2 = i1;
        }
        if (i5 >>> 0 < i7 >>> 0) i1 = i5; else {
         i2 = 3;
         i1 = i5;
         break;
        }
       }
      } else i2 = 3; while (0);
      i4 = i2;
      break;
     }
    case 60:
     {
      i1 = i2 + 1 | 0;
      i2 = i1;
      L68 : do if (i1 >>> 0 < i7 >>> 0) while (1) {
       L71 : while (1) {
        switch (HEAP8[i1 >> 0] | 0) {
        case 0:
        case 12:
        case 9:
        case 10:
        case 13:
        case 32:
         {
          i1 = i2;
          break;
         }
        case 37:
         {
          i2 = 37;
          L74 : while (1) {
           switch (i2 << 24 >> 24) {
           case 10:
           case 13:
            break L74;
           default:
            {}
           }
           i2 = i1 + 1 | 0;
           if (i2 >>> 0 >= i7 >>> 0) {
            i1 = i2;
            break;
           }
           i1 = i2;
           i2 = HEAP8[i2 >> 0] | 0;
          }
          break;
         }
        default:
         {
          i1 = i2;
          break L71;
         }
        }
        i1 = i1 + 1 | 0;
        i2 = i1;
        if (i1 >>> 0 >= i7 >>> 0) {
         i1 = i2;
         break;
        }
       }
       i2 = i1;
       if (i2 >>> 0 >= i7 >>> 0) break L68;
       i4 = HEAP8[i2 >> 0] | 0;
       if ((i4 + -48 & 255) >= 10) switch (i4 << 24 >> 24) {
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
       case 97:
       case 98:
       case 99:
       case 100:
       case 101:
       case 102:
        break;
       default:
        break L68;
       }
       i1 = i2 + 1 | 0;
       i2 = i1;
       if (i1 >>> 0 >= i7 >>> 0) {
        i1 = i2;
        break;
       }
      } else i1 = i2; while (0);
      if (i1 >>> 0 < i7 >>> 0) if ((HEAP8[i1 >> 0] | 0) != 62) {
       i8 = 58;
       break L41;
      }
      i4 = 0;
      i1 = i1 + 1 | 0;
      break;
     }
    case 37:
     {
      i2 = 37;
      L89 : while (1) {
       switch (i2 << 24 >> 24) {
       case 10:
       case 13:
        break L89;
       default:
        {}
       }
       i2 = i1 + 1 | 0;
       if (i2 >>> 0 >= i7 >>> 0) {
        i1 = i2;
        break;
       }
       i1 = i2;
       i2 = HEAP8[i2 >> 0] | 0;
      }
      i4 = 0;
      break;
     }
    default:
     {
      i4 = 0;
      i1 = i2;
     }
    }
    i1 = i1 + 1 | 0;
    i2 = i1;
   } while ((i4 | 0) == 0 & i1 >>> 0 < i7 >>> 0);
   if ((i8 | 0) == 29) {
    i4 = 0;
    i3 = 0;
    i2 = i1 + 1 | 0;
   } else if ((i8 | 0) == 58) {
    i4 = 3;
    i2 = i1 + 1 | 0;
   }
   if (!(i3 | i4)) {
    HEAP32[i9 >> 2] = i2;
    i1 = i2;
    i8 = 92;
   } else {
    i1 = i2;
    i8 = 91;
   }
   break;
  }
 case 91:
  {
   HEAP32[i11 >> 2] = 3;
   i2 = i1 + 1 | 0;
   HEAP32[i10 >> 2] = i1;
   i1 = i2;
   HEAP32[i12 >> 2] = i1;
   L101 : do if (i2 >>> 0 < i7 >>> 0) while (1) {
    switch (HEAP8[i2 >> 0] | 0) {
    case 0:
    case 12:
    case 9:
    case 10:
    case 13:
    case 32:
     break;
    case 37:
     {
      i1 = i2;
      i2 = 37;
      L105 : while (1) {
       switch (i2 << 24 >> 24) {
       case 10:
       case 13:
        break L105;
       default:
        {}
       }
       i2 = i1 + 1 | 0;
       if (i2 >>> 0 >= i7 >>> 0) {
        i1 = i2;
        break;
       }
       i1 = i2;
       i2 = HEAP8[i2 >> 0] | 0;
      }
      break;
     }
    default:
     break L101;
    }
    i2 = i1 + 1 | 0;
    i1 = i2;
    if (i2 >>> 0 >= i7 >>> 0) break L101;
   } while (0);
   HEAP32[i12 >> 2] = i1;
   i2 = i1;
   if (i2 >>> 0 < i7 >>> 0) {
    i5 = i12 + 12 | 0;
    i3 = 1;
    L113 : while (1) {
     if (HEAP32[i5 >> 2] | 0) {
      i8 = 91;
      break L15;
     }
     switch (HEAP8[i2 >> 0] | 0) {
     case 91:
      {
       i3 = i3 + 1 | 0;
       break;
      }
     case 93:
      {
       if ((i3 | 0) < 2) break L113; else i3 = i3 + -1 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i12 >> 2] = i1;
     _ps_parser_skip_PS_token(i12);
     i4 = HEAP32[i6 >> 2] | 0;
     i1 = HEAP32[i12 >> 2] | 0;
     i2 = i1;
     L120 : do if (i2 >>> 0 < i4 >>> 0) while (1) {
      switch (HEAP8[i2 >> 0] | 0) {
      case 0:
      case 12:
      case 9:
      case 10:
      case 13:
      case 32:
       break;
      case 37:
       {
        i1 = i2;
        i2 = 37;
        L124 : while (1) {
         switch (i2 << 24 >> 24) {
         case 10:
         case 13:
          break L124;
         default:
          {}
         }
         i2 = i1 + 1 | 0;
         if (i2 >>> 0 >= i4 >>> 0) {
          i1 = i2;
          break;
         }
         i1 = i2;
         i2 = HEAP8[i2 >> 0] | 0;
        }
        break;
       }
      default:
       break L120;
      }
      i2 = i1 + 1 | 0;
      i1 = i2;
      if (i2 >>> 0 >= i4 >>> 0) break L120;
     } while (0);
     HEAP32[i12 >> 2] = i1;
     i2 = i1;
     if (i2 >>> 0 >= i7 >>> 0) {
      i8 = 91;
      break L15;
     }
    }
    i1 = i2 + 1 | 0;
    HEAP32[i9 >> 2] = i1;
   } else i8 = 91;
   break;
  }
 default:
  {
   HEAP32[i10 >> 2] = i1;
   HEAP32[i11 >> 2] = (HEAP8[i1 >> 0] | 0) == 47 ? 4 : 1;
   _ps_parser_skip_PS_token(i12);
   i2 = HEAP32[i12 >> 2] | 0;
   if (!(HEAP32[i12 + 12 >> 2] | 0)) {
    HEAP32[i9 >> 2] = i2;
    i1 = i2;
    i8 = 92;
   } else {
    i1 = i2;
    i8 = 91;
   }
  }
 } while (0);
 if ((i8 | 0) == 91) {
  i2 = HEAP32[i9 >> 2] | 0;
  i8 = 92;
 }
 if ((i8 | 0) == 92) if (!i2) {
  HEAP32[i10 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
 }
 HEAP32[i12 >> 2] = i1;
 return;
}

function _ps_parser_skip_PS_token(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i8 = HEAP32[i7 + 8 >> 2] | 0;
 i9 = i1;
 L1 : do if (i9 >>> 0 < i8 >>> 0) {
  i2 = i1;
  i1 = i9;
  while (1) {
   switch (HEAP8[i1 >> 0] | 0) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    {
     i1 = i2;
     break;
    }
   case 37:
    {
     i2 = 37;
     L5 : while (1) {
      switch (i2 << 24 >> 24) {
      case 10:
      case 13:
       break L5;
      default:
       {}
      }
      i2 = i1 + 1 | 0;
      if (i2 >>> 0 >= i8 >>> 0) {
       i1 = i2;
       break;
      }
      i1 = i2;
      i2 = HEAP8[i2 >> 0] | 0;
     }
     break;
    }
   default:
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = i1;
   if (i1 >>> 0 >= i8 >>> 0) break L1;
  }
 } else i2 = i1; while (0);
 i1 = i2;
 L12 : do if (i1 >>> 0 < i8 >>> 0) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 93:
  case 91:
   {
    i4 = 0;
    i1 = i1 + 1 | 0;
    break L12;
   }
  case 123:
   {
    i3 = 0;
    i4 = 123;
    L16 : while (1) {
     switch (i4 << 24 >> 24) {
     case 123:
      {
       i4 = 0;
       i3 = i3 + 1 | 0;
       i1 = i2;
       break;
      }
     case 125:
      {
       i3 = i3 + -1 | 0;
       if (!i3) {
        i6 = 14;
        break L16;
       } else {
        i4 = 0;
        i1 = i2;
       }
       break;
      }
     case 40:
      {
       i1 = i2;
       L22 : do if (i1 >>> 0 < i8 >>> 0) {
        i2 = 0;
        while (1) {
         L25 : while (1) {
          i5 = i1 + 1 | 0;
          L27 : do switch (HEAP8[i1 >> 0] | 0) {
          case 40:
           {
            i6 = 25;
            break L25;
           }
          case 41:
           {
            i6 = 27;
            break L25;
           }
          case 92:
           {
            if ((i5 | 0) == (i8 | 0)) {
             i2 = 3;
             i1 = i8;
             break L22;
            }
            i4 = HEAP8[i5 >> 0] | 0;
            switch (i4 << 24 >> 24) {
            case 41:
            case 40:
            case 92:
            case 102:
            case 98:
            case 116:
            case 114:
            case 110:
             {
              i1 = i1 + 2 | 0;
              break L27;
             }
            default:
             {}
            }
            if (i5 >>> 0 < i8 >>> 0 & (i4 & -8) << 24 >> 24 == 48) {
             i4 = 0;
             i1 = i5;
             do {
              i1 = i1 + 1 | 0;
              i4 = i4 + 1 | 0;
              if (!(i1 >>> 0 < i8 >>> 0 & i4 >>> 0 < 3)) break L27;
             } while ((HEAP8[i1 >> 0] & -8) << 24 >> 24 == 48);
            } else i1 = i5;
            break;
           }
          default:
           i1 = i5;
          } while (0);
          if (i1 >>> 0 >= i8 >>> 0) {
           i2 = 3;
           break L22;
          }
         }
         if ((i6 | 0) == 25) {
          i6 = 0;
          i2 = i2 + 1 | 0;
         } else if ((i6 | 0) == 27) {
          i6 = 0;
          i1 = i2 + -1 | 0;
          if (!i1) {
           i2 = 0;
           i1 = i5;
           break L22;
          } else i2 = i1;
         }
         if (i5 >>> 0 < i8 >>> 0) i1 = i5; else {
          i2 = 3;
          i1 = i5;
          break;
         }
        }
       } else i2 = 3; while (0);
       i4 = i2;
       break;
      }
     case 60:
      {
       i1 = i2 + 1 | 0;
       i2 = i1;
       L43 : do if (i1 >>> 0 < i8 >>> 0) while (1) {
        L46 : while (1) {
         switch (HEAP8[i1 >> 0] | 0) {
         case 0:
         case 12:
         case 9:
         case 10:
         case 13:
         case 32:
          {
           i1 = i2;
           break;
          }
         case 37:
          {
           i2 = 37;
           L49 : while (1) {
            switch (i2 << 24 >> 24) {
            case 10:
            case 13:
             break L49;
            default:
             {}
            }
            i2 = i1 + 1 | 0;
            if (i2 >>> 0 >= i8 >>> 0) {
             i1 = i2;
             break;
            }
            i1 = i2;
            i2 = HEAP8[i2 >> 0] | 0;
           }
           break;
          }
         default:
          {
           i1 = i2;
           break L46;
          }
         }
         i1 = i1 + 1 | 0;
         i2 = i1;
         if (i1 >>> 0 >= i8 >>> 0) {
          i1 = i2;
          break;
         }
        }
        i2 = i1;
        if (i2 >>> 0 >= i8 >>> 0) break L43;
        i4 = HEAP8[i2 >> 0] | 0;
        if ((i4 + -48 & 255) >= 10) switch (i4 << 24 >> 24) {
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
         break;
        default:
         break L43;
        }
        i1 = i2 + 1 | 0;
        i2 = i1;
        if (i1 >>> 0 >= i8 >>> 0) {
         i1 = i2;
         break;
        }
       } else i1 = i2; while (0);
       if (i1 >>> 0 < i8 >>> 0) if ((HEAP8[i1 >> 0] | 0) != 62) {
        i6 = 43;
        break L16;
       }
       i4 = 0;
       i1 = i1 + 1 | 0;
       break;
      }
     case 37:
      {
       i2 = 37;
       L64 : while (1) {
        switch (i2 << 24 >> 24) {
        case 10:
        case 13:
         break L64;
        default:
         {}
        }
        i2 = i1 + 1 | 0;
        if (i2 >>> 0 >= i8 >>> 0) {
         i1 = i2;
         break;
        }
        i1 = i2;
        i2 = HEAP8[i2 >> 0] | 0;
       }
       i4 = 0;
       break;
      }
     default:
      {
       i4 = 0;
       i1 = i2;
      }
     }
     i1 = i1 + 1 | 0;
     i2 = i1;
     if (!((i4 | 0) == 0 & i1 >>> 0 < i8 >>> 0)) {
      i1 = i2;
      break;
     }
     i4 = HEAP8[i1 >> 0] | 0;
    }
    if ((i6 | 0) == 14) {
     i4 = 0;
     i3 = 0;
     i1 = i1 + 1 | 0;
    } else if ((i6 | 0) == 43) {
     i4 = 3;
     i1 = i1 + 1 | 0;
    }
    i4 = (i3 | 0) == 0 ? i4 : 3;
    break L12;
   }
  case 40:
   {
    i2 = 0;
    L75 : while (1) {
     L77 : while (1) {
      i4 = i1 + 1 | 0;
      L79 : do switch (HEAP8[i1 >> 0] | 0) {
      case 40:
       {
        i6 = 61;
        break L77;
       }
      case 41:
       {
        i6 = 63;
        break L77;
       }
      case 92:
       {
        if ((i4 | 0) == (i8 | 0)) {
         i2 = 3;
         i1 = i8;
         break L75;
        }
        i3 = HEAP8[i4 >> 0] | 0;
        switch (i3 << 24 >> 24) {
        case 41:
        case 40:
        case 92:
        case 102:
        case 98:
        case 116:
        case 114:
        case 110:
         {
          i1 = i1 + 2 | 0;
          break L79;
         }
        default:
         {}
        }
        if (i4 >>> 0 < i8 >>> 0 & (i3 & -8) << 24 >> 24 == 48) {
         i3 = 0;
         i1 = i4;
         do {
          i1 = i1 + 1 | 0;
          i3 = i3 + 1 | 0;
          if (!(i1 >>> 0 < i8 >>> 0 & i3 >>> 0 < 3)) break L79;
         } while ((HEAP8[i1 >> 0] & -8) << 24 >> 24 == 48);
        } else i1 = i4;
        break;
       }
      default:
       i1 = i4;
      } while (0);
      if (i1 >>> 0 >= i8 >>> 0) {
       i2 = 3;
       break L75;
      }
     }
     if ((i6 | 0) == 61) i2 = i2 + 1 | 0; else if ((i6 | 0) == 63) {
      i1 = i2 + -1 | 0;
      if (!i1) {
       i2 = 0;
       i1 = i4;
       break;
      } else i2 = i1;
     }
     if (i4 >>> 0 < i8 >>> 0) i1 = i4; else {
      i2 = 3;
      i1 = i4;
      break;
     }
    }
    i4 = i2;
    break L12;
   }
  case 60:
   {
    i3 = i1 + 1 | 0;
    L95 : do if (i3 >>> 0 < i8 >>> 0) {
     if ((HEAP8[i3 >> 0] | 0) == 60) {
      i4 = 0;
      i1 = i1 + 2 | 0;
      break L12;
     }
     i2 = i3;
     i1 = i3;
     while (1) {
      L102 : while (1) {
       switch (HEAP8[i1 >> 0] | 0) {
       case 0:
       case 12:
       case 9:
       case 10:
       case 13:
       case 32:
        {
         i1 = i2;
         break;
        }
       case 37:
        {
         i2 = 37;
         L105 : while (1) {
          switch (i2 << 24 >> 24) {
          case 10:
          case 13:
           break L105;
          default:
           {}
          }
          i2 = i1 + 1 | 0;
          if (i2 >>> 0 >= i8 >>> 0) {
           i1 = i2;
           break;
          }
          i1 = i2;
          i2 = HEAP8[i2 >> 0] | 0;
         }
         break;
        }
       default:
        {
         i1 = i2;
         break L102;
        }
       }
       i1 = i1 + 1 | 0;
       i2 = i1;
       if (i1 >>> 0 >= i8 >>> 0) {
        i1 = i2;
        break;
       }
      }
      i2 = i1;
      if (i2 >>> 0 >= i8 >>> 0) break L95;
      i3 = HEAP8[i2 >> 0] | 0;
      if ((i3 + -48 & 255) >= 10) switch (i3 << 24 >> 24) {
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
       break;
      default:
       break L95;
      }
      i1 = i2 + 1 | 0;
      i2 = i1;
      if (i1 >>> 0 >= i8 >>> 0) {
       i1 = i2;
       break;
      }
     }
    } else i1 = i3; while (0);
    i2 = i1;
    if (i2 >>> 0 < i8 >>> 0) if ((HEAP8[i2 >> 0] | 0) != 62) {
     i4 = 3;
     break L12;
    }
    i4 = 0;
    i1 = i2 + 1 | 0;
    break L12;
   }
  case 62:
   {
    i2 = i1 + 1 | 0;
    i3 = i2;
    if (i2 >>> 0 >= i8 >>> 0) {
     i4 = 3;
     i1 = i3;
     break L12;
    }
    if ((HEAP8[i2 >> 0] | 0) != 62) {
     i4 = 3;
     i1 = i3;
     break L12;
    }
    i4 = 0;
    i1 = i1 + 2 | 0;
    break L12;
   }
  case 47:
   {
    i1 = i1 + 1 | 0;
    break;
   }
  default:
   i1 = i2;
  }
  i2 = i1;
  if (i2 >>> 0 < i8 >>> 0) while (1) {
   switch (HEAP8[i2 >> 0] | 0) {
   case 37:
   case 125:
   case 123:
   case 93:
   case 91:
   case 62:
   case 60:
   case 41:
   case 40:
   case 47:
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    {
     i4 = 0;
     break L12;
    }
   default:
    {}
   }
   i2 = i2 + 1 | 0;
   i1 = i2;
   if (i2 >>> 0 >= i8 >>> 0) {
    i4 = 0;
    break L12;
   }
  } else i4 = 0;
 } else {
  i4 = 0;
  i1 = i2;
 } while (0);
 i6 = i1;
 HEAP32[i7 + 12 >> 2] = i6 >>> 0 < i8 >>> 0 & (i6 | 0) == (i9 | 0) ? 3 : i4;
 HEAP32[i7 >> 2] = i6;
 return;
}

function _FcFontSetSort(i1, i37, i38, i44, i45, i53, i56) {
 i1 = i1 | 0;
 i37 = i37 | 0;
 i38 = i38 | 0;
 i44 = i44 | 0;
 i45 = i45 | 0;
 i53 = i53 | 0;
 i56 = i56 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i54 = 0, i55 = 0, i57 = 0, d58 = 0.0;
 i55 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i54 = i55 + 288 | 0;
 i49 = i55 + 280 | 0;
 i48 = i55 + 272 | 0;
 i47 = i55 + 264 | 0;
 i43 = i55 + 248 | 0;
 i35 = i55 + 240 | 0;
 i34 = i55 + 232 | 0;
 i33 = i55 + 224 | 0;
 i32 = i55 + 216 | 0;
 i31 = i55 + 208 | 0;
 i30 = i55 + 200 | 0;
 i29 = i55 + 192 | 0;
 i28 = i55 + 184 | 0;
 i27 = i55 + 176 | 0;
 i25 = i55 + 168 | 0;
 i24 = i55 + 160 | 0;
 i23 = i55 + 152 | 0;
 i22 = i55 + 144 | 0;
 i21 = i55 + 136 | 0;
 i20 = i55 + 128 | 0;
 i18 = i55 + 120 | 0;
 i17 = i55 + 112 | 0;
 i16 = i55 + 104 | 0;
 i15 = i55 + 96 | 0;
 i14 = i55 + 88 | 0;
 i13 = i55 + 80 | 0;
 i12 = i55 + 72 | 0;
 i36 = i55 + 64 | 0;
 i26 = i55 + 56 | 0;
 i19 = i55 + 48 | 0;
 i9 = i55 + 40 | 0;
 i51 = i55 + 16 | 0;
 i46 = i55 + 296 | 0;
 i42 = i55;
 i41 = i55 + 292 | 0;
 if (!i37) ___assert_fail(354603, 354578, 879, 354660);
 if (!i44) ___assert_fail(354616, 354578, 880, 354660);
 if (!i56) ___assert_fail(354626, 354578, 881, 354660);
 HEAP32[i56 >> 2] = 1;
 if (HEAP32[91917] & 1 | 0) {
  _printf(354674, i55 + 32 | 0) | 0;
  _FcPatternPrint(i44);
 }
 i4 = (i38 | 0) > 0;
 if (i4) {
  i3 = 0;
  i1 = 0;
  do {
   i2 = HEAP32[i37 + (i3 << 2) >> 2] | 0;
   if (i2) i1 = (HEAP32[i2 >> 2] | 0) + i1 | 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i38 | 0));
  if (i1 | 0) {
   i40 = 0;
   while (1) if (!(_FcPatternGet(i44, 355019, i40, i42) | 0)) i40 = i40 + 1 | 0; else break;
   i10 = i1 * 204 | 0;
   i11 = i40 << 2;
   i52 = _malloc(i11 + i10 | 0) | 0;
   if (!i52) {
    i56 = 0;
    STACKTOP = i55;
    return i56 | 0;
   }
   i2 = i52 + (i1 * 200 | 0) | 0;
   i39 = i2 + (i1 << 2) | 0;
   L26 : do if (i4) {
    i1 = i52;
    i3 = i2;
    i8 = 0;
    while (1) {
     i6 = HEAP32[i37 + (i8 << 2) >> 2] | 0;
     if (i6) if ((HEAP32[i6 >> 2] | 0) > 0) {
      i7 = i6 + 8 | 0;
      i5 = 0;
      do {
       if (HEAP32[91917] & 2 | 0) {
        HEAP32[i9 >> 2] = i5;
        _printf(354641, i9) | 0;
        _FcPatternPrint(HEAP32[(HEAP32[i7 >> 2] | 0) + (i5 << 2) >> 2] | 0);
       }
       i57 = HEAP32[(HEAP32[i7 >> 2] | 0) + (i5 << 2) >> 2] | 0;
       HEAP32[i1 >> 2] = i57;
       i4 = i1 + 8 | 0;
       if (!(_FcCompare(i44, i57, i4, i56) | 0)) break L26;
       if (HEAP32[91917] & 2 | 0) {
        _printf(354650, i19) | 0;
        HEAPF64[i26 >> 3] = +HEAPF64[i4 >> 3];
        _printf(354656, i26) | 0;
        HEAPF64[i36 >> 3] = +HEAPF64[i1 + 16 >> 3];
        _printf(354656, i36) | 0;
        HEAPF64[i12 >> 3] = +HEAPF64[i1 + 24 >> 3];
        _printf(354656, i12) | 0;
        HEAPF64[i13 >> 3] = +HEAPF64[i1 + 32 >> 3];
        _printf(354656, i13) | 0;
        HEAPF64[i14 >> 3] = +HEAPF64[i1 + 40 >> 3];
        _printf(354656, i14) | 0;
        HEAPF64[i15 >> 3] = +HEAPF64[i1 + 48 >> 3];
        _printf(354656, i15) | 0;
        HEAPF64[i16 >> 3] = +HEAPF64[i1 + 56 >> 3];
        _printf(354656, i16) | 0;
        HEAPF64[i17 >> 3] = +HEAPF64[i1 + 64 >> 3];
        _printf(354656, i17) | 0;
        HEAPF64[i18 >> 3] = +HEAPF64[i1 + 72 >> 3];
        _printf(354656, i18) | 0;
        HEAPF64[i20 >> 3] = +HEAPF64[i1 + 80 >> 3];
        _printf(354656, i20) | 0;
        HEAPF64[i21 >> 3] = +HEAPF64[i1 + 88 >> 3];
        _printf(354656, i21) | 0;
        HEAPF64[i22 >> 3] = +HEAPF64[i1 + 96 >> 3];
        _printf(354656, i22) | 0;
        HEAPF64[i23 >> 3] = +HEAPF64[i1 + 104 >> 3];
        _printf(354656, i23) | 0;
        HEAPF64[i24 >> 3] = +HEAPF64[i1 + 112 >> 3];
        _printf(354656, i24) | 0;
        HEAPF64[i25 >> 3] = +HEAPF64[i1 + 120 >> 3];
        _printf(354656, i25) | 0;
        HEAPF64[i27 >> 3] = +HEAPF64[i1 + 128 >> 3];
        _printf(354656, i27) | 0;
        HEAPF64[i28 >> 3] = +HEAPF64[i1 + 136 >> 3];
        _printf(354656, i28) | 0;
        HEAPF64[i29 >> 3] = +HEAPF64[i1 + 144 >> 3];
        _printf(354656, i29) | 0;
        HEAPF64[i30 >> 3] = +HEAPF64[i1 + 152 >> 3];
        _printf(354656, i30) | 0;
        HEAPF64[i31 >> 3] = +HEAPF64[i1 + 160 >> 3];
        _printf(354656, i31) | 0;
        HEAPF64[i32 >> 3] = +HEAPF64[i1 + 168 >> 3];
        _printf(354656, i32) | 0;
        HEAPF64[i33 >> 3] = +HEAPF64[i1 + 176 >> 3];
        _printf(354656, i33) | 0;
        HEAPF64[i34 >> 3] = +HEAPF64[i1 + 184 >> 3];
        _printf(354656, i34) | 0;
        HEAPF64[i35 >> 3] = +HEAPF64[i1 + 192 >> 3];
        _printf(354656, i35) | 0;
        _putchar(10) | 0;
       }
       HEAP32[i3 >> 2] = i1;
       i1 = i1 + 200 | 0;
       i3 = i3 + 4 | 0;
       i5 = i5 + 1 | 0;
      } while ((i5 | 0) < (HEAP32[i6 >> 2] | 0));
     }
     i8 = i8 + 1 | 0;
     if ((i8 | 0) >= (i38 | 0)) {
      i50 = 28;
      break;
     }
    }
   } else {
    i1 = i52;
    i50 = 28;
   } while (0);
   if ((i50 | 0) == 28) {
    i1 = i1 - i52 | 0;
    i9 = (i1 | 0) / 200 | 0;
    _qsort(i2, i9, 4, 202);
    if ((i40 | 0) > 0) _memset(i52 + i10 | 0, 0, i11 | 0) | 0;
    i8 = (i1 | 0) > 0;
    if (i8) {
     i6 = (i40 | 0) < 1;
     i5 = 0;
     do {
      i4 = i2 + (i5 << 2) | 0;
      i1 = HEAP32[i4 >> 2] | 0;
      do if (!(+HEAPF64[i1 + 72 >> 3] < 2.0e3) | i6) i50 = 45; else {
       i1 = 0;
       L52 : while (1) {
        i3 = i39 + (i1 << 2) | 0;
        do if (!(HEAP32[i3 >> 2] | 0)) if (!(_FcPatternGet(i44, 355019, i1, i42) | 0)) {
         if (_FcPatternGet(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, 355019, 0, i51) | 0) break;
         d58 = +_FcCompareLang(i42, i51);
         if (d58 >= 0.0 & d58 < 2.0) break L52;
        } while (0);
        i1 = i1 + 1 | 0;
        if ((i1 | 0) >= (i40 | 0)) {
         i50 = 44;
         break;
        }
       }
       if ((i50 | 0) == 44) {
        i1 = HEAP32[i4 >> 2] | 0;
        i50 = 45;
        break;
       }
       if (HEAP32[91917] & 2 | 0) do if (!(_FcPatternGetString(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, 354977, 0, i46) | 0)) {
        if (_FcPatternGetString(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, 354680, 0, i41) | 0) break;
        i57 = HEAP32[i41 >> 2] | 0;
        HEAP32[i43 >> 2] = HEAP32[i46 >> 2];
        HEAP32[i43 + 4 >> 2] = i57;
        HEAP32[i43 + 8 >> 2] = i1;
        _printf(354686, i43) | 0;
       } while (0);
       HEAP32[i3 >> 2] = 1;
      } while (0);
      if ((i50 | 0) == 45) {
       i50 = 0;
       HEAPF64[i1 + 72 >> 3] = 1.0e4;
      }
      i5 = i5 + 1 | 0;
     } while ((i5 | 0) < (i9 | 0));
    }
    _qsort(i2, i9, 4, 202);
    i7 = _FcFontSetCreate() | 0;
    if (i7 | 0) {
     i4 = (i45 | 0) != 0;
     i5 = (i53 | 0) != 0;
     if (i4 | i5) {
      i1 = _FcCharSetCreate() | 0;
      if (i1 | 0) {
       i6 = i1;
       i50 = 50;
      }
     } else {
      i6 = 0;
      i50 = 50;
     }
     do if ((i50 | 0) == 50) {
      L78 : do if (i8) {
       L80 : do if (!i6) {
        if (i4) i3 = 0; else {
         i3 = 0;
         while (1) {
          i1 = HEAP32[i2 >> 2] | 0;
          HEAP32[i51 >> 2] = 0;
          _FcPatternReference(HEAP32[i1 >> 2] | 0);
          if (HEAP32[91917] & 2 | 0) {
           _printf(354718, i48) | 0;
           _FcPatternPrint(HEAP32[i1 >> 2] | 0);
          }
          if (!(_FcFontSetAdd(i7, HEAP32[i1 >> 2] | 0) | 0)) break L80;
          i3 = i3 + 1 | 0;
          if ((i3 | 0) >= (i9 | 0)) {
           i50 = 73;
           break L78;
          } else i2 = i2 + 4 | 0;
         }
        }
        while (1) {
         i1 = HEAP32[i2 >> 2] | 0;
         i2 = i2 + 4 | 0;
         HEAP32[i51 >> 2] = 0;
         if (!i3) {
          _FcPatternReference(HEAP32[i1 >> 2] | 0);
          if (HEAP32[91917] & 2 | 0) {
           _printf(354718, i47) | 0;
           _FcPatternPrint(HEAP32[i1 >> 2] | 0);
          }
          if (!(_FcFontSetAdd(i7, HEAP32[i1 >> 2] | 0) | 0)) break L80;
         }
         i3 = i3 + 1 | 0;
         if ((i3 | 0) >= (i9 | 0)) {
          i50 = 73;
          break L78;
         }
        }
       } else {
        i3 = 0;
        while (1) {
         i1 = HEAP32[i2 >> 2] | 0;
         i2 = i2 + 4 | 0;
         HEAP32[i51 >> 2] = 0;
         if (!(_FcPatternGetCharSet(HEAP32[i1 >> 2] | 0, 355024, 0, i46) | 0)) {
          if (!(_FcCharSetMerge(i6, HEAP32[i46 >> 2] | 0, i51) | 0)) break;
          if ((HEAP32[i51 >> 2] | 0) != 0 | i4 & (i3 | 0) != 0 ^ 1) {
           _FcPatternReference(HEAP32[i1 >> 2] | 0);
           if (HEAP32[91917] & 2 | 0) {
            _printf(354718, i49) | 0;
            _FcPatternPrint(HEAP32[i1 >> 2] | 0);
           }
           if (!(_FcFontSetAdd(i7, HEAP32[i1 >> 2] | 0) | 0)) break L80;
          }
         }
         i3 = i3 + 1 | 0;
         if ((i3 | 0) >= (i9 | 0)) {
          i50 = 73;
          break L78;
         }
        }
        i1 = 0;
        i50 = 76;
        break L78;
       } while (0);
       _FcPatternDestroy(HEAP32[i1 >> 2] | 0);
       i1 = 0;
       i50 = 75;
      } else i50 = 73; while (0);
      if ((i50 | 0) == 73) if (i5) HEAP32[i53 >> 2] = i6; else {
       i1 = 1;
       i50 = 75;
      }
      if ((i50 | 0) == 75) if (!i6) i50 = 77; else i50 = 76;
      if ((i50 | 0) == 76) {
       _FcCharSetDestroy(i6);
       i50 = 77;
      }
      if ((i50 | 0) == 77) if (!i1) break;
      _free(i52);
      if (HEAP32[91917] & 1 | 0) {
       _printf(354723, i54) | 0;
       _FcPatternPrint(HEAP32[HEAP32[i7 + 8 >> 2] >> 2] | 0);
      }
      if ((HEAP32[i7 >> 2] | 0) <= 0) {
       i57 = i7;
       STACKTOP = i55;
       return i57 | 0;
      }
      HEAP32[i56 >> 2] = 0;
      i57 = i7;
      STACKTOP = i55;
      return i57 | 0;
     } while (0);
     _FcFontSetDestroy(i7);
    }
   }
   _free(i52);
   i57 = 0;
   STACKTOP = i55;
   return i57 | 0;
  }
 }
 i57 = _FcFontSetCreate() | 0;
 STACKTOP = i55;
 return i57 | 0;
}

function _af_autofitter_load_glyph(i5, i3, i1, i20, i10) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i20 = i20 | 0;
 i10 = i10 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 6992 | 0;
 i18 = i25 + 6976 | 0;
 i19 = i25 + 6968 | 0;
 i9 = i25 + 6936 | 0;
 i24 = i25 + 64 | 0;
 i23 = i25;
 i1 = HEAP32[HEAP32[i5 + 4 >> 2] >> 2] | 0;
 _memset(i24 + 4 | 0, 0, 2996) | 0;
 HEAP32[i24 >> 2] = i1;
 i1 = i23;
 i2 = i1 + 60 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i22 = i23 + 8 | 0;
 HEAP32[i22 >> 2] = i24;
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 i1 = HEAP32[i4 + 88 >> 2] | 0;
 if (!i1) {
  i21 = 36;
  i20 = i23 + 4 | 0;
  HEAP32[i23 >> 2] = 0;
  HEAP32[i20 >> 2] = 0;
  HEAP32[i22 >> 2] = 0;
  _af_glyph_hints_done(i24);
  STACKTOP = i25;
  return i21 | 0;
 }
 HEAP32[i9 >> 2] = i4;
 HEAP32[i9 + 4 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i9 + 16 >> 2] = 0;
 i17 = i9 + 20 | 0;
 HEAP32[i17 >> 2] = i10 >>> 16 & 15;
 HEAP32[i9 + 24 >> 2] = 0;
 HEAP32[i23 >> 2] = i4;
 i3 = i4 + 116 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = i23 + 4 | 0;
 HEAP32[i2 >> 2] = i1;
 do if (!i1) {
  i1 = _af_face_globals_new(i4, i2, i5) | 0;
  if (!i1) {
   i16 = HEAP32[i2 >> 2] | 0;
   HEAP32[i3 >> 2] = i16;
   HEAP32[i4 + 120 >> 2] = 62;
   i4 = i16;
   break;
  } else {
   i21 = i1;
   i20 = i2;
   HEAP32[i23 >> 2] = 0;
   HEAP32[i20 >> 2] = 0;
   HEAP32[i22 >> 2] = 0;
   _af_glyph_hints_done(i24);
   STACKTOP = i25;
   return i21 | 0;
  }
 } else i4 = i1; while (0);
 HEAP32[i18 >> 2] = 0;
 L11 : do if ((HEAP32[i4 + 4 >> 2] | 0) >>> 0 > i20 >>> 0) {
  i6 = HEAP8[(HEAP32[i4 + 8 >> 2] | 0) + i20 >> 0] & 127;
  i3 = HEAP32[23492 + (i6 << 2) >> 2] | 0;
  i5 = HEAP32[23472 + (HEAP32[i3 + 4 >> 2] << 2) >> 2] | 0;
  i6 = i4 + 16 + (i6 << 2) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  do if (!i1) {
   i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] | 0;
   i8 = _ft_mem_alloc(i7, HEAP32[i5 + 4 >> 2] | 0, i18) | 0;
   i1 = HEAP32[i18 >> 2] | 0;
   if (i1 | 0) break L11;
   HEAP32[i8 >> 2] = i3;
   HEAP32[i8 + 36 >> 2] = i4;
   i1 = HEAP32[i5 + 8 >> 2] | 0;
   if (i1 | 0) {
    i16 = FUNCTION_TABLE_iii[i1 & 255](i8, HEAP32[i4 >> 2] | 0) | 0;
    HEAP32[i18 >> 2] = i16;
    if (i16 | 0) {
     i1 = HEAP32[i5 + 16 >> 2] | 0;
     if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i8);
     _ft_mem_free(i7, i8);
     i3 = HEAP32[i18 >> 2] | 0;
     if (!i3) {
      i1 = 0;
      break;
     } else i1 = i23;
     HEAP32[i1 >> 2] = 0;
     HEAP32[i2 >> 2] = 0;
     HEAP32[i22 >> 2] = 0;
     _af_glyph_hints_done(i24);
     STACKTOP = i25;
     return i3 | 0;
    }
   }
   HEAP32[i6 >> 2] = i8;
   i1 = i8;
   i21 = 15;
  } else i21 = 15; while (0);
  i4 = HEAP32[23472 + (HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0;
  i5 = i23 + 12 | 0;
  HEAP32[i5 >> 2] = i1;
  i3 = HEAP32[i4 + 12 >> 2] | 0;
  if (!i3) {
   i16 = i1 + 4 | 0;
   HEAP32[i16 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
   HEAP32[i16 + 16 >> 2] = HEAP32[i9 + 16 >> 2];
   HEAP32[i16 + 20 >> 2] = HEAP32[i9 + 20 >> 2];
   HEAP32[i16 + 24 >> 2] = HEAP32[i9 + 24 >> 2];
  } else FUNCTION_TABLE_vii[i3 & 63](i1, i9);
  i6 = i10 & -10246;
  i3 = HEAP32[i4 + 20 >> 2] | 0;
  if (i3 | 0) {
   i1 = FUNCTION_TABLE_iii[i3 & 255](HEAP32[i22 >> 2] | 0, i1) | 0;
   if (i1 | 0) {
    i21 = i1;
    i20 = i2;
    HEAP32[i23 >> 2] = 0;
    HEAP32[i20 >> 2] = 0;
    HEAP32[i22 >> 2] = 0;
    _af_glyph_hints_done(i24);
    STACKTOP = i25;
    return i21 | 0;
   }
  }
  i1 = HEAP32[i23 >> 2] | 0;
  i15 = HEAP32[i5 >> 2] | 0;
  i4 = HEAP32[i22 >> 2] | 0;
  i16 = HEAP32[i1 + 84 >> 2] | 0;
  i3 = HEAP32[i16 + 156 >> 2] | 0;
  i13 = HEAP32[i3 >> 2] | 0;
  i1 = _FT_Load_Glyph(i1, i20, i6 | 10241) | 0;
  if (i1 | 0) {
   i21 = i1;
   i20 = i2;
   HEAP32[i23 >> 2] = 0;
   HEAP32[i20 >> 2] = 0;
   HEAP32[i22 >> 2] = 0;
   _af_glyph_hints_done(i24);
   STACKTOP = i25;
   return i21 | 0;
  }
  i14 = HEAP8[i3 + 8 >> 0] | 0;
  i12 = i23 + 16 | 0;
  HEAP8[i12 >> 0] = i14;
  if (i14 << 24 >> 24) {
   i14 = i23 + 20 | 0;
   i1 = i3 + 12 | 0;
   HEAP32[i14 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i14 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i14 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i14 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
   i1 = i23 + 36 | 0;
   i9 = i3 + 28 | 0;
   i10 = HEAP32[i9 + 4 >> 2] | 0;
   i11 = i1;
   HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i11 + 4 >> 2] = i10;
   HEAP32[i18 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i18 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i18 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i18 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
   if (!(_FT_Matrix_Invert(i18) | 0)) _FT_Vector_Transform(i1, i18);
  }
  i14 = i16 + 72 | 0;
  do if ((HEAP32[i14 >> 2] | 0) == 1869968492) {
   if (HEAP8[i12 >> 0] | 0) _FT_Outline_Translate(i16 + 108 | 0, HEAP32[i23 + 36 >> 2] | 0, HEAP32[i23 + 40 >> 2] | 0);
   i7 = i4 + 8 | 0;
   i8 = i23 + 44 | 0;
   HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
   i11 = i4 + 16 | 0;
   HEAP32[i23 + 48 >> 2] = HEAP32[i11 >> 2];
   i9 = _FT_MulFix(HEAP32[i16 + 40 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0) | 0;
   i10 = i23 + 52 | 0;
   HEAP32[i10 >> 2] = (HEAP32[i7 >> 2] | 0) + i9;
   HEAP32[i23 + 56 >> 2] = HEAP32[i11 >> 2];
   if (!(HEAP16[i16 + 110 >> 1] | 0)) i10 = 0; else {
    i1 = HEAP32[(HEAP32[23472 + (HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0) + 24 >> 2] | 0;
    if (i1 | 0) FUNCTION_TABLE_iiii[i1 & 127](i4, i13 + 20 | 0, i15) | 0;
    if ((HEAP32[i17 >> 2] | 0) == 1) {
     i7 = HEAP32[i8 >> 2] | 0;
     i11 = HEAP32[i10 >> 2] | 0;
     i6 = i7 + 32 + (HEAP32[i4 + 2992 >> 2] | 0) & -64;
     HEAP32[i8 >> 2] = i6;
     i9 = i11 + 32 + (HEAP32[i4 + 2996 >> 2] | 0) & -64;
     HEAP32[i10 >> 2] = i9;
     HEAP32[i16 + 144 >> 2] = i6 - i7;
     HEAP32[i16 + 148 >> 2] = i9 - i11;
     i10 = 0;
     break;
    }
    i1 = HEAP32[i4 + 64 >> 2] | 0;
    i11 = HEAP32[i4 + 56 >> 2] | 0;
    i3 = i1 + (i11 * 48 | 0) + -48 | 0;
    if ((i11 | 0) > 1) if (!(HEAP32[i4 + 2980 >> 2] & 4)) {
     i9 = (HEAP32[i10 >> 2] | 0) - (HEAP32[i3 + 4 >> 2] | 0) | 0;
     i26 = HEAP32[i1 + 4 >> 2] | 0;
     i11 = HEAP32[i1 + 8 >> 2] | 0;
     i7 = i11 - i26 | 0;
     i6 = HEAP32[i3 + 8 >> 2] | 0;
     i3 = i6 + i9 | 0;
     i7 = (i26 | 0) < 24 ? i7 + -8 | 0 : i7;
     i3 = (i9 | 0) < 24 ? i3 + 8 | 0 : i3;
     i4 = i7 + 32 & -64;
     HEAP32[i8 >> 2] = i4;
     i1 = i3 + 32 & -64;
     HEAP32[i10 >> 2] = i1;
     i5 = i4 + -64 | 0;
     if ((i26 | 0) > 0 & (i4 | 0) >= (i11 | 0)) HEAP32[i8 >> 2] = i5; else i5 = i4;
     i4 = i1 + 64 | 0;
     if ((i9 | 0) > 0 & (i1 | 0) <= (i6 | 0)) {
      HEAP32[i10 >> 2] = i4;
      i1 = i4;
     }
     i4 = i5 - i7 | 0;
    } else i21 = 42; else i21 = 42;
    if ((i21 | 0) == 42) {
     i4 = HEAP32[i8 >> 2] | 0;
     i3 = HEAP32[i10 >> 2] | 0;
     i26 = i4 + 32 & -64;
     HEAP32[i8 >> 2] = i26;
     i1 = i3 + 32 & -64;
     HEAP32[i10 >> 2] = i1;
     i4 = i26 - i4 | 0;
    }
    HEAP32[i16 + 144 >> 2] = i4;
    HEAP32[i16 + 148 >> 2] = i1 - i3;
    i10 = 0;
   }
  } else i10 = 7; while (0);
  i3 = i16 + 44 | 0;
  i4 = i16 + 32 | 0;
  i5 = i16 + 48 | 0;
  i6 = i16 + 36 | 0;
  i26 = (HEAP32[i5 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0;
  i7 = i19 + 4 | 0;
  i8 = i15 + 8 | 0;
  i11 = _FT_MulFix((HEAP32[i3 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) | 0, HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[i19 >> 2] = i11;
  i11 = i15 + 12 | 0;
  i26 = _FT_MulFix(i26, HEAP32[i11 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = i26;
  if (HEAP8[i12 >> 0] | 0) {
   i26 = i23 + 20 | 0;
   _FT_Outline_Transform(i13 + 20 | 0, i26);
   _FT_Vector_Transform(i19, i26);
  }
  i9 = i23 + 44 | 0;
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i1) i1 = i13 + 20 | 0; else {
   i26 = i13 + 20 | 0;
   _FT_Outline_Translate(i26, 0 - i1 | 0, 0);
   i1 = i26;
  }
  _FT_Outline_Get_CBox(i1, i18);
  i13 = HEAP32[i18 >> 2] & -64;
  HEAP32[i18 >> 2] = i13;
  i26 = i18 + 4 | 0;
  i12 = HEAP32[i26 >> 2] & -64;
  HEAP32[i26 >> 2] = i12;
  i26 = i18 + 8 | 0;
  i1 = (HEAP32[i26 >> 2] | 0) + 63 & -64;
  HEAP32[i26 >> 2] = i1;
  i18 = i18 + 12 | 0;
  i26 = (HEAP32[i18 >> 2] | 0) + 63 & -64;
  HEAP32[i18 >> 2] = i26;
  HEAP32[i16 + 24 >> 2] = i1 - i13;
  HEAP32[i16 + 28 >> 2] = i26 - i12;
  HEAP32[i4 >> 2] = i13;
  HEAP32[i6 >> 2] = i26;
  HEAP32[i3 >> 2] = (HEAP32[i19 >> 2] | 0) + i13 & -64;
  HEAP32[i5 >> 2] = (HEAP32[i7 >> 2] | 0) + i26 & -64;
  do if ((HEAP32[i17 >> 2] | 0) == 1) i21 = 56; else {
   if (!(HEAP32[(HEAP32[i16 + 4 >> 2] | 0) + 8 >> 2] & 4)) {
    i1 = HEAP32[i2 >> 2] | 0;
    if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 <= i20 >>> 0) {
     i21 = 56;
     break;
    }
    if ((HEAP8[(HEAP32[i1 + 8 >> 2] | 0) + i20 >> 0] | 0) > -1) {
     i21 = 56;
     break;
    }
    if (!(HEAP8[i15 + 32 >> 0] | 0)) {
     i21 = 56;
     break;
    }
   }
   i1 = i16 + 40 | 0;
   i26 = _FT_MulFix(HEAP32[i1 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i1 >> 2] = i26;
   HEAP32[i16 + 144 >> 2] = 0;
   HEAP32[i16 + 148 >> 2] = 0;
  } while (0);
  if ((i21 | 0) == 56) {
   i1 = i16 + 40 | 0;
   if (HEAP32[i1 >> 2] | 0) HEAP32[i1 >> 2] = (HEAP32[i23 + 52 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
  }
  i26 = i16 + 52 | 0;
  i21 = _FT_MulFix(HEAP32[i26 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
  HEAP32[i26 >> 2] = i21;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 32 & -64;
  HEAP32[i26 >> 2] = i21 + 32 & -64;
  HEAP32[i14 >> 2] = 1869968492;
  i26 = i10;
  i21 = i2;
  HEAP32[i23 >> 2] = 0;
  HEAP32[i21 >> 2] = 0;
  HEAP32[i22 >> 2] = 0;
  _af_glyph_hints_done(i24);
  STACKTOP = i25;
  return i26 | 0;
 } else {
  HEAP32[i18 >> 2] = 6;
  i1 = 6;
 } while (0);
 i26 = i1;
 i21 = i2;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 _af_glyph_hints_done(i24);
 STACKTOP = i25;
 return i26 | 0;
}

function _TT_Vary_Apply_Glyph_Deltas(i33, i1, i29, i4, i30, i31) {
 i33 = i33 | 0;
 i1 = i1 | 0;
 i29 = i29 | 0;
 i4 = i4 | 0;
 i30 = i30 | 0;
 i31 = i31 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i32 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i37 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i35 = i37 + 8 | 0;
 i32 = i37 + 4 | 0;
 i6 = i37;
 i36 = HEAP32[i33 + 28 >> 2] | 0;
 HEAP32[i6 >> 2] = 0;
 if (i1 << 24 >> 24 == 0 | (i29 | 0) == 0) {
  i36 = 6;
  STACKTOP = i37;
  return i36 | 0;
 }
 if ((HEAP32[i29 + 32 >> 2] | 0) >>> 0 <= i4 >>> 0) {
  i36 = 0;
  STACKTOP = i37;
  return i36 | 0;
 }
 i2 = i29 + 36 | 0;
 i34 = HEAP32[i2 >> 2] | 0;
 i3 = i4 + 1 | 0;
 if ((HEAP32[i34 + (i4 << 2) >> 2] | 0) == (HEAP32[i34 + (i3 << 2) >> 2] | 0)) {
  i36 = 0;
  STACKTOP = i37;
  return i36 | 0;
 }
 i34 = _ft_mem_realloc(i36, 8, 0, i31, 0, i35) | 0;
 if (!(HEAP32[i35 >> 2] | 0)) {
  i1 = _ft_mem_realloc(i36, 1, 0, i31, 0, i35) | 0;
  if (!(HEAP32[i35 >> 2] | 0)) {
   i28 = _FT_Stream_Seek(i33, HEAP32[(HEAP32[i2 >> 2] | 0) + (i4 << 2) >> 2] | 0) | 0;
   HEAP32[i35 >> 2] = i28;
   if (!i28) {
    i28 = HEAP32[i2 >> 2] | 0;
    i28 = _FT_Stream_EnterFrame(i33, (HEAP32[i28 + (i3 << 2) >> 2] | 0) - (HEAP32[i28 + (i4 << 2) >> 2] | 0) | 0) | 0;
    HEAP32[i35 >> 2] = i28;
    if (!i28) {
     i27 = i33 + 32 | 0;
     i4 = (HEAP32[i27 >> 2] | 0) - (HEAP32[i33 >> 2] | 0) | 0;
     i28 = _ft_mem_realloc(i36, 4, 0, HEAP32[i29 >> 2] | 0, 0, i35) | 0;
     L15 : do if (!(HEAP32[i35 >> 2] | 0)) {
      i3 = _ft_mem_realloc(i36, 4, 0, HEAP32[i29 >> 2] | 0, 0, i35) | 0;
      if (!(HEAP32[i35 >> 2] | 0)) {
       i2 = _ft_mem_realloc(i36, 4, 0, HEAP32[i29 >> 2] | 0, 0, i35) | 0;
       if (!(HEAP32[i35 >> 2] | 0)) {
        i5 = (_FT_Stream_GetUShort(i33) | 0) & 65535;
        i4 = ((_FT_Stream_GetUShort(i33) | 0) & 65535) + i4 | 0;
        if (!(i5 & 32768)) i26 = 0; else {
         i26 = HEAP32[i33 >> 2] | 0;
         i25 = (HEAP32[i27 >> 2] | 0) - i26 | 0;
         HEAP32[i27 >> 2] = i26 + i4;
         i26 = _ft_var_readpackedpoints(i33, i6) | 0;
         i24 = HEAP32[i33 >> 2] | 0;
         i4 = (HEAP32[i27 >> 2] | 0) - i24 | 0;
         HEAP32[i27 >> 2] = i24 + i25;
        }
        i23 = i5 & 4095;
        if (i23) {
         i24 = i29 + 24 | 0;
         i25 = i29 + 28 | 0;
         i19 = HEAP32[i6 >> 2] | 0;
         i20 = (i31 | 0) == 0;
         i21 = i30 + 4 | 0;
         i22 = i30 + 12 | 0;
         i5 = 0;
         i18 = 0;
         while (1) {
          i17 = (_FT_Stream_GetUShort(i33) | 0) & 65535;
          i8 = _FT_Stream_GetUShort(i33) | 0;
          i9 = i8 & 65535;
          if (!(i9 & 32768)) {
           i6 = i9 & 4095;
           if (i6 >>> 0 >= (HEAP32[i24 >> 2] | 0) >>> 0) break;
           i16 = HEAP32[i29 >> 2] | 0;
           _memcpy(i28 | 0, (HEAP32[i25 >> 2] | 0) + ((Math_imul(i16, i6) | 0) << 2) | 0, i16 << 2 | 0) | 0;
          } else if (HEAP32[i29 >> 2] | 0) {
           i6 = 0;
           do {
            i16 = (_FT_Stream_GetUShort(i33) | 0) << 16 >> 16 << 2;
            HEAP32[i28 + (i6 << 2) >> 2] = i16;
            i6 = i6 + 1 | 0;
           } while (i6 >>> 0 < (HEAP32[i29 >> 2] | 0) >>> 0);
          }
          if (i9 & 16384 | 0) if (HEAP32[i29 >> 2] | 0) {
           i6 = 0;
           do {
            i7 = (_FT_Stream_GetUShort(i33) | 0) << 16 >> 16 << 2;
            HEAP32[i3 + (i6 << 2) >> 2] = i7;
            i6 = i6 + 1 | 0;
            i7 = HEAP32[i29 >> 2] | 0;
           } while (i6 >>> 0 < i7 >>> 0);
           if (i7 | 0) {
            i6 = 0;
            do {
             i16 = (_FT_Stream_GetUShort(i33) | 0) << 16 >> 16 << 2;
             HEAP32[i2 + (i6 << 2) >> 2] = i16;
             i6 = i6 + 1 | 0;
            } while (i6 >>> 0 < (HEAP32[i29 >> 2] | 0) >>> 0);
           }
          }
          i10 = _ft_var_apply_tuple(i29, i8, i28, i3, i2) | 0;
          if (i10) {
           i6 = HEAP32[i33 >> 2] | 0;
           i16 = (HEAP32[i27 >> 2] | 0) - i6 | 0;
           if (!(i9 & 8192)) {
            HEAP32[i32 >> 2] = i19;
            i6 = i26;
            i8 = i19;
           } else {
            HEAP32[i27 >> 2] = i6 + i4;
            i5 = _ft_var_readpackedpoints(i33, i32) | 0;
            i6 = i5;
            i8 = HEAP32[i32 >> 2] | 0;
           }
           i7 = (i8 | 0) == 0;
           i15 = i7 ? i31 : i8;
           i14 = _ft_var_readpackeddeltas(i33, i15) | 0;
           i15 = _ft_var_readpackeddeltas(i33, i15) | 0;
           L46 : do if (!((i14 | 0) == 0 | ((i6 | 0) == 0 | (i15 | 0) == 0))) {
            if ((i6 | 0) == (-1 | 0)) {
             if (i20) break; else i6 = 0;
             while (1) {
              i13 = _FT_MulFix(HEAP16[i14 + (i6 << 1) >> 1] | 0, i10) | 0;
              i12 = (HEAP32[i21 >> 2] | 0) + (i6 << 3) | 0;
              HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i13;
              i12 = _FT_MulFix(HEAP16[i15 + (i6 << 1) >> 1] | 0, i10) | 0;
              i13 = (HEAP32[i21 >> 2] | 0) + (i6 << 3) + 4 | 0;
              HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i12;
              i6 = i6 + 1 | 0;
              if ((i6 | 0) == (i31 | 0)) break L46;
             }
            }
            if (!i20) {
             i6 = 0;
             do {
              i11 = (HEAP32[i21 >> 2] | 0) + (i6 << 3) | 0;
              i12 = HEAP32[i11 + 4 >> 2] | 0;
              i13 = i34 + (i6 << 3) | 0;
              HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
              HEAP32[i13 + 4 >> 2] = i12;
              HEAP8[i1 + i6 >> 0] = 0;
              i6 = i6 + 1 | 0;
             } while ((i6 | 0) != (i31 | 0));
            }
            if (!i7) {
             i6 = 0;
             do {
              i7 = HEAPU16[i5 + (i6 << 1) >> 1] | 0;
              if (i7 >>> 0 < i31 >>> 0) {
               HEAP8[i1 + i7 >> 0] = 1;
               i13 = _FT_MulFix(HEAP16[i14 + (i6 << 1) >> 1] | 0, i10) | 0;
               i12 = (HEAP32[i21 >> 2] | 0) + (i7 << 3) | 0;
               HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i13;
               i12 = _FT_MulFix(HEAP16[i15 + (i6 << 1) >> 1] | 0, i10) | 0;
               i13 = (HEAP32[i21 >> 2] | 0) + (i7 << 3) + 4 | 0;
               HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i12;
              }
              i6 = i6 + 1 | 0;
             } while (i6 >>> 0 < i8 >>> 0);
            }
            if (!(HEAP16[i30 >> 1] | 0)) break;
            i13 = HEAP32[i21 >> 2] | 0;
            i12 = 0;
            i6 = 0;
            do {
             i11 = HEAP16[(HEAP32[i22 >> 2] | 0) + (i12 << 16 >> 16 << 1) >> 1] | 0;
             L67 : do if (i6 >>> 0 <= i11 >>> 0) {
              i7 = i6;
              while (1) {
               if (HEAP8[i1 + i7 >> 0] | 0) {
                i8 = i7;
                break;
               }
               i7 = i7 + 1 | 0;
               if (i7 >>> 0 > i11 >>> 0) {
                i6 = i7;
                break L67;
               }
              }
              L71 : while (1) {
               i9 = i8;
               while (1) {
                i10 = i9 + 1 | 0;
                if (i10 >>> 0 > i11 >>> 0) break L71;
                if (!(HEAP8[i1 + i10 >> 0] | 0)) i9 = i10; else break;
               }
               _tt_delta_interpolate(i8 + 1 | 0, i9, i8, i10, i34, i13);
               i8 = i10;
              }
              if ((i8 | 0) != (i7 | 0)) {
               _tt_delta_interpolate(i8 + 1 | 0, i11, i8, i7, i34, i13);
               if (!i7) {
                i6 = i10;
                break;
               }
               _tt_delta_interpolate(i6, i7 + -1 | 0, i8, i7, i34, i13);
               i6 = i10;
               break;
              }
              i8 = (HEAP32[i13 + (i7 << 3) >> 2] | 0) - (HEAP32[i34 + (i7 << 3) >> 2] | 0) | 0;
              i9 = (HEAP32[i13 + (i7 << 3) + 4 >> 2] | 0) - (HEAP32[i34 + (i7 << 3) + 4 >> 2] | 0) | 0;
              if (!(i9 | i8)) {
               i6 = i10;
               break;
              }
              if ((i6 | 0) < (i7 | 0)) do {
               i38 = i13 + (i6 << 3) | 0;
               HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + i8;
               i38 = i13 + (i6 << 3) + 4 | 0;
               HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + i9;
               i6 = i6 + 1 | 0;
              } while ((i6 | 0) != (i7 | 0));
              if ((i7 | 0) >= (i11 | 0)) {
               i6 = i10;
               break;
              }
              do {
               i7 = i7 + 1 | 0;
               i38 = i13 + (i7 << 3) | 0;
               HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + i8;
               i38 = i13 + (i7 << 3) + 4 | 0;
               HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + i9;
              } while ((i7 | 0) != (i11 | 0));
              i6 = i10;
             } while (0);
             i12 = i12 + 1 << 16 >> 16;
            } while (i12 << 16 >> 16 < (HEAP16[i30 >> 1] | 0));
           } while (0);
           if ((i5 | 0) == (-1 | 0)) i5 = -1; else {
            _ft_mem_free(i36, i5);
            i5 = 0;
           }
           _ft_mem_free(i36, i14);
           _ft_mem_free(i36, i15);
           HEAP32[i27 >> 2] = (HEAP32[i33 >> 2] | 0) + i16;
          }
          i18 = i18 + 1 | 0;
          if (i18 >>> 0 >= i23 >>> 0) break L15; else i4 = i17 + i4 | 0;
         }
         HEAP32[i35 >> 2] = 8;
        }
       }
      } else i2 = 0;
     } else {
      i3 = 0;
      i2 = 0;
     } while (0);
     _ft_mem_free(i36, i28);
     _ft_mem_free(i36, i3);
     _ft_mem_free(i36, i2);
     _FT_Stream_ExitFrame(i33);
    }
   }
  }
 } else i1 = 0;
 _ft_mem_free(i36, i34);
 _ft_mem_free(i36, i1);
 i38 = HEAP32[i35 >> 2] | 0;
 STACKTOP = i37;
 return i38 | 0;
}

function _cff_parse_font_matrix(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i15;
 i13 = HEAP32[i9 + 412 >> 2] | 0;
 i10 = i13 + 72 | 0;
 i14 = i13 + 68 | 0;
 i11 = i9 + 40 | 0;
 if ((HEAP32[i9 + 404 >> 2] | 0) >>> 0 < i11 >>> 0) {
  i14 = 161;
  STACKTOP = i15;
  return i14 | 0;
 }
 HEAP8[i13 + 64 >> 0] = 1;
 i2 = HEAP32[i9 + 16 >> 2] | 0;
 i7 = i9 + 20 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 do if (i3 << 24 >> 24 == 30) {
  i1 = _cff_parse_real(i2, i1, 0, i12) | 0;
  i4 = HEAP32[i12 >> 2] | 0;
  i6 = 25;
 } else {
  i4 = i2 + 1 | 0;
  i5 = i3 & 255;
  L7 : do switch (i3 << 24 >> 24) {
  case 28:
   {
    if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
    break;
   }
  case 29:
   {
    if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) i1 = 0; else {
     i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
     i6 = 16;
    }
    break;
   }
  default:
   {
    if ((i3 & 255) < 247) {
     i1 = i5 + -139 | 0;
     break L7;
    }
    i1 = (i2 + 2 | 0) >>> 0 > i1 >>> 0;
    if ((i3 & 255) < 251) {
     if (i1) {
      i1 = 0;
      break L7;
     }
     i1 = (HEAPU8[i4 >> 0] | 0 | (i5 << 8) + -63232) + 108 | 0;
     i6 = 16;
     break L7;
    } else {
     if (i1) {
      i1 = 0;
      break L7;
     }
     i1 = (251 - i5 << 8) + -108 - (HEAPU8[i4 >> 0] | 0) | 0;
     i6 = 16;
     break L7;
    }
   }
  } while (0);
  if ((i6 | 0) == 16) if ((i1 | 0) > 32767) {
   if ((i1 | 0) < 1e5) i2 = 5; else if ((i1 | 0) < 1e6) i2 = 6; else if ((i1 | 0) < 1e7) i2 = 7; else i2 = (i1 | 0) < 1e8 ? 8 : (i1 | 0) < 1e9 ? 9 : 10;
   i4 = i2 + -5 | 0;
   i3 = HEAP32[9356 + (i4 << 2) >> 2] | 0;
   if (((i1 | 0) / (i3 | 0) | 0 | 0) > 32767) {
    i4 = i2 + -4 | 0;
    HEAP32[i12 >> 2] = i4;
    i1 = _FT_DivFix(i1, HEAP32[9356 + (i4 << 2) >> 2] | 0) | 0;
    i6 = 25;
    break;
   } else {
    HEAP32[i12 >> 2] = i4;
    i1 = _FT_DivFix(i1, i3) | 0;
    i6 = 25;
    break;
   }
  }
  HEAP32[i13 + 48 >> 2] = i1 << 16;
  HEAP32[i12 >> 2] = 0;
  i4 = 0;
  i8 = 0;
  i6 = 27;
 } while (0);
 if ((i6 | 0) == 25) {
  i2 = i13 + 48 | 0;
  HEAP32[i2 >> 2] = i1;
  i1 = 0 - i4 | 0;
  HEAP32[i12 >> 2] = i1;
  if ((i4 + 9 | 0) >>> 0 > 9) {
   HEAP32[i2 >> 2] = 65536;
   HEAP32[i13 + 56 >> 2] = 0;
   HEAP32[i13 + 52 >> 2] = 0;
   HEAP32[i13 + 60 >> 2] = 65536;
   HEAP32[i10 >> 2] = 0;
   HEAP32[i13 + 76 >> 2] = 0;
   i1 = 1;
  } else {
   i8 = i1;
   i6 = 27;
  }
 }
 if ((i6 | 0) == 27) {
  i1 = i9 + 24 | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i7 = HEAP32[i1 >> 2] | 0;
  i6 = HEAP8[i2 >> 0] | 0;
  if (i6 << 24 >> 24 == 30) {
   i7 = _cff_parse_real(i2, i7, i8, 0) | 0;
   i6 = HEAP32[i1 >> 2] | 0;
   i1 = i7;
   i7 = HEAP32[i12 >> 2] | 0;
  } else {
   i3 = i2 + 1 | 0;
   i5 = i6 & 255;
   L41 : do switch (i6 << 24 >> 24) {
   case 28:
    {
     if ((i2 + 3 | 0) >>> 0 > i7 >>> 0) i1 = 0; else i1 = ((HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
     break;
    }
   case 29:
    {
     if ((i2 + 5 | 0) >>> 0 > i7 >>> 0) i1 = 0; else i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
     break;
    }
   default:
    {
     if ((i6 & 255) < 247) {
      i1 = i5 + -139 | 0;
      break L41;
     }
     i1 = (i2 + 2 | 0) >>> 0 > i7 >>> 0;
     if ((i6 & 255) < 251) {
      if (i1) {
       i1 = 0;
       break L41;
      }
      i1 = (HEAPU8[i3 >> 0] | 0 | (i5 << 8) + -63232) + 108 | 0;
      break L41;
     } else {
      if (i1) {
       i1 = 0;
       break L41;
      }
      i1 = (251 - i5 << 8) + -108 - (HEAPU8[i3 >> 0] | 0) | 0;
      break L41;
     }
    }
   } while (0);
   if (i4) i1 = Math_imul(HEAP32[9356 + (i8 << 2) >> 2] | 0, i1) | 0;
   i6 = i7;
   i1 = (i1 | 0) > 32767 ? 2147483647 : (i1 | 0) < -32767 ? -2147483647 : i1 << 16;
   i7 = i8;
  }
  HEAP32[i13 + 56 >> 2] = i1;
  i1 = i9 + 28 | 0;
  i5 = HEAP32[i1 >> 2] | 0;
  i4 = HEAP8[i6 >> 0] | 0;
  if (i4 << 24 >> 24 == 30) {
   i7 = _cff_parse_real(i6, i5, i7, 0) | 0;
   i6 = HEAP32[i1 >> 2] | 0;
   i1 = i7;
   i7 = HEAP32[i12 >> 2] | 0;
  } else {
   i2 = i6 + 1 | 0;
   i3 = i4 & 255;
   L63 : do switch (i4 << 24 >> 24) {
   case 28:
    {
     if ((i6 + 3 | 0) >>> 0 > i5 >>> 0) i1 = 0; else i1 = ((HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i6 + 2 >> 0] | 0)) << 16 >> 16;
     break;
    }
   case 29:
    {
     if ((i6 + 5 | 0) >>> 0 > i5 >>> 0) i1 = 0; else i1 = (HEAPU8[i6 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i6 + 3 >> 0] | 0) << 8 | (HEAPU8[i6 + 4 >> 0] | 0);
     break;
    }
   default:
    {
     if ((i4 & 255) < 247) {
      i1 = i3 + -139 | 0;
      break L63;
     }
     i1 = (i6 + 2 | 0) >>> 0 > i5 >>> 0;
     if ((i4 & 255) < 251) {
      if (i1) {
       i1 = 0;
       break L63;
      }
      i1 = (HEAPU8[i2 >> 0] | 0 | (i3 << 8) + -63232) + 108 | 0;
      break L63;
     } else {
      if (i1) {
       i1 = 0;
       break L63;
      }
      i1 = (251 - i3 << 8) + -108 - (HEAPU8[i2 >> 0] | 0) | 0;
      break L63;
     }
    }
   } while (0);
   if (i7) i1 = Math_imul(HEAP32[9356 + (i7 << 2) >> 2] | 0, i1) | 0;
   i6 = i5;
   i1 = (i1 | 0) > 32767 ? 2147483647 : (i1 | 0) < -32767 ? -2147483647 : i1 << 16;
  }
  HEAP32[i13 + 52 >> 2] = i1;
  i1 = i9 + 32 | 0;
  i5 = HEAP32[i1 >> 2] | 0;
  i4 = HEAP8[i6 >> 0] | 0;
  if (i4 << 24 >> 24 == 30) {
   i7 = _cff_parse_real(i6, i5, i7, 0) | 0;
   i6 = HEAP32[i1 >> 2] | 0;
   i1 = i7;
   i7 = HEAP32[i12 >> 2] | 0;
  } else {
   i2 = i6 + 1 | 0;
   i3 = i4 & 255;
   L85 : do switch (i4 << 24 >> 24) {
   case 28:
    {
     if ((i6 + 3 | 0) >>> 0 > i5 >>> 0) i1 = 0; else i1 = ((HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i6 + 2 >> 0] | 0)) << 16 >> 16;
     break;
    }
   case 29:
    {
     if ((i6 + 5 | 0) >>> 0 > i5 >>> 0) i1 = 0; else i1 = (HEAPU8[i6 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i6 + 3 >> 0] | 0) << 8 | (HEAPU8[i6 + 4 >> 0] | 0);
     break;
    }
   default:
    {
     if ((i4 & 255) < 247) {
      i1 = i3 + -139 | 0;
      break L85;
     }
     i1 = (i6 + 2 | 0) >>> 0 > i5 >>> 0;
     if ((i4 & 255) < 251) {
      if (i1) {
       i1 = 0;
       break L85;
      }
      i1 = (HEAPU8[i2 >> 0] | 0 | (i3 << 8) + -63232) + 108 | 0;
      break L85;
     } else {
      if (i1) {
       i1 = 0;
       break L85;
      }
      i1 = (251 - i3 << 8) + -108 - (HEAPU8[i2 >> 0] | 0) | 0;
      break L85;
     }
    }
   } while (0);
   if (i7) i1 = Math_imul(HEAP32[9356 + (i7 << 2) >> 2] | 0, i1) | 0;
   i6 = i5;
   i1 = (i1 | 0) > 32767 ? 2147483647 : (i1 | 0) < -32767 ? -2147483647 : i1 << 16;
  }
  HEAP32[i13 + 60 >> 2] = i1;
  i1 = i9 + 36 | 0;
  i5 = HEAP32[i1 >> 2] | 0;
  i4 = HEAP8[i6 >> 0] | 0;
  if (i4 << 24 >> 24 == 30) {
   i6 = _cff_parse_real(i6, i5, i7, 0) | 0;
   i5 = HEAP32[i1 >> 2] | 0;
   i1 = i6;
   i6 = HEAP32[i12 >> 2] | 0;
  } else {
   i2 = i6 + 1 | 0;
   i3 = i4 & 255;
   L107 : do switch (i4 << 24 >> 24) {
   case 28:
    {
     if ((i6 + 3 | 0) >>> 0 > i5 >>> 0) i1 = 0; else i1 = ((HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i6 + 2 >> 0] | 0)) << 16 >> 16;
     break;
    }
   case 29:
    {
     if ((i6 + 5 | 0) >>> 0 > i5 >>> 0) i1 = 0; else i1 = (HEAPU8[i6 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i6 + 3 >> 0] | 0) << 8 | (HEAPU8[i6 + 4 >> 0] | 0);
     break;
    }
   default:
    {
     if ((i4 & 255) < 247) {
      i1 = i3 + -139 | 0;
      break L107;
     }
     i1 = (i6 + 2 | 0) >>> 0 > i5 >>> 0;
     if ((i4 & 255) < 251) {
      if (i1) {
       i1 = 0;
       break L107;
      }
      i1 = (HEAPU8[i2 >> 0] | 0 | (i3 << 8) + -63232) + 108 | 0;
      break L107;
     } else {
      if (i1) {
       i1 = 0;
       break L107;
      }
      i1 = (251 - i3 << 8) + -108 - (HEAPU8[i2 >> 0] | 0) | 0;
      break L107;
     }
    }
   } while (0);
   if (i7) i1 = Math_imul(HEAP32[9356 + (i7 << 2) >> 2] | 0, i1) | 0;
   i1 = (i1 | 0) > 32767 ? 2147483647 : (i1 | 0) < -32767 ? -2147483647 : i1 << 16;
   i6 = i7;
  }
  HEAP32[i10 >> 2] = i1;
  i1 = HEAP32[i11 >> 2] | 0;
  i4 = HEAP8[i5 >> 0] | 0;
  if (i4 << 24 >> 24 == 30) {
   i2 = _cff_parse_real(i5, i1, i6, 0) | 0;
   i1 = HEAP32[i12 >> 2] | 0;
  } else {
   i2 = i5 + 1 | 0;
   i3 = i4 & 255;
   L129 : do switch (i4 << 24 >> 24) {
   case 28:
    {
     if ((i5 + 3 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = ((HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i5 + 2 >> 0] | 0)) << 16 >> 16;
     break;
    }
   case 29:
    {
     if ((i5 + 5 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = (HEAPU8[i5 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i5 + 3 >> 0] | 0) << 8 | (HEAPU8[i5 + 4 >> 0] | 0);
     break;
    }
   default:
    {
     if ((i4 & 255) < 247) {
      i1 = i3 + -139 | 0;
      break L129;
     }
     i1 = (i5 + 2 | 0) >>> 0 > i1 >>> 0;
     if ((i4 & 255) < 251) {
      if (i1) {
       i1 = 0;
       break L129;
      }
      i1 = (HEAPU8[i2 >> 0] | 0 | (i3 << 8) + -63232) + 108 | 0;
      break L129;
     } else {
      if (i1) {
       i1 = 0;
       break L129;
      }
      i1 = (251 - i3 << 8) + -108 - (HEAPU8[i2 >> 0] | 0) | 0;
      break L129;
     }
    }
   } while (0);
   if (i6) i1 = Math_imul(HEAP32[9356 + (i6 << 2) >> 2] | 0, i1) | 0;
   i2 = (i1 | 0) > 32767 ? 2147483647 : (i1 | 0) < -32767 ? -2147483647 : i1 << 16;
   i1 = i6;
  }
  HEAP32[i13 + 76 >> 2] = i2;
  i1 = HEAP32[9356 + (i1 << 2) >> 2] | 0;
 }
 HEAP32[i14 >> 2] = i1;
 i14 = 0;
 STACKTOP = i15;
 return i14 | 0;
}

function _cff_parser_run(i14, i1, i16) {
 i14 = i14 | 0;
 i1 = i1 | 0;
 i16 = i16 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i17 = i14 + 16 | 0;
 i18 = i14 + 404 | 0;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i14 + 4 >> 2] = i1;
 HEAP32[i14 + 8 >> 2] = i16;
 HEAP32[i14 + 12 >> 2] = i1;
 i19 = i17;
 i20 = i14 + 408 | 0;
 i15 = i14 + 412 | 0;
 i13 = i14 + 20 | 0;
 i2 = i1;
 i1 = 0;
 L1 : while (1) {
  if (i2 >>> 0 >= i16 >>> 0) break;
  i4 = HEAP8[i2 >> 0] | 0;
  i5 = HEAP32[i18 >> 2] | 0;
  i3 = i5 - i19 | 0;
  i6 = i3 >> 2;
  L4 : do if ((i4 & 255) > 26 & i4 << 24 >> 24 != 31) if ((i3 | 0) > 380) i3 = 4; else {
   HEAP32[i18 >> 2] = i5 + 4;
   HEAP32[i5 >> 2] = i2;
   switch (i4 << 24 >> 24) {
   case 30:
    {
     while (1) {
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 >= i16 >>> 0) {
       i3 = 7;
       break L4;
      }
      i12 = HEAPU8[i2 >> 0] | 0;
      if ((i12 & 240 | 0) == 240 | (i12 & 15 | 0) == 15) {
       i7 = 94;
       break;
      }
     }
     break;
    }
   case 28:
    {
     i2 = i2 + 2 | 0;
     i7 = 94;
     break L4;
    }
   case 29:
    {
     i2 = i2 + 4 | 0;
     i7 = 94;
     break L4;
    }
   default:
    {
     i2 = (i4 & 255) > 246 ? i2 + 1 | 0 : i2;
     i7 = 94;
     break L4;
    }
   }
  } else {
   i3 = i4 & 255;
   HEAP32[i5 >> 2] = i2;
   if (i4 << 24 >> 24 == 12) {
    i2 = i2 + 1 | 0;
    if (i2 >>> 0 >= i16 >>> 0) {
     i3 = 8;
     break;
    }
    i3 = HEAPU8[i2 >> 0] | 256;
   }
   i5 = HEAP32[i20 >> 2] | i3;
   i8 = 7900;
   i4 = 4;
   while (1) {
    if ((HEAP32[i8 + 4 >> 2] | 0) == (i5 | 0)) {
     i7 = 16;
     break;
    }
    i3 = i8 + 28 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else i8 = i3;
   }
   L22 : do if ((i7 | 0) == 16) {
    i7 = 0;
    i3 = HEAP32[i15 >> 2] | 0;
    i9 = i3 + (HEAP32[i8 + 8 >> 2] | 0) | 0;
    if ((i6 | 0) == 0 & (i4 | 0) != 6) {
     i3 = 12;
     break L4;
    }
    L25 : do switch (i4 | 0) {
    case 1:
    case 4:
    case 5:
     {
      i4 = HEAP32[i17 >> 2] | 0;
      i3 = HEAP32[i13 >> 2] | 0;
      i5 = HEAP8[i4 >> 0] | 0;
      if (i5 << 24 >> 24 == 30) {
       i3 = (_cff_parse_real(i4, i3, 0, 0) | 0) >> 16;
       break L25;
      }
      i6 = i4 + 1 | 0;
      i7 = i5 & 255;
      switch (i5 << 24 >> 24) {
      case 28:
       {
        if ((i4 + 3 | 0) >>> 0 > i3 >>> 0) {
         i3 = 0;
         break L25;
        }
        i3 = (HEAPU8[i6 >> 0] << 8 | HEAPU8[i4 + 2 >> 0]) << 16 >> 16;
        break L25;
       }
      case 29:
       {
        if ((i4 + 5 | 0) >>> 0 > i3 >>> 0) {
         i3 = 0;
         break L25;
        }
        i3 = HEAPU8[i4 + 2 >> 0] << 16 | HEAPU8[i6 >> 0] << 24 | HEAPU8[i4 + 3 >> 0] << 8 | HEAPU8[i4 + 4 >> 0];
        break L25;
       }
      default:
       {
        if ((i5 & 255) < 247) {
         i3 = i7 + -139 | 0;
         break L25;
        }
        i3 = (i4 + 2 | 0) >>> 0 > i3 >>> 0;
        if ((i5 & 255) < 251) {
         if (i3) {
          i3 = 0;
          break L25;
         }
         i3 = (HEAPU8[i6 >> 0] | (i7 << 8) + -63232) + 108 | 0;
         break L25;
        } else {
         if (i3) {
          i3 = 0;
          break L25;
         }
         i3 = (251 - i7 << 8) + -108 - (HEAPU8[i6 >> 0] | 0) | 0;
         break L25;
        }
       }
      }
     }
    case 2:
     {
      i4 = HEAP32[i17 >> 2] | 0;
      i3 = HEAP32[i13 >> 2] | 0;
      i5 = HEAP8[i4 >> 0] | 0;
      if (i5 << 24 >> 24 == 30) {
       i3 = _cff_parse_real(i4, i3, 0, 0) | 0;
       break L25;
      }
      i6 = i4 + 1 | 0;
      i7 = i5 & 255;
      L49 : do switch (i5 << 24 >> 24) {
      case 28:
       {
        if ((i4 + 3 | 0) >>> 0 > i3 >>> 0) {
         i3 = 0;
         i7 = 46;
        } else {
         i3 = (HEAPU8[i6 >> 0] << 8 | HEAPU8[i4 + 2 >> 0]) << 16 >> 16;
         i7 = 46;
        }
        break;
       }
      case 29:
       {
        if ((i4 + 5 | 0) >>> 0 > i3 >>> 0) {
         i3 = 0;
         i7 = 46;
        } else {
         i3 = HEAPU8[i4 + 2 >> 0] << 16 | HEAPU8[i6 >> 0] << 24 | HEAPU8[i4 + 3 >> 0] << 8 | HEAPU8[i4 + 4 >> 0];
         i7 = 47;
        }
        break;
       }
      default:
       {
        if ((i5 & 255) < 247) {
         i3 = i7 + -139 | 0;
         i7 = 46;
         break L49;
        }
        i3 = (i4 + 2 | 0) >>> 0 > i3 >>> 0;
        if ((i5 & 255) < 251) {
         if (i3) {
          i3 = 0;
          i7 = 46;
          break L49;
         }
         i3 = (HEAPU8[i6 >> 0] | (i7 << 8) + -63232) + 108 | 0;
         i7 = 47;
         break L49;
        } else {
         if (i3) {
          i3 = 0;
          i7 = 46;
          break L49;
         }
         i3 = (251 - i7 << 8) + -108 - (HEAPU8[i6 >> 0] | 0) | 0;
         i7 = 47;
         break L49;
        }
       }
      } while (0);
      if ((i7 | 0) == 46) i3 = (i3 | 0) < -32767 ? -2147483647 : i3 << 16; else if ((i7 | 0) == 47) if ((i3 | 0) > 32767) {
       i3 = 2147483647;
       break L25;
      } else i3 = (i3 | 0) < -32767 ? -2147483647 : i3 << 16;
      break;
     }
    case 3:
     {
      i4 = HEAP32[i17 >> 2] | 0;
      i3 = HEAP32[i13 >> 2] | 0;
      i5 = HEAP8[i4 >> 0] | 0;
      if (i5 << 24 >> 24 == 30) {
       i3 = _cff_parse_real(i4, i3, 3, 0) | 0;
       break L25;
      }
      i6 = i4 + 1 | 0;
      i7 = i5 & 255;
      L71 : do switch (i5 << 24 >> 24) {
      case 28:
       {
        if ((i4 + 3 | 0) >>> 0 > i3 >>> 0) i3 = 0; else i3 = (HEAPU8[i6 >> 0] << 8 | HEAPU8[i4 + 2 >> 0]) << 16 >> 16;
        break;
       }
      case 29:
       {
        if ((i4 + 5 | 0) >>> 0 > i3 >>> 0) i3 = 0; else i3 = HEAPU8[i4 + 2 >> 0] << 16 | HEAPU8[i6 >> 0] << 24 | HEAPU8[i4 + 3 >> 0] << 8 | HEAPU8[i4 + 4 >> 0];
        break;
       }
      default:
       {
        if ((i5 & 255) < 247) {
         i3 = i7 + -139 | 0;
         break L71;
        }
        i3 = (i4 + 2 | 0) >>> 0 > i3 >>> 0;
        if ((i5 & 255) < 251) {
         if (i3) {
          i3 = 0;
          break L71;
         }
         i3 = (HEAPU8[i6 >> 0] | (i7 << 8) + -63232) + 108 | 0;
         break L71;
        } else {
         if (i3) {
          i3 = 0;
          break L71;
         }
         i3 = (251 - i7 << 8) + -108 - (HEAPU8[i6 >> 0] | 0) | 0;
         break L71;
        }
       }
      } while (0);
      i12 = i3 * 1e3 | 0;
      i3 = Math_imul(i3, 65536e3) | 0;
      i3 = (i12 | 0) > 32767 ? 2147483647 : (i12 | 0) < -32767 ? -2147483647 : i3;
      break;
     }
    case 6:
     {
      i4 = HEAP32[i8 + 20 >> 2] | 0;
      i4 = i6 >>> 0 > i4 >>> 0 ? i4 : i6;
      HEAP8[i3 + (HEAP32[i8 + 24 >> 2] | 0) >> 0] = i4;
      if (!i4) break L22;
      i12 = i8 + 12 | 0;
      i11 = i17;
      i10 = 0;
      while (1) {
       i5 = HEAP32[i11 >> 2] | 0;
       i11 = i11 + 4 | 0;
       i3 = HEAP32[i11 >> 2] | 0;
       i6 = HEAP8[i5 >> 0] | 0;
       L90 : do if (i6 << 24 >> 24 == 30) i3 = (_cff_parse_real(i5, i3, 0, 0) | 0) >> 16; else {
        i7 = i5 + 1 | 0;
        i8 = i6 & 255;
        switch (i6 << 24 >> 24) {
        case 28:
         {
          if ((i5 + 3 | 0) >>> 0 > i3 >>> 0) {
           i3 = 0;
           break L90;
          }
          i3 = (HEAPU8[i7 >> 0] << 8 | HEAPU8[i5 + 2 >> 0]) << 16 >> 16;
          break L90;
         }
        case 29:
         {
          if ((i5 + 5 | 0) >>> 0 > i3 >>> 0) {
           i3 = 0;
           break L90;
          }
          i3 = HEAPU8[i5 + 2 >> 0] << 16 | HEAPU8[i7 >> 0] << 24 | HEAPU8[i5 + 3 >> 0] << 8 | HEAPU8[i5 + 4 >> 0];
          break L90;
         }
        default:
         {
          if ((i6 & 255) < 247) {
           i3 = i8 + -139 | 0;
           break L90;
          }
          i3 = (i5 + 2 | 0) >>> 0 > i3 >>> 0;
          if ((i6 & 255) < 251) {
           if (i3) {
            i3 = 0;
            break L90;
           }
           i3 = (HEAPU8[i7 >> 0] | (i8 << 8) + -63232) + 108 | 0;
           break L90;
          } else {
           if (i3) {
            i3 = 0;
            break L90;
           }
           i3 = (251 - i8 << 8) + -108 - (HEAPU8[i7 >> 0] | 0) | 0;
           break L90;
          }
         }
        }
       } while (0);
       i10 = i3 + i10 | 0;
       i3 = HEAP8[i12 >> 0] | 0;
       switch (i3 << 24 >> 24) {
       case 1:
        {
         HEAP8[i9 >> 0] = i10;
         i3 = HEAP8[i12 >> 0] | 0;
         break;
        }
       case 2:
        {
         HEAP16[i9 >> 1] = i10;
         i3 = 2;
         break;
        }
       case 4:
        {
         HEAP32[i9 >> 2] = i10;
         i3 = 4;
         break;
        }
       default:
        HEAP32[i9 >> 2] = i10;
       }
       i4 = i4 + -1 | 0;
       if (!i4) break L22; else i9 = i9 + (i3 & 255) | 0;
      }
     }
    default:
     {
      i1 = FUNCTION_TABLE_ii[HEAP32[i8 + 16 >> 2] & 63](i14) | 0;
      if (!i1) {
       i1 = 0;
       break L22;
      } else {
       i3 = 7;
       break L4;
      }
     }
    } while (0);
    switch (HEAP8[i8 + 12 >> 0] | 0) {
    case 1:
     {
      HEAP8[i9 >> 0] = i3;
      break L22;
     }
    case 2:
     {
      HEAP16[i9 >> 1] = i3;
      break L22;
     }
    case 4:
     {
      HEAP32[i9 >> 2] = i3;
      break L22;
     }
    default:
     {
      HEAP32[i9 >> 2] = i3;
      break L22;
     }
    }
   } while (0);
   HEAP32[i18 >> 2] = i17;
   i7 = 94;
  } while (0);
  if ((i7 | 0) == 94) {
   i7 = 0;
   i3 = 0;
   i2 = i2 + 1 | 0;
  }
  switch (i3 >>> 2 | i3 << 30 | 0) {
  case 0:
   break;
  case 3:
  case 1:
  case 2:
   {
    i1 = 6;
    i7 = 97;
    break L1;
   }
  default:
   break L1;
  }
 }
 if ((i7 | 0) == 97) return i1 | 0;
 i20 = i1;
 return i20 | 0;
}

function _t1_ps_get_font_value(i4, i2, i6, i8, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i7 = 0;
 i3 = (i1 | 0) > 0;
 i7 = i3 ? i1 : 0;
 i1 = i4 + 132 | 0;
 do switch (i2 | 0) {
 case 0:
  {
   if ((i8 | 0) == 0 | i3 ^ 1) i1 = 1; else {
    HEAP8[i8 >> 0] = HEAP8[i1 + 301 >> 0] | 0;
    i1 = 1;
   }
   break;
  }
 case 1:
  {
   if (i6 >>> 0 < 4) if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    switch (i6 | 0) {
    case 0:
     {
      i1 = i4 + 436 | 0;
      i5 = 11;
      break;
     }
    case 1:
     {
      i1 = i4 + 436 + 4 | 0;
      i5 = 11;
      break;
     }
    case 2:
     {
      i1 = i4 + 436 + 8 | 0;
      i5 = 11;
      break;
     }
    case 3:
     {
      i1 = i4 + 436 + 12 | 0;
      i5 = 11;
      break;
     }
    default:
     i1 = 0;
    }
    if ((i5 | 0) == 11) i1 = HEAP32[i1 >> 2] | 0;
    HEAP32[i8 >> 2] = i1;
    i1 = 4;
   } else i1 = 4; else i1 = 0;
   break;
  }
 case 2:
  {
   if (i6 >>> 0 < 4) if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    switch (i6 | 0) {
    case 0:
     {
      i1 = i4 + 460 | 0;
      i5 = 20;
      break;
     }
    case 1:
     {
      i1 = i4 + 460 + 4 | 0;
      i5 = 20;
      break;
     }
    case 2:
     {
      i1 = i4 + 460 + 8 | 0;
      i5 = 20;
      break;
     }
    case 3:
     {
      i1 = i4 + 460 + 12 | 0;
      i5 = 20;
      break;
     }
    default:
     i1 = 0;
    }
    if ((i5 | 0) == 20) i1 = HEAP32[i1 >> 2] | 0;
    HEAP32[i8 >> 2] = i1;
    i1 = 4;
   } else i1 = 4; else i1 = 0;
   break;
  }
 case 3:
  {
   if ((i8 | 0) == 0 | i3 ^ 1) i1 = 1; else {
    HEAP8[i8 >> 0] = HEAP8[i4 + 432 >> 0] | 0;
    i1 = 1;
   }
   break;
  }
 case 4:
  {
   i2 = HEAP32[i4 + 364 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i8 | 0) == 0 | i7 >>> 0 < i1 >>> 0)) _memcpy(i8 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 5:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    HEAP32[i8 >> 2] = HEAP32[i4 + 168 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 6:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    HEAP32[i8 >> 2] = HEAP32[i4 + 416 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 7:
  {
   if ((HEAP32[i4 + 416 >> 2] | 0) >>> 0 > i6 >>> 0) {
    i2 = HEAP32[(HEAP32[i4 + 420 >> 2] | 0) + (i6 << 2) >> 2] | 0;
    i3 = _strlen(i2) | 0;
    i1 = i3 + 1 | 0;
    if (!((i8 | 0) == 0 | i7 >>> 0 < i1 >>> 0)) {
     _memcpy(i8 | 0, i2 | 0, i1 | 0) | 0;
     HEAP8[i8 + i3 >> 0] = 0;
    }
   } else i1 = 0;
   break;
  }
 case 8:
  {
   if ((HEAP32[i4 + 416 >> 2] | 0) >>> 0 > i6 >>> 0) {
    i2 = HEAP32[(HEAP32[i4 + 428 >> 2] | 0) + (i6 << 2) >> 2] | 0;
    i1 = i2 + 1 | 0;
    if (!((i8 | 0) == 0 | i7 >>> 0 < i1 >>> 0)) {
     _memcpy(i8 | 0, HEAP32[(HEAP32[i4 + 424 >> 2] | 0) + (i6 << 2) >> 2] | 0, i2 | 0) | 0;
     HEAP8[i8 + i2 >> 0] = 0;
    }
   } else i1 = 0;
   break;
  }
 case 9:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    HEAP32[i8 >> 2] = HEAP32[i4 + 368 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 10:
  {
   if ((HEAP32[i4 + 368 >> 2] | 0) == 1) {
    i1 = i4 + 372 | 0;
    if ((HEAP32[i1 >> 2] | 0) >>> 0 > i6 >>> 0) {
     i2 = HEAP32[(HEAP32[i1 + 16 >> 2] | 0) + (i6 << 2) >> 2] | 0;
     i3 = _strlen(i2) | 0;
     i1 = i3 + 1 | 0;
     if (!((i8 | 0) == 0 | i7 >>> 0 < i1 >>> 0)) {
      _memcpy(i8 | 0, i2 | 0, i3 | 0) | 0;
      HEAP8[i8 + i3 >> 0] = 0;
     }
    } else i1 = 0;
   } else i1 = 0;
   break;
  }
 case 11:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    HEAP32[i8 >> 2] = HEAP32[i4 + 404 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 12:
  {
   if ((HEAP32[i4 + 404 >> 2] | 0) >>> 0 > i6 >>> 0) {
    i2 = HEAP32[(HEAP32[i4 + 412 >> 2] | 0) + (i6 << 2) >> 2] | 0;
    i1 = i2 + 1 | 0;
    if (!((i8 | 0) == 0 | i7 >>> 0 < i1 >>> 0)) {
     _memcpy(i8 | 0, HEAP32[(HEAP32[i4 + 408 >> 2] | 0) + (i6 << 2) >> 2] | 0, i2 | 0) | 0;
     HEAP8[i8 + i2 >> 0] = 0;
    }
   } else i1 = 0;
   break;
  }
 case 13:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i4 + 168 + 120 >> 1] | 0;
    i1 = 2;
   } else i1 = 2;
   break;
  }
 case 14:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i4 + 168 + 122 >> 1] | 0;
    i1 = 2;
   } else i1 = 2;
   break;
  }
 case 15:
  {
   if ((i8 | 0) == 0 | i3 ^ 1) i1 = 1; else {
    HEAP8[i8 >> 0] = HEAP8[i4 + 168 + 8 >> 0] | 0;
    i1 = 1;
   }
   break;
  }
 case 16:
  {
   i1 = i4 + 168 | 0;
   if ((HEAPU8[i1 + 8 >> 0] | 0) >>> 0 > i6 >>> 0) if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i1 + 12 + (i6 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = 0;
   break;
  }
 case 24:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    HEAP32[i8 >> 2] = HEAP32[i4 + 168 + 108 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 17:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    HEAP32[i8 >> 2] = HEAP32[i4 + 168 + 116 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 25:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    HEAP32[i8 >> 2] = HEAP32[i4 + 168 + 112 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 18:
  {
   if ((i8 | 0) == 0 | i3 ^ 1) i1 = 1; else {
    HEAP8[i8 >> 0] = HEAP8[i4 + 168 + 9 >> 0] | 0;
    i1 = 1;
   }
   break;
  }
 case 19:
  {
   i1 = i4 + 168 | 0;
   if ((HEAPU8[i1 + 9 >> 0] | 0) >>> 0 > i6 >>> 0) if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i1 + 40 + (i6 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = 0;
   break;
  }
 case 20:
  {
   if ((i8 | 0) == 0 | i3 ^ 1) i1 = 1; else {
    HEAP8[i8 >> 0] = HEAP8[i4 + 168 + 10 >> 0] | 0;
    i1 = 1;
   }
   break;
  }
 case 21:
  {
   i1 = i4 + 168 | 0;
   if ((HEAPU8[i1 + 10 >> 0] | 0) >>> 0 > i6 >>> 0) if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i1 + 60 + (i6 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = 0;
   break;
  }
 case 22:
  {
   if ((i8 | 0) == 0 | i3 ^ 1) i1 = 1; else {
    HEAP8[i8 >> 0] = HEAP8[i4 + 168 + 11 >> 0] | 0;
    i1 = 1;
   }
   break;
  }
 case 23:
  {
   i1 = i4 + 168 | 0;
   if ((HEAPU8[i1 + 11 >> 0] | 0) >>> 0 > i6 >>> 0) if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i1 + 88 + (i6 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = 0;
   break;
  }
 case 26:
  {
   if ((i8 | 0) == 0 | i3 ^ 1) i1 = 1; else {
    HEAP8[i8 >> 0] = HEAP8[i4 + 168 + 124 >> 0] | 0;
    i1 = 1;
   }
   break;
  }
 case 27:
  {
   i1 = i4 + 168 | 0;
   if ((HEAPU8[i1 + 124 >> 0] | 0) >>> 0 > i6 >>> 0) if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i1 + 128 + (i6 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = 0;
   break;
  }
 case 28:
  {
   if ((i8 | 0) == 0 | i3 ^ 1) i1 = 1; else {
    HEAP8[i8 >> 0] = HEAP8[i4 + 168 + 125 >> 0] | 0;
    i1 = 1;
   }
   break;
  }
 case 29:
  {
   i1 = i4 + 168 | 0;
   if ((HEAPU8[i1 + 125 >> 0] | 0) >>> 0 > i6 >>> 0) if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i1 + 154 + (i6 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = 0;
   break;
  }
 case 31:
  {
   if ((i8 | 0) == 0 | i3 ^ 1) i1 = 1; else {
    HEAP8[i8 >> 0] = HEAP8[i4 + 168 + 127 >> 0] | 0;
    i1 = 1;
   }
   break;
  }
 case 30:
  {
   if ((i8 | 0) == 0 | i3 ^ 1) i1 = 1; else {
    HEAP8[i8 >> 0] = HEAP8[i4 + 168 + 126 >> 0] | 0;
    i1 = 1;
   }
   break;
  }
 case 32:
  {
   if (i6 >>> 0 < 2) if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i4 + 168 + 192 + (i6 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = 0;
   break;
  }
 case 33:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    HEAP32[i8 >> 2] = HEAP32[i4 + 168 + 4 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 34:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    HEAP32[i8 >> 2] = HEAP32[i4 + 168 + 188 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 35:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    HEAP32[i8 >> 2] = HEAP32[i4 + 168 + 184 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 41:
  {
   if ((i8 | 0) == 0 | i3 ^ 1) i1 = 1; else {
    HEAP8[i8 >> 0] = HEAP8[i4 + 156 >> 0] | 0;
    i1 = 1;
   }
   break;
  }
 case 42:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i1 + 26 >> 1] | 0;
    i1 = 2;
   } else i1 = 2;
   break;
  }
 case 43:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i4 + 160 >> 1] | 0;
    i1 = 2;
   } else i1 = 2;
   break;
  }
 case 44:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 1) {
    HEAP16[i8 >> 1] = HEAP16[i4 + 164 >> 1] | 0;
    i1 = 2;
   } else i1 = 2;
   break;
  }
 case 36:
  {
   i2 = HEAP32[i1 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i8 | 0) == 0 | i7 >>> 0 < i1 >>> 0)) _memcpy(i8 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 37:
  {
   i2 = HEAP32[i4 + 136 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i8 | 0) == 0 | i7 >>> 0 < i1 >>> 0)) _memcpy(i8 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 38:
  {
   i2 = HEAP32[i4 + 140 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i8 | 0) == 0 | i7 >>> 0 < i1 >>> 0)) _memcpy(i8 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 39:
  {
   i2 = HEAP32[i4 + 144 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i8 | 0) == 0 | i7 >>> 0 < i1 >>> 0)) _memcpy(i8 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 40:
  {
   i2 = HEAP32[i4 + 148 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i8 | 0) == 0 | i7 >>> 0 < i1 >>> 0)) _memcpy(i8 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 45:
  {
   if ((i8 | 0) != 0 & i7 >>> 0 > 3) {
    HEAP32[i8 >> 2] = HEAP32[i4 + 152 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 default:
  i1 = 0;
 } while (0);
 return ((i1 | 0) == 0 ? -1 : i1) | 0;
}

function _appendAttributeValue(i18, i19, i30, i2, i44, i45) {
 i18 = i18 | 0;
 i19 = i19 | 0;
 i30 = i30 | 0;
 i2 = i2 | 0;
 i44 = i44 | 0;
 i45 = i45 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
 i49 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i46 = i49 + 4 | 0;
 i47 = i49;
 i48 = HEAP32[i18 + 356 >> 2] | 0;
 i20 = i19 + 16 | 0;
 i21 = i19 + 44 | 0;
 i22 = i18 + 144 | 0;
 i23 = i18 + 288 | 0;
 i24 = i30 << 24 >> 24 == 0;
 i25 = i45 + 12 | 0;
 i26 = i45 + 16 | 0;
 i27 = i45 + 8 | 0;
 i28 = i19 + 48 | 0;
 i29 = i19 + 68 | 0;
 i31 = i18 + 440 | 0;
 i32 = i18 + 452 | 0;
 i33 = i19 + 60 | 0;
 i34 = i18 + 448 | 0;
 i35 = i18 + 456 | 0;
 i36 = i48 + 8 | 0;
 i37 = (i48 + 80 | 0) == (i45 | 0);
 i38 = i18 + 272 | 0;
 i39 = i48 + 130 | 0;
 i40 = i48 + 129 | 0;
 i41 = i18 + 300 | 0;
 i42 = i18 + 228 | 0;
 i17 = i18 + 496 | 0;
 i43 = i48 + 4 | 0;
 i1 = 0;
 L1 : while (1) {
  L3 : while (1) {
   switch (FUNCTION_TABLE_iiiii[HEAP32[i20 >> 2] & 127](i19, i2, i44, i47) | 0) {
   case -4:
    {
     i1 = 0;
     break L1;
    }
   case 0:
    {
     i16 = 4;
     break L1;
    }
   case -1:
    {
     i16 = 6;
     break L1;
    }
   case 6:
    {
     i16 = 23;
     break L3;
    }
   case -3:
    {
     i16 = 29;
     break L3;
    }
   case 7:
   case 39:
    {
     i16 = 30;
     break L3;
    }
   case 10:
    {
     i3 = FUNCTION_TABLE_iii[HEAP32[i21 >> 2] & 255](i19, i2) | 0;
     L7 : do if ((i3 | 0) < 0) if ((HEAP32[i22 >> 2] | 0) == (i19 | 0)) {
      HEAP32[i23 >> 2] = i2;
      i3 = 1;
      i1 = 14;
     } else {
      i3 = 1;
      i1 = 14;
     } else {
      if (i24 & (i3 | 0) == 32) {
       i4 = HEAP32[i25 >> 2] | 0;
       if ((i4 | 0) == (HEAP32[i26 >> 2] | 0)) {
        i3 = 4;
        break;
       }
       if ((HEAP8[i4 + -1 >> 0] | 0) == 32) {
        i3 = 4;
        break;
       }
      }
      i5 = _XmlUtf8Encode(i3, i46) | 0;
      if (!i5) {
       if ((HEAP32[i22 >> 2] | 0) != (i19 | 0)) {
        i3 = 1;
        i1 = 14;
        break;
       }
       HEAP32[i23 >> 2] = i2;
       i3 = 1;
       i1 = 14;
       break;
      }
      if ((i5 | 0) > 0) {
       i4 = 0;
       while (1) {
        i3 = HEAP32[i25 >> 2] | 0;
        if ((i3 | 0) == (HEAP32[i27 >> 2] | 0)) {
         if (!((_poolGrow(i45) | 0) << 24 >> 24)) {
          i3 = 1;
          i1 = 1;
          break L7;
         }
         i3 = HEAP32[i25 >> 2] | 0;
        }
        i15 = HEAP8[i46 + i4 >> 0] | 0;
        HEAP32[i25 >> 2] = i3 + 1;
        HEAP8[i3 >> 0] = i15;
        i4 = i4 + 1 | 0;
        if ((i4 | 0) >= (i5 | 0)) {
         i3 = 0;
         break;
        }
       }
      } else i3 = 0;
     } while (0);
     switch (i3 & 7) {
     case 4:
     case 0:
      break L3;
     default:
      {}
     }
     break;
    }
   case 9:
    {
     i3 = HEAP32[i29 >> 2] | 0;
     i3 = (FUNCTION_TABLE_iiii[HEAP32[i28 >> 2] & 127](i19, i2 + i3 | 0, (HEAP32[i47 >> 2] | 0) + (0 - i3) | 0) | 0) & 255;
     if (i3 << 24 >> 24) {
      i16 = 38;
      break L3;
     }
     i15 = HEAP32[i29 >> 2] | 0;
     i3 = (HEAP32[i47 >> 2] | 0) + (0 - i15) | 0;
     HEAP32[i46 >> 2] = i2 + i15;
     if (!(HEAP32[i32 >> 2] | 0)) if (!((_poolGrow(i31) | 0) << 24 >> 24)) {
      i16 = 46;
      break L1;
     }
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i33 >> 2] & 31](i19, i46, i3, i32, HEAP32[i34 >> 2] | 0);
      if ((HEAP32[i46 >> 2] | 0) == (i3 | 0)) break;
      if (!((_poolGrow(i31) | 0) << 24 >> 24)) {
       i16 = 46;
       break L1;
      }
     }
     if (!(HEAP32[i35 >> 2] | 0)) {
      i1 = 1;
      break L1;
     }
     i3 = HEAP32[i32 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i34 >> 2] | 0)) {
      if (!((_poolGrow(i31) | 0) << 24 >> 24)) {
       i1 = 1;
       break L1;
      }
      i3 = HEAP32[i32 >> 2] | 0;
     }
     HEAP32[i32 >> 2] = i3 + 1;
     HEAP8[i3 >> 0] = 0;
     i12 = HEAP32[i35 >> 2] | 0;
     i15 = i12;
     if (!i12) {
      i1 = 1;
      break L1;
     }
     i13 = HEAP32[i36 >> 2] | 0;
     L40 : do if (!i13) i5 = 0; else {
      i3 = HEAP32[i17 >> 2] | 0;
      i14 = HEAP8[i12 >> 0] | 0;
      if (i14 << 24 >> 24) {
       i4 = i12;
       i5 = i14;
       do {
        i4 = i4 + 1 | 0;
        i3 = i3 * 1000003 ^ i5 & 255;
        i5 = HEAP8[i4 >> 0] | 0;
       } while (i5 << 24 >> 24 != 0);
      }
      i4 = i13 + -1 | 0;
      i6 = i3 & i4;
      i11 = HEAP32[i48 >> 2] | 0;
      i5 = HEAP32[i11 + (i6 << 2) >> 2] | 0;
      if (!i5) i5 = 0; else {
       i10 = i3 & 0 - i13;
       i9 = i4 >>> 2;
       i3 = 0;
       while (1) {
        i4 = HEAP32[i5 >> 2] | 0;
        if (i14 << 24 >> 24 == (HEAP8[i4 >> 0] | 0)) {
         i8 = i12;
         i7 = i14;
         do {
          if (!(i7 << 24 >> 24)) break L40;
          i8 = i8 + 1 | 0;
          i4 = i4 + 1 | 0;
          i7 = HEAP8[i8 >> 0] | 0;
         } while (i7 << 24 >> 24 == (HEAP8[i4 >> 0] | 0));
        }
        if (!(i3 << 24 >> 24)) i3 = (i10 >>> ((HEAPU8[i43 >> 0] | 0) + -1 | 0) & i9 | 1) & 255;
        i5 = i3 & 255;
        i6 = (i6 >>> 0 < i5 >>> 0 ? i13 : 0) + (i6 - i5) | 0;
        i5 = HEAP32[i11 + (i6 << 2) >> 2] | 0;
        if (!i5) {
         i5 = 0;
         break;
        }
       }
      }
     } while (0);
     HEAP32[i32 >> 2] = i15;
     do if (i37) {
      if (!(HEAP32[i38 >> 2] | 0)) if (!i5) break L3; else break;
      if (!(HEAP8[i39 >> 0] | 0)) {
       i3 = (i5 | 0) != 0;
       if (!(HEAP8[i40 >> 0] | 0)) {
        i16 = 72;
        break;
       } else {
        i16 = 74;
        break;
       }
      } else {
       i3 = (i5 | 0) != 0;
       if (!(HEAP32[i41 >> 2] | 0)) {
        i16 = 72;
        break;
       } else {
        i16 = 74;
        break;
       }
      }
     } else if (!(HEAP8[i40 >> 0] | 0)) if (!i5) {
      i1 = 11;
      break L1;
     } else {
      i16 = 73;
      break;
     } else {
      i3 = (i5 | 0) != 0;
      if (!(HEAP8[i39 >> 0] | 0)) {
       i16 = 74;
       break;
      } else {
       i16 = 72;
       break;
      }
     } while (0);
     if ((i16 | 0) == 72) {
      i16 = 0;
      if (i3) i16 = 73; else {
       i1 = 11;
       break L1;
      }
     } else if ((i16 | 0) == 74) {
      i16 = 0;
      if (!i3) break L3;
     }
     if ((i16 | 0) == 73) {
      i16 = 0;
      if (!(HEAP8[i5 + 34 >> 0] | 0)) {
       i1 = 24;
       break L1;
      }
     }
     i4 = i5 + 32 | 0;
     if (HEAP8[i4 >> 0] | 0) {
      i16 = 76;
      break L1;
     }
     if (HEAP32[i5 + 28 >> 2] | 0) {
      i16 = 79;
      break L1;
     }
     i3 = HEAP32[i5 + 4 >> 2] | 0;
     if (!i3) {
      i16 = 82;
      break L1;
     }
     i5 = i3 + (HEAP32[i5 + 8 >> 2] | 0) | 0;
     HEAP8[i4 >> 0] = 1;
     i5 = _appendAttributeValue(i18, HEAP32[i42 >> 2] | 0, i30, i3, i5, i45) | 0;
     HEAP8[i4 >> 0] = 0;
     i3 = (i5 | 0) == 0;
     if (i3) break L3; else {
      i3 = (i3 ^ 1) & 1;
      i1 = i5;
     }
     break;
    }
   default:
    {
     i16 = 85;
     break L1;
    }
   }
   if (i3) {
    i16 = 90;
    break L1;
   }
  }
  if ((i16 | 0) == 23) {
   i16 = 0;
   i3 = HEAP32[i47 >> 2] | 0;
   HEAP32[i46 >> 2] = i2;
   if (!(HEAP32[i25 >> 2] | 0)) if (!((_poolGrow(i45) | 0) << 24 >> 24)) {
    i16 = 27;
    break;
   }
   while (1) {
    FUNCTION_TABLE_viiiii[HEAP32[i33 >> 2] & 31](i19, i46, i3, i25, HEAP32[i27 >> 2] | 0);
    if ((HEAP32[i46 >> 2] | 0) == (i3 | 0)) break;
    if (!((_poolGrow(i45) | 0) << 24 >> 24)) {
     i16 = 27;
     break L1;
    }
   }
   if (!(HEAP32[i26 >> 2] | 0)) {
    i1 = 1;
    break;
   }
  } else if ((i16 | 0) == 29) {
   HEAP32[i47 >> 2] = i2 + (HEAP32[i29 >> 2] | 0);
   i16 = 30;
  } else if ((i16 | 0) == 38) {
   i16 = 0;
   i2 = HEAP32[i25 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i27 >> 2] | 0)) {
    if (!((_poolGrow(i45) | 0) << 24 >> 24)) {
     i1 = 1;
     break;
    }
    i2 = HEAP32[i25 >> 2] | 0;
   }
   HEAP32[i25 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = i3;
  }
  do if ((i16 | 0) == 30) {
   i16 = 0;
   i2 = HEAP32[i25 >> 2] | 0;
   if (i24) {
    if ((i2 | 0) == (HEAP32[i26 >> 2] | 0)) break;
    if ((HEAP8[i2 + -1 >> 0] | 0) == 32) break;
   }
   if ((i2 | 0) == (HEAP32[i27 >> 2] | 0)) {
    if (!((_poolGrow(i45) | 0) << 24 >> 24)) {
     i1 = 1;
     break L1;
    }
    i2 = HEAP32[i25 >> 2] | 0;
   }
   HEAP32[i25 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = 32;
  } while (0);
  i2 = HEAP32[i47 >> 2] | 0;
 }
 if ((i16 | 0) == 4) if ((HEAP32[i22 >> 2] | 0) == (i19 | 0)) {
  HEAP32[i23 >> 2] = HEAP32[i47 >> 2];
  i1 = 4;
 } else i1 = 4; else if ((i16 | 0) == 6) if ((HEAP32[i22 >> 2] | 0) == (i19 | 0)) {
  HEAP32[i23 >> 2] = i2;
  i1 = 4;
 } else i1 = 4; else if ((i16 | 0) == 27) i1 = 1; else if ((i16 | 0) == 46) i1 = 1; else if ((i16 | 0) == 76) if ((HEAP32[i22 >> 2] | 0) == (i19 | 0)) {
  HEAP32[i23 >> 2] = i2;
  i1 = 12;
 } else i1 = 12; else if ((i16 | 0) == 79) if ((HEAP32[i22 >> 2] | 0) == (i19 | 0)) {
  HEAP32[i23 >> 2] = i2;
  i1 = 15;
 } else i1 = 15; else if ((i16 | 0) == 82) if ((HEAP32[i22 >> 2] | 0) == (i19 | 0)) {
  HEAP32[i23 >> 2] = i2;
  i1 = 16;
 } else i1 = 16; else if ((i16 | 0) == 85) if ((HEAP32[i22 >> 2] | 0) == (i19 | 0)) {
  HEAP32[i23 >> 2] = i2;
  i1 = 23;
 } else i1 = 23; else if ((i16 | 0) == 90) {
  STACKTOP = i49;
  return i1 | 0;
 }
 i48 = i1;
 STACKTOP = i49;
 return i48 | 0;
}

function _FcFreeTypeCharSetAndSpacing(i23, i24, i28) {
 i23 = i23 | 0;
 i24 = i24 | 0;
 i28 = i28 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i25 = 0, i26 = 0, i27 = 0, i29 = 0, i30 = 0, i31 = 0;
 i29 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i25 = i29 + 4 | 0;
 i26 = i29;
 i27 = i29 + 8 | 0;
 i1 = _FT_Get_Sfnt_Table(i23, 0) | 0;
 L1 : do if (!i1) {
  i22 = 0;
  i3 = -1;
  i21 = 0;
 } else {
  if (!(HEAP32[i23 + 8 >> 2] & 1)) {
   i4 = HEAP32[i23 + 28 >> 2] | 0;
   if ((i4 | 0) > 0) {
    if ((i4 | 0) == 1) {
     i22 = 0;
     i3 = 0;
     i21 = 0;
     break;
    }
    i3 = HEAP32[i23 + 32 >> 2] | 0;
    i2 = 1;
    i1 = 0;
    while (1) {
     i19 = HEAP16[i3 + (i2 << 4) >> 1] | 0;
     i18 = i19 + -16 | 0;
     i22 = HEAP16[i3 + (i1 << 4) >> 1] | 0;
     i21 = i22 + -16 | 0;
     i1 = (((i18 | 0) > -1 ? i18 : 16 - i19 | 0) | 0) < (((i21 | 0) > -1 ? i21 : 16 - i22 | 0) | 0) ? i2 : i1;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) >= (i4 | 0)) {
      i22 = 0;
      i3 = i1;
      i21 = 0;
      break L1;
     }
    }
   }
  }
  if (!(HEAP16[i1 + 52 >> 1] | 0)) {
   i5 = HEAP32[i23 + 16 >> 2] | 0;
   i3 = (HEAP16[i1 + 50 >> 1] | 0) > 0;
   i4 = i3 & 1;
   i2 = i3 ? 4 : 2;
   i1 = Math_imul(i2, i5 + 1 | 0) | 0;
   HEAP32[i25 >> 2] = 0;
   do if (!(_FT_Load_Sfnt_Table(i23, 1819239265, 0, 0, i25) | 0)) {
    i22 = HEAP32[i25 >> 2] | 0;
    i1 = i1 >>> 0 < i22 >>> 0 ? i1 : i22;
    HEAP32[i25 >> 2] = i1;
    if (i1 >>> 0 < i2 >>> 0) {
     i1 = 0;
     i2 = 0;
    } else {
     i2 = _malloc(i1 + 12 | 0) | 0;
     if (!i2) {
      i1 = i2;
      i2 = 0;
     } else if (!(_FT_Load_Sfnt_Table(i23, 1819239265, 0, i2 + 8 | 0, i25) | 0)) {
      i1 = ((HEAP32[i25 >> 2] | 0) >>> (i3 ? 2 : 1)) + -1 | 0;
      HEAP32[i2 >> 2] = i5 >>> 0 < i1 >>> 0 ? i5 : i1;
      HEAP32[i2 + 4 >> 2] = i4;
      i1 = i2;
      break;
     } else {
      _free(i2);
      i1 = 0;
      i2 = 0;
      break;
     }
    }
   } else {
    i1 = 0;
    i2 = 0;
   } while (0);
   i22 = i1;
   i3 = -1;
   i21 = i2;
  } else {
   i22 = 0;
   i3 = -1;
   i21 = 0;
  }
 } while (0);
 i1 = _FcCharSetCreate() | 0;
 L20 : do if (!i1) i1 = 0; else {
  if ((i3 | 0) > -1) {
   if (!(_FT_Select_Size(i23, i3) | 0)) {
    i19 = 1;
    i20 = 18;
   }
  } else {
   i19 = 0;
   i20 = 18;
  }
  L24 : do if ((i20 | 0) == 18) {
   if (!(_FT_Select_Charmap(i23, 1970170211) | 0)) {
    i18 = 0;
    i20 = 19;
   } else if (!(_FT_Select_Charmap(i23, 1937337698) | 0)) {
    i18 = 1;
    i20 = 19;
   } else {
    i5 = 0;
    i4 = 1;
    i9 = 0;
    i3 = 0;
    i2 = 0;
   }
   if ((i20 | 0) == 19) {
    i8 = _FT_Get_First_Char(i23, i25) | 0;
    i9 = HEAP32[i25 >> 2] | 0;
    if (!i9) {
     i5 = 0;
     i4 = 1;
     i7 = 0;
     i3 = 0;
     i2 = 0;
    } else {
     i13 = i23 + 8 | 0;
     i12 = (i19 | 0) == 0 ? 515 : 514;
     i14 = (i22 | 0) == 0;
     i15 = i22 + 4 | 0;
     i16 = i22 + 8 | 0;
     i17 = (i24 | 0) == 0;
     i5 = 0;
     i4 = 1;
     i7 = 0;
     i3 = 0;
     i2 = 0;
     i6 = 0;
     i11 = -1;
     while (1) {
      i10 = HEAP32[i13 >> 2] << 3 & 8 | i12;
      HEAP32[i26 >> 2] = 0;
      _FT_Get_Advance(i23, i9, i10, i26) | 0;
      do if (i14) i20 = 27; else if ((HEAP32[i22 >> 2] | 0) >>> 0 > i9 >>> 0) {
       i10 = i9 + 1 | 0;
       if (!(HEAP32[i15 >> 2] | 0)) {
        if (i17 | (HEAP16[i16 + (i9 << 1) >> 1] | 0) != (HEAP16[i16 + (i10 << 1) >> 1] | 0)) {
         i20 = 27;
         break;
        }
       } else if (i17 | (HEAP32[i22 + 8 + (i9 << 2) >> 2] | 0) != (HEAP32[i22 + 8 + (i10 << 2) >> 2] | 0)) {
        i20 = 27;
        break;
       }
       if (!(_FcBlanksIsMember(i24, i8) | 0)) i10 = i11; else i20 = 27;
      } else i10 = i11; while (0);
      if ((i20 | 0) == 27) {
       i20 = 0;
       i10 = HEAP32[i26 >> 2] | 0;
       if (i10) if (!i7) {
        i7 = 1;
        i2 = i10;
       } else {
        i31 = i10 - i2 | 0;
        i9 = (i10 | 0) < 0 ? 0 - i10 | 0 : i10;
        i30 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
        if ((((i31 | 0) < 0 ? 0 - i31 | 0 : i31) | 0) > ((((i9 | 0) > (i30 | 0) ? i9 : i30) | 0) / 33 | 0 | 0)) if (!i4) {
         i31 = i10 - i3 | 0;
         i4 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
         i5 = (((i31 | 0) < 0 ? 0 - i31 | 0 : i31) | 0) > ((((i9 | 0) > (i4 | 0) ? i9 : i4) | 0) / 33 | 0 | 0) ? 0 : i5;
         i4 = 0;
        } else {
         i5 = 1;
         i4 = 0;
         i3 = i10;
        }
       }
       i9 = i8 >>> 8;
       if ((i9 | 0) == (i11 | 0)) i9 = i11; else {
        i6 = _FcCharSetFindLeafCreate(i1, i8) | 0;
        if (!i6) break L24;
       }
       i10 = i6 + ((i8 >>> 5 & 7) << 2) | 0;
       HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1 << (i8 & 31);
       i10 = i9;
      }
      i8 = _FT_Get_Next_Char(i23, i8, i25) | 0;
      i9 = HEAP32[i25 >> 2] | 0;
      if (!i9) break; else i11 = i10;
     }
    }
    if ((i18 | 0) == 1) {
     i6 = 61440;
     do {
      if (_FcCharSetHasChar(i1, i6) | 0) _FcCharSetAddChar(i1, i6 + -61440 | 0) | 0;
      i6 = i6 + 1 | 0;
     } while ((i6 | 0) != 61696);
     i9 = i7;
    } else i9 = i7;
   }
   L60 : do if (_FT_Has_PS_Glyph_Names(i23) | 0) {
    i7 = HEAP32[i23 + 36 >> 2] | 0;
    if ((i7 | 0) > 0) {
     i8 = HEAP32[i23 + 40 >> 2] | 0;
     i6 = 0;
     while (1) {
      if ((HEAP32[(HEAP32[i8 + (i6 << 2) >> 2] | 0) + 4 >> 2] | 0) == 1094992451) break;
      i6 = i6 + 1 | 0;
      if ((i6 | 0) >= (i7 | 0)) break L60;
     }
     HEAP32[i25 >> 2] = 0;
     i17 = i23 + 16 | 0;
     L67 : do if (HEAP32[i17 >> 2] | 0) {
      i18 = i23 + 8 | 0;
      i12 = (i19 | 0) == 0 ? 515 : 514;
      i13 = (i22 | 0) == 0;
      i14 = i22 + 4 | 0;
      i15 = i22 + 8 | 0;
      i16 = (i24 | 0) == 0;
      i11 = i9;
      i7 = 0;
      L69 : while (1) {
       L71 : do if (!(_FT_Get_Glyph_Name(i23, i7, i27, 128) | 0)) {
        i7 = HEAP8[i27 >> 0] | 0;
        if (!(i7 << 24 >> 24)) i6 = 0; else {
         i6 = 0;
         i8 = i27;
         do {
          i8 = i8 + 1 | 0;
          i6 = (i6 << 1 | i6 >>> 31) ^ i7 & 255;
          i7 = HEAP8[i8 >> 0] | 0;
         } while (i7 << 24 >> 24 != 0);
        }
        i7 = (i6 >>> 0) % 271 | 0;
        i8 = HEAP16[124512 + (i7 << 1) >> 1] | 0;
        if (i8 << 16 >> 16 == -1) i6 = i11; else {
         i9 = (i6 >>> 0) % 269 | 0;
         i9 = i9 | 0 ? i9 : 1;
         i10 = 0;
         i6 = i8;
         while (1) {
          i6 = i6 << 16 >> 16;
          if (!(_strcmp(i27, 68508 + (i6 * 12 | 0) + 4 | 0) | 0)) break;
          i10 = (i10 | 0) == 0 ? i9 : i10;
          i6 = i10 + i7 | 0;
          i7 = (i6 | 0) > 270 ? i6 + -271 | 0 : i6;
          i6 = HEAP16[124512 + (i7 << 1) >> 1] | 0;
          if (i6 << 16 >> 16 == -1) {
           i6 = i11;
           break L71;
          }
         }
         i9 = HEAP32[68508 + (i6 * 12 | 0) >> 2] | 0;
         i6 = HEAP32[i25 >> 2] | 0;
         i31 = HEAP32[i18 >> 2] << 3 & 8 | i12;
         HEAP32[i26 >> 2] = 0;
         _FT_Get_Advance(i23, i6, i31, i26) | 0;
         do if (!i13) {
          if ((HEAP32[i22 >> 2] | 0) >>> 0 <= i6 >>> 0) {
           i6 = i11;
           break L71;
          }
          i7 = i6 + 1 | 0;
          if (!(HEAP32[i14 >> 2] | 0)) {
           if (i16 | (HEAP16[i15 + (i6 << 1) >> 1] | 0) != (HEAP16[i15 + (i7 << 1) >> 1] | 0)) break;
          } else if (i16 | (HEAP32[i22 + 8 + (i6 << 2) >> 2] | 0) != (HEAP32[i22 + 8 + (i7 << 2) >> 2] | 0)) break;
          if (!(_FcBlanksIsMember(i24, i9) | 0)) {
           i6 = i11;
           break L71;
          }
         } while (0);
         i8 = HEAP32[i26 >> 2] | 0;
         do if (!i8) i7 = i11; else if (!i11) {
          i7 = 1;
          i2 = i8;
         } else {
          i30 = i8 - i2 | 0;
          i6 = (i8 | 0) < 0 ? 0 - i8 | 0 : i8;
          i31 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
          if ((((i30 | 0) < 0 ? 0 - i30 | 0 : i30) | 0) <= ((((i6 | 0) > (i31 | 0) ? i6 : i31) | 0) / 33 | 0 | 0)) {
           i7 = i11;
           break;
          }
          if (i4 | 0) {
           i5 = 1;
           i4 = 0;
           i7 = i11;
           i3 = i8;
           break;
          }
          i7 = i8 - i3 | 0;
          i4 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
          i5 = (((i7 | 0) < 0 ? 0 - i7 | 0 : i7) | 0) > ((((i6 | 0) > (i4 | 0) ? i6 : i4) | 0) / 33 | 0 | 0) ? 0 : i5;
          i4 = 0;
          i7 = i11;
         } while (0);
         i6 = _FcCharSetFindLeafCreate(i1, i9) | 0;
         if (!i6) break L69;
         i6 = i6 + ((i9 >>> 5 & 7) << 2) | 0;
         HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 1 << (i9 & 31);
         i6 = i7;
        }
       } else i6 = i11; while (0);
       i7 = (HEAP32[i25 >> 2] | 0) + 1 | 0;
       HEAP32[i25 >> 2] = i7;
       if (i7 >>> 0 >= (HEAP32[i17 >> 2] | 0) >>> 0) break L67; else i11 = i6;
      }
      break L24;
     } while (0);
    }
   } while (0);
   do if (!i4) {
    if (i5 | 0) {
     i26 = (i2 | 0) < (i3 | 0) ? i2 : i3;
     i30 = i26 << 1;
     i31 = (i2 | 0) > (i3 | 0) ? i2 : i3;
     i27 = i30 - i31 | 0;
     i30 = (i26 | 0) < 0 ? 0 - i30 | 0 : i30;
     i31 = (i31 | 0) < 0 ? 0 - i31 | 0 : i31;
     if ((((i27 | 0) < 0 ? 0 - i27 | 0 : i27) | 0) <= ((((i30 | 0) > (i31 | 0) ? i30 : i31) | 0) / 33 | 0 | 0)) {
      i2 = 90;
      break;
     }
    }
    i2 = 0;
   } else i2 = 100; while (0);
   HEAP32[i28 >> 2] = i2;
   break L20;
  } while (0);
  _FcCharSetDestroy(i1);
  i1 = 0;
 } while (0);
 if (!i22) {
  STACKTOP = i29;
  return i1 | 0;
 }
 _free(i21);
 STACKTOP = i29;
 return i1 | 0;
}

function _parse_dict(i25, i26, i1, i2) {
 i25 = i25 | 0;
 i26 = i26 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i27 = i28;
 HEAP32[i26 >> 2] = i1;
 i20 = i1 + i2 | 0;
 i21 = i26 + 8 | 0;
 HEAP32[i21 >> 2] = i20;
 i22 = i26 + 12 | 0;
 HEAP32[i22 >> 2] = 0;
 i23 = i26 + 28 | 0;
 FUNCTION_TABLE_vi[HEAP32[i23 >> 2] & 127](i26);
 i1 = HEAP32[i26 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i20 >>> 0) {
  i8 = i26 + 372 | 0;
  i9 = i26 + 32 | 0;
  i10 = i25 + 128 | 0;
  i11 = i26 + 36 | 0;
  i12 = i25 + 528 | 0;
  i13 = i25 + 132 | 0;
  i14 = i26 + 68 | 0;
  i15 = i26 + 64 | 0;
  i16 = i25 + 132 | 0;
  i17 = i25 + 164 | 0;
  i18 = i25 + 168 | 0;
  i19 = i25 + 460 | 0;
  i7 = 0;
  i2 = 0;
  i4 = i1;
  L3 : while (1) {
   i3 = HEAP8[i4 >> 0] | 0;
   L5 : do switch (i3 << 24 >> 24) {
   case 101:
    {
     i1 = i4 + 6 | 0;
     if ((i1 | 0) != (i20 | 0)) {
      if (i1 >>> 0 >= i20 >>> 0) {
       i24 = 19;
       break L5;
      }
      switch (HEAP8[i4 + 5 >> 0] | 0) {
      case 37:
      case 125:
      case 123:
      case 93:
      case 91:
      case 62:
      case 60:
      case 41:
      case 40:
      case 47:
      case 0:
      case 12:
      case 9:
      case 10:
      case 13:
      case 32:
       break;
      default:
       {
        i24 = 19;
        break L5;
       }
      }
     }
     if (!(_strncmp(i4, 280049, 5) | 0)) break L1; else i24 = 19;
     break;
    }
   case 99:
    {
     i1 = i4 + 10 | 0;
     if ((i1 | 0) != (i20 | 0)) {
      if (i1 >>> 0 >= i20 >>> 0) {
       i24 = 19;
       break L5;
      }
      switch (HEAP8[i4 + 9 >> 0] | 0) {
      case 37:
      case 125:
      case 123:
      case 93:
      case 91:
      case 62:
      case 60:
      case 41:
      case 40:
      case 47:
      case 0:
      case 12:
      case 9:
      case 10:
      case 13:
      case 32:
       break;
      default:
       {
        i24 = 19;
        break L5;
       }
      }
     }
     if (!(_strncmp(i4, 280055, 9) | 0)) break L1; else i24 = 19;
     break;
    }
   case 70:
    {
     i1 = i4 + 14 | 0;
     if ((i1 | 0) != (i20 | 0)) {
      if (i1 >>> 0 >= i20 >>> 0) {
       i24 = 19;
       break L5;
      }
      switch (HEAP8[i4 + 13 >> 0] | 0) {
      case 37:
      case 125:
      case 123:
      case 93:
      case 91:
      case 62:
      case 60:
      case 41:
      case 40:
      case 47:
      case 0:
      case 12:
      case 9:
      case 10:
      case 13:
      case 32:
       break;
      default:
       {
        i24 = 19;
        break L5;
       }
      }
     }
     if (!(_strncmp(i4, 280763, 13) | 0)) {
      i1 = HEAP32[i8 >> 2] | 0;
      if (i1 & 1 | 0) HEAP32[i8 >> 2] = i1 | 2;
      HEAP32[i26 >> 2] = i4 + 13;
      i1 = i7;
     } else i24 = 19;
     break;
    }
   default:
    i24 = 19;
   } while (0);
   L25 : do if ((i24 | 0) == 19) {
    i24 = 0;
    if (((i3 & 255) + -48 | 0) >>> 0 < 10) {
     FUNCTION_TABLE_vi[HEAP32[i9 >> 2] & 127](i26);
     if (!(HEAP32[i22 >> 2] | 0)) {
      i1 = i4;
      i2 = 1;
      break;
     } else break L1;
    }
    i1 = (i4 + 6 | 0) >>> 0 < i20 >>> 0;
    do if (i1 & i3 << 24 >> 24 == 82) if (i2 << 24 >> 24 == 0 | (HEAP8[i4 + 1 >> 0] | 0) != 68) i24 = 74; else {
     HEAP32[i26 >> 2] = i7;
     i3 = HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] | 0;
     i4 = HEAP32[i21 >> 2] | 0;
     FUNCTION_TABLE_vi[HEAP32[i23 >> 2] & 127](i26);
     i1 = HEAP32[i26 >> 2] | 0;
     if (i1 >>> 0 >= i4 >>> 0) {
      i24 = 27;
      break L3;
     }
     if (((HEAPU8[i1 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
      i24 = 27;
      break L3;
     }
     i1 = FUNCTION_TABLE_ii[HEAP32[i11 >> 2] & 63](i26) | 0;
     FUNCTION_TABLE_vi[HEAP32[i9 >> 2] & 127](i26);
     i2 = HEAP32[i26 >> 2] | 0;
     if ((i1 | 0) <= -1) {
      i24 = 27;
      break L3;
     }
     if ((i1 | 0) >= (i4 - (i2 + 1) | 0)) {
      i24 = 27;
      break L3;
     }
     HEAP32[i26 >> 2] = i2 + (i1 + 1);
     if (!(HEAP32[i22 >> 2] | 0)) {
      i1 = i7;
      i2 = 0;
      break L25;
     } else {
      i1 = 3;
      i24 = 78;
      break L3;
     }
    } else {
     if (i1 & i3 << 24 >> 24 == 45) {
      if (i2 << 24 >> 24 == 0 | (HEAP8[i4 + 1 >> 0] | 0) != 124) {
       i24 = 74;
       break;
      }
      HEAP32[i26 >> 2] = i7;
      i3 = HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] | 0;
      i4 = HEAP32[i21 >> 2] | 0;
      FUNCTION_TABLE_vi[HEAP32[i23 >> 2] & 127](i26);
      i1 = HEAP32[i26 >> 2] | 0;
      if (i1 >>> 0 >= i4 >>> 0) {
       i24 = 36;
       break L3;
      }
      if (((HEAPU8[i1 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
       i24 = 36;
       break L3;
      }
      i1 = FUNCTION_TABLE_ii[HEAP32[i11 >> 2] & 63](i26) | 0;
      FUNCTION_TABLE_vi[HEAP32[i9 >> 2] & 127](i26);
      i2 = HEAP32[i26 >> 2] | 0;
      if ((i1 | 0) <= -1) {
       i24 = 36;
       break L3;
      }
      if ((i1 | 0) >= (i4 - (i2 + 1) | 0)) {
       i24 = 36;
       break L3;
      }
      HEAP32[i26 >> 2] = i2 + (i1 + 1);
      if (!(HEAP32[i22 >> 2] | 0)) {
       i1 = i7;
       i2 = 0;
       break L25;
      } else {
       i1 = 3;
       i24 = 78;
       break L3;
      }
     }
     i1 = HEAP32[i9 >> 2] | 0;
     if ((i4 + 2 | 0) >>> 0 < i20 >>> 0 & i3 << 24 >> 24 == 47) {
      i5 = i4 + 1 | 0;
      HEAP32[i26 >> 2] = i5;
      FUNCTION_TABLE_vi[i1 & 127](i26);
      if (HEAP32[i22 >> 2] | 0) break L1;
      i6 = HEAP32[i26 >> 2] | 0;
      i3 = i6 - i5 | 0;
      if (!(i6 >>> 0 < i20 >>> 0 & (i3 + -1 | 0) >>> 0 < 21)) {
       i1 = i7;
       i2 = 0;
       break L25;
      }
      i4 = HEAP8[i5 >> 0] | 0;
      i6 = 5920;
      i2 = 280887;
      while (1) {
       if (i4 << 24 >> 24 == (HEAP8[i2 >> 0] | 0)) if ((i3 | 0) == (_strlen(i2) | 0)) if (!(_memcmp(i5, i2, i3) | 0)) break;
       i1 = i6 + 36 | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (!i2) {
        i1 = i7;
        i2 = 0;
        break L25;
       } else i6 = i1;
      }
      i1 = HEAP32[i8 >> 2] | 0;
      if (!((i1 & 1) + 1 & HEAP32[i6 + 32 >> 2])) {
       i1 = i7;
       i2 = 0;
       break L25;
      }
      if (i1 & 2 | 0) if (_strcmp(i2, 280957) | 0) {
       i1 = i7;
       i2 = 0;
       break L25;
      }
      i1 = HEAP32[i12 >> 2] | 0;
      i2 = i1;
      if (!i1) i1 = 0; else i1 = (HEAP32[i1 >> 2] | 0) == 0 ? 0 : i1;
      i3 = HEAP32[i6 + 8 >> 2] | 0;
      do if ((i3 | 0) == 11) {
       FUNCTION_TABLE_vii[HEAP32[i6 + 12 >> 2] & 63](i25, i26);
       i1 = HEAP32[i22 >> 2] | 0;
      } else {
       switch (HEAP32[i6 + 4 >> 2] | 0) {
       case 3:
        {
         HEAP32[i27 >> 2] = i16;
         if (!i1) {
          i2 = 0;
          i1 = i27;
         } else {
          i2 = HEAP32[i1 >> 2] | 0;
          i1 = i1 + 144 | 0;
         }
         break;
        }
       case 2:
        {
         HEAP32[i27 >> 2] = i17;
         i2 = 0;
         i1 = i27;
         break;
        }
       case 4:
        {
         HEAP32[i27 >> 2] = i18;
         if (!i1) {
          i2 = 0;
          i1 = i27;
         } else {
          i2 = HEAP32[i1 >> 2] | 0;
          i1 = i1 + 212 | 0;
         }
         break;
        }
       case 5:
        {
         HEAP32[i27 >> 2] = i19;
         if (!i1) {
          i2 = 0;
          i1 = i27;
         } else {
          i2 = HEAP32[i1 >> 2] | 0;
          i1 = i1 + 284 | 0;
         }
         break;
        }
       case 6:
        {
         HEAP32[i27 >> 2] = i26;
         i2 = 0;
         i1 = i27;
         break;
        }
       case 7:
        {
         HEAP32[i27 >> 2] = i25;
         i2 = 0;
         i1 = i27;
         break;
        }
       case 8:
        {
         HEAP32[i27 >> 2] = i2;
         i2 = 0;
         i1 = i27;
         break;
        }
       default:
        {
         HEAP32[i27 >> 2] = i13;
         i2 = 0;
         i1 = i27;
        }
       }
       if (!(HEAP32[i1 >> 2] | 0)) {
        HEAP32[i22 >> 2] = 0;
        i1 = i7;
        i2 = 0;
        break L25;
       }
       if ((i3 + -9 | 0) >>> 0 < 2) {
        i1 = FUNCTION_TABLE_iiiiii[HEAP32[i14 >> 2] & 127](i26, i6, i1, i2, 0) | 0;
        break;
       } else {
        i1 = FUNCTION_TABLE_iiiiii[HEAP32[i15 >> 2] & 127](i26, i6, i1, i2, 0) | 0;
        break;
       }
      } while (0);
      HEAP32[i22 >> 2] = i1;
      if (!i1) {
       i1 = i7;
       i2 = 0;
       break L25;
      }
      if ((i1 & 255 | 0) != 162) {
       i24 = 78;
       break L3;
      }
      HEAP32[i22 >> 2] = 0;
      i1 = i7;
      i2 = 0;
      break L25;
     }
    } while (0);
    if ((i24 | 0) == 74) {
     i24 = 0;
     i1 = HEAP32[i9 >> 2] | 0;
    }
    FUNCTION_TABLE_vi[i1 & 127](i26);
    if (!(HEAP32[i22 >> 2] | 0)) {
     i1 = i7;
     i2 = 0;
    } else break L1;
   } while (0);
   FUNCTION_TABLE_vi[HEAP32[i23 >> 2] & 127](i26);
   i4 = HEAP32[i26 >> 2] | 0;
   if (i4 >>> 0 >= i20 >>> 0) break L1; else i7 = i1;
  }
  if ((i24 | 0) == 27) {
   if (i3 | 0) {
    i27 = 3;
    STACKTOP = i28;
    return i27 | 0;
   }
   HEAP32[i22 >> 2] = 3;
   i27 = 3;
   STACKTOP = i28;
   return i27 | 0;
  } else if ((i24 | 0) == 36) {
   if (i3 | 0) {
    i27 = 3;
    STACKTOP = i28;
    return i27 | 0;
   }
   HEAP32[i22 >> 2] = 3;
   i27 = 3;
   STACKTOP = i28;
   return i27 | 0;
  } else if ((i24 | 0) == 78) {
   STACKTOP = i28;
   return i1 | 0;
  }
 } while (0);
 i27 = HEAP32[i22 >> 2] | 0;
 STACKTOP = i28;
 return i27 | 0;
}

function _ftglue_face_goto_table(i6, i12, i14) {
 i6 = i6 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0;
 if (!(HEAP32[i6 + 8 >> 2] & 8)) {
  i14 = 35;
  return i14 | 0;
 }
 i13 = i14 + 20 | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 do if (!i1) {
  i1 = i14 + 8 | 0;
  HEAP32[i1 >> 2] = 0;
  i7 = 11;
 } else {
  if (FUNCTION_TABLE_iiiii[i1 & 127](i14, 0, 0, 0) | 0) {
   i14 = 85;
   return i14 | 0;
  }
  i11 = HEAP32[i13 >> 2] | 0;
  i5 = i14 + 8 | 0;
  HEAP32[i5 >> 2] = 0;
  if (!i11) {
   i1 = i5;
   i7 = 11;
  } else {
   i2 = HEAP32[i14 + 28 >> 2] | 0;
   i1 = FUNCTION_TABLE_iii[HEAP32[i2 + 4 >> 2] & 255](i2, 4) | 0;
   if (!i1) {
    HEAP32[i14 >> 2] = 0;
    i14 = 64;
    return i14 | 0;
   }
   i4 = HEAP32[i13 >> 2] | 0;
   HEAP32[i14 >> 2] = i1;
   i4 = FUNCTION_TABLE_iiiii[i4 & 127](i14, HEAP32[i5 >> 2] | 0, i1, 4) | 0;
   i1 = HEAP32[i14 >> 2] | 0;
   if (i4 >>> 0 < 4) if (!i1) {
    i3 = 85;
    i1 = 0;
   } else {
    FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i1);
    HEAP32[i14 >> 2] = 0;
    i3 = 85;
    i1 = 0;
   } else i3 = 0;
   i2 = i14 + 32 | 0;
   HEAP32[i2 >> 2] = i1;
   HEAP32[i14 + 36 >> 2] = i1 + 4;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i4;
   if (!i3) {
    i11 = i2;
    i2 = i1;
    i3 = HEAP32[i13 >> 2] | 0;
    i10 = i5;
    break;
   } else {
    i14 = i3;
    return i14 | 0;
   }
  }
 } while (0);
 do if ((i7 | 0) == 11) if ((HEAP32[i14 + 4 >> 2] | 0) >>> 0 < 4) {
  i14 = 85;
  return i14 | 0;
 } else {
  i2 = HEAP32[i14 >> 2] | 0;
  i11 = i14 + 32 | 0;
  HEAP32[i11 >> 2] = i2;
  HEAP32[i14 + 36 >> 2] = i2 + 4;
  HEAP32[i1 >> 2] = 4;
  i3 = 0;
  i10 = i1;
  break;
 } while (0);
 HEAP32[i11 >> 2] = i2 + 4;
 i1 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
 if (!((i3 | 0) == 0 | (i2 | 0) == 0)) {
  i9 = HEAP32[i14 + 28 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[i9 + 8 >> 2] & 63](i9, i2);
  HEAP32[i14 >> 2] = 0;
 }
 HEAP32[i11 >> 2] = 0;
 i9 = i14 + 36 | 0;
 HEAP32[i9 >> 2] = 0;
 if ((i1 | 0) == 1953784678) {
  i2 = HEAP32[i6 + 4 >> 2] << 2;
  i4 = i2 + 12 | 0;
  i1 = HEAP32[i13 >> 2] | 0;
  do if (!i1) {
   if ((i2 | 0) < -12) {
    i14 = 85;
    return i14 | 0;
   }
   if ((HEAP32[i14 + 4 >> 2] | 0) >>> 0 < i4 >>> 0) {
    i14 = 85;
    return i14 | 0;
   } else {
    HEAP32[i10 >> 2] = i4;
    i7 = 29;
    break;
   }
  } else {
   if (FUNCTION_TABLE_iiiii[i1 & 127](i14, i4, 0, 0) | 0) {
    i14 = 85;
    return i14 | 0;
   }
   i8 = HEAP32[i13 >> 2] | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i8) i7 = 29; else {
    i2 = HEAP32[i14 + 28 >> 2] | 0;
    i1 = FUNCTION_TABLE_iii[HEAP32[i2 + 4 >> 2] & 255](i2, 4) | 0;
    if (!i1) {
     HEAP32[i14 >> 2] = 0;
     i14 = 64;
     return i14 | 0;
    }
    i4 = HEAP32[i13 >> 2] | 0;
    HEAP32[i14 >> 2] = i1;
    i4 = FUNCTION_TABLE_iiiii[i4 & 127](i14, HEAP32[i10 >> 2] | 0, i1, 4) | 0;
    i3 = HEAP32[i14 >> 2] | 0;
    if (i4 >>> 0 < 4) if (!i3) {
     i1 = 85;
     i3 = 0;
    } else {
     FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i3);
     HEAP32[i14 >> 2] = 0;
     i1 = 85;
     i3 = 0;
    } else i1 = 0;
    HEAP32[i11 >> 2] = i3;
    HEAP32[i9 >> 2] = i3 + 4;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i4;
    if (!i1) {
     i1 = i3;
     i4 = HEAP32[i13 >> 2] | 0;
     i2 = i3;
     break;
    } else {
     i14 = i1;
     return i14 | 0;
    }
   }
  } while (0);
  do if ((i7 | 0) == 29) {
   i3 = HEAP32[i14 + 4 >> 2] | 0;
   if (i4 >>> 0 >= i3 >>> 0) {
    i14 = 85;
    return i14 | 0;
   }
   i1 = i2 + 16 | 0;
   if (i1 >>> 0 > i3 >>> 0) {
    i14 = 85;
    return i14 | 0;
   } else {
    i2 = HEAP32[i14 >> 2] | 0;
    i4 = i2 + i4 | 0;
    HEAP32[i11 >> 2] = i4;
    HEAP32[i9 >> 2] = i4 + 4;
    HEAP32[i10 >> 2] = i1;
    i1 = i4;
    i4 = 0;
    break;
   }
  } while (0);
  HEAP32[i11 >> 2] = i1 + 4;
  i1 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
  if (!((i4 | 0) == 0 | (i2 | 0) == 0)) {
   i8 = HEAP32[i14 + 28 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[i8 + 8 >> 2] & 63](i8, i2);
   HEAP32[i14 >> 2] = 0;
  }
  HEAP32[i11 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
 } else i1 = 0;
 i4 = i1 + 4 | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 do if (!i2) {
  if ((i4 | 0) < 0) {
   i14 = 85;
   return i14 | 0;
  }
  if ((HEAP32[i14 + 4 >> 2] | 0) >>> 0 < i4 >>> 0) {
   i14 = 85;
   return i14 | 0;
  } else {
   HEAP32[i10 >> 2] = i4;
   i7 = 48;
   break;
  }
 } else {
  if (FUNCTION_TABLE_iiiii[i2 & 127](i14, i4, 0, 0) | 0) {
   i14 = 85;
   return i14 | 0;
  }
  i8 = HEAP32[i13 >> 2] | 0;
  HEAP32[i10 >> 2] = i4;
  if (!i8) i7 = 48; else {
   i3 = HEAP32[i14 + 28 >> 2] | 0;
   i2 = FUNCTION_TABLE_iii[HEAP32[i3 + 4 >> 2] & 255](i3, 2) | 0;
   if (!i2) {
    HEAP32[i14 >> 2] = 0;
    i14 = 64;
    return i14 | 0;
   }
   i5 = HEAP32[i13 >> 2] | 0;
   HEAP32[i14 >> 2] = i2;
   i5 = FUNCTION_TABLE_iiiii[i5 & 127](i14, HEAP32[i10 >> 2] | 0, i2, 2) | 0;
   i4 = HEAP32[i14 >> 2] | 0;
   if (i5 >>> 0 < 2) if (!i4) {
    i2 = 85;
    i4 = 0;
   } else {
    FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i4);
    HEAP32[i14 >> 2] = 0;
    i2 = 85;
    i4 = 0;
   } else i2 = 0;
   HEAP32[i11 >> 2] = i4;
   HEAP32[i9 >> 2] = i4 + 2;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i5;
   if (!i2) {
    i3 = i4;
    i2 = HEAP32[i13 >> 2] | 0;
    break;
   } else {
    i14 = i2;
    return i14 | 0;
   }
  }
 } while (0);
 do if ((i7 | 0) == 48) {
  i2 = HEAP32[i14 + 4 >> 2] | 0;
  if (i4 >>> 0 >= i2 >>> 0) {
   i14 = 85;
   return i14 | 0;
  }
  i3 = i1 + 6 | 0;
  if (i3 >>> 0 > i2 >>> 0) {
   i14 = 85;
   return i14 | 0;
  } else {
   i8 = HEAP32[i14 >> 2] | 0;
   i2 = i8 + i4 | 0;
   HEAP32[i11 >> 2] = i2;
   HEAP32[i9 >> 2] = i2 + 2;
   HEAP32[i10 >> 2] = i3;
   i3 = i2;
   i2 = 0;
   i4 = i8;
   break;
  }
 } while (0);
 HEAP32[i11 >> 2] = i3 + 2;
 i8 = (HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i3 + 1 >> 0] | 0);
 do if (!i2) {
  HEAP32[i11 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  i1 = i1 + 12 | 0;
  i7 = 59;
 } else {
  if (!i4) {
   HEAP32[i11 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
   i1 = i1 + 12 | 0;
  } else {
   i2 = HEAP32[i14 + 28 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i4);
   HEAP32[i14 >> 2] = 0;
   i2 = HEAP32[i13 >> 2] | 0;
   HEAP32[i11 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
   i1 = i1 + 12 | 0;
   if (!i2) {
    i7 = 59;
    break;
   }
  }
  if (FUNCTION_TABLE_iiiii[i2 & 127](i14, i1, 0, 0) | 0) {
   i14 = 85;
   return i14 | 0;
  }
  i2 = HEAP32[i13 >> 2] | 0;
  HEAP32[i10 >> 2] = i1;
  i4 = i8 << 4;
  if (!i2) i7 = 70; else {
   i5 = HEAP32[i14 + 28 >> 2] | 0;
   do if (!i8) i3 = 0; else {
    i1 = FUNCTION_TABLE_iii[HEAP32[i5 + 4 >> 2] & 255](i5, i4) | 0;
    if (i1 | 0) {
     i3 = i1;
     i2 = HEAP32[i13 >> 2] | 0;
     i1 = HEAP32[i10 >> 2] | 0;
     break;
    }
    HEAP32[i14 >> 2] = 0;
    i14 = 64;
    return i14 | 0;
   } while (0);
   HEAP32[i14 >> 2] = i3;
   i3 = FUNCTION_TABLE_iiiii[i2 & 127](i14, i1, i3, i4) | 0;
   i2 = HEAP32[i14 >> 2] | 0;
   if (i3 >>> 0 < i4 >>> 0) if (!i2) {
    i1 = 85;
    i2 = 0;
   } else {
    FUNCTION_TABLE_vii[HEAP32[i5 + 8 >> 2] & 63](i5, i2);
    HEAP32[i14 >> 2] = 0;
    i1 = 85;
    i2 = 0;
   } else i1 = 0;
   HEAP32[i11 >> 2] = i2;
   HEAP32[i9 >> 2] = i2 + i4;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i3;
   if (i1) {
    i14 = i1;
    return i14 | 0;
   }
  }
 } while (0);
 do if ((i7 | 0) == 59) {
  if ((i1 | 0) < 0) {
   i14 = 85;
   return i14 | 0;
  }
  if ((HEAP32[i14 + 4 >> 2] | 0) >>> 0 < i1 >>> 0) {
   i14 = 85;
   return i14 | 0;
  } else {
   HEAP32[i10 >> 2] = i1;
   i4 = i8 << 4;
   i7 = 70;
   break;
  }
 } while (0);
 do if ((i7 | 0) == 70) {
  i2 = HEAP32[i14 + 4 >> 2] | 0;
  if (i1 >>> 0 >= i2 >>> 0) {
   i14 = 85;
   return i14 | 0;
  }
  i3 = i1 + i4 | 0;
  if (i3 >>> 0 > i2 >>> 0) {
   i14 = 85;
   return i14 | 0;
  } else {
   i2 = (HEAP32[i14 >> 2] | 0) + i1 | 0;
   HEAP32[i11 >> 2] = i2;
   HEAP32[i9 >> 2] = i2 + i4;
   HEAP32[i10 >> 2] = i3;
   break;
  }
 } while (0);
 L143 : do if (!i8) i2 = 142; else {
  i7 = i14 + 4 | 0;
  i1 = 0;
  while (1) {
   HEAP32[i11 >> 2] = i2 + 4;
   i15 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
   HEAP32[i11 >> 2] = i2 + 12;
   i3 = HEAP8[i2 + 8 >> 0] | 0;
   i4 = HEAP8[i2 + 9 >> 0] | 0;
   i5 = HEAP8[i2 + 10 >> 0] | 0;
   i6 = HEAP8[i2 + 11 >> 0] | 0;
   HEAP32[i11 >> 2] = i2 + 16;
   if ((i15 | 0) == (i12 | 0)) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i8 >>> 0) {
    i2 = 142;
    break L143;
   }
   i2 = HEAP32[i11 >> 2] | 0;
  }
  i1 = (i4 & 255) << 16 | (i3 & 255) << 24 | (i5 & 255) << 8 | i6 & 255;
  i2 = HEAP32[i13 >> 2] | 0;
  if (!i2) {
   if ((i1 | 0) < 0) {
    i2 = 85;
    break;
   }
   if ((HEAP32[i7 >> 2] | 0) >>> 0 < i1 >>> 0) {
    i2 = 85;
    break;
   }
  } else if (FUNCTION_TABLE_iiiii[i2 & 127](i14, i1, 0, 0) | 0) {
   i2 = 85;
   break;
  }
  HEAP32[i10 >> 2] = i1;
  i2 = 0;
 } while (0);
 if (HEAP32[i13 >> 2] | 0) {
  i1 = HEAP32[i14 >> 2] | 0;
  if (i1 | 0) {
   i15 = HEAP32[i14 + 28 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[i15 + 8 >> 2] & 63](i15, i1);
   HEAP32[i14 >> 2] = 0;
  }
 }
 HEAP32[i11 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 i15 = i2;
 return i15 | 0;
}

function _ass_fontselect_init(i39, i26, i1, i2, i37, i36) {
 i39 = i39 | 0;
 i26 = i26 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i37 = i37 | 0;
 i36 = i36 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i38 = 0, i40 = 0, i41 = 0, i42 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 5648 | 0;
 i41 = i42 + 56 | 0;
 i38 = i42 + 48 | 0;
 i33 = i42 + 32 | 0;
 i35 = i42 + 24 | 0;
 i34 = i42 + 16 | 0;
 i6 = i42 + 8 | 0;
 i5 = i42;
 i29 = i42 + 520 | 0;
 i30 = i42 + 120 | 0;
 i31 = i42 + 104 | 0;
 i32 = i42 + 4616 | 0;
 i27 = i42 + 96 | 0;
 i28 = i42 + 64 | 0;
 i40 = _calloc(1, 36) | 0;
 if (!i40) {
  i41 = 0;
  STACKTOP = i42;
  return i41 | 0;
 }
 HEAP32[i40 >> 2] = 1;
 if (!i1) i1 = 0; else i1 = ___strdup(i1) | 0;
 HEAP32[i40 + 4 >> 2] = i1;
 if (!i2) i1 = 0; else i1 = ___strdup(i2) | 0;
 HEAP32[i40 + 8 >> 2] = i1;
 HEAP32[i40 + 12 >> 2] = 0;
 i25 = _calloc(1, 44) | 0;
 if (!i25) {
  HEAP32[i40 + 32 >> 2] = 0;
  _ass_msg(i39, 2, 358584, i42 + 40 | 0);
 } else {
  HEAP32[i25 >> 2] = i40;
  i1 = i25 + 4 | 0;
  i2 = 90640;
  i3 = i1 + 36 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  i3 = HEAP32[i39 >> 2] | 0;
  if (i3 | 0) if (HEAP8[i3 >> 0] | 0) {
   i4 = _opendir(i3) | 0;
   if (i4 | 0) {
    i1 = _readdir(i4) | 0;
    if (i1 | 0) do {
     i1 = i1 + 11 | 0;
     if ((HEAP8[i1 >> 0] | 0) != 46) {
      HEAP32[i5 >> 2] = i3;
      HEAP32[i5 + 4 >> 2] = i1;
      _snprintf(i29, 4096, 358445, i5) | 0;
      HEAP32[i30 >> 2] = 0;
      HEAP32[i6 >> 2] = i29;
      _ass_msg(i39, 4, 358451, i6);
      i2 = _read_file(i39, i29, i30) | 0;
      if (i2 | 0) {
       _ass_add_font(i39, i1, i2, HEAP32[i30 >> 2] | 0);
       _free(i2);
      }
     }
     i1 = _readdir(i4) | 0;
    } while ((i1 | 0) != 0);
    _closedir(i4) | 0;
   }
  }
  i10 = i39 + 16 | 0;
  if ((HEAP32[i10 >> 2] | 0) > 0) {
   i11 = i39 + 12 | 0;
   i12 = i31 + 6 | 0;
   i13 = i31 + 8 | 0;
   i14 = i31 + 12 | 0;
   i15 = i28 + 4 | 0;
   i16 = i28 + 20 | 0;
   i17 = i28 + 24 | 0;
   i18 = i28 + 28 | 0;
   i19 = i28 + 8 | 0;
   i20 = i28 + 12 | 0;
   i21 = i28 + 16 | 0;
   i8 = 0;
   do {
    i24 = HEAP32[i11 >> 2] | 0;
    i22 = HEAP32[i24 + (i8 * 12 | 0) >> 2] | 0;
    i23 = HEAP32[i24 + (i8 * 12 | 0) + 4 >> 2] | 0;
    i24 = HEAP32[i24 + (i8 * 12 | 0) + 8 >> 2] | 0;
    i9 = 0;
    i1 = 1;
    do {
     L35 : do if (!(_FT_New_Memory_Face(i26, i23, i24, i9, i27) | 0)) {
      i7 = HEAP32[i27 >> 2] | 0;
      i1 = HEAP32[i7 >> 2] | 0;
      _charmap_magic(i39, i7);
      HEAP32[i28 >> 2] = 0;
      HEAP32[i28 + 4 >> 2] = 0;
      HEAP32[i28 + 8 >> 2] = 0;
      HEAP32[i28 + 12 >> 2] = 0;
      HEAP32[i28 + 16 >> 2] = 0;
      HEAP32[i28 + 20 >> 2] = 0;
      HEAP32[i28 + 24 >> 2] = 0;
      HEAP32[i28 + 28 >> 2] = 0;
      i7 = HEAP32[i27 >> 2] | 0;
      i6 = _FT_Get_Sfnt_Name_Count(i7) | 0;
      if (HEAP32[i7 + 8 >> 2] & 1 | 0) {
       do if ((i6 | 0) > 0) {
        i5 = 0;
        i2 = 0;
        i3 = 0;
        L40 : while (1) {
         i4 = (_FT_Get_Sfnt_Name(i7, i5, i31) | 0) == 0;
         L42 : do if (i4 & (HEAP16[i31 >> 1] | 0) == 3) {
          switch (HEAP16[i12 >> 1] | 0) {
          case 1:
          case 4:
           break;
          default:
           break L42;
          }
          _ass_utf16be_to_utf8(i32, 1024, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0);
          i4 = HEAP16[i12 >> 1] | 0;
          if (i4 << 16 >> 16 == 4) {
           i4 = ___strdup(i32) | 0;
           HEAP32[i29 + (i2 << 2) >> 2] = i4;
           if (!i4) {
            i6 = 33;
            break L40;
           }
           i2 = i2 + 1 | 0;
           i4 = HEAP16[i12 >> 1] | 0;
          }
          if (i4 << 16 >> 16 == 1) {
           i4 = ___strdup(i32) | 0;
           HEAP32[i30 + (i3 << 2) >> 2] = i4;
           if (!i4) {
            i6 = 33;
            break L40;
           } else i3 = i3 + 1 | 0;
          }
         } while (0);
         i5 = i5 + 1 | 0;
         if ((i5 | 0) >= (i6 | 0)) {
          i6 = 35;
          break;
         }
        }
        if ((i6 | 0) == 33) {
         i4 = i3;
         i5 = 0;
         i6 = 42;
         break;
        } else if ((i6 | 0) == 35) if (!i3) {
         i6 = 36;
         break;
        } else {
         i4 = i3;
         i6 = 38;
         break;
        }
       } else {
        i2 = 0;
        i6 = 36;
       } while (0);
       if ((i6 | 0) == 36) {
        i6 = 0;
        i3 = HEAP32[i7 + 20 >> 2] | 0;
        if (!i3) {
         i4 = i2;
         i3 = 0;
        } else {
         i5 = ___strdup(i3) | 0;
         HEAP32[i30 >> 2] = i5;
         if (!i5) {
          i4 = i2;
          i3 = 0;
         } else {
          i4 = 1;
          i6 = 38;
         }
        }
       }
       do if ((i6 | 0) == 38) {
        i5 = HEAP32[i7 + 12 >> 2] | 0;
        HEAP32[i16 >> 2] = 0 - (i5 & 1) & 110;
        HEAP32[i17 >> 2] = (0 - (i5 >>> 1 & 1) & 300) + 400;
        HEAP32[i18 >> 2] = 100;
        i5 = _FT_Get_Postscript_Name(i7) | 0;
        HEAP32[i19 >> 2] = i5;
        i5 = _calloc(4, i4) | 0;
        HEAP32[i28 >> 2] = i5;
        if (!i5) {
         i5 = 0;
         i6 = 42;
        } else {
         _memcpy(i5 | 0, i30 | 0, i4 << 2 | 0) | 0;
         HEAP32[i20 >> 2] = i4;
         if (!i2) {
          i2 = 0;
          i7 = 0;
          i6 = 0;
         } else {
          i3 = _calloc(4, i2) | 0;
          HEAP32[i15 >> 2] = i3;
          if (!i3) {
           i6 = 42;
           break;
          }
          _memcpy(i3 | 0, i29 | 0, i2 << 2 | 0) | 0;
          HEAP32[i21 >> 2] = i2;
          i7 = i3;
          i6 = i3;
         }
         i3 = _calloc(1, 12) | 0;
         if (!i3) {
          if ((i4 | 0) > 0) {
           i3 = 0;
           do {
            _free(HEAP32[i5 + (i3 << 2) >> 2] | 0);
            i3 = i3 + 1 | 0;
           } while ((i3 | 0) != (i4 | 0));
          }
          if ((i2 | 0) > 0) {
           i3 = 0;
           do {
            _free(HEAP32[i7 + (i3 << 2) >> 2] | 0);
            i3 = i3 + 1 | 0;
           } while ((i3 | 0) != (i2 | 0));
          }
          _free(i5);
          _free(i6);
          _FT_Done_Face(HEAP32[i27 >> 2] | 0) | 0;
          break L35;
         }
         HEAP32[i3 >> 2] = i39;
         HEAP32[i3 + 4 >> 2] = HEAP32[i27 >> 2];
         HEAP32[i3 + 8 >> 2] = i8;
         if (!(_ass_font_provider_add_font(i25, i28, 0, i9, i3) | 0)) {
          HEAP32[i33 >> 2] = i22;
          _ass_msg(i39, 2, 358551, i33);
         }
         if ((i4 | 0) > 0) {
          i3 = 0;
          do {
           _free(HEAP32[i5 + (i3 << 2) >> 2] | 0);
           i3 = i3 + 1 | 0;
          } while ((i3 | 0) != (i4 | 0));
         }
         if ((i2 | 0) > 0) {
          i3 = 0;
          do {
           _free(HEAP32[i7 + (i3 << 2) >> 2] | 0);
           i3 = i3 + 1 | 0;
          } while ((i3 | 0) != (i2 | 0));
         }
         _free(i5);
         _free(i6);
         break L35;
        }
       } while (0);
       if ((i6 | 0) == 42) if ((i4 | 0) > 0) {
        i3 = 0;
        do {
         _free(HEAP32[i30 + (i3 << 2) >> 2] | 0);
         i3 = i3 + 1 | 0;
        } while ((i3 | 0) != (i4 | 0));
        i4 = i2;
        i3 = i5;
       } else {
        i4 = i2;
        i3 = i5;
       }
       if ((i4 | 0) > 0) {
        i2 = 0;
        do {
         _free(HEAP32[i29 + (i2 << 2) >> 2] | 0);
         i2 = i2 + 1 | 0;
        } while ((i2 | 0) != (i4 | 0));
       }
       _free(i3);
       _free(HEAP32[i15 >> 2] | 0);
      }
      HEAP32[i35 >> 2] = i22;
      _ass_msg(i39, 2, 358505, i35);
      _FT_Done_Face(HEAP32[i27 >> 2] | 0) | 0;
     } else {
      HEAP32[i34 >> 2] = i22;
      _ass_msg(i39, 2, 358474, i34);
     } while (0);
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) < (i1 | 0));
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) < (HEAP32[i10 >> 2] | 0));
  }
  HEAP32[i40 + 32 >> 2] = i25;
 }
 if (!i36) {
  i41 = i40;
  STACKTOP = i42;
  return i41 | 0;
 }
 L106 : do if (!59) i1 = i40 + 28 | 0; else {
  i1 = i40 + 28 | 0;
  L109 : do if ((i36 | 0) == 1) {
   i2 = 0;
   i3 = 59;
   while (1) {
    i36 = FUNCTION_TABLE_iiii[i3 & 127](i39, i40, i37) | 0;
    HEAP32[i1 >> 2] = i36;
    if (i36 | 0) break L109;
    i2 = i2 + 1 | 0;
    i3 = HEAP32[90472 + (i2 * 12 | 0) + 4 >> 2] | 0;
    if (!i3) break L106;
   }
  } else {
   i2 = 0;
   i3 = 59;
   while (1) {
    if ((HEAP32[90472 + (i2 * 12 | 0) >> 2] | 0) == (i36 | 0)) {
     i35 = FUNCTION_TABLE_iiii[i3 & 127](i39, i40, i37) | 0;
     HEAP32[i1 >> 2] = i35;
     if (i35 | 0) break L109;
    }
    i2 = i2 + 1 | 0;
    i3 = HEAP32[90472 + (i2 * 12 | 0) + 4 >> 2] | 0;
    if (!i3) break L106;
   }
  } while (0);
  HEAP32[i38 >> 2] = HEAP32[90472 + (i2 * 12 | 0) + 8 >> 2];
  _ass_msg(i39, 4, 358624, i38);
 } while (0);
 if (HEAP32[i1 >> 2] | 0) {
  i41 = i40;
  STACKTOP = i42;
  return i41 | 0;
 }
 _ass_msg(i39, 2, 358647, i41);
 i41 = i40;
 STACKTOP = i42;
 return i41 | 0;
}

function _ass_fill_generic_tile16_c(i2, i39, i5, i4, i38) {
 i2 = i2 | 0;
 i39 = i39 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i38 = i38 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 i40 = i42 + 72 | 0;
 i41 = i42 + 32 | 0;
 i37 = i42;
 _memset(i40 | 0, 0, 512) | 0;
 i1 = i41;
 i3 = i1 + 36 | 0;
 do {
  HEAP16[i1 >> 1] = 0;
  i1 = i1 + 2 | 0;
 } while ((i1 | 0) < (i3 | 0));
 i36 = i5 + (i4 * 40 | 0) | 0;
 L1 : do if (i4 | 0) {
  i21 = i37 + 2 | 0;
  i22 = i37 + 4 | 0;
  i23 = i37 + 6 | 0;
  i24 = i37 + 8 | 0;
  i25 = i37 + 10 | 0;
  i26 = i37 + 12 | 0;
  i27 = i37 + 14 | 0;
  i28 = i37 + 16 | 0;
  i29 = i37 + 18 | 0;
  i30 = i37 + 20 | 0;
  i31 = i37 + 22 | 0;
  i32 = i37 + 24 | 0;
  i33 = i37 + 26 | 0;
  i34 = i37 + 28 | 0;
  i35 = i37 + 30 | 0;
  while (1) {
   i4 = HEAP32[i5 + 32 >> 2] | 0;
   if (i4 >>> 0 >= 1024) {
    i10 = 4;
    break;
   }
   i1 = HEAP32[i5 + 36 >> 2] | 0;
   if ((i1 + -1 | 0) >>> 0 >= 1024) {
    i10 = 6;
    break;
   }
   if ((i4 | 0) > (i1 | 0)) {
    i10 = 8;
    break;
   }
   i20 = HEAP32[i5 + 20 >> 2] | 0;
   i14 = i20 << 2 & 4;
   i18 = i14 & 65535;
   i14 = (HEAP32[i5 + 24 >> 2] | 0) != 0 | (i20 & 4 | 0) == 0 ? i18 : (i14 ^ 4) & 65535;
   i20 = (i20 & 2 | 0) == 0;
   i15 = i20 ? i14 : i18;
   i14 = i20 ? i18 : i14;
   i18 = i4 >>> 6;
   i20 = i1 >>> 6;
   i6 = i4 & 63;
   i19 = i1 & 63;
   i17 = (Math_imul(i6 << 16, i14 & 65535) | 0) >>> 16;
   i3 = i18 + 1 | 0;
   i16 = i41 + (i3 << 1) | 0;
   HEAP16[i16 >> 1] = (HEAPU16[i16 >> 1] | 0) - i17;
   i16 = i41 + (i18 << 1) | 0;
   HEAP16[i16 >> 1] = (HEAPU16[i16 >> 1] | 0) - (i14 << 6 & 65535) + i17;
   i16 = (Math_imul(i19 << 16, i15 & 65535) | 0) >>> 16;
   i17 = i41 + (i20 + 1 << 1) | 0;
   HEAP16[i17 >> 1] = i16 + (HEAPU16[i17 >> 1] | 0);
   i17 = i41 + (i20 << 1) | 0;
   HEAP16[i17 >> 1] = (HEAPU16[i17 >> 1] | 0) + (i15 << 6 & 65535) - i16;
   if ((i4 | 0) != (i1 | 0)) {
    i12 = HEAP32[i5 + 8 >> 2] | 0;
    i16 = HEAP32[i5 + 16 >> 2] | 0;
    i17 = ((i16 | 0) < 0) << 31 >> 31;
    i12 = ___muldi3(i16 | 0, i17 | 0, i12 | 0, ((i12 | 0) < 0) << 31 >> 31 | 0) | 0;
    i12 = _i64Add(i12 | 0, tempRet0 | 0, 0, 131072) | 0;
    i12 = _bitshift64Ashr(i12 | 0, tempRet0 | 0, 50) | 0;
    i11 = tempRet0;
    i13 = HEAP32[i5 + 12 >> 2] | 0;
    i13 = ___muldi3(i13 | 0, ((i13 | 0) < 0) << 31 >> 31 | 0, i16 | 0, i17 | 0) | 0;
    i13 = _i64Add(i13 | 0, tempRet0 | 0, 0, 131072) | 0;
    i13 = _bitshift64Ashr(i13 | 0, tempRet0 | 0, 50) | 0;
    i13 = i13 & 65535;
    i15 = i5;
    i15 = _bitshift64Shl(HEAP32[i15 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0, 21) | 0;
    i15 = _bitshift64Ashr(i15 | 0, tempRet0 | 0, 32) | 0;
    i17 = ___muldi3(i15 | 0, tempRet0 | 0, i16 | 0, i17 | 0) | 0;
    i17 = _i64Add(i17 | 0, tempRet0 | 0, 0, 4096) | 0;
    i17 = _bitshift64Lshr(i17 | 0, tempRet0 | 0, 45) | 0;
    i16 = _bitshift64Shl(i12 | 0, i11 | 0, 16) | 0;
    i15 = i16 >> 16;
    i14 = i13 << 16 >> 16;
    i1 = (Math_imul(i14, i18) | 0) + (i16 >> 17) | 0;
    HEAP16[i37 >> 1] = 0;
    HEAP16[i21 >> 1] = i15;
    i9 = _bitshift64Shl(i12 | 0, i11 | 0, 1) | 0;
    HEAP16[i22 >> 1] = i9;
    HEAP16[i23 >> 1] = i15 * 3;
    i9 = _bitshift64Shl(i12 | 0, i11 | 0, 2) | 0;
    HEAP16[i24 >> 1] = i9;
    HEAP16[i25 >> 1] = i15 * 5;
    HEAP16[i26 >> 1] = i15 * 6;
    HEAP16[i27 >> 1] = i15 * 7;
    i11 = _bitshift64Shl(i12 | 0, i11 | 0, 3) | 0;
    HEAP16[i28 >> 1] = i11;
    HEAP16[i29 >> 1] = i15 * 9;
    HEAP16[i30 >> 1] = i15 * 10;
    HEAP16[i31 >> 1] = i15 * 11;
    HEAP16[i32 >> 1] = i15 * 12;
    HEAP16[i33 >> 1] = i15 * 13;
    HEAP16[i34 >> 1] = i15 * 14;
    HEAP16[i35 >> 1] = i15 * 15;
    i1 = (i17 & 65535) - i1 | 0;
    i15 = (i16 | 0) < 0 ? 0 - i15 | 0 : i15;
    i13 = i13 << 16 >> 16 < 0 ? 0 - i14 | 0 : i14;
    i16 = i15 << 16;
    i17 = i13 << 16;
    i11 = 512 - (i14 >>> 1) << 16 >> 16;
    i13 = (((i16 | 0) > (i17 | 0) ? i13 : i15) << 16 >> 16) + 2 >> 2;
    i12 = i13 + i11 | 0;
    i13 = i11 - i13 | 0;
    L10 : do if (!i6) {
     i3 = i18;
     i10 = 19;
    } else {
     if ((i20 | 0) == (i18 | 0)) {
      i3 = i19 - i6 | 0;
      i8 = i16 >> 16;
      i7 = (i3 << 4) + 1024 - i8 << 16 >> 16;
      i9 = (Math_imul(i17 >> 16, i3) | 0) >>> 6;
      i4 = (Math_imul(i19 + i6 << 9, i14) | 0) >> 16;
      i9 = (((i8 | 0) > (i9 << 16 >> 16 | 0) ? i9 : i15) << 16 >> 16) + 2 >> 2;
      i7 = ((i7 | 0) < 1024 ? i7 : 1024) << 19 >> 16;
      i8 = i3 - ((Math_imul(i9 + i4 | 0, i7) | 0) >>> 16) | 0;
      i9 = i3 - ((Math_imul(i4 - i9 | 0, i7) | 0) >>> 16) | 0;
      i4 = i1 << 16 >> 16;
      i6 = i3 << 1;
      i3 = 0;
      i1 = 0;
      while (1) {
       i19 = (Math_imul(i4 - (i1 << 16 >> 16) | 0, i7) | 0) >> 16;
       i20 = i8 + i19 << 16 >> 16;
       i20 = (i20 | 0) > 0 ? i20 : 0;
       i19 = i9 + i19 << 16 >> 16;
       i19 = (i19 | 0) > 0 ? i19 : 0;
       i1 = i40 + (i18 << 5) + (i3 << 1) | 0;
       HEAP16[i1 >> 1] = ((i19 | 0) > (i6 | 0) ? i6 : i19) + (HEAPU16[i1 >> 1] | 0) + ((i20 | 0) > (i6 | 0) ? i6 : i20);
       i1 = i3 + 1 | 0;
       if ((i1 | 0) == 16) break L10;
       i3 = i1;
       i1 = HEAP16[i37 + (i1 << 1) >> 1] | 0;
      }
     }
     i10 = 64 - i6 | 0;
     i8 = i16 >> 16;
     i7 = (i10 << 4) + 1024 - i8 << 16 >> 16;
     i9 = (Math_imul(i17 >> 16, i10) | 0) >>> 6;
     i11 = (Math_imul(i4 << 9 & 32256 | 32768, i14) | 0) >> 16;
     i9 = (((i8 | 0) > (i9 << 16 >> 16 | 0) ? i9 : i15) << 16 >> 16) + 2 >> 2;
     i7 = ((i7 | 0) < 1024 ? i7 : 1024) << 19 >> 16;
     i8 = i10 - ((Math_imul(i9 + i11 | 0, i7) | 0) >>> 16) | 0;
     i9 = i10 - ((Math_imul(i11 - i9 | 0, i7) | 0) >>> 16) | 0;
     i10 = i10 << 1;
     i11 = i1 << 16 >> 16;
     i6 = 0;
     i4 = 0;
     while (1) {
      i44 = (Math_imul(i11 - (i4 << 16 >> 16) | 0, i7) | 0) >> 16;
      i43 = i8 + i44 << 16 >> 16;
      i43 = (i43 | 0) > 0 ? i43 : 0;
      i44 = i9 + i44 << 16 >> 16;
      i44 = (i44 | 0) > 0 ? i44 : 0;
      i4 = i40 + (i18 << 5) + (i6 << 1) | 0;
      HEAP16[i4 >> 1] = ((i44 | 0) > (i10 | 0) ? i10 : i44) + (HEAPU16[i4 >> 1] | 0) + ((i43 | 0) > (i10 | 0) ? i10 : i43);
      i4 = i6 + 1 | 0;
      if ((i4 | 0) == 16) break;
      i6 = i4;
      i4 = HEAP16[i37 + (i4 << 1) >> 1] | 0;
     }
     i1 = i1 - i14 | 0;
     i10 = 19;
    } while (0);
    if ((i10 | 0) == 19) {
     i10 = 0;
     if ((i3 | 0) < (i20 | 0)) do {
      i4 = i1 << 16 >> 16;
      i1 = 0;
      do {
       i43 = i4 - (HEAP16[i37 + (i1 << 1) >> 1] | 0) | 0;
       i18 = i12 + i43 << 16 >> 16;
       i18 = (i18 | 0) > 0 ? i18 : 0;
       i43 = i13 + i43 << 16 >> 16;
       i43 = (i43 | 0) > 0 ? i43 : 0;
       i44 = i40 + (i3 << 5) + (i1 << 1) | 0;
       HEAP16[i44 >> 1] = ((((i18 | 0) < 1024 ? i18 : 1024) + ((i43 | 0) < 1024 ? i43 : 1024) | 0) >>> 3) + (HEAPU16[i44 >> 1] | 0);
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) != 16);
      i1 = i4 - i14 | 0;
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) != (i20 | 0));
     if (i19 | 0) {
      i7 = i16 >> 16;
      i6 = (i19 << 4 | 1024) - i7 << 16 >> 16;
      i8 = (Math_imul(i17 >> 16, i19) | 0) >>> 6;
      i4 = (Math_imul(i19 << 9, i14) | 0) >> 16;
      i8 = (((i7 | 0) > (i8 << 16 >> 16 | 0) ? i8 : i15) << 16 >> 16) + 2 >> 2;
      i6 = ((i6 | 0) < 1024 ? i6 : 1024) << 19 >> 16;
      i7 = i19 - ((Math_imul(i8 + i4 | 0, i6) | 0) >>> 16) | 0;
      i8 = i19 - ((Math_imul(i4 - i8 | 0, i6) | 0) >>> 16) | 0;
      i4 = i19 << 1;
      i3 = i1 << 16 >> 16;
      i1 = 0;
      do {
       i19 = (Math_imul(i3 - (HEAP16[i37 + (i1 << 1) >> 1] | 0) | 0, i6) | 0) >> 16;
       i43 = i7 + i19 << 16 >> 16;
       i43 = (i43 | 0) > 0 ? i43 : 0;
       i19 = i8 + i19 << 16 >> 16;
       i19 = (i19 | 0) > 0 ? i19 : 0;
       i44 = i40 + (i20 << 5) + (i1 << 1) | 0;
       HEAP16[i44 >> 1] = ((i19 | 0) > (i4 | 0) ? i4 : i19) + (HEAPU16[i44 >> 1] | 0) + ((i43 | 0) > (i4 | 0) ? i4 : i43);
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) != 16);
     }
    }
   }
   i5 = i5 + 40 | 0;
   if ((i5 | 0) == (i36 | 0)) break L1;
  }
  if ((i10 | 0) == 4) ___assert_fail(355092, 355134, 187, 355153); else if ((i10 | 0) == 6) ___assert_fail(355179, 355134, 188, 355153); else if ((i10 | 0) == 8) ___assert_fail(355221, 355134, 189, 355153);
 } while (0);
 i4 = 0;
 i3 = i38 << 8;
 while (1) {
  i3 = (HEAP16[i41 + (i4 << 1) >> 1] | 0) + (i3 << 16 >> 16) | 0;
  i1 = 0;
  do {
   i43 = (HEAPU16[i40 + (i4 << 5) + (i1 << 1) >> 1] | 0) + i3 | 0;
   i38 = i43 << 16 >> 16;
   i44 = 0 - i38 | 0;
   i44 = ((i38 | 0) > (i44 << 16 >> 16 | 0) ? i43 : i44) << 16 >> 16;
   HEAP8[i2 + i1 >> 0] = (i44 | 0) < 255 ? i44 : 255;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 16);
  i4 = i4 + 1 | 0;
  if ((i4 | 0) == 16) break; else i2 = i2 + i39 | 0;
 }
 STACKTOP = i42;
 return;
}

function _open_face_PS_from_sfnt_stream(i15, i19, i16, i17) {
 i15 = i15 | 0;
 i19 = i19 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i23;
 i14 = HEAP32[i15 >> 2] | 0;
 i20 = i19 + 8 | 0;
 i21 = HEAP32[i20 >> 2] | 0;
 i22 = i19 + 4 | 0;
 do if ((i21 + 3 | 0) >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
  i18 = i19 + 20 | 0;
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i1 = (HEAP32[i19 >> 2] | 0) + i21 | 0;
   if (!i1) {
    HEAP32[i20 >> 2] = i21 + 4;
    i1 = 2;
   } else {
    i4 = i21;
    i11 = 8;
   }
  } else {
   if ((FUNCTION_TABLE_iiiii[i1 & 127](i19, i21, i13, 4) | 0) != 4) break;
   i1 = i13;
   i4 = HEAP32[i20 >> 2] | 0;
   i11 = 8;
  }
  L8 : do if ((i11 | 0) == 8) {
   i12 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
   i2 = i4 + 4 | 0;
   HEAP32[i20 >> 2] = i2;
   if ((i12 | 0) == 1954115633) {
    i3 = HEAP32[i22 >> 2] | 0;
    do if ((i4 + 5 | 0) >>> 0 < i3 >>> 0) {
     i1 = HEAP32[i18 >> 2] | 0;
     if (!i1) {
      i1 = (HEAP32[i19 >> 2] | 0) + i2 | 0;
      if (!i1) {
       HEAP32[i20 >> 2] = i4 + 6;
       i1 = 0;
       i2 = i4 + 12 | 0;
       i11 = 19;
      } else {
       i3 = 0;
       i11 = 16;
      }
     } else {
      if ((FUNCTION_TABLE_iiiii[i1 & 127](i19, i2, i13, 2) | 0) != 2) break;
      i1 = i13;
      i3 = HEAP32[i18 >> 2] | 0;
      i2 = HEAP32[i20 >> 2] | 0;
      i11 = 16;
     }
     do if ((i11 | 0) == 16) {
      i1 = (HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0);
      HEAP32[i20 >> 2] = i2 + 2;
      i2 = i2 + 8 | 0;
      if (!i3) {
       i3 = HEAP32[i22 >> 2] | 0;
       i11 = 19;
       break;
      }
      if (!(FUNCTION_TABLE_iiiii[i3 & 127](i19, i2, 0, 0) | 0)) i10 = i1; else {
       i22 = 85;
       STACKTOP = i23;
       return i22 | 0;
      }
     } while (0);
     if ((i11 | 0) == 19) if (i3 >>> 0 < i2 >>> 0) {
      i22 = 85;
      STACKTOP = i23;
      return i22 | 0;
     } else i10 = i1;
     HEAP32[i20 >> 2] = i2;
     if ((i10 | 0) <= 0) {
      i22 = 142;
      STACKTOP = i23;
      return i22 | 0;
     }
     i9 = (i16 | 0) > -1;
     i12 = (i16 | 0) < 0;
     i7 = 0;
     i5 = -1;
     i8 = 0;
     L31 : while (1) {
      i3 = HEAP32[i22 >> 2] | 0;
      if ((i2 + 3 | 0) >>> 0 >= i3 >>> 0) {
       i11 = 29;
       break;
      }
      i1 = HEAP32[i18 >> 2] | 0;
      if (!i1) {
       i1 = (HEAP32[i19 >> 2] | 0) + i2 | 0;
       if (!i1) {
        HEAP32[i20 >> 2] = i2 + 4;
        i1 = 0;
        i4 = i2 + 8 | 0;
        i11 = 34;
       } else {
        i3 = 0;
        i11 = 30;
       }
      } else {
       if ((FUNCTION_TABLE_iiiii[i1 & 127](i19, i2, i13, 4) | 0) != 4) {
        i11 = 29;
        break;
       }
       i1 = i13;
       i2 = HEAP32[i20 >> 2] | 0;
       i3 = HEAP32[i18 >> 2] | 0;
       i11 = 30;
      }
      do if ((i11 | 0) == 30) {
       i11 = 0;
       i1 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
       HEAP32[i20 >> 2] = i2 + 4;
       i4 = i2 + 8 | 0;
       if (!i3) {
        i3 = HEAP32[i22 >> 2] | 0;
        i11 = 34;
        break;
       }
       if (FUNCTION_TABLE_iiiii[i3 & 127](i19, i4, 0, 0) | 0) {
        i1 = 85;
        i11 = 70;
        break L31;
       }
       i6 = i1;
       i3 = HEAP32[i22 >> 2] | 0;
      } while (0);
      if ((i11 | 0) == 34) {
       i11 = 0;
       if (i3 >>> 0 < i4 >>> 0) {
        i1 = 85;
        i11 = 70;
        break;
       } else i6 = i1;
      }
      HEAP32[i20 >> 2] = i4;
      if ((i2 + 11 | 0) >>> 0 >= i3 >>> 0) {
       i11 = 41;
       break;
      }
      i1 = HEAP32[i18 >> 2] | 0;
      if (!i1) {
       i1 = (HEAP32[i19 >> 2] | 0) + i4 | 0;
       if (!i1) {
        i1 = 0;
        i2 = i4;
       } else {
        i2 = i4;
        i11 = 40;
       }
      } else {
       if ((FUNCTION_TABLE_iiiii[i1 & 127](i19, i4, i13, 4) | 0) != 4) {
        i11 = 41;
        break;
       }
       i1 = i13;
       i2 = HEAP32[i20 >> 2] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i11 = 40;
      }
      if ((i11 | 0) == 40) {
       i11 = 0;
       i1 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
      }
      i4 = i2 + 4 | 0;
      HEAP32[i20 >> 2] = i4;
      if ((i2 + 7 | 0) >>> 0 >= i3 >>> 0) {
       i11 = 48;
       break;
      }
      i2 = HEAP32[i18 >> 2] | 0;
      if (!i2) {
       i2 = (HEAP32[i19 >> 2] | 0) + i4 | 0;
       if (!i2) {
        i3 = 0;
        i2 = i4;
       } else i11 = 47;
      } else {
       if ((FUNCTION_TABLE_iiiii[i2 & 127](i19, i4, i13, 4) | 0) != 4) {
        i11 = 48;
        break;
       }
       i2 = i13;
       i4 = HEAP32[i20 >> 2] | 0;
       i11 = 47;
      }
      if ((i11 | 0) == 47) {
       i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
       i2 = i4;
      }
      i2 = i2 + 4 | 0;
      HEAP32[i20 >> 2] = i2;
      L64 : do if ((i6 | 0) < 1415139377) {
       switch (i6 | 0) {
       case 1128875040:
        break;
       default:
        {
         i4 = i7;
         break L64;
        }
       }
       i1 = i1 + 22 | 0;
       i3 = i3 + -22 | 0;
       if (i12) {
        i6 = 1;
        i5 = i3;
        i11 = 53;
        break L31;
       } else {
        i4 = 1;
        i5 = i5 + 1 | 0;
       }
      } else {
       switch (i6 | 0) {
       case 1415139377:
        break;
       default:
        {
         i4 = i7;
         break L64;
        }
       }
       i1 = i1 + 24 | 0;
       i3 = i3 + -24 | 0;
       if (i12) {
        i6 = 0;
        i5 = i3;
        i11 = 53;
        break L31;
       } else {
        i4 = 0;
        i5 = i5 + 1 | 0;
       }
      } while (0);
      i8 = i8 + 1 | 0;
      if (i9 & (i5 | 0) == (i16 | 0)) {
       i6 = i4;
       i5 = i3;
       i11 = 53;
       break;
      }
      if ((i8 | 0) >= (i10 | 0)) {
       i1 = 142;
       i11 = 70;
       break;
      } else i7 = i4;
     }
     if ((i11 | 0) == 29) {
      i22 = 85;
      STACKTOP = i23;
      return i22 | 0;
     } else if ((i11 | 0) == 41) {
      i22 = 85;
      STACKTOP = i23;
      return i22 | 0;
     } else if ((i11 | 0) == 48) {
      i22 = 85;
      STACKTOP = i23;
      return i22 | 0;
     } else if ((i11 | 0) == 53) {
      i2 = i1 + i21 | 0;
      i1 = HEAP32[i18 >> 2] | 0;
      if (!i1) {
       if ((HEAP32[i22 >> 2] | 0) >>> 0 < i2 >>> 0) {
        i22 = 0;
        STACKTOP = i23;
        return i22 | 0;
       }
      } else if (FUNCTION_TABLE_iiiii[i1 & 127](i19, i2, 0, 0) | 0) {
       i22 = 0;
       STACKTOP = i23;
       return i22 | 0;
      }
      HEAP32[i20 >> 2] = i2;
      do if ((i5 | 0) > 0) {
       i1 = FUNCTION_TABLE_iii[HEAP32[i14 + 4 >> 2] & 255](i14, i5) | 0;
       if (!i1) {
        i22 = 64;
        STACKTOP = i23;
        return i22 | 0;
       } else {
        _memset(i1 | 0, 0, i5 | 0) | 0;
        i4 = HEAP32[i20 >> 2] | 0;
        break;
       }
      } else if (!i5) {
       i1 = 0;
       i4 = i2;
      } else {
       i22 = 6;
       STACKTOP = i23;
       return i22 | 0;
      } while (0);
      i2 = HEAP32[i22 >> 2] | 0;
      if (i2 >>> 0 <= i4 >>> 0) {
       i22 = 85;
       STACKTOP = i23;
       return i22 | 0;
      }
      i3 = HEAP32[i18 >> 2] | 0;
      if (!i3) {
       i2 = i2 - i4 | 0;
       i2 = i2 >>> 0 > i5 >>> 0 ? i5 : i2;
       _memcpy(i1 | 0, (HEAP32[i19 >> 2] | 0) + i4 | 0, i2 | 0) | 0;
      } else i2 = FUNCTION_TABLE_iiiii[i3 & 127](i19, i4, i1, i5) | 0;
      HEAP32[i20 >> 2] = i2 + i4;
      if (i2 >>> 0 < i5 >>> 0) {
       i22 = 85;
       STACKTOP = i23;
       return i22 | 0;
      }
      i1 = _open_face_from_buffer(i15, i1, i5, i12 ? i16 : 0, i6 << 24 >> 24 ? 280883 : 280868, i17) | 0;
      if ((i1 & 255 | 0) == 2) break L8;
      STACKTOP = i23;
      return i1 | 0;
     } else if ((i11 | 0) == 70) {
      STACKTOP = i23;
      return i1 | 0;
     }
    } while (0);
    i22 = 85;
    STACKTOP = i23;
    return i22 | 0;
   } else i1 = 2;
  } while (0);
  i2 = HEAP32[i18 >> 2] | 0;
  if (!i2) {
   if ((HEAP32[i22 >> 2] | 0) >>> 0 < i21 >>> 0) {
    i22 = 85;
    STACKTOP = i23;
    return i22 | 0;
   }
  } else if (FUNCTION_TABLE_iiiii[i2 & 127](i19, i21, 0, 0) | 0) {
   i22 = 85;
   STACKTOP = i23;
   return i22 | 0;
  }
  HEAP32[i20 >> 2] = i21;
  i22 = i1;
  STACKTOP = i23;
  return i22 | 0;
 } while (0);
 i22 = 85;
 STACKTOP = i23;
 return i22 | 0;
}

function _af_glyph_hints_reload(i20, i14) {
 i20 = i20 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i26 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i25 = i26;
 HEAP32[i25 >> 2] = 0;
 i9 = i20 + 4 | 0;
 i16 = HEAP32[i9 >> 2] | 0;
 i10 = i20 + 12 | 0;
 i17 = HEAP32[i10 >> 2] | 0;
 i11 = i20 + 8 | 0;
 i18 = HEAP32[i11 >> 2] | 0;
 i12 = i20 + 16 | 0;
 i15 = HEAP32[i12 >> 2] | 0;
 i8 = HEAP32[i20 >> 2] | 0;
 i13 = i20 + 24 | 0;
 HEAP32[i13 >> 2] = 0;
 i19 = i20 + 36 | 0;
 HEAP32[i19 >> 2] = 0;
 HEAP32[i20 + 44 >> 2] = 0;
 HEAP32[i20 + 56 >> 2] = 0;
 HEAP32[i20 + 1512 >> 2] = 0;
 HEAP32[i20 + 1524 >> 2] = 0;
 i23 = HEAP16[i14 >> 1] | 0;
 i2 = i23 << 16 >> 16;
 i5 = i20 + 32 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 do if ((i23 & 65535) < 9) {
  i1 = i20 + 40 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) {
   HEAP32[i1 >> 2] = i20 + 3e3;
   HEAP32[i5 >> 2] = 8;
  }
 } else if (i2 >>> 0 > i3 >>> 0) {
  i4 = i20 + 40 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (i20 + 3e3 | 0)) {
   HEAP32[i4 >> 2] = 0;
   i1 = 0;
  }
  i2 = i2 + 3 & -4;
  i23 = _ft_mem_realloc(i8, 4, i3, i2, i1, i25) | 0;
  HEAP32[i4 >> 2] = i23;
  if (!(HEAP32[i25 >> 2] | 0)) {
   HEAP32[i5 >> 2] = i2;
   break;
  } else {
   i25 = HEAP32[i25 >> 2] | 0;
   STACKTOP = i26;
   return i25 | 0;
  }
 } while (0);
 i5 = i14 + 2 | 0;
 i1 = HEAP16[i5 >> 1] | 0;
 i4 = i1 << 16 >> 16;
 i2 = i4 + 2 | 0;
 i7 = i20 + 20 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 do if (i2 >>> 0 < 97) {
  i2 = i20 + 28 | 0;
  if (!(HEAP32[i2 >> 2] | 0)) {
   HEAP32[i2 >> 2] = i20 + 3032;
   HEAP32[i7 >> 2] = 96;
  }
 } else if (i2 >>> 0 > i6 >>> 0) {
  i3 = i20 + 28 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 | 0) == (i20 + 3032 | 0)) {
   HEAP32[i3 >> 2] = 0;
   i1 = 0;
  }
  i2 = i4 + 11 & -8;
  i23 = _ft_mem_realloc(i8, 40, i6, i2, i1, i25) | 0;
  HEAP32[i3 >> 2] = i23;
  if (!(HEAP32[i25 >> 2] | 0)) {
   HEAP32[i7 >> 2] = i2;
   i1 = HEAP16[i5 >> 1] | 0;
   break;
  } else {
   i25 = HEAP32[i25 >> 2] | 0;
   STACKTOP = i26;
   return i25 | 0;
  }
 } while (0);
 HEAP32[i13 >> 2] = i1 << 16 >> 16;
 HEAP32[i19 >> 2] = HEAP16[i14 >> 1];
 i1 = i20 + 68 | 0;
 HEAP32[i1 >> 2] = 2;
 i2 = i20 + 1536 | 0;
 HEAP32[i2 >> 2] = -1;
 if ((_FT_Outline_Get_Orientation(i14) | 0) == 1) {
  HEAP32[i1 >> 2] = -2;
  HEAP32[i2 >> 2] = 1;
 }
 HEAP32[i9 >> 2] = i16;
 HEAP32[i10 >> 2] = i17;
 HEAP32[i11 >> 2] = i18;
 HEAP32[i12 >> 2] = i15;
 HEAP32[i20 + 2992 >> 2] = 0;
 HEAP32[i20 + 2996 >> 2] = 0;
 i22 = HEAP32[i20 + 28 >> 2] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if (!i1) {
  i25 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i26;
  return i25 | 0;
 }
 i23 = i22 + (i1 * 40 | 0) | 0;
 i8 = i14 + 12 | 0;
 i2 = HEAP32[i8 >> 2] | 0;
 i3 = i22 + ((HEAP16[i2 >> 1] | 0) * 40 | 0) | 0;
 i21 = (i1 | 0) > 0;
 if (i21) {
  i6 = HEAP32[i14 + 4 >> 2] | 0;
  i7 = HEAP32[i14 + 8 >> 2] | 0;
  i4 = i3;
  i2 = i3;
  i1 = 0;
  i5 = i22;
  while (1) {
   HEAP8[i5 + 2 >> 0] = 4;
   HEAP8[i5 + 3 >> 0] = 4;
   i12 = HEAP32[i6 >> 2] | 0;
   HEAP16[i5 + 12 >> 1] = i12;
   i13 = i6 + 4 | 0;
   HEAP16[i5 + 14 >> 1] = HEAP32[i13 >> 2];
   i12 = (_FT_MulFix(i12, i16) | 0) + i18 | 0;
   HEAP32[i5 + 16 >> 2] = i12;
   HEAP32[i5 + 4 >> 2] = i12;
   i13 = (_FT_MulFix(HEAP32[i13 >> 2] | 0, i17) | 0) + i15 | 0;
   HEAP32[i5 + 20 >> 2] = i13;
   HEAP32[i5 + 8 >> 2] = i13;
   i13 = HEAP8[i7 >> 0] | 0;
   HEAP16[i5 >> 1] = (i13 & 3) == 0 ? 1 : (i13 & 3) == 2 ? 2 : 0;
   HEAP32[i5 + 36 >> 2] = i2;
   HEAP32[i2 + 32 >> 2] = i5;
   if ((i5 | 0) == (i4 | 0)) {
    i1 = i1 + 1 | 0;
    if ((i1 | 0) < (HEAP16[i14 >> 1] | 0)) {
     i2 = i22 + ((HEAP16[(HEAP32[i8 >> 2] | 0) + (i1 << 1) >> 1] | 0) * 40 | 0) | 0;
     i3 = i2;
    } else {
     i3 = i5;
     i2 = i5;
    }
   } else {
    i3 = i4;
    i2 = i5;
   }
   i5 = i5 + 40 | 0;
   if (i5 >>> 0 >= i23 >>> 0) break; else {
    i6 = i6 + 8 | 0;
    i7 = i7 + 1 | 0;
    i4 = i3;
   }
  }
  i2 = HEAP32[i8 >> 2] | 0;
 }
 i5 = i20 + 40 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i6 = HEAP32[i19 >> 2] | 0;
 i4 = i1 + (i6 << 2) | 0;
 i7 = (i6 | 0) > 0;
 if (i7) {
  i3 = 0;
  while (1) {
   HEAP32[i1 >> 2] = i22 + ((i3 << 16 >> 16) * 40 | 0);
   i3 = (HEAP16[i2 >> 1] | 0) + 1 | 0;
   i1 = i1 + 4 | 0;
   if (i1 >>> 0 >= i4 >>> 0) break; else i2 = i2 + 2 | 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
 }
 i18 = ((HEAPU16[(HEAP32[(HEAP32[i20 + 2988 >> 2] | 0) + 4 >> 2] | 0) + 68 >> 1] | 0) * 20 | 0) >>> 11;
 i19 = (i18 << 1) + -1 | 0;
 i17 = i1 + (i6 << 2) | 0;
 if (i7) do {
  i3 = HEAP32[i1 >> 2] | 0;
  i16 = i3;
  while (1) {
   i2 = HEAP32[i16 + 36 >> 2] | 0;
   i6 = HEAP16[i16 + 12 >> 1] | 0;
   if ((i2 | 0) == (i3 | 0)) {
    i24 = 34;
    break;
   }
   i20 = (i6 << 16 >> 16) - (HEAP16[i2 + 12 >> 1] | 0) | 0;
   i4 = HEAP16[i16 + 14 >> 1] | 0;
   i15 = (i4 << 16 >> 16) - (HEAP16[i2 + 14 >> 1] | 0) | 0;
   if ((((i15 | 0) < 0 ? 0 - i15 | 0 : i15) + ((i20 | 0) < 0 ? 0 - i20 | 0 : i20) | 0) < (i19 | 0)) i16 = i2; else break;
  }
  if ((i24 | 0) == 34) {
   i24 = 0;
   i4 = HEAP16[i16 + 14 >> 1] | 0;
  }
  i14 = i16;
  HEAP32[i16 + 24 >> 2] = 0;
  i15 = i16 + 28 | 0;
  HEAP32[i15 >> 2] = 0;
  i2 = 0;
  i3 = 0;
  i5 = i16;
  i13 = i16;
  do {
   i13 = HEAP32[i13 + 32 >> 2] | 0;
   i7 = i6;
   i6 = HEAP16[i13 + 12 >> 1] | 0;
   i3 = (i6 << 16 >> 16) - (i7 << 16 >> 16) + i3 | 0;
   i7 = i4;
   i4 = HEAP16[i13 + 14 >> 1] | 0;
   i2 = (i4 << 16 >> 16) - (i7 << 16 >> 16) + i2 | 0;
   i7 = 0 - i3 | 0;
   i8 = 0 - i2 | 0;
   if ((((i2 | 0) < 0 ? i8 : i2) + ((i3 | 0) < 0 ? i7 : i3) | 0) < (i18 | 0)) HEAP16[i13 >> 1] = HEAP16[i13 >> 1] | 16; else {
    i12 = i13;
    i9 = (i12 - i5 | 0) / 40 | 0;
    HEAP32[i5 + 24 >> 2] = i9;
    HEAP32[i13 + 28 >> 2] = 0 - i9;
    i9 = (i2 | 0) >= (i7 | 0);
    if ((i2 | 0) < (i3 | 0)) {
     i10 = i9 ? 1 : -2;
     i11 = i9 ? i2 : i3;
     i2 = i9 ? i3 : i8;
    } else {
     i10 = i9 ? 2 : -1;
     i11 = i9 ? i3 : i2;
     i2 = i9 ? i2 : i7;
    }
    i3 = (i2 | 0) > (((i11 | 0) < 0 ? 0 - i11 | 0 : i11) * 14 | 0) ? i10 & 255 : 4;
    HEAP8[i5 + 3 >> 0] = i3;
    i2 = HEAP32[i5 + 32 >> 2] | 0;
    if ((i2 | 0) != (i13 | 0)) do {
     HEAP8[i2 + 2 >> 0] = i3;
     HEAP8[i2 + 3 >> 0] = i3;
     i2 = HEAP32[i2 + 32 >> 2] | 0;
    } while ((i2 | 0) != (i13 | 0));
    HEAP8[i13 + 2 >> 0] = i3;
    i2 = (i14 - i12 | 0) / 40 | 0;
    HEAP32[i13 + 24 >> 2] = i2;
    HEAP32[i15 >> 2] = 0 - i2;
    i2 = 0;
    i3 = 0;
    i5 = i13;
   }
  } while ((i13 | 0) != (i16 | 0));
  i1 = i1 + 4 | 0;
 } while (i1 >>> 0 < i17 >>> 0);
 if (i21) i1 = i22; else {
  i25 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i26;
  return i25 | 0;
 }
 do {
  i2 = HEAPU16[i1 >> 1] | 0;
  if (!(i2 & 16)) if ((HEAP8[i1 + 2 >> 0] | 0) == 4) if ((HEAP8[i1 + 3 >> 0] | 0) == 4) {
   i3 = HEAP32[i1 + 24 >> 2] | 0;
   i4 = HEAP32[i1 + 28 >> 2] | 0;
   i24 = HEAP16[i1 + 12 >> 1] | 0;
   i5 = HEAP16[i1 + 14 >> 1] | 0;
   if (((HEAP16[i1 + (i3 * 40 | 0) + 12 >> 1] | 0) - i24 ^ i24 - (HEAP16[i1 + (i4 * 40 | 0) + 12 >> 1] | 0) | 0) > -1) if ((i5 - (HEAP16[i1 + (i4 * 40 | 0) + 14 >> 1] | 0) ^ (HEAP16[i1 + (i3 * 40 | 0) + 14 >> 1] | 0) - i5 | 0) > -1) {
    HEAP16[i1 >> 1] = i2 | 16;
    i24 = ((i3 - i4 | 0) * 40 | 0) / 40 | 0;
    HEAP32[i1 + (i4 * 40 | 0) + 24 >> 2] = i24;
    HEAP32[i1 + (i3 * 40 | 0) + 28 >> 2] = 0 - i24;
   }
  }
  i1 = i1 + 40 | 0;
 } while (i1 >>> 0 < i23 >>> 0);
 if (i21) i4 = i22; else {
  i25 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i26;
  return i25 | 0;
 }
 do {
  i1 = HEAP16[i4 >> 1] | 0;
  i2 = i1 & 65535;
  L87 : do if (!(i2 & 16)) {
   do if (!(i2 & 3)) {
    i2 = HEAP8[i4 + 3 >> 0] | 0;
    i3 = HEAP8[i4 + 2 >> 0] | 0;
    if (i2 << 24 >> 24 != i3 << 24 >> 24) if ((i3 << 24 >> 24 | 0) == (0 - (i2 << 24 >> 24) | 0)) break; else break L87;
    if (i2 << 24 >> 24 == 4) {
     i1 = HEAP32[i4 + 24 >> 2] | 0;
     i2 = HEAP32[i4 + 28 >> 2] | 0;
     i22 = HEAP16[i4 + 12 >> 1] | 0;
     i24 = HEAP16[i4 + 14 >> 1] | 0;
     if (!(_ft_corner_is_flat(i22 - (HEAP16[i4 + (i2 * 40 | 0) + 12 >> 1] | 0) | 0, i24 - (HEAP16[i4 + (i2 * 40 | 0) + 14 >> 1] | 0) | 0, (HEAP16[i4 + (i1 * 40 | 0) + 12 >> 1] | 0) - i22 | 0, (HEAP16[i4 + (i1 * 40 | 0) + 14 >> 1] | 0) - i24 | 0) | 0)) break L87;
     i24 = ((i1 - i2 | 0) * 40 | 0) / 40 | 0;
     HEAP32[i4 + (i2 * 40 | 0) + 24 >> 2] = i24;
     HEAP32[i4 + (i1 * 40 | 0) + 28 >> 2] = 0 - i24;
     i1 = HEAP16[i4 >> 1] | 0;
    }
   } while (0);
   HEAP16[i4 >> 1] = i1 | 16;
  } while (0);
  i4 = i4 + 40 | 0;
 } while (i4 >>> 0 < i23 >>> 0);
 i25 = HEAP32[i25 >> 2] | 0;
 STACKTOP = i26;
 return i25 | 0;
}

function _afm_parser_read_vals(i12, i13, i16) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i20 = i23 + 4 | 0;
 i17 = i23;
 i18 = HEAP32[i12 + 4 >> 2] | 0;
 if ((i16 + -1 | 0) >>> 0 >= 5) {
  i22 = 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 i21 = i18 + 12 | 0;
 i19 = i18 + 8 | 0;
 i14 = i12 + 12 | 0;
 i15 = i12 + 16 | 0;
 i1 = 0;
 L4 : while (1) {
  i7 = HEAP32[i13 + (i1 << 3) >> 2] | 0;
  i2 = HEAP32[i21 >> 2] | 0;
  i3 = (i2 | 0) > 0;
  if (!i7) {
   L8 : do if (!i3) {
    i3 = HEAP32[i18 >> 2] | 0;
    i4 = HEAP32[i19 >> 2] | 0;
    L10 : do if (i3 >>> 0 < i4 >>> 0) {
     L11 : while (1) {
      i11 = i3;
      i3 = i3 + 1 | 0;
      HEAP32[i18 >> 2] = i3;
      switch (HEAP8[i11 >> 0] | 0) {
      case 26:
       {
        i2 = 3;
        break L10;
       }
      case 10:
      case 13:
       {
        i22 = 8;
        break L11;
       }
      case 59:
       {
        i22 = 9;
        break L11;
       }
      case 9:
      case 32:
       break;
      default:
       break L8;
      }
      if (i3 >>> 0 >= i4 >>> 0) {
       i2 = 3;
       break L10;
      }
     }
     if ((i22 | 0) == 8) {
      i22 = 0;
      i2 = 2;
      break;
     } else if ((i22 | 0) == 9) {
      i22 = 0;
      i2 = 1;
      break;
     }
    } else i2 = 3; while (0);
    HEAP32[i21 >> 2] = i2;
   } while (0);
   if ((i2 | 0) > 1) break;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i4 + -1 | 0;
   i3 = HEAP32[i19 >> 2] | 0;
   i2 = i4;
   L20 : while (1) {
    if (i4 >>> 0 >= i3 >>> 0) {
     i3 = 3;
     break;
    }
    i5 = i4 + 1 | 0;
    HEAP32[i18 >> 2] = i5;
    i2 = i5;
    switch (HEAP8[i4 >> 0] | 0) {
    case 26:
     {
      i3 = 3;
      break L20;
     }
    case 10:
    case 13:
     {
      i22 = 15;
      break L20;
     }
    default:
     i4 = i5;
    }
   }
   if ((i22 | 0) == 15) {
    i22 = 0;
    i3 = 2;
   }
   HEAP32[i21 >> 2] = i3;
   HEAP32[i20 >> 2] = i6;
  } else {
   if (i3) break;
   i2 = HEAP32[i18 >> 2] | 0;
   i5 = HEAP32[i19 >> 2] | 0;
   if (i2 >>> 0 < i5 >>> 0) i6 = i2; else {
    i2 = 3;
    i22 = 24;
    break;
   }
   L28 : while (1) {
    i3 = i6 + 1 | 0;
    HEAP32[i18 >> 2] = i3;
    switch (HEAP8[i6 >> 0] | 0) {
    case 10:
    case 13:
     {
      i22 = 22;
      break L4;
     }
    case 59:
     {
      i22 = 23;
      break L4;
     }
    case 26:
     {
      i2 = 3;
      i22 = 24;
      break L4;
     }
    case 9:
    case 32:
     break;
    default:
     break L28;
    }
    if (i3 >>> 0 < i5 >>> 0) i6 = i3; else {
     i2 = 3;
     i22 = 24;
     break L4;
    }
   }
   i2 = i3;
   L32 : while (1) {
    if (i3 >>> 0 >= i5 >>> 0) {
     i22 = 29;
     break;
    }
    i4 = i3 + 1 | 0;
    HEAP32[i18 >> 2] = i4;
    i2 = i4;
    switch (HEAP8[i3 >> 0] | 0) {
    case 26:
     {
      i22 = 29;
      break L32;
     }
    case 9:
    case 32:
     break L32;
    case 10:
    case 13:
     {
      i22 = 27;
      break L32;
     }
    case 59:
     {
      i22 = 28;
      break L32;
     }
    default:
     i3 = i4;
    }
   }
   if ((i22 | 0) == 27) {
    i22 = 0;
    HEAP32[i21 >> 2] = 2;
   } else if ((i22 | 0) == 28) {
    i22 = 0;
    HEAP32[i21 >> 2] = 1;
   } else if ((i22 | 0) == 29) {
    i22 = 0;
    HEAP32[i21 >> 2] = 3;
   }
   HEAP32[i20 >> 2] = i6;
   if (!i6) {
    i22 = 71;
    break;
   }
  }
  i2 = i2 - i6 | 0;
  i4 = i2 + -1 | 0;
  switch (i7 | 0) {
  case 1:
  case 0:
   {
    i2 = _ft_mem_qalloc(HEAP32[i12 >> 2] | 0, i2, i17) | 0;
    i3 = i13 + (i1 << 3) + 4 | 0;
    HEAP32[i3 >> 2] = i2;
    if (!(HEAP32[i17 >> 2] | 0)) {
     _memcpy(i2 | 0, i6 | 0, i4 | 0) | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + i4 >> 0] = 0;
    }
    break;
   }
  case 2:
   {
    i11 = _PS_Conv_ToFixed(i20, i6 + i4 | 0, 0) | 0;
    HEAP32[i13 + (i1 << 3) + 4 >> 2] = i11;
    break;
   }
  case 3:
   {
    i11 = i6 + i4 | 0;
    L48 : do if ((i2 | 0) < 2) i2 = 0; else {
     i2 = HEAP8[i6 >> 0] | 0;
     switch (i2 << 24 >> 24) {
     case 43:
     case 45:
      {
       if ((i4 | 0) == 1) {
        i2 = 0;
        break L48;
       } else {
        i3 = i6 + 1 | 0;
        i7 = i2 << 24 >> 24 == 45 & 1;
       }
       break;
      }
     default:
      {
       i3 = i6;
       i7 = 0;
      }
     }
     L53 : do if (i3 >>> 0 < i11 >>> 0) {
      i5 = 0;
      i4 = 0;
      while (1) {
       i2 = HEAP8[i3 >> 0] | 0;
       switch (i2 << 24 >> 24) {
       case 0:
       case 12:
       case 9:
       case 10:
       case 13:
       case 32:
        {
         i2 = i5;
         i10 = i3;
         break L53;
        }
       default:
        {}
       }
       if (i2 << 24 >> 24 < 0) {
        i2 = i5;
        i10 = i3;
        break L53;
       }
       i10 = i2 & 127;
       i2 = HEAP8[284035 + i10 >> 0] | 0;
       if ((i10 + -48 | 0) >>> 0 >= 10) {
        i2 = i5;
        i10 = i3;
        break L53;
       }
       if ((i5 | 0) > 214748364) {
        i2 = i5;
        i4 = 1;
       } else {
        i10 = (i5 | 0) == 214748364 & i2 << 24 >> 24 > 7;
        i2 = i10 ? 214748364 : (i5 * 10 | 0) + (i2 << 24 >> 24) | 0;
        i4 = i10 ? 1 : i4;
       }
       i3 = i3 + 1 | 0;
       if (i3 >>> 0 < i11 >>> 0) i5 = i2; else {
        i10 = i3;
        break L53;
       }
      }
     } else {
      i2 = 0;
      i4 = 0;
      i10 = i3;
     } while (0);
     i2 = i4 << 24 >> 24 == 0 ? i2 : 2147483647;
     i2 = i7 << 24 >> 24 == 0 ? i2 : 0 - i2 | 0;
     i3 = i10;
     if ((i10 | 0) == (i6 | 0)) i2 = 0; else {
      if (i10 >>> 0 < i11 >>> 0) if ((HEAP8[i10 >> 0] | 0) == 35) {
       i3 = i10 + 1 | 0;
       if (i3 >>> 0 >= i11 >>> 0 | (i2 + -2 | 0) >>> 0 > 34) {
        i2 = 0;
        break;
       }
       i3 = HEAP8[i3 >> 0] | 0;
       switch (i3 << 24 >> 24) {
       case 43:
       case 45:
        {
         if ((i10 + 2 | 0) == (i11 | 0)) {
          i2 = 0;
          break L48;
         } else {
          i5 = 2;
          i9 = i3 << 24 >> 24 == 45 & 1;
         }
         break;
        }
       default:
        {
         i5 = 1;
         i9 = 0;
        }
       }
       i7 = 2147483647 / (i2 | 0) | 0;
       L71 : do if ((i10 + i5 | 0) >>> 0 < i11 >>> 0) {
        i8 = (2147483647 % (i2 | 0) | 0) << 24 >> 24;
        i4 = 0;
        i6 = 0;
        i3 = i5;
        while (1) {
         i5 = HEAP8[i10 + i3 >> 0] | 0;
         switch (i5 << 24 >> 24) {
         case 0:
         case 12:
         case 9:
         case 10:
         case 13:
         case 32:
          {
           i2 = i6;
           break L71;
          }
         default:
          {}
         }
         if (i5 << 24 >> 24 < 0) {
          i2 = i6;
          break L71;
         }
         i24 = HEAP8[284035 + (i5 & 127) >> 0] | 0;
         i5 = i24 << 24 >> 24;
         if (!(i24 << 24 >> 24 > -1 & (i5 | 0) < (i2 | 0))) {
          i2 = i6;
          break L71;
         }
         if ((i4 | 0) > (i7 | 0)) i5 = 1; else {
          i24 = (i4 | 0) == (i7 | 0) & (i5 | 0) > (i8 | 0);
          i4 = i5 + (Math_imul(i4, i2) | 0) | 0;
          i4 = i24 ? i7 : i4;
          i5 = i24 ? 1 : i6;
         }
         i3 = i3 + 1 | 0;
         if ((i10 + i3 | 0) >>> 0 < i11 >>> 0) i6 = i5; else {
          i2 = i5;
          break L71;
         }
        }
       } else {
        i4 = 0;
        i2 = 0;
        i3 = i5;
       } while (0);
       i2 = i2 << 24 >> 24 == 0 ? i4 : 2147483647;
       if ((i3 | 0) == 1) {
        i2 = 0;
        break;
       } else {
        i2 = i9 << 24 >> 24 == 0 ? i2 : 0 - i2 | 0;
        i3 = i10 + i3 | 0;
       }
      }
      HEAP32[i20 >> 2] = i3;
     }
    } while (0);
    HEAP32[i13 + (i1 << 3) + 4 >> 2] = i2;
    break;
   }
  case 4:
   {
    if ((i4 | 0) == 4) i2 = (_strncmp(i6, 348660, 4) | 0) == 0; else i2 = 0;
    HEAP8[i13 + (i1 << 3) + 4 >> 0] = i2 & 1;
    break;
   }
  case 5:
   {
    i2 = HEAP32[i14 >> 2] | 0;
    if (!i2) i2 = 0; else i2 = FUNCTION_TABLE_iiii[i2 & 127](i6, i4, HEAP32[i15 >> 2] | 0) | 0;
    HEAP32[i13 + (i1 << 3) + 4 >> 2] = i2;
    break;
   }
  default:
   {}
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i16 | 0)) {
   i22 = 71;
   break;
  }
 }
 if ((i22 | 0) == 22) {
  i2 = 2;
  i22 = 24;
 } else if ((i22 | 0) == 23) {
  i2 = 1;
  i22 = 24;
 } else if ((i22 | 0) == 71) {
  STACKTOP = i23;
  return i1 | 0;
 }
 if ((i22 | 0) == 24) HEAP32[i21 >> 2] = i2;
 HEAP32[i20 >> 2] = 0;
 i24 = i1;
 STACKTOP = i23;
 return i24 | 0;
}

function _processXmlDecl(i20, i1, i3, i8) {
 i20 = i20 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 1072 | 0;
 i15 = i21 + 24 | 0;
 i9 = i21 + 20 | 0;
 i18 = i21 + 16 | 0;
 i13 = i21 + 12 | 0;
 i7 = i21 + 8 | 0;
 i10 = i21 + 4 | 0;
 i12 = i21;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i12 >> 2] = -1;
 i14 = i20 + 236 | 0;
 i16 = i20 + 144 | 0;
 i17 = i20 + 288 | 0;
 i2 = (i1 | 0) != 0;
 if (!(FUNCTION_TABLE_iiiiiiiiiii[(HEAP8[i14 >> 0] << 24 >> 24 ? 2 : 1) & 3](i1, HEAP32[i16 >> 2] | 0, i3, i8, i17, i7, i10, i18, i13, i12) | 0)) {
  i20 = i2 ? 31 : 30;
  STACKTOP = i21;
  return i20 | 0;
 }
 if ((HEAP32[i12 >> 2] | 0) == 1 & (i2 ^ 1)) {
  HEAP8[(HEAP32[i20 + 356 >> 2] | 0) + 130 >> 0] = 1;
  i1 = i20 + 492 | 0;
  if ((HEAP32[i1 >> 2] | 0) == 1) HEAP32[i1 >> 2] = 0;
 }
 i11 = i20 + 140 | 0;
 if (!(HEAP32[i11 >> 2] | 0)) {
  i6 = i20 + 80 | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (!i1) {
   i3 = 0;
   i1 = 0;
  } else {
   i7 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i3;
   if (!(HEAP8[i7 + 72 >> 0] | 0)) {
    i1 = i20 + 292 | 0;
    i2 = i20 + 44 | 0;
    i3 = i7 + 60 | 0;
    i4 = i20 + 48 | 0;
    i5 = i20 + 4 | 0;
    do {
     HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
     FUNCTION_TABLE_viiiii[HEAP32[i3 >> 2] & 31](i7, i15, i8, i9, HEAP32[i4 >> 2] | 0);
     HEAP32[i1 >> 2] = HEAP32[i15 >> 2];
     i12 = HEAP32[i2 >> 2] | 0;
     FUNCTION_TABLE_viii[HEAP32[i6 >> 2] & 31](HEAP32[i5 >> 2] | 0, i12, (HEAP32[i9 >> 2] | 0) - i12 | 0);
     i12 = HEAP32[i15 >> 2] | 0;
     HEAP32[i17 >> 2] = i12;
    } while ((i12 | 0) != (i8 | 0));
   } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i20 + 4 >> 2] | 0, i3, i8 - i3 | 0);
   i3 = 0;
   i1 = 0;
  }
 } else {
  i1 = HEAP32[i18 >> 2] | 0;
  L19 : do if (!i1) i1 = 0; else {
   i5 = i20 + 440 | 0;
   i2 = HEAP32[i16 >> 2] | 0;
   i3 = i1 + (FUNCTION_TABLE_iii[HEAP32[i2 + 32 >> 2] & 255](i2, i1) | 0) | 0;
   HEAP32[i15 >> 2] = i1;
   i6 = i20 + 452 | 0;
   if (!(HEAP32[i6 >> 2] | 0)) {
    if ((_poolGrow(i5) | 0) << 24 >> 24) i19 = 10;
   } else i19 = 10;
   L23 : do if ((i19 | 0) == 10) {
    i1 = i2 + 60 | 0;
    i4 = i20 + 448 | 0;
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i1 >> 2] & 31](i2, i15, i3, i6, HEAP32[i4 >> 2] | 0);
     if ((HEAP32[i15 >> 2] | 0) == (i3 | 0)) break;
     if (!((_poolGrow(i5) | 0) << 24 >> 24)) break L23;
    }
    i2 = i20 + 456 | 0;
    if (!(HEAP32[i2 >> 2] | 0)) {
     i20 = 1;
     STACKTOP = i21;
     return i20 | 0;
    }
    i1 = HEAP32[i6 >> 2] | 0;
    do if ((i1 | 0) == (HEAP32[i4 >> 2] | 0)) if (!((_poolGrow(i5) | 0) << 24 >> 24)) {
     i20 = 1;
     STACKTOP = i21;
     return i20 | 0;
    } else {
     i1 = HEAP32[i6 >> 2] | 0;
     break;
    } while (0);
    HEAP32[i6 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i20 = 1;
     STACKTOP = i21;
     return i20 | 0;
    } else {
     HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
     break L19;
    }
   } while (0);
   i20 = 1;
   STACKTOP = i21;
   return i20 | 0;
  } while (0);
  i2 = HEAP32[i7 >> 2] | 0;
  L44 : do if (!i2) i2 = 0; else {
   i7 = i20 + 440 | 0;
   i4 = HEAP32[i16 >> 2] | 0;
   i3 = (HEAP32[i10 >> 2] | 0) + (0 - (HEAP32[i4 + 68 >> 2] | 0)) | 0;
   HEAP32[i15 >> 2] = i2;
   i6 = i20 + 452 | 0;
   if (!(HEAP32[i6 >> 2] | 0)) {
    if ((_poolGrow(i7) | 0) << 24 >> 24) i19 = 23;
   } else i19 = 23;
   L48 : do if ((i19 | 0) == 23) {
    i2 = i4 + 60 | 0;
    i5 = i20 + 448 | 0;
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i2 >> 2] & 31](i4, i15, i3, i6, HEAP32[i5 >> 2] | 0);
     if ((HEAP32[i15 >> 2] | 0) == (i3 | 0)) break;
     if (!((_poolGrow(i7) | 0) << 24 >> 24)) break L48;
    }
    i3 = i20 + 456 | 0;
    if (!(HEAP32[i3 >> 2] | 0)) {
     i20 = 1;
     STACKTOP = i21;
     return i20 | 0;
    }
    i2 = HEAP32[i6 >> 2] | 0;
    do if ((i2 | 0) == (HEAP32[i5 >> 2] | 0)) if (!((_poolGrow(i7) | 0) << 24 >> 24)) {
     i20 = 1;
     STACKTOP = i21;
     return i20 | 0;
    } else {
     i2 = HEAP32[i6 >> 2] | 0;
     break;
    } while (0);
    HEAP32[i6 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = 0;
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) i1 = 1; else break L44;
    STACKTOP = i21;
    return i1 | 0;
   } while (0);
   i20 = 1;
   STACKTOP = i21;
   return i20 | 0;
  } while (0);
  FUNCTION_TABLE_viiii[HEAP32[i11 >> 2] & 31](HEAP32[i20 + 4 >> 2] | 0, i2, i1, HEAP32[i12 >> 2] | 0);
  i3 = i2;
 }
 do if (!(HEAP32[i20 + 232 >> 2] | 0)) {
  i2 = HEAP32[i13 >> 2] | 0;
  if (i2 | 0) {
   if ((HEAP32[i2 + 68 >> 2] | 0) == (HEAP32[(HEAP32[i16 >> 2] | 0) + 68 >> 2] | 0)) {
    HEAP32[i16 >> 2] = i2;
    break;
   }
   HEAP32[i17 >> 2] = HEAP32[i18 >> 2];
   i20 = 19;
   STACKTOP = i21;
   return i20 | 0;
  }
  i2 = HEAP32[i18 >> 2] | 0;
  if (i2 | 0) {
   L78 : do if (!i1) {
    i6 = i20 + 440 | 0;
    i3 = HEAP32[i16 >> 2] | 0;
    i4 = i2 + (FUNCTION_TABLE_iii[HEAP32[i3 + 32 >> 2] & 255](i3, i2) | 0) | 0;
    HEAP32[i15 >> 2] = i2;
    i7 = i20 + 452 | 0;
    if (!(HEAP32[i7 >> 2] | 0)) {
     if ((_poolGrow(i6) | 0) << 24 >> 24) i19 = 48;
    } else i19 = 48;
    L82 : do if ((i19 | 0) == 48) {
     i1 = i3 + 60 | 0;
     i5 = i20 + 448 | 0;
     while (1) {
      FUNCTION_TABLE_viiiii[HEAP32[i1 >> 2] & 31](i3, i15, i4, i7, HEAP32[i5 >> 2] | 0);
      if ((HEAP32[i15 >> 2] | 0) == (i4 | 0)) break;
      if (!((_poolGrow(i6) | 0) << 24 >> 24)) break L82;
     }
     i2 = i20 + 456 | 0;
     if (!(HEAP32[i2 >> 2] | 0)) {
      i20 = 1;
      STACKTOP = i21;
      return i20 | 0;
     }
     i1 = HEAP32[i7 >> 2] | 0;
     do if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) if (!((_poolGrow(i6) | 0) << 24 >> 24)) {
      i20 = 1;
      STACKTOP = i21;
      return i20 | 0;
     } else {
      i1 = HEAP32[i7 >> 2] | 0;
      break;
     } while (0);
     HEAP32[i7 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) i1 = 1; else break L78;
     STACKTOP = i21;
     return i1 | 0;
    } while (0);
    i20 = 1;
    STACKTOP = i21;
    return i20 | 0;
   } while (0);
   i2 = HEAP32[i20 + 124 >> 2] | 0;
   L101 : do if (!i2) i1 = 18; else {
    _memset(i15 | 0, -1, 1024) | 0;
    i3 = i15 + 1028 | 0;
    HEAP32[i3 >> 2] = 0;
    i5 = i15 + 1024 | 0;
    HEAP32[i5 >> 2] = 0;
    i4 = i15 + 1032 | 0;
    HEAP32[i4 >> 2] = 0;
    do if (FUNCTION_TABLE_iiii[i2 & 127](HEAP32[i20 + 248 >> 2] | 0, i1, i15) | 0) {
     i13 = HEAP32[i20 + 12 >> 2] | 0;
     i1 = _XmlSizeOfUnknownEncoding() | 0;
     i1 = FUNCTION_TABLE_ii[i13 & 63](i1) | 0;
     HEAP32[i20 + 240 >> 2] = i1;
     if (!i1) {
      i1 = HEAP32[i4 >> 2] | 0;
      if (!i1) i1 = 1; else {
       FUNCTION_TABLE_vi[i1 & 127](HEAP32[i5 >> 2] | 0);
       i1 = 1;
      }
     } else {
      i1 = FUNCTION_TABLE_iiiii[(HEAP8[i14 >> 0] << 24 >> 24 ? 71 : 70) & 127](i1, i15, HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
      if (!i1) break;
      HEAP32[i20 + 244 >> 2] = HEAP32[i5 >> 2];
      HEAP32[i20 + 252 >> 2] = HEAP32[i4 >> 2];
      HEAP32[i16 >> 2] = i1;
      i1 = 0;
     }
     break L101;
    } while (0);
    i1 = HEAP32[i4 >> 2] | 0;
    if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](HEAP32[i5 >> 2] | 0);
    i1 = 18;
   } while (0);
   i5 = i20 + 444 | 0;
   i3 = HEAP32[i5 >> 2] | 0;
   i6 = i20 + 440 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   if (!i3) i19 = 71; else if (i2 | 0) while (1) {
    i4 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = i3;
    if (!i4) {
     i19 = 71;
     break;
    } else {
     i3 = i2;
     i2 = i4;
    }
   }
   if ((i19 | 0) == 71) HEAP32[i5 >> 2] = i2;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i20 + 456 >> 2] = 0;
   HEAP32[i20 + 452 >> 2] = 0;
   HEAP32[i20 + 448 >> 2] = 0;
   if ((i1 | 0) != 18) {
    i20 = i1;
    STACKTOP = i21;
    return i20 | 0;
   }
   HEAP32[i17 >> 2] = HEAP32[i18 >> 2];
   i20 = 18;
   STACKTOP = i21;
   return i20 | 0;
  }
 } while (0);
 if (!((i1 | 0) != 0 | (i3 | 0) != 0)) {
  i20 = 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 i4 = i20 + 444 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 i5 = i20 + 440 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (!i2) i19 = 78; else if (i1 | 0) while (1) {
  i3 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i2;
  if (!i3) {
   i19 = 78;
   break;
  } else {
   i2 = i1;
   i1 = i3;
  }
 }
 if ((i19 | 0) == 78) HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i20 + 456 >> 2] = 0;
 HEAP32[i20 + 452 >> 2] = 0;
 HEAP32[i20 + 448 >> 2] = 0;
 i20 = 0;
 STACKTOP = i21;
 return i20 | 0;
}

function _huft_build(i22, i23, i29, i30, i31, i32, i19, i33, i34, i6) {
 i22 = i22 | 0;
 i23 = i23 | 0;
 i29 = i29 | 0;
 i30 = i30 | 0;
 i31 = i31 | 0;
 i32 = i32 | 0;
 i19 = i19 | 0;
 i33 = i33 | 0;
 i34 = i34 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i35 = 0;
 i35 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i26 = i35 + 128 | 0;
 i27 = i35 + 64 | 0;
 i28 = i35;
 i21 = i26 + 4 | 0;
 i5 = i26 + 8 | 0;
 i7 = i26 + 12 | 0;
 i8 = i26 + 16 | 0;
 i9 = i26 + 20 | 0;
 i10 = i26 + 24 | 0;
 i11 = i26 + 28 | 0;
 i12 = i26 + 32 | 0;
 i13 = i26 + 36 | 0;
 i14 = i26 + 40 | 0;
 i15 = i26 + 44 | 0;
 i16 = i26 + 48 | 0;
 i17 = i26 + 52 | 0;
 i18 = i26 + 56 | 0;
 i3 = i26 + 60 | 0;
 i1 = i26;
 i2 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i1 = i22;
 i2 = i23;
 while (1) {
  i25 = i26 + (HEAP32[i1 >> 2] << 2) | 0;
  HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
  i2 = i2 + -1 | 0;
  if (!i2) break; else i1 = i1 + 4 | 0;
 }
 if ((HEAP32[i26 >> 2] | 0) == (i23 | 0)) {
  HEAP32[i32 >> 2] = 0;
  HEAP32[i19 >> 2] = 0;
  i34 = 0;
  STACKTOP = i35;
  return i34 | 0;
 }
 i1 = HEAP32[i19 >> 2] | 0;
 i4 = (HEAP32[i21 >> 2] | 0) == 0;
 do if (i4) if (!(HEAP32[i5 >> 2] | 0)) if (!(HEAP32[i7 >> 2] | 0)) if (!(HEAP32[i8 >> 2] | 0)) if (!(HEAP32[i9 >> 2] | 0)) if (!(HEAP32[i10 >> 2] | 0)) if (!(HEAP32[i11 >> 2] | 0)) if (!(HEAP32[i12 >> 2] | 0)) if (!(HEAP32[i13 >> 2] | 0)) if (!(HEAP32[i14 >> 2] | 0)) if (!(HEAP32[i15 >> 2] | 0)) if (!(HEAP32[i16 >> 2] | 0)) if (!(HEAP32[i17 >> 2] | 0)) if (!(HEAP32[i18 >> 2] | 0)) if (!(HEAP32[i3 >> 2] | 0)) {
  i1 = i1 >>> 0 > 16 ? i1 : 16;
  i2 = 16;
  i20 = 9;
  break;
 } else {
  i1 = i1 >>> 0 > 15 ? i1 : 15;
  i2 = 15;
  i3 = 15;
  i20 = 10;
  break;
 } else {
  i2 = 14;
  i20 = 7;
 } else {
  i2 = 13;
  i20 = 7;
 } else {
  i2 = 12;
  i20 = 7;
 } else {
  i2 = 11;
  i20 = 7;
 } else {
  i2 = 10;
  i20 = 7;
 } else {
  i2 = 9;
  i20 = 7;
 } else {
  i2 = 8;
  i20 = 7;
 } else {
  i2 = 7;
  i20 = 7;
 } else {
  i2 = 6;
  i20 = 7;
 } else {
  i2 = 5;
  i20 = 7;
 } else {
  i2 = 4;
  i20 = 7;
 } else {
  i2 = 3;
  i20 = 7;
 } else {
  i2 = 2;
  i20 = 7;
 } else {
  i2 = 1;
  i20 = 7;
 } while (0);
 if ((i20 | 0) == 7) {
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  if (!(HEAP32[i3 >> 2] | 0)) i20 = 9; else {
   i4 = i1 >>> 0 < 15 ? i1 : 15;
   HEAP32[i19 >> 2] = i4;
   i1 = 1 << i2;
   i5 = 15;
   i20 = 12;
  }
 }
 do if ((i20 | 0) == 9) {
  if (!(HEAP32[i18 >> 2] | 0)) if (!(HEAP32[i17 >> 2] | 0)) if (!(HEAP32[i16 >> 2] | 0)) if (!(HEAP32[i15 >> 2] | 0)) if (!(HEAP32[i14 >> 2] | 0)) if (!(HEAP32[i13 >> 2] | 0)) if (!(HEAP32[i12 >> 2] | 0)) if (!(HEAP32[i11 >> 2] | 0)) if (!(HEAP32[i10 >> 2] | 0)) if (!(HEAP32[i9 >> 2] | 0)) if (!(HEAP32[i8 >> 2] | 0)) if (!(HEAP32[i7 >> 2] | 0)) if (!(HEAP32[i5 >> 2] | 0)) {
   i3 = (i4 ^ 1) & 1;
   i20 = 10;
   break;
  } else i5 = 2; else i5 = 3; else i5 = 4; else i5 = 5; else i5 = 6; else i5 = 7; else i5 = 8; else i5 = 9; else i5 = 10; else i5 = 11; else i5 = 12; else i5 = 13; else i5 = 14;
  i3 = i1 >>> 0 > i5 >>> 0 ? i5 : i1;
  HEAP32[i19 >> 2] = i3;
  i1 = 1 << i2;
  if (i2 >>> 0 < i5 >>> 0) {
   i4 = i3;
   i20 = 12;
  } else {
   i8 = i2;
   i25 = i3;
  }
 } while (0);
 L46 : do if ((i20 | 0) == 10) {
  i25 = i1 >>> 0 > i3 >>> 0 ? i3 : i1;
  HEAP32[i19 >> 2] = i25;
  i1 = 1 << i2;
  i8 = i2;
  i5 = i3;
 } else if ((i20 | 0) == 12) {
  i3 = i2;
  while (1) {
   i1 = i1 - (HEAP32[i26 + (i3 << 2) >> 2] | 0) | 0;
   if ((i1 | 0) < 0) {
    i1 = -3;
    break;
   }
   i3 = i3 + 1 | 0;
   i1 = i1 << 1;
   if (i3 >>> 0 >= i5 >>> 0) {
    i8 = i2;
    i25 = i4;
    break L46;
   }
  }
  STACKTOP = i35;
  return i1 | 0;
 } while (0);
 i2 = i26 + (i5 << 2) | 0;
 i24 = i1 - (HEAP32[i2 >> 2] | 0) | 0;
 if ((i24 | 0) < 0) {
  i34 = -3;
  STACKTOP = i35;
  return i34 | 0;
 }
 HEAP32[i2 >> 2] = i1;
 HEAP32[i28 + 4 >> 2] = 0;
 i1 = i5 + -1 | 0;
 if (!i1) {
  i1 = i22;
  i2 = 0;
 } else {
  i4 = i28 + 8 | 0;
  i2 = i21;
  i3 = 0;
  while (1) {
   i3 = (HEAP32[i2 >> 2] | 0) + i3 | 0;
   HEAP32[i4 >> 2] = i3;
   i1 = i1 + -1 | 0;
   if (!i1) {
    i1 = i22;
    i2 = 0;
    break;
   } else {
    i4 = i4 + 4 | 0;
    i2 = i2 + 4 | 0;
   }
  }
 }
 while (1) {
  i3 = HEAP32[i1 >> 2] | 0;
  if (i3 | 0) {
   i21 = i28 + (i3 << 2) | 0;
   i22 = HEAP32[i21 >> 2] | 0;
   HEAP32[i21 >> 2] = i22 + 1;
   HEAP32[i6 + (i22 << 2) >> 2] = i2;
  }
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 >= i23 >>> 0) break; else i1 = i1 + 4 | 0;
 }
 i1 = HEAP32[i28 + (i5 << 2) >> 2] | 0;
 HEAP32[i28 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 L67 : do if (i8 >>> 0 <= i5 >>> 0) {
  i19 = i6 + (i1 << 2) | 0;
  i20 = i25 & 255;
  i2 = 0 - i25 | 0;
  i7 = 0;
  i18 = i8;
  i1 = -1;
  i9 = 0;
  i4 = 0;
  i3 = 0;
  L69 : while (1) {
   i16 = i26 + (i18 << 2) | 0;
   i8 = HEAP32[i16 >> 2] | 0;
   if (i8) {
    i17 = 1 << i18 + -1;
    i15 = i6;
    while (1) {
     i6 = i2 + i25 | 0;
     L75 : do if ((i18 | 0) > (i6 | 0)) {
      i13 = i3;
      while (1) {
       i11 = i2;
       i2 = i6;
       while (1) {
        i12 = i1 + 1 | 0;
        i10 = i5 - i2 | 0;
        i10 = i10 >>> 0 > i25 >>> 0 ? i25 : i10;
        i3 = i18 - i2 | 0;
        i6 = 1 << i3;
        L80 : do if (i6 >>> 0 > i8 >>> 0 & i3 >>> 0 < i10 >>> 0) {
         i3 = i3 + 1 | 0;
         if (i3 >>> 0 < i10 >>> 0) {
          i6 = i6 - i8 | 0;
          i9 = i16;
          while (1) {
           i7 = i6 << 1;
           i9 = i9 + 4 | 0;
           i6 = HEAP32[i9 >> 2] | 0;
           if (i7 >>> 0 <= i6 >>> 0) {
            i7 = i3;
            break L80;
           }
           i3 = i3 + 1 | 0;
           if (i3 >>> 0 >= i10 >>> 0) {
            i7 = i3;
            break;
           } else i6 = i7 - i6 | 0;
          }
         } else i7 = i3;
        } else i7 = i3; while (0);
        i9 = 1 << i7;
        i3 = HEAP32[i34 >> 2] | 0;
        i6 = i3 + i9 | 0;
        if (i6 >>> 0 > 1440) {
         i1 = -3;
         break L69;
        }
        i10 = i33 + (i3 << 3) | 0;
        HEAP32[i27 + (i12 << 2) >> 2] = i10;
        HEAP32[i34 >> 2] = i6;
        if (i12 | 0) break;
        HEAP32[i32 >> 2] = i10;
        i3 = i2 + i25 | 0;
        if ((i18 | 0) > (i3 | 0)) {
         i11 = i2;
         i1 = 0;
         i2 = i3;
        } else {
         i14 = i10;
         i1 = 0;
         i3 = i13;
         break L75;
        }
       }
       HEAP32[i28 + (i12 << 2) >> 2] = i4;
       i6 = i4 >>> i11;
       i23 = HEAP32[i27 + (i1 << 2) >> 2] | 0;
       i3 = (i10 - i23 >> 3) - i6 | 0;
       i22 = i23 + (i6 << 3) | 0;
       HEAP8[i22 >> 0] = i7;
       HEAP8[i22 + 1 >> 0] = i20;
       HEAP32[i23 + (i6 << 3) + 4 >> 2] = i3;
       i6 = i2 + i25 | 0;
       if ((i18 | 0) <= (i6 | 0)) {
        i14 = i10;
        i1 = i12;
        break;
       } else {
        i1 = i12;
        i13 = i3;
       }
      }
     } else i14 = i7; while (0);
     i8 = i8 + -1 | 0;
     i11 = i18 - i2 | 0;
     i12 = i11 & 255;
     if (i15 >>> 0 < i19 >>> 0) {
      i3 = HEAP32[i15 >> 2] | 0;
      if (i3 >>> 0 < i29 >>> 0) {
       i7 = i15;
       i3 = i3 >>> 0 < 256 ? 0 : 96;
      } else {
       i3 = i3 - i29 | 0;
       i7 = i30 + (i3 << 2) | 0;
       i3 = (HEAP32[i31 + (i3 << 2) >> 2] | 0) + 80 | 0;
      }
      i6 = i15 + 4 | 0;
      i10 = i3 & 255;
      i13 = HEAP32[i7 >> 2] | 0;
     } else {
      i6 = i15;
      i10 = -64;
      i13 = i3;
     }
     i7 = 1 << i11;
     i3 = i4 >>> i2;
     if (i3 >>> 0 < i9 >>> 0) {
      do {
       i23 = i14 + (i3 << 3) | 0;
       HEAP8[i23 >> 0] = i10;
       HEAP8[i23 + 1 >> 0] = i12;
       HEAP32[i14 + (i3 << 3) + 4 >> 2] = i13;
       i3 = i3 + i7 | 0;
      } while (i3 >>> 0 < i9 >>> 0);
      i3 = i17;
     } else i3 = i17;
     while (1) {
      i23 = i4;
      i4 = i3 ^ i4;
      if (!(i3 & i23)) break; else i3 = i3 >>> 1;
     }
     if (((1 << i2) + -1 & i4 | 0) != (HEAP32[i28 + (i1 << 2) >> 2] | 0)) do {
      i1 = i1 + -1 | 0;
      i2 = i2 - i25 | 0;
     } while (((1 << i2) + -1 & i4 | 0) != (HEAP32[i28 + (i1 << 2) >> 2] | 0));
     if (!i8) {
      i7 = i14;
      i3 = i13;
      break;
     } else {
      i7 = i14;
      i15 = i6;
      i3 = i13;
     }
    }
   }
   if ((i18 | 0) < (i5 | 0)) i18 = i18 + 1 | 0; else break L67;
  }
  STACKTOP = i35;
  return i1 | 0;
 } while (0);
 i34 = (i5 | 0) != 1 & (i24 | 0) != 0 ? -5 : 0;
 STACKTOP = i35;
 return i34 | 0;
}

function _FcCharSetOperate(i11, i9, i24, i12, i10) {
 i11 = i11 | 0;
 i9 = i9 | 0;
 i24 = i24 | 0;
 i12 = i12 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i25 = i27;
 if (!((i11 | 0) != 0 & (i9 | 0) != 0)) {
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 i1 = _malloc(16) | 0;
 if (!i1) {
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 HEAP32[i1 >> 2] = 1;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 i21 = i11;
 i22 = i11 + 12 | 0;
 i20 = (HEAP32[i22 >> 2] | 0) + i21 | 0;
 i5 = i20;
 i23 = i11 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 if (!i20) {
  i2 = -1;
  i26 = 8;
 } else {
  i2 = i4;
  do {
   if ((i2 | 0) < 1) {
    i26 = 6;
    break;
   }
   i2 = i2 + -1 >> 1;
  } while ((HEAP16[i5 + (i2 << 1) >> 1] | 0) != 0);
  if ((i26 | 0) == 6) i2 = ~i2;
  if ((i2 | 0) < 0) i26 = 8; else {
   i3 = 0;
   i26 = 10;
  }
 }
 if ((i26 | 0) == 8) {
  i3 = ~i2;
  if ((i4 | 0) == (i3 | 0)) {
   i8 = 0;
   i3 = -1;
   i2 = 0;
  } else {
   i2 = i3;
   i3 = HEAPU16[i5 + (i3 << 1) >> 1] << 8;
   i26 = 10;
  }
 }
 if ((i26 | 0) == 10) {
  i8 = (HEAP32[i11 + 8 >> 2] | 0) + i21 | 0;
  i8 = i8 + (HEAP32[i8 + (i2 << 2) >> 2] | 0) | 0;
 }
 i18 = i9;
 i19 = i9 + 12 | 0;
 i17 = (HEAP32[i19 >> 2] | 0) + i18 | 0;
 i7 = i17;
 i20 = i9 + 4 | 0;
 i6 = HEAP32[i20 >> 2] | 0;
 if (!i17) {
  i4 = -1;
  i26 = 16;
 } else {
  i4 = i6;
  do {
   if ((i4 | 0) < 1) {
    i26 = 14;
    break;
   }
   i4 = i4 + -1 >> 1;
  } while ((HEAP16[i7 + (i4 << 1) >> 1] | 0) != 0);
  if ((i26 | 0) == 14) i4 = ~i4;
  if ((i4 | 0) < 0) i26 = 16; else {
   i5 = 0;
   i26 = 19;
  }
 }
 do if ((i26 | 0) == 16) {
  i5 = ~i4;
  if ((i6 | 0) == (i5 | 0)) {
   i17 = i9 + 8 | 0;
   i7 = 0;
   i5 = -1;
   i4 = 0;
   break;
  } else {
   i4 = i5;
   i5 = HEAPU16[i7 + (i5 << 1) >> 1] << 8;
   i26 = 19;
   break;
  }
 } while (0);
 if ((i26 | 0) == 19) {
  i17 = i9 + 8 | 0;
  i7 = (HEAP32[i17 >> 2] | 0) + i18 | 0;
  i7 = i7 + (HEAP32[i7 + (i4 << 2) >> 2] | 0) | 0;
 }
 i15 = (i10 | 0) == 0;
 i16 = (i12 | 0) == 0;
 i14 = i11 + 8 | 0;
 i13 = (i12 | 0) != 0;
 while (1) {
  if (!i8) {
   if (i15 | (i7 | 0) == 0) {
    i26 = 70;
    break;
   }
  } else if (!(i13 | (i7 | 0) != 0)) {
   i26 = 70;
   break;
  }
  if (i3 >>> 0 < i5 >>> 0) {
   if (!i16) {
    i3 = _FcCharSetFindLeafCreate(i1, i3) | 0;
    if (!i3) break;
    HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i3 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
    HEAP32[i3 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
    HEAP32[i3 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
    HEAP32[i3 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
    HEAP32[i3 + 20 >> 2] = HEAP32[i8 + 20 >> 2];
    HEAP32[i3 + 24 >> 2] = HEAP32[i8 + 24 >> 2];
    HEAP32[i3 + 28 >> 2] = HEAP32[i8 + 28 >> 2];
    i6 = i2 + 1 | 0;
    if ((i6 | 0) >= (HEAP32[i23 >> 2] | 0)) {
     i9 = i2;
     i10 = i4;
     i11 = i5;
     i12 = i7;
     i8 = 0;
     i3 = -1;
     i2 = i9;
     i4 = i10;
     i5 = i11;
     i7 = i12;
     continue;
    }
    i8 = (HEAP32[i14 >> 2] | 0) + i21 | 0;
    i10 = i4;
    i11 = i5;
    i12 = i7;
    i8 = i8 + (HEAP32[i8 + (i6 << 2) >> 2] | 0) | 0;
    i3 = HEAPU16[(HEAP32[i22 >> 2] | 0) + i21 + (i6 << 1) >> 1] << 8;
    i2 = i6;
    i4 = i10;
    i5 = i11;
    i7 = i12;
    continue;
   }
   i10 = i5 >>> 8 & 65535;
   i9 = (HEAP32[i22 >> 2] | 0) + i21 | 0;
   i12 = i9;
   i11 = HEAP32[i23 >> 2] | 0;
   if (!i9) {
    i3 = -1;
    i26 = 39;
   } else {
    i6 = i11 + -1 | 0;
    i8 = 0;
    while (1) {
     if ((i8 | 0) > (i6 | 0)) {
      i26 = 33;
      break;
     }
     i3 = i6 + i8 >> 1;
     i28 = HEAP16[i12 + (i3 << 1) >> 1] | 0;
     i9 = (i28 & 65535) < (i10 & 65535);
     if (i28 << 16 >> 16 == i10 << 16 >> 16) break; else {
      i6 = i9 ? i6 : i3 + -1 | 0;
      i8 = i9 ? i3 + 1 | 0 : i8;
     }
    }
    if ((i26 | 0) == 33) {
     i26 = 0;
     if ((i6 | 0) < 0) i26 = 36; else if ((i6 | 0) < (i11 | 0)) if ((HEAPU16[i12 + (i6 << 1) >> 1] | 0) < (i10 & 65535)) i26 = 36; else i3 = i6; else i3 = i6;
     if ((i26 | 0) == 36) {
      i26 = 0;
      i3 = i6 + 1 | 0;
     }
     i3 = ~i3;
    }
    if ((i3 | 0) < 0) i26 = 39; else {
     i2 = i3;
     i3 = i5;
    }
   }
   if ((i26 | 0) == 39) {
    i26 = 0;
    i3 = ~i3;
    if ((i11 | 0) == (i3 | 0)) {
     i10 = i2;
     i11 = i4;
     i12 = i5;
     i28 = i7;
     i8 = 0;
     i3 = -1;
     i2 = i10;
     i4 = i11;
     i5 = i12;
     i7 = i28;
     continue;
    }
    i2 = i3;
    i3 = HEAPU16[i12 + (i3 << 1) >> 1] << 8;
   }
   i8 = (HEAP32[i14 >> 2] | 0) + i21 | 0;
   i11 = i4;
   i12 = i5;
   i28 = i7;
   i8 = i8 + (HEAP32[i8 + (i2 << 2) >> 2] | 0) | 0;
   i4 = i11;
   i5 = i12;
   i7 = i28;
   continue;
  }
  if (i5 >>> 0 >= i3 >>> 0) {
   if (FUNCTION_TABLE_iiii[i24 & 127](i25, i8, i7) | 0) {
    i3 = _FcCharSetFindLeafCreate(i1, i3) | 0;
    if (!i3) {
     i26 = 68;
     break;
    };
    HEAP32[i3 >> 2] = HEAP32[i25 >> 2];
    HEAP32[i3 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
    HEAP32[i3 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
    HEAP32[i3 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
    HEAP32[i3 + 16 >> 2] = HEAP32[i25 + 16 >> 2];
    HEAP32[i3 + 20 >> 2] = HEAP32[i25 + 20 >> 2];
    HEAP32[i3 + 24 >> 2] = HEAP32[i25 + 24 >> 2];
    HEAP32[i3 + 28 >> 2] = HEAP32[i25 + 28 >> 2];
   }
   i5 = i2 + 1 | 0;
   if ((i5 | 0) < (HEAP32[i23 >> 2] | 0)) {
    i8 = (HEAP32[i14 >> 2] | 0) + i21 | 0;
    i8 = i8 + (HEAP32[i8 + (i5 << 2) >> 2] | 0) | 0;
    i3 = HEAPU16[(HEAP32[i22 >> 2] | 0) + i21 + (i5 << 1) >> 1] << 8;
    i2 = i5;
   } else {
    i8 = 0;
    i3 = -1;
   }
   i6 = i4 + 1 | 0;
   if ((i6 | 0) < (HEAP32[i20 >> 2] | 0)) {
    i7 = (HEAP32[i17 >> 2] | 0) + i18 | 0;
    i7 = i7 + (HEAP32[i7 + (i6 << 2) >> 2] | 0) | 0;
    i5 = HEAPU16[(HEAP32[i19 >> 2] | 0) + i18 + (i6 << 1) >> 1] << 8;
    i4 = i6;
   } else {
    i7 = 0;
    i5 = -1;
   }
   continue;
  }
  if (!i15) {
   i5 = _FcCharSetFindLeafCreate(i1, i5) | 0;
   if (!i5) break;
   HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i5 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   HEAP32[i5 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
   HEAP32[i5 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
   HEAP32[i5 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
   HEAP32[i5 + 28 >> 2] = HEAP32[i7 + 28 >> 2];
   i6 = i4 + 1 | 0;
   if ((i6 | 0) >= (HEAP32[i20 >> 2] | 0)) {
    i10 = i2;
    i11 = i4;
    i12 = i3;
    i28 = i8;
    i7 = 0;
    i5 = -1;
    i2 = i10;
    i4 = i11;
    i3 = i12;
    i8 = i28;
    continue;
   }
   i7 = (HEAP32[i17 >> 2] | 0) + i18 | 0;
   i11 = i2;
   i12 = i3;
   i28 = i8;
   i7 = i7 + (HEAP32[i7 + (i6 << 2) >> 2] | 0) | 0;
   i5 = HEAPU16[(HEAP32[i19 >> 2] | 0) + i18 + (i6 << 1) >> 1] << 8;
   i4 = i6;
   i2 = i11;
   i3 = i12;
   i8 = i28;
   continue;
  }
  i9 = i3 >>> 8 & 65535;
  i28 = (HEAP32[i19 >> 2] | 0) + i18 | 0;
  i12 = i28;
  i11 = HEAP32[i20 >> 2] | 0;
  if (!i28) {
   i5 = -1;
   i26 = 57;
  } else {
   i6 = i11 + -1 | 0;
   i7 = 0;
   while (1) {
    if ((i7 | 0) > (i6 | 0)) {
     i26 = 51;
     break;
    }
    i5 = i6 + i7 >> 1;
    i28 = HEAP16[i12 + (i5 << 1) >> 1] | 0;
    i10 = (i28 & 65535) < (i9 & 65535);
    if (i28 << 16 >> 16 == i9 << 16 >> 16) break; else {
     i6 = i10 ? i6 : i5 + -1 | 0;
     i7 = i10 ? i5 + 1 | 0 : i7;
    }
   }
   if ((i26 | 0) == 51) {
    i26 = 0;
    if ((i6 | 0) < 0) i26 = 54; else if ((i6 | 0) < (i11 | 0)) if ((HEAPU16[i12 + (i6 << 1) >> 1] | 0) < (i9 & 65535)) i26 = 54; else i5 = i6; else i5 = i6;
    if ((i26 | 0) == 54) {
     i26 = 0;
     i5 = i6 + 1 | 0;
    }
    i5 = ~i5;
   }
   if ((i5 | 0) < 0) i26 = 57; else {
    i4 = i5;
    i5 = i3;
   }
  }
  if ((i26 | 0) == 57) {
   i26 = 0;
   i5 = ~i5;
   if ((i11 | 0) == (i5 | 0)) {
    i10 = i2;
    i11 = i4;
    i12 = i3;
    i28 = i8;
    i7 = 0;
    i5 = -1;
    i2 = i10;
    i4 = i11;
    i3 = i12;
    i8 = i28;
    continue;
   }
   i4 = i5;
   i5 = HEAPU16[i12 + (i5 << 1) >> 1] << 8;
  }
  i7 = (HEAP32[i17 >> 2] | 0) + i18 | 0;
  i11 = i2;
  i12 = i3;
  i28 = i8;
  i7 = i7 + (HEAP32[i7 + (i4 << 2) >> 2] | 0) | 0;
  i2 = i11;
  i3 = i12;
  i8 = i28;
 }
 if ((i26 | 0) != 68) if ((i26 | 0) == 70) {
  STACKTOP = i27;
  return i1 | 0;
 }
 _FcCharSetDestroy(i1);
 i28 = 0;
 STACKTOP = i27;
 return i28 | 0;
}

function _FT_Raccess_Get_DataOffsets(i1, i15, i9, i19, i10, i18, i20, i21) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i9 = i9 | 0;
 i19 = i19 | 0;
 i10 = i10 | 0;
 i18 = i18 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i16 = i23;
 i22 = HEAP32[i1 >> 2] | 0;
 i14 = i15 + 20 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 do if (!i1) {
  i1 = i15 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < i9 >>> 0) {
   i22 = 85;
   STACKTOP = i23;
   return i22 | 0;
  } else i13 = i1;
 } else if (!(FUNCTION_TABLE_iiiii[i1 & 127](i15, i9, 0, 0) | 0)) {
  i2 = i15 + 4 | 0;
  i13 = i2;
  i2 = HEAP32[i2 >> 2] | 0;
  break;
 } else {
  i22 = 85;
  STACKTOP = i23;
  return i22 | 0;
 } while (0);
 i12 = i15 + 8 | 0;
 HEAP32[i12 >> 2] = i9;
 do if ((i9 + 1 | 0) >>> 0 < i2 >>> 0) {
  i1 = HEAP32[i14 >> 2] | 0;
  if (!i1) {
   i1 = (HEAP32[i15 >> 2] | 0) + i9 | 0;
   if (!i1) {
    i3 = 0;
    i11 = i15;
    i1 = i9;
   } else {
    i4 = i9;
    i2 = i15;
    i17 = 10;
   }
  } else {
   if ((FUNCTION_TABLE_iiiii[i1 & 127](i15, i9, i16, 2) | 0) != 2) break;
   i1 = i16;
   i4 = HEAP32[i12 >> 2] | 0;
   i2 = i15;
   i17 = 10;
  }
  if ((i17 | 0) == 10) {
   i3 = (HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0);
   i11 = i2;
   i1 = i4;
  }
  i2 = i1 + 2 | 0;
  HEAP32[i12 >> 2] = i2;
  i8 = i3 & 65535;
  i7 = 0;
  while (1) {
   i3 = HEAP32[i13 >> 2] | 0;
   if ((i2 + 3 | 0) >>> 0 >= i3 >>> 0) {
    i17 = 20;
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   if (!i1) {
    i1 = (HEAP32[i11 >> 2] | 0) + i2 | 0;
    if (!i1) i6 = 0; else i17 = 19;
   } else {
    if ((FUNCTION_TABLE_iiiii[i1 & 127](i15, i2, i16, 4) | 0) != 4) {
     i17 = 20;
     break;
    }
    i1 = i16;
    i2 = HEAP32[i12 >> 2] | 0;
    i3 = HEAP32[i13 >> 2] | 0;
    i17 = 19;
   }
   if ((i17 | 0) == 19) {
    i17 = 0;
    i6 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
   }
   i4 = i2 + 4 | 0;
   HEAP32[i12 >> 2] = i4;
   if ((i2 + 5 | 0) >>> 0 >= i3 >>> 0) {
    i17 = 27;
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   if (!i1) {
    i1 = (HEAP32[i11 >> 2] | 0) + i4 | 0;
    if (!i1) {
     i5 = 1;
     i2 = i4;
    } else {
     i2 = i4;
     i17 = 26;
    }
   } else {
    if ((FUNCTION_TABLE_iiiii[i1 & 127](i15, i4, i16, 2) | 0) != 2) {
     i17 = 27;
     break;
    }
    i1 = i16;
    i2 = HEAP32[i12 >> 2] | 0;
    i3 = HEAP32[i13 >> 2] | 0;
    i17 = 26;
   }
   if ((i17 | 0) == 26) {
    i17 = 0;
    i5 = ((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) + 1 | 0;
   }
   i1 = i2 + 2 | 0;
   HEAP32[i12 >> 2] = i1;
   if ((i2 + 3 | 0) >>> 0 >= i3 >>> 0) {
    i17 = 34;
    break;
   }
   i2 = HEAP32[i14 >> 2] | 0;
   if (!i2) {
    i2 = (HEAP32[i11 >> 2] | 0) + i1 | 0;
    if (!i2) i3 = 0; else i17 = 33;
   } else {
    if ((FUNCTION_TABLE_iiiii[i2 & 127](i15, i1, i16, 2) | 0) != 2) {
     i17 = 34;
     break;
    }
    i2 = i16;
    i1 = HEAP32[i12 >> 2] | 0;
    i17 = 33;
   }
   if ((i17 | 0) == 33) {
    i17 = 0;
    i3 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
   }
   i2 = i1 + 2 | 0;
   HEAP32[i12 >> 2] = i2;
   if ((i6 | 0) == (i10 | 0)) {
    i17 = 36;
    break;
   }
   if ((i7 | 0) >= (i8 | 0)) {
    i1 = 1;
    i17 = 80;
    break;
   } else i7 = i7 + 1 | 0;
  }
  if ((i17 | 0) == 20) {
   i22 = 85;
   STACKTOP = i23;
   return i22 | 0;
  } else if ((i17 | 0) == 27) {
   i22 = 85;
   STACKTOP = i23;
   return i22 | 0;
  } else if ((i17 | 0) == 34) {
   i22 = 85;
   STACKTOP = i23;
   return i22 | 0;
  } else if ((i17 | 0) == 36) {
   HEAP32[i21 >> 2] = i5;
   i1 = i3 + i9 | 0;
   i2 = HEAP32[i14 >> 2] | 0;
   if (!i2) {
    if ((HEAP32[i13 >> 2] | 0) >>> 0 < i1 >>> 0) {
     i22 = 85;
     STACKTOP = i23;
     return i22 | 0;
    }
   } else if (FUNCTION_TABLE_iiiii[i2 & 127](i15, i1, 0, 0) | 0) {
    i22 = 85;
    STACKTOP = i23;
    return i22 | 0;
   }
   HEAP32[i12 >> 2] = i1;
   i1 = HEAP32[i21 >> 2] | 0;
   if ((i1 | 0) < 0) {
    i22 = 6;
    STACKTOP = i23;
    return i22 | 0;
   }
   do if (!i1) i7 = 0; else {
    if ((i1 | 0) > 268435455) {
     i22 = 10;
     STACKTOP = i23;
     return i22 | 0;
    }
    i1 = i1 << 3;
    i2 = FUNCTION_TABLE_iii[HEAP32[i22 + 4 >> 2] & 255](i22, i1) | 0;
    if (!i2) {
     i22 = 64;
     STACKTOP = i23;
     return i22 | 0;
    } else {
     _memset(i2 | 0, 0, i1 | 0) | 0;
     _memset(i2 | 0, 0, i1 | 0) | 0;
     i7 = i2;
     break;
    }
   } while (0);
   i1 = HEAP32[i21 >> 2] | 0;
   L68 : do if ((i1 | 0) > 0) {
    i2 = 0;
    i3 = HEAP32[i12 >> 2] | 0;
    while (1) {
     if ((i3 + 1 | 0) >>> 0 >= (HEAP32[i13 >> 2] | 0) >>> 0) {
      i17 = 52;
      break;
     }
     i1 = HEAP32[i14 >> 2] | 0;
     if (!i1) {
      i1 = (HEAP32[i11 >> 2] | 0) + i3 | 0;
      if (!i1) {
       i5 = 0;
       i6 = i3;
       i1 = 0;
      } else {
       i4 = 0;
       i17 = 51;
      }
     } else {
      if ((FUNCTION_TABLE_iiiii[i1 & 127](i15, i3, i16, 2) | 0) != 2) {
       i17 = 52;
       break;
      }
      i1 = i16;
      i3 = HEAP32[i12 >> 2] | 0;
      i4 = HEAP32[i14 >> 2] | 0;
      i17 = 51;
     }
     if ((i17 | 0) == 51) {
      i17 = 0;
      i5 = ((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) & 65535;
      i6 = i3;
      i1 = i4;
     }
     HEAP32[i12 >> 2] = i6 + 2;
     HEAP16[i7 + (i2 << 3) >> 1] = i5;
     i4 = i6 + 4 | 0;
     if (!i1) {
      i1 = HEAP32[i13 >> 2] | 0;
      if (i1 >>> 0 < i4 >>> 0) {
       i1 = 85;
       break L68;
      }
     } else {
      if (FUNCTION_TABLE_iiiii[i1 & 127](i15, i4, 0, 0) | 0) {
       i1 = 85;
       break L68;
      }
      i1 = HEAP32[i13 >> 2] | 0;
     }
     HEAP32[i12 >> 2] = i4;
     if ((i6 + 7 | 0) >>> 0 >= i1 >>> 0) {
      i17 = 63;
      break;
     }
     i1 = HEAP32[i14 >> 2] | 0;
     if (!i1) {
      i1 = (HEAP32[i11 >> 2] | 0) + i4 | 0;
      if (!i1) {
       HEAP32[i12 >> 2] = i6 + 8;
       i3 = 0;
       i1 = i6 + 12 | 0;
       i17 = 66;
      } else {
       i5 = 0;
       i17 = 64;
      }
     } else {
      if ((FUNCTION_TABLE_iiiii[i1 & 127](i15, i4, i16, 4) | 0) != 4) {
       i17 = 63;
       break;
      }
      i1 = i16;
      i4 = HEAP32[i12 >> 2] | 0;
      i5 = HEAP32[i14 >> 2] | 0;
      i17 = 64;
     }
     if ((i17 | 0) == 64) {
      i17 = 0;
      i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
      HEAP32[i12 >> 2] = i4 + 4;
      i1 = i4 + 8 | 0;
      if (!i5) i17 = 66; else if (!(FUNCTION_TABLE_iiiii[i5 & 127](i15, i1, 0, 0) | 0)) i4 = i1; else {
       i1 = 85;
       break L68;
      }
     }
     if ((i17 | 0) == 66) {
      i17 = 0;
      if ((HEAP32[i13 >> 2] | 0) >>> 0 < i1 >>> 0) {
       i1 = 85;
       break L68;
      } else i4 = i1;
     }
     HEAP32[i12 >> 2] = i4;
     HEAP32[i7 + (i2 << 3) + 4 >> 2] = i3 & 16777215;
     i2 = i2 + 1 | 0;
     i1 = HEAP32[i21 >> 2] | 0;
     if ((i2 | 0) < (i1 | 0)) i3 = i4; else {
      i17 = 68;
      break L68;
     }
    }
    if ((i17 | 0) == 52) {
     HEAP16[i7 + (i2 << 3) >> 1] = 0;
     i1 = 85;
     break;
    } else if ((i17 | 0) == 63) {
     i1 = 85;
     break;
    }
   } else i17 = 68; while (0);
   do if ((i17 | 0) == 68) {
    if (i18 << 24 >> 24) {
     _qsort(i7, i1, 8, 184);
     i1 = HEAP32[i21 >> 2] | 0;
    }
    if ((i1 | 0) < 0) i1 = 6; else {
     if (!i1) i2 = 0; else {
      if ((i1 | 0) > 536870911) {
       i1 = 10;
       break;
      }
      i1 = i1 << 2;
      i2 = FUNCTION_TABLE_iii[HEAP32[i22 + 4 >> 2] & 255](i22, i1) | 0;
      if (!i2) {
       i1 = 64;
       break;
      }
      _memset(i2 | 0, 0, i1 | 0) | 0;
      _memset(i2 | 0, 0, i1 | 0) | 0;
     }
     if ((HEAP32[i21 >> 2] | 0) > 0) {
      i1 = 0;
      do {
       HEAP32[i2 + (i1 << 2) >> 2] = (HEAP32[i7 + (i1 << 3) + 4 >> 2] | 0) + i19;
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) < (HEAP32[i21 >> 2] | 0));
     }
     HEAP32[i20 >> 2] = i2;
     i1 = 0;
    }
   } while (0);
   if (!i7) {
    i22 = i1;
    STACKTOP = i23;
    return i22 | 0;
   }
   FUNCTION_TABLE_vii[HEAP32[i22 + 8 >> 2] & 63](i22, i7);
   i22 = i1;
   STACKTOP = i23;
   return i22 | 0;
  } else if ((i17 | 0) == 80) {
   STACKTOP = i23;
   return i1 | 0;
  }
 } while (0);
 i22 = 85;
 STACKTOP = i23;
 return i22 | 0;
}

function _process_event_tail(i17, i27, i7, i6) {
 i17 = i17 | 0;
 i27 = i27 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0, i29 = 0;
 i29 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i23 = i29 + 40 | 0;
 i25 = i29 + 24 | 0;
 i24 = i29 + 16 | 0;
 i22 = i29;
 i18 = i29 + 56 | 0;
 i19 = i29 + 52 | 0;
 i20 = i29 + 48 | 0;
 i21 = i29 + 44 | 0;
 i28 = ___strdup(HEAP32[i17 + 28 >> 2] | 0) | 0;
 i1 = i28;
 if (!(HEAP32[i17 >> 2] | 0)) {
  i2 = i17 + 4 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) < 0) ___assert_fail(355248, 355285, 104, 355291);
  i4 = i3 + 20 | 0;
  i5 = i17 + 16 | 0;
  if (!i3) {
   HEAP32[i2 >> 2] = i4;
   i3 = _realloc(HEAP32[i5 >> 2] | 0, i4 * 144 | 0) | 0;
   HEAP32[i5 >> 2] = i3;
   i2 = HEAP32[i17 >> 2] | 0;
  } else {
   i2 = 0;
   i3 = HEAP32[i5 >> 2] | 0;
  }
  HEAP32[i17 >> 2] = i2 + 1;
  _memset(i3 + (i2 * 144 | 0) | 0, 0, 144) | 0;
  i16 = HEAP32[i5 >> 2] | 0;
  i15 = ___strdup(357055) | 0;
  HEAP32[i16 + (i2 * 144 | 0) >> 2] = i15;
  i15 = ___strdup(358016) | 0;
  HEAP32[i16 + (i2 * 144 | 0) + 4 >> 2] = i15;
  HEAPF64[i16 + (i2 * 144 | 0) + 8 >> 3] = 18.0;
  HEAP32[i16 + (i2 * 144 | 0) + 16 >> 2] = -256;
  HEAP32[i16 + (i2 * 144 | 0) + 20 >> 2] = 16776960;
  HEAP32[i16 + (i2 * 144 | 0) + 24 >> 2] = 0;
  HEAP32[i16 + (i2 * 144 | 0) + 28 >> 2] = 128;
  HEAP32[i16 + (i2 * 144 | 0) + 32 >> 2] = 200;
  HEAPF64[i16 + (i2 * 144 | 0) + 48 >> 3] = 1.0;
  HEAPF64[i16 + (i2 * 144 | 0) + 56 >> 3] = 1.0;
  HEAPF64[i16 + (i2 * 144 | 0) + 64 >> 3] = 0.0;
  HEAP32[i16 + (i2 * 144 | 0) + 80 >> 2] = 1;
  HEAPF64[i16 + (i2 * 144 | 0) + 88 >> 3] = 2.0;
  HEAPF64[i16 + (i2 * 144 | 0) + 96 >> 3] = 3.0;
  HEAP32[i16 + (i2 * 144 | 0) + 104 >> 2] = 2;
  HEAP32[i16 + (i2 * 144 | 0) + 116 >> 2] = 20;
  HEAP32[i16 + (i2 * 144 | 0) + 112 >> 2] = 20;
  HEAP32[i16 + (i2 * 144 | 0) + 108 >> 2] = 20;
  HEAP32[i17 + 76 >> 2] = i2;
 }
 L11 : do if ((i6 | 0) > 0) {
  i4 = 0;
  while (1) {
   HEAP32[i18 >> 2] = i1;
   _skip_spaces(i18);
   i3 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP8[i3 >> 0] | 0;
   if (!(i1 << 24 >> 24)) break; else {
    i2 = i1;
    i1 = i3;
   }
   L15 : while (1) {
    switch (i2 << 24 >> 24) {
    case 0:
     break L15;
    case 44:
     {
      i26 = 16;
      break L15;
     }
    default:
     {}
    }
    i16 = i1 + 1 | 0;
    HEAP32[i18 >> 2] = i16;
    i2 = HEAP8[i16 >> 0] | 0;
    i1 = i16;
   }
   if ((i26 | 0) == 16) {
    i26 = 0;
    HEAP8[i1 >> 0] = 0;
    i1 = (HEAP32[i18 >> 2] | 0) + 1 | 0;
   }
   _rskip_spaces(i18, i3);
   HEAP8[HEAP32[i18 >> 2] >> 0] = 0;
   i4 = i4 + 1 | 0;
   if (!((i3 | 0) != 0 & (i4 | 0) < (i6 | 0))) break L11;
  }
  i1 = i3;
 } while (0);
 HEAP32[i18 >> 2] = i1;
 _skip_spaces(i18);
 i2 = HEAP32[i18 >> 2] | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 L23 : do if (!(i1 << 24 >> 24)) i26 = 19; else {
  i8 = i27 + 20 | 0;
  i9 = i27 + 24 | 0;
  i10 = i27 + 28 | 0;
  i11 = i27 + 44 | 0;
  i12 = i27 + 32 | 0;
  i13 = i27 + 36 | 0;
  i14 = i27 + 40 | 0;
  i15 = i17 + 84 | 0;
  i16 = i27 + 8 | 0;
  i4 = i7;
  i5 = i2;
  while (1) {
   i3 = i4;
   i2 = i5;
   L27 : while (1) {
    switch (i1 << 24 >> 24) {
    case 0:
     {
      i1 = i2;
      break L27;
     }
    case 44:
     {
      i26 = 22;
      break L27;
     }
    default:
     {}
    }
    i7 = i2 + 1 | 0;
    HEAP32[i18 >> 2] = i7;
    i1 = HEAP8[i7 >> 0] | 0;
    i2 = i7;
   }
   if ((i26 | 0) == 22) {
    i26 = 0;
    HEAP8[i2 >> 0] = 0;
    i1 = (HEAP32[i18 >> 2] | 0) + 1 | 0;
   }
   i6 = i1;
   _rskip_spaces(i18, i5);
   HEAP8[HEAP32[i18 >> 2] >> 0] = 0;
   if (!i5) break L23;
   if (!(_ass_strcasecmp(i5, 356986) | 0)) break;
   HEAP32[i18 >> 2] = i3;
   _skip_spaces(i18);
   i3 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP8[i3 >> 0] | 0;
   if (!(i1 << 24 >> 24)) {
    i26 = 31;
    break;
   } else i2 = i3;
   L35 : while (1) {
    switch (i1 << 24 >> 24) {
    case 0:
     {
      i4 = i2;
      break L35;
     }
    case 44:
     {
      i26 = 34;
      break L35;
     }
    default:
     {}
    }
    i7 = i2 + 1 | 0;
    HEAP32[i18 >> 2] = i7;
    i1 = HEAP8[i7 >> 0] | 0;
    i2 = i7;
   }
   if ((i26 | 0) == 34) {
    i26 = 0;
    HEAP8[i2 >> 0] = 0;
    i4 = (HEAP32[i18 >> 2] | 0) + 1 | 0;
   }
   _rskip_spaces(i18, i3);
   HEAP8[HEAP32[i18 >> 2] >> 0] = 0;
   if (!i3) break L23;
   i1 = (_ass_strcasecmp(i5, 356991) | 0) == 0;
   i1 = i1 ? 356995 : i5;
   do if (!(_ass_strcasecmp(i1, 357004) | 0)) {
    i7 = _atoi(i3) | 0;
    HEAP32[i8 >> 2] = i7;
   } else {
    if (!(_ass_strcasecmp(i1, 357010) | 0)) {
     i7 = _lookup_style(i17, i3) | 0;
     HEAP32[i9 >> 2] = i7;
     break;
    }
    if (!(_ass_strcasecmp(i1, 356593) | 0)) {
     i1 = HEAP32[i10 >> 2] | 0;
     if (i1 | 0) _free(i1);
     i7 = ___strdup(i3) | 0;
     HEAP32[i10 >> 2] = i7;
     break;
    }
    if (!(_ass_strcasecmp(i1, 357016) | 0)) {
     i1 = HEAP32[i11 >> 2] | 0;
     if (i1 | 0) _free(i1);
     i7 = ___strdup(i3) | 0;
     HEAP32[i11 >> 2] = i7;
     break;
    }
    if (!(_ass_strcasecmp(i1, 355586) | 0)) {
     i7 = _atoi(i3) | 0;
     HEAP32[i12 >> 2] = i7;
     break;
    }
    if (!(_ass_strcasecmp(i1, 355594) | 0)) {
     i7 = _atoi(i3) | 0;
     HEAP32[i13 >> 2] = i7;
     break;
    }
    if (!(_ass_strcasecmp(i1, 355602) | 0)) {
     i7 = _atoi(i3) | 0;
     HEAP32[i14 >> 2] = i7;
     break;
    }
    if (!(_ass_strcasecmp(i1, 357023) | 0)) {
     i1 = HEAP32[i15 >> 2] | 0;
     HEAP32[i22 >> 2] = i18;
     HEAP32[i22 + 4 >> 2] = i19;
     HEAP32[i22 + 8 >> 2] = i20;
     HEAP32[i22 + 12 >> 2] = i21;
     if ((_sscanf(i3, 357029, i22) | 0) < 4) {
      _ass_msg(i1, 2, 357041, i24);
      i1 = 0;
      i2 = 0;
     } else {
      i7 = HEAP32[i18 >> 2] | 0;
      i7 = ___muldi3(i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0, 60, 0) | 0;
      i2 = HEAP32[i19 >> 2] | 0;
      i2 = _i64Add(i7 | 0, tempRet0 | 0, i2 | 0, ((i2 | 0) < 0) << 31 >> 31 | 0) | 0;
      i2 = ___muldi3(i2 | 0, tempRet0 | 0, 60, 0) | 0;
      i7 = HEAP32[i20 >> 2] | 0;
      i7 = _i64Add(i2 | 0, tempRet0 | 0, i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0) | 0;
      i7 = ___muldi3(i7 | 0, tempRet0 | 0, 1e3, 0) | 0;
      i2 = tempRet0;
      i1 = HEAP32[i21 >> 2] | 0;
      i1 = ___muldi3(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, 10, 0) | 0;
      i1 = _i64Add(i7 | 0, i2 | 0, i1 | 0, tempRet0 | 0) | 0;
      i2 = tempRet0;
     }
     i7 = i27;
     HEAP32[i7 >> 2] = i1;
     HEAP32[i7 + 4 >> 2] = i2;
     break;
    }
    if (!(_ass_strcasecmp(i1, 356995) | 0)) {
     i1 = HEAP32[i15 >> 2] | 0;
     HEAP32[i25 >> 2] = i18;
     HEAP32[i25 + 4 >> 2] = i19;
     HEAP32[i25 + 8 >> 2] = i20;
     HEAP32[i25 + 12 >> 2] = i21;
     if ((_sscanf(i3, 357029, i25) | 0) < 4) {
      _ass_msg(i1, 2, 357041, i23);
      i1 = 0;
      i2 = 0;
     } else {
      i7 = HEAP32[i18 >> 2] | 0;
      i7 = ___muldi3(i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0, 60, 0) | 0;
      i2 = HEAP32[i19 >> 2] | 0;
      i2 = _i64Add(i7 | 0, tempRet0 | 0, i2 | 0, ((i2 | 0) < 0) << 31 >> 31 | 0) | 0;
      i2 = ___muldi3(i2 | 0, tempRet0 | 0, 60, 0) | 0;
      i7 = HEAP32[i20 >> 2] | 0;
      i7 = _i64Add(i2 | 0, tempRet0 | 0, i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0) | 0;
      i7 = ___muldi3(i7 | 0, tempRet0 | 0, 1e3, 0) | 0;
      i2 = tempRet0;
      i1 = HEAP32[i21 >> 2] | 0;
      i1 = ___muldi3(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, 10, 0) | 0;
      i1 = _i64Add(i7 | 0, i2 | 0, i1 | 0, tempRet0 | 0) | 0;
      i2 = tempRet0;
     }
     i7 = i16;
     HEAP32[i7 >> 2] = i1;
     HEAP32[i7 + 4 >> 2] = i2;
    }
   } while (0);
   HEAP32[i18 >> 2] = i6;
   _skip_spaces(i18);
   i5 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP8[i5 >> 0] | 0;
   if (!(i1 << 24 >> 24)) {
    i26 = 19;
    break L23;
   }
  }
  if ((i26 | 0) == 31) break;
  i1 = ___strdup(i4) | 0;
  HEAP32[i27 + 48 >> 2] = i1;
  if (HEAP8[i1 >> 0] | 0) {
   i2 = i1 + (_strlen(i1) | 0) + -1 | 0;
   if (i2 >>> 0 >= i1 >>> 0) if ((HEAP8[i2 >> 0] | 0) == 13) HEAP8[i2 >> 0] = 0;
  }
  i26 = i27;
  i27 = i16;
  i26 = _i64Subtract(HEAP32[i27 >> 2] | 0, HEAP32[i27 + 4 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i26 + 4 >> 2] | 0) | 0;
  i27 = i16;
  HEAP32[i27 >> 2] = i26;
  HEAP32[i27 + 4 >> 2] = tempRet0;
  _free(i28);
  STACKTOP = i29;
  return;
 } while (0);
 _free(i28);
 STACKTOP = i29;
 return;
}
function _FT_Load_Glyph(i11, i9, i7) {
 i11 = i11 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 if (!i11) {
  i15 = 35;
  return i15 | 0;
 }
 i12 = i11 + 88 | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  i15 = 35;
  return i15 | 0;
 }
 i15 = HEAP32[i11 + 84 >> 2] | 0;
 if (!i15) {
  i15 = 35;
  return i15 | 0;
 }
 i3 = i15 + 156 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if (!i2) i10 = 9; else {
  i1 = HEAP32[i2 + 4 >> 2] | 0;
  if (!(i1 & 1)) i10 = 9; else {
   i4 = HEAP32[(HEAP32[i15 + 4 >> 2] | 0) + 100 >> 2] | 0;
   i6 = i15 + 88 | 0;
   i5 = HEAP32[i6 >> 2] | 0;
   if (i5) {
    FUNCTION_TABLE_vii[HEAP32[i4 + 8 >> 2] & 63](i4, i5);
    i1 = HEAP32[i3 >> 2] | 0;
    i2 = i1;
    i1 = HEAP32[i1 + 4 >> 2] | 0;
   }
   HEAP32[i6 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = i1 & -2;
  }
 }
 if ((i10 | 0) == 9) HEAP32[i15 + 88 >> 2] = 0;
 HEAP8[i15 + 94 >> 0] = 0;
 i1 = i15 + 100 | 0;
 i14 = i15 + 72 | 0;
 i2 = i15 + 24 | 0;
 i3 = i2 + 40 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i14 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i14 + 12 >> 2] = 0;
 i2 = i1;
 i3 = i2 + 56 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 i5 = HEAP32[i11 + 96 >> 2] | 0;
 i6 = HEAP32[(HEAP32[i5 + 4 >> 2] | 0) + 160 >> 2] | 0;
 i13 = (i7 & 1024 | 0) == 0 ? i7 : i7 | 2049;
 i13 = (i13 & 1 | 0) == 0 ? i13 : i13 & -15 | 10;
 i8 = (i13 & 2 | 0) == 0;
 do if ((i13 & 32770 | 0) == 0 & (i6 | 0) != 0) {
  i1 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
  if ((i1 & 768 | 0) == 256) {
   i2 = HEAP32[i11 + 8 >> 2] | 0;
   if (!(i2 & 8192)) {
    if (!(i13 & 2048)) {
     i4 = HEAP32[i11 + 128 >> 2] | 0;
     i3 = HEAP32[i4 + 8 >> 2] | 0;
     i4 = HEAP32[i4 >> 2] | 0;
     if ((i3 | 0) != 0 | (i4 | 0) == 0) if ((i3 | 0) == 0 | (i4 | 0) != 0) {
      i10 = 28;
      break;
     }
    }
    if (!(i13 & 32)) if (!((i13 & 983040 | 0) == 65536 | (i1 & 1024 | 0) == 0)) if (!(HEAP8[(HEAP32[i11 + 128 >> 2] | 0) + 52 >> 0] | 0)) {
     if (!(i2 & 8)) {
      i10 = 28;
      break;
     }
     if (!(HEAP32[i11 + 696 >> 2] | 0)) {
      i10 = 28;
      break;
     }
     if (HEAP16[i11 + 260 + 26 >> 1] | 0) {
      i10 = 28;
      break;
     }
     if (HEAP32[i11 + 628 >> 2] | 0) {
      i10 = 28;
      break;
     }
     if (HEAP32[i11 + 636 >> 2] | 0) {
      i10 = 28;
      break;
     }
    }
    if ((i13 & 8 | 0) == 0 & (i2 & 2 | 0) != 0) if (!(FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i5 + 12 >> 2] | 0) + 72 >> 2] & 127](i15, HEAP32[i12 >> 2] | 0, i9, i13 | 16384) | 0)) if ((HEAP32[i14 >> 2] | 0) == 1651078259) {
     i1 = 0;
     break;
    }
    i8 = (HEAP32[i11 + 128 >> 2] | 0) + 24 | 0;
    i7 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = 0;
    i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0) + 12 >> 2] & 127](i6, i15, HEAP32[i12 >> 2] | 0, i9, i13) | 0;
    HEAP32[i8 >> 2] = i7;
   } else i10 = 28;
  } else i10 = 28;
 } else i10 = 28; while (0);
 if ((i10 | 0) == 28) {
  i1 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i5 + 12 >> 2] | 0) + 72 >> 2] & 127](i15, HEAP32[i12 >> 2] | 0, i9, i13) | 0;
  if (i1 | 0) {
   i15 = i1;
   return i15 | 0;
  }
  if ((HEAP32[i14 >> 2] | 0) == 1869968492) {
   i5 = HEAP16[i15 + 110 >> 1] | 0;
   i7 = i5 << 16 >> 16;
   i1 = HEAP16[i15 + 108 >> 1] | 0;
   i6 = i1 << 16 >> 16;
   if ((i1 | i5) << 16 >> 16) {
    if (i5 << 16 >> 16 < 1 | i1 << 16 >> 16 < 1) {
     i15 = 6;
     return i15 | 0;
    }
    L51 : do if (i1 << 16 >> 16 > 0) {
     i4 = HEAP32[i15 + 120 >> 2] | 0;
     i2 = 0;
     i3 = -1;
     while (1) {
      i10 = HEAP16[i4 + (i2 << 1) >> 1] | 0;
      i1 = i10 << 16 >> 16;
      i2 = i2 + 1 | 0;
      if (!((i1 | 0) > (i3 | 0) ? i10 << 16 >> 16 < i5 << 16 >> 16 : 0)) {
       i1 = 6;
       break;
      }
      if ((i2 | 0) >= (i6 | 0)) break L51; else i3 = i1;
     }
     return i1 | 0;
    } else i1 = -1; while (0);
    if ((i1 | 0) != (i7 + -1 | 0)) {
     i15 = 6;
     return i15 | 0;
    }
   }
   if (i8) {
    i1 = i15 + 32 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    i3 = i15 + 36 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    i5 = i15 + 24 | 0;
    i6 = HEAP32[i5 >> 2] | 0;
    i10 = i15 + 28 | 0;
    i7 = HEAP32[i10 >> 2] | 0;
    i8 = i2 & -64;
    i9 = i4 + 63 & -64;
    if (!(i13 & 16)) {
     i16 = i15 + 44 | 0;
     HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & -64;
     i16 = i15 + 48 | 0;
     HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & -64;
     HEAP32[i1 >> 2] = i8;
     HEAP32[i3 >> 2] = i9;
     HEAP32[i5 >> 2] = (i2 + 63 + i6 & -64) - i8;
     i1 = i9 - (i4 - i7 & -64) | 0;
    } else {
     HEAP32[i1 >> 2] = i8;
     HEAP32[i3 >> 2] = i9;
     i1 = i15 + 44 | 0;
     i8 = HEAP32[i1 >> 2] | 0;
     i4 = i15 + 48 | 0;
     i16 = HEAP32[i4 >> 2] | 0;
     i9 = i8 & -64;
     HEAP32[i1 >> 2] = i9;
     i1 = i16 & -64;
     HEAP32[i4 >> 2] = i1;
     HEAP32[i5 >> 2] = (i6 + 63 + i8 & -64) - i9;
     i1 = (i7 + 63 + i16 & -64) - i1 | 0;
    }
    HEAP32[i10 >> 2] = i1;
    i1 = i15 + 40 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 32 & -64;
    i1 = i15 + 52 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 32 & -64;
    i1 = 0;
   } else i1 = 0;
  } else i1 = 0;
 }
 if (!(i13 & 16)) {
  i3 = 0;
  i2 = HEAP32[i15 + 40 >> 2] | 0;
 } else {
  i3 = HEAP32[i15 + 52 >> 2] | 0;
  i2 = 0;
 }
 HEAP32[i15 + 64 >> 2] = i2;
 i8 = i15 + 64 | 0;
 HEAP32[i15 + 68 >> 2] = i3;
 if (!(i13 & 8192)) if (HEAP32[i11 + 8 >> 2] & 1 | 0) {
  i12 = HEAP32[i12 >> 2] | 0;
  i16 = i15 + 56 | 0;
  i10 = _FT_MulDiv(HEAP32[i16 >> 2] | 0, HEAP32[i12 + 16 >> 2] | 0, 64) | 0;
  HEAP32[i16 >> 2] = i10;
  i16 = i15 + 60 | 0;
  i12 = _FT_MulDiv(HEAP32[i16 >> 2] | 0, HEAP32[i12 + 20 >> 2] | 0, 64) | 0;
  HEAP32[i16 >> 2] = i12;
 }
 if (!(i13 & 2048)) {
  i7 = HEAP32[i11 + 128 >> 2] | 0;
  i6 = i7 + 24 | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  if (i2) {
   i5 = HEAP32[i14 >> 2] | 0;
   i4 = HEAP32[(HEAP32[(HEAP32[i15 + 4 >> 2] | 0) + 96 >> 2] | 0) + 4 >> 2] | 0;
   i3 = HEAP32[i4 + 156 >> 2] | 0;
   if (!i3) i10 = 52; else if ((HEAP32[i3 + 16 >> 2] | 0) == (i5 | 0)) {
    i1 = i3;
    i10 = 56;
   } else i10 = 52;
   L79 : do if ((i10 | 0) == 52) {
    i3 = HEAP32[i4 + 148 >> 2] | 0;
    L81 : do if (i3 | 0) {
     while (1) {
      i4 = HEAP32[i3 + 8 >> 2] | 0;
      if ((HEAP32[i4 + 16 >> 2] | 0) == (i5 | 0)) break;
      i3 = HEAP32[i3 + 4 >> 2] | 0;
      if (!i3) break L81;
     }
     if (i4 | 0) {
      i1 = i4;
      i10 = 56;
      break L79;
     }
    } while (0);
    if ((i5 | 0) == 1869968492) {
     if (i2 & 1) if (i7) {
      i3 = HEAP32[i15 + 112 >> 2] | 0;
      i16 = HEAP16[i15 + 110 >> 1] | 0;
      i4 = i3 + (i16 << 16 >> 16 << 3) | 0;
      if (i16 << 16 >> 16 > 0) {
       i2 = i3;
       do {
        _FT_Vector_Transform(i2, i7);
        i2 = i2 + 8 | 0;
       } while (i2 >>> 0 < i4 >>> 0);
       i2 = HEAP32[i6 >> 2] | 0;
      }
     }
     if (i2 & 2) {
      i5 = HEAP32[i7 + 16 >> 2] | 0;
      i6 = HEAP32[i7 + 20 >> 2] | 0;
      i2 = HEAP16[i15 + 110 >> 1] | 0;
      if (i2 << 16 >> 16 > 0) {
       i4 = i2 << 16 >> 16;
       i2 = 0;
       i3 = HEAP32[i15 + 112 >> 2] | 0;
       while (1) {
        HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i5;
        i16 = i3 + 4 | 0;
        HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + i6;
        i2 = i2 + 1 << 16 >> 16;
        if ((i2 & 65535 | 0) >= (i4 | 0)) break; else i3 = i3 + 8 | 0;
       }
      }
     }
    }
   } while (0);
   if ((i10 | 0) == 56) i1 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 44 >> 2] & 127](i1, i15, i7, i7 + 16 | 0) | 0;
   _FT_Vector_Transform(i8, i7);
  }
 }
 if (i1 | 0) {
  i16 = i1;
  return i16 | 0;
 }
 i1 = HEAP32[i14 >> 2] | 0;
 L106 : do if ((i1 | 0) < 1668246896) {
  switch (i1 | 0) {
  case 1651078259:
   {
    i1 = 0;
    break;
   }
  default:
   break L106;
  }
  return i1 | 0;
 } else {
  switch (i1 | 0) {
  case 1668246896:
   {
    i1 = 0;
    break;
   }
  default:
   break L106;
  }
  return i1 | 0;
 } while (0);
 if (!(i13 & 4)) {
  i16 = 0;
  return i16 | 0;
 }
 i1 = i13 >>> 16 & 15;
 i2 = HEAP32[i15 + 4 >> 2] | 0;
 if (!i2) {
  i16 = 6;
  return i16 | 0;
 }
 i16 = _FT_Render_Glyph_Internal(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, i15, (i13 & 4096 | 0) == 0 | (i1 | 0) != 0 ? i1 : 2) | 0;
 return i16 | 0;
}

function _FcCharSetFreeze(i21, i22) {
 i21 = i21 | 0;
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i24 = _malloc(16) | 0;
 if (!i24) {
  i27 = 0;
  return i27 | 0;
 }
 HEAP32[i24 >> 2] = 1;
 i25 = i24 + 4 | 0;
 HEAP32[i25 >> 2] = 0;
 i26 = i24 + 8 | 0;
 HEAP32[i26 >> 2] = 0;
 i27 = i24 + 12 | 0;
 HEAP32[i27 >> 2] = 0;
 i23 = i22 + 4 | 0;
 L4 : do if ((HEAP32[i23 >> 2] | 0) > 0) {
  i11 = i22;
  i12 = i22 + 8 | 0;
  i13 = i21 + 1576 | 0;
  i14 = i21 + 1032 | 0;
  i15 = i21 + 1028 | 0;
  i16 = i21 + 1572 | 0;
  i17 = i21 + 1588 | 0;
  i18 = i22 + 12 | 0;
  i19 = i24;
  i10 = 0;
  do {
   i4 = (HEAP32[i12 >> 2] | 0) + i11 | 0;
   i4 = i4 + (HEAP32[i4 + (i10 << 2) >> 2] | 0) | 0;
   i5 = i4;
   i6 = HEAP32[i5 >> 2] | 0;
   i6 = (i6 << 1 | i6 >>> 31) ^ HEAP32[i5 + 4 >> 2];
   i6 = (i6 << 1 | i6 >>> 31) ^ HEAP32[i5 + 8 >> 2];
   i6 = (i6 << 1 | i6 >>> 31) ^ HEAP32[i5 + 12 >> 2];
   i6 = (i6 << 1 | i6 >>> 31) ^ HEAP32[i5 + 16 >> 2];
   i6 = (i6 << 1 | i6 >>> 31) ^ HEAP32[i5 + 20 >> 2];
   i6 = (i6 << 1 | i6 >>> 31) ^ HEAP32[i5 + 24 >> 2];
   i5 = (i6 << 1 | i6 >>> 31) ^ HEAP32[i5 + 28 >> 2];
   i6 = i21 + (((i5 >>> 0) % 257 | 0) << 2) | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   L8 : do if (!i1) i20 = 9; else {
    i3 = i4;
    while (1) {
     if ((HEAP32[i1 + 4 >> 2] | 0) == (i5 | 0)) {
      i2 = i1 + 8 | 0;
      if (!(_memcmp(i2, i3, 32) | 0)) break L8;
     }
     i1 = HEAP32[i1 >> 2] | 0;
     if (!i1) {
      i20 = 9;
      break;
     }
    }
   } while (0);
   if ((i20 | 0) == 9) {
    i20 = 0;
    i1 = HEAP32[i13 >> 2] | 0;
    if (!i1) {
     i1 = (HEAP32[i14 >> 2] | 0) + 1 | 0;
     HEAP32[i14 >> 2] = i1;
     i1 = _realloc(HEAP32[i15 >> 2] | 0, i1 << 2) | 0;
     if (!i1) {
      i2 = 0;
      break L4;
     }
     HEAP32[i15 >> 2] = i1;
     i2 = _malloc(4080) | 0;
     HEAP32[i1 + ((HEAP32[i14 >> 2] | 0) + -1 << 2) >> 2] = i2;
     HEAP32[i16 >> 2] = i2;
     if (!i2) {
      i2 = 0;
      break L4;
     }
     HEAP32[i13 >> 2] = 102;
     i3 = 101;
     i1 = i2;
    } else {
     i3 = i1 + -1 | 0;
     i1 = HEAP32[i16 >> 2] | 0;
    }
    HEAP32[i13 >> 2] = i3;
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
    HEAP32[i16 >> 2] = i1 + 40;
    if (!i1) {
     i2 = 0;
     break L4;
    }
    i2 = i1 + 8 | 0;
    i9 = i4;
    HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
    HEAP32[i2 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
    HEAP32[i2 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
    HEAP32[i2 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
    HEAP32[i2 + 16 >> 2] = HEAP32[i9 + 16 >> 2];
    HEAP32[i2 + 20 >> 2] = HEAP32[i9 + 20 >> 2];
    HEAP32[i2 + 24 >> 2] = HEAP32[i9 + 24 >> 2];
    HEAP32[i2 + 28 >> 2] = HEAP32[i9 + 28 >> 2];
    HEAP32[i1 + 4 >> 2] = i5;
    HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i6 >> 2] = i1;
   }
   i5 = HEAP16[(HEAP32[i18 >> 2] | 0) + i11 + (i10 << 1) >> 1] | 0;
   i9 = (i5 & 65535) << 8;
   i8 = (HEAP32[i27 >> 2] | 0) + i19 | 0;
   i6 = i8;
   i7 = HEAP32[i25 >> 2] | 0;
   if (!i8) {
    i1 = -1;
    i20 = 27;
   } else {
    i3 = i7 + -1 | 0;
    i4 = 0;
    while (1) {
     if ((i4 | 0) > (i3 | 0)) {
      i20 = 20;
      break;
     }
     i1 = i3 + i4 >> 1;
     i28 = HEAP16[i6 + (i1 << 1) >> 1] | 0;
     i8 = (i28 & 65535) < (i5 & 65535);
     if (i28 << 16 >> 16 == i5 << 16 >> 16) break; else {
      i3 = i8 ? i3 : i1 + -1 | 0;
      i4 = i8 ? i1 + 1 | 0 : i4;
     }
    }
    if ((i20 | 0) == 20) {
     i20 = 0;
     if ((i3 | 0) < 0) i20 = 23; else if ((i3 | 0) < (i7 | 0)) if ((HEAPU16[i6 + (i3 << 1) >> 1] | 0) < (i5 & 65535)) i20 = 23; else i1 = i3; else i1 = i3;
     if ((i20 | 0) == 23) {
      i20 = 0;
      i1 = i3 + 1 | 0;
     }
     i1 = ~i1;
    }
    if ((i1 | 0) > -1) {
     i28 = (HEAP32[i26 >> 2] | 0) + i19 | 0;
     _free(i28 + (HEAP32[i28 + (i1 << 2) >> 2] | 0) | 0);
     i28 = (HEAP32[i26 >> 2] | 0) + i19 | 0;
     HEAP32[i28 + (i1 << 2) >> 2] = i2 - i28;
    } else i20 = 27;
   }
   if ((i20 | 0) == 27) {
    i20 = 0;
    if (!(_FcCharSetPutLeaf(i24, i9, i2, ~i1) | 0)) {
     i2 = 0;
     break L4;
    }
   }
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) < (HEAP32[i23 >> 2] | 0));
  i6 = HEAP32[i25 >> 2] | 0;
  i7 = (i6 | 0) > 0;
  if (i7) {
   i3 = i24;
   i4 = (HEAP32[i26 >> 2] | 0) + i3 | 0;
   i5 = i4;
   i1 = 0;
   i2 = 0;
   do {
    i20 = (HEAP32[i5 + (i2 << 2) >> 2] | 0) + i4 | 0;
    i28 = HEAP32[i20 >> 2] | 0;
    i28 = (i28 << 1 | i28 >>> 31) ^ HEAP32[i20 + 4 >> 2];
    i28 = (i28 << 1 | i28 >>> 31) ^ HEAP32[i20 + 8 >> 2];
    i28 = (i28 << 1 | i28 >>> 31) ^ HEAP32[i20 + 12 >> 2];
    i28 = (i28 << 1 | i28 >>> 31) ^ HEAP32[i20 + 16 >> 2];
    i28 = (i28 << 1 | i28 >>> 31) ^ HEAP32[i20 + 20 >> 2];
    i28 = (i28 << 1 | i28 >>> 31) ^ HEAP32[i20 + 24 >> 2];
    i1 = HEAP32[i20 + 28 >> 2] ^ (i1 << 1 | i1 >>> 31) ^ (i28 << 1 | i28 >>> 31);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i6 | 0));
   i3 = HEAPU16[(HEAP32[i27 >> 2] | 0) + i3 >> 1] | 0;
   i2 = 0;
   do {
    i1 = (i1 << 1 | i1 >>> 31) ^ i3;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i6 | 0));
   i4 = i6;
   i20 = 34;
  } else {
   i1 = 0;
   i4 = i6;
   i7 = 0;
   i20 = 34;
  }
 } else {
  i1 = 0;
  i4 = 0;
  i7 = 0;
  i20 = 34;
 } while (0);
 if ((i20 | 0) == 34) {
  i14 = i21 + 1036 + (((i1 >>> 0) % 67 | 0) << 2) | 0;
  i2 = HEAP32[i14 >> 2] | 0;
  L52 : do if (!i2) i20 = 47; else {
   i12 = i24;
   i13 = i4 << 1;
   if (i7) i11 = i2; else {
    i3 = i2;
    while (1) {
     if ((HEAP32[i3 + 4 >> 2] | 0) == (i1 | 0)) {
      i2 = i3 + 8 | 0;
      if ((HEAP32[i3 + 12 >> 2] | 0) == (i4 | 0)) if (!(_memcmp((HEAP32[i3 + 20 >> 2] | 0) + i2 | 0, (HEAP32[i27 >> 2] | 0) + i12 | 0, i13) | 0)) break L52;
     }
     i3 = HEAP32[i3 >> 2] | 0;
     if (!i3) {
      i20 = 47;
      break L52;
     }
    }
   }
   while (1) {
    if ((HEAP32[i11 + 4 >> 2] | 0) == (i1 | 0)) {
     i2 = i11 + 8 | 0;
     if ((HEAP32[i11 + 12 >> 2] | 0) == (i4 | 0)) {
      i3 = i2;
      if (!(_memcmp((HEAP32[i11 + 20 >> 2] | 0) + i3 | 0, (HEAP32[i27 >> 2] | 0) + i12 | 0, i13) | 0)) {
       i6 = (HEAP32[i11 + 16 >> 2] | 0) + i3 | 0;
       i8 = i6;
       i9 = (HEAP32[i26 >> 2] | 0) + i12 | 0;
       i10 = i9;
       i3 = 0;
       i5 = 1;
       do {
        i5 = ((HEAP32[i8 + (i3 << 2) >> 2] | 0) + i6 | 0) == ((HEAP32[i10 + (i3 << 2) >> 2] | 0) + i9 | 0) ? i5 : 0;
        i3 = i3 + 1 | 0;
       } while ((i3 | 0) != (i4 | 0));
       if (i5 | 0) break L52;
      }
     }
    }
    i11 = HEAP32[i11 >> 2] | 0;
    if (!i11) {
     i20 = 47;
     break;
    }
   }
  } while (0);
  if ((i20 | 0) == 47) {
   i11 = _malloc((i4 * 6 | 0) + 24 | 0) | 0;
   if (!i11) i2 = 0; else {
    i2 = i21 + 1592 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
    i2 = i11 + 8 | 0;
    HEAP32[i2 >> 2] = -1;
    HEAP32[i11 + 12 >> 2] = i4;
    i3 = i11 + 16 | 0;
    if (!i4) {
     HEAP32[i3 >> 2] = 0;
     HEAP32[i11 + 20 >> 2] = 0;
    } else {
     HEAP32[i3 >> 2] = 16;
     i3 = (i4 << 2) + 16 | 0;
     i8 = i11 + 20 | 0;
     HEAP32[i8 >> 2] = i3;
     i9 = i2;
     i6 = i9 + 16 | 0;
     i10 = i24;
     if (i7) {
      i5 = -16 - i9 | 0;
      i3 = 0;
      do {
       i4 = (HEAP32[i26 >> 2] | 0) + i10 | 0;
       HEAP32[i6 + (i3 << 2) >> 2] = (HEAP32[i4 + (i3 << 2) >> 2] | 0) + i5 + i4;
       i3 = i3 + 1 | 0;
       i4 = HEAP32[i25 >> 2] | 0;
      } while ((i3 | 0) < (i4 | 0));
      i3 = HEAP32[i8 >> 2] | 0;
     }
     _memcpy(i3 + i9 | 0, (HEAP32[i27 >> 2] | 0) + i10 | 0, i4 << 1 | 0) | 0;
    }
    HEAP32[i11 + 4 >> 2] = i1;
    HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
    HEAP32[i14 >> 2] = i11;
   }
  }
  i1 = i21 + 1304 + ((i22 & 67) << 2) | 0;
  i3 = _malloc(12) | 0;
  if (!i3) i2 = 0; else {
   HEAP32[i3 + 4 >> 2] = i22;
   HEAP32[i3 + 8 >> 2] = i2;
   HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i1 >> 2] = i3;
   i28 = i21 + 1584 | 0;
   HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
   i28 = i21 + 1580 | 0;
   HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + (HEAP32[i23 >> 2] | 0);
  }
 }
 if (HEAP32[i25 >> 2] | 0) {
  i1 = i24;
  _free((HEAP32[i26 >> 2] | 0) + i1 | 0);
  if (HEAP32[i25 >> 2] | 0) _free((HEAP32[i27 >> 2] | 0) + i1 | 0);
 }
 _free(i24);
 i28 = i2;
 return i28 | 0;
}

function _ft_lzwstate_io(i21, i18, i19) {
 i21 = i21 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i20 = i25;
 i22 = i21 + 68 | 0;
 i2 = HEAP32[i22 >> 2] | 0;
 i23 = i21 + 64 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = i21 + 72 | 0;
 i1 = HEAP32[i24 >> 2] | 0;
 if (!i19) {
  i21 = 0;
  i20 = i1;
  i18 = i3;
  i19 = i2;
  HEAP32[i23 >> 2] = i18;
  HEAP32[i22 >> 2] = i19;
  HEAP32[i24 >> 2] = i20;
  STACKTOP = i25;
  return i21 | 0;
 }
 L4 : do switch (HEAP32[i21 >> 2] | 0) {
 case 0:
  {
   i4 = i21 + 164 | 0;
   if (!(_FT_Stream_Seek(HEAP32[i4 >> 2] | 0, 2) | 0)) if ((_FT_Stream_TryRead(HEAP32[i4 >> 2] | 0, i20, 1) | 0) == 1) {
    i4 = HEAPU8[i20 >> 0] | 0;
    i5 = i4 & 31;
    HEAP32[i21 + 40 >> 2] = i5;
    HEAP32[i21 + 44 >> 2] = i4 & 128;
    i6 = 1 << i5;
    HEAP32[i21 + 48 >> 2] = i6 + -256;
    if (i5 >>> 0 <= 16) {
     HEAP32[i21 + 52 >> 2] = 9;
     HEAP32[i21 + 56 >> 2] = i4 >>> 7;
     HEAP32[i21 + 60 >> 2] = i5 >>> 0 > 9 ? 256 : i6 + -255 | 0;
     i4 = _ft_lzwstate_get_code(i21) | 0;
     if (i4 >>> 0 > 255) i1 = 0; else {
      if (i18 | 0) HEAP8[i18 >> 0] = i4;
      if (i19 >>> 0 >= 2) {
       HEAP32[i21 >> 2] = 1;
       i16 = 1;
       i1 = 0;
       i3 = i4;
       i2 = i4;
       i17 = 12;
       break L4;
      }
      i21 = 1;
      i20 = 0;
      i18 = i4;
      i19 = i4;
      HEAP32[i23 >> 2] = i18;
      HEAP32[i22 >> 2] = i19;
      HEAP32[i24 >> 2] = i20;
      STACKTOP = i25;
      return i21 | 0;
     }
    }
   }
   i4 = 0;
   i17 = 68;
   break;
  }
 case 1:
  {
   i16 = 0;
   i17 = 12;
   break;
  }
 case 2:
  {
   i4 = 0;
   i11 = i1;
   i6 = i21 + 92 | 0;
   i5 = i21 + 88 | 0;
   i17 = 54;
   break;
  }
 default:
  {
   i21 = 0;
   i20 = i1;
   i18 = i3;
   i19 = i2;
   HEAP32[i23 >> 2] = i18;
   HEAP32[i22 >> 2] = i19;
   HEAP32[i24 >> 2] = i20;
   STACKTOP = i25;
   return i21 | 0;
  }
 } while (0);
 L21 : while (1) if ((i17 | 0) == 12) {
  i4 = _ft_lzwstate_get_code(i21) | 0;
  if ((i4 | 0) < 0) {
   i4 = i16;
   i17 = 68;
   continue;
  }
  i5 = i21 + 44 | 0;
  i7 = i21 + 56 | 0;
  i6 = i21 + 32 | 0;
  while (1) {
   if ((i4 | 0) != 256) {
    i17 = 19;
    break;
   }
   if (!(HEAP32[i5 >> 2] | 0)) {
    i1 = 256;
    i17 = 20;
    break;
   }
   HEAP32[i7 >> 2] = 0;
   HEAP8[i6 >> 0] = 1;
   i4 = _ft_lzwstate_get_code(i21) | 0;
   if ((i4 | 0) < 0) {
    i4 = i16;
    i3 = 0;
    i2 = 0;
    i17 = 68;
    continue L21;
   } else {
    i3 = 0;
    i2 = 0;
   }
  }
  if ((i17 | 0) == 19) {
   i17 = 0;
   if (i4 >>> 0 > 255) {
    i1 = i4;
    i17 = 20;
   } else {
    i2 = i4;
    i1 = i4;
   }
  }
  L32 : do if ((i17 | 0) == 20) {
   i17 = 0;
   i5 = i1 + -256 | 0;
   i4 = HEAP32[i7 >> 2] | 0;
   if (i5 >>> 0 < i4 >>> 0) i4 = i1; else {
    if (i5 >>> 0 > i4 >>> 0) {
     i4 = i16;
     i17 = 68;
     continue L21;
    }
    i10 = i21 + 92 | 0;
    i4 = HEAP32[i10 >> 2] | 0;
    i9 = i21 + 96 | 0;
    i6 = HEAP32[i9 >> 2] | 0;
    do if (i4 >>> 0 < i6 >>> 0) {
     i5 = i4;
     i4 = HEAP32[i21 + 88 >> 2] | 0;
    } else {
     i7 = HEAP32[i21 + 168 >> 2] | 0;
     i5 = i6 + 4 + (i6 >>> 1) | 0;
     i8 = i21 + 88 | 0;
     i4 = HEAP32[i8 >> 2] | 0;
     if ((i4 | 0) == (i21 + 100 | 0)) {
      HEAP32[i8 >> 2] = 0;
      i6 = 0;
      i4 = 0;
     }
     if (i5 >>> 0 > 65536) {
      if ((i6 | 0) != 65536) {
       i5 = 65536;
       i17 = 28;
      }
     } else i17 = 28;
     if ((i17 | 0) == 28) {
      i17 = 0;
      i4 = _ft_mem_realloc(i7, 1, i6, i5, i4, i20) | 0;
      HEAP32[i8 >> 2] = i4;
      if (!(HEAP32[i20 >> 2] | 0)) {
       HEAP32[i9 >> 2] = i5;
       i5 = HEAP32[i10 >> 2] | 0;
       break;
      }
     }
     i4 = i16;
     i17 = 68;
     continue L21;
    } while (0);
    HEAP32[i10 >> 2] = i5 + 1;
    HEAP8[i4 + i5 >> 0] = i2;
    if (i3 >>> 0 > 255) i4 = i3; else {
     i2 = i3;
     break;
    }
   }
   i9 = i21 + 76 | 0;
   i10 = i21 + 92 | 0;
   i11 = i21 + 96 | 0;
   i12 = i21 + 80 | 0;
   i13 = i21 + 88 | 0;
   i14 = i21 + 168 | 0;
   i15 = i21 + 100 | 0;
   i5 = HEAP32[i9 >> 2] | 0;
   while (1) {
    if (!i5) {
     i4 = i16;
     i17 = 68;
     continue L21;
    }
    i5 = HEAP32[i10 >> 2] | 0;
    i7 = HEAP32[i11 >> 2] | 0;
    if (i5 >>> 0 < i7 >>> 0) {
     i6 = i5;
     i5 = HEAP32[i13 >> 2] | 0;
    } else {
     i8 = HEAP32[i14 >> 2] | 0;
     i6 = i7 + 4 + (i7 >>> 1) | 0;
     i5 = HEAP32[i13 >> 2] | 0;
     if ((i5 | 0) == (i15 | 0)) {
      HEAP32[i13 >> 2] = 0;
      i7 = 0;
      i5 = 0;
     }
     if (i6 >>> 0 > 65536) if ((i7 | 0) == 65536) break; else i6 = 65536;
     i5 = _ft_mem_realloc(i8, 1, i7, i6, i5, i20) | 0;
     HEAP32[i13 >> 2] = i5;
     if (HEAP32[i20 >> 2] | 0) break;
     HEAP32[i11 >> 2] = i6;
     i6 = HEAP32[i10 >> 2] | 0;
    }
    i8 = i4 + -256 | 0;
    i4 = HEAP8[(HEAP32[i12 >> 2] | 0) + i8 >> 0] | 0;
    HEAP32[i10 >> 2] = i6 + 1;
    HEAP8[i5 + i6 >> 0] = i4;
    i5 = HEAP32[i9 >> 2] | 0;
    i8 = HEAP16[i5 + (i8 << 1) >> 1] | 0;
    i4 = i8 & 65535;
    if ((i8 & 65535) <= 255) {
     i2 = i4;
     break L32;
    }
   }
   i4 = i16;
   i17 = 68;
   continue L21;
  } while (0);
  i10 = i21 + 92 | 0;
  i6 = HEAP32[i10 >> 2] | 0;
  i9 = i21 + 96 | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  do if (i6 >>> 0 < i4 >>> 0) {
   i4 = i21 + 88 | 0;
   i5 = i4;
   i4 = HEAP32[i4 >> 2] | 0;
  } else {
   i8 = HEAP32[i21 + 168 >> 2] | 0;
   i6 = i4 + 4 + (i4 >>> 1) | 0;
   i5 = i21 + 88 | 0;
   i7 = HEAP32[i5 >> 2] | 0;
   if ((i7 | 0) == (i21 + 100 | 0)) {
    HEAP32[i5 >> 2] = 0;
    i4 = 0;
    i7 = 0;
   }
   if (i6 >>> 0 > 65536) {
    if ((i4 | 0) != 65536) {
     i6 = 65536;
     i17 = 50;
    }
   } else i17 = 50;
   if ((i17 | 0) == 50) {
    i4 = _ft_mem_realloc(i8, 1, i4, i6, i7, i20) | 0;
    HEAP32[i5 >> 2] = i4;
    if (!(HEAP32[i20 >> 2] | 0)) {
     HEAP32[i9 >> 2] = i6;
     i6 = HEAP32[i10 >> 2] | 0;
     break;
    }
   }
   i4 = i16;
   i17 = 68;
   continue L21;
  } while (0);
  HEAP32[i10 >> 2] = i6 + 1;
  HEAP8[i4 + i6 >> 0] = i2;
  HEAP32[i21 >> 2] = 2;
  i4 = i16;
  i11 = i1;
  i6 = i10;
  i17 = 54;
  continue;
 } else if ((i17 | 0) == 54) {
  L81 : do if (!i18) {
   i1 = i4;
   i4 = HEAP32[i6 >> 2] | 0;
   while (1) {
    if (!i4) break L81;
    i4 = i4 + -1 | 0;
    HEAP32[i6 >> 2] = i4;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) == (i19 | 0)) {
     i4 = i19;
     i1 = i11;
     i17 = 69;
     break L21;
    }
   }
  } else {
   i1 = i4;
   while (1) {
    i4 = HEAP32[i6 >> 2] | 0;
    if (!i4) break L81;
    i17 = i4 + -1 | 0;
    HEAP32[i6 >> 2] = i17;
    HEAP8[i18 + i1 >> 0] = HEAP8[(HEAP32[i5 >> 2] | 0) + i17 >> 0] | 0;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) == (i19 | 0)) {
     i4 = i19;
     i1 = i11;
     i17 = 69;
     break L21;
    }
   }
  } while (0);
  i10 = i21 + 56 | 0;
  i4 = HEAP32[i10 >> 2] | 0;
  if (i4 >>> 0 < (HEAP32[i21 + 48 >> 2] | 0) >>> 0) {
   i8 = i21 + 84 | 0;
   i9 = HEAP32[i8 >> 2] | 0;
   do if (i4 >>> 0 < i9 >>> 0) {
    i5 = i21 + 76 | 0;
    i6 = i21 + 80 | 0;
   } else {
    i4 = (i9 | 0) == 0 ? 512 : (i9 >>> 2) + i9 | 0;
    i5 = i21 + 76 | 0;
    i6 = _ft_mem_realloc(HEAP32[i21 + 168 >> 2] | 0, 3, i9, i4, HEAP32[i5 >> 2] | 0, i20) | 0;
    HEAP32[i5 >> 2] = i6;
    i7 = i6 + (i4 << 1) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) {
     i17 = i21 + 80 | 0;
     HEAP32[i17 >> 2] = i7;
     _memmove(i7 | 0, i6 + (i9 << 1) | 0, i9 | 0) | 0;
     HEAP32[i8 >> 2] = i4;
     i6 = i17;
     i4 = HEAP32[i10 >> 2] | 0;
     break;
    } else {
     i4 = i1;
     i1 = i11;
     i17 = 68;
     continue L21;
    }
   } while (0);
   HEAP16[(HEAP32[i5 >> 2] | 0) + (i4 << 1) >> 1] = i3;
   HEAP8[(HEAP32[i6 >> 2] | 0) + i4 >> 0] = i2;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  HEAP32[i21 >> 2] = 1;
  i16 = i1;
  i1 = i11;
  i3 = i11;
  i17 = 12;
  continue;
 } else if ((i17 | 0) == 68) {
  HEAP32[i21 >> 2] = 3;
  i17 = 69;
  break;
 }
 if ((i17 | 0) == 69) {
  HEAP32[i23 >> 2] = i3;
  HEAP32[i22 >> 2] = i2;
  HEAP32[i24 >> 2] = i1;
  STACKTOP = i25;
  return i4 | 0;
 }
 return 0;
}

function _gray_render_scanline(i39, i6, i1, i11, i2, i36) {
 i39 = i39 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i36 = i36 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i37 = 0, i38 = 0;
 i3 = i2 - i1 | 0;
 i5 = i1 >> 8;
 i37 = i2 >> 8;
 i4 = i1 - (i5 << 8) | 0;
 i32 = i2 - (i37 << 8) | 0;
 if ((i36 | 0) == (i11 | 0)) {
  i12 = i6 - (HEAP32[i39 + 172 >> 2] | 0) | 0;
  i9 = HEAP32[i39 + 168 >> 2] | 0;
  i9 = ((i9 | 0) < (i37 | 0) ? i9 : i37) - (HEAP32[i39 + 164 >> 2] | 0) | 0;
  i9 = (i9 | 0) > -1 ? i9 : -1;
  i10 = i39 + 156 | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i9 | 0) == (i2 | 0)) {
   if ((i12 | 0) != (HEAP32[i39 + 160 >> 2] | 0)) i38 = 4;
  } else i38 = 4;
  if ((i38 | 0) == 4) {
   i11 = i39 + 188 | 0;
   if (!(HEAP32[i39 + 196 >> 2] | 0)) {
    i7 = HEAP32[i11 >> 2] | 0;
    i1 = i39 + 192 | 0;
    i8 = HEAP32[i1 >> 2] | 0;
    if (i8 | i7) {
     i6 = HEAP32[i39 + 180 >> 2] | 0;
     i6 = (i2 | 0) > (i6 | 0) ? i6 : i2;
     i2 = (HEAP32[i39 + 1420 >> 2] | 0) + (HEAP32[i39 + 160 >> 2] << 2) | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     L10 : do if (!i3) {
      i3 = 0;
      i38 = 11;
     } else while (1) {
      i4 = HEAP32[i3 >> 2] | 0;
      if ((i4 | 0) > (i6 | 0)) {
       i38 = 11;
       break L10;
      }
      if ((i4 | 0) == (i6 | 0)) {
       i13 = i3;
       break L10;
      }
      i2 = i3 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if (!i3) {
       i3 = 0;
       i38 = 11;
       break;
      }
     } while (0);
     do if ((i38 | 0) == 11) {
      i4 = i39 + 208 | 0;
      i5 = HEAP32[i4 >> 2] | 0;
      if ((i5 | 0) < (HEAP32[i39 + 204 >> 2] | 0)) {
       i38 = HEAP32[i39 + 200 >> 2] | 0;
       HEAP32[i4 >> 2] = i5 + 1;
       i13 = i38 + (i5 << 4) | 0;
       HEAP32[i13 >> 2] = i6;
       HEAP32[i38 + (i5 << 4) + 8 >> 2] = 0;
       HEAP32[i38 + (i5 << 4) + 4 >> 2] = 0;
       HEAP32[i38 + (i5 << 4) + 12 >> 2] = i3;
       HEAP32[i2 >> 2] = i13;
       break;
      } else _longjmp(i39 | 0, 1);
     } while (0);
     i38 = i13 + 8 | 0;
     HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + i7;
     i38 = i13 + 4 | 0;
     HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + i8;
    }
   } else i1 = i39 + 192 | 0;
   HEAP32[i11 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i10 >> 2] = i9;
   HEAP32[i39 + 160 >> 2] = i12;
  }
  if (i12 >>> 0 < (HEAP32[i39 + 184 >> 2] | 0) >>> 0) i1 = (i9 | 0) >= (HEAP32[i39 + 180 >> 2] | 0); else i1 = 1;
  HEAP32[i39 + 196 >> 2] = i1 & 1;
  return;
 }
 i1 = i36 - i11 | 0;
 if ((i5 | 0) == (i37 | 0)) {
  i37 = Math_imul(i32 + i4 | 0, i1) | 0;
  i38 = i39 + 188 | 0;
  HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + i37;
  i39 = i39 + 192 | 0;
  HEAP32[i39 >> 2] = (HEAP32[i39 >> 2] | 0) + i1;
  return;
 }
 i10 = (i3 | 0) < 0;
 i30 = i3 >> 31;
 i31 = i30 + 256 & -256;
 i29 = i10 ? 0 - i3 | 0 : i3;
 i30 = i30 | 1;
 i10 = Math_imul(i10 ? i4 : 256 - i4 | 0, i1) | 0;
 i13 = (i10 | 0) % (i29 | 0) | 0;
 i10 = (i13 >> 31) + ((i10 | 0) / (i29 | 0) | 0) | 0;
 i14 = (i13 | 0) < 0 ? i29 : 0;
 i7 = Math_imul(i10, i31 + i4 | 0) | 0;
 i27 = i39 + 188 | 0;
 i7 = i7 + (HEAP32[i27 >> 2] | 0) | 0;
 HEAP32[i27 >> 2] = i7;
 i28 = i39 + 192 | 0;
 i8 = (HEAP32[i28 >> 2] | 0) + i10 | 0;
 HEAP32[i28 >> 2] = i8;
 i12 = i30 + i5 | 0;
 i23 = i6 - (HEAP32[i39 + 172 >> 2] | 0) | 0;
 i24 = HEAP32[i39 + 168 >> 2] | 0;
 i25 = HEAP32[i39 + 164 >> 2] | 0;
 i6 = ((i24 | 0) < (i12 | 0) ? i24 : i12) - i25 | 0;
 i6 = (i6 | 0) > -1 ? i6 : -1;
 i26 = i39 + 156 | 0;
 i1 = HEAP32[i26 >> 2] | 0;
 if ((i6 | 0) == (i1 | 0)) if ((i23 | 0) == (HEAP32[i39 + 160 >> 2] | 0)) {
  i2 = i7;
  i3 = i8;
 } else i38 = 23; else i38 = 23;
 if ((i38 | 0) == 23) {
  if (!((HEAP32[i39 + 196 >> 2] | 0) != 0 | (i8 | i7 | 0) == 0)) {
   i5 = HEAP32[i39 + 180 >> 2] | 0;
   i5 = (i1 | 0) > (i5 | 0) ? i5 : i1;
   i1 = (HEAP32[i39 + 1420 >> 2] | 0) + (HEAP32[i39 + 160 >> 2] << 2) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   L39 : do if (!i2) {
    i2 = 0;
    i38 = 28;
   } else while (1) {
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) > (i5 | 0)) {
     i38 = 28;
     break L39;
    }
    if ((i3 | 0) == (i5 | 0)) {
     i9 = i2;
     break L39;
    }
    i1 = i2 + 12 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i2 = 0;
     i38 = 28;
     break;
    }
   } while (0);
   do if ((i38 | 0) == 28) {
    i3 = i39 + 208 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) < (HEAP32[i39 + 204 >> 2] | 0)) {
     i22 = HEAP32[i39 + 200 >> 2] | 0;
     HEAP32[i3 >> 2] = i4 + 1;
     i9 = i22 + (i4 << 4) | 0;
     HEAP32[i9 >> 2] = i5;
     HEAP32[i22 + (i4 << 4) + 8 >> 2] = 0;
     HEAP32[i22 + (i4 << 4) + 4 >> 2] = 0;
     HEAP32[i22 + (i4 << 4) + 12 >> 2] = i2;
     HEAP32[i1 >> 2] = i9;
     break;
    } else _longjmp(i39 | 0, 1);
   } while (0);
   i22 = i9 + 8 | 0;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + i7;
   i22 = i9 + 4 | 0;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + i8;
  }
  HEAP32[i27 >> 2] = 0;
  HEAP32[i28 >> 2] = 0;
  HEAP32[i26 >> 2] = i6;
  HEAP32[i39 + 160 >> 2] = i23;
  i2 = 0;
  i3 = 0;
 }
 i22 = i23 >>> 0 < (HEAP32[i39 + 184 >> 2] | 0) >>> 0;
 if (i22) i1 = (i6 | 0) >= (HEAP32[i39 + 180 >> 2] | 0); else i1 = 1;
 i4 = i1 & 1;
 i21 = i39 + 196 | 0;
 HEAP32[i21 >> 2] = i4;
 i1 = i10 + i11 | 0;
 do if ((i12 | 0) == (i37 | 0)) {
  i33 = i1;
  i34 = i2;
  i35 = i3;
 } else {
  i11 = i10 + i36 - i1 << 8;
  i10 = (i11 | 0) % (i29 | 0) | 0;
  i11 = (i10 >> 31) + ((i11 | 0) / (i29 | 0) | 0) | 0;
  i10 = ((i10 | 0) < 0 ? i29 : 0) + i10 | 0;
  i15 = i39 + 160 | 0;
  i16 = i39 + 180 | 0;
  i17 = i39 + 1420 | 0;
  i18 = i39 + 208 | 0;
  i19 = i39 + 204 | 0;
  i20 = i39 + 200 | 0;
  i9 = i1;
  i8 = i13 - i29 + i14 | 0;
  i7 = i6;
  i1 = i4;
  i4 = i6;
  while (1) {
   i5 = i10 + i8 | 0;
   i13 = i11 + (i5 >>> 31 ^ 1) | 0;
   i8 = i5 - ((i5 | 0) > -1 ? i29 : 0) | 0;
   i5 = i2 + (i13 << 8) | 0;
   i6 = i3 + i13 | 0;
   i9 = i13 + i9 | 0;
   i12 = i12 + i30 | 0;
   i13 = ((i24 | 0) < (i12 | 0) ? i24 : i12) - i25 | 0;
   i14 = i7;
   i7 = (i13 | 0) > -1 ? i13 : -1;
   if ((i7 | 0) == (i14 | 0)) {
    i2 = i5;
    i3 = i6;
   } else {
    if (!((i1 | 0) != 0 | (i6 | i5 | 0) == 0)) {
     i2 = HEAP32[i16 >> 2] | 0;
     i4 = (i4 | 0) > (i2 | 0) ? i2 : i4;
     i2 = (HEAP32[i17 >> 2] | 0) + (i23 << 2) | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     L63 : do if (!i1) {
      i1 = 0;
      i38 = 43;
     } else while (1) {
      i3 = HEAP32[i1 >> 2] | 0;
      if ((i3 | 0) > (i4 | 0)) {
       i38 = 43;
       break L63;
      }
      if ((i3 | 0) == (i4 | 0)) break L63;
      i2 = i1 + 12 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i1 = 0;
       i38 = 43;
       break;
      }
     } while (0);
     if ((i38 | 0) == 43) {
      i38 = 0;
      i3 = HEAP32[i18 >> 2] | 0;
      if ((i3 | 0) >= (HEAP32[i19 >> 2] | 0)) {
       i38 = 44;
       break;
      }
      i13 = HEAP32[i20 >> 2] | 0;
      HEAP32[i18 >> 2] = i3 + 1;
      i14 = i13 + (i3 << 4) | 0;
      HEAP32[i14 >> 2] = i4;
      HEAP32[i13 + (i3 << 4) + 8 >> 2] = 0;
      HEAP32[i13 + (i3 << 4) + 4 >> 2] = 0;
      HEAP32[i13 + (i3 << 4) + 12 >> 2] = i1;
      HEAP32[i2 >> 2] = i14;
      i1 = i14;
     }
     i14 = i1 + 8 | 0;
     HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + i5;
     i14 = i1 + 4 | 0;
     HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + i6;
    }
    HEAP32[i26 >> 2] = i7;
    HEAP32[i15 >> 2] = i23;
    i2 = 0;
    i3 = 0;
    i4 = i7;
   }
   if (i22) i1 = (i7 | 0) >= (HEAP32[i16 >> 2] | 0); else i1 = 1;
   i1 = i1 & 1;
   HEAP32[i21 >> 2] = i1;
   if ((i12 | 0) == (i37 | 0)) {
    i38 = 51;
    break;
   }
  }
  if ((i38 | 0) == 44) {
   HEAP32[i27 >> 2] = i5;
   HEAP32[i28 >> 2] = i6;
   _longjmp(i39 | 0, 1);
  } else if ((i38 | 0) == 51) {
   HEAP32[i27 >> 2] = i2;
   HEAP32[i28 >> 2] = i3;
   i33 = i9;
   i34 = i2;
   i35 = i3;
   break;
  }
 } while (0);
 i39 = i36 - i33 | 0;
 i38 = (Math_imul(i39, i32 + 256 - i31 | 0) | 0) + i34 | 0;
 HEAP32[i27 >> 2] = i38;
 HEAP32[i28 >> 2] = i35 + i39;
 return;
}

function _render_glyph(i11, i18, i2, i3, i19, i20, i17, i1, i21, i22) {
 i11 = i11 | 0;
 i18 = i18 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i17 = i17 | 0;
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i16 = i23;
 if (HEAP8[i11 + 416 >> 0] | 0) {
  i15 = (HEAP32[i18 >> 2] | 0) + i2 | 0;
  i14 = (HEAP32[i18 + 4 >> 2] | 0) + i3 | 0;
  i8 = HEAP32[i11 + 160 >> 2] | 0;
  d31 = +(HEAP32[i11 + 148 >> 2] | 0);
  d30 = +(HEAP32[i8 + 36 >> 2] | 0);
  d32 = +(HEAP32[i11 + 64 >> 2] | 0);
  i7 = ~~(d32 + d31 * 0.0 / d30);
  d28 = +(HEAP32[i11 + 144 >> 2] | 0);
  d27 = +(HEAP32[i8 + 40 >> 2] | 0);
  d29 = +(HEAP32[i11 + 56 >> 2] | 0);
  i8 = ~~(d29 + d28 * 0.0 / d27);
  i9 = ~~(d32 + d31 * d30 / d30);
  i10 = ~~(d29 + d28 * d27 / d27);
  i12 = HEAP32[i18 + 8 >> 2] | 0;
  i5 = HEAP32[i18 + 12 >> 2] | 0;
  i24 = (HEAP32[i11 + 400 >> 2] | 0) - i15 | 0;
  i26 = (HEAP32[i11 + 404 >> 2] | 0) - i14 | 0;
  i13 = (HEAP32[i11 + 408 >> 2] | 0) - i15 | 0;
  i4 = (HEAP32[i11 + 412 >> 2] | 0) - i14 | 0;
  HEAP32[i16 >> 2] = 0;
  HEAP32[i16 + 4 >> 2] = 0;
  i25 = (i24 | 0) > (i12 | 0) ? i12 : i24;
  HEAP32[i16 + 8 >> 2] = i25;
  HEAP32[i16 + 12 >> 2] = i5;
  i11 = (i5 | 0) > 0;
  i25 = i11 & (i25 | 0) > 0;
  i6 = i25 & 1;
  i24 = (i24 | 0) > 0 ? i24 : 0;
  HEAP32[i16 + (i6 << 4) >> 2] = i24;
  HEAP32[i16 + (i6 << 4) + 4 >> 2] = 0;
  i2 = (i13 | 0) > (i12 | 0) ? i12 : i13;
  HEAP32[i16 + (i6 << 4) + 8 >> 2] = i2;
  i26 = (i26 | 0) > (i5 | 0) ? i5 : i26;
  HEAP32[i16 + (i6 << 4) + 12 >> 2] = i26;
  i3 = (i2 | 0) > (i24 | 0);
  i6 = (i26 | 0) > 0 & i3 ? (i25 ? 2 : 1) : i6;
  HEAP32[i16 + (i6 << 4) >> 2] = i24;
  i4 = (i4 | 0) > 0 ? i4 : 0;
  HEAP32[i16 + (i6 << 4) + 4 >> 2] = i4;
  HEAP32[i16 + (i6 << 4) + 8 >> 2] = i2;
  HEAP32[i16 + (i6 << 4) + 12 >> 2] = i5;
  i6 = (i3 & (i5 | 0) > (i4 | 0) & 1) + i6 | 0;
  i13 = (i13 | 0) > 0 ? i13 : 0;
  HEAP32[i16 + (i6 << 4) >> 2] = i13;
  HEAP32[i16 + (i6 << 4) + 4 >> 2] = 0;
  HEAP32[i16 + (i6 << 4) + 8 >> 2] = i12;
  HEAP32[i16 + (i6 << 4) + 12 >> 2] = i5;
  i13 = i6 + (i11 & (i12 | 0) > (i13 | 0) & 1) | 0;
  L3 : do if (i13) {
   i3 = i7 - i15 | 0;
   i4 = i8 - i14 | 0;
   i5 = i9 - i15 | 0;
   i6 = i10 - i14 | 0;
   i2 = 0;
   do {
    i26 = i16 + (i2 << 4) | 0;
    i25 = HEAP32[i26 >> 2] | 0;
    HEAP32[i26 >> 2] = (i25 + i15 | 0) < (i7 | 0) ? i3 : i25;
    i26 = i16 + (i2 << 4) + 4 | 0;
    i25 = HEAP32[i26 >> 2] | 0;
    HEAP32[i26 >> 2] = (i25 + i14 | 0) < (i8 | 0) ? i4 : i25;
    i26 = i16 + (i2 << 4) + 8 | 0;
    i25 = HEAP32[i26 >> 2] | 0;
    HEAP32[i26 >> 2] = (i25 + i15 | 0) > (i9 | 0) ? i5 : i25;
    i26 = i16 + (i2 << 4) + 12 | 0;
    i25 = HEAP32[i26 >> 2] | 0;
    HEAP32[i26 >> 2] = (i25 + i14 | 0) > (i10 | 0) ? i6 : i25;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i13 | 0));
   i12 = i18 + 20 | 0;
   i11 = i18 + 16 | 0;
   i10 = 0;
   while (1) {
    i7 = HEAP32[i16 + (i10 << 4) + 8 >> 2] | 0;
    i6 = HEAP32[i16 + (i10 << 4) >> 2] | 0;
    if ((i7 | 0) > (i6 | 0)) {
     i8 = HEAP32[i16 + (i10 << 4) + 12 >> 2] | 0;
     i9 = HEAP32[i16 + (i10 << 4) + 4 >> 2] | 0;
     if ((i8 | 0) > (i9 | 0)) {
      if ((i6 | 0) < (i17 | 0)) {
       i2 = (i7 | 0) < (i17 | 0) ? i7 : i17;
       i3 = HEAP32[i11 >> 2] | 0;
       i4 = (HEAP32[i12 >> 2] | 0) + (Math_imul(i3, i9) | 0) + i6 | 0;
       i5 = _malloc(44) | 0;
       if (!i5) {
        i2 = 10;
        break;
       }
       HEAP32[i5 >> 2] = i2 - i6;
       HEAP32[i5 + 4 >> 2] = i8 - i9;
       HEAP32[i5 + 8 >> 2] = i3;
       HEAP32[i5 + 12 >> 2] = i4;
       HEAP32[i5 + 16 >> 2] = i19;
       HEAP32[i5 + 20 >> 2] = i6 + i15;
       HEAP32[i5 + 24 >> 2] = i9 + i14;
       HEAP32[i5 + 36 >> 2] = i22;
       _ass_cache_inc_ref(i22);
       HEAP32[i5 + 40 >> 2] = 0;
       HEAP32[i5 + 32 >> 2] = i21;
       HEAP32[i1 >> 2] = i5;
       i1 = i5 + 28 | 0;
      } else i2 = i17;
      if ((i2 | 0) < (i7 | 0)) {
       i2 = (i2 | 0) < (i6 | 0) ? i6 : i2;
       i3 = HEAP32[i11 >> 2] | 0;
       i5 = (HEAP32[i12 >> 2] | 0) + (Math_imul(i3, i9) | 0) + i2 | 0;
       i4 = _malloc(44) | 0;
       if (!i4) {
        i2 = 15;
        break;
       }
       HEAP32[i4 >> 2] = i7 - i2;
       HEAP32[i4 + 4 >> 2] = i8 - i9;
       HEAP32[i4 + 8 >> 2] = i3;
       HEAP32[i4 + 12 >> 2] = i5;
       HEAP32[i4 + 16 >> 2] = i20;
       HEAP32[i4 + 20 >> 2] = i2 + i15;
       HEAP32[i4 + 24 >> 2] = i9 + i14;
       HEAP32[i4 + 36 >> 2] = i22;
       _ass_cache_inc_ref(i22);
       HEAP32[i4 + 40 >> 2] = 0;
       HEAP32[i4 + 32 >> 2] = i21;
       HEAP32[i1 >> 2] = i4;
       i1 = i4 + 28 | 0;
      }
     }
    }
    i10 = i10 + 1 | 0;
    if ((i10 | 0) >= (i13 | 0)) break L3;
   }
   if ((i2 | 0) == 10) {
    if (i22 | 0) break;
    _ass_aligned_free(i4);
    break;
   } else if ((i2 | 0) == 15) {
    if (i22 | 0) break;
    _ass_aligned_free(i5);
    break;
   }
  } while (0);
  i26 = i1;
  STACKTOP = i23;
  return i26 | 0;
 }
 i4 = HEAP32[i18 >> 2] | 0;
 i13 = i4 + i2 | 0;
 i12 = (HEAP32[i18 + 4 >> 2] | 0) + i3 | 0;
 i2 = i17 - i4 | 0;
 i3 = i11 + 400 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i26 = (i4 | 0) > 0;
 i6 = i11 + 136 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 i4 = ((i26 ? i4 : 0) | 0) > (i5 | 0);
 if (i26 | i4) i10 = HEAP32[(i4 ? i6 : i3) >> 2] | 0; else i10 = 0;
 i3 = i11 + 404 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i26 = (i4 | 0) > 0;
 i8 = i11 + 140 | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 i4 = ((i26 ? i4 : 0) | 0) > (i7 | 0);
 if (i26 | i4) i9 = HEAP32[(i4 ? i8 : i3) >> 2] | 0; else i9 = 0;
 i4 = i11 + 408 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i26 = (i3 | 0) > 0;
 i3 = ((i26 ? i3 : 0) | 0) > (i5 | 0);
 if (i26 | i3) i5 = HEAP32[(i3 ? i6 : i4) >> 2] | 0; else i5 = 0;
 i4 = i11 + 412 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i26 = (i3 | 0) > 0;
 i3 = ((i26 ? i3 : 0) | 0) > (i7 | 0);
 if (i26 | i3) i3 = HEAP32[(i3 ? i8 : i4) >> 2] | 0; else i3 = 0;
 i8 = HEAP32[i18 + 8 >> 2] | 0;
 i7 = HEAP32[i18 + 12 >> 2] | 0;
 i6 = i13 - i10 | 0;
 i6 = (i6 | 0) < 0 ? 0 - i6 | 0 : 0;
 i9 = i12 - i9 | 0;
 i9 = (i9 | 0) < 0 ? 0 - i9 | 0 : 0;
 i26 = i5 - i13 | 0;
 i8 = (i26 | 0) < (i8 | 0) ? i26 : i8;
 i26 = i3 - i12 | 0;
 i7 = (i26 | 0) < (i7 | 0) ? i26 : i7;
 if (!((i6 | 0) < (i8 | 0) & (i7 | 0) > (i9 | 0))) {
  i26 = i1;
  STACKTOP = i23;
  return i26 | 0;
 }
 do if ((i2 | 0) > (i6 | 0)) {
  i2 = (i2 | 0) > (i8 | 0) ? i8 : i2;
  i3 = HEAP32[i18 + 16 >> 2] | 0;
  i4 = (HEAP32[i18 + 20 >> 2] | 0) + (Math_imul(i3, i9) | 0) + i6 | 0;
  i5 = _malloc(44) | 0;
  if (i5 | 0) {
   HEAP32[i5 >> 2] = i2 - i6;
   HEAP32[i5 + 4 >> 2] = i7 - i9;
   HEAP32[i5 + 8 >> 2] = i3;
   HEAP32[i5 + 12 >> 2] = i4;
   HEAP32[i5 + 16 >> 2] = i19;
   HEAP32[i5 + 20 >> 2] = i6 + i13;
   HEAP32[i5 + 24 >> 2] = i9 + i12;
   HEAP32[i5 + 36 >> 2] = i22;
   _ass_cache_inc_ref(i22);
   HEAP32[i5 + 40 >> 2] = 0;
   HEAP32[i5 + 32 >> 2] = i21;
   HEAP32[i1 >> 2] = i5;
   i1 = i5 + 28 | 0;
   break;
  }
  if (i22 | 0) {
   i26 = i1;
   STACKTOP = i23;
   return i26 | 0;
  }
  _ass_aligned_free(i4);
  i26 = i1;
  STACKTOP = i23;
  return i26 | 0;
 } while (0);
 if ((i2 | 0) >= (i8 | 0)) {
  i26 = i1;
  STACKTOP = i23;
  return i26 | 0;
 }
 i4 = (i2 | 0) < (i6 | 0) ? i6 : i2;
 i5 = HEAP32[i18 + 16 >> 2] | 0;
 i2 = (HEAP32[i18 + 20 >> 2] | 0) + (Math_imul(i5, i9) | 0) + i4 | 0;
 i3 = _malloc(44) | 0;
 if (i3 | 0) {
  HEAP32[i3 >> 2] = i8 - i4;
  HEAP32[i3 + 4 >> 2] = i7 - i9;
  HEAP32[i3 + 8 >> 2] = i5;
  HEAP32[i3 + 12 >> 2] = i2;
  HEAP32[i3 + 16 >> 2] = i20;
  HEAP32[i3 + 20 >> 2] = i4 + i13;
  HEAP32[i3 + 24 >> 2] = i9 + i12;
  HEAP32[i3 + 36 >> 2] = i22;
  _ass_cache_inc_ref(i22);
  HEAP32[i3 + 40 >> 2] = 0;
  HEAP32[i3 + 32 >> 2] = i21;
  HEAP32[i1 >> 2] = i3;
  i26 = i3 + 28 | 0;
  STACKTOP = i23;
  return i26 | 0;
 }
 if (i22 | 0) {
  i26 = i1;
  STACKTOP = i23;
  return i26 | 0;
 }
 _ass_aligned_free(i2);
 i26 = i1;
 STACKTOP = i23;
 return i26 | 0;
}

function _big2_scanPi(i5, i11, i15, i16) {
 i5 = i5 | 0;
 i11 = i11 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0;
 if ((i11 | 0) == (i15 | 0)) {
  i16 = -1;
  return i16 | 0;
 }
 i8 = HEAP8[i11 >> 0] | 0;
 L4 : do switch (i8 << 24 >> 24) {
 case 0:
  {
   i3 = HEAP8[i11 + 1 >> 0] | 0;
   switch (HEAP8[i5 + 76 + (i3 & 255) >> 0] | 0) {
   case 29:
    {
     i4 = i3;
     i13 = 8;
     break L4;
    }
   case 24:
   case 22:
    {
     i9 = i3;
     break L4;
    }
   case 7:
    {
     i13 = 14;
     break L4;
    }
   case 5:
    {
     if ((i15 - i11 | 0) < 2) {
      i16 = -2;
      return i16 | 0;
     }
     HEAP32[i16 >> 2] = i11;
     i16 = 0;
     return i16 | 0;
    }
   case 6:
    {
     if ((i15 - i11 | 0) < 3) {
      i16 = -2;
      return i16 | 0;
     }
     HEAP32[i16 >> 2] = i11;
     i16 = 0;
     return i16 | 0;
    }
   default:
    {
     i13 = 16;
     break L4;
    }
   }
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i13 = 14;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i13 = 16;
   break;
  }
 case -1:
  {
   i3 = HEAP8[i11 + 1 >> 0] | 0;
   if ((i3 & 255) > 253) i13 = 16; else {
    i4 = i3;
    i13 = 8;
   }
   break;
  }
 default:
  {
   i4 = HEAP8[i11 + 1 >> 0] | 0;
   i13 = 8;
  }
 } while (0);
 if ((i13 | 0) == 8) {
  i12 = i4 & 255;
  if (!(1 << (i12 & 31) & HEAP32[25356 + ((i12 >>> 5 | HEAPU8[344737 + (i8 & 255) >> 0] << 3) << 2) >> 2])) {
   HEAP32[i16 >> 2] = i11;
   i16 = 0;
   return i16 | 0;
  } else i9 = i4;
 } else if ((i13 | 0) == 14) {
  if ((i15 - i11 | 0) < 4) {
   i16 = -2;
   return i16 | 0;
  }
  HEAP32[i16 >> 2] = i11;
  i16 = 0;
  return i16 | 0;
 } else if ((i13 | 0) == 16) {
  HEAP32[i16 >> 2] = i11;
  i16 = 0;
  return i16 | 0;
 }
 i6 = i11 + 2 | 0;
 if ((i6 | 0) == (i15 | 0)) {
  i16 = -1;
  return i16 | 0;
 }
 i12 = i5 + 76 | 0;
 i5 = i6;
 i10 = i11;
 L34 : while (1) {
  i4 = HEAP8[i5 >> 0] | 0;
  switch (i4 << 24 >> 24) {
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i13 = 28;
    break L34;
   }
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i2 = i5;
    break L34;
   }
  case 0:
   {
    i3 = HEAP8[i10 + 3 >> 0] | 0;
    switch (HEAP8[i12 + (i3 & 255) >> 0] | 0) {
    case 7:
     {
      i13 = 28;
      break L34;
     }
    case 5:
     {
      i13 = 24;
      break L34;
     }
    case 6:
     {
      i13 = 26;
      break L34;
     }
    case 10:
    case 9:
    case 21:
     {
      i13 = 30;
      break L34;
     }
    case 15:
     {
      i13 = 58;
      break L34;
     }
    case 29:
     {
      i7 = i3;
      i13 = 21;
      break;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 22:
     break;
    default:
     {
      i2 = i5;
      break L34;
     }
    }
    break;
   }
  case -1:
   {
    i3 = HEAP8[i10 + 3 >> 0] | 0;
    if ((i3 & 255) > 253) {
     i2 = i5;
     break L34;
    } else {
     i7 = i3;
     i13 = 21;
    }
    break;
   }
  default:
   {
    i7 = HEAP8[i10 + 3 >> 0] | 0;
    i13 = 21;
   }
  }
  if ((i13 | 0) == 21) {
   i13 = 0;
   i3 = i7 & 255;
   if (!(1 << (i3 & 31) & HEAP32[25356 + ((i3 >>> 5 | HEAPU8[344993 + (i4 & 255) >> 0] << 3) << 2) >> 2])) {
    i13 = 23;
    break;
   }
  }
  i3 = i5 + 2 | 0;
  if ((i3 | 0) == (i15 | 0)) {
   i14 = -1;
   i13 = 73;
   break;
  } else {
   i10 = i5;
   i5 = i3;
  }
 }
 if ((i13 | 0) == 23) {
  HEAP32[i16 >> 2] = i5;
  i16 = 0;
  return i16 | 0;
 } else if ((i13 | 0) == 24) {
  if ((i15 - i5 | 0) < 2) {
   i16 = -2;
   return i16 | 0;
  }
  HEAP32[i16 >> 2] = i5;
  i16 = 0;
  return i16 | 0;
 } else if ((i13 | 0) == 26) {
  if ((i15 - i5 | 0) < 3) {
   i16 = -2;
   return i16 | 0;
  }
  HEAP32[i16 >> 2] = i5;
  i16 = 0;
  return i16 | 0;
 } else if ((i13 | 0) == 28) {
  if ((i15 - i5 | 0) < 4) {
   i16 = -2;
   return i16 | 0;
  }
  HEAP32[i16 >> 2] = i5;
  i16 = 0;
  return i16 | 0;
 } else if ((i13 | 0) == 30) {
  L61 : do if ((i5 - i11 | 0) == 6 & i8 << 24 >> 24 == 0) {
   switch (i9 << 24 >> 24 | 0) {
   case 120:
    {
     i3 = 0;
     break;
    }
   case 88:
    {
     i3 = 1;
     break;
    }
   default:
    {
     i6 = 11;
     break L61;
    }
   }
   if (!(HEAP8[i6 >> 0] | 0)) {
    switch (HEAP8[i11 + 3 >> 0] | 0) {
    case 109:
     break;
    case 77:
     {
      i3 = 1;
      break;
     }
    default:
     {
      i6 = 11;
      break L61;
     }
    }
    if (!(HEAP8[i11 + 4 >> 0] | 0)) {
     switch (HEAP8[i11 + 5 >> 0] | 0) {
     case 108:
      {
       if (!i3) {
        i6 = 12;
        break L61;
       }
       break;
      }
     case 76:
      break;
     default:
      {
       i6 = 11;
       break L61;
      }
     }
     HEAP32[i16 >> 2] = i5;
     i16 = 0;
     return i16 | 0;
    } else i6 = 11;
   } else i6 = 11;
  } else i6 = 11; while (0);
  i3 = i10 + 4 | 0;
  if ((i3 | 0) == (i15 | 0)) {
   i16 = -1;
   return i16 | 0;
  }
  i5 = i15;
  L79 : while (1) {
   i4 = HEAP8[i3 + 1 >> 0] | 0;
   L81 : do switch (HEAP8[i3 >> 0] | 0) {
   case -33:
   case -34:
   case -35:
   case -36:
    {
     i13 = 51;
     break L79;
    }
   case 0:
    switch (HEAP8[i12 + (i4 & 255) >> 0] | 0) {
    case 8:
    case 1:
    case 0:
     {
      i13 = 51;
      break L79;
     }
    case 7:
     {
      i13 = 49;
      break L81;
     }
    case 5:
     {
      if ((i5 - i3 | 0) < 2) {
       i14 = -2;
       i13 = 73;
       break L79;
      }
      i1 = i3 + 2 | 0;
      break L81;
     }
    case 6:
     {
      if ((i5 - i3 | 0) < 3) {
       i14 = -2;
       i13 = 73;
       break L79;
      }
      i1 = i3 + 3 | 0;
      break L81;
     }
    case 15:
     {
      i1 = i3 + 2 | 0;
      if ((i1 | 0) == (i15 | 0)) {
       i14 = -1;
       i13 = 73;
       break L79;
      }
      if (HEAP8[i1 >> 0] | 0) break L81;
      if ((HEAP8[i3 + 3 >> 0] | 0) == 62) {
       i13 = 56;
       break L79;
      } else break L81;
     }
    default:
     {
      i13 = 57;
      break L81;
     }
    }
   case -37:
   case -38:
   case -39:
   case -40:
    {
     i13 = 49;
     break;
    }
   case -1:
    {
     if ((i4 & 255) > 253) {
      i13 = 51;
      break L79;
     } else i13 = 57;
     break;
    }
   default:
    i13 = 57;
   } while (0);
   if ((i13 | 0) == 49) {
    i13 = 0;
    if ((i5 - i3 | 0) < 4) {
     i14 = -2;
     i13 = 73;
     break;
    }
    i1 = i3 + 4 | 0;
   } else if ((i13 | 0) == 57) {
    i13 = 0;
    i1 = i3 + 2 | 0;
   }
   if ((i1 | 0) == (i15 | 0)) {
    i14 = -1;
    i13 = 73;
    break;
   } else i3 = i1;
  }
  if ((i13 | 0) == 51) {
   HEAP32[i16 >> 2] = i3;
   i16 = 0;
   return i16 | 0;
  } else if ((i13 | 0) == 56) {
   HEAP32[i16 >> 2] = i3 + 4;
   i16 = i6;
   return i16 | 0;
  } else if ((i13 | 0) == 73) return i14 | 0;
 } else if ((i13 | 0) == 58) {
  L108 : do if ((i5 - i11 | 0) == 6 & i8 << 24 >> 24 == 0) {
   switch (i9 << 24 >> 24 | 0) {
   case 120:
    {
     i1 = 0;
     break;
    }
   case 88:
    {
     i1 = 1;
     break;
    }
   default:
    {
     i1 = 11;
     break L108;
    }
   }
   if (!(HEAP8[i6 >> 0] | 0)) {
    switch (HEAP8[i11 + 3 >> 0] | 0) {
    case 109:
     break;
    case 77:
     {
      i1 = 1;
      break;
     }
    default:
     {
      i1 = 11;
      break L108;
     }
    }
    if (!(HEAP8[i11 + 4 >> 0] | 0)) {
     switch (HEAP8[i11 + 5 >> 0] | 0) {
     case 108:
      {
       if (!i1) {
        i1 = 12;
        break L108;
       }
       break;
      }
     case 76:
      break;
     default:
      {
       i1 = 11;
       break L108;
      }
     }
     HEAP32[i16 >> 2] = i5;
     i16 = 0;
     return i16 | 0;
    } else i1 = 11;
   } else i1 = 11;
  } else i1 = 11; while (0);
  i2 = i10 + 4 | 0;
  if ((i2 | 0) == (i15 | 0)) {
   i16 = -1;
   return i16 | 0;
  }
  if (!(HEAP8[i2 >> 0] | 0)) if ((HEAP8[i10 + 5 >> 0] | 0) == 62) {
   HEAP32[i16 >> 2] = i10 + 6;
   i16 = i1;
   return i16 | 0;
  }
 } else if ((i13 | 0) == 73) return i14 | 0;
 HEAP32[i16 >> 2] = i2;
 i16 = 0;
 return i16 | 0;
}

function _rasterizer_fill_level(i30, i19, i1, i27, i29, i33, i22, i16, i23) {
 i30 = i30 | 0;
 i19 = i19 | 0;
 i1 = i1 | 0;
 i27 = i27 | 0;
 i29 = i29 | 0;
 i33 = i33 | 0;
 i22 = i22 | 0;
 i16 = i16 | 0;
 i23 = i23 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0, i31 = 0, i32 = 0, i34 = 0, i35 = 0;
 i34 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i24 = i34 + 16 | 0;
 i20 = i34 + 8 | 0;
 i21 = i34;
 if (!((i27 | 0) > 0 & (i29 | 0) > 0)) ___assert_fail(359341, 359365, 634, 359485);
 if (i22 >>> 0 >= 2) ___assert_fail(359507, 359365, 635, 359485);
 i9 = HEAP32[i16 >> 2] | 0;
 i17 = i16 + 4 | 0;
 i10 = HEAP32[i17 >> 2] | 0;
 i32 = i19 + 28 + (i22 << 2) | 0;
 i2 = HEAP32[i32 >> 2] | 0;
 if ((i10 + i9 | 0) >>> 0 > i2 >>> 0) ___assert_fail(359507, 359365, 635, 359485);
 i26 = i30 + 4 | 0;
 i28 = HEAP32[i26 >> 2] | 0;
 i11 = 1 << i28;
 i3 = i11 + -1 | 0;
 if (i3 & i27 | 0) ___assert_fail(359398, 359365, 636, 359485);
 if (i3 & i29 | 0) ___assert_fail(359441, 359365, 637, 359485);
 i31 = i2 - i9 - i10 | 0;
 i5 = HEAP32[i19 + 20 + (i22 << 2) >> 2] | 0;
 i14 = i5 + (i31 * 40 | 0) | 0;
 i7 = i14 + (i9 * 40 | 0) | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 switch (i9 | 0) {
 case 0:
  {
   i2 = (i4 | 0) != 0 & 1;
   break;
  }
 case 1:
  {
   i2 = HEAP32[i5 + (i31 * 40 | 0) + 20 >> 2] | 0;
   i2 = ((i2 & 6 | 0) != 6 ^ i2 & 1) + i4 | 0;
   i2 = (i2 | 0) == 0 ? 6 : (i2 | 0) == 1 ? 2 : 1;
   break;
  }
 default:
  i2 = 10;
 }
 i15 = i23 + 4 | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 switch (i10 | 0) {
 case 0:
  {
   i6 = (i3 | 0) != 0 & 1;
   break;
  }
 case 1:
  {
   i6 = HEAP32[i7 + 20 >> 2] | 0;
   i6 = ((i6 & 6 | 0) != 6 ^ i6 & 1) + i3 | 0;
   i6 = (i6 | 0) == 0 ? 6 : (i6 | 0) == 1 ? 2 : 1;
   break;
  }
 default:
  i6 = 10;
 }
 i8 = i6 | i2;
 if ((i8 & 3 | 0) != 2) {
  i7 = i8 & 1;
  i8 = i33 << i28;
  i6 = i27 >> i28;
  i5 = i29 >> i28;
  if ((i5 | 0) > 0) {
   i4 = i30 + 8 | 0;
   if ((i6 | 0) > 0) {
    i3 = 0;
    while (1) {
     i2 = 0;
     do {
      FUNCTION_TABLE_viii[HEAP32[i4 >> 2] & 31](i1 + (i2 << i28) | 0, i33, i7);
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i6 | 0));
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == (i5 | 0)) break; else i1 = i1 + i8 | 0;
    }
   }
  }
  HEAP32[i32 >> 2] = i31;
  i33 = 1;
  STACKTOP = i34;
  return i33 | 0;
 }
 if (!(i8 & 8)) if ((i6 ^ i2) & 2 | 0) {
  i21 = (i6 & 2 | 0) == 0 ? i14 : i7;
  i22 = HEAP32[i21 + 8 >> 2] | 0;
  i23 = HEAP32[i21 + 12 >> 2] | 0;
  i25 = i21;
  i24 = HEAP32[i25 >> 2] | 0;
  i25 = HEAP32[i25 + 4 >> 2] | 0;
  i21 = HEAP32[i21 + 16 >> 2] | 0;
  i21 = i8 & 4 | 0 ? 0 - i21 | 0 : i21;
  if ((i11 | 0) == (i27 | 0) & (i11 | 0) == (i29 | 0)) FUNCTION_TABLE_viiiiiii[HEAP32[i30 + 12 >> 2] & 1](i1, i33, i22, i23, i24, i25, i21); else {
   i19 = i28 + 5 | 0;
   i14 = _bitshift64Shl(((i23 | 0) < 0 ? 0 - i23 | 0 : i23) + ((i22 | 0) < 0 ? 0 - i22 | 0 : i22) | 0, 0, i19 | 0) | 0;
   i15 = tempRet0;
   i16 = ((i22 | 0) < 0) << 31 >> 31;
   i17 = ((i23 | 0) < 0) << 31 >> 31;
   i18 = _i64Add(i23 | 0, i17 | 0, i22 | 0, i16 | 0) | 0;
   i19 = 1 << i19;
   i18 = ___muldi3(i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0, i18 | 0, tempRet0 | 0) | 0;
   i19 = tempRet0;
   i20 = i33 << i28;
   i13 = i27 >> i28;
   i11 = i29 >> i28;
   if ((i11 | 0) > 0) {
    i12 = i30 + 12 | 0;
    i10 = i30 + 8 | 0;
    if ((i13 | 0) > 0) {
     i9 = 0;
     while (1) {
      i3 = ___muldi3(i9 | 0, ((i9 | 0) < 0) << 31 >> 31 | 0, i23 | 0, i17 | 0) | 0;
      i4 = tempRet0;
      i2 = 0;
      do {
       i5 = ___muldi3(i2 | 0, ((i2 | 0) < 0) << 31 >> 31 | 0, i22 | 0, i16 | 0) | 0;
       i5 = _i64Add(i5 | 0, tempRet0 | 0, i3 | 0, i4 | 0) | 0;
       i6 = 1 << (HEAP32[i26 >> 2] | 0) + 6;
       i5 = ___muldi3(i6 | 0, ((i6 | 0) < 0) << 31 >> 31 | 0, i5 | 0, tempRet0 | 0) | 0;
       i5 = _i64Subtract(i24 | 0, i25 | 0, i5 | 0, tempRet0 | 0) | 0;
       i6 = tempRet0;
       i30 = _i64Subtract(i18 | 0, i19 | 0, i5 | 0, i6 | 0) | 0;
       i7 = tempRet0;
       i27 = (i7 | 0) < 0;
       i29 = _i64Subtract(0, 0, i30 | 0, i7 | 0) | 0;
       i35 = i27 ? tempRet0 : i7;
       i8 = i2 << i28;
       if ((i35 | 0) < (i15 | 0) | (i35 | 0) == (i15 | 0) & (i27 ? i29 : i30) >>> 0 < i14 >>> 0) FUNCTION_TABLE_viiiiiii[HEAP32[i12 >> 2] & 1](i1 + i8 | 0, i33, i22, i23, i5, i6, i21); else FUNCTION_TABLE_viii[HEAP32[i10 >> 2] & 31](i1 + i8 | 0, i33, (i7 ^ i21) & -2147483648);
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) != (i13 | 0));
      i9 = i9 + 1 | 0;
      if ((i9 | 0) == (i11 | 0)) break; else i1 = i1 + i20 | 0;
     }
    }
   }
  }
  HEAP32[i32 >> 2] = i31;
  i35 = 1;
  STACKTOP = i34;
  return i35 | 0;
 }
 if ((i11 | 0) == (i27 | 0) & (i11 | 0) == (i29 | 0)) {
  if (!(i6 & 2)) {
   FUNCTION_TABLE_viiiii[HEAP32[i30 + 16 >> 2] & 31](i1, i33, i14, i9, i4);
   HEAP32[i32 >> 2] = i31;
   i35 = 1;
   STACKTOP = i34;
   return i35 | 0;
  }
  if (!(i2 & 2)) {
   FUNCTION_TABLE_viiiii[HEAP32[i30 + 16 >> 2] & 31](i1, i33, i7, i10, i3);
   HEAP32[i32 >> 2] = i31;
   i35 = 1;
   STACKTOP = i34;
   return i35 | 0;
  }
  if (!(i2 & 8)) {
   i28 = i14;
   i35 = HEAP32[i5 + (i31 * 40 | 0) + 16 >> 2] | 0;
   FUNCTION_TABLE_viiiiiii[HEAP32[i30 + 12 >> 2] & 1](i1, i33, HEAP32[i5 + (i31 * 40 | 0) + 8 >> 2] | 0, HEAP32[i5 + (i31 * 40 | 0) + 12 >> 2] | 0, HEAP32[i28 >> 2] | 0, HEAP32[i28 + 4 >> 2] | 0, i2 & 4 | 0 ? 0 - i35 | 0 : i35);
  } else FUNCTION_TABLE_viiiii[HEAP32[i30 + 16 >> 2] & 31](i1, i33, i14, i9, i4);
  i2 = i19 + 48 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (!(i6 & 8)) {
   i28 = i7;
   i35 = HEAP32[i7 + 16 >> 2] | 0;
   FUNCTION_TABLE_viiiiiii[HEAP32[i30 + 12 >> 2] & 1](i3, i27, HEAP32[i7 + 8 >> 2] | 0, HEAP32[i7 + 12 >> 2] | 0, HEAP32[i28 >> 2] | 0, HEAP32[i28 + 4 >> 2] | 0, i6 & 4 | 0 ? 0 - i35 | 0 : i35);
  } else FUNCTION_TABLE_viiiii[HEAP32[i30 + 16 >> 2] & 31](i3, i27, i7, HEAP32[i17 >> 2] | 0, HEAP32[i15 >> 2] | 0);
  FUNCTION_TABLE_viiiiii[HEAP32[i30 + 20 >> 2] & 7](i1, i33, HEAP32[i2 >> 2] | 0, i27, i29, i27);
  HEAP32[i32 >> 2] = i31;
  i35 = 1;
  STACKTOP = i34;
  return i35 | 0;
 }
 i11 = i22 ^ 1;
 i12 = i19 + 28 + (i11 << 2) | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 i5 = i9 + i13 + i10 | 0;
 i6 = i19 + 36 + (i11 << 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 do if (i2 >>> 0 < i5 >>> 0) {
  i4 = i2 << 1;
  i4 = i4 >>> 0 > 64 ? i4 : 64;
  while (1) if (i4 >>> 0 < i5 >>> 0) i4 = i4 << 1; else break;
  i2 = i19 + 20 + (i11 << 2) | 0;
  i3 = _realloc(HEAP32[i2 >> 2] | 0, i4 * 40 | 0) | 0;
  if (!i3) {
   i35 = 0;
   STACKTOP = i34;
   return i35 | 0;
  } else {
   HEAP32[i2 >> 2] = i3;
   HEAP32[i6 >> 2] = i4;
   i2 = i3;
   i4 = HEAP32[i23 >> 2] | 0;
   i3 = HEAP32[i15 >> 2] | 0;
   break;
  }
 } else i2 = HEAP32[i19 + 20 + (i11 << 2) >> 2] | 0; while (0);
 i2 = i2 + (i13 * 40 | 0) | 0;
 HEAP32[i21 >> 2] = i4;
 HEAP32[i21 + 4 >> 2] = i3;
 if ((i27 | 0) > (i29 | 0)) {
  i4 = 1 << ((Math_clz32(i27 + -1 | 0) | 0) ^ 31);
  _polyline_split_horz(i14, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, i14, i24, i2, i20, i21, i4 << 6);
  i7 = i29;
  i8 = i27 - i4 | 0;
  i6 = i4;
  i3 = i29;
  i2 = i4;
  i4 = i24;
  i5 = i20;
 } else {
  i4 = (Math_clz32(i29 + -1 | 0) | 0) ^ 31;
  i3 = 1 << i4;
  _polyline_split_vert(i14, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, i14, i24, i2, i20, i21, i3 << 6);
  i7 = i29 - i3 | 0;
  i8 = i27;
  i6 = i27;
  i2 = i33 << i4;
  i4 = i24;
  i5 = i20;
 }
 i2 = i1 + i2 | 0;
 HEAP32[i32 >> 2] = (HEAP32[i4 >> 2] | 0) + i31 + (HEAP32[i24 + 4 >> 2] | 0);
 HEAP32[i12 >> 2] = (HEAP32[i5 >> 2] | 0) + i13 + (HEAP32[i20 + 4 >> 2] | 0);
 if (_rasterizer_fill_level(i30, i19, i1, i6, i3, i33, i22, i4, i23) | 0) {
  if ((HEAP32[i32 >> 2] | 0) != (i31 | 0)) ___assert_fail(359576, 359365, 716, 359485);
  if (_rasterizer_fill_level(i30, i19, i2, i8, i7, i33, i11, i5, i21) | 0) if ((HEAP32[i12 >> 2] | 0) == (i13 | 0)) i18 = 1; else ___assert_fail(359605, 359365, 719, 359485); else i18 = 0;
 } else i18 = 0;
 i35 = i18;
 STACKTOP = i34;
 return i35 | 0;
}

function _little2_scanPi(i5, i11, i15, i16) {
 i5 = i5 | 0;
 i11 = i11 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0;
 if ((i11 | 0) == (i15 | 0)) {
  i16 = -1;
  return i16 | 0;
 }
 i8 = HEAP8[i11 + 1 >> 0] | 0;
 L4 : do switch (i8 << 24 >> 24) {
 case 0:
  {
   i3 = HEAP8[i11 >> 0] | 0;
   switch (HEAP8[i5 + 76 + (i3 & 255) >> 0] | 0) {
   case 29:
    {
     i4 = i3;
     i13 = 8;
     break L4;
    }
   case 24:
   case 22:
    {
     i9 = i3;
     break L4;
    }
   case 7:
    {
     i13 = 14;
     break L4;
    }
   case 5:
    {
     if ((i15 - i11 | 0) < 2) {
      i16 = -2;
      return i16 | 0;
     }
     HEAP32[i16 >> 2] = i11;
     i16 = 0;
     return i16 | 0;
    }
   case 6:
    {
     if ((i15 - i11 | 0) < 3) {
      i16 = -2;
      return i16 | 0;
     }
     HEAP32[i16 >> 2] = i11;
     i16 = 0;
     return i16 | 0;
    }
   default:
    {
     i13 = 16;
     break L4;
    }
   }
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i13 = 14;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i13 = 16;
   break;
  }
 case -1:
  {
   i3 = HEAP8[i11 >> 0] | 0;
   if ((i3 & 255) > 253) i13 = 16; else {
    i4 = i3;
    i13 = 8;
   }
   break;
  }
 default:
  {
   i4 = HEAP8[i11 >> 0] | 0;
   i13 = 8;
  }
 } while (0);
 if ((i13 | 0) == 8) {
  i12 = i4 & 255;
  if (!(1 << (i12 & 31) & HEAP32[25356 + ((i12 >>> 5 | HEAPU8[344737 + (i8 & 255) >> 0] << 3) << 2) >> 2])) {
   HEAP32[i16 >> 2] = i11;
   i16 = 0;
   return i16 | 0;
  } else i9 = i4;
 } else if ((i13 | 0) == 14) {
  if ((i15 - i11 | 0) < 4) {
   i16 = -2;
   return i16 | 0;
  }
  HEAP32[i16 >> 2] = i11;
  i16 = 0;
  return i16 | 0;
 } else if ((i13 | 0) == 16) {
  HEAP32[i16 >> 2] = i11;
  i16 = 0;
  return i16 | 0;
 }
 i6 = i11 + 2 | 0;
 if ((i6 | 0) == (i15 | 0)) {
  i16 = -1;
  return i16 | 0;
 }
 i12 = i5 + 76 | 0;
 i5 = i6;
 i10 = i11;
 L34 : while (1) {
  i4 = HEAP8[i10 + 3 >> 0] | 0;
  switch (i4 << 24 >> 24) {
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i13 = 28;
    break L34;
   }
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i2 = i5;
    break L34;
   }
  case 0:
   {
    i3 = HEAP8[i5 >> 0] | 0;
    switch (HEAP8[i12 + (i3 & 255) >> 0] | 0) {
    case 7:
     {
      i13 = 28;
      break L34;
     }
    case 5:
     {
      i13 = 24;
      break L34;
     }
    case 6:
     {
      i13 = 26;
      break L34;
     }
    case 10:
    case 9:
    case 21:
     {
      i13 = 30;
      break L34;
     }
    case 15:
     {
      i13 = 58;
      break L34;
     }
    case 29:
     {
      i7 = i3;
      i13 = 21;
      break;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 22:
     break;
    default:
     {
      i2 = i5;
      break L34;
     }
    }
    break;
   }
  case -1:
   {
    i3 = HEAP8[i5 >> 0] | 0;
    if ((i3 & 255) > 253) {
     i2 = i5;
     break L34;
    } else {
     i7 = i3;
     i13 = 21;
    }
    break;
   }
  default:
   {
    i7 = HEAP8[i5 >> 0] | 0;
    i13 = 21;
   }
  }
  if ((i13 | 0) == 21) {
   i13 = 0;
   i3 = i7 & 255;
   if (!(1 << (i3 & 31) & HEAP32[25356 + ((i3 >>> 5 | HEAPU8[344993 + (i4 & 255) >> 0] << 3) << 2) >> 2])) {
    i13 = 23;
    break;
   }
  }
  i3 = i5 + 2 | 0;
  if ((i3 | 0) == (i15 | 0)) {
   i14 = -1;
   i13 = 73;
   break;
  } else {
   i10 = i5;
   i5 = i3;
  }
 }
 if ((i13 | 0) == 23) {
  HEAP32[i16 >> 2] = i5;
  i16 = 0;
  return i16 | 0;
 } else if ((i13 | 0) == 24) {
  if ((i15 - i5 | 0) < 2) {
   i16 = -2;
   return i16 | 0;
  }
  HEAP32[i16 >> 2] = i5;
  i16 = 0;
  return i16 | 0;
 } else if ((i13 | 0) == 26) {
  if ((i15 - i5 | 0) < 3) {
   i16 = -2;
   return i16 | 0;
  }
  HEAP32[i16 >> 2] = i5;
  i16 = 0;
  return i16 | 0;
 } else if ((i13 | 0) == 28) {
  if ((i15 - i5 | 0) < 4) {
   i16 = -2;
   return i16 | 0;
  }
  HEAP32[i16 >> 2] = i5;
  i16 = 0;
  return i16 | 0;
 } else if ((i13 | 0) == 30) {
  L61 : do if ((i5 - i11 | 0) == 6 & i8 << 24 >> 24 == 0) {
   switch (i9 << 24 >> 24 | 0) {
   case 120:
    {
     i3 = 0;
     break;
    }
   case 88:
    {
     i3 = 1;
     break;
    }
   default:
    {
     i6 = 11;
     break L61;
    }
   }
   if (!(HEAP8[i11 + 3 >> 0] | 0)) {
    switch (HEAP8[i6 >> 0] | 0) {
    case 109:
     break;
    case 77:
     {
      i3 = 1;
      break;
     }
    default:
     {
      i6 = 11;
      break L61;
     }
    }
    if (!(HEAP8[i11 + 5 >> 0] | 0)) {
     switch (HEAP8[i11 + 4 >> 0] | 0) {
     case 108:
      {
       if (!i3) {
        i6 = 12;
        break L61;
       }
       break;
      }
     case 76:
      break;
     default:
      {
       i6 = 11;
       break L61;
      }
     }
     HEAP32[i16 >> 2] = i5;
     i16 = 0;
     return i16 | 0;
    } else i6 = 11;
   } else i6 = 11;
  } else i6 = 11; while (0);
  i3 = i10 + 4 | 0;
  if ((i3 | 0) == (i15 | 0)) {
   i16 = -1;
   return i16 | 0;
  }
  i5 = i15;
  L79 : while (1) {
   i4 = HEAP8[i3 >> 0] | 0;
   L81 : do switch (HEAP8[i3 + 1 >> 0] | 0) {
   case -33:
   case -34:
   case -35:
   case -36:
    {
     i13 = 51;
     break L79;
    }
   case 0:
    switch (HEAP8[i12 + (i4 & 255) >> 0] | 0) {
    case 8:
    case 1:
    case 0:
     {
      i13 = 51;
      break L79;
     }
    case 7:
     {
      i13 = 49;
      break L81;
     }
    case 5:
     {
      if ((i5 - i3 | 0) < 2) {
       i14 = -2;
       i13 = 73;
       break L79;
      }
      i1 = i3 + 2 | 0;
      break L81;
     }
    case 6:
     {
      if ((i5 - i3 | 0) < 3) {
       i14 = -2;
       i13 = 73;
       break L79;
      }
      i1 = i3 + 3 | 0;
      break L81;
     }
    case 15:
     {
      i1 = i3 + 2 | 0;
      if ((i1 | 0) == (i15 | 0)) {
       i14 = -1;
       i13 = 73;
       break L79;
      }
      if (HEAP8[i3 + 3 >> 0] | 0) break L81;
      if ((HEAP8[i1 >> 0] | 0) == 62) {
       i13 = 56;
       break L79;
      } else break L81;
     }
    default:
     {
      i13 = 57;
      break L81;
     }
    }
   case -37:
   case -38:
   case -39:
   case -40:
    {
     i13 = 49;
     break;
    }
   case -1:
    {
     if ((i4 & 255) > 253) {
      i13 = 51;
      break L79;
     } else i13 = 57;
     break;
    }
   default:
    i13 = 57;
   } while (0);
   if ((i13 | 0) == 49) {
    i13 = 0;
    if ((i5 - i3 | 0) < 4) {
     i14 = -2;
     i13 = 73;
     break;
    }
    i1 = i3 + 4 | 0;
   } else if ((i13 | 0) == 57) {
    i13 = 0;
    i1 = i3 + 2 | 0;
   }
   if ((i1 | 0) == (i15 | 0)) {
    i14 = -1;
    i13 = 73;
    break;
   } else i3 = i1;
  }
  if ((i13 | 0) == 51) {
   HEAP32[i16 >> 2] = i3;
   i16 = 0;
   return i16 | 0;
  } else if ((i13 | 0) == 56) {
   HEAP32[i16 >> 2] = i3 + 4;
   i16 = i6;
   return i16 | 0;
  } else if ((i13 | 0) == 73) return i14 | 0;
 } else if ((i13 | 0) == 58) {
  L108 : do if ((i5 - i11 | 0) == 6 & i8 << 24 >> 24 == 0) {
   switch (i9 << 24 >> 24 | 0) {
   case 120:
    {
     i1 = 0;
     break;
    }
   case 88:
    {
     i1 = 1;
     break;
    }
   default:
    {
     i1 = 11;
     break L108;
    }
   }
   if (!(HEAP8[i11 + 3 >> 0] | 0)) {
    switch (HEAP8[i6 >> 0] | 0) {
    case 109:
     break;
    case 77:
     {
      i1 = 1;
      break;
     }
    default:
     {
      i1 = 11;
      break L108;
     }
    }
    if (!(HEAP8[i11 + 5 >> 0] | 0)) {
     switch (HEAP8[i11 + 4 >> 0] | 0) {
     case 108:
      {
       if (!i1) {
        i1 = 12;
        break L108;
       }
       break;
      }
     case 76:
      break;
     default:
      {
       i1 = 11;
       break L108;
      }
     }
     HEAP32[i16 >> 2] = i5;
     i16 = 0;
     return i16 | 0;
    } else i1 = 11;
   } else i1 = 11;
  } else i1 = 11; while (0);
  i2 = i10 + 4 | 0;
  if ((i2 | 0) == (i15 | 0)) {
   i16 = -1;
   return i16 | 0;
  }
  if (!(HEAP8[i10 + 5 >> 0] | 0)) if ((HEAP8[i2 >> 0] | 0) == 62) {
   HEAP32[i16 >> 2] = i10 + 6;
   i16 = i1;
   return i16 | 0;
  }
 } else if ((i13 | 0) == 73) return i14 | 0;
 HEAP32[i16 >> 2] = i2;
 i16 = 0;
 return i16 | 0;
}

function _FcConfigCompareValue(i1, i16, i2) {
 i1 = i1 | 0;
 i16 = i16 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 i11 = i19 + 544 | 0;
 i17 = i19 + 528 | 0;
 i13 = i19 + 512 | 0;
 i8 = i19 + 256 | 0;
 i10 = i19;
 _FcValueCanonicalize(i17, i1);
 _FcValueCanonicalize(i13, i2);
 i15 = i16 & 65535;
 i18 = i16 >>> 16;
 i4 = HEAP32[i13 >> 2] | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i5 = i17 + 4 | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 i14 = i17 + 8 | 0;
 d6 = +HEAPF64[i14 >> 3];
 HEAPF64[i11 >> 3] = d6;
 HEAPF64[tempDoublePtr >> 3] = d6;
 i3 = HEAP32[tempDoublePtr >> 2] | 0;
 i2 = i3;
 L1 : do switch (i1 | 0) {
 case 1:
  {
   d6 = +(i3 | 0);
   HEAPF64[i11 >> 3] = d6;
   i1 = 2;
   i12 = 9;
   break;
  }
 case 0:
  switch (i4 | 0) {
  case 5:
   {
    HEAP32[i11 >> 2] = 1024;
    i1 = 5;
    break L1;
   }
  case 8:
   {
    i1 = _FcLangSetPromote(0, i8) | 0;
    HEAP32[i11 >> 2] = i1;
    i1 = 8;
    break L1;
   }
  case 6:
   {
    i1 = _FcCharSetPromote(i8) | 0;
    HEAP32[i11 >> 2] = i1;
    i1 = 6;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 3:
  {
   if ((i4 | 0) == 8) {
    i1 = _FcLangSetPromote(i2, i8) | 0;
    HEAP32[i11 >> 2] = i1;
    i1 = 8;
   } else i1 = 3;
   break;
  }
 default:
  i12 = 9;
 } while (0);
 if ((i12 | 0) == 9) if ((i4 | 0) == 9 & (i1 | 0) == 2) {
  i1 = _FcRangePromote(d6, i8) | 0;
  HEAP32[i11 >> 2] = i1;
  i1 = 9;
 }
 d6 = +HEAPF64[i11 >> 3];
 HEAP32[i17 >> 2] = i1;
 HEAP32[i5 >> 2] = i7;
 HEAPF64[i14 >> 3] = d6;
 i2 = HEAP32[i13 >> 2] | 0;
 i5 = i13 + 4 | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 i9 = i13 + 8 | 0;
 d6 = +HEAPF64[i9 >> 3];
 HEAPF64[i11 >> 3] = d6;
 HEAPF64[tempDoublePtr >> 3] = d6;
 i3 = HEAP32[tempDoublePtr >> 2] | 0;
 i4 = i3;
 L14 : do switch (i2 | 0) {
 case 1:
  {
   d6 = +(i3 | 0);
   HEAPF64[i11 >> 3] = d6;
   i2 = 2;
   i12 = 19;
   break;
  }
 case 0:
  switch (i1 | 0) {
  case 5:
   {
    HEAP32[i11 >> 2] = 1024;
    i8 = 5;
    break L14;
   }
  case 8:
   {
    i8 = _FcLangSetPromote(0, i10) | 0;
    HEAP32[i11 >> 2] = i8;
    i8 = 8;
    break L14;
   }
  case 6:
   {
    i8 = _FcCharSetPromote(i10) | 0;
    HEAP32[i11 >> 2] = i8;
    i8 = 6;
    break L14;
   }
  default:
   {
    i8 = 0;
    break L14;
   }
  }
 case 3:
  {
   if ((i1 | 0) == 8) {
    i8 = _FcLangSetPromote(i4, i10) | 0;
    HEAP32[i11 >> 2] = i8;
    i8 = 8;
   } else i8 = 3;
   break;
  }
 default:
  i12 = 19;
 } while (0);
 if ((i12 | 0) == 19) if ((i1 | 0) == 9 & (i2 | 0) == 2) {
  i8 = _FcRangePromote(d6, i10) | 0;
  HEAP32[i11 >> 2] = i8;
  i8 = 9;
 } else i8 = i2;
 d6 = +HEAPF64[i11 >> 3];
 HEAP32[i13 >> 2] = i8;
 HEAP32[i5 >> 2] = i7;
 HEAPF64[i9 >> 3] = d6;
 HEAPF64[tempDoublePtr >> 3] = d6;
 i1 = HEAP32[tempDoublePtr >> 2] | 0;
 i2 = i1;
 i3 = i1;
 i4 = i1;
 i7 = i1;
 i5 = i1;
 if ((HEAP32[i17 >> 2] | 0) != (i8 | 0)) {
  switch ((i16 & 65535) << 16 >> 16) {
  case 23:
  case 26:
   break;
  default:
   {
    i18 = 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  }
  i18 = 1;
  STACKTOP = i19;
  return i18 | 0;
 }
 do switch (i8 | 0) {
 case 9:
  {
   i18 = _FcRangeCompare(i15, HEAP32[i17 + 8 >> 2] | 0, i5) | 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 7:
  switch ((i16 & 65535) << 16 >> 16) {
  case 25:
  case 24:
  case 22:
   {
    i18 = (HEAP32[i17 + 8 >> 2] | 0) == (i7 | 0) & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 26:
  case 23:
   {
    i18 = (HEAP32[i17 + 8 >> 2] | 0) != (i7 | 0) & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  default:
   {
    i18 = 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  }
 case 2:
  switch ((i16 & 65535) << 16 >> 16) {
  case 25:
  case 24:
  case 22:
   {
    i18 = +HEAPF64[i14 >> 3] == d6 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 26:
  case 23:
   {
    i18 = +HEAPF64[i14 >> 3] != d6 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 27:
   {
    i18 = +HEAPF64[i14 >> 3] < d6 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 28:
   {
    i18 = +HEAPF64[i14 >> 3] <= d6 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 29:
   {
    i18 = +HEAPF64[i14 >> 3] > d6 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 30:
   {
    i18 = +HEAPF64[i14 >> 3] >= d6 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  default:
   {
    i18 = 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  }
 case 4:
  switch ((i16 & 65535) << 16 >> 16) {
  case 25:
  case 24:
  case 22:
   {
    i18 = (HEAP32[i17 + 8 >> 2] | 0) == (i1 | 0) & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 26:
  case 23:
   {
    i18 = (HEAP32[i17 + 8 >> 2] | 0) != (i1 | 0) & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  default:
   {
    i18 = 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  }
 case 3:
  switch ((i16 & 65535) << 16 >> 16) {
  case 25:
  case 22:
   {
    i1 = HEAP32[i17 + 8 >> 2] | 0;
    if (!(i18 & 1)) {
     i18 = (_FcStrCmpIgnoreCase(i1, i7) | 0) == 0 & 1;
     STACKTOP = i19;
     return i18 | 0;
    } else {
     i18 = (_FcStrCmpIgnoreBlanksAndCase(i1, i7) | 0) == 0 & 1;
     STACKTOP = i19;
     return i18 | 0;
    }
   }
  case 24:
   {
    i18 = (_FcStrStrIgnoreCase(HEAP32[i17 + 8 >> 2] | 0, i7) | 0) != 0 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 23:
   {
    i1 = HEAP32[i17 + 8 >> 2] | 0;
    if (!(i18 & 1)) {
     i18 = (_FcStrCmpIgnoreCase(i1, i7) | 0) != 0 & 1;
     STACKTOP = i19;
     return i18 | 0;
    } else {
     i18 = (_FcStrCmpIgnoreBlanksAndCase(i1, i7) | 0) != 0 & 1;
     STACKTOP = i19;
     return i18 | 0;
    }
   }
  case 26:
   {
    i18 = (_FcStrStrIgnoreCase(HEAP32[i17 + 8 >> 2] | 0, i7) | 0) == 0 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  default:
   {
    i18 = 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  }
 case 5:
  switch ((i16 & 65535) << 16 >> 16) {
  case 25:
  case 24:
  case 22:
   {
    i18 = _FcMatrixEqual(HEAP32[i17 + 8 >> 2] | 0, i4) | 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 26:
  case 23:
   {
    i18 = (_FcMatrixEqual(HEAP32[i17 + 8 >> 2] | 0, i4) | 0) == 0 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  default:
   {
    i18 = 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  }
 case 6:
  switch ((i16 & 65535) << 16 >> 16) {
  case 25:
  case 24:
   {
    i18 = _FcCharSetIsSubset(i3, HEAP32[i17 + 8 >> 2] | 0) | 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 26:
   {
    i18 = (_FcCharSetIsSubset(i3, HEAP32[i17 + 8 >> 2] | 0) | 0) == 0 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 22:
   {
    i18 = _FcCharSetEqual(HEAP32[i17 + 8 >> 2] | 0, i3) | 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 23:
   {
    i18 = (_FcCharSetEqual(HEAP32[i17 + 8 >> 2] | 0, i3) | 0) == 0 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  default:
   {
    i18 = 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  }
 case 8:
  switch ((i16 & 65535) << 16 >> 16) {
  case 25:
  case 24:
   {
    i18 = _FcLangSetContains(HEAP32[i17 + 8 >> 2] | 0, i2) | 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 26:
   {
    i18 = (_FcLangSetContains(HEAP32[i17 + 8 >> 2] | 0, i2) | 0) == 0 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 22:
   {
    i18 = _FcLangSetEqual(HEAP32[i17 + 8 >> 2] | 0, i2) | 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  case 23:
   {
    i18 = (_FcLangSetEqual(HEAP32[i17 + 8 >> 2] | 0, i2) | 0) == 0 & 1;
    STACKTOP = i19;
    return i18 | 0;
   }
  default:
   {
    i18 = 0;
    STACKTOP = i19;
    return i18 | 0;
   }
  }
 case 0:
  {
   switch ((i16 & 65535) << 16 >> 16) {
   case 25:
   case 24:
   case 22:
    break;
   default:
    {
     i18 = 0;
     STACKTOP = i19;
     return i18 | 0;
    }
   }
   i18 = 1;
   STACKTOP = i19;
   return i18 | 0;
  }
 default:
  {
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 } while (0);
 return 0;
}

function _fix_collisions(i17, i22, i23) {
 i17 = i17 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i24 = 0, i25 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i16 = i25;
 i24 = _ass_realloc_array(0, i23, 16) | 0;
 if (!i24) {
  STACKTOP = i25;
  return;
 }
 i13 = (i23 | 0) > 0;
 if (i13) {
  i14 = i17 + 112 | 0;
  i15 = i17 + 140 | 0;
  i1 = 0;
  i12 = 0;
  do {
   do if (HEAP32[i22 + (i12 << 5) + 20 >> 2] | 0) {
    i3 = (HEAP32[i22 + (i12 << 5) + 28 >> 2] | 0) + 52 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) {
     i2 = _calloc(1, 20) | 0;
     HEAP32[i3 >> 2] = i2;
     if (!i2) break;
    }
    if ((HEAP32[i14 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) {
     HEAP32[i2 >> 2] = 0;
     HEAP32[i2 + 4 >> 2] = 0;
     HEAP32[i2 + 8 >> 2] = 0;
     HEAP32[i2 + 12 >> 2] = 0;
     HEAP32[i2 + 16 >> 2] = 0;
     i2 = HEAP32[i3 >> 2] | 0;
     HEAP32[i2 + 16 >> 2] = HEAP32[i14 >> 2];
    }
    if (i2) {
     i4 = HEAP32[i2 + 4 >> 2] | 0;
     if ((i4 | 0) > 0) {
      i8 = HEAP32[i2 >> 2] | 0;
      i9 = i8 + i4 | 0;
      i10 = HEAP32[i2 + 8 >> 2] | 0;
      i3 = HEAP32[i2 + 12 >> 2] | 0;
      i11 = i3 + i10 | 0;
      if ((i4 | 0) == (HEAP32[i22 + (i12 << 5) + 8 >> 2] | 0)) {
       i5 = i3;
       i3 = i10;
       i6 = i8;
      } else {
       _ass_msg(HEAP32[i17 >> 2] | 0, 2, 358842, i16);
       HEAP32[i2 >> 2] = 0;
       HEAP32[i2 + 4 >> 2] = 0;
       HEAP32[i2 + 8 >> 2] = 0;
       HEAP32[i2 + 12 >> 2] = 0;
       i5 = 0;
       i3 = 0;
       i6 = 0;
       i4 = 0;
      }
      if ((i1 | 0) > 0) {
       i7 = 0;
       do {
        if ((i8 | 0) < (HEAP32[i24 + (i7 << 4) + 4 >> 2] | 0)) if ((HEAP32[i24 + (i7 << 4) >> 2] | 0) < (i9 | 0)) if ((i10 | 0) < (HEAP32[i24 + (i7 << 4) + 12 >> 2] | 0)) if ((HEAP32[i24 + (i7 << 4) + 8 >> 2] | 0) < (i11 | 0)) {
         HEAP32[i2 >> 2] = 0;
         HEAP32[i2 + 4 >> 2] = 0;
         HEAP32[i2 + 8 >> 2] = 0;
         HEAP32[i2 + 12 >> 2] = 0;
         i5 = 0;
         i3 = 0;
         i6 = 0;
         i4 = 0;
        }
        i7 = i7 + 1 | 0;
       } while ((i7 | 0) != (i1 | 0));
       i10 = i6;
       i2 = i5;
      } else {
       i10 = i6;
       i2 = i5;
      }
      if ((i4 | 0) > 0) {
       HEAP32[i24 + (i1 << 4) >> 2] = i10;
       HEAP32[i24 + (i1 << 4) + 4 >> 2] = i10 + i4;
       HEAP32[i24 + (i1 << 4) + 8 >> 2] = i3;
       HEAP32[i24 + (i1 << 4) + 12 >> 2] = i2 + i3;
       i1 = i1 + 1 | 0;
       i7 = i22 + (i12 << 5) + 4 | 0;
       i8 = i10 - (HEAP32[i7 >> 2] | 0) | 0;
       i2 = HEAP32[i22 + (i12 << 5) >> 2] | 0;
       if (i2 | 0) {
        i9 = HEAP32[i15 >> 2] | 0;
        do {
         i6 = i2 + 24 | 0;
         i4 = (HEAP32[i6 >> 2] | 0) + i8 | 0;
         HEAP32[i6 >> 2] = i4;
         if ((i4 | 0) < 0) {
          i5 = i2 + 4 | 0;
          i3 = (HEAP32[i5 >> 2] | 0) + i4 | 0;
          HEAP32[i5 >> 2] = i3;
          i21 = Math_imul(HEAP32[i2 + 8 >> 2] | 0, 0 - i4 | 0) | 0;
          i4 = i2 + 12 | 0;
          HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i21;
          HEAP32[i6 >> 2] = 0;
          i4 = 0;
         } else {
          i5 = i2 + 4 | 0;
          i3 = HEAP32[i5 >> 2] | 0;
         }
         i21 = i4 + i3 | 0;
         i4 = i9 - i21 + i3 | 0;
         if ((i9 | 0) <= (i21 | 0)) {
          HEAP32[i5 >> 2] = i4;
          i3 = i4;
         }
         if ((i3 | 0) < 1) {
          HEAP32[i5 >> 2] = 0;
          HEAP32[i6 >> 2] = 0;
         }
         i2 = HEAP32[i2 + 28 >> 2] | 0;
        } while ((i2 | 0) != 0);
       }
       HEAP32[i7 >> 2] = i10;
      }
     }
    }
   } while (0);
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) != (i23 | 0));
  _qsort(i24, i1, 16, 204);
  if (i13) {
   i21 = i17 + 112 | 0;
   i20 = i17 + 140 | 0;
   i19 = 0;
   do {
    do if (HEAP32[i22 + (i19 << 5) + 20 >> 2] | 0) {
     i3 = (HEAP32[i22 + (i19 << 5) + 28 >> 2] | 0) + 52 | 0;
     i2 = HEAP32[i3 >> 2] | 0;
     if (!i2) {
      i2 = _calloc(1, 20) | 0;
      HEAP32[i3 >> 2] = i2;
      if (!i2) break;
     }
     if ((HEAP32[i21 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) {
      HEAP32[i2 >> 2] = 0;
      HEAP32[i2 + 4 >> 2] = 0;
      HEAP32[i2 + 8 >> 2] = 0;
      HEAP32[i2 + 12 >> 2] = 0;
      HEAP32[i2 + 16 >> 2] = 0;
      i2 = HEAP32[i3 >> 2] | 0;
      HEAP32[i2 + 16 >> 2] = HEAP32[i21 >> 2];
     }
     if (i2) {
      i15 = i2 + 4 | 0;
      if (!(HEAP32[i15 >> 2] | 0)) {
       i14 = i22 + (i19 << 5) + 4 | 0;
       i10 = HEAP32[i14 >> 2] | 0;
       i16 = i22 + (i19 << 5) + 8 | 0;
       i11 = (HEAP32[i16 >> 2] | 0) + i10 | 0;
       i17 = i22 + (i19 << 5) + 12 | 0;
       i12 = HEAP32[i17 >> 2] | 0;
       i18 = i22 + (i19 << 5) + 16 | 0;
       i13 = (HEAP32[i18 >> 2] | 0) + i12 | 0;
       i3 = (i1 | 0) > 0;
       L63 : do if ((HEAP32[i22 + (i19 << 5) + 24 >> 2] | 0) == 1) if (i3) {
        i5 = 0;
        i3 = 0;
        do {
         if ((i3 + i11 | 0) > (HEAP32[i24 + (i5 << 4) >> 2] | 0)) {
          i4 = HEAP32[i24 + (i5 << 4) + 4 >> 2] | 0;
          if ((i3 + i10 | 0) < (i4 | 0)) if ((i13 | 0) > (HEAP32[i24 + (i5 << 4) + 8 >> 2] | 0)) i3 = (i12 | 0) < (HEAP32[i24 + (i5 << 4) + 12 >> 2] | 0) ? i4 - i10 | 0 : i3;
         }
         i5 = i5 + 1 | 0;
        } while ((i5 | 0) != (i1 | 0));
        i9 = i3;
       } else i9 = 0; else if (i3) {
        i4 = i1;
        i3 = 0;
        while (1) {
         i7 = i3 + i11 | 0;
         i8 = i3 + i10 | 0;
         i6 = i4;
         while (1) {
          i4 = i6 + -1 | 0;
          i5 = HEAP32[i24 + (i4 << 4) >> 2] | 0;
          if ((i7 | 0) > (i5 | 0)) if ((i8 | 0) < (HEAP32[i24 + (i4 << 4) + 4 >> 2] | 0)) if ((i13 | 0) > (HEAP32[i24 + (i4 << 4) + 8 >> 2] | 0)) break;
          if ((i6 | 0) > 1) i6 = i4; else {
           i9 = i3;
           break L63;
          }
         }
         i3 = (i12 | 0) < (HEAP32[i24 + (i4 << 4) + 12 >> 2] | 0) ? i5 - i11 | 0 : i3;
         if ((i6 | 0) <= 1) {
          i9 = i3;
          break;
         }
        }
       } else i9 = 0; while (0);
       HEAP32[i24 + (i1 << 4) >> 2] = i9 + i10;
       HEAP32[i24 + (i1 << 4) + 4 >> 2] = i9 + i11;
       HEAP32[i24 + (i1 << 4) + 8 >> 2] = i12;
       HEAP32[i24 + (i1 << 4) + 12 >> 2] = i13;
       i1 = i1 + 1 | 0;
       _qsort(i24, i1, 16, 204);
       if (!i9) i3 = HEAP32[i14 >> 2] | 0; else {
        i3 = HEAP32[i22 + (i19 << 5) >> 2] | 0;
        if (i3 | 0) {
         i8 = HEAP32[i20 >> 2] | 0;
         do {
          i7 = i3 + 24 | 0;
          i5 = (HEAP32[i7 >> 2] | 0) + i9 | 0;
          HEAP32[i7 >> 2] = i5;
          if ((i5 | 0) < 0) {
           i6 = i3 + 4 | 0;
           i4 = (HEAP32[i6 >> 2] | 0) + i5 | 0;
           HEAP32[i6 >> 2] = i4;
           i13 = Math_imul(HEAP32[i3 + 8 >> 2] | 0, 0 - i5 | 0) | 0;
           i5 = i3 + 12 | 0;
           HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i13;
           HEAP32[i7 >> 2] = 0;
           i5 = 0;
          } else {
           i6 = i3 + 4 | 0;
           i4 = HEAP32[i6 >> 2] | 0;
          }
          i13 = i5 + i4 | 0;
          i5 = i8 - i13 + i4 | 0;
          if ((i8 | 0) <= (i13 | 0)) {
           HEAP32[i6 >> 2] = i5;
           i4 = i5;
          }
          if ((i4 | 0) < 1) {
           HEAP32[i6 >> 2] = 0;
           HEAP32[i7 >> 2] = 0;
          }
          i3 = HEAP32[i3 + 28 >> 2] | 0;
         } while ((i3 | 0) != 0);
        }
        i3 = (HEAP32[i14 >> 2] | 0) + i9 | 0;
        HEAP32[i14 >> 2] = i3;
       }
       HEAP32[i2 >> 2] = i3;
       HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
       HEAP32[i2 + 8 >> 2] = HEAP32[i17 >> 2];
       HEAP32[i2 + 12 >> 2] = HEAP32[i18 >> 2];
      }
     }
    } while (0);
    i19 = i19 + 1 | 0;
   } while ((i19 | 0) != (i23 | 0));
  }
 } else _qsort(i24, 0, 16, 204);
 _free(i24);
 STACKTOP = i25;
 return;
}

function _FcExprPrint(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, d49 = 0.0;
 i48 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 i47 = i48 + 360 | 0;
 i34 = i48 + 352 | 0;
 i33 = i48 + 344 | 0;
 i32 = i48 + 336 | 0;
 i31 = i48 + 328 | 0;
 i30 = i48 + 320 | 0;
 i29 = i48 + 312 | 0;
 i28 = i48 + 304 | 0;
 i27 = i48 + 296 | 0;
 i26 = i48 + 288 | 0;
 i25 = i48 + 280 | 0;
 i24 = i48 + 272 | 0;
 i23 = i48 + 264 | 0;
 i22 = i48 + 256 | 0;
 i21 = i48 + 248 | 0;
 i20 = i48 + 240 | 0;
 i19 = i48 + 232 | 0;
 i18 = i48 + 224 | 0;
 i17 = i48 + 216 | 0;
 i16 = i48 + 208 | 0;
 i15 = i48 + 200 | 0;
 i14 = i48 + 192 | 0;
 i13 = i48 + 184 | 0;
 i12 = i48 + 176 | 0;
 i11 = i48 + 168 | 0;
 i10 = i48 + 160 | 0;
 i9 = i48 + 152 | 0;
 i8 = i48 + 144 | 0;
 i7 = i48 + 136 | 0;
 i6 = i48 + 128 | 0;
 i5 = i48 + 120 | 0;
 i4 = i48 + 112 | 0;
 i3 = i48 + 104 | 0;
 i43 = i48 + 96 | 0;
 i42 = i48 + 88 | 0;
 i41 = i48 + 80 | 0;
 i40 = i48 + 72 | 0;
 i39 = i48 + 64 | 0;
 i38 = i48 + 56 | 0;
 i37 = i48 + 40 | 0;
 i46 = i48 + 32 | 0;
 i45 = i48 + 24 | 0;
 i44 = i48 + 16 | 0;
 i36 = i48 + 8 | 0;
 i35 = i48;
 L1 : do if (i1 | 0) {
  i2 = i1;
  L2 : while (1) {
   switch ((HEAP32[i2 >> 2] & 65535) << 16 >> 16) {
   case 0:
    {
     i1 = 4;
     break L2;
    }
   case 1:
    {
     i1 = 5;
     break L2;
    }
   case 2:
    {
     i1 = 6;
     break L2;
    }
   case 3:
    {
     i1 = 7;
     break L2;
    }
   case 4:
    {
     i1 = 8;
     break L2;
    }
   case 5:
    {
     i1 = 9;
     break L2;
    }
   case 6:
    {
     i1 = 10;
     break L2;
    }
   case 7:
    {
     i1 = 11;
     break L2;
    }
   case 8:
    {
     i1 = 12;
     break L2;
    }
   case 9:
    {
     i1 = 13;
     break L2;
    }
   case 10:
    {
     i1 = 16;
     break L2;
    }
   case 41:
    {
     i1 = 51;
     break L2;
    }
   case 19:
    {
     i1 = i2 + 8 | 0;
     _FcExprPrint(HEAP32[i1 >> 2] | 0);
     _printf(348707, i3) | 0;
     i1 = i1 + 4 | 0;
     _FcExprPrint(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0);
     _printf(348715, i4) | 0;
     i1 = (HEAP32[i1 >> 2] | 0) + 8 + 4 | 0;
     break;
    }
   case 36:
   case 34:
   case 33:
   case 32:
   case 31:
   case 26:
   case 25:
   case 24:
   case 30:
   case 29:
   case 28:
   case 27:
   case 23:
   case 22:
   case 21:
   case 20:
   case 16:
   case 15:
   case 14:
   case 13:
   case 12:
   case 11:
    {
     i1 = i2 + 8 | 0;
     _FcExprPrint(HEAP32[i1 >> 2] | 0);
     _putchar(32) | 0;
     do switch ((HEAP32[i2 >> 2] & 65535) << 16 >> 16) {
     case 11:
      {
       _printf(348723, i5) | 0;
       break;
      }
     case 12:
      {
       _printf(348730, i6) | 0;
       break;
      }
     case 13:
      {
       _printf(348744, i7) | 0;
       break;
      }
     case 14:
      {
       _printf(348757, i8) | 0;
       break;
      }
     case 15:
      {
       _printf(348765, i9) | 0;
       break;
      }
     case 16:
      {
       _printf(348772, i10) | 0;
       break;
      }
     case 20:
      {
       _printf(348783, i11) | 0;
       break;
      }
     case 21:
      {
       _printf(348786, i12) | 0;
       break;
      }
     case 22:
      {
       _printf(348790, i13) | 0;
       if (HEAP32[i2 >> 2] & 65536 | 0) _printf(348796, i14) | 0;
       break;
      }
     case 23:
      {
       _printf(348812, i15) | 0;
       if (HEAP32[i2 >> 2] & 65536 | 0) _printf(348796, i16) | 0;
       break;
      }
     case 27:
      {
       _printf(348821, i17) | 0;
       break;
      }
     case 28:
      {
       _printf(348826, i18) | 0;
       break;
      }
     case 29:
      {
       _printf(348836, i19) | 0;
       break;
      }
     case 30:
      {
       _printf(348841, i20) | 0;
       break;
      }
     case 24:
      {
       _printf(348851, i21) | 0;
       break;
      }
     case 25:
      {
       _printf(348860, i22) | 0;
       if (HEAP32[i2 >> 2] & 65536 | 0) _printf(348796, i23) | 0;
       break;
      }
     case 26:
      {
       _printf(348868, i24) | 0;
       break;
      }
     case 31:
      {
       _printf(348880, i25) | 0;
       break;
      }
     case 32:
      {
       _printf(348885, i26) | 0;
       break;
      }
     case 33:
      {
       _printf(348891, i27) | 0;
       break;
      }
     case 34:
      {
       _printf(348897, i28) | 0;
       break;
      }
     case 36:
      {
       _printf(348904, i29) | 0;
       break;
      }
     default:
      {}
     } while (0);
     _putchar(32) | 0;
     i1 = i1 + 4 | 0;
     break;
    }
   case 35:
    {
     _printf(348910, i30) | 0;
     i1 = i2 + 8 | 0;
     break;
    }
   case 37:
    {
     _printf(348915, i31) | 0;
     i1 = i2 + 8 | 0;
     break;
    }
   case 38:
    {
     _printf(348922, i32) | 0;
     i1 = i2 + 8 | 0;
     break;
    }
   case 39:
    {
     _printf(348928, i33) | 0;
     i1 = i2 + 8 | 0;
     break;
    }
   case 40:
    {
     _printf(348935, i34) | 0;
     i1 = i2 + 8 | 0;
     break;
    }
   default:
    {
     i1 = 52;
     break L2;
    }
   }
   i1 = HEAP32[i1 >> 2] | 0;
   if (!i1) break L1; else i2 = i1;
  }
  switch (i1 | 0) {
  case 4:
   {
    HEAP32[i36 >> 2] = HEAP32[i2 + 8 >> 2];
    _printf(348642, i36) | 0;
    STACKTOP = i48;
    return;
   }
  case 5:
   {
    HEAPF64[i44 >> 3] = +HEAPF64[i2 + 8 >> 3];
    _printf(348645, i44) | 0;
    STACKTOP = i48;
    return;
   }
  case 6:
   {
    HEAP32[i45 >> 2] = HEAP32[i2 + 8 >> 2];
    _printf(347113, i45) | 0;
    STACKTOP = i48;
    return;
   }
  case 7:
   {
    _putchar(91) | 0;
    i47 = i2 + 8 | 0;
    _FcExprPrint(HEAP32[HEAP32[i47 >> 2] >> 2] | 0);
    _putchar(32) | 0;
    _FcExprPrint(HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] | 0);
    _printf(348648, i46) | 0;
    _FcExprPrint(HEAP32[(HEAP32[i47 >> 2] | 0) + 8 >> 2] | 0);
    _putchar(32) | 0;
    _FcExprPrint(HEAP32[(HEAP32[i47 >> 2] | 0) + 12 >> 2] | 0);
    _putchar(93) | 0;
    STACKTOP = i48;
    return;
   }
  case 8:
   {
    i47 = HEAP32[i2 + 8 >> 2] | 0;
    d49 = +HEAPF64[i47 + 8 >> 3];
    HEAPF64[i37 >> 3] = +HEAPF64[i47 >> 3];
    HEAPF64[i37 + 8 >> 3] = d49;
    _printf(348651, i37) | 0;
    STACKTOP = i48;
    return;
   }
  case 9:
   {
    HEAP32[i38 >> 2] = HEAP32[i2 + 8 >> 2] | 0 ? 348660 : 348665;
    _printf(352569, i38) | 0;
    STACKTOP = i48;
    return;
   }
  case 10:
   {
    _puts(355024) | 0;
    STACKTOP = i48;
    return;
   }
  case 11:
   {
    _printf(348671, i39) | 0;
    _FcLangSetPrint(HEAP32[i2 + 8 >> 2] | 0);
    _putchar(10) | 0;
    STACKTOP = i48;
    return;
   }
  case 12:
   {
    _puts(348680) | 0;
    STACKTOP = i48;
    return;
   }
  case 13:
   {
    i47 = i2 + 8 | 0;
    i46 = _FcObjectName(HEAP32[i47 >> 2] | 0) | 0;
    HEAP32[i40 >> 2] = i46;
    _printf(348684, i40) | 0;
    switch (HEAP32[i47 + 4 >> 2] | 0) {
    case 0:
     {
      _printf(348688, i41) | 0;
      STACKTOP = i48;
      return;
     }
    case 1:
     {
      _printf(348699, i42) | 0;
      STACKTOP = i48;
      return;
     }
    default:
     {
      STACKTOP = i48;
      return;
     }
    }
   }
  case 16:
   {
    HEAP32[i43 >> 2] = HEAP32[i2 + 8 >> 2];
    _printf(352569, i43) | 0;
    STACKTOP = i48;
    return;
   }
  case 51:
   {
    _printf(348942, i47) | 0;
    STACKTOP = i48;
    return;
   }
  case 52:
   {
    STACKTOP = i48;
    return;
   }
  }
 } while (0);
 _printf(355915, i35) | 0;
 STACKTOP = i48;
 return;
}

function _ass_expand_horz_c(i2, i45, i1, i46) {
 i2 = i2 | 0;
 i45 = i45 | 0;
 i1 = i1 | 0;
 i46 = i46 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0;
 i48 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i47 = i48;
 i41 = i1 << 1;
 i40 = i41 + 4 | 0;
 i44 = Math_imul(i1 + 15 & -16, i46) | 0;
 i42 = i46 << 4;
 i43 = i47 + 32 | 0;
 if (i40 >>> 0 > 16) {
  i9 = (i46 | 0) == 0;
  i10 = i47 + 2 | 0;
  i11 = i47 + 4 | 0;
  i12 = i47 + 6 | 0;
  i13 = i47 + 8 | 0;
  i14 = i47 + 10 | 0;
  i15 = i47 + 12 | 0;
  i16 = i47 + 14 | 0;
  i17 = i47 + 16 | 0;
  i18 = i47 + 18 | 0;
  i19 = i47 + 20 | 0;
  i20 = i47 + 22 | 0;
  i21 = i47 + 24 | 0;
  i22 = i47 + 26 | 0;
  i23 = i47 + 28 | 0;
  i24 = i47 + 30 | 0;
  i25 = i47 + 34 | 0;
  i26 = i47 + 36 | 0;
  i27 = i47 + 38 | 0;
  i28 = i47 + 40 | 0;
  i29 = i47 + 42 | 0;
  i30 = i47 + 44 | 0;
  i31 = i47 + 46 | 0;
  i32 = i47 + 48 | 0;
  i33 = i47 + 50 | 0;
  i34 = i47 + 52 | 0;
  i35 = i47 + 54 | 0;
  i36 = i47 + 56 | 0;
  i37 = i47 + 58 | 0;
  i38 = i47 + 60 | 0;
  i39 = i47 + 62 | 0;
  i8 = 16;
  i1 = 0;
  do {
   if (!i9) {
    i7 = i2 + (i42 << 1) | 0;
    i5 = 0;
    i6 = i1;
    while (1) {
     i4 = i6 - i42 | 0;
     i4 = i4 >>> 0 < i44 >>> 0 ? i45 + (i4 << 1) | 0 : 368376;
     HEAP16[i47 >> 1] = HEAP16[i4 >> 1] | 0;
     HEAP16[i10 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
     HEAP16[i11 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
     HEAP16[i12 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
     HEAP16[i13 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
     HEAP16[i14 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
     HEAP16[i15 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
     HEAP16[i16 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
     HEAP16[i17 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
     HEAP16[i18 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
     HEAP16[i19 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
     HEAP16[i20 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
     HEAP16[i21 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
     HEAP16[i22 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
     HEAP16[i23 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
     HEAP16[i24 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
     i4 = i6 >>> 0 < i44 >>> 0 ? i45 + (i6 << 1) | 0 : 368376;
     i3 = HEAP16[i4 >> 1] | 0;
     HEAP16[i43 >> 1] = i3;
     HEAP16[i25 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
     HEAP16[i26 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
     HEAP16[i27 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
     HEAP16[i28 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
     HEAP16[i29 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
     HEAP16[i30 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
     HEAP16[i31 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
     HEAP16[i32 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
     HEAP16[i33 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
     HEAP16[i34 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
     HEAP16[i35 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
     HEAP16[i36 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
     HEAP16[i37 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
     HEAP16[i38 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
     HEAP16[i39 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
     i4 = 0;
     while (1) {
      i49 = i4 << 1;
      i52 = HEAP16[i43 + (i4 + -2 << 1) >> 1] | 0;
      i50 = i3 << 16 >> 16;
      i3 = HEAP16[i43 + (i4 + -1 << 1) >> 1] | 0;
      i51 = (((i50 + i52 | 0) >>> 1 & 32767) + i3 | 0) >>> 1 & 32767;
      i3 = i3 + 1 | 0;
      HEAP16[i2 + (i49 << 1) >> 1] = (((i51 + i52 | 0) >>> 1 & 32767) + i3 | 0) >>> 1 & 32767;
      HEAP16[i2 + ((i49 | 1) << 1) >> 1] = (((i51 + i50 | 0) >>> 1 & 32767) + i3 | 0) >>> 1 & 32767;
      i3 = i4 + 1 | 0;
      if ((i3 | 0) == 8) break;
      i4 = i3;
      i3 = HEAP16[i43 + (i3 << 1) >> 1] | 0;
     }
     i4 = i2 + (i42 << 1) + -32 | 0;
     i3 = 8;
     do {
      i52 = i3 << 1;
      i53 = HEAP16[i43 + (i3 + -2 << 1) >> 1] | 0;
      i50 = HEAP16[i43 + (i3 << 1) >> 1] | 0;
      i51 = HEAP16[i43 + (i3 + -1 << 1) >> 1] | 0;
      i49 = (((i50 + i53 | 0) >>> 1 & 32767) + i51 | 0) >>> 1 & 32767;
      i51 = i51 + 1 | 0;
      HEAP16[i4 + (i52 << 1) >> 1] = (((i49 + i53 | 0) >>> 1 & 32767) + i51 | 0) >>> 1 & 32767;
      HEAP16[i4 + ((i52 | 1) << 1) >> 1] = (((i49 + i50 | 0) >>> 1 & 32767) + i51 | 0) >>> 1 & 32767;
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) != 16);
     i5 = i5 + 1 | 0;
     if ((i5 | 0) == (i46 | 0)) break; else {
      i6 = i6 + 16 | 0;
      i2 = i2 + 32 | 0;
     }
    }
    i2 = i7;
    i1 = i42 + i1 | 0;
   }
   i2 = i2 + (i42 << 1) | 0;
   i8 = i8 + 32 | 0;
  } while (i8 >>> 0 < i40 >>> 0);
 } else i1 = 0;
 if (!((i41 + 3 & 16 | 0) == 0 & (i46 | 0) != 0)) {
  STACKTOP = i48;
  return;
 }
 i6 = i47 + 2 | 0;
 i7 = i47 + 4 | 0;
 i8 = i47 + 6 | 0;
 i9 = i47 + 8 | 0;
 i10 = i47 + 10 | 0;
 i11 = i47 + 12 | 0;
 i12 = i47 + 14 | 0;
 i13 = i47 + 16 | 0;
 i14 = i47 + 18 | 0;
 i15 = i47 + 20 | 0;
 i16 = i47 + 22 | 0;
 i17 = i47 + 24 | 0;
 i18 = i47 + 26 | 0;
 i19 = i47 + 28 | 0;
 i20 = i47 + 30 | 0;
 i21 = i47 + 34 | 0;
 i22 = i47 + 36 | 0;
 i23 = i47 + 38 | 0;
 i24 = i47 + 40 | 0;
 i25 = i47 + 42 | 0;
 i26 = i47 + 44 | 0;
 i27 = i47 + 46 | 0;
 i28 = i47 + 48 | 0;
 i29 = i47 + 50 | 0;
 i30 = i47 + 52 | 0;
 i31 = i47 + 54 | 0;
 i32 = i47 + 56 | 0;
 i33 = i47 + 58 | 0;
 i34 = i47 + 60 | 0;
 i35 = i47 + 62 | 0;
 i5 = 0;
 while (1) {
  i4 = i1 - i42 | 0;
  i4 = i4 >>> 0 < i44 >>> 0 ? i45 + (i4 << 1) | 0 : 368376;
  HEAP16[i47 >> 1] = HEAP16[i4 >> 1] | 0;
  HEAP16[i6 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
  HEAP16[i7 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
  HEAP16[i8 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
  HEAP16[i9 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
  HEAP16[i10 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
  HEAP16[i11 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
  HEAP16[i12 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
  HEAP16[i13 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
  HEAP16[i14 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
  HEAP16[i15 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
  HEAP16[i16 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
  HEAP16[i17 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
  HEAP16[i18 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
  HEAP16[i19 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
  HEAP16[i20 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
  i4 = i1 >>> 0 < i44 >>> 0 ? i45 + (i1 << 1) | 0 : 368376;
  i3 = HEAP16[i4 >> 1] | 0;
  HEAP16[i43 >> 1] = i3;
  HEAP16[i21 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
  HEAP16[i22 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
  HEAP16[i23 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
  HEAP16[i24 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
  HEAP16[i25 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
  HEAP16[i26 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
  HEAP16[i27 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
  HEAP16[i28 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
  HEAP16[i29 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
  HEAP16[i30 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
  HEAP16[i31 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
  HEAP16[i32 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
  HEAP16[i33 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
  HEAP16[i34 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
  HEAP16[i35 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
  i4 = 0;
  while (1) {
   i53 = i4 << 1;
   i50 = HEAP16[i43 + (i4 + -2 << 1) >> 1] | 0;
   i52 = i3 << 16 >> 16;
   i3 = HEAP16[i43 + (i4 + -1 << 1) >> 1] | 0;
   i51 = (((i52 + i50 | 0) >>> 1 & 32767) + i3 | 0) >>> 1 & 32767;
   i3 = i3 + 1 | 0;
   HEAP16[i2 + (i53 << 1) >> 1] = (((i51 + i50 | 0) >>> 1 & 32767) + i3 | 0) >>> 1 & 32767;
   HEAP16[i2 + ((i53 | 1) << 1) >> 1] = (((i51 + i52 | 0) >>> 1 & 32767) + i3 | 0) >>> 1 & 32767;
   i3 = i4 + 1 | 0;
   if ((i3 | 0) == 8) break;
   i4 = i3;
   i3 = HEAP16[i43 + (i3 << 1) >> 1] | 0;
  }
  i5 = i5 + 1 | 0;
  if ((i5 | 0) == (i46 | 0)) break; else {
   i1 = i1 + 16 | 0;
   i2 = i2 + 32 | 0;
  }
 }
 STACKTOP = i48;
 return;
}
function ___intscan(i13, i4, i6, i1, i2) {
 i13 = i13 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 L1 : do if (i4 >>> 0 > 36) {
  i2 = ___errno_location() | 0;
  HEAP32[i2 >> 2] = 22;
  i2 = 0;
  i1 = 0;
 } else {
  i15 = i13 + 4 | 0;
  i14 = i13 + 100 | 0;
  do {
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
  } while ((_isspace(i3) | 0) != 0);
  L11 : do switch (i3 | 0) {
  case 43:
  case 45:
   {
    i3 = ((i3 | 0) == 45) << 31 >> 31;
    i5 = HEAP32[i15 >> 2] | 0;
    if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i5 + 1;
     i12 = i3;
     i3 = HEAPU8[i5 >> 0] | 0;
     break L11;
    } else {
     i12 = i3;
     i3 = ___shgetc(i13) | 0;
     break L11;
    }
   }
  default:
   i12 = 0;
  } while (0);
  i5 = (i4 | 0) == 0;
  do if ((i4 | 16 | 0) == 16 & (i3 | 0) == 48) {
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
   if ((i3 | 32 | 0) != 120) if (i5) {
    i4 = 8;
    i10 = 46;
    break;
   } else {
    i10 = 32;
    break;
   }
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
   if ((HEAPU8[366801 + i3 >> 0] | 0) > 15) {
    i1 = (HEAP32[i14 >> 2] | 0) != 0;
    if (i1) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    if (!i6) {
     ___shlim(i13, 0);
     i2 = 0;
     i1 = 0;
     break L1;
    }
    if (!i1) {
     i2 = 0;
     i1 = 0;
     break L1;
    }
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    i2 = 0;
    i1 = 0;
    break L1;
   } else {
    i4 = 16;
    i10 = 46;
   }
  } else {
   i4 = i5 ? 10 : i4;
   if ((HEAPU8[366801 + i3 >> 0] | 0) >>> 0 < i4 >>> 0) i10 = 32; else {
    if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    ___shlim(i13, 0);
    i2 = ___errno_location() | 0;
    HEAP32[i2 >> 2] = 22;
    i2 = 0;
    i1 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((i10 | 0) == 32) if ((i4 | 0) == 10) {
   i4 = i3 + -48 | 0;
   if (i4 >>> 0 < 10) {
    i3 = 0;
    i5 = i4;
    do {
     i3 = (i3 * 10 | 0) + i5 | 0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i5 = i4 + -48 | 0;
    } while (i5 >>> 0 < 10 & i3 >>> 0 < 429496729);
    i6 = 0;
   } else {
    i4 = i3;
    i3 = 0;
    i6 = 0;
   }
   i7 = i4 + -48 | 0;
   if (i7 >>> 0 < 10) {
    i5 = i4;
    do {
     i4 = ___muldi3(i3 | 0, i6 | 0, 10, 0) | 0;
     i8 = tempRet0;
     i9 = ((i7 | 0) < 0) << 31 >> 31;
     i11 = ~i9;
     if (i8 >>> 0 > i11 >>> 0 | (i8 | 0) == (i11 | 0) & i4 >>> 0 > ~i7 >>> 0) {
      i4 = 10;
      i10 = 72;
      break L43;
     }
     i3 = _i64Add(i4 | 0, i8 | 0, i7 | 0, i9 | 0) | 0;
     i6 = tempRet0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i5 = HEAPU8[i4 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i7 = i5 + -48 | 0;
    } while (i7 >>> 0 < 10 & (i6 >>> 0 < 429496729 | (i6 | 0) == 429496729 & i3 >>> 0 < 2576980378));
    if (i7 >>> 0 > 9) {
     i5 = i12;
     i4 = i6;
    } else {
     i4 = 10;
     i10 = 72;
    }
   } else {
    i5 = i12;
    i4 = i6;
   }
  } else i10 = 46; while (0);
  L63 : do if ((i10 | 0) == 46) {
   if (!(i4 + -1 & i4)) {
    i10 = HEAP8[367057 + ((i4 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    i6 = HEAP8[366801 + i3 >> 0] | 0;
    i5 = i6 & 255;
    if (i5 >>> 0 < i4 >>> 0) {
     i3 = 0;
     i7 = i5;
     do {
      i3 = i7 | i3 << i10;
      i5 = HEAP32[i15 >> 2] | 0;
      if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
       HEAP32[i15 >> 2] = i5 + 1;
       i5 = HEAPU8[i5 >> 0] | 0;
      } else i5 = ___shgetc(i13) | 0;
      i6 = HEAP8[366801 + i5 >> 0] | 0;
      i7 = i6 & 255;
     } while (i3 >>> 0 < 134217728 & i7 >>> 0 < i4 >>> 0);
     i7 = 0;
    } else {
     i5 = i3;
     i7 = 0;
     i3 = 0;
    }
    i8 = _bitshift64Lshr(-1, -1, i10 | 0) | 0;
    i9 = tempRet0;
    if ((i6 & 255) >>> 0 >= i4 >>> 0 | (i7 >>> 0 > i9 >>> 0 | (i7 | 0) == (i9 | 0) & i3 >>> 0 > i8 >>> 0)) {
     i6 = i7;
     i10 = 72;
     break;
    } else i5 = i7;
    while (1) {
     i3 = _bitshift64Shl(i3 | 0, i5 | 0, i10 | 0) | 0;
     i7 = tempRet0;
     i3 = i6 & 255 | i3;
     i5 = HEAP32[i15 >> 2] | 0;
     if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i5 + 1;
      i5 = HEAPU8[i5 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i6 = HEAP8[366801 + i5 >> 0] | 0;
     if ((i6 & 255) >>> 0 >= i4 >>> 0 | (i7 >>> 0 > i9 >>> 0 | (i7 | 0) == (i9 | 0) & i3 >>> 0 > i8 >>> 0)) {
      i6 = i7;
      i10 = 72;
      break L63;
     } else i5 = i7;
    }
   }
   i6 = HEAP8[366801 + i3 >> 0] | 0;
   i5 = i6 & 255;
   if (i5 >>> 0 < i4 >>> 0) {
    i3 = 0;
    i7 = i5;
    do {
     i3 = i7 + (Math_imul(i3, i4) | 0) | 0;
     i5 = HEAP32[i15 >> 2] | 0;
     if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i5 + 1;
      i5 = HEAPU8[i5 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i6 = HEAP8[366801 + i5 >> 0] | 0;
     i7 = i6 & 255;
    } while (i3 >>> 0 < 119304647 & i7 >>> 0 < i4 >>> 0);
    i7 = 0;
   } else {
    i5 = i3;
    i3 = 0;
    i7 = 0;
   }
   if ((i6 & 255) >>> 0 < i4 >>> 0) {
    i10 = ___udivdi3(-1, -1, i4 | 0, 0) | 0;
    i11 = tempRet0;
    i9 = i7;
    while (1) {
     if (i9 >>> 0 > i11 >>> 0 | (i9 | 0) == (i11 | 0) & i3 >>> 0 > i10 >>> 0) {
      i6 = i9;
      i10 = 72;
      break L63;
     }
     i7 = ___muldi3(i3 | 0, i9 | 0, i4 | 0, 0) | 0;
     i8 = tempRet0;
     i6 = i6 & 255;
     if (i8 >>> 0 > 4294967295 | (i8 | 0) == -1 & i7 >>> 0 > ~i6 >>> 0) {
      i6 = i9;
      i10 = 72;
      break L63;
     }
     i3 = _i64Add(i6 | 0, 0, i7 | 0, i8 | 0) | 0;
     i7 = tempRet0;
     i5 = HEAP32[i15 >> 2] | 0;
     if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i5 + 1;
      i5 = HEAPU8[i5 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i6 = HEAP8[366801 + i5 >> 0] | 0;
     if ((i6 & 255) >>> 0 >= i4 >>> 0) {
      i6 = i7;
      i10 = 72;
      break;
     } else i9 = i7;
    }
   } else {
    i6 = i7;
    i10 = 72;
   }
  } while (0);
  if ((i10 | 0) == 72) if ((HEAPU8[366801 + i5 >> 0] | 0) >>> 0 < i4 >>> 0) {
   do {
    i3 = HEAP32[i15 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
    } else i3 = ___shgetc(i13) | 0;
   } while ((HEAPU8[366801 + i3 >> 0] | 0) >>> 0 < i4 >>> 0);
   i5 = ___errno_location() | 0;
   HEAP32[i5 >> 2] = 34;
   i5 = (i1 & 1 | 0) == 0 & 0 == 0 ? i12 : 0;
   i4 = i2;
   i3 = i1;
  } else {
   i5 = i12;
   i4 = i6;
  }
  if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
  if (!(i4 >>> 0 < i2 >>> 0 | (i4 | 0) == (i2 | 0) & i3 >>> 0 < i1 >>> 0)) {
   if (!((i1 & 1 | 0) != 0 | 0 != 0 | (i5 | 0) != 0)) {
    i15 = ___errno_location() | 0;
    HEAP32[i15 >> 2] = 34;
    i1 = _i64Add(i1 | 0, i2 | 0, -1, -1) | 0;
    i2 = tempRet0;
    break;
   }
   if (i4 >>> 0 > i2 >>> 0 | (i4 | 0) == (i2 | 0) & i3 >>> 0 > i1 >>> 0) {
    i15 = ___errno_location() | 0;
    HEAP32[i15 >> 2] = 34;
    break;
   }
  }
  i1 = ((i5 | 0) < 0) << 31 >> 31;
  i1 = _i64Subtract(i3 ^ i5 | 0, i4 ^ i1 | 0, i5 | 0, i1 | 0) | 0;
  i2 = tempRet0;
 } while (0);
 tempRet0 = i2;
 return i1 | 0;
}

function _storeEntityValue(i19, i20, i2, i36) {
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 i36 = i36 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0;
 i47 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i41 = i47 + 4 | 0;
 i42 = i47;
 i1 = HEAP32[i19 + 356 >> 2] | 0;
 i43 = i1 + 104 | 0;
 i45 = i19 + 276 | 0;
 i44 = HEAP32[i45 >> 2] | 0;
 HEAP32[i45 >> 2] = 1;
 if (!(HEAP32[i43 >> 2] | 0)) if (!((_poolGrow(i43) | 0) << 24 >> 24)) {
  i46 = 1;
  STACKTOP = i47;
  return i46 | 0;
 }
 i21 = i20 + 20 | 0;
 i22 = i19 + 488 | 0;
 i23 = i19 + 144 | 0;
 i24 = i19 + 416 | 0;
 i25 = i20 + 68 | 0;
 i26 = i19 + 428 | 0;
 i27 = i20 + 60 | 0;
 i28 = i19 + 424 | 0;
 i29 = i19 + 432 | 0;
 i30 = i1 + 140 | 0;
 i17 = i19 + 496 | 0;
 i31 = i1 + 132 | 0;
 i32 = i1 + 136 | 0;
 i33 = i19 + 228 | 0;
 i34 = i19 + 112 | 0;
 i18 = i1 + 130 | 0;
 i35 = i1 + 128 | 0;
 i37 = i1 + 131 | 0;
 i38 = i19 + 116 | 0;
 i39 = i1 + 116 | 0;
 i40 = i1 + 112 | 0;
 i15 = i1 + 120 | 0;
 i16 = i20 + 44 | 0;
 L5 : while (1) {
  L7 : do switch (FUNCTION_TABLE_iiiii[HEAP32[i21 >> 2] & 127](i20, i2, i36, i42) | 0) {
  case -4:
   {
    i1 = 0;
    break L5;
   }
  case -1:
   {
    i46 = 65;
    break L5;
   }
  case 0:
   {
    i46 = 67;
    break L5;
   }
  case 28:
   {
    if (!(HEAP8[i22 >> 0] | 0)) if ((HEAP32[i23 >> 2] | 0) == (i20 | 0)) {
     i46 = 40;
     break L5;
    }
    i14 = HEAP32[i25 >> 2] | 0;
    i1 = (HEAP32[i42 >> 2] | 0) + (0 - i14) | 0;
    HEAP32[i41 >> 2] = i2 + i14;
    if (!(HEAP32[i26 >> 2] | 0)) if (!((_poolGrow(i24) | 0) << 24 >> 24)) {
     i46 = 11;
     break L5;
    }
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i27 >> 2] & 31](i20, i41, i1, i26, HEAP32[i28 >> 2] | 0);
     if ((HEAP32[i41 >> 2] | 0) == (i1 | 0)) break;
     if (!((_poolGrow(i24) | 0) << 24 >> 24)) {
      i46 = 11;
      break L5;
     }
    }
    if (!(HEAP32[i29 >> 2] | 0)) {
     i1 = 1;
     break L5;
    }
    i1 = HEAP32[i26 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i28 >> 2] | 0)) {
     if (!((_poolGrow(i24) | 0) << 24 >> 24)) {
      i1 = 1;
      break L5;
     }
     i1 = HEAP32[i26 >> 2] | 0;
    }
    HEAP32[i26 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = 0;
    i11 = HEAP32[i29 >> 2] | 0;
    i12 = i11;
    if (!i11) {
     i1 = 1;
     break L5;
    }
    i13 = HEAP32[i30 >> 2] | 0;
    if (!i13) {
     i46 = 28;
     break L5;
    }
    i1 = HEAP32[i17 >> 2] | 0;
    i14 = HEAP8[i11 >> 0] | 0;
    if (i14 << 24 >> 24) {
     i3 = i11;
     i4 = i14;
     do {
      i3 = i3 + 1 | 0;
      i1 = i1 * 1000003 ^ i4 & 255;
      i4 = HEAP8[i3 >> 0] | 0;
     } while (i4 << 24 >> 24 != 0);
    }
    i3 = i13 + -1 | 0;
    i4 = i1 & i3;
    i10 = HEAP32[i31 >> 2] | 0;
    i5 = HEAP32[i10 + (i4 << 2) >> 2] | 0;
    if (!i5) {
     i46 = 28;
     break L5;
    }
    i9 = i1 & 0 - i13;
    i8 = i3 >>> 2;
    i1 = 0;
    L30 : while (1) {
     i3 = HEAP32[i5 >> 2] | 0;
     if (i14 << 24 >> 24 == (HEAP8[i3 >> 0] | 0)) {
      i7 = i11;
      i6 = i14;
      do {
       if (!(i6 << 24 >> 24)) break L30;
       i7 = i7 + 1 | 0;
       i3 = i3 + 1 | 0;
       i6 = HEAP8[i7 >> 0] | 0;
      } while (i6 << 24 >> 24 == (HEAP8[i3 >> 0] | 0));
     }
     if (!(i1 << 24 >> 24)) i1 = (i9 >>> ((HEAPU8[i32 >> 0] | 0) + -1 | 0) & i8 | 1) & 255;
     i3 = i1 & 255;
     i4 = (i4 >>> 0 < i3 >>> 0 ? i13 : 0) + (i4 - i3) | 0;
     i3 = HEAP32[i10 + (i4 << 2) >> 2] | 0;
     if (!i3) {
      i46 = 28;
      break L5;
     } else i5 = i3;
    }
    HEAP32[i26 >> 2] = i12;
    if (!i5) {
     i46 = 30;
     break L5;
    }
    i3 = i5 + 32 | 0;
    if (HEAP8[i3 >> 0] | 0) {
     i46 = 32;
     break L5;
    }
    i1 = HEAP32[i5 + 16 >> 2] | 0;
    if (!i1) {
     HEAP8[i3 >> 0] = 1;
     i1 = HEAP32[i5 + 4 >> 2] | 0;
     i1 = _storeEntityValue(i19, HEAP32[i33 >> 2] | 0, i1, i1 + (HEAP32[i5 + 8 >> 2] | 0) | 0) | 0;
     HEAP8[i3 >> 0] = 0;
     if (!i1) break L7; else break L5;
    }
    i2 = HEAP32[i34 >> 2] | 0;
    if (i2 | 0) {
     HEAP8[i37 >> 0] = 0;
     HEAP8[i3 >> 0] = 1;
     i14 = (FUNCTION_TABLE_iiiiii[i2 & 127](HEAP32[i38 >> 2] | 0, 0, HEAP32[i5 + 20 >> 2] | 0, i1, HEAP32[i5 + 24 >> 2] | 0) | 0) == 0;
     HEAP8[i3 >> 0] = 0;
     if (i14) {
      i1 = 21;
      break L5;
     }
     if (HEAP8[i37 >> 0] | 0) break L7;
    }
    HEAP8[i35 >> 0] = HEAP8[i18 >> 0] | 0;
    break;
   }
  case 6:
  case 9:
   {
    i1 = HEAP32[i42 >> 2] | 0;
    HEAP32[i41 >> 2] = i2;
    if (!(HEAP32[i39 >> 2] | 0)) if (!((_poolGrow(i43) | 0) << 24 >> 24)) {
     i46 = 45;
     break L5;
    }
    while (1) {
     FUNCTION_TABLE_viiiii[HEAP32[i27 >> 2] & 31](i20, i41, i1, i39, HEAP32[i40 >> 2] | 0);
     if ((HEAP32[i41 >> 2] | 0) == (i1 | 0)) break;
     if (!((_poolGrow(i43) | 0) << 24 >> 24)) {
      i46 = 45;
      break L5;
     }
    }
    if (!(HEAP32[i15 >> 2] | 0)) {
     i1 = 1;
     break L5;
    }
    break;
   }
  case -3:
   {
    HEAP32[i42 >> 2] = i2 + (HEAP32[i25 >> 2] | 0);
    i46 = 48;
    break;
   }
  case 7:
   {
    i46 = 48;
    break;
   }
  case 10:
   {
    i1 = FUNCTION_TABLE_iii[HEAP32[i16 >> 2] & 255](i20, i2) | 0;
    if ((i1 | 0) < 0) {
     i46 = 53;
     break L5;
    }
    i3 = _XmlUtf8Encode(i1, i41) | 0;
    if (!i3) {
     i46 = 57;
     break L5;
    }
    if ((i3 | 0) > 0) {
     i2 = 0;
     do {
      i1 = HEAP32[i39 >> 2] | 0;
      if ((HEAP32[i40 >> 2] | 0) == (i1 | 0)) {
       if (!((_poolGrow(i43) | 0) << 24 >> 24)) {
        i1 = 1;
        i46 = 63;
        break L5;
       }
       i1 = HEAP32[i39 >> 2] | 0;
      }
      i14 = HEAP8[i41 + i2 >> 0] | 0;
      HEAP32[i39 >> 2] = i1 + 1;
      HEAP8[i1 >> 0] = i14;
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) < (i3 | 0));
    }
    break;
   }
  default:
   {
    i46 = 69;
    break L5;
   }
  } while (0);
  if ((i46 | 0) == 48) {
   i46 = 0;
   i1 = HEAP32[i39 >> 2] | 0;
   if ((HEAP32[i40 >> 2] | 0) == (i1 | 0)) {
    if (!((_poolGrow(i43) | 0) << 24 >> 24)) {
     i1 = 1;
     break;
    }
    i1 = HEAP32[i39 >> 2] | 0;
   }
   HEAP32[i39 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = 10;
  }
  i2 = HEAP32[i42 >> 2] | 0;
 }
 switch (i46 | 0) {
 case 11:
  {
   i1 = 1;
   break;
  }
 case 28:
  {
   HEAP32[i26 >> 2] = i12;
   i46 = 30;
   break;
  }
 case 32:
  {
   if ((HEAP32[i23 >> 2] | 0) == (i20 | 0)) {
    HEAP32[i19 + 288 >> 2] = i2;
    i1 = 12;
   } else i1 = 12;
   break;
  }
 case 40:
  {
   HEAP32[i19 + 288 >> 2] = i2;
   i1 = 10;
   break;
  }
 case 45:
  {
   i1 = 1;
   break;
  }
 case 53:
  {
   if ((HEAP32[i23 >> 2] | 0) == (i20 | 0)) {
    HEAP32[i19 + 288 >> 2] = i2;
    i1 = 14;
    i46 = 63;
   } else {
    i1 = 14;
    i46 = 63;
   }
   break;
  }
 case 57:
  {
   if ((HEAP32[i23 >> 2] | 0) == (i20 | 0)) {
    HEAP32[i19 + 288 >> 2] = i2;
    i1 = 14;
    i46 = 63;
   } else {
    i1 = 14;
    i46 = 63;
   }
   break;
  }
 case 65:
  {
   if ((HEAP32[i23 >> 2] | 0) == (i20 | 0)) {
    HEAP32[i19 + 288 >> 2] = i2;
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 67:
  {
   if ((HEAP32[i23 >> 2] | 0) == (i20 | 0)) {
    HEAP32[i19 + 288 >> 2] = HEAP32[i42 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 69:
  {
   if ((HEAP32[i23 >> 2] | 0) == (i20 | 0)) {
    HEAP32[i19 + 288 >> 2] = i2;
    i1 = 23;
   } else i1 = 23;
   break;
  }
 }
 if ((i46 | 0) == 30) {
  HEAP8[i35 >> 0] = HEAP8[i18 >> 0] | 0;
  i1 = 0;
 }
 HEAP32[i45 >> 2] = i44;
 i46 = i1;
 STACKTOP = i47;
 return i46 | 0;
}

function _TT_Get_MM_Var(i1, i19) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i22 + 44 | 0;
 i20 = i22 + 40 | 0;
 i4 = i22 + 24 | 0;
 i13 = i22;
 i16 = HEAP32[i1 + 104 >> 2] | 0;
 i17 = HEAP32[i1 + 100 >> 2] | 0;
 HEAP32[i20 >> 2] = 0;
 i18 = i1 + 676 | 0;
 L1 : do if (!(HEAP32[i18 >> 2] | 0)) {
  i2 = i1 + 508 | 0;
  i15 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i1, 1735811442, i16, i5) | 0;
  HEAP32[i20 >> 2] = i15;
  if (i15 | 0) {
   i21 = HEAP32[i20 >> 2] | 0;
   STACKTOP = i22;
   return i21 | 0;
  }
  i15 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i1, 1719034226, i16, i5) | 0;
  HEAP32[i20 >> 2] = i15;
  if (i15 | 0) {
   i21 = HEAP32[i20 >> 2] | 0;
   STACKTOP = i22;
   return i21 | 0;
  }
  i11 = _FT_Stream_Pos(i16) | 0;
  i15 = _FT_Stream_ReadFields(i16, 114544, i4) | 0;
  HEAP32[i20 >> 2] = i15;
  if (i15 | 0) {
   i21 = HEAP32[i20 >> 2] | 0;
   STACKTOP = i22;
   return i21 | 0;
  }
  if ((HEAP32[i4 >> 2] | 0) == 65536) if ((HEAP16[i4 + 10 >> 1] | 0) == 20) {
   i14 = i4 + 8 | 0;
   i15 = HEAP16[i14 >> 1] | 0;
   i1 = i15 & 65535;
   if ((i15 & 65535) <= 16382) {
    i2 = HEAPU16[i4 + 14 >> 1] | 0;
    if ((i2 | 0) == ((i1 << 2) + 4 | 0)) {
     i15 = i4 + 12 | 0;
     i3 = HEAP16[i15 >> 1] | 0;
     if ((i3 & 65535) <= 32511) {
      i10 = i4 + 4 | 0;
      i12 = (Math_imul(i3 & 65535, i2) | 0) + (i1 * 20 | 0) + (HEAPU16[i10 >> 1] | 0) | 0;
      if (i12 >>> 0 <= (HEAP32[i5 >> 2] | 0) >>> 0) {
       i1 = _ft_mem_alloc(i17, 40, i20) | 0;
       HEAP32[i18 >> 2] = i1;
       if (HEAP32[i20 >> 2] | 0) {
        i21 = HEAP32[i20 >> 2] | 0;
        STACKTOP = i22;
        return i21 | 0;
       }
       i2 = HEAPU16[i15 >> 1] | 0;
       i2 = (i2 << 3) + 20 + (Math_imul((i2 << 2) + 29 | 0, HEAPU16[i14 >> 1] | 0) | 0) | 0;
       HEAP32[i1 + 12 >> 2] = i2;
       i2 = _ft_mem_alloc(i17, i2, i20) | 0;
       if (HEAP32[i20 >> 2] | 0) {
        i21 = HEAP32[i20 >> 2] | 0;
        STACKTOP = i22;
        return i21 | 0;
       }
       HEAP32[(HEAP32[i18 >> 2] | 0) + 8 >> 2] = i2;
       i6 = HEAP16[i14 >> 1] | 0;
       i7 = i6 & 65535;
       HEAP32[i2 >> 2] = i7;
       HEAP32[i2 + 4 >> 2] = -1;
       i3 = HEAP16[i15 >> 1] | 0;
       i4 = i3 & 65535;
       HEAP32[i2 + 8 >> 2] = i4;
       i8 = i2 + 20 | 0;
       i9 = i2 + 12 | 0;
       HEAP32[i9 >> 2] = i8;
       i5 = i8 + (i7 * 24 | 0) | 0;
       i12 = i2 + 16 | 0;
       HEAP32[i12 >> 2] = i5;
       i1 = i5 + (i4 << 3) | 0;
       if (i3 << 16 >> 16) {
        i3 = i2 + ((Math_imul((i4 << 2) + 24 | 0, i7) | 0) + (i4 << 3) + 20) | 0;
        i2 = 0;
        while (1) {
         HEAP32[i5 + (i2 << 3) >> 2] = i1;
         i2 = i2 + 1 | 0;
         if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + (i7 << 2) | 0;
        }
        i1 = i3;
       }
       if (i6 << 16 >> 16) {
        i2 = 0;
        while (1) {
         HEAP32[i8 + (i2 * 24 | 0) >> 2] = i1;
         i2 = i2 + 1 | 0;
         if ((i2 | 0) >= (i7 | 0)) break; else i1 = i1 + 5 | 0;
        }
       }
       i11 = _FT_Stream_Seek(i16, (HEAPU16[i10 >> 1] | 0) + i11 | 0) | 0;
       HEAP32[i20 >> 2] = i11;
       if (i11 | 0) {
        i21 = HEAP32[i20 >> 2] | 0;
        STACKTOP = i22;
        return i21 | 0;
       }
       L39 : do if (!(HEAP16[i14 >> 1] | 0)) i2 = 0; else {
        i4 = i13 + 4 | 0;
        i5 = i13 + 8 | 0;
        i6 = i13 + 12 | 0;
        i7 = i13 + 18 | 0;
        i1 = HEAP32[i9 >> 2] | 0;
        i3 = 0;
        while (1) {
         i11 = _FT_Stream_ReadFields(i16, 114580, i13) | 0;
         HEAP32[i20 >> 2] = i11;
         if (i11 | 0) break;
         i11 = HEAP32[i13 >> 2] | 0;
         i2 = i1 + 16 | 0;
         HEAP32[i2 >> 2] = i11;
         HEAP32[i1 + 4 >> 2] = HEAP32[i4 >> 2];
         HEAP32[i1 + 8 >> 2] = HEAP32[i5 >> 2];
         HEAP32[i1 + 12 >> 2] = HEAP32[i6 >> 2];
         HEAP32[i1 + 20 >> 2] = HEAPU16[i7 >> 1];
         HEAP8[HEAP32[i1 >> 2] >> 0] = i11 >>> 24;
         HEAP8[(HEAP32[i1 >> 2] | 0) + 1 >> 0] = (HEAP32[i2 >> 2] | 0) >>> 16;
         HEAP8[(HEAP32[i1 >> 2] | 0) + 2 >> 0] = (HEAP32[i2 >> 2] | 0) >>> 8;
         HEAP8[(HEAP32[i1 >> 2] | 0) + 3 >> 0] = HEAP32[i2 >> 2];
         HEAP8[(HEAP32[i1 >> 2] | 0) + 4 >> 0] = 0;
         i3 = i3 + 1 | 0;
         i2 = HEAP16[i14 >> 1] | 0;
         if ((i3 | 0) >= (i2 & 65535 | 0)) break L39; else i1 = i1 + 24 | 0;
        }
        i21 = HEAP32[i20 >> 2] | 0;
        STACKTOP = i22;
        return i21 | 0;
       } while (0);
       if (!(HEAP16[i15 >> 1] | 0)) break;
       i1 = HEAP32[i12 >> 2] | 0;
       i13 = _FT_Stream_EnterFrame(i16, ((i2 & 65535) << 2) + 4 | 0) | 0;
       HEAP32[i20 >> 2] = i13;
       if (!i13) i3 = 0; else {
        i21 = HEAP32[i20 >> 2] | 0;
        STACKTOP = i22;
        return i21 | 0;
       }
       while (1) {
        i13 = (_FT_Stream_GetUShort(i16) | 0) & 65535;
        HEAP32[i1 + 4 >> 2] = i13;
        _FT_Stream_GetUShort(i16) | 0;
        if (HEAP16[i14 >> 1] | 0) {
         i2 = 0;
         do {
          i13 = _FT_Stream_GetULong(i16) | 0;
          HEAP32[(HEAP32[i1 >> 2] | 0) + (i2 << 2) >> 2] = i13;
          i2 = i2 + 1 | 0;
         } while ((i2 | 0) < (HEAPU16[i14 >> 1] | 0));
        }
        _FT_Stream_ExitFrame(i16);
        i3 = i3 + 1 | 0;
        if ((i3 | 0) >= (HEAPU16[i15 >> 1] | 0)) break L1;
        i13 = _FT_Stream_EnterFrame(i16, (HEAPU16[i14 >> 1] << 2) + 4 | 0) | 0;
        HEAP32[i20 >> 2] = i13;
        if (i13 | 0) break; else i1 = i1 + 8 | 0;
       }
       i21 = HEAP32[i20 >> 2] | 0;
       STACKTOP = i22;
       return i21 | 0;
      }
     }
    }
   }
  }
  HEAP32[i20 >> 2] = 8;
  i21 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i22;
  return i21 | 0;
 } while (0);
 if (!i19) {
  i21 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 i7 = _ft_mem_alloc(i17, HEAP32[(HEAP32[i18 >> 2] | 0) + 12 >> 2] | 0, i20) | 0;
 if (HEAP32[i20 >> 2] | 0) {
  i21 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 i3 = HEAP32[i18 >> 2] | 0;
 _memcpy(i7 | 0, HEAP32[i3 + 8 >> 2] | 0, HEAP32[i3 + 12 >> 2] | 0) | 0;
 i3 = i7 + 20 | 0;
 HEAP32[i7 + 12 >> 2] = i3;
 i6 = HEAP32[i7 >> 2] | 0;
 i4 = i3 + (i6 * 24 | 0) | 0;
 HEAP32[i7 + 16 >> 2] = i4;
 i5 = HEAP32[i7 + 8 >> 2] | 0;
 i1 = i4 + (i5 << 3) | 0;
 if (i5) {
  i2 = 0;
  do {
   HEAP32[i4 + (i2 << 3) >> 2] = i1;
   i1 = i1 + (i6 << 2) | 0;
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < i5 >>> 0);
 }
 if (i6 | 0) {
  i4 = 0;
  while (1) {
   HEAP32[i3 >> 2] = i1;
   i2 = HEAP32[i3 + 16 >> 2] | 0;
   L76 : do if ((i2 | 0) < 2003072104) if ((i2 | 0) < 1936486004) {
    switch (i2 | 0) {
    case 1869640570:
     break;
    default:
     break L76;
    }
    i2 = 280156;
    i21 = 44;
    break;
   } else {
    switch (i2 | 0) {
    case 1936486004:
     break;
    default:
     break L76;
    }
    i2 = 280017;
    i21 = 44;
    break;
   } else {
    if ((i2 | 0) >= 2003265652) switch (i2 | 0) {
    case 2003265652:
     {
      i2 = 284829;
      i21 = 44;
      break L76;
     }
    default:
     break L76;
    }
    switch (i2 | 0) {
    case 2003072104:
     break;
    default:
     break L76;
    }
    i2 = 280150;
    i21 = 44;
   } while (0);
   if ((i21 | 0) == 44) {
    i21 = 0;
    HEAP32[i3 >> 2] = i2;
   }
   i4 = i4 + 1 | 0;
   if (i4 >>> 0 >= i6 >>> 0) break; else {
    i1 = i1 + 5 | 0;
    i3 = i3 + 24 | 0;
   }
  }
 }
 HEAP32[i19 >> 2] = i7;
 i21 = HEAP32[i20 >> 2] | 0;
 STACKTOP = i22;
 return i21 | 0;
}

function ___rem_pio2_large(i20, i2, i24, i21, i27) {
 i20 = i20 | 0;
 i2 = i2 | 0;
 i24 = i24 | 0;
 i21 = i21 | 0;
 i27 = i27 | 0;
 var d1 = 0.0, d3 = 0.0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 i25 = i31 + 480 | 0;
 i22 = i31 + 320 | 0;
 i30 = i31 + 160 | 0;
 i28 = i31;
 i26 = HEAP32[91724 + (i27 << 2) >> 2] | 0;
 i10 = i21 + -1 | 0;
 i19 = (i24 + -3 | 0) / 24 | 0;
 i19 = (i19 | 0) > 0 ? i19 : 0;
 i23 = Math_imul(i19, -24) | 0;
 i4 = i24 + -24 + i23 | 0;
 if ((i26 + i10 | 0) >= 0) {
  i8 = i26 + i21 | 0;
  i6 = i19 - i10 | 0;
  i7 = 0;
  while (1) {
   if ((i6 | 0) < 0) d1 = 0.0; else d1 = +(HEAP32[91740 + (i6 << 2) >> 2] | 0);
   HEAPF64[i22 + (i7 << 3) >> 3] = d1;
   i7 = i7 + 1 | 0;
   if ((i7 | 0) == (i8 | 0)) break; else i6 = i6 + 1 | 0;
  }
 }
 i9 = (i21 | 0) > 0;
 i8 = 0;
 while (1) {
  if (i9) {
   i7 = i8 + i10 | 0;
   d1 = 0.0;
   i6 = 0;
   do {
    d1 = d1 + +HEAPF64[i20 + (i6 << 3) >> 3] * +HEAPF64[i22 + (i7 - i6 << 3) >> 3];
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != (i21 | 0));
  } else d1 = 0.0;
  HEAPF64[i28 + (i8 << 3) >> 3] = d1;
  if ((i8 | 0) < (i26 | 0)) i8 = i8 + 1 | 0; else break;
 }
 i14 = (i4 | 0) > 0;
 i15 = 24 - i4 | 0;
 i16 = 23 - i4 | 0;
 i17 = (i21 | 0) > 0;
 i18 = (i4 | 0) == 0;
 i6 = i26;
 L17 : while (1) {
  d1 = +HEAPF64[i28 + (i6 << 3) >> 3];
  i9 = (i6 | 0) > 0;
  if (i9) {
   i7 = i6;
   i8 = 0;
   while (1) {
    d5 = +(~~(d1 * 5.9604644775390625e-08) | 0);
    HEAP32[i25 + (i8 << 2) >> 2] = ~~(d1 - d5 * 16777216.0);
    i13 = i7;
    i7 = i7 + -1 | 0;
    d1 = d5 + +HEAPF64[i28 + (i7 << 3) >> 3];
    if ((i13 | 0) <= 1) break; else i8 = i8 + 1 | 0;
   }
  }
  d1 = +_scalbn(d1, i4);
  d1 = d1 - +Math_floor(+(d1 * .125)) * 8.0;
  i7 = ~~d1;
  d1 = d1 - +(i7 | 0);
  do if (i14) {
   i13 = i25 + (i6 + -1 << 2) | 0;
   i8 = HEAP32[i13 >> 2] | 0;
   i29 = i8 >> i15;
   i8 = i8 - (i29 << i15) | 0;
   HEAP32[i13 >> 2] = i8;
   i8 = i8 >> i16;
   i7 = i29 + i7 | 0;
   i29 = 19;
  } else if (i18) {
   i8 = HEAP32[i25 + (i6 + -1 << 2) >> 2] >> 23;
   i29 = 19;
   break;
  } else if (!(d1 >= .5)) {
   i10 = 0;
   i13 = i7;
   break;
  } else {
   i8 = 2;
   i29 = 20;
   break;
  } while (0);
  if ((i29 | 0) == 19) {
   i29 = 0;
   if ((i8 | 0) > 0) i29 = 20; else {
    i10 = i8;
    i13 = i7;
   }
  }
  if ((i29 | 0) == 20) {
   i29 = 0;
   i13 = i7 + 1 | 0;
   if (i9) {
    i7 = 0;
    i12 = 0;
    do {
     i10 = i25 + (i12 << 2) | 0;
     i11 = HEAP32[i10 >> 2] | 0;
     if (!i7) if (!i11) i7 = 0; else {
      i7 = 1;
      i9 = 16777216;
      i29 = 23;
     } else {
      i9 = 16777215;
      i29 = 23;
     }
     if ((i29 | 0) == 23) {
      i29 = 0;
      HEAP32[i10 >> 2] = i9 - i11;
     }
     i12 = i12 + 1 | 0;
    } while ((i12 | 0) != (i6 | 0));
   } else i7 = 0;
   L42 : do if (i14) {
    switch (i4 | 0) {
    case 1:
     {
      i9 = 8388607;
      break;
     }
    case 2:
     {
      i9 = 4194303;
      break;
     }
    default:
     break L42;
    }
    i12 = i25 + (i6 + -1 << 2) | 0;
    HEAP32[i12 >> 2] = HEAP32[i12 >> 2] & i9;
   } while (0);
   if ((i8 | 0) == 2) {
    d1 = 1.0 - d1;
    if (!i7) i10 = 2; else {
     i10 = 2;
     d1 = d1 - +_scalbn(1.0, i4);
    }
   } else i10 = i8;
  }
  if (!(d1 == 0.0)) {
   i29 = 42;
   break;
  }
  if ((i6 | 0) > (i26 | 0)) {
   i7 = 0;
   i8 = i6;
   do {
    i8 = i8 + -1 | 0;
    i7 = HEAP32[i25 + (i8 << 2) >> 2] | i7;
   } while ((i8 | 0) > (i26 | 0));
   if (!i7) i7 = 1; else {
    i29 = 41;
    break;
   }
  } else i7 = 1;
  while (1) if (!(HEAP32[i25 + (i26 - i7 << 2) >> 2] | 0)) i7 = i7 + 1 | 0; else break;
  i9 = i7 + i6 | 0;
  if ((i7 | 0) <= 0) {
   i6 = i9;
   continue;
  }
  while (1) {
   i8 = i6 + 1 | 0;
   i7 = i6 + i21 | 0;
   HEAPF64[i22 + (i7 << 3) >> 3] = +(HEAP32[91740 + (i8 + i19 << 2) >> 2] | 0);
   if (i17) {
    d1 = 0.0;
    i6 = 0;
    do {
     d1 = d1 + +HEAPF64[i20 + (i6 << 3) >> 3] * +HEAPF64[i22 + (i7 - i6 << 3) >> 3];
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i21 | 0));
   } else d1 = 0.0;
   HEAPF64[i28 + (i8 << 3) >> 3] = d1;
   if ((i8 | 0) < (i9 | 0)) i6 = i8; else {
    i6 = i9;
    continue L17;
   }
  }
 }
 if ((i29 | 0) == 41) while (1) {
  i29 = 0;
  i4 = i4 + -24 | 0;
  i6 = i6 + -1 | 0;
  if (!(HEAP32[i25 + (i6 << 2) >> 2] | 0)) i29 = 41; else {
   i9 = i6;
   break;
  }
 } else if ((i29 | 0) == 42) {
  d1 = +_scalbn(d1, 0 - i4 | 0);
  if (d1 >= 16777216.0) {
   d5 = +(~~(d1 * 5.9604644775390625e-08) | 0);
   HEAP32[i25 + (i6 << 2) >> 2] = ~~(d1 - d5 * 16777216.0);
   i4 = i23 + i24 | 0;
   i6 = i6 + 1 | 0;
   d1 = d5;
  }
  HEAP32[i25 + (i6 << 2) >> 2] = ~~d1;
  i9 = i6;
 }
 i8 = (i9 | 0) > -1;
 if (i8) {
  d1 = +_scalbn(1.0, i4);
  i4 = i9;
  while (1) {
   HEAPF64[i28 + (i4 << 3) >> 3] = d1 * +(HEAP32[i25 + (i4 << 2) >> 2] | 0);
   if ((i4 | 0) > 0) {
    d1 = d1 * 5.9604644775390625e-08;
    i4 = i4 + -1 | 0;
   } else break;
  }
  if (i8) {
   i6 = i9;
   while (1) {
    i7 = i9 - i6 | 0;
    i4 = 0;
    d1 = 0.0;
    while (1) {
     d1 = d1 + +HEAPF64[1200 + (i4 << 3) >> 3] * +HEAPF64[i28 + (i4 + i6 << 3) >> 3];
     if ((i4 | 0) >= (i26 | 0) | (i4 | 0) >= (i7 | 0)) break; else i4 = i4 + 1 | 0;
    }
    HEAPF64[i30 + (i7 << 3) >> 3] = d1;
    if ((i6 | 0) > 0) i6 = i6 + -1 | 0; else break;
   }
  }
 }
 switch (i27 | 0) {
 case 0:
  {
   if (i8) {
    d1 = 0.0;
    i4 = i9;
    while (1) {
     d1 = d1 + +HEAPF64[i30 + (i4 << 3) >> 3];
     if ((i4 | 0) > 0) i4 = i4 + -1 | 0; else break;
    }
   } else d1 = 0.0;
   d3 = (i10 | 0) == 0 ? d1 : -d1;
   i29 = 73;
   break;
  }
 case 2:
 case 1:
  {
   if (i8) {
    d1 = 0.0;
    i4 = i9;
    while (1) {
     d1 = d1 + +HEAPF64[i30 + (i4 << 3) >> 3];
     if ((i4 | 0) > 0) i4 = i4 + -1 | 0; else break;
    }
   } else d1 = 0.0;
   i6 = (i10 | 0) == 0;
   HEAPF64[i2 >> 3] = i6 ? d1 : -d1;
   d1 = +HEAPF64[i30 >> 3] - d1;
   if ((i9 | 0) >= 1) {
    i4 = 1;
    while (1) {
     d1 = d1 + +HEAPF64[i30 + (i4 << 3) >> 3];
     if ((i4 | 0) == (i9 | 0)) break; else i4 = i4 + 1 | 0;
    }
   }
   d3 = i6 ? d1 : -d1;
   i2 = i2 + 8 | 0;
   i29 = 73;
   break;
  }
 case 3:
  {
   if ((i9 | 0) > 0) {
    i4 = i9;
    d1 = +HEAPF64[i30 + (i9 << 3) >> 3];
    do {
     i29 = i4;
     i4 = i4 + -1 | 0;
     i28 = i30 + (i4 << 3) | 0;
     d5 = +HEAPF64[i28 >> 3];
     d3 = d1;
     d1 = d5 + d1;
     HEAPF64[i30 + (i29 << 3) >> 3] = d3 + (d5 - d1);
     HEAPF64[i28 >> 3] = d1;
    } while ((i29 | 0) > 1);
    i6 = (i9 | 0) > 1;
    if (i6) {
     i4 = i9;
     d1 = +HEAPF64[i30 + (i9 << 3) >> 3];
     do {
      i28 = i4;
      i4 = i4 + -1 | 0;
      i29 = i30 + (i4 << 3) | 0;
      d5 = +HEAPF64[i29 >> 3];
      d3 = d1;
      d1 = d5 + d1;
      HEAPF64[i30 + (i28 << 3) >> 3] = d3 + (d5 - d1);
      HEAPF64[i29 >> 3] = d1;
     } while ((i4 | 0) > 1);
     if (i6) {
      i4 = i9;
      d3 = 0.0;
      do {
       d3 = d3 + +HEAPF64[i30 + (i4 << 3) >> 3];
       i4 = i4 + -1 | 0;
      } while ((i4 | 0) > 1);
     } else d3 = 0.0;
    } else d3 = 0.0;
   } else d3 = 0.0;
   d5 = +HEAPF64[i30 >> 3];
   d1 = +HEAPF64[i30 + 8 >> 3];
   if (!i10) HEAPF64[i2 >> 3] = d5; else {
    HEAPF64[i2 >> 3] = -d5;
    d3 = -d3;
    d1 = -d1;
   }
   HEAPF64[i2 + 8 >> 3] = d1;
   i2 = i2 + 16 | 0;
   i29 = 73;
   break;
  }
 default:
  {}
 }
 if ((i29 | 0) == 73) HEAPF64[i2 >> 3] = d3;
 STACKTOP = i31;
 return i13 & 7 | 0;
}

function _big2_getAtts(i1, i2, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0;
 i8 = i1 + 76 | 0;
 i6 = 0;
 i7 = 0;
 i1 = 1;
 L1 : while (1) {
  i5 = i2 + 2 | 0;
  L3 : do switch (HEAP8[i5 >> 0] | 0) {
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i12 = i1;
    i3 = i7;
    i4 = i6;
    i2 = i5;
    i1 = i12;
    i7 = i3;
    i6 = i4;
    continue L1;
   }
  case 0:
   {
    i3 = i2 + 3 | 0;
    i4 = HEAP8[i3 >> 0] | 0;
    switch (HEAP8[i8 + (i4 & 255) >> 0] | 0) {
    case 7:
     {
      i11 = 11;
      break L3;
     }
    case 24:
    case 22:
    case 29:
     {
      i11 = 15;
      break L3;
     }
    case 5:
     {
      if (i1 | 0) {
       i3 = i1;
       i4 = i7;
       i12 = i6;
       i2 = i5;
       i1 = i3;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      if ((i7 | 0) >= (i9 | 0)) {
       i4 = i7;
       i12 = i6;
       i1 = 1;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      HEAP32[i10 + (i7 << 4) >> 2] = i5;
      HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
      i4 = i7;
      i12 = i6;
      i1 = 1;
      i2 = i5;
      i7 = i4;
      i6 = i12;
      continue L1;
     }
    case 6:
     {
      if (i1 | 0) {
       i4 = i1;
       i5 = i7;
       i12 = i6;
       i2 = i3;
       i1 = i4;
       i7 = i5;
       i6 = i12;
       continue L1;
      }
      if ((i7 | 0) >= (i9 | 0)) {
       i5 = i7;
       i12 = i6;
       i1 = 1;
       i2 = i3;
       i7 = i5;
       i6 = i12;
       continue L1;
      }
      HEAP32[i10 + (i7 << 4) >> 2] = i5;
      HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
      i5 = i7;
      i12 = i6;
      i1 = 1;
      i2 = i3;
      i7 = i5;
      i6 = i12;
      continue L1;
     }
    case 12:
     {
      if ((i1 | 0) != 2) {
       if ((i7 | 0) >= (i9 | 0)) {
        i12 = i7;
        i6 = 12;
        i1 = 2;
        i2 = i5;
        i7 = i12;
        continue L1;
       }
       HEAP32[i10 + (i7 << 4) + 4 >> 2] = i2 + 4;
       i12 = i7;
       i6 = 12;
       i1 = 2;
       i2 = i5;
       i7 = i12;
       continue L1;
      }
      if ((i6 | 0) != 12) {
       i4 = i7;
       i12 = i6;
       i1 = 2;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      if ((i7 | 0) < (i9 | 0)) HEAP32[i10 + (i7 << 4) + 8 >> 2] = i5;
      i6 = 12;
      i7 = i7 + 1 | 0;
      i1 = 0;
      i2 = i5;
      continue L1;
     }
    case 13:
     {
      if ((i1 | 0) != 2) {
       if ((i7 | 0) >= (i9 | 0)) {
        i12 = i7;
        i6 = 13;
        i1 = 2;
        i2 = i5;
        i7 = i12;
        continue L1;
       }
       HEAP32[i10 + (i7 << 4) + 4 >> 2] = i2 + 4;
       i12 = i7;
       i6 = 13;
       i1 = 2;
       i2 = i5;
       i7 = i12;
       continue L1;
      }
      if ((i6 | 0) != 13) {
       i4 = i7;
       i12 = i6;
       i1 = 2;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      if ((i7 | 0) < (i9 | 0)) HEAP32[i10 + (i7 << 4) + 8 >> 2] = i5;
      i6 = 13;
      i7 = i7 + 1 | 0;
      i1 = 0;
      i2 = i5;
      continue L1;
     }
    case 3:
     {
      if ((i7 | 0) >= (i9 | 0)) {
       i3 = i1;
       i4 = i7;
       i12 = i6;
       i2 = i5;
       i1 = i3;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      HEAP8[i10 + (i7 << 4) + 12 >> 0] = 0;
      i3 = i1;
      i4 = i7;
      i12 = i6;
      i2 = i5;
      i1 = i3;
      i7 = i4;
      i6 = i12;
      continue L1;
     }
    case 21:
     {
      switch (i1 | 0) {
      case 1:
       {
        i4 = i7;
        i12 = i6;
        i1 = 0;
        i2 = i5;
        i7 = i4;
        i6 = i12;
        continue L1;
       }
      case 2:
       break;
      default:
       {
        i3 = i1;
        i4 = i7;
        i12 = i6;
        i2 = i5;
        i1 = i3;
        i7 = i4;
        i6 = i12;
        continue L1;
       }
      }
      if ((i7 | 0) >= (i9 | 0)) {
       i4 = i7;
       i12 = i6;
       i1 = 2;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      i3 = i10 + (i7 << 4) + 12 | 0;
      if (!(HEAP8[i3 >> 0] | 0)) {
       i4 = i7;
       i12 = i6;
       i1 = 2;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      L38 : do if (i4 << 24 >> 24 == 32 ? (i5 | 0) != (HEAP32[i10 + (i7 << 4) + 4 >> 2] | 0) : 0) {
       i1 = HEAP8[i2 + 5 >> 0] | 0;
       switch (HEAP8[i2 + 4 >> 0] | 0) {
       case 0:
        {
         if (i1 << 24 >> 24 == 32) break L38;
         i1 = HEAPU8[i8 + (i1 & 255) >> 0] | 0;
         break;
        }
       case -1:
        {
         if ((i1 & 255) > 253) i1 = 0; else {
          i4 = i7;
          i12 = i6;
          i1 = 2;
          i2 = i5;
          i7 = i4;
          i6 = i12;
          continue L1;
         }
         break;
        }
       default:
        {
         i4 = i7;
         i12 = i6;
         i1 = 2;
         i2 = i5;
         i7 = i4;
         i6 = i12;
         continue L1;
        }
       }
       if ((i1 | 0) != (i6 | 0)) {
        i4 = i7;
        i12 = i6;
        i1 = 2;
        i2 = i5;
        i7 = i4;
        i6 = i12;
        continue L1;
       }
      } while (0);
      HEAP8[i3 >> 0] = 0;
      i4 = i7;
      i12 = i6;
      i1 = 2;
      i2 = i5;
      i7 = i4;
      i6 = i12;
      continue L1;
     }
    case 10:
    case 9:
     {
      switch (i1 | 0) {
      case 1:
       {
        i4 = i7;
        i12 = i6;
        i1 = 0;
        i2 = i5;
        i7 = i4;
        i6 = i12;
        continue L1;
       }
      case 2:
       break;
      default:
       {
        i3 = i1;
        i4 = i7;
        i12 = i6;
        i2 = i5;
        i1 = i3;
        i7 = i4;
        i6 = i12;
        continue L1;
       }
      }
      if ((i7 | 0) >= (i9 | 0)) {
       i4 = i7;
       i12 = i6;
       i1 = 2;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      HEAP8[i10 + (i7 << 4) + 12 >> 0] = 0;
      i4 = i7;
      i12 = i6;
      i1 = 2;
      i2 = i5;
      i7 = i4;
      i6 = i12;
      continue L1;
     }
    case 17:
    case 11:
     if ((i1 | 0) == 2) {
      i4 = i7;
      i12 = i6;
      i1 = 2;
      i2 = i5;
      i7 = i4;
      i6 = i12;
      continue L1;
     } else break L1;
    default:
     {
      i3 = i1;
      i4 = i7;
      i12 = i6;
      i2 = i5;
      i1 = i3;
      i7 = i4;
      i6 = i12;
      continue L1;
     }
    }
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i11 = 11;
    break;
   }
  case -1:
   {
    if (!((i1 | 0) == 0 & (HEAPU8[i2 + 3 >> 0] | 0) < 254)) {
     i3 = i1;
     i4 = i7;
     i12 = i6;
     i2 = i5;
     i1 = i3;
     i7 = i4;
     i6 = i12;
     continue L1;
    }
    break;
   }
  default:
   i11 = 15;
  } while (0);
  if ((i11 | 0) == 11) {
   i11 = 0;
   if (!i1) if ((i7 | 0) < (i9 | 0)) {
    HEAP32[i10 + (i7 << 4) >> 2] = i5;
    HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
    i1 = 1;
   } else i1 = 1;
   i5 = i7;
   i12 = i6;
   i2 = i2 + 4 | 0;
   i7 = i5;
   i6 = i12;
   continue;
  } else if ((i11 | 0) == 15) {
   i11 = 0;
   if (i1 | 0) {
    i3 = i1;
    i4 = i7;
    i12 = i6;
    i2 = i5;
    i1 = i3;
    i7 = i4;
    i6 = i12;
    continue;
   }
  }
  if ((i7 | 0) >= (i9 | 0)) {
   i4 = i7;
   i12 = i6;
   i1 = 1;
   i2 = i5;
   i7 = i4;
   i6 = i12;
   continue;
  }
  HEAP32[i10 + (i7 << 4) >> 2] = i5;
  HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
  i4 = i7;
  i12 = i6;
  i1 = 1;
  i2 = i5;
  i7 = i4;
  i6 = i12;
 }
 return i7 | 0;
}

function _little2_getAtts(i1, i2, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0;
 i8 = i1 + 76 | 0;
 i6 = 0;
 i7 = 0;
 i1 = 1;
 L1 : while (1) {
  i5 = i2 + 2 | 0;
  i3 = i2 + 3 | 0;
  L3 : do switch (HEAP8[i3 >> 0] | 0) {
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i12 = i1;
    i3 = i7;
    i4 = i6;
    i2 = i5;
    i1 = i12;
    i7 = i3;
    i6 = i4;
    continue L1;
   }
  case 0:
   {
    i4 = HEAP8[i5 >> 0] | 0;
    switch (HEAP8[i8 + (i4 & 255) >> 0] | 0) {
    case 7:
     {
      i11 = 11;
      break L3;
     }
    case 24:
    case 22:
    case 29:
     {
      i11 = 15;
      break L3;
     }
    case 5:
     {
      if (i1 | 0) {
       i3 = i1;
       i4 = i7;
       i12 = i6;
       i2 = i5;
       i1 = i3;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      if ((i7 | 0) >= (i9 | 0)) {
       i4 = i7;
       i12 = i6;
       i1 = 1;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      HEAP32[i10 + (i7 << 4) >> 2] = i5;
      HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
      i4 = i7;
      i12 = i6;
      i1 = 1;
      i2 = i5;
      i7 = i4;
      i6 = i12;
      continue L1;
     }
    case 6:
     {
      if (i1 | 0) {
       i4 = i1;
       i5 = i7;
       i12 = i6;
       i2 = i3;
       i1 = i4;
       i7 = i5;
       i6 = i12;
       continue L1;
      }
      if ((i7 | 0) >= (i9 | 0)) {
       i5 = i7;
       i12 = i6;
       i1 = 1;
       i2 = i3;
       i7 = i5;
       i6 = i12;
       continue L1;
      }
      HEAP32[i10 + (i7 << 4) >> 2] = i5;
      HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
      i5 = i7;
      i12 = i6;
      i1 = 1;
      i2 = i3;
      i7 = i5;
      i6 = i12;
      continue L1;
     }
    case 12:
     {
      if ((i1 | 0) != 2) {
       if ((i7 | 0) >= (i9 | 0)) {
        i12 = i7;
        i6 = 12;
        i1 = 2;
        i2 = i5;
        i7 = i12;
        continue L1;
       }
       HEAP32[i10 + (i7 << 4) + 4 >> 2] = i2 + 4;
       i12 = i7;
       i6 = 12;
       i1 = 2;
       i2 = i5;
       i7 = i12;
       continue L1;
      }
      if ((i6 | 0) != 12) {
       i4 = i7;
       i12 = i6;
       i1 = 2;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      if ((i7 | 0) < (i9 | 0)) HEAP32[i10 + (i7 << 4) + 8 >> 2] = i5;
      i6 = 12;
      i7 = i7 + 1 | 0;
      i1 = 0;
      i2 = i5;
      continue L1;
     }
    case 13:
     {
      if ((i1 | 0) != 2) {
       if ((i7 | 0) >= (i9 | 0)) {
        i12 = i7;
        i6 = 13;
        i1 = 2;
        i2 = i5;
        i7 = i12;
        continue L1;
       }
       HEAP32[i10 + (i7 << 4) + 4 >> 2] = i2 + 4;
       i12 = i7;
       i6 = 13;
       i1 = 2;
       i2 = i5;
       i7 = i12;
       continue L1;
      }
      if ((i6 | 0) != 13) {
       i4 = i7;
       i12 = i6;
       i1 = 2;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      if ((i7 | 0) < (i9 | 0)) HEAP32[i10 + (i7 << 4) + 8 >> 2] = i5;
      i6 = 13;
      i7 = i7 + 1 | 0;
      i1 = 0;
      i2 = i5;
      continue L1;
     }
    case 3:
     {
      if ((i7 | 0) >= (i9 | 0)) {
       i3 = i1;
       i4 = i7;
       i12 = i6;
       i2 = i5;
       i1 = i3;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      HEAP8[i10 + (i7 << 4) + 12 >> 0] = 0;
      i3 = i1;
      i4 = i7;
      i12 = i6;
      i2 = i5;
      i1 = i3;
      i7 = i4;
      i6 = i12;
      continue L1;
     }
    case 21:
     {
      switch (i1 | 0) {
      case 1:
       {
        i4 = i7;
        i12 = i6;
        i1 = 0;
        i2 = i5;
        i7 = i4;
        i6 = i12;
        continue L1;
       }
      case 2:
       break;
      default:
       {
        i3 = i1;
        i4 = i7;
        i12 = i6;
        i2 = i5;
        i1 = i3;
        i7 = i4;
        i6 = i12;
        continue L1;
       }
      }
      if ((i7 | 0) >= (i9 | 0)) {
       i4 = i7;
       i12 = i6;
       i1 = 2;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      i3 = i10 + (i7 << 4) + 12 | 0;
      if (!(HEAP8[i3 >> 0] | 0)) {
       i4 = i7;
       i12 = i6;
       i1 = 2;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      L38 : do if (i4 << 24 >> 24 == 32 ? (i5 | 0) != (HEAP32[i10 + (i7 << 4) + 4 >> 2] | 0) : 0) {
       i1 = HEAP8[i2 + 4 >> 0] | 0;
       switch (HEAP8[i2 + 5 >> 0] | 0) {
       case 0:
        {
         if (i1 << 24 >> 24 == 32) break L38;
         i1 = HEAPU8[i8 + (i1 & 255) >> 0] | 0;
         break;
        }
       case -1:
        {
         if ((i1 & 255) > 253) i1 = 0; else {
          i4 = i7;
          i12 = i6;
          i1 = 2;
          i2 = i5;
          i7 = i4;
          i6 = i12;
          continue L1;
         }
         break;
        }
       default:
        {
         i4 = i7;
         i12 = i6;
         i1 = 2;
         i2 = i5;
         i7 = i4;
         i6 = i12;
         continue L1;
        }
       }
       if ((i1 | 0) != (i6 | 0)) {
        i4 = i7;
        i12 = i6;
        i1 = 2;
        i2 = i5;
        i7 = i4;
        i6 = i12;
        continue L1;
       }
      } while (0);
      HEAP8[i3 >> 0] = 0;
      i4 = i7;
      i12 = i6;
      i1 = 2;
      i2 = i5;
      i7 = i4;
      i6 = i12;
      continue L1;
     }
    case 10:
    case 9:
     {
      switch (i1 | 0) {
      case 1:
       {
        i4 = i7;
        i12 = i6;
        i1 = 0;
        i2 = i5;
        i7 = i4;
        i6 = i12;
        continue L1;
       }
      case 2:
       break;
      default:
       {
        i3 = i1;
        i4 = i7;
        i12 = i6;
        i2 = i5;
        i1 = i3;
        i7 = i4;
        i6 = i12;
        continue L1;
       }
      }
      if ((i7 | 0) >= (i9 | 0)) {
       i4 = i7;
       i12 = i6;
       i1 = 2;
       i2 = i5;
       i7 = i4;
       i6 = i12;
       continue L1;
      }
      HEAP8[i10 + (i7 << 4) + 12 >> 0] = 0;
      i4 = i7;
      i12 = i6;
      i1 = 2;
      i2 = i5;
      i7 = i4;
      i6 = i12;
      continue L1;
     }
    case 17:
    case 11:
     if ((i1 | 0) == 2) {
      i4 = i7;
      i12 = i6;
      i1 = 2;
      i2 = i5;
      i7 = i4;
      i6 = i12;
      continue L1;
     } else break L1;
    default:
     {
      i3 = i1;
      i4 = i7;
      i12 = i6;
      i2 = i5;
      i1 = i3;
      i7 = i4;
      i6 = i12;
      continue L1;
     }
    }
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i11 = 11;
    break;
   }
  case -1:
   {
    if (!((i1 | 0) == 0 & (HEAPU8[i5 >> 0] | 0) < 254)) {
     i3 = i1;
     i4 = i7;
     i12 = i6;
     i2 = i5;
     i1 = i3;
     i7 = i4;
     i6 = i12;
     continue L1;
    }
    break;
   }
  default:
   i11 = 15;
  } while (0);
  if ((i11 | 0) == 11) {
   i11 = 0;
   if (!i1) if ((i7 | 0) < (i9 | 0)) {
    HEAP32[i10 + (i7 << 4) >> 2] = i5;
    HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
    i1 = 1;
   } else i1 = 1;
   i5 = i7;
   i12 = i6;
   i2 = i2 + 4 | 0;
   i7 = i5;
   i6 = i12;
   continue;
  } else if ((i11 | 0) == 15) {
   i11 = 0;
   if (i1 | 0) {
    i3 = i1;
    i4 = i7;
    i12 = i6;
    i2 = i5;
    i1 = i3;
    i7 = i4;
    i6 = i12;
    continue;
   }
  }
  if ((i7 | 0) >= (i9 | 0)) {
   i4 = i7;
   i12 = i6;
   i1 = 1;
   i2 = i5;
   i7 = i4;
   i6 = i12;
   continue;
  }
  HEAP32[i10 + (i7 << 4) >> 2] = i5;
  HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
  i4 = i7;
  i12 = i6;
  i1 = 1;
  i2 = i5;
  i7 = i4;
  i6 = i12;
 }
 return i7 | 0;
}

function __bdf_parse_properties(i13, i11, i1, i12, i15) {
 i13 = i13 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i12 = i12 | 0;
 i15 = i15 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i10 = i16 + 8 | 0;
 i7 = i16;
 i9 = i16 + 16 | 0;
 L1 : do if (!(_strncmp(i13, 282060, 13) | 0)) {
  switch (HEAP8[i13 + 13 >> 0] | 0) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   break;
  default:
   break L1;
  }
  i8 = i15 + 32 | 0;
  i5 = HEAP32[i8 >> 2] | 0;
  L4 : do if (!i5) i14 = 11; else if (!(HEAP32[i5 + 72 >> 2] | 0)) i14 = 11; else {
   i1 = HEAP32[i5 + 128 >> 2] | 0;
   i6 = HEAP32[i1 + 12 >> 2] | 0;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   i2 = i6 + ((1895527114 % (i1 >>> 0) | 0) << 2) | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) i14 = 11; else {
    i4 = i6 + (i1 + -1 << 2) | 0;
    i1 = i3;
    while (1) {
     i3 = HEAP32[i1 >> 2] | 0;
     if ((HEAP8[i3 >> 0] | 0) == 70) if (!(_strcmp(i3, 281954) | 0)) break;
     i1 = i2 + -4 | 0;
     i2 = i1 >>> 0 < i6 >>> 0 ? i4 : i1;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i14 = 11;
      break L4;
     }
    }
    if (!((HEAP32[i5 + 80 >> 2] | 0) + (HEAP32[i1 + 4 >> 2] << 4) | 0)) i14 = 11;
   }
  } while (0);
  do if ((i14 | 0) == 11) {
   i1 = HEAP16[i5 + 12 >> 1] | 0;
   HEAP32[i5 + 40 >> 2] = i1;
   HEAP32[i7 >> 2] = i1;
   _sprintf(i9, 281950, i7) | 0;
   i1 = __bdf_add_property(HEAP32[i8 >> 2] | 0, 281954, i9) | 0;
   if (!i1) {
    i5 = HEAP32[i8 >> 2] | 0;
    HEAP16[i5 + 278660 >> 1] = 1;
    break;
   } else {
    i15 = i1;
    STACKTOP = i16;
    return i15 | 0;
   }
  } while (0);
  L20 : do if (!(HEAP32[i5 + 72 >> 2] | 0)) i14 = 20; else {
   i1 = HEAP32[i5 + 128 >> 2] | 0;
   i6 = HEAP32[i1 + 12 >> 2] | 0;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   i2 = i6 + ((908209322 % (i1 >>> 0) | 0) << 2) | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) i14 = 20; else {
    i4 = i6 + (i1 + -1 << 2) | 0;
    i1 = i3;
    while (1) {
     i3 = HEAP32[i1 >> 2] | 0;
     if ((HEAP8[i3 >> 0] | 0) == 70) if (!(_strcmp(i3, 281966) | 0)) break;
     i1 = i2 + -4 | 0;
     i2 = i1 >>> 0 < i6 >>> 0 ? i4 : i1;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i14 = 20;
      break L20;
     }
    }
    if (!((HEAP32[i5 + 80 >> 2] | 0) + (HEAP32[i1 + 4 >> 2] << 4) | 0)) i14 = 20;
   }
  } while (0);
  do if ((i14 | 0) == 20) {
   i1 = HEAP16[i5 + 14 >> 1] | 0;
   HEAP32[i5 + 44 >> 2] = i1;
   HEAP32[i10 >> 2] = i1;
   _sprintf(i9, 281950, i10) | 0;
   i1 = __bdf_add_property(HEAP32[i8 >> 2] | 0, 281966, i9) | 0;
   if (!i1) {
    HEAP16[(HEAP32[i8 >> 2] | 0) + 278660 >> 1] = 1;
    break;
   } else {
    i15 = i1;
    STACKTOP = i16;
    return i15 | 0;
   }
  } while (0);
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] & -17;
  HEAP32[i12 >> 2] = 34;
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 } while (0);
 L37 : do if (!(_strncmp(i13, 282074, 21) | 0)) {
  switch (HEAP8[i13 + 21 >> 0] | 0) {
  case 9:
  case 13:
  case 10:
  case 0:
  case 32:
   {
    i1 = 0;
    break;
   }
  default:
   break L37;
  }
  STACKTOP = i16;
  return i1 | 0;
 } while (0);
 L41 : do if (!(_strncmp(i13, 281687, 7) | 0)) {
  i1 = i13 + 7 | 0;
  switch (HEAP8[i1 >> 0] | 0) {
  case 0:
   break;
  case 32:
  case 13:
  case 10:
  case 9:
   {
    HEAP8[i1 >> 0] = 0;
    i1 = i13 + 8 | 0;
    break;
   }
  default:
   break L41;
  }
  i15 = __bdf_add_property(HEAP32[i15 + 32 >> 2] | 0, i13, i1) | 0;
  STACKTOP = i16;
  return i15 | 0;
 } while (0);
 i10 = i15 + 32 | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 i2 = i13;
 L48 : while (1) {
  i1 = HEAP8[i2 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 0:
   {
    i8 = -1;
    break L48;
   }
  case 32:
  case 9:
   {
    i14 = 32;
    break L48;
   }
  default:
   {}
  }
  i2 = i2 + 1 | 0;
 }
 if ((i14 | 0) == 32) {
  HEAP8[i2 >> 0] = 0;
  i8 = i1 << 24 >> 24;
 }
 L54 : do if (!i13) i1 = 0; else {
  i6 = HEAP8[i13 >> 0] | 0;
  if (!(i6 << 24 >> 24)) i1 = 0; else {
   i7 = HEAP32[i9 + 278688 >> 2] | 0;
   i1 = i13;
   i4 = 0;
   i3 = i6;
   do {
    i1 = i1 + 1 | 0;
    i4 = (i4 * 31 | 0) + (i3 << 24 >> 24) | 0;
    i3 = HEAP8[i1 >> 0] | 0;
   } while (i3 << 24 >> 24 != 0);
   i3 = HEAP32[i9 + 278680 >> 2] | 0;
   i4 = i7 + (((i4 >>> 0) % (i3 >>> 0) | 0) << 2) | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   if (!i1) i1 = 0; else {
    i5 = i7 + (i3 + -1 << 2) | 0;
    while (1) {
     i3 = HEAP32[i1 >> 2] | 0;
     if ((HEAP8[i3 >> 0] | 0) == i6 << 24 >> 24) if (!(_strcmp(i3, i13) | 0)) break;
     i1 = i4 + -4 | 0;
     i4 = i1 >>> 0 < i7 >>> 0 ? i5 : i1;
     i1 = HEAP32[i4 >> 2] | 0;
     if (!i1) {
      i1 = 0;
      break L54;
     }
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (i1 >>> 0 > 82) {
     i1 = (HEAP32[i9 + 278668 >> 2] | 0) + (i1 + -83 << 4) | 0;
     break;
    } else {
     i1 = 18108 + (i1 << 4) | 0;
     break;
    }
   }
  }
 } while (0);
 if ((i8 | 0) == -1) i3 = 0; else {
  i3 = i8 & 255;
  HEAP8[i2 >> 0] = i3;
 }
 if (i1 | 0) if ((HEAP32[i1 + 4 >> 2] | 0) != 1) {
  i9 = i15 + 139304 | 0;
  i1 = __bdf_list_split(i9, 281721, i13, i11) | 0;
  if (i1 | 0) {
   i15 = i1;
   STACKTOP = i16;
   return i15 | 0;
  }
  i2 = HEAP32[i9 >> 2] | 0;
  i8 = HEAP32[i2 >> 2] | 0;
  i7 = i15 + 139312 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  switch (i1 | 0) {
  case 0:
   {
    i1 = 0;
    break;
   }
  case 1:
   {
    HEAP32[i7 >> 2] = 0;
    i1 = 0;
    break;
   }
  default:
   {
    i5 = i1 + -1 | 0;
    HEAP32[i2 >> 2] = HEAP32[i2 + 4 >> 2];
    if ((i5 | 0) != 1) {
     i1 = 1;
     i2 = 1;
     do {
      i1 = i1 + 1 | 0;
      i15 = HEAP32[i9 >> 2] | 0;
      HEAP32[i15 + (i2 << 2) >> 2] = HEAP32[i15 + (i1 << 2) >> 2];
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i5 | 0));
    }
    HEAP32[i7 >> 2] = i5;
    if (!i5) i1 = 0; else {
     i1 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
     i2 = 0;
     i6 = 0;
     i4 = i1;
     while (1) {
      i3 = HEAP8[i4 >> 0] | 0;
      if (!(i3 << 24 >> 24)) i3 = i5; else {
       do {
        i4 = i4 + 1 | 0;
        i15 = i2;
        i2 = i2 + 1 | 0;
        HEAP8[i1 + i15 >> 0] = i3;
        i3 = HEAP8[i4 >> 0] | 0;
       } while (i3 << 24 >> 24 != 0);
       i3 = HEAP32[i7 >> 2] | 0;
      }
      i4 = i6 + 1 | 0;
      if (i4 >>> 0 < i3 >>> 0) {
       HEAP8[i1 + i2 >> 0] = 32;
       i2 = i2 + 1 | 0;
       i3 = HEAP32[i7 >> 2] | 0;
      }
      if (i4 >>> 0 >= i3 >>> 0) break;
      i6 = i4;
      i4 = HEAP32[(HEAP32[i9 >> 2] | 0) + (i4 << 2) >> 2] | 0;
      i5 = i3;
     }
     if ((i1 | 0) == 369704) i1 = 369704; else HEAP8[i1 + i2 >> 0] = 0;
    }
   }
  }
  i15 = __bdf_add_property(HEAP32[i10 >> 2] | 0, i8, i1) | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i1 = i13 + i11 | 0;
 if (i3 << 24 >> 24) {
  HEAP8[i2 >> 0] = 0;
  i2 = i2 + 1 | 0;
 }
 L106 : while (1) {
  switch (HEAP8[i2 >> 0] | 0) {
  case 34:
   {
    i14 = 53;
    break L106;
   }
  case 32:
  case 9:
   break;
  default:
   break L106;
  }
  i2 = i2 + 1 | 0;
 }
 if ((i14 | 0) == 53) i2 = i2 + 1 | 0;
 L112 : do if (i1 >>> 0 > i2 >>> 0) {
  L113 : while (1) {
   i1 = i1 + -1 | 0;
   switch (HEAP8[i1 >> 0] | 0) {
   case 34:
    break L113;
   case 9:
   case 32:
    break;
   default:
    break L112;
   }
   HEAP8[i1 >> 0] = 0;
   if (i1 >>> 0 <= i2 >>> 0) break L112;
  }
  HEAP8[i1 >> 0] = 0;
 } while (0);
 i15 = __bdf_add_property(HEAP32[i10 >> 2] | 0, i13, i2) | 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _MD5Transform(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i8 = HEAP32[i1 >> 2] | 0;
 i6 = i1 + 4 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i4 = i1 + 8 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 12 | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i25 = HEAP32[i2 >> 2] | 0;
 i26 = i8 + -680876936 + i25 + ((i9 ^ i5) & i7 ^ i9) | 0;
 i26 = (i26 << 7 | i26 >>> 25) + i7 | 0;
 i18 = HEAP32[i2 + 4 >> 2] | 0;
 i9 = i9 + -389564586 + i18 + (i26 & (i5 ^ i7) ^ i5) | 0;
 i9 = (i9 << 12 | i9 >>> 20) + i26 | 0;
 i11 = HEAP32[i2 + 8 >> 2] | 0;
 i5 = i5 + 606105819 + i11 + (i9 & (i26 ^ i7) ^ i7) | 0;
 i5 = (i5 << 17 | i5 >>> 15) + i9 | 0;
 i20 = HEAP32[i2 + 12 >> 2] | 0;
 i7 = i7 + -1044525330 + i20 + (i5 & (i9 ^ i26) ^ i26) | 0;
 i7 = (i7 << 22 | i7 >>> 10) + i5 | 0;
 i13 = HEAP32[i2 + 16 >> 2] | 0;
 i26 = i13 + -176418897 + i26 + (i7 & (i5 ^ i9) ^ i9) | 0;
 i26 = (i26 << 7 | i26 >>> 25) + i7 | 0;
 i22 = HEAP32[i2 + 20 >> 2] | 0;
 i9 = i22 + 1200080426 + i9 + (i26 & (i7 ^ i5) ^ i5) | 0;
 i9 = (i9 << 12 | i9 >>> 20) + i26 | 0;
 i15 = HEAP32[i2 + 24 >> 2] | 0;
 i5 = i15 + -1473231341 + i5 + (i9 & (i26 ^ i7) ^ i7) | 0;
 i5 = (i5 << 17 | i5 >>> 15) + i9 | 0;
 i24 = HEAP32[i2 + 28 >> 2] | 0;
 i7 = i24 + -45705983 + i7 + (i5 & (i9 ^ i26) ^ i26) | 0;
 i7 = (i7 << 22 | i7 >>> 10) + i5 | 0;
 i17 = HEAP32[i2 + 32 >> 2] | 0;
 i26 = i17 + 1770035416 + i26 + (i7 & (i5 ^ i9) ^ i9) | 0;
 i26 = (i26 << 7 | i26 >>> 25) + i7 | 0;
 i10 = HEAP32[i2 + 36 >> 2] | 0;
 i9 = i10 + -1958414417 + i9 + (i26 & (i7 ^ i5) ^ i5) | 0;
 i9 = (i9 << 12 | i9 >>> 20) + i26 | 0;
 i19 = HEAP32[i2 + 40 >> 2] | 0;
 i5 = i19 + -42063 + i5 + (i9 & (i26 ^ i7) ^ i7) | 0;
 i5 = (i5 << 17 | i5 >>> 15) + i9 | 0;
 i12 = HEAP32[i2 + 44 >> 2] | 0;
 i7 = i12 + -1990404162 + i7 + (i5 & (i9 ^ i26) ^ i26) | 0;
 i7 = (i7 << 22 | i7 >>> 10) + i5 | 0;
 i21 = HEAP32[i2 + 48 >> 2] | 0;
 i26 = i21 + 1804603682 + i26 + (i7 & (i5 ^ i9) ^ i9) | 0;
 i26 = (i26 << 7 | i26 >>> 25) + i7 | 0;
 i14 = HEAP32[i2 + 52 >> 2] | 0;
 i9 = i14 + -40341101 + i9 + (i26 & (i7 ^ i5) ^ i5) | 0;
 i9 = (i9 << 12 | i9 >>> 20) + i26 | 0;
 i23 = HEAP32[i2 + 56 >> 2] | 0;
 i5 = i23 + -1502002290 + i5 + (i9 & (i26 ^ i7) ^ i7) | 0;
 i5 = (i5 << 17 | i5 >>> 15) + i9 | 0;
 i16 = HEAP32[i2 + 60 >> 2] | 0;
 i7 = i16 + 1236535329 + i7 + (i5 & (i9 ^ i26) ^ i26) | 0;
 i7 = (i7 << 22 | i7 >>> 10) + i5 | 0;
 i26 = i18 + -165796510 + i26 + ((i7 ^ i5) & i9 ^ i5) | 0;
 i26 = (i26 << 5 | i26 >>> 27) + i7 | 0;
 i2 = i15 + -1069501632 + i9 + ((i26 ^ i7) & i5 ^ i7) | 0;
 i2 = (i2 << 9 | i2 >>> 23) + i26 | 0;
 i5 = i12 + 643717713 + i5 + ((i2 ^ i26) & i7 ^ i26) | 0;
 i5 = (i5 << 14 | i5 >>> 18) + i2 | 0;
 i7 = i25 + -373897302 + i7 + ((i5 ^ i2) & i26 ^ i2) | 0;
 i7 = (i7 << 20 | i7 >>> 12) + i5 | 0;
 i26 = i22 + -701558691 + i26 + ((i7 ^ i5) & i2 ^ i5) | 0;
 i26 = (i26 << 5 | i26 >>> 27) + i7 | 0;
 i2 = i19 + 38016083 + i2 + ((i26 ^ i7) & i5 ^ i7) | 0;
 i2 = (i2 << 9 | i2 >>> 23) + i26 | 0;
 i5 = i16 + -660478335 + i5 + ((i2 ^ i26) & i7 ^ i26) | 0;
 i5 = (i5 << 14 | i5 >>> 18) + i2 | 0;
 i7 = i13 + -405537848 + i7 + ((i5 ^ i2) & i26 ^ i2) | 0;
 i7 = (i7 << 20 | i7 >>> 12) + i5 | 0;
 i26 = i10 + 568446438 + i26 + ((i7 ^ i5) & i2 ^ i5) | 0;
 i26 = (i26 << 5 | i26 >>> 27) + i7 | 0;
 i2 = i23 + -1019803690 + i2 + ((i26 ^ i7) & i5 ^ i7) | 0;
 i2 = (i2 << 9 | i2 >>> 23) + i26 | 0;
 i5 = i20 + -187363961 + i5 + ((i2 ^ i26) & i7 ^ i26) | 0;
 i5 = (i5 << 14 | i5 >>> 18) + i2 | 0;
 i7 = i17 + 1163531501 + i7 + ((i5 ^ i2) & i26 ^ i2) | 0;
 i7 = (i7 << 20 | i7 >>> 12) + i5 | 0;
 i26 = i14 + -1444681467 + i26 + ((i7 ^ i5) & i2 ^ i5) | 0;
 i26 = (i26 << 5 | i26 >>> 27) + i7 | 0;
 i2 = i11 + -51403784 + i2 + ((i26 ^ i7) & i5 ^ i7) | 0;
 i2 = (i2 << 9 | i2 >>> 23) + i26 | 0;
 i5 = i24 + 1735328473 + i5 + ((i2 ^ i26) & i7 ^ i26) | 0;
 i5 = (i5 << 14 | i5 >>> 18) + i2 | 0;
 i9 = i5 ^ i2;
 i7 = i21 + -1926607734 + i7 + (i9 & i26 ^ i2) | 0;
 i7 = (i7 << 20 | i7 >>> 12) + i5 | 0;
 i9 = i22 + -378558 + i26 + (i9 ^ i7) | 0;
 i9 = (i9 << 4 | i9 >>> 28) + i7 | 0;
 i2 = i17 + -2022574463 + i2 + (i7 ^ i5 ^ i9) | 0;
 i2 = (i2 << 11 | i2 >>> 21) + i9 | 0;
 i5 = i12 + 1839030562 + i5 + (i9 ^ i7 ^ i2) | 0;
 i5 = (i5 << 16 | i5 >>> 16) + i2 | 0;
 i7 = i23 + -35309556 + i7 + (i2 ^ i9 ^ i5) | 0;
 i7 = (i7 << 23 | i7 >>> 9) + i5 | 0;
 i9 = i18 + -1530992060 + i9 + (i5 ^ i2 ^ i7) | 0;
 i9 = (i9 << 4 | i9 >>> 28) + i7 | 0;
 i2 = i13 + 1272893353 + i2 + (i7 ^ i5 ^ i9) | 0;
 i2 = (i2 << 11 | i2 >>> 21) + i9 | 0;
 i5 = i24 + -155497632 + i5 + (i9 ^ i7 ^ i2) | 0;
 i5 = (i5 << 16 | i5 >>> 16) + i2 | 0;
 i7 = i19 + -1094730640 + i7 + (i2 ^ i9 ^ i5) | 0;
 i7 = (i7 << 23 | i7 >>> 9) + i5 | 0;
 i9 = i14 + 681279174 + i9 + (i5 ^ i2 ^ i7) | 0;
 i9 = (i9 << 4 | i9 >>> 28) + i7 | 0;
 i2 = i25 + -358537222 + i2 + (i7 ^ i5 ^ i9) | 0;
 i2 = (i2 << 11 | i2 >>> 21) + i9 | 0;
 i5 = i20 + -722521979 + i5 + (i9 ^ i7 ^ i2) | 0;
 i5 = (i5 << 16 | i5 >>> 16) + i2 | 0;
 i7 = i15 + 76029189 + i7 + (i2 ^ i9 ^ i5) | 0;
 i7 = (i7 << 23 | i7 >>> 9) + i5 | 0;
 i9 = i10 + -640364487 + i9 + (i5 ^ i2 ^ i7) | 0;
 i9 = (i9 << 4 | i9 >>> 28) + i7 | 0;
 i2 = i21 + -421815835 + i2 + (i7 ^ i5 ^ i9) | 0;
 i2 = (i2 << 11 | i2 >>> 21) + i9 | 0;
 i5 = i16 + 530742520 + i5 + (i9 ^ i7 ^ i2) | 0;
 i5 = (i5 << 16 | i5 >>> 16) + i2 | 0;
 i7 = i11 + -995338651 + i7 + (i2 ^ i9 ^ i5) | 0;
 i7 = (i7 << 23 | i7 >>> 9) + i5 | 0;
 i9 = i25 + -198630844 + i9 + ((i7 | ~i2) ^ i5) | 0;
 i9 = (i9 << 6 | i9 >>> 26) + i7 | 0;
 i2 = i24 + 1126891415 + i2 + ((i9 | ~i5) ^ i7) | 0;
 i2 = (i2 << 10 | i2 >>> 22) + i9 | 0;
 i5 = i23 + -1416354905 + i5 + ((i2 | ~i7) ^ i9) | 0;
 i5 = (i5 << 15 | i5 >>> 17) + i2 | 0;
 i7 = i22 + -57434055 + i7 + ((i5 | ~i9) ^ i2) | 0;
 i7 = (i7 << 21 | i7 >>> 11) + i5 | 0;
 i9 = i21 + 1700485571 + i9 + ((i7 | ~i2) ^ i5) | 0;
 i9 = (i9 << 6 | i9 >>> 26) + i7 | 0;
 i2 = i20 + -1894986606 + i2 + ((i9 | ~i5) ^ i7) | 0;
 i2 = (i2 << 10 | i2 >>> 22) + i9 | 0;
 i5 = i19 + -1051523 + i5 + ((i2 | ~i7) ^ i9) | 0;
 i5 = (i5 << 15 | i5 >>> 17) + i2 | 0;
 i7 = i18 + -2054922799 + i7 + ((i5 | ~i9) ^ i2) | 0;
 i7 = (i7 << 21 | i7 >>> 11) + i5 | 0;
 i9 = i17 + 1873313359 + i9 + ((i7 | ~i2) ^ i5) | 0;
 i9 = (i9 << 6 | i9 >>> 26) + i7 | 0;
 i2 = i16 + -30611744 + i2 + ((i9 | ~i5) ^ i7) | 0;
 i2 = (i2 << 10 | i2 >>> 22) + i9 | 0;
 i5 = i15 + -1560198380 + i5 + ((i2 | ~i7) ^ i9) | 0;
 i5 = (i5 << 15 | i5 >>> 17) + i2 | 0;
 i7 = i14 + 1309151649 + i7 + ((i5 | ~i9) ^ i2) | 0;
 i7 = (i7 << 21 | i7 >>> 11) + i5 | 0;
 i9 = i13 + -145523070 + i9 + ((i7 | ~i2) ^ i5) | 0;
 i9 = (i9 << 6 | i9 >>> 26) + i7 | 0;
 i2 = i12 + -1120210379 + i2 + ((i9 | ~i5) ^ i7) | 0;
 i2 = (i2 << 10 | i2 >>> 22) + i9 | 0;
 i5 = i11 + 718787259 + i5 + ((i2 | ~i7) ^ i9) | 0;
 i5 = (i5 << 15 | i5 >>> 17) + i2 | 0;
 i7 = i10 + -343485551 + i7 + ((i5 | ~i9) ^ i2) | 0;
 HEAP32[i1 >> 2] = i9 + i8;
 HEAP32[i6 >> 2] = i5 + (HEAP32[i6 >> 2] | 0) + (i7 << 21 | i7 >>> 11);
 HEAP32[i4 >> 2] = i5 + (HEAP32[i4 >> 2] | 0);
 HEAP32[i3 >> 2] = i2 + (HEAP32[i3 >> 2] | 0);
 return;
}

function _free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if (!i1) return;
 i3 = i1 + -8 | 0;
 i5 = HEAP32[91951] | 0;
 i1 = HEAP32[i1 + -4 >> 2] | 0;
 i2 = i1 & -8;
 i9 = i3 + i2 | 0;
 do if (!(i1 & 1)) {
  i4 = HEAP32[i3 >> 2] | 0;
  if (!(i1 & 3)) return;
  i7 = i3 + (0 - i4) | 0;
  i6 = i4 + i2 | 0;
  if (i7 >>> 0 < i5 >>> 0) return;
  if ((i7 | 0) == (HEAP32[91952] | 0)) {
   i1 = i9 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 & 3 | 0) != 3) {
    i8 = i7;
    i2 = i6;
    break;
   }
   HEAP32[91949] = i6;
   HEAP32[i1 >> 2] = i2 & -2;
   HEAP32[i7 + 4 >> 2] = i6 | 1;
   HEAP32[i7 + i6 >> 2] = i6;
   return;
  }
  i3 = i4 >>> 3;
  if (i4 >>> 0 < 256) {
   i1 = HEAP32[i7 + 8 >> 2] | 0;
   i2 = HEAP32[i7 + 12 >> 2] | 0;
   if ((i2 | 0) == (i1 | 0)) {
    HEAP32[91947] = HEAP32[91947] & ~(1 << i3);
    i8 = i7;
    i2 = i6;
    break;
   } else {
    HEAP32[i1 + 12 >> 2] = i2;
    HEAP32[i2 + 8 >> 2] = i1;
    i8 = i7;
    i2 = i6;
    break;
   }
  }
  i5 = HEAP32[i7 + 24 >> 2] | 0;
  i1 = HEAP32[i7 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i7 | 0)) {
   i3 = i7 + 16 | 0;
   i2 = i3 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i1 = 0;
     break;
    } else i2 = i3;
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4 | 0) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   HEAP32[i2 >> 2] = 0;
  } else {
   i8 = HEAP32[i7 + 8 >> 2] | 0;
   HEAP32[i8 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i8;
  } while (0);
  if (!i5) {
   i8 = i7;
   i2 = i6;
  } else {
   i2 = HEAP32[i7 + 28 >> 2] | 0;
   i3 = 368092 + (i2 << 2) | 0;
   if ((i7 | 0) == (HEAP32[i3 >> 2] | 0)) {
    HEAP32[i3 >> 2] = i1;
    if (!i1) {
     HEAP32[91948] = HEAP32[91948] & ~(1 << i2);
     i8 = i7;
     i2 = i6;
     break;
    }
   } else {
    HEAP32[i5 + 16 + (((HEAP32[i5 + 16 >> 2] | 0) != (i7 | 0) & 1) << 2) >> 2] = i1;
    if (!i1) {
     i8 = i7;
     i2 = i6;
     break;
    }
   }
   HEAP32[i1 + 24 >> 2] = i5;
   i2 = i7 + 16 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 | 0) {
    HEAP32[i1 + 16 >> 2] = i3;
    HEAP32[i3 + 24 >> 2] = i1;
   }
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i2) {
    i8 = i7;
    i2 = i6;
   } else {
    HEAP32[i1 + 20 >> 2] = i2;
    HEAP32[i2 + 24 >> 2] = i1;
    i8 = i7;
    i2 = i6;
   }
  }
 } else {
  i8 = i3;
  i7 = i3;
 } while (0);
 if (i7 >>> 0 >= i9 >>> 0) return;
 i1 = i9 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 if (!(i4 & 1)) return;
 if (!(i4 & 2)) {
  i1 = HEAP32[91952] | 0;
  if ((i9 | 0) == (HEAP32[91953] | 0)) {
   i9 = (HEAP32[91950] | 0) + i2 | 0;
   HEAP32[91950] = i9;
   HEAP32[91953] = i8;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   if ((i8 | 0) != (i1 | 0)) return;
   HEAP32[91952] = 0;
   HEAP32[91949] = 0;
   return;
  }
  if ((i9 | 0) == (i1 | 0)) {
   i9 = (HEAP32[91949] | 0) + i2 | 0;
   HEAP32[91949] = i9;
   HEAP32[91952] = i7;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   HEAP32[i7 + i9 >> 2] = i9;
   return;
  }
  i5 = (i4 & -8) + i2 | 0;
  i3 = i4 >>> 3;
  do if (i4 >>> 0 < 256) {
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) {
    HEAP32[91947] = HEAP32[91947] & ~(1 << i3);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i2;
    break;
   }
  } else {
   i6 = HEAP32[i9 + 24 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   do if ((i1 | 0) == (i9 | 0)) {
    i3 = i9 + 16 | 0;
    i2 = i3 + 4 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i3 = 0;
      break;
     } else i2 = i3;
    }
    while (1) {
     i3 = i1 + 20 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4 | 0) {
      i1 = i4;
      i2 = i3;
      continue;
     }
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) break; else {
      i1 = i4;
      i2 = i3;
     }
    }
    HEAP32[i2 >> 2] = 0;
    i3 = i1;
   } else {
    i3 = HEAP32[i9 + 8 >> 2] | 0;
    HEAP32[i3 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i3;
    i3 = i1;
   } while (0);
   if (i6 | 0) {
    i1 = HEAP32[i9 + 28 >> 2] | 0;
    i2 = 368092 + (i1 << 2) | 0;
    if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
     HEAP32[i2 >> 2] = i3;
     if (!i3) {
      HEAP32[91948] = HEAP32[91948] & ~(1 << i1);
      break;
     }
    } else {
     HEAP32[i6 + 16 + (((HEAP32[i6 + 16 >> 2] | 0) != (i9 | 0) & 1) << 2) >> 2] = i3;
     if (!i3) break;
    }
    HEAP32[i3 + 24 >> 2] = i6;
    i1 = i9 + 16 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2 | 0) {
     HEAP32[i3 + 16 >> 2] = i2;
     HEAP32[i2 + 24 >> 2] = i3;
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
   }
  } while (0);
  HEAP32[i8 + 4 >> 2] = i5 | 1;
  HEAP32[i7 + i5 >> 2] = i5;
  if ((i8 | 0) == (HEAP32[91952] | 0)) {
   HEAP32[91949] = i5;
   return;
  }
 } else {
  HEAP32[i1 >> 2] = i4 & -2;
  HEAP32[i8 + 4 >> 2] = i2 | 1;
  HEAP32[i7 + i2 >> 2] = i2;
  i5 = i2;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i3 = 367828 + (i1 << 1 << 2) | 0;
  i2 = HEAP32[91947] | 0;
  i1 = 1 << i1;
  if (!(i2 & i1)) {
   HEAP32[91947] = i2 | i1;
   i1 = i3;
   i2 = i3 + 8 | 0;
  } else {
   i2 = i3 + 8 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[i2 >> 2] = i8;
  HEAP32[i1 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i1;
  HEAP32[i8 + 12 >> 2] = i3;
  return;
 }
 i1 = i5 >>> 8;
 if (!i1) i1 = 0; else if (i5 >>> 0 > 16777215) i1 = 31; else {
  i7 = (i1 + 1048320 | 0) >>> 16 & 8;
  i9 = i1 << i7;
  i6 = (i9 + 520192 | 0) >>> 16 & 4;
  i9 = i9 << i6;
  i1 = (i9 + 245760 | 0) >>> 16 & 2;
  i1 = 14 - (i6 | i7 | i1) + (i9 << i1 >>> 15) | 0;
  i1 = i5 >>> (i1 + 7 | 0) & 1 | i1 << 1;
 }
 i4 = 368092 + (i1 << 2) | 0;
 HEAP32[i8 + 28 >> 2] = i1;
 HEAP32[i8 + 20 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 i2 = HEAP32[91948] | 0;
 i3 = 1 << i1;
 do if (!(i2 & i3)) {
  HEAP32[91948] = i2 | i3;
  HEAP32[i4 >> 2] = i8;
  HEAP32[i8 + 24 >> 2] = i4;
  HEAP32[i8 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i8;
 } else {
  i2 = i5 << ((i1 | 0) == 31 ? 0 : 25 - (i1 >>> 1) | 0);
  i3 = HEAP32[i4 >> 2] | 0;
  while (1) {
   if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
    i1 = 73;
    break;
   }
   i4 = i3 + 16 + (i2 >>> 31 << 2) | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   if (!i1) {
    i1 = 72;
    break;
   } else {
    i2 = i2 << 1;
    i3 = i1;
   }
  }
  if ((i1 | 0) == 72) {
   HEAP32[i4 >> 2] = i8;
   HEAP32[i8 + 24 >> 2] = i3;
   HEAP32[i8 + 12 >> 2] = i8;
   HEAP32[i8 + 8 >> 2] = i8;
   break;
  } else if ((i1 | 0) == 73) {
   i7 = i3 + 8 | 0;
   i9 = HEAP32[i7 >> 2] | 0;
   HEAP32[i9 + 12 >> 2] = i8;
   HEAP32[i7 >> 2] = i8;
   HEAP32[i8 + 8 >> 2] = i9;
   HEAP32[i8 + 12 >> 2] = i3;
   HEAP32[i8 + 24 >> 2] = 0;
   break;
  }
 } while (0);
 i9 = (HEAP32[91955] | 0) + -1 | 0;
 HEAP32[91955] = i9;
 if (!i9) i1 = 368244; else return;
 while (1) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) break; else i1 = i1 + 8 | 0;
 }
 HEAP32[91955] = -1;
 return;
}

function _XML_ParserFree(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 if (!i11) return;
 i4 = i11 + 368 | 0;
 i12 = i11 + 20 | 0;
 i1 = HEAP32[i11 + 364 >> 2] | 0;
 while (1) {
  if (!i1) {
   i1 = HEAP32[i4 >> 2] | 0;
   if (!i1) break;
   HEAP32[i4 >> 2] = 0;
  }
  i3 = HEAP32[i1 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i1 + 36 >> 2] | 0);
  i2 = HEAP32[i1 + 44 >> 2] | 0;
  if (i2 | 0) do {
   i10 = i2;
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i10 + 16 >> 2] | 0);
   FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](i10);
  } while ((i2 | 0) != 0);
  FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](i1);
  i1 = i3;
 }
 i2 = i11 + 304 | 0;
 i1 = HEAP32[i11 + 300 >> 2] | 0;
 while (1) {
  if (!i1) {
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) break;
   HEAP32[i2 >> 2] = 0;
  }
  i10 = HEAP32[i1 + 8 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](i1);
  i1 = i10;
 }
 i1 = HEAP32[i11 + 376 >> 2] | 0;
 if (i1 | 0) do {
  i10 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i10 + 16 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](i10);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[i11 + 372 >> 2] | 0;
 if (i1 | 0) do {
  i10 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i10 + 16 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](i10);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[i11 + 416 >> 2] | 0;
 if (i1 | 0) {
  i2 = i11 + 436 | 0;
  do {
   i10 = i1;
   i1 = HEAP32[i1 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i10);
  } while ((i1 | 0) != 0);
 }
 i1 = HEAP32[i11 + 420 >> 2] | 0;
 if (i1 | 0) {
  i2 = i11 + 436 | 0;
  do {
   i10 = i1;
   i1 = HEAP32[i1 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i10);
  } while ((i1 | 0) != 0);
 }
 i1 = HEAP32[i11 + 440 >> 2] | 0;
 if (i1 | 0) {
  i2 = i11 + 460 | 0;
  do {
   i10 = i1;
   i1 = HEAP32[i1 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i10);
  } while ((i1 | 0) != 0);
 }
 i1 = HEAP32[i11 + 444 >> 2] | 0;
 if (i1 | 0) {
  i2 = i11 + 460 | 0;
  do {
   i10 = i1;
   i1 = HEAP32[i1 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i10);
  } while ((i1 | 0) != 0);
 }
 if (!(HEAP8[i11 + 488 >> 0] | 0)) {
  i10 = HEAP32[i11 + 356 >> 2] | 0;
  if (i10 | 0) {
   i3 = HEAP32[i11 + 476 >> 2] | 0;
   i7 = i10 + 20 | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   i8 = i10 + 28 | 0;
   i4 = i1 + (HEAP32[i8 >> 2] << 2) | 0;
   L53 : while (1) {
    do {
     if ((i1 | 0) == (i4 | 0)) break L53;
     i2 = i1;
     i1 = i1 + 4 | 0;
     i2 = HEAP32[i2 >> 2] | 0;
    } while (!(i2 | 0));
    if (!(HEAP32[i2 + 16 >> 2] | 0)) continue;
    FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i2 + 20 >> 2] | 0);
   }
   i9 = (i3 | 0) == 0;
   i4 = i10 + 8 | 0;
   i5 = i10 + 16 | 0;
   i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0;
   i2 = HEAP32[i10 >> 2] | 0;
   if (HEAP32[i4 >> 2] | 0) {
    i3 = 0;
    do {
     FUNCTION_TABLE_vi[i1 & 127](HEAP32[i2 + (i3 << 2) >> 2] | 0);
     i3 = i3 + 1 | 0;
     i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0;
     i2 = HEAP32[i10 >> 2] | 0;
    } while (i3 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0);
   }
   FUNCTION_TABLE_vi[i1 & 127](i2);
   i4 = i10 + 140 | 0;
   i5 = i10 + 148 | 0;
   i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0;
   i6 = i10 + 132 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   if (HEAP32[i4 >> 2] | 0) {
    i3 = 0;
    do {
     FUNCTION_TABLE_vi[i1 & 127](HEAP32[i2 + (i3 << 2) >> 2] | 0);
     i3 = i3 + 1 | 0;
     i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0;
     i2 = HEAP32[i6 >> 2] | 0;
    } while (i3 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0);
   }
   FUNCTION_TABLE_vi[i1 & 127](i2);
   i4 = i10 + 36 | 0;
   i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   if (HEAP32[i8 >> 2] | 0) {
    i3 = 0;
    do {
     FUNCTION_TABLE_vi[i1 & 127](HEAP32[i2 + (i3 << 2) >> 2] | 0);
     i3 = i3 + 1 | 0;
     i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0;
     i2 = HEAP32[i7 >> 2] | 0;
    } while (i3 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0);
   }
   FUNCTION_TABLE_vi[i1 & 127](i2);
   i4 = i10 + 48 | 0;
   i5 = i10 + 56 | 0;
   i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0;
   i6 = i10 + 40 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   if (HEAP32[i4 >> 2] | 0) {
    i3 = 0;
    do {
     FUNCTION_TABLE_vi[i1 & 127](HEAP32[i2 + (i3 << 2) >> 2] | 0);
     i3 = i3 + 1 | 0;
     i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0;
     i2 = HEAP32[i6 >> 2] | 0;
    } while (i3 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0);
   }
   FUNCTION_TABLE_vi[i1 & 127](i2);
   i4 = i10 + 68 | 0;
   i5 = i10 + 76 | 0;
   i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0;
   i6 = i10 + 60 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   if (HEAP32[i4 >> 2] | 0) {
    i3 = 0;
    do {
     FUNCTION_TABLE_vi[i1 & 127](HEAP32[i2 + (i3 << 2) >> 2] | 0);
     i3 = i3 + 1 | 0;
     i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0;
     i2 = HEAP32[i6 >> 2] | 0;
    } while (i3 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0);
   }
   FUNCTION_TABLE_vi[i1 & 127](i2);
   i1 = HEAP32[i10 + 80 >> 2] | 0;
   if (i1 | 0) {
    i2 = i10 + 100 | 0;
    do {
     i8 = i1;
     i1 = HEAP32[i1 >> 2] | 0;
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i8);
    } while ((i1 | 0) != 0);
   }
   i1 = HEAP32[i10 + 84 >> 2] | 0;
   if (i1 | 0) {
    i2 = i10 + 100 | 0;
    do {
     i8 = i1;
     i1 = HEAP32[i1 >> 2] | 0;
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i8);
    } while ((i1 | 0) != 0);
   }
   i1 = HEAP32[i10 + 104 >> 2] | 0;
   if (i1 | 0) {
    i2 = i10 + 124 | 0;
    do {
     i8 = i1;
     i1 = HEAP32[i1 >> 2] | 0;
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i8);
    } while ((i1 | 0) != 0);
   }
   i1 = HEAP32[i10 + 108 >> 2] | 0;
   if (i1 | 0) {
    i2 = i10 + 124 | 0;
    do {
     i8 = i1;
     i1 = HEAP32[i1 >> 2] | 0;
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 127](i8);
    } while ((i1 | 0) != 0);
   }
   if (i9) {
    FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i10 + 184 >> 2] | 0);
    FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i10 + 164 >> 2] | 0);
   }
   FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](i10);
  }
 }
 FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i11 + 392 >> 2] | 0);
 FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i11 + 464 >> 2] | 0);
 FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i11 + 8 >> 2] | 0);
 FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i11 + 44 >> 2] | 0);
 FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i11 + 396 >> 2] | 0);
 FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](HEAP32[i11 + 240 >> 2] | 0);
 i1 = HEAP32[i11 + 252 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](HEAP32[i11 + 244 >> 2] | 0);
 FUNCTION_TABLE_vi[HEAP32[i12 >> 2] & 127](i11);
 return;
}

function _ps_unicodes_init(i13, i3, i14, i7, i6, i8) {
 i13 = i13 | 0;
 i3 = i3 | 0;
 i14 = i14 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i16 = i17 + 80 | 0;
 i11 = i17 + 40 | 0;
 i12 = i17;
 i1 = i11;
 i2 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i15 = i3 + 16 | 0;
 HEAP32[i15 >> 2] = 0;
 i10 = i3 + 20 | 0;
 HEAP32[i10 >> 2] = 0;
 i2 = _ft_mem_realloc(i13, 8, 0, i14 + 10 | 0, 0, i16) | 0;
 HEAP32[i10 >> 2] = i2;
 i1 = HEAP32[i16 >> 2] | 0;
 if (i1 | 0) {
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 L4 : do if (i14) {
  if (!i6) {
   i5 = 0;
   while (1) {
    i3 = FUNCTION_TABLE_iii[i7 & 255](i8, i5) | 0;
    if (i3) {
     if (!(_strcmp(288584, i3) | 0)) {
      i1 = 0;
      i9 = 15;
     } else if (!(_strcmp(288590, i3) | 0)) {
      i1 = 1;
      i9 = 15;
     } else if (!(_strcmp(288596, i3) | 0)) {
      i1 = 2;
      i9 = 15;
     } else if (!(_strcmp(288605, i3) | 0)) {
      i1 = 3;
      i9 = 15;
     } else if (!(_strcmp(288612, i3) | 0)) {
      i1 = 4;
      i9 = 15;
     } else if (!(_strcmp(288619, i3) | 0)) {
      i1 = 5;
      i9 = 15;
     } else if (!(_strcmp(288622, i3) | 0)) {
      i1 = 6;
      i9 = 15;
     } else if (!(_strcmp(288637, i3) | 0)) {
      i1 = 7;
      i9 = 15;
     } else if (!(_strcmp(288643, i3) | 0)) {
      i1 = 8;
      i9 = 15;
     } else if (!(_strcmp(288656, i3) | 0)) {
      i1 = 9;
      i9 = 15;
     }
     if ((i9 | 0) == 15) {
      i9 = 0;
      i4 = i11 + (i1 << 2) | 0;
      if (!(HEAP32[i4 >> 2] | 0)) {
       HEAP32[i4 >> 2] = 1;
       HEAP32[i12 + (i1 << 2) >> 2] = i5;
      }
     }
     i3 = _ps_unicode_value(i3) | 0;
     if (i3 & 2147483647) {
      switch (i3 | 0) {
      case 916:
       {
        i1 = 0;
        i9 = 28;
        break;
       }
      case 937:
       {
        i1 = 1;
        i9 = 28;
        break;
       }
      case 8725:
       {
        i1 = 2;
        i9 = 28;
        break;
       }
      case 173:
       {
        i1 = 3;
        i9 = 28;
        break;
       }
      case 713:
       {
        i1 = 4;
        i9 = 28;
        break;
       }
      case 956:
       {
        i1 = 5;
        i9 = 28;
        break;
       }
      case 8729:
       {
        i1 = 6;
        i9 = 28;
        break;
       }
      case 160:
       {
        i1 = 7;
        i9 = 28;
        break;
       }
      case 538:
       {
        i1 = 8;
        i9 = 28;
        break;
       }
      case 539:
       {
        i1 = 9;
        i9 = 28;
        break;
       }
      default:
       {}
      }
      if ((i9 | 0) == 28) {
       i9 = 0;
       HEAP32[i11 + (i1 << 2) >> 2] = 2;
      }
      HEAP32[i2 >> 2] = i3;
      HEAP32[i2 + 4 >> 2] = i5;
      i2 = i2 + 8 | 0;
     }
    }
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i14 | 0)) break L4;
   }
  } else i5 = 0;
  do {
   i4 = FUNCTION_TABLE_iii[i7 & 255](i8, i5) | 0;
   if (i4) {
    if (!(_strcmp(288584, i4) | 0)) {
     i1 = 0;
     i9 = 33;
    } else if (!(_strcmp(288590, i4) | 0)) {
     i1 = 1;
     i9 = 33;
    } else if (!(_strcmp(288596, i4) | 0)) {
     i1 = 2;
     i9 = 33;
    } else if (!(_strcmp(288605, i4) | 0)) {
     i1 = 3;
     i9 = 33;
    } else if (!(_strcmp(288612, i4) | 0)) {
     i1 = 4;
     i9 = 33;
    } else if (!(_strcmp(288619, i4) | 0)) {
     i1 = 5;
     i9 = 33;
    } else if (!(_strcmp(288622, i4) | 0)) {
     i1 = 6;
     i9 = 33;
    } else if (!(_strcmp(288637, i4) | 0)) {
     i1 = 7;
     i9 = 33;
    } else if (!(_strcmp(288643, i4) | 0)) {
     i1 = 8;
     i9 = 33;
    } else if (!(_strcmp(288656, i4) | 0)) {
     i1 = 9;
     i9 = 33;
    }
    if ((i9 | 0) == 33) {
     i9 = 0;
     i3 = i11 + (i1 << 2) | 0;
     if (!(HEAP32[i3 >> 2] | 0)) {
      HEAP32[i3 >> 2] = 1;
      HEAP32[i12 + (i1 << 2) >> 2] = i5;
     }
    }
    i3 = _ps_unicode_value(i4) | 0;
    if (i3 & 2147483647) {
     switch (i3 | 0) {
     case 916:
      {
       i1 = 0;
       i9 = 55;
       break;
      }
     case 937:
      {
       i1 = 1;
       i9 = 55;
       break;
      }
     case 8725:
      {
       i1 = 2;
       i9 = 55;
       break;
      }
     case 173:
      {
       i1 = 3;
       i9 = 55;
       break;
      }
     case 713:
      {
       i1 = 4;
       i9 = 55;
       break;
      }
     case 956:
      {
       i1 = 5;
       i9 = 55;
       break;
      }
     case 8729:
      {
       i1 = 6;
       i9 = 55;
       break;
      }
     case 160:
      {
       i1 = 7;
       i9 = 55;
       break;
      }
     case 538:
      {
       i1 = 8;
       i9 = 55;
       break;
      }
     case 539:
      {
       i1 = 9;
       i9 = 55;
       break;
      }
     default:
      {}
     }
     if ((i9 | 0) == 55) {
      i9 = 0;
      HEAP32[i11 + (i1 << 2) >> 2] = 2;
     }
     HEAP32[i2 >> 2] = i3;
     HEAP32[i2 + 4 >> 2] = i5;
     i2 = i2 + 8 | 0;
    }
    FUNCTION_TABLE_vii[i6 & 63](i8, i4);
   }
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i14 | 0));
 } while (0);
 if ((HEAP32[i11 >> 2] | 0) == 1) {
  HEAP32[i2 >> 2] = 916;
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 >> 2];
  i2 = i2 + 8 | 0;
 }
 if ((HEAP32[i11 + 4 >> 2] | 0) == 1) {
  HEAP32[i2 >> 2] = 937;
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  i2 = i2 + 8 | 0;
 }
 if ((HEAP32[i11 + 8 >> 2] | 0) == 1) {
  HEAP32[i2 >> 2] = 8725;
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 8 >> 2];
  i2 = i2 + 8 | 0;
 }
 if ((HEAP32[i11 + 12 >> 2] | 0) == 1) {
  HEAP32[i2 >> 2] = 173;
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 12 >> 2];
  i2 = i2 + 8 | 0;
 }
 if ((HEAP32[i11 + 16 >> 2] | 0) == 1) {
  HEAP32[i2 >> 2] = 713;
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 16 >> 2];
  i2 = i2 + 8 | 0;
 }
 if ((HEAP32[i11 + 20 >> 2] | 0) == 1) {
  HEAP32[i2 >> 2] = 956;
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 20 >> 2];
  i2 = i2 + 8 | 0;
 }
 if ((HEAP32[i11 + 24 >> 2] | 0) == 1) {
  HEAP32[i2 >> 2] = 8729;
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 24 >> 2];
  i2 = i2 + 8 | 0;
 }
 if ((HEAP32[i11 + 28 >> 2] | 0) == 1) {
  HEAP32[i2 >> 2] = 160;
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 28 >> 2];
  i2 = i2 + 8 | 0;
 }
 if ((HEAP32[i11 + 32 >> 2] | 0) == 1) {
  HEAP32[i2 >> 2] = 538;
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 32 >> 2];
  i2 = i2 + 8 | 0;
 }
 if ((HEAP32[i11 + 36 >> 2] | 0) == 1) {
  HEAP32[i2 >> 2] = 539;
  HEAP32[i2 + 4 >> 2] = HEAP32[i12 + 36 >> 2];
  i2 = i2 + 8 | 0;
 }
 i1 = HEAP32[i10 >> 2] | 0;
 i2 = i2 - i1 >> 3;
 if (!i2) {
  _ft_mem_free(i13, i1);
  HEAP32[i10 >> 2] = 0;
  i1 = HEAP32[i16 >> 2] | 0;
  if (!i1) {
   HEAP32[i16 >> 2] = 163;
   i1 = 163;
  }
 } else {
  if (i2 >>> 0 < i14 >>> 1 >>> 0) {
   i1 = _ft_mem_realloc(i13, 8, i14, i2, i1, i16) | 0;
   HEAP32[i10 >> 2] = i1;
   HEAP32[i16 >> 2] = 0;
  }
  _qsort(i1, i2, 8, 192);
  i1 = HEAP32[i16 >> 2] | 0;
 }
 HEAP32[i15 >> 2] = i2;
 i16 = i1;
 STACKTOP = i17;
 return i16 | 0;
}

function _t42_parse_charstrings(i1, i24) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = i24 + 200 | 0;
 i22 = i24 + 148 | 0;
 i20 = i24 + 252 | 0;
 i10 = HEAP32[i24 + 16 >> 2] | 0;
 i9 = HEAP32[i1 + 488 >> 2] | 0;
 i15 = HEAP32[i24 + 8 >> 2] | 0;
 i16 = i24 + 28 | 0;
 FUNCTION_TABLE_vi[HEAP32[i16 >> 2] & 127](i24);
 i1 = HEAP32[i24 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i15 >>> 0) {
  i1 = HEAP8[i1 >> 0] | 0;
  L3 : do if (((i1 & 255) + -48 | 0) >>> 0 < 10) {
   i1 = FUNCTION_TABLE_ii[HEAP32[i24 + 36 >> 2] & 63](i24) | 0;
   HEAP32[i24 + 144 >> 2] = i1;
   if (HEAP32[i24 + 12 >> 2] | 0) return;
   if ((i1 | 0) < 0) {
    i1 = 3;
    break L1;
   }
   i8 = HEAP32[i24 >> 2] | 0;
  } else {
   if (i1 << 24 >> 24 != 60) {
    i1 = 3;
    break L1;
   }
   i5 = i24 + 32 | 0;
   FUNCTION_TABLE_vi[HEAP32[i5 >> 2] & 127](i24);
   i6 = i24 + 12 | 0;
   if (HEAP32[i6 >> 2] | 0) return;
   FUNCTION_TABLE_vi[HEAP32[i16 >> 2] & 127](i24);
   i7 = HEAP32[i24 >> 2] | 0;
   i4 = i7;
   if (i4 >>> 0 < i15 >>> 0) {
    i3 = 0;
    i1 = i4;
    L14 : while (1) {
     switch (HEAP8[i1 >> 0] | 0) {
     case 62:
      {
       i19 = 11;
       break L14;
      }
     case 47:
      {
       i2 = i3 + 1 | 0;
       break;
      }
     default:
      i2 = i3;
     }
     FUNCTION_TABLE_vi[HEAP32[i5 >> 2] & 127](i24);
     if (HEAP32[i6 >> 2] | 0) {
      i19 = 47;
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[i16 >> 2] & 127](i24);
     i1 = HEAP32[i24 >> 2] | 0;
     if (i1 >>> 0 < i15 >>> 0) i3 = i2; else {
      i8 = i1;
      break L3;
     }
    }
    if ((i19 | 0) == 11) {
     HEAP32[i24 + 144 >> 2] = i3;
     HEAP32[i24 >> 2] = i7;
     i8 = i4;
     break;
    } else if ((i19 | 0) == 47) return;
   } else i8 = i4;
  } while (0);
  if (i8 >>> 0 < i15 >>> 0) {
   i11 = i24 + 144 | 0;
   i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i9 >> 2] >> 2] & 127](i23, HEAP32[i11 >> 2] | 0, i10) | 0;
   if (!i1) {
    i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i9 >> 2] >> 2] & 127](i22, HEAP32[i11 >> 2] | 0, i10) | 0;
    if (!i1) {
     i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i9 >> 2] >> 2] & 127](i20, 4, i10) | 0;
     if (!i1) {
      i7 = i24 + 32 | 0;
      i8 = i24 + 12 | 0;
      i13 = i24 + 192 | 0;
      i10 = i24 + 172 | 0;
      i9 = i24 + 36 | 0;
      i14 = i24 + 244 | 0;
      i12 = i24 + 224 | 0;
      i4 = 0;
      i5 = 0;
      i6 = 0;
      L28 : while (1) {
       do {
        FUNCTION_TABLE_vi[HEAP32[i16 >> 2] & 127](i24);
        i2 = HEAP32[i24 >> 2] | 0;
        if (i2 >>> 0 >= i15 >>> 0) {
         i17 = i6;
         i18 = i4;
         i21 = i5;
         break L28;
        }
        switch (HEAP8[i2 >> 0] | 0) {
        case 62:
         {
          i17 = i6;
          i18 = i4;
          i21 = i5;
          break L28;
         }
        case 101:
         {
          i1 = i2 + 3 | 0;
          if (i1 >>> 0 < i15 >>> 0) if ((HEAP8[i2 + 1 >> 0] | 0) == 110) if ((HEAP8[i2 + 2 >> 0] | 0) == 100) switch (HEAP8[i1 >> 0] | 0) {
          case 0:
          case 12:
          case 10:
          case 13:
          case 9:
          case 32:
           {
            i17 = i6;
            i18 = i4;
            i21 = i5;
            break L28;
           }
          default:
           {}
          }
          break;
         }
        default:
         {}
        }
        FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i24);
        i1 = HEAP32[i24 >> 2] | 0;
        if (i1 >>> 0 >= i15 >>> 0) {
         i1 = 3;
         break L1;
        }
        if (HEAP32[i8 >> 2] | 0) {
         i19 = 47;
         break L28;
        }
       } while ((HEAP8[i2 >> 0] | 0) != 47);
       if ((i2 + 2 | 0) >>> 0 >= i15 >>> 0) {
        i1 = 3;
        break L1;
       }
       i3 = i2 + 1 | 0;
       i2 = i1 - i3 | 0;
       i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 127](i22, i6, i3, i2 + 1 | 0) | 0;
       if (i1 | 0) break L1;
       HEAP8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (i6 << 2) >> 2] | 0) + i2 >> 0] = 0;
       if ((HEAP8[i3 >> 0] | 0) == 46) {
        i3 = (_strcmp(280783, HEAP32[(HEAP32[i10 >> 2] | 0) + (i6 << 2) >> 2] | 0) | 0) == 0;
        i4 = i3 ? 1 : i4;
        i5 = i3 ? i6 : i5;
       }
       FUNCTION_TABLE_vi[HEAP32[i16 >> 2] & 127](i24);
       i2 = HEAP32[i24 >> 2] | 0;
       FUNCTION_TABLE_ii[HEAP32[i9 >> 2] & 63](i24) | 0;
       i1 = HEAP32[i24 >> 2] | 0;
       if (i1 >>> 0 >= i15 >>> 0) {
        i1 = 3;
        break L1;
       }
       i3 = i1 - i2 | 0;
       i1 = FUNCTION_TABLE_iiiii[HEAP32[i14 >> 2] & 127](i23, i6, i2, i3 + 1 | 0) | 0;
       if (i1 | 0) break L1;
       HEAP8[(HEAP32[(HEAP32[i12 >> 2] | 0) + (i6 << 2) >> 2] | 0) + i3 >> 0] = 0;
       i1 = i6 + 1 | 0;
       if ((i1 | 0) < (HEAP32[i11 >> 2] | 0)) i6 = i1; else {
        i17 = i1;
        i18 = i4;
        i21 = i5;
        break;
       }
      }
      if ((i19 | 0) == 47) return;
      HEAP32[i11 >> 2] = i17;
      if (!(i18 << 24 >> 24)) i1 = 3; else {
       i1 = HEAP32[HEAP32[i10 >> 2] >> 2] | 0;
       if (!(_strcmp(280783, i1) | 0)) return;
       i4 = i24 + 296 | 0;
       i3 = i24 + 176 | 0;
       i1 = FUNCTION_TABLE_iiiii[HEAP32[i4 >> 2] & 127](i20, 0, i1, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
       if (!i1) {
        i2 = i24 + 228 | 0;
        i1 = FUNCTION_TABLE_iiiii[HEAP32[i4 >> 2] & 127](i20, 1, HEAP32[HEAP32[i12 >> 2] >> 2] | 0, HEAP32[HEAP32[i2 >> 2] >> 2] | 0) | 0;
        if (!i1) {
         i1 = FUNCTION_TABLE_iiiii[HEAP32[i4 >> 2] & 127](i20, 2, HEAP32[(HEAP32[i10 >> 2] | 0) + (i21 << 2) >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + (i21 << 2) >> 2] | 0) | 0;
         if (!i1) {
          i1 = FUNCTION_TABLE_iiiii[HEAP32[i4 >> 2] & 127](i20, 3, HEAP32[(HEAP32[i12 >> 2] | 0) + (i21 << 2) >> 2] | 0, HEAP32[(HEAP32[i2 >> 2] | 0) + (i21 << 2) >> 2] | 0) | 0;
          if (!i1) {
           i2 = i24 + 276 | 0;
           i3 = i24 + 280 | 0;
           i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 127](i22, i21, HEAP32[HEAP32[i2 >> 2] >> 2] | 0, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
           if (!i1) {
            i1 = FUNCTION_TABLE_iiiii[HEAP32[i14 >> 2] & 127](i23, i21, HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) | 0;
            if (!i1) {
             i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 127](i22, 0, HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) | 0;
             if (!i1) {
              i1 = FUNCTION_TABLE_iiiii[HEAP32[i14 >> 2] & 127](i23, 0, HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) | 0;
              if (!i1) return;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } else i1 = 3;
 } else i1 = 3; while (0);
 HEAP32[i24 + 12 >> 2] = i1;
 return;
}

function _FT_GlyphLoader_CheckPoints(i14, i1, i9) {
 i14 = i14 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i11 = HEAP32[i14 >> 2] | 0;
 i13 = i14 + 22 | 0;
 i1 = (HEAP16[i13 >> 1] | 0) + i1 + (HEAP16[i14 + 58 >> 1] | 0) | 0;
 i12 = i14 + 4 | 0;
 i8 = HEAP32[i12 >> 2] | 0;
 L1 : do if (i1 >>> 0 > i8 >>> 0) {
  i2 = i1 + 7 | 0;
  i7 = i2 & -8;
  if (i7 >>> 0 > 32767) {
   i14 = 10;
   return i14 | 0;
  }
  i4 = i14 + 24 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  L6 : do if ((i2 | i8 | 0) < 0) i2 = 6; else {
   i5 = (i7 | 0) == 0;
   do if (i5) if (!i1) {
    i3 = 0;
    i1 = 0;
   } else {
    FUNCTION_TABLE_vii[HEAP32[i11 + 8 >> 2] & 63](i11, i1);
    i3 = 0;
    i1 = 0;
   } else {
    i2 = i7 << 3;
    if (i8 | 0) {
     i6 = FUNCTION_TABLE_iiiii[HEAP32[i11 + 12 >> 2] & 127](i11, i8 << 3, i2, i1) | 0;
     i2 = (i6 | 0) == 0;
     i3 = i2 ? 64 : 0;
     i1 = i2 ? i1 : i6;
     break;
    }
    i1 = FUNCTION_TABLE_iii[HEAP32[i11 + 4 >> 2] & 255](i11, i2) | 0;
    if (!i1) {
     i2 = 64;
     i1 = 0;
     break L6;
    }
    _memset(i1 | 0, 0, i2 | 0) | 0;
    i3 = 0;
   } while (0);
   i2 = (i3 | 0) == 0;
   i6 = (i7 | 0) > (i8 | 0);
   if (i6 & i2) {
    _memset(i1 + (i8 << 3) | 0, 0, i7 - i8 << 3 | 0) | 0;
    HEAP32[i4 >> 2] = i1;
   } else {
    HEAP32[i4 >> 2] = i1;
    if (!i2) {
     i4 = i3;
     break L1;
    }
   }
   i4 = i14 + 28 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   do if (i5) if (!i1) {
    i3 = 0;
    i1 = 0;
   } else {
    FUNCTION_TABLE_vii[HEAP32[i11 + 8 >> 2] & 63](i11, i1);
    i3 = 0;
    i1 = 0;
   } else {
    if (i8 | 0) {
     i5 = FUNCTION_TABLE_iiiii[HEAP32[i11 + 12 >> 2] & 127](i11, i8, i7, i1) | 0;
     i2 = (i5 | 0) == 0;
     i3 = i2 ? 64 : 0;
     i1 = i2 ? i1 : i5;
     break;
    }
    i1 = FUNCTION_TABLE_iii[HEAP32[i11 + 4 >> 2] & 255](i11, i7) | 0;
    if (!i1) {
     HEAP32[i4 >> 2] = 0;
     i4 = 64;
     break L1;
    } else {
     _memset(i1 | 0, 0, i7 | 0) | 0;
     i3 = 0;
     break;
    }
   } while (0);
   i2 = (i3 | 0) == 0;
   if (i6 & i2) {
    _memset(i1 + i8 | 0, 0, i7 - i8 | 0) | 0;
    HEAP32[i4 >> 2] = i1;
   } else {
    HEAP32[i4 >> 2] = i1;
    if (!i2) {
     i4 = i3;
     break L1;
    }
   }
   L36 : do if (HEAP8[i14 + 16 >> 0] | 0) {
    i4 = i8 << 1;
    i5 = i7 << 1;
    i6 = i14 + 40 | 0;
    i1 = HEAP32[i6 >> 2] | 0;
    L38 : do if ((i5 | i4 | 0) < 0) i2 = 6; else {
     do if (!i5) if (!i1) {
      i3 = 0;
      i1 = 0;
     } else {
      FUNCTION_TABLE_vii[HEAP32[i11 + 8 >> 2] & 63](i11, i1);
      i3 = 0;
      i1 = 0;
     } else {
      i2 = i7 << 4;
      if (i4 | 0) {
       i2 = FUNCTION_TABLE_iiiii[HEAP32[i11 + 12 >> 2] & 127](i11, i8 << 4, i2, i1) | 0;
       i15 = (i2 | 0) == 0;
       i3 = i15 ? 64 : 0;
       i1 = i15 ? i1 : i2;
       break;
      }
      i1 = FUNCTION_TABLE_iii[HEAP32[i11 + 4 >> 2] & 255](i11, i2) | 0;
      if (!i1) {
       i2 = 64;
       i1 = 0;
       break L38;
      }
      _memset(i1 | 0, 0, i2 | 0) | 0;
      i3 = 0;
     } while (0);
     i2 = (i3 | 0) == 0;
     if ((i5 | 0) > (i4 | 0) & i2) {
      _memset(i1 + (i8 << 4) | 0, 0, i5 - i4 << 3 | 0) | 0;
      HEAP32[i6 >> 2] = i1;
     } else {
      HEAP32[i6 >> 2] = i1;
      if (!i2) {
       i4 = i3;
       break L1;
      }
     }
     _memmove(i1 + (i7 << 3) | 0, i1 + (i8 << 3) | 0, i8 << 3 | 0) | 0;
     HEAP32[i14 + 44 >> 2] = (HEAP32[i6 >> 2] | 0) + (i7 << 3);
     break L36;
    } while (0);
    HEAP32[i6 >> 2] = i1;
    i4 = i2;
    break L1;
   } while (0);
   HEAP32[i12 >> 2] = i7;
   i2 = 1;
   i10 = 41;
   break L1;
  } while (0);
  HEAP32[i4 >> 2] = i1;
  i4 = i2;
 } else {
  i2 = 0;
  i10 = 41;
 } while (0);
 L56 : do if ((i10 | 0) == 41) {
  i6 = i14 + 8 | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  i8 = i14 + 20 | 0;
  i3 = HEAP16[i8 >> 1] | 0;
  i1 = (i3 << 16 >> 16) + i9 + (HEAP16[i14 + 56 >> 1] | 0) | 0;
  L58 : do if (i1 >>> 0 > i7 >>> 0) {
   i2 = i1 + 3 | 0;
   i4 = i2 & -4;
   if (i4 >>> 0 > 32767) {
    i15 = 10;
    return i15 | 0;
   }
   i5 = i14 + 32 | 0;
   i1 = HEAP32[i5 >> 2] | 0;
   L63 : do if ((i2 | i7 | 0) < 0) i2 = 6; else {
    do if (!i4) if (!i1) {
     i3 = 0;
     i2 = 0;
    } else {
     FUNCTION_TABLE_vii[HEAP32[i11 + 8 >> 2] & 63](i11, i1);
     i3 = 0;
     i2 = 0;
    } else {
     i3 = i4 << 1;
     if (i7 | 0) {
      i2 = FUNCTION_TABLE_iiiii[HEAP32[i11 + 12 >> 2] & 127](i11, i7 << 1, i3, i1) | 0;
      i15 = (i2 | 0) == 0;
      i3 = i15 ? 64 : 0;
      i2 = i15 ? i1 : i2;
      break;
     }
     i2 = FUNCTION_TABLE_iii[HEAP32[i11 + 4 >> 2] & 255](i11, i3) | 0;
     if (!i2) {
      i2 = 64;
      i1 = 0;
      break L63;
     }
     _memset(i2 | 0, 0, i3 | 0) | 0;
     i3 = 0;
    } while (0);
    i1 = (i3 | 0) == 0;
    if ((i4 | 0) > (i7 | 0) & i1) {
     _memset(i2 + (i7 << 1) | 0, 0, i4 - i7 << 1 | 0) | 0;
     HEAP32[i5 >> 2] = i2;
    } else {
     HEAP32[i5 >> 2] = i2;
     if (!i1) {
      i4 = i3;
      break L56;
     }
    }
    HEAP32[i6 >> 2] = i4;
    i3 = HEAP16[i8 >> 1] | 0;
    break L58;
   } while (0);
   HEAP32[i5 >> 2] = i1;
   i4 = i2;
   break L56;
  } else if (!(i2 << 24 >> 24)) {
   i15 = 0;
   return i15 | 0;
  } else {
   i2 = HEAP32[i14 + 32 >> 2] | 0;
   break;
  } while (0);
  i1 = HEAP16[i13 >> 1] | 0;
  HEAP32[i14 + 60 >> 2] = (HEAP32[i14 + 24 >> 2] | 0) + (i1 << 3);
  HEAP32[i14 + 64 >> 2] = (HEAP32[i14 + 28 >> 2] | 0) + i1;
  HEAP32[i14 + 68 >> 2] = i2 + (i3 << 16 >> 16 << 1);
  if (!(HEAP8[i14 + 16 >> 0] | 0)) {
   i15 = 0;
   return i15 | 0;
  }
  HEAP32[i14 + 76 >> 2] = (HEAP32[i14 + 40 >> 2] | 0) + (i1 << 3);
  HEAP32[i14 + 80 >> 2] = (HEAP32[i14 + 44 >> 2] | 0) + (i1 << 3);
  i15 = 0;
  return i15 | 0;
 } while (0);
 i3 = HEAP32[i14 >> 2] | 0;
 i1 = i14 + 24 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
 HEAP32[i1 >> 2] = 0;
 i1 = i14 + 28 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
 HEAP32[i1 >> 2] = 0;
 i1 = i14 + 32 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
 HEAP32[i1 >> 2] = 0;
 i1 = i14 + 40 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
 HEAP32[i1 >> 2] = 0;
 i1 = i14 + 52 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
 HEAP32[i1 >> 2] = 0;
 HEAP32[i14 + 44 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i14 + 12 >> 2] = 0;
 i2 = i14 + 20 | 0;
 HEAP16[i13 >> 1] = 0;
 HEAP16[i2 >> 1] = 0;
 HEAP32[i14 + 48 >> 2] = 0;
 i1 = i14 + 56 | 0;
 i3 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 i15 = i4;
 return i15 | 0;
}

function _Line_To(i10, i11, i12) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i10 + 100 | 0;
 L1 : do switch (HEAP32[i9 >> 2] | 0) {
 case 0:
  {
   i1 = HEAP32[i10 + 72 >> 2] | 0;
   if ((i1 | 0) < (i12 | 0)) {
    i4 = HEAP32[i10 + 4 >> 2] | 0;
    i4 = ((i1 + -1 + i4 & 0 - i4) - i1 | 0) < (HEAP32[i10 + 8 >> 2] | 0);
    i2 = i10 + 92 | 0;
    i3 = i10 + 40 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    if (!(HEAP32[i2 >> 2] | 0)) {
     HEAP32[i10 + 88 >> 2] = i1;
     HEAP32[i2 >> 2] = i1;
     i1 = i1 + 32 | 0;
     HEAP32[i3 >> 2] = i1;
    }
    if (i1 >>> 0 >= (HEAP32[i10 + 36 >> 2] | 0) >>> 0) {
     HEAP32[i10 + 44 >> 2] = 98;
     i12 = 1;
     return i12 | 0;
    }
    i2 = HEAP32[i10 + 88 >> 2] | 0;
    HEAP32[i2 + 20 >> 2] = 0;
    HEAP32[i2 + 16 >> 2] = 0;
    HEAP32[i2 + 8 >> 2] = i1;
    HEAP32[i2 + 4 >> 2] = 0;
    HEAP32[i2 + 28 >> 2] = 0;
    HEAP16[i2 + 12 >> 1] = HEAPU8[i10 + 176 >> 0] | (i4 ? 8 : 40);
    i1 = i10 + 96 | 0;
    if (!(HEAP32[i1 >> 2] | 0)) HEAP32[i1 >> 2] = i2;
    HEAP32[i9 >> 2] = 1;
    HEAP8[i10 + 86 >> 0] = 1;
    i1 = i10 + 87 | 0;
    i3 = 51;
    break L1;
   }
   if ((i1 | 0) > (i12 | 0)) {
    i4 = ((HEAP32[i10 + 4 >> 2] | 0) + -1 & i1 | 0) < (HEAP32[i10 + 8 >> 2] | 0);
    i2 = i10 + 92 | 0;
    i3 = i10 + 40 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    if (!(HEAP32[i2 >> 2] | 0)) {
     HEAP32[i10 + 88 >> 2] = i1;
     HEAP32[i2 >> 2] = i1;
     i1 = i1 + 32 | 0;
     HEAP32[i3 >> 2] = i1;
    }
    if (i1 >>> 0 >= (HEAP32[i10 + 36 >> 2] | 0) >>> 0) {
     HEAP32[i10 + 44 >> 2] = 98;
     i12 = 1;
     return i12 | 0;
    }
    i2 = HEAP32[i10 + 88 >> 2] | 0;
    HEAP32[i2 + 20 >> 2] = 0;
    HEAP32[i2 + 16 >> 2] = 0;
    HEAP32[i2 + 8 >> 2] = i1;
    HEAP32[i2 + 4 >> 2] = 0;
    HEAP32[i2 + 28 >> 2] = 0;
    i1 = HEAPU8[i10 + 176 >> 0] | 0;
    HEAP16[i2 + 12 >> 1] = i4 ? i1 : i1 | 16;
    i1 = i10 + 96 | 0;
    if (!(HEAP32[i1 >> 2] | 0)) HEAP32[i1 >> 2] = i2;
    HEAP32[i9 >> 2] = 2;
    HEAP8[i10 + 86 >> 0] = 1;
    i1 = i10 + 87 | 0;
    i3 = 53;
   } else i3 = 50;
   break;
  }
 case 1:
  {
   i1 = HEAP32[i10 + 72 >> 2] | 0;
   if ((i1 | 0) > (i12 | 0)) {
    i8 = ((HEAP32[i10 + 4 >> 2] | 0) + -1 & i1 | 0) < (HEAP32[i10 + 8 >> 2] | 0);
    i6 = i10 + 40 | 0;
    i2 = HEAP32[i6 >> 2] | 0;
    i7 = i10 + 88 | 0;
    i4 = HEAP32[i7 >> 2] | 0;
    i1 = i2 - (HEAP32[i4 + 8 >> 2] | 0) | 0;
    if ((i1 | 0) < 0) {
     HEAP32[i10 + 44 >> 2] = 99;
     i12 = 1;
     return i12 | 0;
    }
    if (!i1) i3 = i2; else {
     HEAP32[i4 + 16 >> 2] = i1 >> 2;
     if (!i8) {
      i5 = i4 + 12 | 0;
      i3 = HEAPU16[i5 >> 1] | 0;
      HEAP16[i5 >> 1] = (i3 << 1 & 16 ^ 16) + 16 | i3;
     }
     HEAP32[i7 >> 2] = i2;
     i3 = i2 + 32 | 0;
     HEAP32[i6 >> 2] = i3;
     HEAP32[i2 + 16 >> 2] = 0;
     HEAP32[i2 + 8 >> 2] = i3;
     HEAP32[i4 + 28 >> 2] = i2;
     i4 = i10 + 84 | 0;
     HEAP16[i4 >> 1] = (HEAP16[i4 >> 1] | 0) + 1 << 16 >> 16;
     i4 = i2;
    }
    i5 = HEAP32[i10 + 36 >> 2] | 0;
    if (i3 >>> 0 >= i5 >>> 0) {
     HEAP32[i10 + 44 >> 2] = 98;
     i12 = 1;
     return i12 | 0;
    }
    i1 = i10 + 87 | 0;
    HEAP8[i1 >> 0] = 0;
    i2 = i10 + 92 | 0;
    if (!(HEAP32[i2 >> 2] | 0)) {
     HEAP32[i7 >> 2] = i3;
     HEAP32[i2 >> 2] = i3;
     i2 = i3 + 32 | 0;
     HEAP32[i6 >> 2] = i2;
    } else {
     i2 = i3;
     i3 = i4;
    }
    if (i2 >>> 0 >= i5 >>> 0) {
     HEAP32[i10 + 44 >> 2] = 98;
     i12 = 1;
     return i12 | 0;
    }
    HEAP32[i3 + 20 >> 2] = 0;
    HEAP32[i3 + 16 >> 2] = 0;
    HEAP32[i3 + 8 >> 2] = i2;
    HEAP32[i3 + 4 >> 2] = 0;
    HEAP32[i3 + 28 >> 2] = 0;
    i2 = HEAPU8[i10 + 176 >> 0] | 0;
    HEAP16[i3 + 12 >> 1] = i8 ? i2 : i2 | 16;
    i2 = i10 + 96 | 0;
    if (!(HEAP32[i2 >> 2] | 0)) HEAP32[i2 >> 2] = i3;
    HEAP32[i9 >> 2] = 2;
    HEAP8[i10 + 86 >> 0] = 1;
    i3 = 53;
   } else i3 = 52;
   break;
  }
 case 2:
  {
   i1 = HEAP32[i10 + 72 >> 2] | 0;
   if ((i1 | 0) < (i12 | 0)) {
    i8 = HEAP32[i10 + 4 >> 2] | 0;
    i8 = ((i1 + -1 + i8 & 0 - i8) - i1 | 0) < (HEAP32[i10 + 8 >> 2] | 0);
    i6 = i10 + 40 | 0;
    i2 = HEAP32[i6 >> 2] | 0;
    i7 = i10 + 88 | 0;
    i4 = HEAP32[i7 >> 2] | 0;
    i1 = i2 - (HEAP32[i4 + 8 >> 2] | 0) | 0;
    if ((i1 | 0) < 0) {
     HEAP32[i10 + 44 >> 2] = 99;
     i12 = 1;
     return i12 | 0;
    }
    if (!i1) {
     i3 = i2;
     i2 = i4;
    } else {
     HEAP32[i4 + 16 >> 2] = i1 >> 2;
     if (!i8) {
      i5 = i4 + 12 | 0;
      i3 = HEAPU16[i5 >> 1] | 0;
      HEAP16[i5 >> 1] = (i3 << 1 & 16 ^ 16) + 16 | i3;
     }
     HEAP32[i7 >> 2] = i2;
     i3 = i2 + 32 | 0;
     HEAP32[i6 >> 2] = i3;
     HEAP32[i2 + 16 >> 2] = 0;
     HEAP32[i2 + 8 >> 2] = i3;
     HEAP32[i4 + 28 >> 2] = i2;
     i5 = i10 + 84 | 0;
     HEAP16[i5 >> 1] = (HEAP16[i5 >> 1] | 0) + 1 << 16 >> 16;
    }
    i5 = HEAP32[i10 + 36 >> 2] | 0;
    if (i3 >>> 0 >= i5 >>> 0) {
     HEAP32[i10 + 44 >> 2] = 98;
     i12 = 1;
     return i12 | 0;
    }
    i1 = i10 + 87 | 0;
    HEAP8[i1 >> 0] = 0;
    i4 = i10 + 92 | 0;
    if (!(HEAP32[i4 >> 2] | 0)) {
     HEAP32[i7 >> 2] = i3;
     HEAP32[i4 >> 2] = i3;
     i4 = i3 + 32 | 0;
     HEAP32[i6 >> 2] = i4;
    } else {
     i4 = i3;
     i3 = i2;
    }
    if (i4 >>> 0 >= i5 >>> 0) {
     HEAP32[i10 + 44 >> 2] = 98;
     i12 = 1;
     return i12 | 0;
    }
    HEAP32[i3 + 20 >> 2] = 0;
    HEAP32[i3 + 16 >> 2] = 0;
    HEAP32[i3 + 8 >> 2] = i4;
    HEAP32[i3 + 4 >> 2] = 0;
    HEAP32[i3 + 28 >> 2] = 0;
    HEAP16[i3 + 12 >> 1] = HEAPU8[i10 + 176 >> 0] | (i8 ? 8 : 40);
    i2 = i10 + 96 | 0;
    if (!(HEAP32[i2 >> 2] | 0)) HEAP32[i2 >> 2] = i3;
    HEAP32[i9 >> 2] = 1;
    HEAP8[i10 + 86 >> 0] = 1;
    i3 = 51;
   } else i3 = 54;
   break;
  }
 default:
  i3 = 50;
 } while (0);
 if ((i3 | 0) == 50) {
  i2 = i10 + 72 | 0;
  i1 = i10 + 68 | 0;
 } else if ((i3 | 0) == 51) {
  HEAP8[i1 >> 0] = 0;
  i3 = 52;
 } else if ((i3 | 0) == 53) {
  HEAP8[i1 >> 0] = 0;
  i3 = 54;
 }
 if ((i3 | 0) == 52) {
  i1 = i10 + 68 | 0;
  i2 = i10 + 72 | 0;
  if ((_Line_Up(i10, HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0, i11, i12, HEAP32[i10 + 76 >> 2] | 0, HEAP32[i10 + 80 >> 2] | 0) | 0) << 24 >> 24) {
   i12 = 1;
   return i12 | 0;
  }
 } else if ((i3 | 0) == 54) {
  i1 = i10 + 68 | 0;
  i2 = i10 + 72 | 0;
  i3 = i10 + 86 | 0;
  i9 = HEAP8[i3 >> 0] | 0;
  i4 = _Line_Up(i10, HEAP32[i1 >> 2] | 0, 0 - (HEAP32[i2 >> 2] | 0) | 0, i11, 0 - i12 | 0, 0 - (HEAP32[i10 + 80 >> 2] | 0) | 0, 0 - (HEAP32[i10 + 76 >> 2] | 0) | 0) | 0;
  if (i9 << 24 >> 24) if (!(HEAP8[i3 >> 0] | 0)) {
   i10 = (HEAP32[i10 + 88 >> 2] | 0) + 20 | 0;
   HEAP32[i10 >> 2] = 0 - (HEAP32[i10 >> 2] | 0);
  }
  if (i4 << 24 >> 24) {
   i12 = 1;
   return i12 | 0;
  }
 }
 HEAP32[i1 >> 2] = i11;
 HEAP32[i2 >> 2] = i12;
 i12 = 0;
 return i12 | 0;
}

function _parse_encoding(i16, i17) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i18;
 i13 = HEAP32[i17 + 8 >> 2] | 0;
 i3 = HEAP32[i16 + 488 >> 2] | 0;
 i14 = i17 + 28 | 0;
 FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
 i5 = HEAP32[i17 >> 2] | 0;
 if (i5 >>> 0 >= i13 >>> 0) {
  HEAP32[i17 + 12 >> 2] = 3;
  STACKTOP = i18;
  return;
 }
 i12 = HEAP8[i5 >> 0] | 0;
 i1 = i12 << 24 >> 24 == 91;
 if (!(i1 | ((i12 & 255) + -48 | 0) >>> 0 < 10)) {
  if ((i5 + 17 | 0) >>> 0 < i13 >>> 0) if (!(_strncmp(i5, 280975, 16) | 0)) {
   HEAP32[i16 + 368 >> 2] = 2;
   STACKTOP = i18;
   return;
  }
  if ((i5 + 15 | 0) >>> 0 < i13 >>> 0) if (!(_strncmp(i5, 280992, 14) | 0)) {
   HEAP32[i16 + 368 >> 2] = 4;
   STACKTOP = i18;
   return;
  }
  if ((i5 + 18 | 0) >>> 0 < i13 >>> 0) if (!(_strncmp(i5, 281007, 17) | 0)) {
   HEAP32[i16 + 368 >> 2] = 3;
   STACKTOP = i18;
   return;
  }
  HEAP32[i17 + 12 >> 2] = 162;
  STACKTOP = i18;
  return;
 }
 i12 = i17 + 100 | 0;
 i2 = HEAP32[i17 + 16 >> 2] | 0;
 if (i1) {
  HEAP32[i17 >> 2] = i5 + 1;
  i6 = 1;
  i11 = 256;
 } else {
  i6 = 0;
  i11 = FUNCTION_TABLE_ii[HEAP32[i17 + 36 >> 2] & 63](i17) | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
 if ((HEAP32[i17 >> 2] | 0) >>> 0 >= i13 >>> 0) {
  STACKTOP = i18;
  return;
 }
 HEAP32[i16 + 372 >> 2] = i11;
 HEAP32[i17 + 96 >> 2] = i11;
 i1 = _ft_mem_realloc(i2, 2, 0, i11, 0, i4) | 0;
 HEAP32[i16 + 384 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) {
  i1 = _ft_mem_realloc(i2, 4, 0, i11, 0, i4) | 0;
  HEAP32[i16 + 388 >> 2] = i1;
  i1 = HEAP32[i4 >> 2] | 0;
  if (!i1) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i3 >> 2] >> 2] & 127](i12, i11, i2) | 0;
   HEAP32[i4 >> 2] = i1;
   if (!i1) {
    if ((i11 | 0) > 0) {
     i2 = i17 + 144 | 0;
     i1 = 0;
     do {
      FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i12, i1, 280783, 8) | 0;
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != (i11 | 0));
    }
    FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
    i3 = HEAP32[i17 >> 2] | 0;
    L40 : do if (i3 >>> 0 < i13 >>> 0) {
     i7 = i17 + 32 | 0;
     i10 = i17 + 12 | 0;
     i8 = i17 + 144 | 0;
     i9 = i17 + 124 | 0;
     i5 = i17 + 36 | 0;
     L42 : do if (!(i6 << 24 >> 24)) {
      i2 = 0;
      while (1) {
       i4 = HEAP8[i3 >> 0] | 0;
       switch (i4 << 24 >> 24) {
       case 93:
        {
         i15 = i3;
         break L42;
        }
       case 100:
        {
         i1 = i3 + 3 | 0;
         if (i1 >>> 0 < i13 >>> 0) if ((HEAP8[i3 + 1 >> 0] | 0) == 101) if ((HEAP8[i3 + 2 >> 0] | 0) == 102) switch (HEAP8[i1 >> 0] | 0) {
         case 37:
         case 125:
         case 123:
         case 93:
         case 91:
         case 62:
         case 60:
         case 41:
         case 40:
         case 47:
         case 0:
         case 12:
         case 9:
         case 10:
         case 13:
         case 32:
          break L40;
         default:
          {}
         }
         break;
        }
       default:
        {}
       }
       if (((i4 & 255) + -48 | 0) >>> 0 > 9) {
        FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i17);
        if (!(HEAP32[i10 >> 2] | 0)) i1 = i3; else {
         i1 = 47;
         break;
        }
       } else {
        i4 = FUNCTION_TABLE_ii[HEAP32[i5 >> 2] & 63](i17) | 0;
        FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
        i1 = HEAP32[i17 >> 2] | 0;
        if ((i3 | 0) == (i1 | 0)) {
         i1 = 38;
         break;
        }
        if ((i1 + 2 | 0) >>> 0 < i13 >>> 0) if ((i2 | 0) < (i11 | 0) & (HEAP8[i1 >> 0] | 0) == 47) {
         i1 = i1 + 1 | 0;
         HEAP32[i17 >> 2] = i1;
         FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i17);
         i3 = HEAP32[i17 >> 2] | 0;
         if (i3 >>> 0 >= i13 >>> 0) {
          i1 = 47;
          break;
         }
         if (HEAP32[i10 >> 2] | 0) {
          i1 = 47;
          break;
         }
         i3 = i3 - i1 | 0;
         i6 = FUNCTION_TABLE_iiiii[HEAP32[i8 >> 2] & 127](i12, i4, i1, i3 + 1 | 0) | 0;
         HEAP32[i10 >> 2] = i6;
         if (i6 | 0) {
          i1 = 47;
          break;
         }
         HEAP8[(HEAP32[(HEAP32[i9 >> 2] | 0) + (i4 << 2) >> 2] | 0) + i3 >> 0] = 0;
         i2 = i2 + 1 | 0;
        }
       }
       FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
       i3 = HEAP32[i17 >> 2] | 0;
       if (i3 >>> 0 >= i13 >>> 0) break L40;
      }
      if ((i1 | 0) == 38) {
       HEAP32[i10 >> 2] = 2;
       STACKTOP = i18;
       return;
      } else if ((i1 | 0) == 47) {
       STACKTOP = i18;
       return;
      }
     } else {
      i4 = 0;
      while (1) {
       i2 = HEAP8[i3 >> 0] | 0;
       switch (i2 << 24 >> 24) {
       case 93:
        {
         i15 = i3;
         break L42;
        }
       case 100:
        {
         i1 = i3 + 3 | 0;
         if (i1 >>> 0 < i13 >>> 0) if ((HEAP8[i3 + 1 >> 0] | 0) == 101) if ((HEAP8[i3 + 2 >> 0] | 0) == 102) switch (HEAP8[i1 >> 0] | 0) {
         case 37:
         case 125:
         case 123:
         case 93:
         case 91:
         case 62:
         case 60:
         case 41:
         case 40:
         case 47:
         case 0:
         case 12:
         case 9:
         case 10:
         case 13:
         case 32:
          break L40;
         default:
          {}
         }
         break;
        }
       default:
        {}
       }
       if ((i3 + 2 | 0) >>> 0 >= i13 >>> 0) {
        i1 = 44;
        break;
       }
       if (!((i4 | 0) < (i11 | 0) & i2 << 24 >> 24 == 47)) {
        i1 = 44;
        break;
       }
       i1 = i3 + 1 | 0;
       HEAP32[i17 >> 2] = i1;
       FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i17);
       i2 = HEAP32[i17 >> 2] | 0;
       if (i2 >>> 0 >= i13 >>> 0) {
        i1 = 47;
        break;
       }
       if (HEAP32[i10 >> 2] | 0) {
        i1 = 47;
        break;
       }
       i2 = i2 - i1 | 0;
       i6 = FUNCTION_TABLE_iiiii[HEAP32[i8 >> 2] & 127](i12, i4, i1, i2 + 1 | 0) | 0;
       HEAP32[i10 >> 2] = i6;
       if (i6 | 0) {
        i1 = 47;
        break;
       }
       HEAP8[(HEAP32[(HEAP32[i9 >> 2] | 0) + (i4 << 2) >> 2] | 0) + i2 >> 0] = 0;
       FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
       i3 = HEAP32[i17 >> 2] | 0;
       if (i3 >>> 0 >= i13 >>> 0) break L40; else i4 = i4 + 1 | 0;
      }
      if ((i1 | 0) == 44) {
       HEAP32[i10 >> 2] = 2;
       STACKTOP = i18;
       return;
      } else if ((i1 | 0) == 47) {
       STACKTOP = i18;
       return;
      }
     } while (0);
     i1 = i15 + 1 | 0;
    } else i1 = i5; while (0);
    HEAP32[i16 + 368 >> 2] = 1;
    HEAP32[i17 >> 2] = i1;
    STACKTOP = i18;
    return;
   }
  }
 }
 HEAP32[i17 + 12 >> 2] = i1;
 STACKTOP = i18;
 return;
}

function _outline_convert(i15, i16) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i19 = 0;
 if (i16 | 0) {
  i17 = i16 + 2 | 0;
  i1 = HEAP16[i17 >> 1] | 0;
  if (i1 << 16 >> 16) {
   i1 = i1 << 16 >> 16;
   i2 = _malloc(i1 << 4) | 0;
   i14 = i15 + 16 | 0;
   HEAP32[i14 >> 2] = i2;
   i12 = _malloc(i1) | 0;
   i13 = i15 + 20 | 0;
   HEAP32[i13 >> 2] = i12;
   if ((i2 | 0) == 0 | (i12 | 0) == 0) {
    _free(i2);
    _free(HEAP32[i13 >> 2] | 0);
    HEAP32[i15 >> 2] = 0;
    HEAP32[i15 + 4 >> 2] = 0;
    HEAP32[i15 + 8 >> 2] = 0;
    HEAP32[i15 + 12 >> 2] = 0;
    HEAP32[i15 + 16 >> 2] = 0;
    HEAP32[i15 + 20 >> 2] = 0;
    i18 = 0;
    return i18 | 0;
   }
   HEAP32[i15 + 4 >> 2] = i1 << 1;
   HEAP32[i15 + 12 >> 2] = i1;
   i9 = i15 + 8 | 0;
   HEAP32[i9 >> 2] = 0;
   HEAP32[i15 >> 2] = 0;
   if (!(HEAP16[i16 >> 1] | 0)) {
    i18 = 1;
    return i18 | 0;
   }
   i10 = i16 + 12 | 0;
   i11 = i16 + 8 | 0;
   i12 = i16 + 4 | 0;
   i1 = 0;
   i8 = 0;
   L11 : while (1) {
    i2 = HEAP16[(HEAP32[i10 >> 2] | 0) + (i8 << 1) >> 1] | 0;
    i7 = i2 << 16 >> 16;
    if (i7 >>> 0 < i1 >>> 0) {
     i18 = 36;
     break;
    }
    if (i2 << 16 >> 16 >= (HEAP16[i17 >> 1] | 0)) {
     i18 = 36;
     break;
    }
    if ((i7 - i1 | 0) >>> 0 < 2) i1 = i7 + 1 | 0; else {
     i3 = HEAP32[i11 >> 2] | 0;
     switch (HEAP8[i3 + i1 >> 0] & 3) {
     case 1:
      {
       i2 = 0;
       i6 = 0;
       break;
      }
     case 0:
      {
       i5 = HEAP32[i12 >> 2] | 0;
       i4 = HEAP32[i5 + (i7 << 3) >> 2] | 0;
       i2 = 0 - (HEAP32[i5 + (i7 << 3) + 4 >> 2] | 0) | 0;
       switch (HEAP8[i3 + i7 >> 0] & 3) {
       case 1:
        {
         i6 = 1;
         i3 = i4;
         break;
        }
       case 0:
        {
         i6 = 0;
         i3 = (HEAP32[i5 + (i1 << 3) >> 2] | 0) + i4 >> 1;
         i2 = i2 - (HEAP32[i5 + (i1 << 3) + 4 >> 2] | 0) >> 1;
         break;
        }
       default:
        {
         i18 = 36;
         break L11;
        }
       }
       i4 = HEAP32[i14 >> 2] | 0;
       i5 = HEAP32[i15 >> 2] | 0;
       HEAP32[i15 >> 2] = i5 + 1;
       HEAP32[i4 + (i5 << 3) >> 2] = i3;
       HEAP32[i4 + (i5 << 3) + 4 >> 2] = i2;
       i2 = 1;
       break;
      }
     default:
      {
       i18 = 36;
       break L11;
      }
     }
     i4 = HEAP32[i12 >> 2] | 0;
     i3 = HEAP32[i4 + (i1 << 3) >> 2] | 0;
     i4 = 0 - (HEAP32[i4 + (i1 << 3) + 4 >> 2] | 0) | 0;
     i19 = HEAP32[i14 >> 2] | 0;
     i5 = HEAP32[i15 >> 2] | 0;
     HEAP32[i15 >> 2] = i5 + 1;
     HEAP32[i19 + (i5 << 3) >> 2] = i3;
     HEAP32[i19 + (i5 << 3) + 4 >> 2] = i4;
     i1 = i1 + 1 | 0;
     L24 : do if (i1 >>> 0 <= i7 >>> 0) while (1) {
      L27 : do switch (HEAP8[(HEAP32[i11 >> 2] | 0) + i1 >> 0] & 3) {
      case 1:
       {
        switch (i2 | 0) {
        case 0:
         {
          i19 = HEAP32[i13 >> 2] | 0;
          i3 = HEAP32[i9 >> 2] | 0;
          HEAP32[i9 >> 2] = i3 + 1;
          i2 = 1;
          i3 = i19 + i3 | 0;
          break;
         }
        case 1:
         {
          i19 = HEAP32[i13 >> 2] | 0;
          i3 = HEAP32[i9 >> 2] | 0;
          HEAP32[i9 >> 2] = i3 + 1;
          i2 = 2;
          i3 = i19 + i3 | 0;
          break;
         }
        case 3:
         {
          i19 = HEAP32[i13 >> 2] | 0;
          i3 = HEAP32[i9 >> 2] | 0;
          HEAP32[i9 >> 2] = i3 + 1;
          i2 = 3;
          i3 = i19 + i3 | 0;
          break;
         }
        default:
         {
          i18 = 36;
          break L11;
         }
        }
        HEAP8[i3 >> 0] = i2;
        i2 = 0;
        break;
       }
      case 0:
       {
        switch (i2 | 0) {
        case 0:
         {
          i2 = 1;
          break L27;
         }
        case 1:
         break;
        default:
         {
          i18 = 36;
          break L11;
         }
        }
        i19 = HEAP32[i13 >> 2] | 0;
        i5 = HEAP32[i9 >> 2] | 0;
        HEAP32[i9 >> 2] = i5 + 1;
        HEAP8[i19 + i5 >> 0] = 2;
        i5 = HEAP32[i12 >> 2] | 0;
        i3 = (HEAP32[i5 + (i1 << 3) >> 2] | 0) + i3 >> 1;
        i5 = i4 - (HEAP32[i5 + (i1 << 3) + 4 >> 2] | 0) >> 1;
        i19 = HEAP32[i14 >> 2] | 0;
        i2 = HEAP32[i15 >> 2] | 0;
        HEAP32[i15 >> 2] = i2 + 1;
        HEAP32[i19 + (i2 << 3) >> 2] = i3;
        HEAP32[i19 + (i2 << 3) + 4 >> 2] = i5;
        i2 = 1;
        break;
       }
      case 2:
       {
        switch (i2 | 0) {
        case 0:
         {
          i2 = 2;
          break L27;
         }
        case 2:
         break;
        default:
         {
          i18 = 36;
          break L11;
         }
        }
        i2 = 3;
        break;
       }
      default:
       {
        i18 = 36;
        break L11;
       }
      } while (0);
      i4 = HEAP32[i12 >> 2] | 0;
      i3 = HEAP32[i4 + (i1 << 3) >> 2] | 0;
      i4 = 0 - (HEAP32[i4 + (i1 << 3) + 4 >> 2] | 0) | 0;
      i5 = HEAP32[i14 >> 2] | 0;
      i19 = HEAP32[i15 >> 2] | 0;
      HEAP32[i15 >> 2] = i19 + 1;
      HEAP32[i5 + (i19 << 3) >> 2] = i3;
      HEAP32[i5 + (i19 << 3) + 4 >> 2] = i4;
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 > i7 >>> 0) break L24;
     } while (0);
     L40 : do switch (i2 | 0) {
     case 0:
      if (i6) {
       HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
       break L40;
      } else {
       i7 = HEAP32[i13 >> 2] | 0;
       i19 = HEAP32[i9 >> 2] | 0;
       HEAP32[i9 >> 2] = i19 + 1;
       HEAP8[i7 + i19 >> 0] = 1;
       break L40;
      }
     case 1:
      {
       i7 = HEAP32[i13 >> 2] | 0;
       i19 = HEAP32[i9 >> 2] | 0;
       HEAP32[i9 >> 2] = i19 + 1;
       HEAP8[i7 + i19 >> 0] = 2;
       break;
      }
     case 3:
      {
       i7 = HEAP32[i13 >> 2] | 0;
       i19 = HEAP32[i9 >> 2] | 0;
       HEAP32[i9 >> 2] = i19 + 1;
       HEAP8[i7 + i19 >> 0] = 3;
       break;
      }
     default:
      break L11;
     } while (0);
     i19 = (HEAP32[i13 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) + -1) | 0;
     HEAP8[i19 >> 0] = HEAP8[i19 >> 0] | 4;
    }
    i8 = i8 + 1 | 0;
    if (i8 >>> 0 >= (HEAP16[i16 >> 1] | 0) >>> 0) {
     i1 = 1;
     i18 = 38;
     break;
    }
   }
   if ((i18 | 0) == 38) return i1 | 0;
   if ((i18 | 0) == 36) if (!i15) {
    i19 = 0;
    return i19 | 0;
   }
   _free(HEAP32[i14 >> 2] | 0);
   _free(HEAP32[i13 >> 2] | 0);
   HEAP32[i15 >> 2] = 0;
   HEAP32[i15 + 4 >> 2] = 0;
   HEAP32[i15 + 8 >> 2] = 0;
   HEAP32[i15 + 12 >> 2] = 0;
   HEAP32[i15 + 16 >> 2] = 0;
   HEAP32[i15 + 20 >> 2] = 0;
   i19 = 0;
   return i19 | 0;
  }
 };
 HEAP32[i15 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 HEAP32[i15 + 12 >> 2] = 0;
 HEAP32[i15 + 16 >> 2] = 0;
 HEAP32[i15 + 20 >> 2] = 0;
 i19 = 1;
 return i19 | 0;
}

function _FT_Bitmap_Convert(i1, i10, i9, i2) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i14;
 HEAP32[i13 >> 2] = 0;
 if (!i1) {
  i13 = 33;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (!((i10 | 0) != 0 & (i9 | 0) != 0)) {
  i13 = 6;
  STACKTOP = i14;
  return i13 | 0;
 }
 i6 = HEAP32[i1 >> 2] | 0;
 i8 = i10 + 18 | 0;
 if (((HEAPU8[i8 >> 0] | 0) + -1 | 0) >>> 0 < 7) {
  i7 = i9 + 8 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  i5 = Math_imul((i1 | 0) < 0 ? 0 - i1 | 0 : i1, HEAP32[i9 >> 2] | 0) | 0;
  HEAP8[i9 + 18 >> 0] = 2;
  i4 = HEAP32[i10 >> 2] | 0;
  HEAP32[i9 >> 2] = i4;
  i3 = i10 + 4 | 0;
  HEAP32[i9 + 4 >> 2] = HEAP32[i3 >> 2];
  i3 = HEAP32[i3 >> 2] | 0;
  if ((i2 | 0) > 0) {
   i12 = (i3 | 0) % (i2 | 0) | 0;
   i2 = (i12 | 0) == 0 ? 0 : i2 - i12 | 0;
  } else i2 = 0;
  i3 = i2 + i3 | 0;
  if ((i3 | 0) > 0) if (i4 >>> 0 > (4294967295 / (i3 >>> 0) | 0) >>> 0) {
   i13 = 6;
   STACKTOP = i14;
   return i13 | 0;
  }
  i2 = Math_imul(i4, i3) | 0;
  do if (i2 >>> 0 > i5 >>> 0) {
   i1 = i9 + 12 | 0;
   i12 = _ft_mem_qrealloc(i6, 1, i5, i2, HEAP32[i1 >> 2] | 0, i13) | 0;
   HEAP32[i1 >> 2] = i12;
   i1 = HEAP32[i13 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i7 >> 2] | 0;
    break;
   } else {
    i13 = i1;
    STACKTOP = i14;
    return i13 | 0;
   }
  } while (0);
  HEAP32[i7 >> 2] = (i1 | 0) < 0 ? 0 - i3 | 0 : i3;
 } else HEAP32[i13 >> 2] = 6;
 i1 = HEAP32[i10 + 12 >> 2] | 0;
 i3 = HEAP32[i9 + 12 >> 2] | 0;
 i12 = i10 + 8 | 0;
 i5 = HEAP32[i12 >> 2] | 0;
 if ((i5 | 0) < 0) i1 = i1 + (Math_imul((HEAP32[i10 >> 2] | 0) + -1 | 0, 0 - i5 | 0) | 0) | 0;
 i11 = i9 + 8 | 0;
 i2 = HEAP32[i11 >> 2] | 0;
 if ((i2 | 0) < 0) i3 = i3 + (Math_imul((HEAP32[i9 >> 2] | 0) + -1 | 0, 0 - i2 | 0) | 0) | 0;
 switch (HEAP8[i8 >> 0] | 0) {
 case 1:
  {
   HEAP16[i9 + 16 >> 1] = 2;
   i2 = HEAP32[i10 >> 2] | 0;
   if (i2 | 0) {
    i9 = i10 + 4 | 0;
    while (1) {
     i5 = HEAP32[i9 >> 2] | 0;
     i8 = i5 >>> 3;
     if (!i8) {
      i4 = i3;
      i6 = i1;
     } else {
      i4 = i3 + (i8 << 3) | 0;
      i5 = i8;
      i6 = i3;
      i7 = i1;
      while (1) {
       i15 = HEAP8[i7 >> 0] | 0;
       i10 = i15 & 255;
       HEAP8[i6 >> 0] = (i15 & 255) >>> 7;
       HEAP8[i6 + 1 >> 0] = i10 >>> 6 & 1;
       HEAP8[i6 + 2 >> 0] = i10 >>> 5 & 1;
       HEAP8[i6 + 3 >> 0] = i10 >>> 4 & 1;
       HEAP8[i6 + 4 >> 0] = i10 >>> 3 & 1;
       HEAP8[i6 + 5 >> 0] = i10 >>> 2 & 1;
       HEAP8[i6 + 6 >> 0] = i10 >>> 1 & 1;
       HEAP8[i6 + 7 >> 0] = i10 & 1;
       i5 = i5 + -1 | 0;
       if (!i5) break; else {
        i6 = i6 + 8 | 0;
        i7 = i7 + 1 | 0;
       }
      }
      i6 = i1 + i8 | 0;
      i5 = HEAP32[i9 >> 2] | 0;
     }
     i5 = i5 & 7;
     if (i5 | 0) {
      i6 = HEAPU8[i6 >> 0] | 0;
      while (1) {
       HEAP8[i4 >> 0] = i6 >>> 7 & 1;
       i5 = i5 + -1 | 0;
       if (!i5) break; else {
        i6 = i6 << 1;
        i4 = i4 + 1 | 0;
       }
      }
     }
     i2 = i2 + -1 | 0;
     if (!i2) break; else {
      i1 = i1 + (HEAP32[i12 >> 2] | 0) | 0;
      i3 = i3 + (HEAP32[i11 >> 2] | 0) | 0;
     }
    }
   }
   break;
  }
 case 6:
 case 5:
 case 2:
  {
   i4 = HEAP32[i10 + 4 >> 2] | 0;
   HEAP16[i9 + 16 >> 1] = 256;
   i2 = HEAP32[i10 >> 2] | 0;
   if (i2 | 0) while (1) {
    _memcpy(i3 | 0, i1 | 0, i4 | 0) | 0;
    i2 = i2 + -1 | 0;
    if (!i2) break; else {
     i3 = i3 + (HEAP32[i11 >> 2] | 0) | 0;
     i1 = i1 + (HEAP32[i12 >> 2] | 0) | 0;
    }
   }
   break;
  }
 case 3:
  {
   HEAP16[i9 + 16 >> 1] = 4;
   i2 = HEAP32[i10 >> 2] | 0;
   if (i2 | 0) {
    i9 = i10 + 4 | 0;
    while (1) {
     i5 = HEAP32[i9 >> 2] | 0;
     i8 = i5 >>> 2;
     if (!i8) {
      i4 = i3;
      i6 = i1;
     } else {
      i7 = i8 << 2;
      i4 = i8;
      i5 = i3;
      i6 = i1;
      while (1) {
       i10 = HEAP8[i6 >> 0] | 0;
       i15 = i10 & 255;
       HEAP8[i5 >> 0] = (i10 & 255) >>> 6;
       HEAP8[i5 + 1 >> 0] = i15 >>> 4 & 3;
       HEAP8[i5 + 2 >> 0] = i15 >>> 2 & 3;
       HEAP8[i5 + 3 >> 0] = i15 & 3;
       i4 = i4 + -1 | 0;
       if (!i4) break; else {
        i5 = i5 + 4 | 0;
        i6 = i6 + 1 | 0;
       }
      }
      i4 = i3 + i7 | 0;
      i6 = i1 + i8 | 0;
      i5 = HEAP32[i9 >> 2] | 0;
     }
     i5 = i5 & 3;
     if (i5 | 0) {
      i6 = HEAPU8[i6 >> 0] | 0;
      while (1) {
       HEAP8[i4 >> 0] = i6 >>> 6 & 3;
       i5 = i5 + -1 | 0;
       if (!i5) break; else {
        i6 = i6 << 2;
        i4 = i4 + 1 | 0;
       }
      }
     }
     i2 = i2 + -1 | 0;
     if (!i2) break; else {
      i3 = i3 + (HEAP32[i11 >> 2] | 0) | 0;
      i1 = i1 + (HEAP32[i12 >> 2] | 0) | 0;
     }
    }
   }
   break;
  }
 case 4:
  {
   HEAP16[i9 + 16 >> 1] = 16;
   i2 = HEAP32[i10 >> 2] | 0;
   if (i2 | 0) {
    i9 = i10 + 4 | 0;
    while (1) {
     i4 = HEAP32[i9 >> 2] | 0;
     i8 = i4 >>> 1;
     if (!i8) {
      i6 = i3;
      i5 = i1;
     } else {
      i7 = i8 << 1;
      i4 = i8;
      i5 = i3;
      i6 = i1;
      while (1) {
       i15 = HEAP8[i6 >> 0] | 0;
       HEAP8[i5 >> 0] = (i15 & 255) >>> 4;
       HEAP8[i5 + 1 >> 0] = i15 & 15;
       i4 = i4 + -1 | 0;
       if (!i4) break; else {
        i5 = i5 + 2 | 0;
        i6 = i6 + 1 | 0;
       }
      }
      i6 = i3 + i7 | 0;
      i5 = i1 + i8 | 0;
      i4 = HEAP32[i9 >> 2] | 0;
     }
     if (i4 & 1 | 0) HEAP8[i6 >> 0] = (HEAPU8[i5 >> 0] | 0) >>> 4;
     i2 = i2 + -1 | 0;
     if (!i2) break; else {
      i3 = i3 + (HEAP32[i11 >> 2] | 0) | 0;
      i1 = i1 + (HEAP32[i12 >> 2] | 0) | 0;
     }
    }
   }
   break;
  }
 case 7:
  {
   HEAP16[i9 + 16 >> 1] = 256;
   i4 = HEAP32[i10 >> 2] | 0;
   if (i4 | 0) {
    i9 = i10 + 4 | 0;
    while (1) {
     i6 = HEAP32[i9 >> 2] | 0;
     if (i6) {
      i7 = i3;
      i8 = i1;
      i5 = i6;
      while (1) {
       i15 = HEAP8[i8 + 3 >> 0] | 0;
       i2 = i15 & 255;
       if (!(i15 << 24 >> 24)) i2 = 0; else {
        i10 = HEAPU8[i8 >> 0] | 0;
        i10 = Math_imul(i10 * 4732 | 0, i10) | 0;
        i15 = HEAPU8[i8 + 1 >> 0] | 0;
        i10 = (Math_imul(i15 * 46871 | 0, i15) | 0) + i10 | 0;
        i15 = HEAPU8[i8 + 2 >> 0] | 0;
        i2 = i2 - (((i10 + (Math_imul(i15 * 13933 | 0, i15) | 0) | 0) >>> 16 >>> 0) / (i2 >>> 0) | 0) & 255;
       }
       HEAP8[i7 >> 0] = i2;
       i5 = i5 + -1 | 0;
       if (!i5) break; else {
        i7 = i7 + 1 | 0;
        i8 = i8 + 4 | 0;
       }
      }
      i5 = HEAP32[i12 >> 2] | 0;
      i2 = HEAP32[i11 >> 2] | 0;
     }
     i4 = i4 + -1 | 0;
     if (!i4) break; else {
      i3 = i3 + i2 | 0;
      i1 = i1 + i5 | 0;
     }
    }
   }
   break;
  }
 default:
  {}
 }
 i15 = HEAP32[i13 >> 2] | 0;
 STACKTOP = i14;
 return i15 | 0;
}

function _af_latin_hints_compute_segments(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i21 = i25 + 12 | 0;
 i17 = i25 + 16 | 0;
 i18 = i25;
 i22 = HEAP32[i5 >> 2] | 0;
 i7 = HEAP32[i5 + 40 >> 2] | 0;
 i4 = HEAP32[i5 + 36 >> 2] | 0;
 i23 = i7 + (i4 << 2) | 0;
 i8 = i17;
 i9 = i8 + 31 | 0;
 do {
  HEAP8[i8 >> 0] = 0;
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) < (i9 | 0));
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i19 = HEAP32[i5 + 44 + (i6 * 1468 | 0) + 24 >> 2] | 0;
 i19 = (i19 | 0) < 0 ? 0 - i19 | 0 : i19;
 i20 = i5 + 44 + (i6 * 1468 | 0) | 0;
 HEAP32[i20 >> 2] = 0;
 i1 = HEAP32[i5 + 28 >> 2] | 0;
 i2 = HEAP32[i5 + 24 >> 2] | 0;
 i3 = i1 + (i2 * 40 | 0) | 0;
 i2 = (i2 | 0) > 0;
 if (!i6) {
  if (i2) do {
   HEAP32[i1 + 24 >> 2] = HEAP16[i1 + 12 >> 1];
   HEAP32[i1 + 28 >> 2] = HEAP16[i1 + 14 >> 1];
   i1 = i1 + 40 | 0;
  } while (i1 >>> 0 < i3 >>> 0);
 } else if (i2) do {
  HEAP32[i1 + 24 >> 2] = HEAP16[i1 + 14 >> 1];
  HEAP32[i1 + 28 >> 2] = HEAP16[i1 + 12 >> 1];
  i1 = i1 + 40 | 0;
 } while (i1 >>> 0 < i3 >>> 0);
 if ((i4 | 0) <= 0) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 i15 = i5 + 44 + (i6 * 1468 | 0) + 8 | 0;
 i16 = i5 + 44 + (i6 * 1468 | 0) + 28 | 0;
 i14 = i5 + 44 + (i6 * 1468 | 0) + 4 | 0;
 i6 = i19;
 i1 = 0;
 L12 : while (1) {
  i4 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i4 + 36 >> 2] | 0;
  L14 : do if ((i4 | 0) == (i2 | 0)) i2 = i6; else {
   i3 = HEAP8[i2 + 3 >> 0] | 0;
   i13 = i3 << 24 >> 24;
   L16 : do if (((i3 << 24 >> 24 < 0 ? 0 - i13 | 0 : i13) | 0) == (i19 | 0)) {
    i12 = HEAP8[i4 + 3 >> 0] | 0;
    i13 = i12 << 24 >> 24;
    if (((i12 << 24 >> 24 < 0 ? 0 - i13 | 0 : i13) | 0) == (i19 | 0)) {
     i13 = i3 << 24 >> 24;
     if (((i3 << 24 >> 24 < 0 ? 0 - i13 | 0 : i13) | 0) == (i19 | 0)) do {
      if ((i2 | 0) == (i4 | 0)) break L16;
      i2 = HEAP32[i2 + 36 >> 2] | 0;
      i12 = HEAP8[i2 + 3 >> 0] | 0;
      i13 = i12 << 24 >> 24;
     } while (((i12 << 24 >> 24 < 0 ? 0 - i13 | 0 : i13) | 0) == (i19 | 0));
     i4 = HEAP32[i2 + 32 >> 2] | 0;
    }
   } while (0);
   i9 = 0;
   i3 = -32e3;
   i5 = 32e3;
   i8 = 0;
   i2 = i6;
   i13 = i4;
   while (1) {
    if (!i8) i8 = 0; else {
     i12 = HEAP32[i13 + 24 >> 2] | 0;
     i5 = (i12 | 0) < (i5 | 0) ? i12 : i5;
     i3 = (i12 | 0) > (i3 | 0) ? i12 : i3;
     if ((i13 | 0) == (i4 | 0) ? 1 : (HEAP8[i13 + 3 >> 0] | 0) != (i2 | 0)) {
      HEAP32[i1 + 44 >> 2] = i13;
      HEAP16[i1 + 2 >> 1] = (i5 + i3 | 0) >>> 1;
      i3 = HEAP32[i1 + 40 >> 2] | 0;
      if ((HEAP16[i13 >> 1] | HEAP16[i3 >> 1]) & 3) HEAP8[i1 >> 0] = HEAP8[i1 >> 0] | 1;
      i8 = HEAP32[i13 + 28 >> 2] | 0;
      i3 = HEAP32[i3 + 28 >> 2] | 0;
      i5 = (i3 | 0) < (i8 | 0) ? i3 : i8;
      i3 = (i3 | 0) > (i8 | 0) ? i3 : i8;
      HEAP16[i1 + 4 >> 1] = i5;
      HEAP16[i1 + 6 >> 1] = i3;
      HEAP16[i1 + 8 >> 1] = i3 - i5;
      i8 = 0;
      i1 = 0;
     }
    }
    if ((i13 | 0) == (i4 | 0)) if (!(i9 << 24 >> 24)) i12 = 1; else break L14; else i12 = i9;
    if (!i8) {
     i10 = HEAP8[i13 + 3 >> 0] | 0;
     i11 = i10 << 24 >> 24;
     if (((i10 << 24 >> 24 < 0 ? 0 - i11 | 0 : i11) | 0) == (i19 | 0)) {
      HEAP32[i21 >> 2] = 0;
      i1 = HEAP32[i20 >> 2] | 0;
      if ((i1 | 0) < 18) if (!(HEAP32[i15 >> 2] | 0)) {
       HEAP32[i15 >> 2] = i16;
       HEAP32[i14 >> 2] = 18;
       i5 = i1;
      } else i5 = i1; else {
       i2 = HEAP32[i14 >> 2] | 0;
       if ((i1 | 0) < (i2 | 0)) i5 = i1; else {
        if ((i2 | 0) > 44739241) {
         i24 = 30;
         break L12;
        }
        i1 = i2 >> 2;
        i3 = i2 + 4 + i1 | 0;
        i3 = (i1 | 0) < -4 | (i3 | 0) > 44739242 ? 44739242 : i3;
        i1 = HEAP32[i15 >> 2] | 0;
        if ((i1 | 0) == (i16 | 0)) {
         i2 = _ft_mem_realloc(i22, 48, 0, i3, 0, i21) | 0;
         HEAP32[i15 >> 2] = i2;
         i1 = HEAP32[i21 >> 2] | 0;
         if (i1 | 0) break L12;
         _memcpy(i2 | 0, i16 | 0, 864) | 0;
        } else {
         i1 = _ft_mem_realloc(i22, 48, i2, i3, i1, i21) | 0;
         HEAP32[i15 >> 2] = i1;
         i1 = HEAP32[i21 >> 2] | 0;
         if (i1 | 0) break L12;
        }
        HEAP32[i14 >> 2] = i3;
        i5 = HEAP32[i20 >> 2] | 0;
       }
      }
      i3 = HEAP32[i15 >> 2] | 0;
      HEAP32[i20 >> 2] = i5 + 1;
      i1 = i3 + (i5 * 48 | 0) | 0;
      HEAP8[i1 >> 0] = 0;
      i2 = i3 + (i5 * 48 | 0) + 1 | 0;
      i8 = i2;
      i6 = i17;
      i9 = i8 + 31 | 0;
      do {
       HEAP8[i8 >> 0] = HEAP8[i6 >> 0] | 0;
       i8 = i8 + 1 | 0;
       i6 = i6 + 1 | 0;
      } while ((i8 | 0) < (i9 | 0));
      HEAP32[i3 + (i5 * 48 | 0) + 32 >> 2] = 32e3;
      i8 = i3 + (i5 * 48 | 0) + 36 | 0;
      HEAP32[i8 >> 2] = HEAP32[i18 >> 2];
      HEAP32[i8 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
      HEAP32[i8 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
      HEAP8[i2 >> 0] = i10;
      i10 = HEAP32[i13 + 24 >> 2] | 0;
      HEAP32[i3 + (i5 * 48 | 0) + 40 >> 2] = i13;
      HEAP32[i3 + (i5 * 48 | 0) + 44 >> 2] = i13;
      i2 = i11;
      i8 = 1;
      i3 = i10;
      i5 = i10;
     } else i8 = 0;
    }
    i9 = i12;
    i13 = HEAP32[i13 + 32 >> 2] | 0;
   }
  } while (0);
  i7 = i7 + 4 | 0;
  if (i7 >>> 0 >= i23 >>> 0) {
   i24 = 39;
   break;
  } else i6 = i2;
 }
 if ((i24 | 0) == 30) {
  HEAP32[i21 >> 2] = 64;
  i1 = 64;
 } else if ((i24 | 0) == 39) {
  i24 = HEAP32[i20 >> 2] | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i6 = i1 + (i24 * 48 | 0) | 0;
  if ((i24 | 0) <= 0) {
   i24 = 0;
   STACKTOP = i25;
   return i24 | 0;
  }
  do {
   i4 = HEAP32[i1 + 40 >> 2] | 0;
   i2 = HEAP32[i1 + 44 >> 2] | 0;
   i3 = HEAP32[i4 + 28 >> 2] | 0;
   i5 = HEAP32[i2 + 28 >> 2] | 0;
   i4 = HEAP32[(HEAP32[i4 + 36 >> 2] | 0) + 28 >> 2] | 0;
   if ((i3 | 0) < (i5 | 0)) {
    if ((i4 | 0) < (i3 | 0)) {
     i24 = i1 + 8 | 0;
     HEAP16[i24 >> 1] = (HEAPU16[i24 >> 1] | 0) + ((i3 - i4 | 0) >>> 1);
    }
    i2 = HEAP32[(HEAP32[i2 + 32 >> 2] | 0) + 28 >> 2] | 0;
    if ((i2 | 0) > (i5 | 0)) {
     i24 = i1 + 8 | 0;
     HEAP16[i24 >> 1] = (HEAPU16[i24 >> 1] | 0) + ((i2 - i5 | 0) >>> 1);
    }
   } else {
    if ((i4 | 0) > (i3 | 0)) {
     i24 = i1 + 8 | 0;
     HEAP16[i24 >> 1] = (HEAPU16[i24 >> 1] | 0) + ((i4 - i3 | 0) >>> 1);
    }
    i2 = HEAP32[(HEAP32[i2 + 32 >> 2] | 0) + 28 >> 2] | 0;
    if ((i5 | 0) > (i2 | 0)) {
     i24 = i1 + 8 | 0;
     HEAP16[i24 >> 1] = (HEAPU16[i24 >> 1] | 0) + ((i5 - i2 | 0) >>> 1);
    }
   }
   i1 = i1 + 48 | 0;
  } while (i1 >>> 0 < i6 >>> 0);
  i1 = 0;
  STACKTOP = i25;
  return i1 | 0;
 }
 i24 = i1;
 STACKTOP = i25;
 return i24 | 0;
}

function _dispose_chunk(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i1 + i3 | 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 do if (!(i2 & 1)) {
  i4 = HEAP32[i1 >> 2] | 0;
  if (!(i2 & 3)) return;
  i6 = i1 + (0 - i4) | 0;
  i7 = i4 + i3 | 0;
  if ((i6 | 0) == (HEAP32[91952] | 0)) {
   i1 = i9 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 & 3 | 0) != 3) {
    i8 = i6;
    i2 = i7;
    break;
   }
   HEAP32[91949] = i7;
   HEAP32[i1 >> 2] = i2 & -2;
   HEAP32[i6 + 4 >> 2] = i7 | 1;
   HEAP32[i6 + i7 >> 2] = i7;
   return;
  }
  i3 = i4 >>> 3;
  if (i4 >>> 0 < 256) {
   i1 = HEAP32[i6 + 8 >> 2] | 0;
   i2 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i2 | 0) == (i1 | 0)) {
    HEAP32[91947] = HEAP32[91947] & ~(1 << i3);
    i8 = i6;
    i2 = i7;
    break;
   } else {
    HEAP32[i1 + 12 >> 2] = i2;
    HEAP32[i2 + 8 >> 2] = i1;
    i8 = i6;
    i2 = i7;
    break;
   }
  }
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i6 | 0)) {
   i3 = i6 + 16 | 0;
   i2 = i3 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i1 = 0;
     break;
    } else i2 = i3;
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4 | 0) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   HEAP32[i2 >> 2] = 0;
  } else {
   i8 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i8 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i8;
  } while (0);
  if (!i5) {
   i8 = i6;
   i2 = i7;
  } else {
   i2 = HEAP32[i6 + 28 >> 2] | 0;
   i3 = 368092 + (i2 << 2) | 0;
   if ((i6 | 0) == (HEAP32[i3 >> 2] | 0)) {
    HEAP32[i3 >> 2] = i1;
    if (!i1) {
     HEAP32[91948] = HEAP32[91948] & ~(1 << i2);
     i8 = i6;
     i2 = i7;
     break;
    }
   } else {
    HEAP32[i5 + 16 + (((HEAP32[i5 + 16 >> 2] | 0) != (i6 | 0) & 1) << 2) >> 2] = i1;
    if (!i1) {
     i8 = i6;
     i2 = i7;
     break;
    }
   }
   HEAP32[i1 + 24 >> 2] = i5;
   i2 = i6 + 16 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 | 0) {
    HEAP32[i1 + 16 >> 2] = i3;
    HEAP32[i3 + 24 >> 2] = i1;
   }
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i2) {
    i8 = i6;
    i2 = i7;
   } else {
    HEAP32[i1 + 20 >> 2] = i2;
    HEAP32[i2 + 24 >> 2] = i1;
    i8 = i6;
    i2 = i7;
   }
  }
 } else {
  i8 = i1;
  i2 = i3;
 } while (0);
 i1 = i9 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 if (!(i4 & 2)) {
  i1 = HEAP32[91952] | 0;
  if ((i9 | 0) == (HEAP32[91953] | 0)) {
   i9 = (HEAP32[91950] | 0) + i2 | 0;
   HEAP32[91950] = i9;
   HEAP32[91953] = i8;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   if ((i8 | 0) != (i1 | 0)) return;
   HEAP32[91952] = 0;
   HEAP32[91949] = 0;
   return;
  }
  if ((i9 | 0) == (i1 | 0)) {
   i9 = (HEAP32[91949] | 0) + i2 | 0;
   HEAP32[91949] = i9;
   HEAP32[91952] = i8;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   HEAP32[i8 + i9 >> 2] = i9;
   return;
  }
  i6 = (i4 & -8) + i2 | 0;
  i3 = i4 >>> 3;
  do if (i4 >>> 0 < 256) {
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) {
    HEAP32[91947] = HEAP32[91947] & ~(1 << i3);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i2;
    break;
   }
  } else {
   i5 = HEAP32[i9 + 24 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   do if ((i1 | 0) == (i9 | 0)) {
    i3 = i9 + 16 | 0;
    i2 = i3 + 4 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i3 = 0;
      break;
     } else i2 = i3;
    }
    while (1) {
     i3 = i1 + 20 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4 | 0) {
      i1 = i4;
      i2 = i3;
      continue;
     }
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) break; else {
      i1 = i4;
      i2 = i3;
     }
    }
    HEAP32[i2 >> 2] = 0;
    i3 = i1;
   } else {
    i3 = HEAP32[i9 + 8 >> 2] | 0;
    HEAP32[i3 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i3;
    i3 = i1;
   } while (0);
   if (i5 | 0) {
    i1 = HEAP32[i9 + 28 >> 2] | 0;
    i2 = 368092 + (i1 << 2) | 0;
    if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
     HEAP32[i2 >> 2] = i3;
     if (!i3) {
      HEAP32[91948] = HEAP32[91948] & ~(1 << i1);
      break;
     }
    } else {
     HEAP32[i5 + 16 + (((HEAP32[i5 + 16 >> 2] | 0) != (i9 | 0) & 1) << 2) >> 2] = i3;
     if (!i3) break;
    }
    HEAP32[i3 + 24 >> 2] = i5;
    i1 = i9 + 16 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2 | 0) {
     HEAP32[i3 + 16 >> 2] = i2;
     HEAP32[i2 + 24 >> 2] = i3;
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
   }
  } while (0);
  HEAP32[i8 + 4 >> 2] = i6 | 1;
  HEAP32[i8 + i6 >> 2] = i6;
  if ((i8 | 0) == (HEAP32[91952] | 0)) {
   HEAP32[91949] = i6;
   return;
  } else i2 = i6;
 } else {
  HEAP32[i1 >> 2] = i4 & -2;
  HEAP32[i8 + 4 >> 2] = i2 | 1;
  HEAP32[i8 + i2 >> 2] = i2;
 }
 i1 = i2 >>> 3;
 if (i2 >>> 0 < 256) {
  i3 = 367828 + (i1 << 1 << 2) | 0;
  i2 = HEAP32[91947] | 0;
  i1 = 1 << i1;
  if (!(i2 & i1)) {
   HEAP32[91947] = i2 | i1;
   i1 = i3;
   i2 = i3 + 8 | 0;
  } else {
   i2 = i3 + 8 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[i2 >> 2] = i8;
  HEAP32[i1 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i1;
  HEAP32[i8 + 12 >> 2] = i3;
  return;
 }
 i1 = i2 >>> 8;
 if (!i1) i1 = 0; else if (i2 >>> 0 > 16777215) i1 = 31; else {
  i7 = (i1 + 1048320 | 0) >>> 16 & 8;
  i9 = i1 << i7;
  i6 = (i9 + 520192 | 0) >>> 16 & 4;
  i9 = i9 << i6;
  i1 = (i9 + 245760 | 0) >>> 16 & 2;
  i1 = 14 - (i6 | i7 | i1) + (i9 << i1 >>> 15) | 0;
  i1 = i2 >>> (i1 + 7 | 0) & 1 | i1 << 1;
 }
 i5 = 368092 + (i1 << 2) | 0;
 HEAP32[i8 + 28 >> 2] = i1;
 HEAP32[i8 + 20 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 i3 = HEAP32[91948] | 0;
 i4 = 1 << i1;
 if (!(i3 & i4)) {
  HEAP32[91948] = i3 | i4;
  HEAP32[i5 >> 2] = i8;
  HEAP32[i8 + 24 >> 2] = i5;
  HEAP32[i8 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i8;
  return;
 }
 i3 = i2 << ((i1 | 0) == 31 ? 0 : 25 - (i1 >>> 1) | 0);
 i4 = HEAP32[i5 >> 2] | 0;
 while (1) {
  if ((HEAP32[i4 + 4 >> 2] & -8 | 0) == (i2 | 0)) {
   i1 = 69;
   break;
  }
  i5 = i4 + 16 + (i3 >>> 31 << 2) | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  if (!i1) {
   i1 = 68;
   break;
  } else {
   i3 = i3 << 1;
   i4 = i1;
  }
 }
 if ((i1 | 0) == 68) {
  HEAP32[i5 >> 2] = i8;
  HEAP32[i8 + 24 >> 2] = i4;
  HEAP32[i8 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i8;
  return;
 } else if ((i1 | 0) == 69) {
  i7 = i4 + 8 | 0;
  i9 = HEAP32[i7 >> 2] | 0;
  HEAP32[i9 + 12 >> 2] = i8;
  HEAP32[i7 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i9;
  HEAP32[i8 + 12 >> 2] = i4;
  HEAP32[i8 + 24 >> 2] = 0;
  return;
 }
}

function _t42_parse_sfnts(i2, i26) {
 i2 = i2 | 0;
 i26 = i26 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i25 = i28 + 4 | 0;
 i22 = i28;
 i27 = HEAP32[i26 + 16 >> 2] | 0;
 i23 = HEAP32[i26 + 8 >> 2] | 0;
 i24 = i26 + 28 | 0;
 FUNCTION_TABLE_vi[HEAP32[i24 >> 2] & 127](i26);
 i1 = HEAP32[i26 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i23 >>> 0) {
  HEAP32[i26 >> 2] = i1 + 1;
  if ((HEAP8[i1 >> 0] | 0) == 91) {
   FUNCTION_TABLE_vi[HEAP32[i24 >> 2] & 127](i26);
   i3 = HEAP32[i26 >> 2] | 0;
   L4 : do if (i3 >>> 0 < i23 >>> 0) {
    i17 = i26 + 36 | 0;
    i18 = i26 + 32 | 0;
    i19 = i26 + 12 | 0;
    i20 = i23;
    i21 = i2 + 492 | 0;
    i15 = i2 + 496 | 0;
    i16 = i26 + 44 | 0;
    i6 = 0;
    i9 = 0;
    i2 = 0;
    i1 = 0;
    i8 = 0;
    i7 = 0;
    i10 = 0;
    i5 = i3;
    L6 : while (1) {
     i3 = HEAP8[i5 >> 0] | 0;
     switch (i3 << 24 >> 24) {
     case 93:
      {
       i14 = 7;
       break L6;
      }
     case 60:
      {
       FUNCTION_TABLE_vi[HEAP32[i18 >> 2] & 127](i26);
       if (HEAP32[i19 >> 2] | 0) break L1;
       i14 = (HEAP32[i26 >> 2] | 0) - i5 | 0;
       i4 = (i14 + -1 | 0) / 2 | 0;
       if (i14 >>> 0 <= 2) {
        i14 = 10;
        break L6;
       }
       i1 = _ft_mem_realloc(i27, 1, i8, i4, i1, i25) | 0;
       i3 = HEAP32[i25 >> 2] | 0;
       if (i3 | 0) {
        i14 = 46;
        break L1;
       }
       HEAP32[i26 >> 2] = i5;
       FUNCTION_TABLE_iiiiii[HEAP32[i16 >> 2] & 127](i26, i1, i4, i22, 1) | 0;
       i2 = 1;
       i3 = HEAP32[i22 >> 2] | 0;
       i14 = 22;
       break;
      }
     default:
      if (((i3 & 255) + -48 | 0) >>> 0 < 10) {
       if (i2 << 24 >> 24) {
        i14 = 15;
        break L6;
       }
       i3 = FUNCTION_TABLE_ii[HEAP32[i17 >> 2] & 63](i26) | 0;
       if ((i3 | 0) < 0) {
        i14 = 17;
        break L6;
       }
       FUNCTION_TABLE_vi[HEAP32[i18 >> 2] & 127](i26);
       if (HEAP32[i19 >> 2] | 0) {
        i14 = 49;
        break L6;
       }
       i2 = HEAP32[i26 >> 2] | 0;
       i1 = i2 + 1 | 0;
       if ((i20 - i2 | 0) >>> 0 < i3 >>> 0) {
        i14 = 20;
        break L6;
       }
       HEAP32[i26 >> 2] = i2 + (i3 + 1);
       i2 = 0;
      } else {
       i4 = i8;
       i3 = i7;
       i14 = 22;
      }
     }
     if ((i14 | 0) == 22) {
      i14 = 0;
      if (!i1) {
       i14 = 23;
       break;
      } else i8 = i4;
     }
     i4 = i3 + -1 | 0;
     if (!(i3 & 1)) i13 = i3; else i13 = (HEAP8[i1 + i4 >> 0] | 0) == 0 ? i4 : i3;
     if (!i13) {
      i14 = 27;
      break;
     } else {
      i12 = 0;
      i11 = i6;
      i4 = i9;
      i3 = i10;
     }
     while (1) {
      switch (i4 | 0) {
      case 0:
       {
        i4 = HEAP32[i21 >> 2] | 0;
        if ((i11 | 0) < 12) {
         i5 = 0;
         i14 = 42;
        } else {
         i5 = (HEAPU8[i4 + 4 >> 0] << 4) + (HEAPU8[i4 + 5 >> 0] | 0) | 0;
         i3 = i5 << 4 | 12;
         HEAP32[i15 >> 2] = i3;
         if ((i20 - (HEAP32[i26 >> 2] | 0) | 0) < (i3 | 0)) {
          i14 = 32;
          break L6;
         }
         i4 = _ft_mem_realloc(i27, 1, 12, i3, i4, i25) | 0;
         HEAP32[i21 >> 2] = i4;
         i3 = HEAP32[i25 >> 2] | 0;
         if (!i3) i14 = 34; else {
          i14 = 46;
          break L1;
         }
        }
        break;
       }
      case 1:
       {
        i5 = i3;
        i4 = HEAP32[i21 >> 2] | 0;
        i14 = 34;
        break;
       }
      case 2:
       {
        i14 = 39;
        break;
       }
      default:
       i6 = i11;
      }
      if ((i14 | 0) == 34) {
       i3 = HEAP32[i15 >> 2] | 0;
       if ((i11 | 0) < (i3 | 0)) {
        i3 = i5;
        i5 = 1;
        i14 = 42;
       } else {
        if ((i5 | 0) > 0) {
         i7 = i4 + 12 | 0;
         i6 = 0;
         do {
          i14 = i7 + (i6 << 4) + 12 | 0;
          i3 = ((HEAPU8[i14 + 1 >> 0] << 16 | HEAPU8[i14 >> 0] << 24 | HEAPU8[i14 + 2 >> 0] << 8 | HEAPU8[i14 + 3 >> 0]) + 3 & -4) + i3 | 0;
          HEAP32[i15 >> 2] = i3;
          i6 = i6 + 1 | 0;
         } while ((i6 | 0) != (i5 | 0));
        }
        i3 = _ft_mem_realloc(i27, 1, i5 << 4 | 12, i3 + 1 | 0, i4, i25) | 0;
        HEAP32[i21 >> 2] = i3;
        i3 = HEAP32[i25 >> 2] | 0;
        if (!i3) {
         i3 = i5;
         i14 = 39;
        } else {
         i14 = 46;
         break L1;
        }
       }
      }
      if ((i14 | 0) == 39) {
       if ((i11 | 0) >= (HEAP32[i15 >> 2] | 0)) {
        i14 = 40;
        break L6;
       }
       i5 = 2;
       i4 = HEAP32[i21 >> 2] | 0;
       i14 = 42;
      }
      if ((i14 | 0) == 42) {
       i14 = 0;
       HEAP8[i4 + i11 >> 0] = HEAP8[i1 + i12 >> 0] | 0;
       i6 = i11 + 1 | 0;
       i4 = i5;
      }
      i12 = i12 + 1 | 0;
      if (i12 >>> 0 >= i13 >>> 0) break; else i11 = i6;
     }
     FUNCTION_TABLE_vi[HEAP32[i24 >> 2] & 127](i26);
     i5 = HEAP32[i26 >> 2] | 0;
     if (i5 >>> 0 < i23 >>> 0) {
      i9 = i4;
      i7 = i13;
      i10 = i3;
     } else break L4;
    }
    switch (i14 | 0) {
    case 7:
     {
      HEAP32[i26 >> 2] = i5 + 1;
      break L1;
     }
    case 10:
     {
      HEAP32[i25 >> 2] = 3;
      i3 = 3;
      i14 = 46;
      break L1;
     }
    case 15:
     {
      HEAP32[i25 >> 2] = 3;
      i3 = 3;
      i14 = 46;
      break L1;
     }
    case 17:
     {
      HEAP32[i25 >> 2] = 3;
      i2 = 0;
      i3 = 3;
      i14 = 46;
      break L1;
     }
    case 20:
     {
      HEAP32[i25 >> 2] = 3;
      i2 = 0;
      i3 = 3;
      i14 = 46;
      break L1;
     }
    case 23:
     {
      HEAP32[i25 >> 2] = 3;
      i1 = 0;
      i3 = 3;
      i14 = 46;
      break L1;
     }
    case 27:
     {
      HEAP32[i25 >> 2] = 3;
      i3 = 3;
      i14 = 46;
      break L1;
     }
    case 32:
     {
      HEAP32[i25 >> 2] = 3;
      i3 = 3;
      i14 = 46;
      break L1;
     }
    case 40:
     {
      HEAP32[i25 >> 2] = 3;
      i3 = 3;
      i14 = 46;
      break L1;
     }
    case 49:
     {
      STACKTOP = i28;
      return;
     }
    }
   } else {
    i2 = 0;
    i1 = 0;
   } while (0);
   HEAP32[i25 >> 2] = 3;
   i3 = 3;
   i14 = 46;
  } else i14 = 3;
 } else i14 = 3; while (0);
 if ((i14 | 0) == 3) {
  HEAP32[i25 >> 2] = 3;
  i2 = 0;
  i1 = 0;
  i3 = 3;
  i14 = 46;
 }
 if ((i14 | 0) == 46) HEAP32[i26 + 12 >> 2] = i3;
 if (!(i2 << 24 >> 24)) {
  STACKTOP = i28;
  return;
 }
 _ft_mem_free(i27, i1);
 STACKTOP = i28;
 return;
}

function _normal_scanPi(i11, i7, i13, i14) {
 i11 = i11 | 0;
 i7 = i7 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 if ((i7 | 0) == (i13 | 0)) {
  i14 = -1;
  return i14 | 0;
 }
 i12 = i11 + 76 | 0;
 switch (HEAP8[i12 + (HEAPU8[i7 >> 0] | 0) >> 0] | 0) {
 case 29:
  {
   HEAP32[i14 >> 2] = i7;
   i14 = 0;
   return i14 | 0;
  }
 case 24:
 case 22:
  {
   i1 = 1;
   break;
  }
 case 5:
  {
   if ((i13 - i7 | 0) < 2) {
    i14 = -2;
    return i14 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i11 + 344 >> 2] & 255](i11, i7) | 0)) {
    HEAP32[i14 >> 2] = i7;
    i14 = 0;
    return i14 | 0;
   } else i1 = 2;
   break;
  }
 case 6:
  {
   if ((i13 - i7 | 0) < 3) {
    i14 = -2;
    return i14 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i11 + 348 >> 2] & 255](i11, i7) | 0)) {
    HEAP32[i14 >> 2] = i7;
    i14 = 0;
    return i14 | 0;
   } else i1 = 3;
   break;
  }
 case 7:
  {
   if ((i13 - i7 | 0) < 4) {
    i14 = -2;
    return i14 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i11 + 352 >> 2] & 255](i11, i7) | 0)) {
    HEAP32[i14 >> 2] = i7;
    i14 = 0;
    return i14 | 0;
   } else i1 = 4;
   break;
  }
 default:
  {
   HEAP32[i14 >> 2] = i7;
   i14 = 0;
   return i14 | 0;
  }
 }
 i1 = i7 + i1 | 0;
 if ((i1 | 0) == (i13 | 0)) {
  i14 = -1;
  return i14 | 0;
 }
 i9 = i13;
 i3 = i11 + 332 | 0;
 i4 = i11 + 336 | 0;
 i5 = i11 + 340 | 0;
 i8 = i1;
 L31 : while (1) {
  switch (HEAP8[i12 + (HEAPU8[i8 >> 0] | 0) >> 0] | 0) {
  case 29:
   {
    i6 = 17;
    break L31;
   }
  case 10:
  case 9:
  case 21:
   {
    i6 = 28;
    break L31;
   }
  case 15:
   {
    i6 = 57;
    break L31;
   }
  case 27:
  case 26:
  case 25:
  case 24:
  case 22:
   {
    i1 = 1;
    break;
   }
  case 5:
   {
    if ((i9 - i8 | 0) < 2) {
     i10 = -2;
     i6 = 69;
     break L31;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 255](i11, i8) | 0)) {
     i6 = 20;
     break L31;
    } else i1 = 2;
    break;
   }
  case 6:
   {
    if ((i9 - i8 | 0) < 3) {
     i10 = -2;
     i6 = 69;
     break L31;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i11, i8) | 0)) {
     i6 = 23;
     break L31;
    } else i1 = 3;
    break;
   }
  case 7:
   {
    if ((i9 - i8 | 0) < 4) {
     i10 = -2;
     i6 = 69;
     break L31;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i11, i8) | 0)) {
     i6 = 26;
     break L31;
    } else i1 = 4;
    break;
   }
  default:
   {
    i2 = i8;
    break L31;
   }
  }
  i1 = i8 + i1 | 0;
  if ((i1 | 0) == (i13 | 0)) {
   i10 = -1;
   i6 = 69;
   break;
  } else i8 = i1;
 }
 if ((i6 | 0) == 17) {
  HEAP32[i14 >> 2] = i8;
  i14 = 0;
  return i14 | 0;
 } else if ((i6 | 0) == 20) {
  HEAP32[i14 >> 2] = i8;
  i14 = 0;
  return i14 | 0;
 } else if ((i6 | 0) == 23) {
  HEAP32[i14 >> 2] = i8;
  i14 = 0;
  return i14 | 0;
 } else if ((i6 | 0) == 26) {
  HEAP32[i14 >> 2] = i8;
  i14 = 0;
  return i14 | 0;
 } else if ((i6 | 0) == 28) {
  L45 : do if ((i8 - i7 | 0) == 3) {
   switch (HEAP8[i7 >> 0] | 0) {
   case 120:
    {
     i1 = 0;
     break;
    }
   case 88:
    {
     i1 = 1;
     break;
    }
   default:
    {
     i7 = 11;
     break L45;
    }
   }
   switch (HEAP8[i7 + 1 >> 0] | 0) {
   case 109:
    break;
   case 77:
    {
     i1 = 1;
     break;
    }
   default:
    {
     i7 = 11;
     break L45;
    }
   }
   switch (HEAP8[i7 + 2 >> 0] | 0) {
   case 108:
    {
     if (!i1) {
      i7 = 12;
      break L45;
     }
     break;
    }
   case 76:
    break;
   default:
    {
     i7 = 11;
     break L45;
    }
   }
   HEAP32[i14 >> 2] = i8;
   i14 = 0;
   return i14 | 0;
  } else i7 = 11; while (0);
  i1 = i8 + 1 | 0;
  if ((i1 | 0) == (i13 | 0)) {
   i14 = -1;
   return i14 | 0;
  }
  i4 = i11 + 356 | 0;
  i5 = i11 + 360 | 0;
  i6 = i11 + 364 | 0;
  L61 : while (1) {
   switch (HEAP8[i12 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
   case 8:
   case 1:
   case 0:
    {
     i6 = 51;
     break L61;
    }
   case 5:
    {
     if ((i9 - i1 | 0) < 2) {
      i10 = -2;
      i6 = 69;
      break L61;
     }
     if (FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i11, i1) | 0) {
      i6 = 41;
      break L61;
     }
     i3 = i1 + 2 | 0;
     break;
    }
   case 6:
    {
     if ((i9 - i1 | 0) < 3) {
      i10 = -2;
      i6 = 69;
      break L61;
     }
     if (FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i11, i1) | 0) {
      i6 = 45;
      break L61;
     }
     i3 = i1 + 3 | 0;
     break;
    }
   case 7:
    {
     if ((i9 - i1 | 0) < 4) {
      i10 = -2;
      i6 = 69;
      break L61;
     }
     if (FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i11, i1) | 0) {
      i6 = 49;
      break L61;
     }
     i3 = i1 + 4 | 0;
     break;
    }
   case 15:
    {
     i3 = i1 + 1 | 0;
     if ((i3 | 0) == (i13 | 0)) {
      i10 = -1;
      i6 = 69;
      break L61;
     }
     if ((HEAP8[i3 >> 0] | 0) == 62) {
      i6 = 55;
      break L61;
     }
     break;
    }
   default:
    i3 = i1 + 1 | 0;
   }
   if ((i3 | 0) == (i13 | 0)) {
    i10 = -1;
    i6 = 69;
    break;
   } else i1 = i3;
  }
  if ((i6 | 0) == 41) {
   HEAP32[i14 >> 2] = i1;
   i14 = 0;
   return i14 | 0;
  } else if ((i6 | 0) == 45) {
   HEAP32[i14 >> 2] = i1;
   i14 = 0;
   return i14 | 0;
  } else if ((i6 | 0) == 49) {
   HEAP32[i14 >> 2] = i1;
   i14 = 0;
   return i14 | 0;
  } else if ((i6 | 0) == 51) {
   HEAP32[i14 >> 2] = i1;
   i14 = 0;
   return i14 | 0;
  } else if ((i6 | 0) == 55) {
   HEAP32[i14 >> 2] = i1 + 2;
   i14 = i7;
   return i14 | 0;
  } else if ((i6 | 0) == 69) return i10 | 0;
 } else if ((i6 | 0) == 57) {
  L94 : do if ((i8 - i7 | 0) == 3) {
   switch (HEAP8[i7 >> 0] | 0) {
   case 120:
    {
     i1 = 0;
     break;
    }
   case 88:
    {
     i1 = 1;
     break;
    }
   default:
    {
     i1 = 11;
     break L94;
    }
   }
   switch (HEAP8[i7 + 1 >> 0] | 0) {
   case 109:
    break;
   case 77:
    {
     i1 = 1;
     break;
    }
   default:
    {
     i1 = 11;
     break L94;
    }
   }
   switch (HEAP8[i7 + 2 >> 0] | 0) {
   case 108:
    {
     if (!i1) {
      i1 = 12;
      break L94;
     }
     break;
    }
   case 76:
    break;
   default:
    {
     i1 = 11;
     break L94;
    }
   }
   HEAP32[i14 >> 2] = i8;
   i14 = 0;
   return i14 | 0;
  } else i1 = 11; while (0);
  i2 = i8 + 1 | 0;
  if ((i2 | 0) == (i13 | 0)) {
   i14 = -1;
   return i14 | 0;
  }
  if ((HEAP8[i2 >> 0] | 0) == 62) {
   HEAP32[i14 >> 2] = i8 + 2;
   i14 = i1;
   return i14 | 0;
  }
 } else if ((i6 | 0) == 69) return i10 | 0;
 HEAP32[i14 >> 2] = i2;
 i14 = 0;
 return i14 | 0;
}

function _FT_Request_Metrics(i15, i3) {
 i15 = i15 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 i16 = HEAP32[i15 + 88 >> 2] | 0;
 i17 = i16 + 12 | 0;
 if (!(HEAP32[i15 + 8 >> 2] & 1)) {
  HEAP32[i17 >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  HEAP32[i17 + 8 >> 2] = 0;
  HEAP32[i17 + 12 >> 2] = 0;
  HEAP32[i17 + 16 >> 2] = 0;
  HEAP32[i17 + 20 >> 2] = 0;
  HEAP32[i17 + 24 >> 2] = 0;
  HEAP32[i16 + 16 >> 2] = 65536;
  HEAP32[i16 + 20 >> 2] = 65536;
  return;
 }
 i13 = HEAP32[i3 >> 2] | 0;
 L5 : do switch (i13 | 0) {
 case 0:
  {
   i1 = HEAPU16[i15 + 68 >> 1] | 0;
   i2 = i1;
   i14 = 11;
   break;
  }
 case 1:
  {
   i1 = (HEAP16[i15 + 70 >> 1] | 0) - (HEAP16[i15 + 72 >> 1] | 0) | 0;
   i2 = i1;
   i14 = 11;
   break;
  }
 case 2:
  {
   i2 = (HEAP32[i15 + 64 >> 2] | 0) - (HEAP32[i15 + 56 >> 2] | 0) | 0;
   i1 = (HEAP32[i15 + 60 >> 2] | 0) - (HEAP32[i15 + 52 >> 2] | 0) | 0;
   i14 = 11;
   break;
  }
 case 3:
  {
   i2 = (HEAP16[i15 + 70 >> 1] | 0) - (HEAP16[i15 + 72 >> 1] | 0) | 0;
   i1 = HEAP16[i15 + 76 >> 1] | 0;
   i14 = 11;
   break;
  }
 case 4:
  {
   i4 = HEAP32[i3 + 4 >> 2] | 0;
   i2 = i16 + 16 | 0;
   HEAP32[i2 >> 2] = i4;
   i3 = HEAP32[i3 + 8 >> 2] | 0;
   i1 = i16 + 20 | 0;
   HEAP32[i1 >> 2] = i3;
   if (!i4) {
    HEAP32[i2 >> 2] = i3;
    i1 = i3;
    i14 = 38;
    break L5;
   }
   if (!i3) {
    HEAP32[i1 >> 2] = i4;
    i1 = i4;
    i3 = i4;
    i14 = 38;
   } else {
    i1 = i4;
    i14 = 38;
   }
   break;
  }
 default:
  {
   i2 = 0;
   i1 = 0;
   i14 = 11;
  }
 } while (0);
 L15 : do if ((i14 | 0) == 11) {
  i10 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i11 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
  i7 = HEAP32[i3 + 12 >> 2] | 0;
  i9 = HEAP32[i3 + 4 >> 2] | 0;
  i1 = ((Math_imul(i9, i7) | 0) + 36 | 0) / 72 | 0;
  i1 = (i7 | 0) == 0 ? i9 : i1;
  i7 = HEAP32[i3 + 16 >> 2] | 0;
  i8 = HEAP32[i3 + 8 >> 2] | 0;
  i12 = ((Math_imul(i8, i7) | 0) + 36 | 0) / 72 | 0;
  i12 = (i7 | 0) == 0 ? i8 : i12;
  do if (!i9) {
   i6 = i12 >> 31;
   i1 = (i12 | 0) < 0 ? 0 - i12 | 0 : i12;
   i6 = (i11 | 0) < 0 ? 0 - (i6 | 1) | 0 : i6;
   do if (!i11) i1 = 2147483647; else {
    if (i1 >>> 0 <= (i11 >>> 17 ^ 65535) >>> 0) {
     i1 = (((i1 << 16) + (i11 >>> 1) | 0) >>> 0) / (i11 >>> 0) | 0;
     break;
    }
    i9 = i1 << 16;
    i3 = i9 + (i11 >>> 1) | 0;
    i1 = (i3 >>> 0 < i9 >>> 0 & 1) + (i1 >>> 16) | 0;
    if (i1 >>> 0 < i11 >>> 0) {
     i4 = Math_clz32(i1 | 0) | 0;
     i5 = 32 - i4 | 0;
     i9 = i3 >>> i5 | i1 << i4;
     i2 = (i9 >>> 0) / (i11 >>> 0) | 0;
     i1 = i2;
     i2 = i9 - (Math_imul(i2, i11) | 0) | 0;
     i4 = i3 << i4;
     while (1) {
      i2 = i2 << 1 | i4 >>> 31;
      i3 = i2 >>> 0 < i11 >>> 0;
      i1 = (i3 ^ 1) & 1 | i1 << 1;
      i5 = i5 + -1 | 0;
      if (!i5) break; else {
       i2 = i2 - (i3 ? 0 : i11) | 0;
       i4 = i4 << 1;
      }
     }
    } else i1 = 2147483647;
   } while (0);
   i4 = (i6 | 0) < 0 ? 0 - i1 | 0 : i1;
   HEAP32[i16 + 20 >> 2] = i4;
   HEAP32[i16 + 16 >> 2] = i4;
   i2 = i12;
   i1 = _FT_MulDiv(i12, i10, i11) | 0;
   i3 = i4;
  } else {
   i7 = i1 >> 31;
   i2 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i7 = (i10 | 0) < 0 ? 0 - (i7 | 1) | 0 : i7;
   do if (!i10) i2 = 2147483647; else {
    if (i2 >>> 0 <= (i10 >>> 17 ^ 65535) >>> 0) {
     i2 = (((i2 << 16) + (i10 >>> 1) | 0) >>> 0) / (i10 >>> 0) | 0;
     break;
    }
    i9 = i2 << 16;
    i4 = i9 + (i10 >>> 1) | 0;
    i2 = (i4 >>> 0 < i9 >>> 0 & 1) + (i2 >>> 16) | 0;
    if (i2 >>> 0 < i10 >>> 0) {
     i5 = Math_clz32(i2 | 0) | 0;
     i6 = 32 - i5 | 0;
     i9 = i4 >>> i6 | i2 << i5;
     i3 = (i9 >>> 0) / (i10 >>> 0) | 0;
     i2 = i3;
     i3 = i9 - (Math_imul(i3, i10) | 0) | 0;
     i5 = i4 << i5;
     while (1) {
      i3 = i3 << 1 | i5 >>> 31;
      i4 = i3 >>> 0 < i10 >>> 0;
      i2 = (i4 ^ 1) & 1 | i2 << 1;
      i6 = i6 + -1 | 0;
      if (!i6) break; else {
       i3 = i3 - (i4 ? 0 : i10) | 0;
       i5 = i5 << 1;
      }
     }
    } else i2 = 2147483647;
   } while (0);
   i4 = (i7 | 0) < 0 ? 0 - i2 | 0 : i2;
   i9 = i16 + 16 | 0;
   HEAP32[i9 >> 2] = i4;
   if (!i8) {
    HEAP32[i16 + 20 >> 2] = i4;
    i2 = _FT_MulDiv(i1, i11, i10) | 0;
    i3 = i4;
    break;
   }
   i8 = i12 >> 31;
   i2 = (i12 | 0) < 0 ? 0 - i12 | 0 : i12;
   i8 = (i11 | 0) < 0 ? 0 - (i8 | 1) | 0 : i8;
   do if (!i11) i2 = 2147483647; else {
    if (i2 >>> 0 <= (i11 >>> 17 ^ 65535) >>> 0) {
     i2 = (((i2 << 16) + (i11 >>> 1) | 0) >>> 0) / (i11 >>> 0) | 0;
     break;
    }
    i10 = i2 << 16;
    i5 = i10 + (i11 >>> 1) | 0;
    i2 = (i5 >>> 0 < i10 >>> 0 & 1) + (i2 >>> 16) | 0;
    if (i2 >>> 0 < i11 >>> 0) {
     i6 = Math_clz32(i2 | 0) | 0;
     i7 = 32 - i6 | 0;
     i10 = i5 >>> i7 | i2 << i6;
     i3 = (i10 >>> 0) / (i11 >>> 0) | 0;
     i2 = i3;
     i3 = i10 - (Math_imul(i3, i11) | 0) | 0;
     i6 = i5 << i6;
     while (1) {
      i3 = i3 << 1 | i6 >>> 31;
      i5 = i3 >>> 0 < i11 >>> 0;
      i2 = (i5 ^ 1) & 1 | i2 << 1;
      i7 = i7 + -1 | 0;
      if (!i7) break; else {
       i3 = i3 - (i5 ? 0 : i11) | 0;
       i6 = i6 << 1;
      }
     }
    } else i2 = 2147483647;
   } while (0);
   i3 = (i8 | 0) < 0 ? 0 - i2 | 0 : i2;
   i2 = i16 + 20 | 0;
   HEAP32[i2 >> 2] = i3;
   if ((i13 | 0) == 3) if ((i3 | 0) > (i4 | 0)) {
    HEAP32[i2 >> 2] = i4;
    i1 = i4;
    i3 = i4;
    i14 = 38;
    break L15;
   } else {
    HEAP32[i9 >> 2] = i3;
    i1 = i3;
    i14 = 38;
    break L15;
   } else i2 = i12;
  } while (0);
  if (i13) {
   i1 = i4;
   i14 = 38;
  }
 } while (0);
 if ((i14 | 0) == 38) {
  i6 = HEAP16[i15 + 68 >> 1] | 0;
  i2 = i6 & 65535;
  i6 = i6 << 16 >> 16 == 0;
  if (i6 | (i1 | 0) == 65536) i5 = i2; else {
   i4 = (i1 | 0) < 0;
   i1 = i4 ? 0 - i1 | 0 : i1;
   if (((i1 >>> 8) + i2 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else i1 = (((Math_imul(i1 & 65535, i2) | 0) + 32768 | 0) >>> 16) + (Math_imul(i1 >>> 16, i2) | 0) | 0;
   i5 = i4 ? 0 - i1 | 0 : i1;
  }
  if (i6 | (i3 | 0) == 65536) i1 = i5; else {
   i4 = (i3 | 0) < 0;
   i1 = i4 ? 0 - i3 | 0 : i3;
   if (((i1 >>> 8) + i2 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else i1 = (((Math_imul(i1 & 65535, i2) | 0) + 32768 | 0) >>> 16) + (Math_imul(i1 >>> 16, i2) | 0) | 0;
   i2 = i4 ? 0 - i1 | 0 : i1;
   i1 = i5;
  }
 }
 HEAP16[i17 >> 1] = (i1 + 32 | 0) >>> 6;
 HEAP16[i16 + 14 >> 1] = (i2 + 32 | 0) >>> 6;
 _ft_recompute_scaled_metrics(i15, i17);
 return;
}

function _cff_parse_font_bbox(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = HEAP32[i8 + 412 >> 2] | 0;
 i9 = i8 + 32 | 0;
 if ((HEAP32[i8 + 404 >> 2] | 0) >>> 0 < i9 >>> 0) {
  i10 = 161;
  return i10 | 0;
 }
 i6 = i8 + 20 | 0;
 i2 = HEAP32[i8 + 16 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP8[i2 >> 0] | 0;
 do if (i5 << 24 >> 24 == 30) i1 = _cff_parse_real(i2, i1, 0, 0) | 0; else {
  i3 = i2 + 1 | 0;
  i4 = i5 & 255;
  L7 : do switch (i5 << 24 >> 24) {
  case 28:
   {
    if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     i2 = 16;
    } else {
     i1 = ((HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
     i2 = 16;
    }
    break;
   }
  case 29:
   {
    if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     i2 = 16;
    } else {
     i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
     i2 = 17;
    }
    break;
   }
  default:
   {
    if ((i5 & 255) < 247) {
     i1 = i4 + -139 | 0;
     i2 = 16;
     break L7;
    }
    i1 = (i2 + 2 | 0) >>> 0 > i1 >>> 0;
    if ((i5 & 255) < 251) {
     if (i1) {
      i1 = 0;
      i2 = 16;
      break L7;
     }
     i1 = (HEAPU8[i3 >> 0] | 0 | (i4 << 8) + -63232) + 108 | 0;
     i2 = 17;
     break L7;
    } else {
     if (i1) {
      i1 = 0;
      i2 = 16;
      break L7;
     }
     i1 = (251 - i4 << 8) + -108 - (HEAPU8[i3 >> 0] | 0) | 0;
     i2 = 17;
     break L7;
    }
   }
  } while (0);
  if ((i2 | 0) == 16) i1 = (i1 | 0) < -32767 ? -2147483647 : i1 << 16; else if ((i2 | 0) == 17) if ((i1 | 0) > 32767) {
   i1 = 2147483647;
   break;
  } else i1 = (i1 | 0) < -32767 ? -2147483647 : i1 << 16;
 } while (0);
 i7 = _FT_RoundFix(i1) | 0;
 HEAP32[i10 + 84 >> 2] = i7;
 i7 = i8 + 24 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 do if (i3 << 24 >> 24 == 30) i1 = _cff_parse_real(i2, i1, 0, 0) | 0; else {
  i4 = i2 + 1 | 0;
  i5 = i3 & 255;
  L29 : do switch (i3 << 24 >> 24) {
  case 28:
   {
    if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     i2 = 33;
    } else {
     i1 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
     i2 = 33;
    }
    break;
   }
  case 29:
   {
    if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     i2 = 33;
    } else {
     i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
     i2 = 34;
    }
    break;
   }
  default:
   {
    if ((i3 & 255) < 247) {
     i1 = i5 + -139 | 0;
     i2 = 33;
     break L29;
    }
    i1 = (i2 + 2 | 0) >>> 0 > i1 >>> 0;
    if ((i3 & 255) < 251) {
     if (i1) {
      i1 = 0;
      i2 = 33;
      break L29;
     }
     i1 = (HEAPU8[i4 >> 0] | 0 | (i5 << 8) + -63232) + 108 | 0;
     i2 = 34;
     break L29;
    } else {
     if (i1) {
      i1 = 0;
      i2 = 33;
      break L29;
     }
     i1 = (251 - i5 << 8) + -108 - (HEAPU8[i4 >> 0] | 0) | 0;
     i2 = 34;
     break L29;
    }
   }
  } while (0);
  if ((i2 | 0) == 33) i1 = (i1 | 0) < -32767 ? -2147483647 : i1 << 16; else if ((i2 | 0) == 34) if ((i1 | 0) > 32767) {
   i1 = 2147483647;
   break;
  } else i1 = (i1 | 0) < -32767 ? -2147483647 : i1 << 16;
 } while (0);
 i6 = _FT_RoundFix(i1) | 0;
 HEAP32[i10 + 88 >> 2] = i6;
 i6 = i8 + 28 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 do if (i3 << 24 >> 24 == 30) i1 = _cff_parse_real(i2, i1, 0, 0) | 0; else {
  i4 = i2 + 1 | 0;
  i5 = i3 & 255;
  L51 : do switch (i3 << 24 >> 24) {
  case 28:
   {
    if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     i2 = 50;
    } else {
     i1 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
     i2 = 50;
    }
    break;
   }
  case 29:
   {
    if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     i2 = 50;
    } else {
     i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
     i2 = 51;
    }
    break;
   }
  default:
   {
    if ((i3 & 255) < 247) {
     i1 = i5 + -139 | 0;
     i2 = 50;
     break L51;
    }
    i1 = (i2 + 2 | 0) >>> 0 > i1 >>> 0;
    if ((i3 & 255) < 251) {
     if (i1) {
      i1 = 0;
      i2 = 50;
      break L51;
     }
     i1 = (HEAPU8[i4 >> 0] | 0 | (i5 << 8) + -63232) + 108 | 0;
     i2 = 51;
     break L51;
    } else {
     if (i1) {
      i1 = 0;
      i2 = 50;
      break L51;
     }
     i1 = (251 - i5 << 8) + -108 - (HEAPU8[i4 >> 0] | 0) | 0;
     i2 = 51;
     break L51;
    }
   }
  } while (0);
  if ((i2 | 0) == 50) i1 = (i1 | 0) < -32767 ? -2147483647 : i1 << 16; else if ((i2 | 0) == 51) if ((i1 | 0) > 32767) {
   i1 = 2147483647;
   break;
  } else i1 = (i1 | 0) < -32767 ? -2147483647 : i1 << 16;
 } while (0);
 i2 = _FT_RoundFix(i1) | 0;
 HEAP32[i10 + 92 >> 2] = i2;
 i2 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 do if (i3 << 24 >> 24 == 30) i1 = _cff_parse_real(i2, i1, 0, 0) | 0; else {
  i4 = i2 + 1 | 0;
  i5 = i3 & 255;
  L73 : do switch (i3 << 24 >> 24) {
  case 28:
   {
    if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     i2 = 67;
    } else {
     i1 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
     i2 = 67;
    }
    break;
   }
  case 29:
   {
    if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     i2 = 67;
    } else {
     i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
     i2 = 68;
    }
    break;
   }
  default:
   {
    if ((i3 & 255) < 247) {
     i1 = i5 + -139 | 0;
     i2 = 67;
     break L73;
    }
    i1 = (i2 + 2 | 0) >>> 0 > i1 >>> 0;
    if ((i3 & 255) < 251) {
     if (i1) {
      i1 = 0;
      i2 = 67;
      break L73;
     }
     i1 = (HEAPU8[i4 >> 0] | 0 | (i5 << 8) + -63232) + 108 | 0;
     i2 = 68;
     break L73;
    } else {
     if (i1) {
      i1 = 0;
      i2 = 67;
      break L73;
     }
     i1 = (251 - i5 << 8) + -108 - (HEAPU8[i4 >> 0] | 0) | 0;
     i2 = 68;
     break L73;
    }
   }
  } while (0);
  if ((i2 | 0) == 67) i1 = (i1 | 0) < -32767 ? -2147483647 : i1 << 16; else if ((i2 | 0) == 68) if ((i1 | 0) > 32767) {
   i1 = 2147483647;
   break;
  } else i1 = (i1 | 0) < -32767 ? -2147483647 : i1 << 16;
 } while (0);
 i9 = _FT_RoundFix(i1) | 0;
 HEAP32[i10 + 96 >> 2] = i9;
 i10 = 0;
 return i10 | 0;
}

function _ft_gzip_file_io(i23, i5, i20, i19) {
 i23 = i23 | 0;
 i5 = i5 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i21 = 0, i22 = 0, i24 = 0;
 i24 = i23 + 8264 | 0;
 i2 = HEAP32[i24 >> 2] | 0;
 if (i2 >>> 0 > i5 >>> 0) {
  if (_FT_Stream_Seek(HEAP32[i23 >> 2] | 0, HEAP32[i23 + 68 >> 2] | 0) | 0) {
   i24 = 0;
   return i24 | 0;
  }
  i2 = HEAP32[i23 + 40 >> 2] | 0;
  if (i2 | 0) {
   HEAP32[i23 + 32 >> 2] = 0;
   HEAP32[i23 + 20 >> 2] = 0;
   HEAP32[i23 + 36 >> 2] = 0;
   HEAP32[i2 >> 2] = HEAP32[i2 + 12 >> 2] | 0 ? 7 : 0;
   i4 = HEAP32[i2 + 20 >> 2] | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   if ((i2 & -2 | 0) == 4) {
    FUNCTION_TABLE_vii[HEAP32[i23 + 48 >> 2] & 63](HEAP32[i23 + 52 >> 2] | 0, HEAP32[i4 + 12 >> 2] | 0);
    i2 = HEAP32[i4 >> 2] | 0;
   }
   if ((i2 | 0) == 6) FUNCTION_TABLE_vii[HEAP32[i23 + 48 >> 2] & 63](HEAP32[i23 + 52 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0);
   HEAP32[i4 >> 2] = 0;
   HEAP32[i4 + 28 >> 2] = 0;
   HEAP32[i4 + 32 >> 2] = 0;
   i2 = HEAP32[i4 + 40 >> 2] | 0;
   HEAP32[i4 + 52 >> 2] = i2;
   HEAP32[i4 + 48 >> 2] = i2;
   i2 = HEAP32[i4 + 56 >> 2] | 0;
   if (i2 | 0) {
    i17 = FUNCTION_TABLE_iiii[i2 & 127](0, 0, 0) | 0;
    HEAP32[i4 + 60 >> 2] = i17;
    HEAP32[i23 + 60 >> 2] = i17;
   }
  }
  HEAP32[i23 + 16 >> 2] = 0;
  HEAP32[i23 + 12 >> 2] = i23 + 72;
  HEAP32[i23 + 28 >> 2] = 0;
  HEAP32[i23 + 24 >> 2] = i23 + 4168;
  i2 = i23 + 8264 | 0;
  HEAP32[i23 + 8272 >> 2] = i2;
  HEAP32[i23 + 8268 >> 2] = i2;
  HEAP32[i24 >> 2] = 0;
  i2 = 0;
 }
 do if (i2 >>> 0 < i5 >>> 0) {
  i13 = i5 - i2 | 0;
  i17 = i23 + 8272 | 0;
  i4 = HEAP32[i17 >> 2] | 0;
  i15 = i23 + 8268 | 0;
  i5 = HEAP32[i15 >> 2] | 0;
  i14 = i4 - i5 | 0;
  i14 = i14 >>> 0 < i13 >>> 0 ? i14 : i13;
  i5 = i5 + i14 | 0;
  HEAP32[i15 >> 2] = i5;
  HEAP32[i24 >> 2] = i14 + i2;
  i2 = i13 - i14 | 0;
  L19 : do if (!i2) {
   i3 = i5;
   i1 = i4;
  } else {
   i8 = i23 + 12 | 0;
   i9 = i23 + 4168 | 0;
   i10 = i23 + 24 | 0;
   i11 = i23 + 28 | 0;
   i12 = i23 + 16 | 0;
   i13 = i23 + 72 | 0;
   i14 = i23 + 12 | 0;
   i7 = i2;
   L21 : while (1) {
    HEAP32[i15 >> 2] = i9;
    HEAP32[i10 >> 2] = i9;
    HEAP32[i11 >> 2] = 4096;
    L23 : while (1) {
     if (!(HEAP32[i12 >> 2] | 0)) {
      i6 = HEAP32[i23 >> 2] | 0;
      i4 = HEAP32[i6 + 20 >> 2] | 0;
      if (!i4) {
       i2 = i6 + 8 | 0;
       i5 = HEAP32[i2 >> 2] | 0;
       i4 = (HEAP32[i6 + 4 >> 2] | 0) - i5 | 0;
       i4 = i4 >>> 0 < 4096 ? i4 : 4096;
       if (!i4) {
        i2 = 0;
        i4 = 43;
        break L21;
       }
       _memcpy(i13 | 0, (HEAP32[i6 >> 2] | 0) + i5 | 0, i4 | 0) | 0;
      } else {
       i2 = i6 + 8 | 0;
       i4 = FUNCTION_TABLE_iiiii[i4 & 127](i6, HEAP32[i2 >> 2] | 0, i13, 4096) | 0;
       if (!i4) {
        i2 = 0;
        i4 = 43;
        break L21;
       }
      }
      HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i4;
      HEAP32[i14 >> 2] = i13;
      HEAP32[i12 >> 2] = i4;
     }
     switch (_inflate(i8, 0) | 0) {
     case 1:
      {
       i4 = 23;
       break L23;
      }
     case 0:
      break;
     default:
      {
       i2 = 0;
       i4 = 43;
       break L21;
      }
     }
     if (!(HEAP32[i11 >> 2] | 0)) {
      i4 = 24;
      break;
     }
    }
    if ((i4 | 0) == 23) {
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i17 >> 2] = i4;
     i2 = HEAP32[i15 >> 2] | 0;
     if ((i4 | 0) == (i2 | 0)) {
      i2 = 0;
      i4 = 43;
      break;
     } else {
      i18 = i2;
      i16 = i4;
     }
    } else if ((i4 | 0) == 24) {
     i18 = HEAP32[i15 >> 2] | 0;
     i16 = HEAP32[i17 >> 2] | 0;
    }
    i6 = i16 - i18 | 0;
    i6 = i6 >>> 0 < i7 >>> 0 ? i6 : i7;
    i2 = i18 + i6 | 0;
    HEAP32[i15 >> 2] = i2;
    HEAP32[i24 >> 2] = i6 + (HEAP32[i24 >> 2] | 0);
    i7 = i7 - i6 | 0;
    if (!i7) {
     i3 = i2;
     i1 = i16;
     break L19;
    }
   }
   if ((i4 | 0) == 43) return i2 | 0;
  } while (0);
  if (!i19) {
   i24 = 0;
   return i24 | 0;
  } else {
   i18 = i17;
   i16 = i15;
   i15 = i17;
  }
 } else if (!i19) {
  i24 = 0;
  return i24 | 0;
 } else {
  i1 = i23 + 8272 | 0;
  i3 = i23 + 8268 | 0;
  i18 = i1;
  i16 = i3;
  i15 = i1;
  i3 = HEAP32[i3 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
  break;
 } while (0);
 i2 = i1 - i3 | 0;
 i2 = i2 >>> 0 < i19 >>> 0 ? i2 : i19;
 _memcpy(i20 | 0, i3 | 0, i2 | 0) | 0;
 HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + i2;
 HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + i2;
 i1 = i19 - i2 | 0;
 if (!i1) {
  i24 = i2;
  return i24 | 0;
 }
 i8 = i23 + 12 | 0;
 i9 = i23 + 4168 | 0;
 i10 = i23 + 24 | 0;
 i11 = i23 + 28 | 0;
 i12 = i23 + 16 | 0;
 i13 = i23 + 72 | 0;
 i14 = i23 + 12 | 0;
 i7 = i20 + i2 | 0;
 L53 : while (1) {
  HEAP32[i16 >> 2] = i9;
  HEAP32[i10 >> 2] = i9;
  HEAP32[i11 >> 2] = 4096;
  L55 : while (1) {
   if (!(HEAP32[i12 >> 2] | 0)) {
    i6 = HEAP32[i23 >> 2] | 0;
    i4 = HEAP32[i6 + 20 >> 2] | 0;
    if (!i4) {
     i3 = i6 + 8 | 0;
     i5 = HEAP32[i3 >> 2] | 0;
     i4 = (HEAP32[i6 + 4 >> 2] | 0) - i5 | 0;
     i4 = i4 >>> 0 < 4096 ? i4 : 4096;
     if (!i4) {
      i4 = 43;
      break L53;
     }
     _memcpy(i13 | 0, (HEAP32[i6 >> 2] | 0) + i5 | 0, i4 | 0) | 0;
    } else {
     i3 = i6 + 8 | 0;
     i4 = FUNCTION_TABLE_iiiii[i4 & 127](i6, HEAP32[i3 >> 2] | 0, i13, 4096) | 0;
     if (!i4) {
      i4 = 43;
      break L53;
     }
    }
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i4;
    HEAP32[i14 >> 2] = i13;
    HEAP32[i12 >> 2] = i4;
   }
   switch (_inflate(i8, 0) | 0) {
   case 1:
    {
     i4 = 40;
     break L55;
    }
   case 0:
    break;
   default:
    {
     i4 = 43;
     break L53;
    }
   }
   if (!(HEAP32[i11 >> 2] | 0)) {
    i4 = 41;
    break;
   }
  }
  if ((i4 | 0) == 40) {
   i4 = HEAP32[i10 >> 2] | 0;
   HEAP32[i15 >> 2] = i4;
   i3 = HEAP32[i16 >> 2] | 0;
   if ((i4 | 0) == (i3 | 0)) {
    i4 = 43;
    break;
   } else {
    i22 = i3;
    i21 = i4;
   }
  } else if ((i4 | 0) == 41) {
   i22 = HEAP32[i16 >> 2] | 0;
   i21 = HEAP32[i18 >> 2] | 0;
  }
  i3 = i21 - i22 | 0;
  i3 = i3 >>> 0 < i1 >>> 0 ? i3 : i1;
  _memcpy(i7 | 0, i22 | 0, i3 | 0) | 0;
  i2 = i3 + i2 | 0;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + i3;
  HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + i3;
  i1 = i1 - i3 | 0;
  if (!i1) {
   i4 = 43;
   break;
  } else i7 = i7 + i3 | 0;
 }
 if ((i4 | 0) == 43) return i2 | 0;
 return 0;
}

function _FT_Outline_Decompose(i12, i13, i20) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i37 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i31 = i37 + 16 | 0;
 i32 = i37 + 8 | 0;
 i33 = i37;
 i34 = i37 + 32 | 0;
 i35 = i37 + 24 | 0;
 if (!i12) {
  i36 = 20;
  STACKTOP = i37;
  return i36 | 0;
 }
 if (!i13) {
  i36 = 6;
  STACKTOP = i37;
  return i36 | 0;
 }
 i14 = HEAP32[i13 + 16 >> 2] | 0;
 i15 = HEAP32[i13 + 20 >> 2] | 0;
 if ((HEAP16[i12 >> 1] | 0) <= 0) {
  i36 = 0;
  STACKTOP = i37;
  return i36 | 0;
 }
 i16 = i12 + 12 | 0;
 i17 = i12 + 4 | 0;
 i18 = i32 + 4 | 0;
 i19 = i12 + 8 | 0;
 i21 = i13 + 4 | 0;
 i22 = i33 + 4 | 0;
 i23 = i34 + 4 | 0;
 i24 = i35 + 4 | 0;
 i25 = i13 + 12 | 0;
 i26 = i33 + 4 | 0;
 i27 = i31 + 4 | 0;
 i28 = i33 + 4 | 0;
 i29 = i13 + 8 | 0;
 i30 = i34 + 4 | 0;
 i3 = 0;
 i11 = 0;
 L10 : while (1) {
  i9 = HEAP16[(HEAP32[i16 >> 2] | 0) + (i11 << 1) >> 1] | 0;
  i10 = i9 << 16 >> 16;
  if (i9 << 16 >> 16 < 0) {
   i1 = 20;
   i36 = 35;
   break;
  }
  i7 = HEAP32[i17 >> 2] | 0;
  i1 = i7 + (i10 << 3) | 0;
  i2 = i7 + (i3 << 3) | 0;
  i6 = i2;
  i5 = HEAP32[i6 + 4 >> 2] | 0;
  HEAP32[i32 >> 2] = (HEAP32[i6 >> 2] << i14) - i15;
  i5 = (i5 << i14) - i15 | 0;
  HEAP32[i18 >> 2] = i5;
  i6 = (HEAP32[i7 + (i10 << 3) >> 2] << i14) - i15 | 0;
  i7 = (HEAP32[i7 + (i10 << 3) + 4 >> 2] << i14) - i15 | 0;
  i4 = i32;
  i8 = HEAP32[i4 >> 2] | 0;
  i4 = HEAP32[i4 + 4 >> 2] | 0;
  i9 = i31;
  HEAP32[i9 >> 2] = i8;
  HEAP32[i9 + 4 >> 2] = i4;
  i9 = HEAP32[i19 >> 2] | 0;
  i4 = i9 + i3 | 0;
  switch (HEAP8[i4 >> 0] & 3) {
  case 2:
   {
    i1 = 20;
    i36 = 35;
    break L10;
   }
  case 0:
   {
    if ((HEAP8[i9 + i10 >> 0] & 3) == 1) {
     HEAP32[i32 >> 2] = i6;
     HEAP32[i18 >> 2] = i7;
     i1 = i1 + -8 | 0;
    } else {
     HEAP32[i32 >> 2] = (i8 + i6 | 0) / 2 | 0;
     HEAP32[i18 >> 2] = (i5 + i7 | 0) / 2 | 0;
    }
    i4 = i4 + -1 | 0;
    i2 = i2 + -8 | 0;
    i8 = i1;
    break;
   }
  default:
   i8 = i1;
  }
  i1 = FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 255](i32, i20) | 0;
  if (i1 | 0) {
   i36 = 34;
   break;
  }
  L21 : do if (i2 >>> 0 < i8 >>> 0) {
   i1 = 0;
   i5 = i4;
   L22 : while (1) {
    i4 = i2 + 8 | 0;
    i6 = i5 + 1 | 0;
    L24 : do switch (HEAP8[i6 >> 0] & 3) {
    case 1:
     {
      HEAP32[i33 >> 2] = (HEAP32[i4 >> 2] << i14) - i15;
      HEAP32[i26 >> 2] = (HEAP32[i2 + 12 >> 2] << i14) - i15;
      i1 = FUNCTION_TABLE_iii[HEAP32[i21 >> 2] & 255](i33, i20) | 0;
      if (!i1) {
       i1 = 0;
       i5 = i6;
       i2 = i4;
      } else {
       i36 = 35;
       break L10;
      }
      break;
     }
    case 0:
     {
      HEAP32[i31 >> 2] = (HEAP32[i4 >> 2] << i14) - i15;
      HEAP32[i27 >> 2] = (HEAP32[i2 + 12 >> 2] << i14) - i15;
      i2 = i6;
      while (1) {
       if (i4 >>> 0 >= i8 >>> 0) {
        i36 = 23;
        break L22;
       }
       i7 = i4 + 8 | 0;
       i6 = i2 + 1 | 0;
       i9 = HEAP8[i6 >> 0] | 0;
       i5 = (HEAP32[i7 >> 2] << i14) - i15 | 0;
       HEAP32[i33 >> 2] = i5;
       i2 = (HEAP32[i4 + 12 >> 2] << i14) - i15 | 0;
       HEAP32[i28 >> 2] = i2;
       switch (i9 & 3) {
       case 1:
        {
         i1 = FUNCTION_TABLE_iiii[HEAP32[i29 >> 2] & 127](i31, i33, i20) | 0;
         i2 = (i1 | 0) == 0 ? 11 : 10;
         break;
        }
       case 0:
        {
         HEAP32[i34 >> 2] = (i5 + (HEAP32[i31 >> 2] | 0) | 0) / 2 | 0;
         HEAP32[i30 >> 2] = (i2 + (HEAP32[i27 >> 2] | 0) | 0) / 2 | 0;
         i1 = FUNCTION_TABLE_iiii[HEAP32[i29 >> 2] & 127](i31, i34, i20) | 0;
         if (!i1) {
          i9 = i33;
          i1 = HEAP32[i9 + 4 >> 2] | 0;
          i2 = i31;
          HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
          HEAP32[i2 + 4 >> 2] = i1;
          i2 = 16;
          i1 = 0;
         } else i2 = 10;
         break;
        }
       default:
        i2 = 7;
       }
       switch (i2 & 31) {
       case 11:
        {
         i5 = i6;
         i2 = i7;
         break L24;
        }
       case 16:
        {
         i2 = i6;
         i4 = i7;
         break;
        }
       default:
        break L21;
       }
      }
     }
    default:
     {
      if ((i2 + 16 | 0) >>> 0 > i8 >>> 0) {
       i36 = 28;
       break L10;
      }
      if ((HEAP8[i5 + 2 >> 0] & 3) != 2) {
       i36 = 28;
       break L10;
      }
      i4 = i2 + 24 | 0;
      HEAP32[i33 >> 2] = (HEAP32[i2 + 8 >> 2] << i14) - i15;
      HEAP32[i22 >> 2] = (HEAP32[i2 + 12 >> 2] << i14) - i15;
      HEAP32[i34 >> 2] = (HEAP32[i2 + 16 >> 2] << i14) - i15;
      HEAP32[i23 >> 2] = (HEAP32[i2 + 20 >> 2] << i14) - i15;
      if (i4 >>> 0 > i8 >>> 0) {
       i36 = 27;
       break L22;
      }
      HEAP32[i35 >> 2] = (HEAP32[i4 >> 2] << i14) - i15;
      HEAP32[i24 >> 2] = (HEAP32[i2 + 28 >> 2] << i14) - i15;
      i1 = FUNCTION_TABLE_iiiii[HEAP32[i25 >> 2] & 127](i33, i34, i35, i20) | 0;
      if (!i1) {
       i1 = 0;
       i5 = i5 + 3 | 0;
       i2 = i4;
      } else {
       i2 = 10;
       break L21;
      }
     }
    } while (0);
    if (i2 >>> 0 >= i8 >>> 0) {
     i36 = 30;
     break L21;
    }
   }
   if ((i36 | 0) == 23) {
    i1 = FUNCTION_TABLE_iiii[HEAP32[i29 >> 2] & 127](i31, i32, i20) | 0;
    i36 = 31;
    break;
   } else if ((i36 | 0) == 27) {
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i25 >> 2] & 127](i33, i34, i32, i20) | 0;
    i36 = 31;
    break;
   }
  } else i36 = 30; while (0);
  if ((i36 | 0) == 30) {
   i1 = FUNCTION_TABLE_iii[HEAP32[i21 >> 2] & 255](i32, i20) | 0;
   i36 = 31;
  }
  if ((i36 | 0) == 31) {
   i36 = 0;
   i2 = (i1 | 0) == 0;
   i3 = i2 ? i10 + 1 | 0 : i3;
   i2 = i2 ? 0 : 10;
  }
  switch (i2 | 0) {
  case 7:
   {
    i1 = 20;
    i36 = 35;
    break L10;
   }
  case 0:
   break;
  default:
   {
    i36 = 34;
    break L10;
   }
  }
  i11 = i11 + 1 | 0;
  if ((i11 | 0) >= (HEAP16[i12 >> 1] | 0)) {
   i1 = 0;
   i36 = 34;
   break;
  }
 }
 if ((i36 | 0) == 28) {
  i36 = 20;
  STACKTOP = i37;
  return i36 | 0;
 } else if ((i36 | 0) == 34) {
  i36 = i1;
  STACKTOP = i37;
  return i36 | 0;
 } else if ((i36 | 0) == 35) {
  STACKTOP = i37;
  return i1 | 0;
 }
 return 0;
}

function _big2_scanRef(i5, i7, i10, i11) {
 i5 = i5 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0;
 if ((i7 | 0) == (i10 | 0)) {
  i11 = -1;
  return i11 | 0;
 }
 i4 = HEAP8[i7 >> 0] | 0;
 L4 : do switch (i4 << 24 >> 24) {
 case 0:
  {
   i6 = i5 + 76 | 0;
   i2 = HEAP8[i7 + 1 >> 0] | 0;
   switch (HEAP8[i6 + (i2 & 255) >> 0] | 0) {
   case 29:
    {
     i3 = i2;
     i8 = 8;
     break L4;
    }
   case 24:
   case 22:
    break L4;
   case 7:
    {
     i8 = 14;
     break L4;
    }
   case 5:
    {
     if ((i10 - i7 | 0) < 2) {
      i11 = -2;
      return i11 | 0;
     }
     HEAP32[i11 >> 2] = i7;
     i11 = 0;
     return i11 | 0;
    }
   case 6:
    {
     if ((i10 - i7 | 0) < 3) {
      i11 = -2;
      return i11 | 0;
     }
     HEAP32[i11 >> 2] = i7;
     i11 = 0;
     return i11 | 0;
    }
   case 19:
    {
     i3 = i7 + 2 | 0;
     if ((i3 | 0) == (i10 | 0)) {
      i11 = -1;
      return i11 | 0;
     }
     i1 = (HEAP8[i3 >> 0] | 0) == 0;
     i2 = HEAP8[i7 + 3 >> 0] | 0;
     if (!(i1 & i2 << 24 >> 24 == 120)) {
      if (i1) if ((HEAP8[i6 + (i2 & 255) >> 0] | 0) == 25) {
       i2 = i3;
       L26 : while (1) {
        i1 = i2 + 2 | 0;
        if ((i1 | 0) == (i10 | 0)) {
         i9 = -1;
         i8 = 52;
         break;
        }
        if (HEAP8[i1 >> 0] | 0) {
         i8 = 35;
         break;
        }
        switch (HEAP8[i6 + (HEAPU8[i2 + 3 >> 0] | 0) >> 0] | 0) {
        case 25:
         {
          i2 = i1;
          break;
         }
        case 18:
         {
          i8 = 34;
          break L26;
         }
        default:
         {
          i8 = 35;
          break L26;
         }
        }
       }
       if ((i8 | 0) == 34) {
        HEAP32[i11 >> 2] = i2 + 4;
        i11 = 10;
        return i11 | 0;
       } else if ((i8 | 0) == 35) {
        HEAP32[i11 >> 2] = i1;
        i11 = 0;
        return i11 | 0;
       } else if ((i8 | 0) == 52) return i9 | 0;
      }
      HEAP32[i11 >> 2] = i3;
      i11 = 0;
      return i11 | 0;
     }
     i4 = i7 + 4 | 0;
     if ((i4 | 0) == (i10 | 0)) {
      i11 = -1;
      return i11 | 0;
     }
     if (!(HEAP8[i4 >> 0] | 0)) if ((HEAP8[i6 + (HEAPU8[i7 + 5 >> 0] | 0) >> 0] & -2) << 24 >> 24 == 24) {
      i1 = i7 + 6 | 0;
      if ((i1 | 0) == (i10 | 0)) {
       i11 = -1;
       return i11 | 0;
      } else i3 = i4;
      L47 : while (1) {
       if (HEAP8[i1 >> 0] | 0) {
        i8 = 27;
        break;
       }
       switch (HEAP8[i6 + (HEAPU8[i3 + 3 >> 0] | 0) >> 0] | 0) {
       case 18:
        {
         i8 = 26;
         break L47;
        }
       case 24:
       case 25:
        break;
       default:
        {
         i8 = 27;
         break L47;
        }
       }
       i2 = i1 + 2 | 0;
       if ((i2 | 0) == (i10 | 0)) {
        i9 = -1;
        i8 = 52;
        break;
       } else {
        i3 = i1;
        i1 = i2;
       }
      }
      if ((i8 | 0) == 26) {
       HEAP32[i11 >> 2] = i3 + 4;
       i11 = 10;
       return i11 | 0;
      } else if ((i8 | 0) == 27) {
       HEAP32[i11 >> 2] = i1;
       i11 = 0;
       return i11 | 0;
      } else if ((i8 | 0) == 52) return i9 | 0;
     }
     HEAP32[i11 >> 2] = i4;
     i11 = 0;
     return i11 | 0;
    }
   default:
    {
     i8 = 36;
     break L4;
    }
   }
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i8 = 14;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i8 = 36;
   break;
  }
 case -1:
  {
   i2 = HEAP8[i7 + 1 >> 0] | 0;
   if ((i2 & 255) > 253) i8 = 36; else {
    i3 = i2;
    i8 = 8;
   }
   break;
  }
 default:
  {
   i3 = HEAP8[i7 + 1 >> 0] | 0;
   i8 = 8;
  }
 } while (0);
 if ((i8 | 0) == 8) {
  i6 = i3 & 255;
  if (!(1 << (i6 & 31) & HEAP32[25356 + ((i6 >>> 5 | HEAPU8[344737 + (i4 & 255) >> 0] << 3) << 2) >> 2])) {
   HEAP32[i11 >> 2] = i7;
   i11 = 0;
   return i11 | 0;
  }
 } else if ((i8 | 0) == 14) {
  if ((i10 - i7 | 0) < 4) {
   i11 = -2;
   return i11 | 0;
  }
  HEAP32[i11 >> 2] = i7;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 36) {
  HEAP32[i11 >> 2] = i7;
  i11 = 0;
  return i11 | 0;
 }
 i2 = i7 + 2 | 0;
 if ((i2 | 0) == (i10 | 0)) {
  i11 = -1;
  return i11 | 0;
 }
 i6 = i5 + 76 | 0;
 i5 = i2;
 i4 = i7;
 L75 : while (1) {
  i3 = HEAP8[i5 >> 0] | 0;
  switch (i3 << 24 >> 24) {
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i8 = 48;
    break L75;
   }
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i8 = 51;
    break L75;
   }
  case 0:
   {
    i2 = HEAP8[i4 + 3 >> 0] | 0;
    switch (HEAP8[i6 + (i2 & 255) >> 0] | 0) {
    case 7:
     {
      i8 = 48;
      break L75;
     }
    case 5:
     {
      i8 = 44;
      break L75;
     }
    case 6:
     {
      i8 = 46;
      break L75;
     }
    case 18:
     {
      i8 = 50;
      break L75;
     }
    case 29:
     {
      i1 = i2;
      i8 = 41;
      break;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 22:
     break;
    default:
     {
      i8 = 51;
      break L75;
     }
    }
    break;
   }
  case -1:
   {
    i1 = HEAP8[i4 + 3 >> 0] | 0;
    if ((i1 & 255) > 253) {
     i8 = 51;
     break L75;
    } else i8 = 41;
    break;
   }
  default:
   {
    i1 = HEAP8[i4 + 3 >> 0] | 0;
    i8 = 41;
   }
  }
  if ((i8 | 0) == 41) {
   i8 = 0;
   i7 = i1 & 255;
   if (!(1 << (i7 & 31) & HEAP32[25356 + ((i7 >>> 5 | HEAPU8[344993 + (i3 & 255) >> 0] << 3) << 2) >> 2])) {
    i8 = 43;
    break;
   }
  }
  i2 = i5 + 2 | 0;
  if ((i2 | 0) == (i10 | 0)) {
   i9 = -1;
   i8 = 52;
   break;
  } else {
   i4 = i5;
   i5 = i2;
  }
 }
 if ((i8 | 0) == 43) {
  HEAP32[i11 >> 2] = i5;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 44) {
  if ((i10 - i5 | 0) < 2) {
   i11 = -2;
   return i11 | 0;
  }
  HEAP32[i11 >> 2] = i5;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 46) {
  if ((i10 - i5 | 0) < 3) {
   i11 = -2;
   return i11 | 0;
  }
  HEAP32[i11 >> 2] = i5;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 48) {
  if ((i10 - i5 | 0) < 4) {
   i11 = -2;
   return i11 | 0;
  }
  HEAP32[i11 >> 2] = i5;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 50) {
  HEAP32[i11 >> 2] = i4 + 4;
  i11 = 9;
  return i11 | 0;
 } else if ((i8 | 0) == 51) {
  HEAP32[i11 >> 2] = i5;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 52) return i9 | 0;
 return 0;
}

function _little2_scanRef(i5, i7, i10, i11) {
 i5 = i5 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0;
 if ((i7 | 0) == (i10 | 0)) {
  i11 = -1;
  return i11 | 0;
 }
 i4 = HEAP8[i7 + 1 >> 0] | 0;
 L4 : do switch (i4 << 24 >> 24) {
 case 0:
  {
   i6 = i5 + 76 | 0;
   i2 = HEAP8[i7 >> 0] | 0;
   switch (HEAP8[i6 + (i2 & 255) >> 0] | 0) {
   case 29:
    {
     i3 = i2;
     i8 = 8;
     break L4;
    }
   case 24:
   case 22:
    break L4;
   case 7:
    {
     i8 = 14;
     break L4;
    }
   case 5:
    {
     if ((i10 - i7 | 0) < 2) {
      i11 = -2;
      return i11 | 0;
     }
     HEAP32[i11 >> 2] = i7;
     i11 = 0;
     return i11 | 0;
    }
   case 6:
    {
     if ((i10 - i7 | 0) < 3) {
      i11 = -2;
      return i11 | 0;
     }
     HEAP32[i11 >> 2] = i7;
     i11 = 0;
     return i11 | 0;
    }
   case 19:
    {
     i3 = i7 + 2 | 0;
     if ((i3 | 0) == (i10 | 0)) {
      i11 = -1;
      return i11 | 0;
     }
     i1 = (HEAP8[i7 + 3 >> 0] | 0) == 0;
     i2 = HEAP8[i3 >> 0] | 0;
     if (!(i1 & i2 << 24 >> 24 == 120)) {
      if (i1) if ((HEAP8[i6 + (i2 & 255) >> 0] | 0) == 25) {
       i2 = i3;
       L26 : while (1) {
        i1 = i2 + 2 | 0;
        if ((i1 | 0) == (i10 | 0)) {
         i9 = -1;
         i8 = 52;
         break;
        }
        if (HEAP8[i2 + 3 >> 0] | 0) {
         i8 = 35;
         break;
        }
        switch (HEAP8[i6 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
        case 25:
         {
          i2 = i1;
          break;
         }
        case 18:
         {
          i8 = 34;
          break L26;
         }
        default:
         {
          i8 = 35;
          break L26;
         }
        }
       }
       if ((i8 | 0) == 34) {
        HEAP32[i11 >> 2] = i2 + 4;
        i11 = 10;
        return i11 | 0;
       } else if ((i8 | 0) == 35) {
        HEAP32[i11 >> 2] = i1;
        i11 = 0;
        return i11 | 0;
       } else if ((i8 | 0) == 52) return i9 | 0;
      }
      HEAP32[i11 >> 2] = i3;
      i11 = 0;
      return i11 | 0;
     }
     i4 = i7 + 4 | 0;
     if ((i4 | 0) == (i10 | 0)) {
      i11 = -1;
      return i11 | 0;
     }
     if (!(HEAP8[i7 + 5 >> 0] | 0)) if ((HEAP8[i6 + (HEAPU8[i4 >> 0] | 0) >> 0] & -2) << 24 >> 24 == 24) {
      i1 = i7 + 6 | 0;
      if ((i1 | 0) == (i10 | 0)) {
       i11 = -1;
       return i11 | 0;
      } else i3 = i4;
      L47 : while (1) {
       if (HEAP8[i3 + 3 >> 0] | 0) {
        i8 = 27;
        break;
       }
       switch (HEAP8[i6 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
       case 18:
        {
         i8 = 26;
         break L47;
        }
       case 24:
       case 25:
        break;
       default:
        {
         i8 = 27;
         break L47;
        }
       }
       i2 = i1 + 2 | 0;
       if ((i2 | 0) == (i10 | 0)) {
        i9 = -1;
        i8 = 52;
        break;
       } else {
        i3 = i1;
        i1 = i2;
       }
      }
      if ((i8 | 0) == 26) {
       HEAP32[i11 >> 2] = i3 + 4;
       i11 = 10;
       return i11 | 0;
      } else if ((i8 | 0) == 27) {
       HEAP32[i11 >> 2] = i1;
       i11 = 0;
       return i11 | 0;
      } else if ((i8 | 0) == 52) return i9 | 0;
     }
     HEAP32[i11 >> 2] = i4;
     i11 = 0;
     return i11 | 0;
    }
   default:
    {
     i8 = 36;
     break L4;
    }
   }
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i8 = 14;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i8 = 36;
   break;
  }
 case -1:
  {
   i2 = HEAP8[i7 >> 0] | 0;
   if ((i2 & 255) > 253) i8 = 36; else {
    i3 = i2;
    i8 = 8;
   }
   break;
  }
 default:
  {
   i3 = HEAP8[i7 >> 0] | 0;
   i8 = 8;
  }
 } while (0);
 if ((i8 | 0) == 8) {
  i6 = i3 & 255;
  if (!(1 << (i6 & 31) & HEAP32[25356 + ((i6 >>> 5 | HEAPU8[344737 + (i4 & 255) >> 0] << 3) << 2) >> 2])) {
   HEAP32[i11 >> 2] = i7;
   i11 = 0;
   return i11 | 0;
  }
 } else if ((i8 | 0) == 14) {
  if ((i10 - i7 | 0) < 4) {
   i11 = -2;
   return i11 | 0;
  }
  HEAP32[i11 >> 2] = i7;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 36) {
  HEAP32[i11 >> 2] = i7;
  i11 = 0;
  return i11 | 0;
 }
 i2 = i7 + 2 | 0;
 if ((i2 | 0) == (i10 | 0)) {
  i11 = -1;
  return i11 | 0;
 }
 i6 = i5 + 76 | 0;
 i5 = i2;
 i4 = i7;
 L75 : while (1) {
  i3 = HEAP8[i4 + 3 >> 0] | 0;
  switch (i3 << 24 >> 24) {
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i8 = 48;
    break L75;
   }
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i8 = 51;
    break L75;
   }
  case 0:
   {
    i2 = HEAP8[i5 >> 0] | 0;
    switch (HEAP8[i6 + (i2 & 255) >> 0] | 0) {
    case 7:
     {
      i8 = 48;
      break L75;
     }
    case 5:
     {
      i8 = 44;
      break L75;
     }
    case 6:
     {
      i8 = 46;
      break L75;
     }
    case 18:
     {
      i8 = 50;
      break L75;
     }
    case 29:
     {
      i1 = i2;
      i8 = 41;
      break;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 22:
     break;
    default:
     {
      i8 = 51;
      break L75;
     }
    }
    break;
   }
  case -1:
   {
    i1 = HEAP8[i5 >> 0] | 0;
    if ((i1 & 255) > 253) {
     i8 = 51;
     break L75;
    } else i8 = 41;
    break;
   }
  default:
   {
    i1 = HEAP8[i5 >> 0] | 0;
    i8 = 41;
   }
  }
  if ((i8 | 0) == 41) {
   i8 = 0;
   i7 = i1 & 255;
   if (!(1 << (i7 & 31) & HEAP32[25356 + ((i7 >>> 5 | HEAPU8[344993 + (i3 & 255) >> 0] << 3) << 2) >> 2])) {
    i8 = 43;
    break;
   }
  }
  i2 = i5 + 2 | 0;
  if ((i2 | 0) == (i10 | 0)) {
   i9 = -1;
   i8 = 52;
   break;
  } else {
   i4 = i5;
   i5 = i2;
  }
 }
 if ((i8 | 0) == 43) {
  HEAP32[i11 >> 2] = i5;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 44) {
  if ((i10 - i5 | 0) < 2) {
   i11 = -2;
   return i11 | 0;
  }
  HEAP32[i11 >> 2] = i5;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 46) {
  if ((i10 - i5 | 0) < 3) {
   i11 = -2;
   return i11 | 0;
  }
  HEAP32[i11 >> 2] = i5;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 48) {
  if ((i10 - i5 | 0) < 4) {
   i11 = -2;
   return i11 | 0;
  }
  HEAP32[i11 >> 2] = i5;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 50) {
  HEAP32[i11 >> 2] = i4 + 4;
  i11 = 9;
  return i11 | 0;
 } else if ((i8 | 0) == 51) {
  HEAP32[i11 >> 2] = i5;
  i11 = 0;
  return i11 | 0;
 } else if ((i8 | 0) == 52) return i9 | 0;
 return 0;
}

function _t42_parse_encoding(i16, i17) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i18;
 i13 = HEAP32[i17 + 8 >> 2] | 0;
 i3 = HEAP32[i16 + 488 >> 2] | 0;
 i14 = i17 + 28 | 0;
 FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
 i5 = HEAP32[i17 >> 2] | 0;
 if (i5 >>> 0 >= i13 >>> 0) {
  HEAP32[i17 + 12 >> 2] = 3;
  STACKTOP = i18;
  return;
 }
 i12 = HEAP8[i5 >> 0] | 0;
 i1 = i12 << 24 >> 24 == 91;
 if (!(i1 | ((i12 & 255) + -48 | 0) >>> 0 < 10)) {
  if ((i5 + 17 | 0) >>> 0 < i13 >>> 0) if (!(_strncmp(i5, 280975, 16) | 0)) {
   HEAP32[i16 + 368 >> 2] = 2;
   STACKTOP = i18;
   return;
  }
  if ((i5 + 15 | 0) >>> 0 < i13 >>> 0) if (!(_strncmp(i5, 280992, 14) | 0)) {
   HEAP32[i16 + 368 >> 2] = 4;
   STACKTOP = i18;
   return;
  }
  if ((i5 + 18 | 0) >>> 0 < i13 >>> 0) if (!(_strncmp(i5, 281007, 17) | 0)) {
   HEAP32[i16 + 368 >> 2] = 3;
   STACKTOP = i18;
   return;
  }
  HEAP32[i17 + 12 >> 2] = 162;
  STACKTOP = i18;
  return;
 }
 i12 = i17 + 92 | 0;
 i2 = HEAP32[i17 + 16 >> 2] | 0;
 if (i1) {
  HEAP32[i17 >> 2] = i5 + 1;
  i6 = 1;
  i11 = 256;
 } else {
  i6 = 0;
  i11 = FUNCTION_TABLE_ii[HEAP32[i17 + 36 >> 2] & 63](i17) | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
 if ((HEAP32[i17 >> 2] | 0) >>> 0 >= i13 >>> 0) {
  STACKTOP = i18;
  return;
 }
 HEAP32[i16 + 372 >> 2] = i11;
 HEAP32[i17 + 88 >> 2] = i11;
 i1 = _ft_mem_realloc(i2, 2, 0, i11, 0, i4) | 0;
 HEAP32[i16 + 384 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) {
  i1 = _ft_mem_realloc(i2, 4, 0, i11, 0, i4) | 0;
  HEAP32[i16 + 388 >> 2] = i1;
  i1 = HEAP32[i4 >> 2] | 0;
  if (!i1) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i3 >> 2] >> 2] & 127](i12, i11, i2) | 0;
   HEAP32[i4 >> 2] = i1;
   if (!i1) {
    if ((i11 | 0) > 0) {
     i2 = i17 + 136 | 0;
     i1 = 0;
     do {
      FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i12, i1, 280783, 8) | 0;
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != (i11 | 0));
    }
    FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
    i3 = HEAP32[i17 >> 2] | 0;
    L40 : do if (i3 >>> 0 < i13 >>> 0) {
     i7 = i17 + 32 | 0;
     i10 = i17 + 12 | 0;
     i8 = i17 + 136 | 0;
     i9 = i17 + 116 | 0;
     i5 = i17 + 36 | 0;
     L42 : do if (!(i6 << 24 >> 24)) {
      i2 = 0;
      while (1) {
       i4 = HEAP8[i3 >> 0] | 0;
       switch (i4 << 24 >> 24) {
       case 93:
        {
         i15 = i3;
         break L42;
        }
       case 100:
        {
         i1 = i3 + 3 | 0;
         if (i1 >>> 0 < i13 >>> 0) if ((HEAP8[i3 + 1 >> 0] | 0) == 101) if ((HEAP8[i3 + 2 >> 0] | 0) == 102) switch (HEAP8[i1 >> 0] | 0) {
         case 0:
         case 12:
         case 10:
         case 13:
         case 9:
         case 32:
          break L40;
         default:
          {}
         }
         break;
        }
       default:
        {}
       }
       if (((i4 & 255) + -48 | 0) >>> 0 > 9) {
        FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i17);
        if (!(HEAP32[i10 >> 2] | 0)) i1 = i3; else {
         i1 = 45;
         break;
        }
       } else {
        i4 = FUNCTION_TABLE_ii[HEAP32[i5 >> 2] & 63](i17) | 0;
        FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
        i1 = HEAP32[i17 >> 2] | 0;
        if ((i1 + 2 | 0) >>> 0 < i13 >>> 0) if ((i2 | 0) < (i11 | 0) & (HEAP8[i1 >> 0] | 0) == 47) {
         i1 = i1 + 1 | 0;
         HEAP32[i17 >> 2] = i1;
         FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i17);
         i3 = HEAP32[i17 >> 2] | 0;
         if (i3 >>> 0 >= i13 >>> 0) {
          i1 = 45;
          break;
         }
         if (HEAP32[i10 >> 2] | 0) {
          i1 = 45;
          break;
         }
         i3 = i3 - i1 | 0;
         i6 = FUNCTION_TABLE_iiiii[HEAP32[i8 >> 2] & 127](i12, i4, i1, i3 + 1 | 0) | 0;
         HEAP32[i10 >> 2] = i6;
         if (i6 | 0) {
          i1 = 45;
          break;
         }
         HEAP8[(HEAP32[(HEAP32[i9 >> 2] | 0) + (i4 << 2) >> 2] | 0) + i3 >> 0] = 0;
         i2 = i2 + 1 | 0;
        }
       }
       FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
       i3 = HEAP32[i17 >> 2] | 0;
       if (i3 >>> 0 >= i13 >>> 0) break L40;
      }
      if ((i1 | 0) == 45) {
       STACKTOP = i18;
       return;
      }
     } else {
      i4 = 0;
      while (1) {
       i2 = HEAP8[i3 >> 0] | 0;
       switch (i2 << 24 >> 24) {
       case 93:
        {
         i15 = i3;
         break L42;
        }
       case 100:
        {
         i1 = i3 + 3 | 0;
         if (i1 >>> 0 < i13 >>> 0) if ((HEAP8[i3 + 1 >> 0] | 0) == 101) if ((HEAP8[i3 + 2 >> 0] | 0) == 102) switch (HEAP8[i1 >> 0] | 0) {
         case 0:
         case 12:
         case 10:
         case 13:
         case 9:
         case 32:
          break L40;
         default:
          {}
         }
         break;
        }
       default:
        {}
       }
       if ((i3 + 2 | 0) >>> 0 >= i13 >>> 0) {
        i1 = 42;
        break;
       }
       if (!((i4 | 0) < (i11 | 0) & i2 << 24 >> 24 == 47)) {
        i1 = 42;
        break;
       }
       i1 = i3 + 1 | 0;
       HEAP32[i17 >> 2] = i1;
       FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i17);
       i2 = HEAP32[i17 >> 2] | 0;
       if (i2 >>> 0 >= i13 >>> 0) {
        i1 = 45;
        break;
       }
       if (HEAP32[i10 >> 2] | 0) {
        i1 = 45;
        break;
       }
       i2 = i2 - i1 | 0;
       i6 = FUNCTION_TABLE_iiiii[HEAP32[i8 >> 2] & 127](i12, i4, i1, i2 + 1 | 0) | 0;
       HEAP32[i10 >> 2] = i6;
       if (i6 | 0) {
        i1 = 45;
        break;
       }
       HEAP8[(HEAP32[(HEAP32[i9 >> 2] | 0) + (i4 << 2) >> 2] | 0) + i2 >> 0] = 0;
       FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 127](i17);
       i3 = HEAP32[i17 >> 2] | 0;
       if (i3 >>> 0 >= i13 >>> 0) break L40; else i4 = i4 + 1 | 0;
      }
      if ((i1 | 0) == 42) {
       HEAP32[i10 >> 2] = 2;
       STACKTOP = i18;
       return;
      } else if ((i1 | 0) == 45) {
       STACKTOP = i18;
       return;
      }
     } while (0);
     i1 = i15 + 1 | 0;
    } else i1 = i5; while (0);
    HEAP32[i16 + 368 >> 2] = 1;
    HEAP32[i17 >> 2] = i1;
    STACKTOP = i18;
    return;
   }
  }
 }
 HEAP32[i17 + 12 >> 2] = i1;
 STACKTOP = i18;
 return;
}

function _TT_Load_Simple_Glyph(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i22;
 i18 = i12 + 200 | 0;
 i5 = HEAP32[i18 >> 2] | 0;
 i19 = HEAP32[i12 + 204 >> 2] | 0;
 i20 = HEAP32[i12 + 12 >> 2] | 0;
 i21 = HEAP16[i12 + 32 >> 1] | 0;
 i3 = i21 << 16 >> 16;
 if (i21 << 16 >> 16) {
  if (((HEAP16[i20 + 20 >> 1] | 0) + i3 + (HEAP16[i20 + 56 >> 1] | 0) | 0) >>> 0 > (HEAP32[i20 + 8 >> 2] | 0) >>> 0) {
   i1 = _FT_GlyphLoader_CheckPoints(i20, 0, i3) | 0;
   if (i1 | 0) {
    i21 = i1;
    STACKTOP = i22;
    return i21 | 0;
   }
  }
  if (i21 << 16 >> 16 > 4094) {
   i21 = 20;
   STACKTOP = i22;
   return i21 | 0;
  }
 }
 i4 = HEAP32[i20 + 68 >> 2] | 0;
 i7 = i4 + (i3 << 1) | 0;
 if ((i5 + ((i3 << 1) + 2) | 0) >>> 0 > i19 >>> 0) {
  i21 = 20;
  STACKTOP = i22;
  return i21 | 0;
 }
 i1 = HEAPU8[i5 >> 0] << 8;
 i3 = i1 | HEAPU8[i5 + 1 >> 0];
 i6 = i21 << 16 >> 16 > 0;
 if (i6) HEAP16[i4 >> 1] = i3;
 if (i1 & 32768) {
  i21 = 20;
  STACKTOP = i22;
  return i21 | 0;
 }
 while (1) {
  i9 = i5 + 2 | 0;
  i1 = i4 + 2 | 0;
  if (i1 >>> 0 >= i7 >>> 0) break;
  i23 = i3;
  i3 = HEAPU8[i9 >> 0] << 8 | HEAPU8[i5 + 3 >> 0];
  HEAP16[i1 >> 1] = i3;
  if ((i3 << 16 | 0) <= (i23 << 16 | 0)) {
   i15 = 20;
   i11 = 51;
   break;
  } else {
   i4 = i1;
   i5 = i9;
  }
 }
 if ((i11 | 0) == 51) {
  STACKTOP = i22;
  return i15 | 0;
 }
 do if (i6) {
  i23 = HEAP16[i4 >> 1] | 0;
  i1 = i23 << 16 >> 16;
  if (i23 << 16 >> 16 < -1) {
   i23 = 20;
   STACKTOP = i22;
   return i23 | 0;
  } else {
   i3 = i1 + 5 | 0;
   if (!i3) {
    i16 = -4;
    break;
   } else {
    i10 = i1 + 1 | 0;
    i8 = i3;
    i11 = 14;
    break;
   }
  }
 } else {
  i10 = 0;
  i8 = 4;
  i11 = 14;
 } while (0);
 if ((i11 | 0) == 14) if (((HEAP16[i20 + 22 >> 1] | 0) + i8 + (HEAP16[i20 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i20 + 4 >> 2] | 0) >>> 0) {
  i1 = _FT_GlyphLoader_CheckPoints(i20, i8, 0) | 0;
  if (!i1) i16 = i10; else {
   i23 = i1;
   STACKTOP = i22;
   return i23 | 0;
  }
 } else i16 = i10;
 i7 = i12 + 8 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 HEAP32[i8 + 140 >> 2] = 0;
 HEAP32[i8 + 136 >> 2] = 0;
 i8 = i5 + 4 | 0;
 if (i8 >>> 0 > i19 >>> 0) {
  i23 = 20;
  STACKTOP = i22;
  return i23 | 0;
 }
 i6 = HEAPU8[i9 >> 0] << 8 | HEAPU8[i5 + 3 >> 0];
 if ((i19 - i8 | 0) < (i6 | 0)) {
  i23 = 22;
  STACKTOP = i22;
  return i23 | 0;
 }
 if (!(HEAP32[i12 + 16 >> 2] & 2)) {
  i4 = i12 + 160 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = HEAP32[i1 + 388 >> 2] | 0;
  i3 = i1 + 392 | 0;
  if (i5 >>> 0 < i6 >>> 0) {
   i1 = _ft_mem_realloc(HEAP32[i1 + 8 >> 2] | 0, 1, i5, i6, HEAP32[i3 >> 2] | 0, i13) | 0;
   HEAP32[i3 >> 2] = i1;
   i3 = HEAP32[i13 >> 2] | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 + 388 >> 2] = ((i3 | 0) == 0 ? i6 : i5) & 65535;
   if (i3) {
    i23 = i3;
    STACKTOP = i22;
    return i23 | 0;
   }
  } else HEAP32[i1 + 388 >> 2] = i5 & 65535;
  i13 = HEAP32[i7 >> 2] | 0;
  HEAP32[i13 + 140 >> 2] = i6;
  i23 = HEAP32[i1 + 392 >> 2] | 0;
  HEAP32[i13 + 136 >> 2] = i23;
  _memcpy(i23 | 0, i8 | 0, i6 | 0) | 0;
 }
 i3 = i8 + i6 | 0;
 i13 = i20 + 64 | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 i7 = i1 + i16 | 0;
 i12 = (i16 | 0) > 0;
 L47 : do if (i12) {
  while (1) {
   i4 = i3 + 1 | 0;
   if (i4 >>> 0 > i19 >>> 0) {
    i15 = 20;
    i11 = 51;
    break;
   }
   i5 = HEAP8[i3 >> 0] | 0;
   i6 = i1 + 1 | 0;
   HEAP8[i1 >> 0] = i5;
   if (!(i5 & 8)) {
    i1 = i6;
    i3 = i4;
   } else {
    i3 = i3 + 2 | 0;
    if (i3 >>> 0 > i19 >>> 0) {
     i15 = 20;
     i11 = 51;
     break;
    }
    i4 = HEAP8[i4 >> 0] | 0;
    if ((i6 + (i4 & 255) | 0) >>> 0 > i7 >>> 0) {
     i15 = 20;
     i11 = 51;
     break;
    }
    if (!(i4 << 24 >> 24)) i1 = i6; else {
     i23 = i4 + -1 & 255;
     _memset(i6 | 0, i5 | 0, i23 + 1 | 0) | 0;
     i1 = i1 + 2 + i23 | 0;
    }
   }
   if (i1 >>> 0 >= i7 >>> 0) {
    i14 = i3;
    break L47;
   }
  }
  if ((i11 | 0) == 51) {
   STACKTOP = i22;
   return i15 | 0;
  }
 } else i14 = i3; while (0);
 i10 = i20 + 60 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i9 = i1 + (i16 << 3) | 0;
 if (i14 >>> 0 > i19 >>> 0) {
  i23 = 20;
  STACKTOP = i22;
  return i23 | 0;
 }
 L65 : do if (i12) {
  i8 = 0;
  i7 = HEAP32[i13 >> 2] | 0;
  i5 = i14;
  while (1) {
   i6 = HEAPU8[i7 >> 0] | 0;
   if (!(i6 & 2)) if (!(i6 & 16)) {
    i3 = i5 + 2 | 0;
    if (i3 >>> 0 > i19 >>> 0) {
     i15 = 20;
     i11 = 51;
     break;
    }
    i4 = (HEAPU8[i5 >> 0] << 8 | HEAPU8[i5 + 1 >> 0]) << 16 >> 16;
    i2 = i3;
   } else {
    i4 = 0;
    i2 = i5;
   } else {
    i3 = i5 + 1 | 0;
    if (i3 >>> 0 > i19 >>> 0) {
     i15 = 20;
     i11 = 51;
     break;
    }
    i4 = HEAPU8[i5 >> 0] | 0;
    i4 = (i6 & 16 | 0) == 0 ? 0 - i4 | 0 : i4;
    i2 = i3;
   }
   i8 = i4 + i8 | 0;
   HEAP32[i1 >> 2] = i8;
   HEAP8[i7 >> 0] = i6 & 237;
   i1 = i1 + 8 | 0;
   if (i1 >>> 0 >= i9 >>> 0) {
    i11 = 41;
    break;
   } else {
    i7 = i7 + 1 | 0;
    i5 = i2;
   }
  }
  if ((i11 | 0) == 41) {
   i1 = HEAP32[i10 >> 2] | 0;
   i8 = i1 + (i16 << 3) | 0;
   if (!i12) {
    i17 = i2;
    break;
   }
   i7 = 0;
   i6 = HEAP32[i13 >> 2] | 0;
   while (1) {
    i5 = HEAPU8[i6 >> 0] | 0;
    if (!(i5 & 4)) if (!(i5 & 32)) {
     i3 = i2 + 2 | 0;
     if (i3 >>> 0 > i19 >>> 0) {
      i15 = 20;
      i11 = 51;
      break;
     }
     i4 = (HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0]) << 16 >> 16;
     i2 = i3;
    } else i4 = 0; else {
     i3 = i2 + 1 | 0;
     if (i3 >>> 0 > i19 >>> 0) {
      i15 = 20;
      i11 = 51;
      break;
     }
     i4 = HEAPU8[i2 >> 0] | 0;
     i4 = (i5 & 32 | 0) == 0 ? 0 - i4 | 0 : i4;
     i2 = i3;
    }
    i7 = i4 + i7 | 0;
    HEAP32[i1 + 4 >> 2] = i7;
    HEAP8[i6 >> 0] = i5 & 1;
    i1 = i1 + 8 | 0;
    if (i1 >>> 0 >= i8 >>> 0) {
     i17 = i2;
     break L65;
    } else i6 = i6 + 1 | 0;
   }
   if ((i11 | 0) == 51) {
    STACKTOP = i22;
    return i15 | 0;
   }
  } else if ((i11 | 0) == 51) {
   STACKTOP = i22;
   return i15 | 0;
  }
 } else i17 = i14; while (0);
 HEAP16[i20 + 58 >> 1] = i16;
 HEAP16[i20 + 56 >> 1] = i21;
 HEAP32[i18 >> 2] = i17;
 i23 = 0;
 STACKTOP = i22;
 return i23 | 0;
}

function _psh_blues_set_zones(i2, i3, i4, i11, i12, i17, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i17 = i17 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = (i1 | 0) == 0;
 i16 = i15 ? i2 + 516 | 0 : i2 + 1548 | 0;
 i15 = i15 ? i2 : i2 + 1032 | 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 if (i3 >>> 0 > 1) {
  i5 = 0;
  i1 = 0;
  i2 = 0;
  while (1) {
   i7 = HEAP16[i4 >> 1] | 0;
   i8 = HEAP16[i4 + 2 >> 1] | 0;
   if (i5) {
    i9 = 1;
    i6 = i2;
    i10 = i8 - i7 | 0;
    i5 = i15;
   } else {
    i9 = 0;
    i6 = i1;
    i10 = i7 - i8 | 0;
    i7 = i8;
    i5 = i16;
   }
   i5 = i5 + 4 | 0;
   L8 : do if (!i6) i14 = 15; else {
    while (1) {
     i8 = HEAP32[i5 >> 2] | 0;
     if ((i7 | 0) < (i8 | 0)) {
      i14 = 14;
      break;
     }
     if ((i7 | 0) == (i8 | 0)) break;
     i6 = i6 + -1 | 0;
     i5 = i5 + 32 | 0;
     if (!i6) {
      i14 = 15;
      break L8;
     }
    }
    if ((i14 | 0) == 14) while (1) {
     i14 = i5 + (i6 << 5) | 0;
     i6 = i6 + -1 | 0;
     i13 = i5 + (i6 << 5) | 0;
     HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
     HEAP32[i14 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i14 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i14 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
     HEAP32[i14 + 16 >> 2] = HEAP32[i13 + 16 >> 2];
     HEAP32[i14 + 20 >> 2] = HEAP32[i13 + 20 >> 2];
     HEAP32[i14 + 24 >> 2] = HEAP32[i13 + 24 >> 2];
     HEAP32[i14 + 28 >> 2] = HEAP32[i13 + 28 >> 2];
     if (!i6) {
      i14 = 15;
      break L8;
     } else i14 = 14;
    }
    i5 = i5 + 4 | 0;
    i6 = HEAP32[i5 >> 2] | 0;
    if ((i10 | 0) < 0) {
     if ((i10 | 0) >= (i6 | 0)) break;
     HEAP32[i5 >> 2] = i10;
     break;
    } else {
     if ((i10 | 0) <= (i6 | 0)) break;
     HEAP32[i5 >> 2] = i10;
     break;
    }
   } while (0);
   do if ((i14 | 0) == 15) {
    i14 = 0;
    HEAP32[i5 >> 2] = i7;
    HEAP32[i5 + 4 >> 2] = i10;
    if (!(i9 << 24 >> 24)) {
     i1 = i1 + 1 | 0;
     break;
    } else {
     i2 = i2 + 1 | 0;
     break;
    }
   } while (0);
   i3 = i3 + -2 | 0;
   if (i3 >>> 0 <= 1) {
    i13 = i2;
    break;
   } else {
    i4 = i4 + 4 | 0;
    i5 = 1;
   }
  }
 } else {
  i1 = 0;
  i13 = 0;
 }
 HEAP32[i15 >> 2] = i13;
 HEAP32[i16 >> 2] = i1;
 if (i11 >>> 0 > 1) {
  i9 = i16 + 4 | 0;
  i8 = i11;
  i7 = i12;
  while (1) {
   i5 = HEAP16[i7 + 2 >> 1] | 0;
   i6 = (HEAP16[i7 >> 1] | 0) - i5 | 0;
   L33 : do if (!i1) {
    i2 = i9;
    i14 = 31;
   } else {
    i2 = i9;
    i3 = i1;
    while (1) {
     i4 = HEAP32[i2 >> 2] | 0;
     if ((i5 | 0) < (i4 | 0)) {
      i14 = 30;
      break;
     }
     if ((i5 | 0) == (i4 | 0)) break;
     i3 = i3 + -1 | 0;
     i2 = i2 + 32 | 0;
     if (!i3) {
      i14 = 31;
      break L33;
     }
    }
    if ((i14 | 0) == 30) while (1) {
     i14 = i2 + (i3 << 5) | 0;
     i3 = i3 + -1 | 0;
     i12 = i2 + (i3 << 5) | 0;
     HEAP32[i14 >> 2] = HEAP32[i12 >> 2];
     HEAP32[i14 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
     HEAP32[i14 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
     HEAP32[i14 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
     HEAP32[i14 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
     HEAP32[i14 + 20 >> 2] = HEAP32[i12 + 20 >> 2];
     HEAP32[i14 + 24 >> 2] = HEAP32[i12 + 24 >> 2];
     HEAP32[i14 + 28 >> 2] = HEAP32[i12 + 28 >> 2];
     if (!i3) {
      i14 = 31;
      break L33;
     } else i14 = 30;
    }
    i2 = i2 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i6 | 0) < 0) {
     if ((i6 | 0) >= (i3 | 0)) break;
     HEAP32[i2 >> 2] = i6;
     break;
    } else {
     if ((i6 | 0) <= (i3 | 0)) break;
     HEAP32[i2 >> 2] = i6;
     break;
    }
   } while (0);
   if ((i14 | 0) == 31) {
    i14 = 0;
    HEAP32[i2 >> 2] = i5;
    HEAP32[i2 + 4 >> 2] = i6;
    i1 = i1 + 1 | 0;
   }
   i8 = i8 + -2 | 0;
   if (i8 >>> 0 <= 1) {
    i10 = i1;
    break;
   } else i7 = i7 + 4 | 0;
  }
 } else i10 = i1;
 HEAP32[i15 >> 2] = i13;
 HEAP32[i16 >> 2] = i10;
 i7 = (i13 | 0) == 0;
 if (!i7) {
  i4 = i13;
  i5 = i15 + 4 | 0;
  while (1) {
   i6 = HEAP32[i5 >> 2] | 0;
   if ((i4 | 0) == 1) i1 = HEAP32[i5 + 4 >> 2] | 0; else {
    i1 = (HEAP32[i5 + 32 >> 2] | 0) - i6 | 0;
    i2 = i5 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) > (i1 | 0)) HEAP32[i2 >> 2] = i1; else i1 = i3;
   }
   HEAP32[i5 + 12 >> 2] = i6;
   HEAP32[i5 + 8 >> 2] = i1 + i6;
   i4 = i4 + -1 | 0;
   if (!i4) break; else i5 = i5 + 32 | 0;
  }
 }
 i8 = (i10 | 0) == 0;
 if (!i8) {
  i4 = i16 + 4 | 0;
  i5 = i10;
  while (1) {
   i6 = HEAP32[i4 >> 2] | 0;
   if ((i5 | 0) == 1) i1 = HEAP32[i4 + 4 >> 2] | 0; else {
    i1 = i6 - (HEAP32[i4 + 32 >> 2] | 0) | 0;
    i2 = i4 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) < (i1 | 0)) HEAP32[i2 >> 2] = i1; else i1 = i3;
   }
   HEAP32[i4 + 8 >> 2] = i6;
   HEAP32[i4 + 12 >> 2] = i1 + i6;
   i5 = i5 + -1 | 0;
   if (!i5) break; else i4 = i4 + 32 | 0;
  }
 }
 i9 = i17 << 1;
 i1 = i15 + 4 | 0;
 if (!i7) {
  i3 = i15 + 16 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - i17;
  i3 = i13 + -1 | 0;
  i2 = HEAP32[i15 + 12 >> 2] | 0;
  if (i3) {
   i7 = i15 + -28 + (i13 << 3 << 2) | 0;
   while (1) {
    i4 = i1 + 44 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    i6 = i5 - i2 | 0;
    if ((i6 | 0) < (i9 | 0)) {
     i15 = ((i6 | 0) / 2 | 0) + i2 | 0;
     HEAP32[i4 >> 2] = i15;
     HEAP32[i1 + 8 >> 2] = i15;
    } else {
     HEAP32[i1 + 8 >> 2] = i2 + i17;
     HEAP32[i4 >> 2] = i5 - i17;
    }
    i3 = i3 + -1 | 0;
    i2 = HEAP32[i1 + 40 >> 2] | 0;
    if (!i3) break; else i1 = i1 + 32 | 0;
   }
   i1 = i7;
  }
  HEAP32[i1 + 8 >> 2] = i2 + i17;
 }
 i1 = i16 + 4 | 0;
 if (i8) return;
 i3 = i16 + 16 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - i17;
 i3 = i10 + -1 | 0;
 i2 = HEAP32[i16 + 12 >> 2] | 0;
 if (i3) {
  i7 = i16 + -28 + (i10 << 3 << 2) | 0;
  i5 = i3;
  while (1) {
   i6 = i1 + 44 | 0;
   i4 = HEAP32[i6 >> 2] | 0;
   i3 = i4 - i2 | 0;
   if ((i3 | 0) < (i9 | 0)) {
    i2 = ((i3 | 0) / 2 | 0) + i2 | 0;
    i3 = i2;
   } else {
    i3 = i2 + i17 | 0;
    i2 = i4 - i17 | 0;
   }
   HEAP32[i6 >> 2] = i2;
   HEAP32[i1 + 8 >> 2] = i3;
   i5 = i5 + -1 | 0;
   i2 = HEAP32[i1 + 40 >> 2] | 0;
   if (!i5) break; else i1 = i1 + 32 | 0;
  }
  i1 = i7;
 }
 HEAP32[i1 + 8 >> 2] = i2 + i17;
 return;
}

function _doCdataSection(i11, i24, i25, i9, i26, i12) {
 i11 = i11 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 i9 = i9 | 0;
 i26 = i26 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i27 = i30 + 12 | 0;
 i28 = i30 + 8 | 0;
 i15 = i30 + 4 | 0;
 i29 = i30;
 i3 = HEAP32[i25 >> 2] | 0;
 HEAP32[i15 >> 2] = i3;
 i17 = i11 + 144 | 0;
 if ((HEAP32[i17 >> 2] | 0) == (i24 | 0)) {
  i1 = i11 + 288 | 0;
  HEAP32[i1 >> 2] = i3;
  i2 = i11 + 292 | 0;
  i10 = i1;
  i8 = i2;
  i16 = i11 + 300 | 0;
 } else {
  i16 = i11 + 300 | 0;
  i8 = HEAP32[i16 >> 2] | 0;
  i10 = i8;
  i8 = i8 + 4 | 0;
  i2 = i11 + 292 | 0;
  i1 = i11 + 288 | 0;
 }
 HEAP32[i10 >> 2] = i3;
 HEAP32[i25 >> 2] = 0;
 i6 = i24 + 8 | 0;
 i7 = i11 + 60 | 0;
 i18 = i11 + 80 | 0;
 i13 = i24 + 72 | 0;
 i19 = i11 + 44 | 0;
 i20 = i24 + 60 | 0;
 i21 = i11 + 48 | 0;
 i22 = i11 + 4 | 0;
 i23 = i11 + 480 | 0;
 L5 : while (1) {
  i4 = FUNCTION_TABLE_iiiii[HEAP32[i6 >> 2] & 127](i24, HEAP32[i15 >> 2] | 0, i9, i29) | 0;
  i5 = HEAP32[i29 >> 2] | 0;
  HEAP32[i8 >> 2] = i5;
  i14 = i5;
  L7 : do switch (i4 | 0) {
  case 40:
   {
    i3 = 6;
    break L5;
   }
  case 0:
   {
    i3 = 41;
    break L5;
   }
  case -2:
   {
    i3 = 42;
    break L5;
   }
  case -4:
  case -1:
   {
    i3 = 44;
    break L5;
   }
  case 7:
   {
    i3 = HEAP32[i7 >> 2] | 0;
    if (i3 | 0) {
     HEAP8[i27 >> 0] = 10;
     FUNCTION_TABLE_viii[i3 & 31](HEAP32[i22 >> 2] | 0, i27, 1);
     break L7;
    }
    i3 = HEAP32[i18 >> 2] | 0;
    if (i3 | 0) {
     i4 = HEAP32[i15 >> 2] | 0;
     HEAP32[i27 >> 2] = i4;
     if (!(HEAP8[i13 >> 0] | 0)) {
      if ((HEAP32[i17 >> 2] | 0) == (i24 | 0)) {
       i3 = i2;
       i4 = i1;
      } else {
       i4 = HEAP32[i16 >> 2] | 0;
       i3 = i4 + 4 | 0;
      }
      do {
       HEAP32[i28 >> 2] = HEAP32[i19 >> 2];
       FUNCTION_TABLE_viiiii[HEAP32[i20 >> 2] & 31](i24, i27, i14, i28, HEAP32[i21 >> 2] | 0);
       HEAP32[i3 >> 2] = HEAP32[i27 >> 2];
       i5 = HEAP32[i19 >> 2] | 0;
       FUNCTION_TABLE_viii[HEAP32[i18 >> 2] & 31](HEAP32[i22 >> 2] | 0, i5, (HEAP32[i28 >> 2] | 0) - i5 | 0);
       HEAP32[i4 >> 2] = HEAP32[i27 >> 2];
      } while ((HEAP32[i27 >> 2] | 0) != (i14 | 0));
     } else FUNCTION_TABLE_viii[i3 & 31](HEAP32[i22 >> 2] | 0, i4, i5 - i4 | 0);
    }
    break;
   }
  case 6:
   {
    i4 = HEAP32[i7 >> 2] | 0;
    if (i4 | 0) {
     if (!(HEAP8[i13 >> 0] | 0)) i3 = i14; else {
      i14 = HEAP32[i15 >> 2] | 0;
      FUNCTION_TABLE_viii[i4 & 31](HEAP32[i22 >> 2] | 0, i14, i5 - i14 | 0);
      break L7;
     }
     while (1) {
      HEAP32[i27 >> 2] = HEAP32[i19 >> 2];
      FUNCTION_TABLE_viiiii[HEAP32[i20 >> 2] & 31](i24, i15, i3, i27, HEAP32[i21 >> 2] | 0);
      HEAP32[i8 >> 2] = HEAP32[i29 >> 2];
      i3 = HEAP32[i19 >> 2] | 0;
      FUNCTION_TABLE_viii[i4 & 31](HEAP32[i22 >> 2] | 0, i3, (HEAP32[i27 >> 2] | 0) - i3 | 0);
      i3 = HEAP32[i15 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i29 >> 2] | 0)) break;
      HEAP32[i10 >> 2] = i3;
      i3 = HEAP32[i29 >> 2] | 0;
     }
     break L7;
    }
    i3 = HEAP32[i18 >> 2] | 0;
    if (i3 | 0) {
     i4 = HEAP32[i15 >> 2] | 0;
     HEAP32[i27 >> 2] = i4;
     if (!(HEAP8[i13 >> 0] | 0)) {
      if ((HEAP32[i17 >> 2] | 0) == (i24 | 0)) {
       i3 = i2;
       i4 = i1;
      } else {
       i4 = HEAP32[i16 >> 2] | 0;
       i3 = i4 + 4 | 0;
      }
      do {
       HEAP32[i28 >> 2] = HEAP32[i19 >> 2];
       FUNCTION_TABLE_viiiii[HEAP32[i20 >> 2] & 31](i24, i27, i14, i28, HEAP32[i21 >> 2] | 0);
       HEAP32[i3 >> 2] = HEAP32[i27 >> 2];
       i5 = HEAP32[i19 >> 2] | 0;
       FUNCTION_TABLE_viii[HEAP32[i18 >> 2] & 31](HEAP32[i22 >> 2] | 0, i5, (HEAP32[i28 >> 2] | 0) - i5 | 0);
       HEAP32[i4 >> 2] = HEAP32[i27 >> 2];
      } while ((HEAP32[i27 >> 2] | 0) != (i14 | 0));
     } else FUNCTION_TABLE_viii[i3 & 31](HEAP32[i22 >> 2] | 0, i4, i5 - i4 | 0);
    }
    break;
   }
  default:
   {
    i3 = 46;
    break L5;
   }
  } while (0);
  i14 = HEAP32[i29 >> 2] | 0;
  HEAP32[i15 >> 2] = i14;
  HEAP32[i10 >> 2] = i14;
  switch (HEAP32[i23 >> 2] | 0) {
  case 3:
   {
    i3 = 48;
    break L5;
   }
  case 2:
   {
    i1 = 35;
    i3 = 50;
    break L5;
   }
  default:
   {}
  }
 }
 if ((i3 | 0) == 6) {
  i3 = HEAP32[i11 + 76 >> 2] | 0;
  if (!i3) {
   i4 = HEAP32[i18 >> 2] | 0;
   if (i4 | 0) {
    i3 = HEAP32[i15 >> 2] | 0;
    HEAP32[i27 >> 2] = i3;
    if (!(HEAP8[i13 >> 0] | 0)) {
     if ((HEAP32[i17 >> 2] | 0) != (i24 | 0)) {
      i1 = HEAP32[i16 >> 2] | 0;
      i2 = i1 + 4 | 0;
     }
     do {
      HEAP32[i28 >> 2] = HEAP32[i19 >> 2];
      FUNCTION_TABLE_viiiii[HEAP32[i20 >> 2] & 31](i24, i27, i14, i28, HEAP32[i21 >> 2] | 0);
      HEAP32[i2 >> 2] = HEAP32[i27 >> 2];
      i17 = HEAP32[i19 >> 2] | 0;
      FUNCTION_TABLE_viii[HEAP32[i18 >> 2] & 31](HEAP32[i22 >> 2] | 0, i17, (HEAP32[i28 >> 2] | 0) - i17 | 0);
      HEAP32[i1 >> 2] = HEAP32[i27 >> 2];
     } while ((HEAP32[i27 >> 2] | 0) != (i14 | 0));
    } else FUNCTION_TABLE_viii[i4 & 31](HEAP32[i22 >> 2] | 0, i3, i5 - i3 | 0);
   }
  } else FUNCTION_TABLE_vi[i3 & 127](HEAP32[i22 >> 2] | 0);
  i29 = HEAP32[i29 >> 2] | 0;
  HEAP32[i25 >> 2] = i29;
  HEAP32[i26 >> 2] = i29;
  i29 = (HEAP32[i23 >> 2] | 0) == 2 ? 35 : 0;
  STACKTOP = i30;
  return i29 | 0;
 } else if ((i3 | 0) == 41) {
  HEAP32[i10 >> 2] = i5;
  i29 = 4;
  STACKTOP = i30;
  return i29 | 0;
 } else if ((i3 | 0) == 42) {
  if (!(i12 << 24 >> 24)) {
   i29 = 6;
   STACKTOP = i30;
   return i29 | 0;
  }
  HEAP32[i26 >> 2] = HEAP32[i15 >> 2];
  i29 = 0;
  STACKTOP = i30;
  return i29 | 0;
 } else if ((i3 | 0) == 44) {
  if (!(i12 << 24 >> 24)) {
   i29 = 20;
   STACKTOP = i30;
   return i29 | 0;
  }
  HEAP32[i26 >> 2] = HEAP32[i15 >> 2];
  i29 = 0;
  STACKTOP = i30;
  return i29 | 0;
 } else if ((i3 | 0) == 46) {
  HEAP32[i10 >> 2] = i5;
  i29 = 23;
  STACKTOP = i30;
  return i29 | 0;
 } else if ((i3 | 0) == 48) {
  HEAP32[i26 >> 2] = HEAP32[i29 >> 2];
  i29 = 0;
  STACKTOP = i30;
  return i29 | 0;
 } else if ((i3 | 0) == 50) {
  STACKTOP = i30;
  return i1 | 0;
 }
 return 0;
}

function _af_glyph_hints_align_weak_points(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 i18 = HEAP32[i2 + 24 >> 2] | 0;
 i21 = i1 + (i18 * 40 | 0) | 0;
 i5 = HEAP32[i2 + 40 >> 2] | 0;
 i4 = HEAP32[i2 + 36 >> 2] | 0;
 i19 = i5 + (i4 << 2) | 0;
 i17 = (i3 | 0) == 0;
 i18 = (i18 | 0) > 0;
 if (i17) if (i18) {
  i2 = i1;
  do {
   HEAP32[i2 + 24 >> 2] = HEAP32[i2 + 16 >> 2];
   HEAP32[i2 + 28 >> 2] = HEAP32[i2 + 4 >> 2];
   i2 = i2 + 40 | 0;
  } while (i2 >>> 0 < i21 >>> 0);
  i16 = 4;
 } else i16 = 4; else if (i18) {
  i2 = i1;
  do {
   HEAP32[i2 + 24 >> 2] = HEAP32[i2 + 20 >> 2];
   HEAP32[i2 + 28 >> 2] = HEAP32[i2 + 8 >> 2];
   i2 = i2 + 40 | 0;
  } while (i2 >>> 0 < i21 >>> 0);
  i16 = 8;
 } else i16 = 8;
 if ((i4 | 0) > 0) {
  i15 = i5;
  while (1) {
   i3 = HEAP32[i15 >> 2] | 0;
   i14 = HEAP32[i3 + 36 >> 2] | 0;
   L12 : do if (i3 >>> 0 <= i14 >>> 0) {
    i2 = i3;
    while (1) {
     if ((HEAPU16[i2 >> 1] | 0) & i16 | 0) {
      i4 = i2;
      break;
     }
     i2 = i2 + 40 | 0;
     if (i2 >>> 0 > i14 >>> 0) break L12;
    }
    L16 : while (1) {
     while (1) {
      if (i4 >>> 0 >= i14 >>> 0) {
       i20 = 12;
       break;
      }
      i5 = i4 + 40 | 0;
      if (!((HEAPU16[i4 + 40 >> 1] | 0) & i16)) {
       i7 = 0;
       break;
      } else i4 = i5;
     }
     if ((i20 | 0) == 12) {
      i20 = 0;
      i5 = i4 + 40 | 0;
      i7 = 1;
     }
     i8 = i5 >>> 0 > i14 >>> 0;
     if (i8) break; else i6 = i5;
     while (1) {
      if ((HEAPU16[i6 >> 1] | 0) & i16 | 0) break;
      i6 = i6 + 40 | 0;
      if (i6 >>> 0 > i14 >>> 0) break L16;
     }
     i13 = i6 + -40 | 0;
     if (i5 >>> 0 > i13 >>> 0) {
      i4 = i6;
      continue;
     }
     i10 = (HEAP32[i4 + 28 >> 2] | 0) > (HEAP32[i6 + 28 >> 2] | 0);
     i11 = i10 ? i4 : i6;
     i10 = i10 ? i6 : i4;
     i8 = HEAP32[i10 + 28 >> 2] | 0;
     i9 = HEAP32[i11 + 28 >> 2] | 0;
     i10 = HEAP32[i10 + 24 >> 2] | 0;
     i4 = HEAP32[i11 + 24 >> 2] | 0;
     i11 = i10 - i8 | 0;
     i12 = i4 - i9 | 0;
     if ((i9 | 0) == (i8 | 0) | (i4 | 0) == (i10 | 0)) while (1) {
      i4 = HEAP32[i5 + 28 >> 2] | 0;
      if ((i4 | 0) > (i8 | 0)) i4 = (i4 | 0) < (i9 | 0) ? i10 : i4 + i12 | 0; else i4 = i4 + i11 | 0;
      HEAP32[i5 + 24 >> 2] = i4;
      i5 = i5 + 40 | 0;
      if (i5 >>> 0 > i13 >>> 0) {
       i4 = i6;
       continue L16;
      }
     }
     i7 = _FT_DivFix(i4 - i10 | 0, i9 - i8 | 0) | 0;
     while (1) {
      i4 = HEAP32[i5 + 28 >> 2] | 0;
      do if ((i4 | 0) > (i8 | 0)) if ((i4 | 0) < (i9 | 0)) {
       i4 = (_FT_MulFix(i4 - i8 | 0, i7) | 0) + i10 | 0;
       break;
      } else {
       i4 = i4 + i12 | 0;
       break;
      } else i4 = i4 + i11 | 0; while (0);
      HEAP32[i5 + 24 >> 2] = i4;
      i5 = i5 + 40 | 0;
      if (i5 >>> 0 > i13 >>> 0) {
       i4 = i6;
       continue L16;
      }
     }
    }
    if ((i4 | 0) == (i2 | 0)) {
     i4 = (HEAP32[i2 + 24 >> 2] | 0) - (HEAP32[i2 + 28 >> 2] | 0) | 0;
     if (!i4) break;
     if (i3 >>> 0 < i2 >>> 0) do {
      HEAP32[i3 + 24 >> 2] = (HEAP32[i3 + 28 >> 2] | 0) + i4;
      i3 = i3 + 40 | 0;
     } while (i3 >>> 0 < i2 >>> 0);
     i3 = i2 + 40 | 0;
     if (i3 >>> 0 > i14 >>> 0) break;
     while (1) {
      HEAP32[i2 + 64 >> 2] = (HEAP32[i2 + 68 >> 2] | 0) + i4;
      i2 = i3 + 40 | 0;
      if (i2 >>> 0 > i14 >>> 0) break L12; else {
       i13 = i3;
       i3 = i2;
       i2 = i13;
      }
     }
    }
    L57 : do if (!(i8 | i7)) {
     i10 = (HEAP32[i4 + 28 >> 2] | 0) > (HEAP32[i2 + 28 >> 2] | 0);
     i6 = i10 ? i4 : i2;
     i10 = i10 ? i2 : i4;
     i8 = HEAP32[i10 + 28 >> 2] | 0;
     i9 = HEAP32[i6 + 28 >> 2] | 0;
     i10 = HEAP32[i10 + 24 >> 2] | 0;
     i6 = HEAP32[i6 + 24 >> 2] | 0;
     i11 = i10 - i8 | 0;
     i12 = i6 - i9 | 0;
     if ((i9 | 0) == (i8 | 0) | (i6 | 0) == (i10 | 0)) while (1) {
      i6 = HEAP32[i5 + 28 >> 2] | 0;
      if ((i6 | 0) > (i8 | 0)) i6 = (i6 | 0) < (i9 | 0) ? i10 : i6 + i12 | 0; else i6 = i6 + i11 | 0;
      HEAP32[i5 + 24 >> 2] = i6;
      i5 = i5 + 40 | 0;
      if (i5 >>> 0 > i14 >>> 0) break L57;
     }
     i7 = _FT_DivFix(i6 - i10 | 0, i9 - i8 | 0) | 0;
     do {
      i6 = HEAP32[i5 + 28 >> 2] | 0;
      do if ((i6 | 0) > (i8 | 0)) if ((i6 | 0) < (i9 | 0)) {
       i6 = (_FT_MulFix(i6 - i8 | 0, i7) | 0) + i10 | 0;
       break;
      } else {
       i6 = i6 + i12 | 0;
       break;
      } else i6 = i6 + i11 | 0; while (0);
      HEAP32[i5 + 24 >> 2] = i6;
      i5 = i5 + 40 | 0;
     } while (i5 >>> 0 <= i14 >>> 0);
    } while (0);
    if (i2 >>> 0 > i1 >>> 0) {
     i10 = i2 + -40 | 0;
     if (i3 >>> 0 <= i10 >>> 0) {
      i7 = (HEAP32[i4 + 28 >> 2] | 0) > (HEAP32[i2 + 28 >> 2] | 0);
      i8 = i7 ? i4 : i2;
      i7 = i7 ? i2 : i4;
      i5 = HEAP32[i7 + 28 >> 2] | 0;
      i6 = HEAP32[i8 + 28 >> 2] | 0;
      i7 = HEAP32[i7 + 24 >> 2] | 0;
      i2 = HEAP32[i8 + 24 >> 2] | 0;
      i8 = i7 - i5 | 0;
      i9 = i2 - i6 | 0;
      if ((i6 | 0) == (i5 | 0) | (i2 | 0) == (i7 | 0)) while (1) {
       i2 = HEAP32[i3 + 28 >> 2] | 0;
       if ((i2 | 0) > (i5 | 0)) i2 = (i2 | 0) < (i6 | 0) ? i7 : i2 + i9 | 0; else i2 = i2 + i8 | 0;
       HEAP32[i3 + 24 >> 2] = i2;
       i3 = i3 + 40 | 0;
       if (i3 >>> 0 > i10 >>> 0) break L12;
      }
      i4 = _FT_DivFix(i2 - i7 | 0, i6 - i5 | 0) | 0;
      do {
       i2 = HEAP32[i3 + 28 >> 2] | 0;
       do if ((i2 | 0) > (i5 | 0)) if ((i2 | 0) < (i6 | 0)) {
        i2 = (_FT_MulFix(i2 - i5 | 0, i4) | 0) + i7 | 0;
        break;
       } else {
        i2 = i2 + i9 | 0;
        break;
       } else i2 = i2 + i8 | 0; while (0);
       HEAP32[i3 + 24 >> 2] = i2;
       i3 = i3 + 40 | 0;
      } while (i3 >>> 0 <= i10 >>> 0);
     }
    }
   } while (0);
   i15 = i15 + 4 | 0;
   if (i15 >>> 0 >= i19 >>> 0) break;
  }
 }
 if (i17) {
  if (!i18) return;
  do {
   HEAP32[i1 + 16 >> 2] = HEAP32[i1 + 24 >> 2];
   i1 = i1 + 40 | 0;
  } while (i1 >>> 0 < i21 >>> 0);
  return;
 } else {
  if (!i18) return;
  do {
   HEAP32[i1 + 20 >> 2] = HEAP32[i1 + 24 >> 2];
   i1 = i1 + 40 | 0;
  } while (i1 >>> 0 < i21 >>> 0);
  return;
 }
}

function _T1_Read_Metrics(i15, i20) {
 i15 = i15 | 0;
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i14 = i24 + 24 | 0;
 i4 = i24 + 4 | 0;
 i22 = i24;
 i7 = i20 + 28 | 0;
 i23 = HEAP32[i7 >> 2] | 0;
 HEAP32[i22 >> 2] = 2;
 i5 = i15 + 132 | 0;
 i1 = _ft_mem_alloc(i23, 44, i22) | 0;
 if (!(HEAP32[i22 >> 2] | 0)) {
  i6 = i20 + 4 | 0;
  i19 = _FT_Stream_EnterFrame(i20, HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i22 >> 2] = i19;
  if (!i19) {
   i16 = i1 + 4 | 0;
   i17 = i15 + 460 | 0;
   HEAP32[i16 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
   i18 = i1 + 20 | 0;
   HEAP32[i18 >> 2] = HEAP32[i17 + 12 >> 2];
   i19 = i1 + 24 | 0;
   HEAP32[i19 >> 2] = HEAP32[i17 + 4 >> 2];
   i3 = (HEAP32[i15 + 488 >> 2] | 0) + 24 | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   if (!i2) i21 = 36; else {
    i2 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i4, HEAP32[i7 >> 2] | 0, HEAP32[i20 + 32 >> 2] | 0, HEAP32[i20 + 36 >> 2] | 0) | 0;
    HEAP32[i22 >> 2] = i2;
    if (!i2) {
     HEAP32[i4 + 8 >> 2] = i1;
     HEAP32[i4 + 12 >> 2] = 77;
     HEAP32[i4 + 16 >> 2] = i5;
     i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i4) | 0;
     HEAP32[i22 >> 2] = i2;
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] & 127](i4);
     i2 = HEAP32[i22 >> 2] | 0;
    }
    if ((i2 & 255 | 0) == 2) {
     i5 = HEAP32[i20 + 32 >> 2] | 0;
     i3 = HEAP32[i6 >> 2] | 0;
     if (i3 >>> 0 > 6) if ((HEAPU8[i5 + 1 >> 0] | 0) < 4) if ((HEAPU8[i5 + 4 >> 0] << 16 | HEAPU8[i5 + 5 >> 0] << 24 | HEAPU8[i5 + 3 >> 0] << 8 | HEAPU8[i5 + 2 >> 0] | 0) == (i3 | 0)) {
      i13 = HEAP32[i7 >> 2] | 0;
      i4 = HEAP32[i20 + 36 >> 2] | 0;
      HEAP32[i14 >> 2] = 0;
      i2 = i5 + 99 | 0;
      L14 : do if ((i5 + 101 | 0) >>> 0 > i4 >>> 0) {
       HEAP32[i14 >> 2] = 2;
       i21 = 33;
      } else {
       i2 = i2 + ((HEAPU8[i5 + 100 >> 0] << 8 | HEAPU8[i2 >> 0]) + 18) | 0;
       if ((i2 + 18 | 0) >>> 0 > i4 >>> 0) i2 = 0; else if ((HEAPU8[i2 + 1 >> 0] << 8 | HEAPU8[i2 >> 0]) >>> 0 < 18) i2 = 0; else {
        i12 = i2 + 14 | 0;
        i12 = HEAPU8[i12 + 2 >> 0] << 16 | HEAPU8[i12 + 3 >> 0] << 24 | HEAPU8[i12 + 1 >> 0] << 8 | HEAPU8[i12 >> 0];
        i5 = i5 + i12 | 0;
        if (!i12) i2 = 0; else {
         i3 = i5 + 2 | 0;
         if (i3 >>> 0 > i4 >>> 0) {
          HEAP32[i14 >> 2] = 2;
          i21 = 33;
          break;
         }
         i2 = HEAPU8[i5 + 1 >> 0] << 8 | HEAPU8[i5 >> 0];
         i12 = i1 + 40 | 0;
         HEAP32[i12 >> 2] = i2;
         if ((i3 + (i2 << 2) | 0) >>> 0 > i4 >>> 0) {
          HEAP32[i14 >> 2] = 2;
          i21 = 33;
          break;
         }
         if (!i2) i2 = 0; else {
          i2 = _ft_mem_realloc(i13, 16, 0, i2, 0, i14) | 0;
          i11 = i1 + 36 | 0;
          HEAP32[i11 >> 2] = i2;
          if (!(HEAP32[i14 >> 2] | 0)) {
           i8 = HEAP32[i12 >> 2] << 2;
           i9 = i5 + (i8 | 2) | 0;
           i10 = HEAP32[i15 + 92 >> 2] | 0;
           i5 = HEAP32[i15 + 36 >> 2] | 0;
           L28 : do if ((i5 | 0) > 0) {
            i6 = HEAP32[i15 + 40 >> 2] | 0;
            i4 = 0;
            while (1) {
             i7 = HEAP32[i6 + (i4 << 2) >> 2] | 0;
             i4 = i4 + 1 | 0;
             if ((HEAP16[i7 + 8 >> 1] | 0) == 7) break;
             if ((i4 | 0) >= (i5 | 0)) break L28;
            }
            i7 = _FT_Set_Charmap(i15, i7) | 0;
            HEAP32[i14 >> 2] = i7;
            if (i7 | 0) {
             i21 = 33;
             break L14;
            }
           } while (0);
           if ((i8 | 0) > 0) while (1) {
            i8 = _FT_Get_Char_Index(i15, HEAPU8[i3 >> 0] | 0) | 0;
            HEAP32[i2 >> 2] = i8;
            i8 = _FT_Get_Char_Index(i15, HEAPU8[i3 + 1 >> 0] | 0) | 0;
            HEAP32[i2 + 4 >> 2] = i8;
            HEAP32[i2 + 8 >> 2] = (HEAPU8[i3 + 3 >> 0] << 8 | HEAPU8[i3 + 2 >> 0]) << 16 >> 16;
            HEAP32[i2 + 12 >> 2] = 0;
            i3 = i3 + 4 | 0;
            if (i3 >>> 0 >= i9 >>> 0) break; else i2 = i2 + 16 | 0;
           }
           if (!i10) i2 = HEAP32[i14 >> 2] | 0; else {
            i2 = _FT_Set_Charmap(i15, i10) | 0;
            HEAP32[i14 >> 2] = i2;
           }
           if (i2 | 0) {
            i21 = 33;
            break;
           }
           _qsort(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, 16, 181);
           if (!(HEAP32[i14 >> 2] | 0)) i2 = 0; else i21 = 33;
          } else i21 = 33;
         }
        }
       }
      } while (0);
      if ((i21 | 0) == 33) {
       i2 = i1 + 36 | 0;
       _ft_mem_free(i13, HEAP32[i2 >> 2] | 0);
       HEAP32[i2 >> 2] = 0;
       HEAP32[i1 + 40 >> 2] = 0;
       i2 = HEAP32[i14 >> 2] | 0;
      }
      HEAP32[i22 >> 2] = i2;
     }
    }
    if (!i2) i21 = 36;
   }
   if ((i21 | 0) == 36) {
    HEAP32[i17 >> 2] = HEAP32[i16 >> 2];
    HEAP32[i17 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
    HEAP32[i17 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
    HEAP32[i17 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
    HEAP32[i15 + 52 >> 2] = HEAP32[i16 >> 2] >> 16;
    HEAP32[i15 + 56 >> 2] = HEAP32[i1 + 8 >> 2] >> 16;
    HEAP32[i15 + 60 >> 2] = (HEAP32[i1 + 12 >> 2] | 0) + 65535 >> 16;
    HEAP32[i15 + 64 >> 2] = (HEAP32[i1 + 16 >> 2] | 0) + 65535 >> 16;
    HEAP16[i15 + 70 >> 1] = ((HEAP32[i18 >> 2] | 0) + 32768 | 0) >>> 16;
    HEAP16[i15 + 72 >> 1] = ((HEAP32[i19 >> 2] | 0) + 32768 | 0) >>> 16;
    if (HEAP32[i1 + 40 >> 2] | 0) {
     i21 = i15 + 8 | 0;
     HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 64;
     HEAP32[i15 + 492 >> 2] = i1;
     i1 = 0;
    }
   }
   _FT_Stream_ExitFrame(i20);
  }
 }
 if (!i1) {
  i23 = HEAP32[i22 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 i21 = i1 + 36 | 0;
 _ft_mem_free(i23, HEAP32[i21 >> 2] | 0);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 i21 = i1 + 28 | 0;
 _ft_mem_free(i23, HEAP32[i21 >> 2] | 0);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 _ft_mem_free(i23, i1);
 i23 = HEAP32[i22 >> 2] | 0;
 STACKTOP = i24;
 return i23 | 0;
}

function _ass_process_force_style(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, d22 = 0.0;
 i2 = HEAP32[(HEAP32[i12 + 84 >> 2] | 0) + 8 >> 2] | 0;
 if (!i2) return;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) return;
 i19 = i12 + 36 | 0;
 i20 = i12 + 16 | 0;
 i13 = i12 + 40 | 0;
 i14 = i12 + 48 | 0;
 i15 = i12 + 56 | 0;
 i16 = i12 + 60 | 0;
 i17 = i12 + 64 | 0;
 i18 = i12 + 72 | 0;
 do {
  i8 = _strrchr(i1, 61) | 0;
  if (i8 | 0) {
   HEAP8[i8 >> 0] = 0;
   i9 = i8 + 1 | 0;
   do if (!(_ass_strcasecmp(HEAP32[i2 >> 2] | 0, 355360) | 0)) {
    i11 = _atoi(i9) | 0;
    HEAP32[i19 >> 2] = i11;
   } else {
    if (!(_ass_strcasecmp(HEAP32[i2 >> 2] | 0, 355369) | 0)) {
     i11 = _atoi(i9) | 0;
     HEAP32[i13 >> 2] = i11;
     break;
    }
    if (!(_ass_strcasecmp(HEAP32[i2 >> 2] | 0, 355378) | 0)) {
     d22 = +_ass_strtod(i9, 0);
     HEAPF64[i14 >> 3] = d22;
     break;
    }
    if (!(_ass_strcasecmp(HEAP32[i2 >> 2] | 0, 355384) | 0)) {
     i11 = _atoi(i9) | 0;
     HEAP32[i15 >> 2] = i11;
     break;
    }
    if (!(_ass_strcasecmp(HEAP32[i2 >> 2] | 0, 355394) | 0)) {
     i11 = (_parse_bool(i9) | 0) << 24 >> 24;
     HEAP32[i16 >> 2] = i11;
     break;
    }
    if (!(_ass_strcasecmp(HEAP32[i2 >> 2] | 0, 355416) | 0)) {
     i11 = (_parse_bool(i9) | 0) << 24 >> 24;
     HEAP32[i17 >> 2] = i11;
     break;
    }
    if (!(_ass_strcasecmp(HEAP32[i2 >> 2] | 0, 355424) | 0)) {
     i11 = _parse_ycbcr_matrix(i9) | 0;
     HEAP32[i18 >> 2] = i11;
    }
   } while (0);
   i1 = HEAP32[i2 >> 2] | 0;
   i10 = _strrchr(i1, 46) | 0;
   i11 = (i10 | 0) != 0;
   if (i11) {
    HEAP8[i10 >> 0] = 0;
    i7 = HEAP32[i2 >> 2] | 0;
    i1 = i10 + 1 | 0;
   } else i7 = 0;
   if ((HEAP32[i12 >> 2] | 0) > 0) {
    i6 = (i7 | 0) == 0;
    i5 = 0;
    do {
     if (i6) i21 = 25; else if (!(_ass_strcasecmp(HEAP32[(HEAP32[i20 >> 2] | 0) + (i5 * 144 | 0) >> 2] | 0, i7) | 0)) i21 = 25;
     do if ((i21 | 0) == 25) {
      i21 = 0;
      i3 = HEAP32[i20 >> 2] | 0;
      if (!(_ass_strcasecmp(i1, 355437) | 0)) {
       i3 = i3 + (i5 * 144 | 0) + 4 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (i4 | 0) _free(i4);
       i4 = ___strdup(i9) | 0;
       HEAP32[i3 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355446) | 0)) {
       i4 = _parse_color_header(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 16 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355460) | 0)) {
       i4 = _parse_color_header(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 20 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355476) | 0)) {
       i4 = _parse_color_header(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 24 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355490) | 0)) {
       i4 = _parse_color_header(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 28 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355501) | 0)) {
       d22 = +_ass_strtod(i9, 0);
       HEAPF64[i3 + (i5 * 144 | 0) + 8 >> 3] = d22;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355510) | 0)) {
       i4 = _atoi(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 32 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355515) | 0)) {
       i4 = _atoi(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 36 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355522) | 0)) {
       i4 = _atoi(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 40 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355532) | 0)) {
       i4 = _atoi(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 44 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355542) | 0)) {
       d22 = +_ass_strtod(i9, 0);
       HEAPF64[i3 + (i5 * 144 | 0) + 64 >> 3] = d22;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355550) | 0)) {
       d22 = +_ass_strtod(i9, 0);
       HEAPF64[i3 + (i5 * 144 | 0) + 72 >> 3] = d22;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355556) | 0)) {
       i4 = _atoi(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 80 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355568) | 0)) {
       i4 = _atoi(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 104 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355578) | 0)) {
       i4 = _atoi(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 136 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355586) | 0)) {
       i4 = _atoi(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 108 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355594) | 0)) {
       i4 = _atoi(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 112 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355602) | 0)) {
       i4 = _atoi(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 116 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355610) | 0)) {
       i4 = _atoi(i9) | 0;
       HEAP32[i3 + (i5 * 144 | 0) + 120 >> 2] = i4;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355619) | 0)) {
       d22 = +_ass_strtod(i9, 0);
       HEAPF64[i3 + (i5 * 144 | 0) + 48 >> 3] = d22;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355626) | 0)) {
       d22 = +_ass_strtod(i9, 0);
       HEAPF64[i3 + (i5 * 144 | 0) + 56 >> 3] = d22;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355633) | 0)) {
       d22 = +_ass_strtod(i9, 0);
       HEAPF64[i3 + (i5 * 144 | 0) + 88 >> 3] = d22;
       break;
      }
      if (!(_ass_strcasecmp(i1, 355641) | 0)) {
       d22 = +_ass_strtod(i9, 0);
       HEAPF64[i3 + (i5 * 144 | 0) + 96 >> 3] = d22;
       break;
      }
      if (_ass_strcasecmp(i1, 355648) | 0) break;
      d22 = +_ass_strtod(i9, 0);
      HEAPF64[i3 + (i5 * 144 | 0) + 128 >> 3] = d22;
     } while (0);
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) < (HEAP32[i12 >> 2] | 0));
   }
   HEAP8[i8 >> 0] = 61;
   if (i11) HEAP8[i10 >> 0] = 46;
  }
  i2 = i2 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
 } while ((i1 | 0) != 0);
 return;
}

function _fribidi_reorder_line(i3, i8, i1, i14, i2, i15, i16, i17) {
 i3 = i3 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i18 = 0, i19 = 0, i20 = 0;
 if (!i1) {
  i17 = 0;
  i17 = i17 & 255;
  i17 = i17 + 1 | 0;
  i17 = i17 & 255;
  return i17 | 0;
 }
 i12 = i1 + -1 + i14 | 0;
 i13 = (i12 | 0) < (i14 | 0);
 if (i13) {
  i17 = 0;
  i17 = i17 & 255;
  i17 = i17 + 1 | 0;
  i17 = i17 & 255;
  return i17 | 0;
 }
 i2 = i2 & 1;
 i1 = i12;
 while (1) {
  if (!(HEAP32[i8 + (i1 << 2) >> 2] & 9441280)) break;
  HEAP8[i15 + i1 >> 0] = i2;
  if ((i1 | 0) > (i14 | 0)) i1 = i1 + -1 | 0; else break;
 }
 L11 : do if (!((i3 & 2 | 0) == 0 | i13)) {
  i7 = (i17 | 0) == 0;
  if (!i16) {
   i1 = i12;
   while (1) {
    i5 = HEAP8[i15 + i1 >> 0] | 0;
    if (i5 & 1) if ((HEAP32[i8 + (i1 << 2) >> 2] | 0) == 524320) {
     i2 = i1;
     while (1) {
      i3 = i2 + -1 | 0;
      if ((i2 | 0) <= (i14 | 0)) {
       i6 = 13;
       break;
      }
      i4 = HEAP8[i15 + i3 >> 0] | 0;
      if (i4 << 24 >> 24 == i5 << 24 >> 24 ? (HEAP32[i8 + (i3 << 2) >> 2] & 1576960 | 0) != 0 : 0) i2 = i3; else {
       i6 = 12;
       break;
      }
     }
     if ((i6 | 0) == 12) {
      i6 = 0;
      if (i4 << 24 >> 24 == i5 << 24 >> 24) i5 = i3; else i6 = 13;
     }
     if ((i6 | 0) == 13) i5 = i2;
     if (i7) i1 = i5; else {
      i4 = i17 + (i5 << 2) | 0;
      i2 = i1 - i5 | 0;
      i3 = (i2 + 1 | 0) / 2 | 0;
      if ((i2 | 0) > 0) {
       i1 = 0;
       do {
        i9 = i4 + (i1 << 2) | 0;
        i10 = HEAP32[i9 >> 2] | 0;
        i11 = i4 + (i2 - i1 << 2) | 0;
        HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
        HEAP32[i11 >> 2] = i10;
        i1 = i1 + 1 | 0;
       } while ((i1 | 0) < (i3 | 0));
       i1 = i5;
      } else i1 = i5;
     }
    }
    if ((i1 | 0) > (i14 | 0)) i1 = i1 + -1 | 0; else break L11;
   }
  } else i1 = i12;
  while (1) {
   i5 = HEAP8[i15 + i1 >> 0] | 0;
   if (i5 & 1) if ((HEAP32[i8 + (i1 << 2) >> 2] | 0) == 524320) {
    i3 = i1;
    while (1) {
     i2 = i3 + -1 | 0;
     if ((i3 | 0) <= (i14 | 0)) {
      i6 = 24;
      break;
     }
     i4 = HEAP8[i15 + i2 >> 0] | 0;
     if (i4 << 24 >> 24 == i5 << 24 >> 24 ? (HEAP32[i8 + (i2 << 2) >> 2] & 1576960 | 0) != 0 : 0) i3 = i2; else {
      i6 = 23;
      break;
     }
    }
    if ((i6 | 0) == 23) {
     i6 = 0;
     if (i4 << 24 >> 24 != i5 << 24 >> 24) i6 = 24;
    }
    if ((i6 | 0) == 24) i2 = i3;
    i3 = i16 + (i2 << 2) | 0;
    i5 = i1 - i2 | 0;
    i6 = (i5 + 1 | 0) / 2 | 0;
    i4 = (i5 | 0) > 0;
    if (i4) {
     i1 = 0;
     do {
      i9 = i3 + (i1 << 2) | 0;
      i10 = HEAP32[i9 >> 2] | 0;
      i11 = i3 + (i5 - i1 << 2) | 0;
      HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
      HEAP32[i11 >> 2] = i10;
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) < (i6 | 0));
    }
    if (i7) i1 = i2; else {
     i3 = i17 + (i2 << 2) | 0;
     if (i4) {
      i1 = 0;
      do {
       i9 = i3 + (i1 << 2) | 0;
       i10 = HEAP32[i9 >> 2] | 0;
       i11 = i3 + (i5 - i1 << 2) | 0;
       HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
       HEAP32[i11 >> 2] = i10;
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) < (i6 | 0));
      i1 = i2;
     } else i1 = i2;
    }
   }
   if ((i1 | 0) > (i14 | 0)) i1 = i1 + -1 | 0; else break;
  }
 } while (0);
 if (i13) {
  i17 = 0;
  i17 = i17 & 255;
  i17 = i17 + 1 | 0;
  i17 = i17 & 255;
  return i17 | 0;
 } else {
  i1 = 0;
  i2 = i12;
 }
 while (1) {
  i11 = HEAP8[i15 + i2 >> 0] | 0;
  i1 = i11 << 24 >> 24 > i1 << 24 >> 24 ? i11 : i1;
  if ((i2 | 0) <= (i14 | 0)) break; else i2 = i2 + -1 | 0;
 }
 if (i1 << 24 >> 24 <= 0) {
  i17 = i1;
  i17 = i17 & 255;
  i17 = i17 + 1 | 0;
  i17 = i17 & 255;
  return i17 | 0;
 }
 i10 = (i16 | 0) == 0;
 i11 = (i17 | 0) == 0;
 i9 = i1;
 while (1) {
  L61 : do if (!i13) {
   if (i10) {
    i2 = i12;
    while (1) {
     if ((HEAP8[i15 + i2 >> 0] | 0) >= i9 << 24 >> 24) {
      i5 = i2;
      do {
       i8 = i5;
       i5 = i5 + -1 | 0;
       if ((i8 | 0) <= (i14 | 0)) break;
      } while ((HEAP8[i15 + i5 >> 0] | 0) >= i9 << 24 >> 24);
      if (i11) i2 = i5; else {
       i6 = i17 + (i5 << 2) + 4 | 0;
       i2 = i2 - i5 | 0;
       i4 = (i2 | 0) / 2 | 0;
       if ((i2 | 0) > 1) {
        i3 = i2 + -1 | 0;
        i2 = 0;
        do {
         i18 = i6 + (i2 << 2) | 0;
         i7 = HEAP32[i18 >> 2] | 0;
         i8 = i6 + (i3 - i2 << 2) | 0;
         HEAP32[i18 >> 2] = HEAP32[i8 >> 2];
         HEAP32[i8 >> 2] = i7;
         i2 = i2 + 1 | 0;
        } while ((i2 | 0) < (i4 | 0));
        i2 = i5;
       } else i2 = i5;
      }
     }
     if ((i2 | 0) > (i14 | 0)) i2 = i2 + -1 | 0; else break L61;
    }
   } else i2 = i12;
   while (1) {
    if ((HEAP8[i15 + i2 >> 0] | 0) >= i9 << 24 >> 24) {
     i8 = i2;
     do {
      i18 = i8;
      i8 = i8 + -1 | 0;
      if ((i18 | 0) <= (i14 | 0)) break;
     } while ((HEAP8[i15 + i8 >> 0] | 0) >= i9 << 24 >> 24);
     i4 = i16 + (i8 << 2) + 4 | 0;
     i5 = i2 - i8 | 0;
     i7 = (i5 | 0) / 2 | 0;
     i6 = (i5 | 0) > 1;
     if (i6) {
      i3 = i5 + -1 | 0;
      i2 = 0;
      do {
       i20 = i4 + (i2 << 2) | 0;
       i19 = HEAP32[i20 >> 2] | 0;
       i18 = i4 + (i3 - i2 << 2) | 0;
       HEAP32[i20 >> 2] = HEAP32[i18 >> 2];
       HEAP32[i18 >> 2] = i19;
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) < (i7 | 0));
     }
     if (i11) i2 = i8; else {
      i4 = i17 + (i8 << 2) + 4 | 0;
      if (i6) {
       i3 = i5 + -1 | 0;
       i2 = 0;
       do {
        i18 = i4 + (i2 << 2) | 0;
        i19 = HEAP32[i18 >> 2] | 0;
        i20 = i4 + (i3 - i2 << 2) | 0;
        HEAP32[i18 >> 2] = HEAP32[i20 >> 2];
        HEAP32[i20 >> 2] = i19;
        i2 = i2 + 1 | 0;
       } while ((i2 | 0) < (i7 | 0));
       i2 = i8;
      } else i2 = i8;
     }
    }
    if ((i2 | 0) > (i14 | 0)) i2 = i2 + -1 | 0; else break;
   }
  } while (0);
  if (i9 << 24 >> 24 > 1) i9 = i9 + -1 << 24 >> 24; else break;
 }
 i20 = i1 & 255;
 i20 = i20 + 1 | 0;
 i20 = i20 & 255;
 return i20 | 0;
}

function _hexfloat(i16, i20, i19, i21, i17) {
 i16 = i16 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i21 = i21 | 0;
 i17 = i17 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0;
 i18 = i16 + 4 | 0;
 i2 = HEAP32[i18 >> 2] | 0;
 i15 = i16 + 100 | 0;
 if (i2 >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) {
  HEAP32[i18 >> 2] = i2 + 1;
  i2 = HEAPU8[i2 >> 0] | 0;
  i3 = 0;
 } else {
  i2 = ___shgetc(i16) | 0;
  i3 = 0;
 }
 L4 : while (1) {
  switch (i2 | 0) {
  case 46:
   {
    i7 = 8;
    break L4;
   }
  case 48:
   break;
  default:
   {
    i12 = 0;
    i13 = 0;
    d9 = 1.0;
    d1 = 0.0;
    i14 = 0;
    i11 = i3;
    i3 = 0;
    i10 = 0;
    i6 = 0;
    i5 = 0;
    break L4;
   }
  }
  i2 = HEAP32[i18 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) {
   HEAP32[i18 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
   i3 = 1;
   continue;
  } else {
   i2 = ___shgetc(i16) | 0;
   i3 = 1;
   continue;
  }
 }
 if ((i7 | 0) == 8) {
  i2 = HEAP32[i18 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) {
   HEAP32[i18 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i16) | 0;
  if ((i2 | 0) == 48) {
   i5 = 0;
   i3 = 0;
   do {
    i2 = HEAP32[i18 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) {
     HEAP32[i18 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
    } else i2 = ___shgetc(i16) | 0;
    i5 = _i64Add(i5 | 0, i3 | 0, -1, -1) | 0;
    i3 = tempRet0;
   } while ((i2 | 0) == 48);
   i12 = 1;
   i13 = 0;
   d9 = 1.0;
   d1 = 0.0;
   i14 = 0;
   i11 = 1;
   i10 = 0;
   i6 = 0;
  } else {
   i12 = 1;
   i13 = 0;
   d9 = 1.0;
   d1 = 0.0;
   i14 = 0;
   i11 = i3;
   i3 = 0;
   i10 = 0;
   i6 = 0;
   i5 = 0;
  }
 }
 while (1) {
  i7 = i2 + -48 | 0;
  i8 = (i2 | 0) == 46;
  if (i7 >>> 0 >= 10) if (!(i8 | ((i2 | 32) + -97 | 0) >>> 0 < 6)) break;
  if (i8) if (!i12) {
   i12 = 1;
   i7 = i13;
   d4 = d9;
   i2 = i14;
   i5 = i6;
   i3 = i10;
  } else {
   i2 = 46;
   break;
  } else {
   i2 = (i2 | 0) > 57 ? (i2 | 32) + -87 | 0 : i7;
   do if ((i10 | 0) < 0 | (i10 | 0) == 0 & i6 >>> 0 < 8) {
    i7 = i13;
    d4 = d9;
    i2 = i2 + (i14 << 4) | 0;
   } else if ((i10 | 0) < 0 | (i10 | 0) == 0 & i6 >>> 0 < 14) {
    d9 = d9 * .0625;
    i7 = i13;
    d4 = d9;
    d1 = d1 + d9 * +(i2 | 0);
    i2 = i14;
    break;
   } else {
    i2 = (i13 | 0) != 0 | (i2 | 0) == 0;
    i7 = i2 ? i13 : 1;
    d4 = d9;
    d1 = i2 ? d1 : d1 + d9 * .5;
    i2 = i14;
    break;
   } while (0);
   i6 = _i64Add(i6 | 0, i10 | 0, 1, 0) | 0;
   i11 = 1;
   i10 = tempRet0;
  }
  i8 = HEAP32[i18 >> 2] | 0;
  if (i8 >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) {
   HEAP32[i18 >> 2] = i8 + 1;
   i13 = i7;
   d9 = d4;
   i14 = i2;
   i2 = HEAPU8[i8 >> 0] | 0;
   continue;
  } else {
   i13 = i7;
   d9 = d4;
   i14 = i2;
   i2 = ___shgetc(i16) | 0;
   continue;
  }
 }
 do if (!i11) {
  i2 = HEAP32[i15 >> 2] | 0;
  i3 = (i2 | 0) != 0;
  if (i3) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
  if (!i17) ___shlim(i16, 0); else {
   if (i3) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
   if (!((i12 | 0) == 0 | (i2 | 0) == 0)) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
  }
  d1 = +(i21 | 0) * 0.0;
 } else {
  i7 = (i12 | 0) == 0;
  i8 = i7 ? i6 : i5;
  i7 = i7 ? i10 : i3;
  if ((i10 | 0) < 0 | (i10 | 0) == 0 & i6 >>> 0 < 8) {
   i3 = i14;
   i5 = i10;
   do {
    i3 = i3 << 4;
    i6 = _i64Add(i6 | 0, i5 | 0, 1, 0) | 0;
    i5 = tempRet0;
   } while ((i5 | 0) < 0 | (i5 | 0) == 0 & i6 >>> 0 < 8);
   i6 = i3;
  } else i6 = i14;
  if ((i2 | 32 | 0) == 112) {
   i3 = _scanexp(i16, i17) | 0;
   i2 = tempRet0;
   if ((i3 | 0) == 0 & (i2 | 0) == -2147483648) {
    if (!i17) {
     ___shlim(i16, 0);
     d1 = 0.0;
     break;
    }
    if (!(HEAP32[i15 >> 2] | 0)) {
     i3 = 0;
     i2 = 0;
    } else {
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
     i3 = 0;
     i2 = 0;
    }
   }
  } else if (!(HEAP32[i15 >> 2] | 0)) {
   i3 = 0;
   i2 = 0;
  } else {
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
   i3 = 0;
   i2 = 0;
  }
  i5 = _bitshift64Shl(i8 | 0, i7 | 0, 2) | 0;
  i5 = _i64Add(i5 | 0, tempRet0 | 0, -32, -1) | 0;
  i5 = _i64Add(i5 | 0, tempRet0 | 0, i3 | 0, i2 | 0) | 0;
  i2 = tempRet0;
  if (!i6) {
   d1 = +(i21 | 0) * 0.0;
   break;
  }
  i18 = 0 - i19 | 0;
  i17 = ((i18 | 0) < 0) << 31 >> 31;
  if ((i2 | 0) > (i17 | 0) | (i2 | 0) == (i17 | 0) & i5 >>> 0 > i18 >>> 0) {
   i20 = ___errno_location() | 0;
   HEAP32[i20 >> 2] = 34;
   d1 = +(i21 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  i18 = i19 + -106 | 0;
  i17 = ((i18 | 0) < 0) << 31 >> 31;
  if ((i2 | 0) < (i17 | 0) | (i2 | 0) == (i17 | 0) & i5 >>> 0 < i18 >>> 0) {
   i20 = ___errno_location() | 0;
   HEAP32[i20 >> 2] = 34;
   d1 = +(i21 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if ((i6 | 0) > -1) {
   i3 = i6;
   do {
    i18 = !(d1 >= .5);
    i3 = i3 << 1 | (i18 ^ 1) & 1;
    d1 = d1 + (i18 ? d1 : d1 + -1.0);
    i5 = _i64Add(i5 | 0, i2 | 0, -1, -1) | 0;
    i2 = tempRet0;
   } while ((i3 | 0) > -1);
   d9 = d1;
   i6 = i3;
  } else d9 = d1;
  i18 = ((i20 | 0) < 0) << 31 >> 31;
  i19 = _i64Subtract(32, 0, i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0) | 0;
  i2 = _i64Add(i19 | 0, tempRet0 | 0, i5 | 0, i2 | 0) | 0;
  i19 = tempRet0;
  if ((i18 | 0) > (i19 | 0) | (i18 | 0) == (i19 | 0) & i20 >>> 0 > i2 >>> 0) if ((i2 | 0) > 0) i7 = 59; else {
   i3 = 0;
   i2 = 84;
   i7 = 61;
  } else {
   i2 = i20;
   i7 = 59;
  }
  if ((i7 | 0) == 59) if ((i2 | 0) < 53) {
   i3 = i2;
   i2 = 84 - i2 | 0;
   i7 = 61;
  } else {
   d4 = 0.0;
   d1 = +(i21 | 0);
  }
  if ((i7 | 0) == 61) {
   d1 = +(i21 | 0);
   d4 = +_copysignl(+_scalbn(1.0, i2), d1);
   i2 = i3;
  }
  i21 = (i6 & 1 | 0) == 0 & (d9 != 0.0 & (i2 | 0) < 32);
  d1 = d1 * (i21 ? 0.0 : d9) + (d4 + d1 * +(((i21 & 1) + i6 | 0) >>> 0)) - d4;
  if (!(d1 != 0.0)) {
   i21 = ___errno_location() | 0;
   HEAP32[i21 >> 2] = 34;
  }
  d1 = +_scalbnl(d1, i5);
 } while (0);
 return +d1;
}

function _TT_Set_MM_Blend(i19, i3, i17) {
 i19 = i19 | 0;
 i3 = i3 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i22 + 28 | 0;
 i4 = i22 + 24 | 0;
 i8 = i22 + 4 | 0;
 i20 = i22;
 HEAP32[i20 >> 2] = 0;
 i21 = HEAP32[i19 + 100 >> 2] | 0;
 i18 = i19 + 672 | 0;
 HEAP8[i18 >> 0] = 0;
 i1 = i19 + 676 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 do if (!i2) {
  i16 = _TT_Get_MM_Var(i19, 0) | 0;
  HEAP32[i20 >> 2] = i16;
  if (!i16) {
   i16 = HEAP32[i1 >> 2] | 0;
   break;
  } else {
   i21 = HEAP32[i20 >> 2] | 0;
   STACKTOP = i22;
   return i21 | 0;
  }
 } else i16 = i2; while (0);
 i2 = i16 + 8 | 0;
 i14 = HEAP32[i2 >> 2] | 0;
 i15 = HEAP32[i14 >> 2] | 0;
 i15 = i15 >>> 0 < i3 >>> 0 ? i15 : i3;
 i12 = (i15 | 0) == 0;
 L7 : do if (!i12) {
  i1 = 0;
  while (1) {
   if (((HEAP32[i17 + (i1 << 2) >> 2] | 0) + 65536 | 0) >>> 0 > 131072) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i15 >>> 0) break L7;
  }
  HEAP32[i20 >> 2] = 6;
  i21 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i22;
  return i21 | 0;
 } while (0);
 i5 = i16 + 36 | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  i11 = HEAP32[i19 + 104 >> 2] | 0;
  i6 = HEAP32[i11 + 28 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i19 + 508 >> 2] & 127](i19, 1735811442, i11, i4) | 0;
  HEAP32[i13 >> 2] = i1;
  do if (!i1) {
   i7 = _FT_Stream_Pos(i11) | 0;
   i1 = _FT_Stream_ReadFields(i11, 114612, i8) | 0;
   HEAP32[i13 >> 2] = i1;
   if (!i1) {
    i9 = i16 + 24 | 0;
    HEAP32[i9 >> 2] = HEAPU16[i8 + 6 >> 1];
    i1 = HEAPU16[i8 + 12 >> 1] | 0;
    i3 = i16 + 32 | 0;
    HEAP32[i3 >> 2] = i1;
    i4 = (HEAP32[i8 + 16 >> 2] | 0) + i7 | 0;
    if ((HEAP32[i8 >> 2] | 0) != 65536) {
     HEAP32[i13 >> 2] = 8;
     i1 = 8;
     break;
    }
    i10 = i8 + 4 | 0;
    if ((HEAP16[i10 >> 1] | 0) != (HEAP32[HEAP32[i2 >> 2] >> 2] & 65535) << 16 >> 16) {
     HEAP32[i13 >> 2] = 8;
     i1 = 8;
     break;
    }
    i1 = _ft_mem_realloc(i6, 4, 0, i1 + 1 | 0, 0, i13) | 0;
    HEAP32[i5 >> 2] = i1;
    i1 = HEAP32[i13 >> 2] | 0;
    if (!i1) {
     i1 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
     if (!(HEAP16[i8 + 14 >> 1] & 1)) {
      i1 = _FT_Stream_EnterFrame(i11, i1 << 1) | 0;
      HEAP32[i13 >> 2] = i1;
      if (!i1) i1 = 0; else break;
      do {
       i2 = (((_FT_Stream_GetUShort(i11) | 0) & 65535) << 1) + i4 | 0;
       HEAP32[(HEAP32[i5 >> 2] | 0) + (i1 << 2) >> 2] = i2;
       i1 = i1 + 1 | 0;
      } while (i1 >>> 0 <= (HEAP32[i3 >> 2] | 0) >>> 0);
      _FT_Stream_ExitFrame(i11);
     } else {
      i1 = _FT_Stream_EnterFrame(i11, i1 << 2) | 0;
      HEAP32[i13 >> 2] = i1;
      if (!i1) i1 = 0; else break;
      do {
       i2 = (_FT_Stream_GetULong(i11) | 0) + i4 | 0;
       HEAP32[(HEAP32[i5 >> 2] | 0) + (i1 << 2) >> 2] = i2;
       i1 = i1 + 1 | 0;
      } while (i1 >>> 0 <= (HEAP32[i3 >> 2] | 0) >>> 0);
      _FT_Stream_ExitFrame(i11);
     }
     i1 = HEAP32[i9 >> 2] | 0;
     if (i1 | 0) {
      i1 = _ft_mem_realloc(i6, 4, 0, Math_imul(HEAPU16[i10 >> 1] | 0, i1) | 0, 0, i13) | 0;
      i4 = i16 + 28 | 0;
      HEAP32[i4 >> 2] = i1;
      i1 = HEAP32[i13 >> 2] | 0;
      if (i1 | 0) break;
      i1 = _FT_Stream_Seek(i11, (HEAP32[i8 + 8 >> 2] | 0) + i7 | 0) | 0;
      HEAP32[i13 >> 2] = i1;
      if (i1 | 0) break;
      i1 = _FT_Stream_EnterFrame(i11, Math_imul(HEAP32[i9 >> 2] << 1, HEAPU16[i10 >> 1] | 0) | 0) | 0;
      HEAP32[i13 >> 2] = i1;
      if (i1 | 0) break;
      i1 = HEAP32[i9 >> 2] | 0;
      if (i1 | 0) {
       i3 = 0;
       i2 = HEAP16[i10 >> 1] | 0;
       do {
        if (!(i2 << 16 >> 16)) i2 = 0; else {
         i1 = 0;
         do {
          i6 = (_FT_Stream_GetUShort(i11) | 0) << 16 >> 16 << 2;
          i2 = HEAP16[i10 >> 1] | 0;
          i8 = i2 & 65535;
          i7 = (HEAP32[i4 >> 2] | 0) + ((Math_imul(i8, i3) | 0) + i1 << 2) | 0;
          HEAP32[i7 >> 2] = i6;
          i1 = i1 + 1 | 0;
         } while (i1 >>> 0 < i8 >>> 0);
         i1 = HEAP32[i9 >> 2] | 0;
        }
        i3 = i3 + 1 | 0;
       } while (i3 >>> 0 < i1 >>> 0);
      }
      _FT_Stream_ExitFrame(i11);
     }
     i1 = HEAP32[i13 >> 2] | 0;
    }
   }
  } while (0);
  HEAP32[i20 >> 2] = i1;
  if (i1 | 0) {
   i21 = HEAP32[i20 >> 2] | 0;
   STACKTOP = i22;
   return i21 | 0;
  }
 }
 i2 = i16 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 L55 : do if (!i1) {
  i1 = _ft_mem_realloc(i21, 4, 0, HEAP32[i14 >> 2] | 0, 0, i20) | 0;
  HEAP32[i2 >> 2] = i1;
  if (!(HEAP32[i20 >> 2] | 0)) {
   i4 = 1;
   i2 = HEAP32[i14 >> 2] | 0;
   break;
  } else {
   i21 = HEAP32[i20 >> 2] | 0;
   STACKTOP = i22;
   return i21 | 0;
  }
 } else {
  L61 : do if (i12) {
   i4 = 0;
   i2 = 0;
  } else {
   i2 = 0;
   while (1) {
    if ((HEAP32[i1 + (i2 << 2) >> 2] | 0) != (HEAP32[i17 + (i2 << 2) >> 2] | 0)) {
     i4 = 2;
     break L61;
    }
    i2 = i2 + 1 | 0;
    if (i2 >>> 0 >= i15 >>> 0) {
     i4 = 0;
     break;
    }
   }
  } while (0);
  i3 = HEAP32[i14 >> 2] | 0;
  if (i2 >>> 0 < i3 >>> 0) while (1) {
   if (HEAP32[i1 + (i2 << 2) >> 2] | 0) {
    i4 = 2;
    i2 = i3;
    break L55;
   }
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i3 >>> 0) {
    i2 = i3;
    break;
   }
  } else i2 = i3;
 } while (0);
 HEAP32[i16 >> 2] = i2;
 _memcpy(i1 | 0, i17 | 0, i15 << 2 | 0) | 0;
 HEAP8[i18 >> 0] = 1;
 i1 = i19 + 648 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  i21 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 switch (i4 | 0) {
 case 2:
  {
   _ft_mem_free(i21, i2);
   HEAP32[i1 >> 2] = 0;
   i21 = _tt_face_load_cvt(i19, HEAP32[i19 + 104 >> 2] | 0) | 0;
   HEAP32[i20 >> 2] = i21;
   i21 = HEAP32[i20 >> 2] | 0;
   STACKTOP = i22;
   return i21 | 0;
  }
 case 1:
  {
   i21 = _tt_face_vary_cvt(i19, HEAP32[i19 + 104 >> 2] | 0) | 0;
   HEAP32[i20 >> 2] = i21;
   i21 = HEAP32[i20 >> 2] | 0;
   STACKTOP = i22;
   return i21 | 0;
  }
 default:
  {
   i21 = HEAP32[i20 >> 2] | 0;
   STACKTOP = i22;
   return i21 | 0;
  }
 }
 return 0;
}

function _tt_cmap4_char_map_binary(i23, i24, i1) {
 i23 = i23 | 0;
 i24 = i24 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i2 = HEAP32[i23 + 16 >> 2] | 0;
 i20 = HEAP8[i2 + 7 >> 0] & -2 & 255 | (HEAPU8[i2 + 6 >> 0] | 0) << 8;
 if (!i20) {
  i24 = 0;
  return i24 | 0;
 }
 i22 = i20 >>> 1;
 i21 = i1 << 24 >> 24 != 0;
 i1 = (HEAP32[i24 >> 2] | 0) + (i21 & 1) | 0;
 i19 = i20 + 2 | 0;
 i18 = i2 + 14 | 0;
 i4 = 65535;
 i2 = i22;
 i6 = 0;
 i3 = i22;
 L4 : while (1) {
  while (1) {
   if (i6 >>> 0 >= i2 >>> 0) {
    i2 = 0;
    break L4;
   }
   i3 = (i2 + i6 | 0) >>> 1;
   i5 = i18 + (i3 << 1) | 0;
   i4 = (HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i5 + 1 >> 0] | 0);
   i5 = i5 + i19 | 0;
   i17 = (HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i5 + 1 >> 0] | 0);
   if (i1 >>> 0 >= i17 >>> 0) break; else i2 = i3;
  }
  if (i1 >>> 0 <= i4 >>> 0) {
   i7 = 8;
   break;
  }
  i6 = i3 + 1 | 0;
 }
 do if ((i7 | 0) == 8) {
  i9 = i5 + i20 | 0;
  i16 = ((HEAPU8[i9 >> 0] | 0) << 8 | (HEAPU8[i9 + 1 >> 0] | 0)) << 16 >> 16;
  i9 = i9 + i20 | 0;
  i15 = (HEAPU8[i9 >> 0] | 0) << 8 | (HEAPU8[i9 + 1 >> 0] | 0);
  if ((i4 | 0) == 65535 & (i3 >>> 0 >= (i22 + -1 | 0) >>> 0 & (i17 | 0) == 65535)) {
   i2 = HEAP32[i23 >> 2] | 0;
   if (!i15) {
    i5 = 0;
    i2 = i16;
   } else {
    i2 = (i9 + i15 + 2 | 0) >>> 0 > ((HEAP32[i2 + 500 >> 2] | 0) + (HEAP32[i2 + 504 >> 2] | 0) | 0) >>> 0;
    i5 = i2 ? 0 : i15;
    i2 = i2 ? 1 : i16;
   }
  } else {
   i5 = i15;
   i2 = i16;
  }
  i7 = (i5 | 0) == 65535;
  if (!(HEAP32[i23 + 20 >> 2] & 2)) if (i7) {
   i2 = 0;
   break;
  } else {
   i7 = i17;
   i6 = i9;
  } else {
   i6 = i3 + 1 | 0;
   i8 = i7 ? i6 : i3;
   L20 : do if (!i3) {
    i7 = i17;
    i10 = 0;
    i12 = i4;
   } else {
    i7 = i17;
    i13 = i3;
    i11 = i9;
    i14 = i4;
    while (1) {
     i10 = i13;
     i13 = i13 + -1 | 0;
     i9 = i18 + (i13 << 1) | 0;
     i12 = (HEAPU8[i9 >> 0] | 0) << 8 | (HEAPU8[i9 + 1 >> 0] | 0);
     if (i1 >>> 0 > i12 >>> 0) {
      i9 = i11;
      i12 = i14;
      break L20;
     }
     i9 = i9 + i19 | 0;
     i7 = (HEAPU8[i9 >> 0] | 0) << 8 | (HEAPU8[i9 + 1 >> 0] | 0);
     i9 = i9 + i20 | 0;
     i2 = ((HEAPU8[i9 >> 0] | 0) << 8 | (HEAPU8[i9 + 1 >> 0] | 0)) << 16 >> 16;
     i9 = i9 + i20 | 0;
     i5 = (HEAPU8[i9 >> 0] | 0) << 8 | (HEAPU8[i9 + 1 >> 0] | 0);
     i8 = (i5 | 0) == 65535 ? i8 : i13;
     if (!i13) {
      i10 = 0;
      break;
     } else {
      i11 = i9;
      i14 = i12;
     }
    }
   } while (0);
   if ((i8 | 0) == (i6 | 0)) {
    i8 = (i10 | 0) == (i3 | 0);
    i4 = i8 ? i12 : i4;
    if (i6 >>> 0 >= i22 >>> 0) {
     i2 = 0;
     break;
    }
    i11 = i8 ? i7 : i17;
    i5 = i8 ? i5 : i15;
    i2 = i8 ? i2 : i16;
    i7 = i3;
    while (1) {
     i8 = i18 + (i6 << 1) | 0;
     i9 = i8 + i19 | 0;
     i10 = (HEAPU8[i9 >> 0] | 0) << 8 | (HEAPU8[i9 + 1 >> 0] | 0);
     if (i1 >>> 0 < i10 >>> 0) {
      i8 = i9;
      break;
     }
     i4 = (HEAPU8[i8 >> 0] | 0) << 8 | (HEAPU8[i8 + 1 >> 0] | 0);
     i8 = i9 + i20 | 0;
     i2 = ((HEAPU8[i8 >> 0] | 0) << 8 | (HEAPU8[i8 + 1 >> 0] | 0)) << 16 >> 16;
     i8 = i8 + i20 | 0;
     i5 = (HEAPU8[i8 >> 0] | 0) << 8 | (HEAPU8[i8 + 1 >> 0] | 0);
     i7 = (i5 | 0) == 65535 ? i7 : i6;
     i6 = i6 + 1 | 0;
     if (i6 >>> 0 < i22 >>> 0) i11 = i10; else {
      i11 = i10;
      break;
     }
    }
    i6 = i6 + -1 | 0;
    if ((i7 | 0) == (i3 | 0)) {
     i2 = 0;
     i3 = i6;
     break;
    } else {
     i3 = i7;
     i10 = i6;
     i7 = i11;
     i6 = i8;
    }
   } else {
    i3 = i8;
    i6 = i9;
    i4 = i12;
   }
   if ((i3 | 0) != (i10 | 0)) {
    i4 = i18 + (i3 << 1) | 0;
    i7 = i4 + i19 | 0;
    i2 = i7 + i20 | 0;
    i5 = i2 + i20 | 0;
    i7 = (HEAPU8[i7 >> 0] | 0) << 8 | (HEAPU8[i7 + 1 >> 0] | 0);
    i6 = i5;
    i4 = (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0);
    i5 = (HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i5 + 1 >> 0] | 0);
    i2 = ((HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0)) << 16 >> 16;
   }
  }
  if (!i5) {
   i2 = i2 + i1 & 65535;
   break;
  } else {
   i20 = i6 + ((i1 - i7 << 1) + i5) | 0;
   i20 = (HEAPU8[i20 >> 0] | 0) << 8 | (HEAPU8[i20 + 1 >> 0] | 0);
   i2 = (i20 | 0) == 0 ? 0 : i20 + i2 & 65535;
   break;
  }
 } while (0);
 if (!i21) {
  i24 = i2;
  return i24 | 0;
 }
 if (i1 >>> 0 > i4 >>> 0) {
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i22 | 0)) {
   i24 = 0;
   return i24 | 0;
  }
 }
 i4 = (i2 | 0) != 0;
 if (_tt_cmap4_set_range(i23, i3) | 0) {
  if (!i4) {
   i24 = 0;
   return i24 | 0;
  }
  HEAP32[i24 >> 2] = i1;
  i24 = i2;
  return i24 | 0;
 }
 i11 = i23 + 24 | 0;
 HEAP32[i11 >> 2] = i1;
 L53 : do if (!i4) {
  L55 : do if (i1 >>> 0 <= 65534) {
   i1 = i1 + 1 | 0;
   i6 = i23 + 40 | 0;
   i3 = HEAP32[i6 >> 2] | 0;
   i7 = i23 + 52 | 0;
   i8 = i23 + 44 | 0;
   i9 = i23 + 48 | 0;
   i10 = i23 + 36 | 0;
   i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
   L57 : while (1) {
    i2 = HEAP32[i7 >> 2] | 0;
    i4 = HEAP32[i8 >> 2] | 0;
    i5 = HEAP32[i9 >> 2] | 0;
    L59 : do if (i1 >>> 0 <= i4 >>> 0) {
     if (!i2) while (1) {
      i2 = i1 + i5 & 65535;
      if (i2 | 0) break L57;
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 > i4 >>> 0) break L59;
     }
     i3 = i2 + (i1 - i3 << 1) | 0;
     do {
      i2 = (HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i3 + 1 >> 0] | 0);
      i3 = i3 + 2 | 0;
      if (i2 | 0) {
       i2 = i2 + i5 & 65535;
       if (i2 | 0) break L57;
      }
      i1 = i1 + 1 | 0;
     } while (i1 >>> 0 <= i4 >>> 0);
    } while (0);
    if ((_tt_cmap4_set_range(i23, (HEAP32[i10 >> 2] | 0) + 1 | 0) | 0) < 0) break L55;
    i3 = HEAP32[i6 >> 2] | 0;
    i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
   }
   HEAP32[i11 >> 2] = i1;
   break L53;
  } while (0);
  HEAP32[i11 >> 2] = -1;
  HEAP32[i23 + 28 >> 2] = 0;
  i24 = 0;
  return i24 | 0;
 } while (0);
 HEAP32[i23 + 28 >> 2] = i2;
 HEAP32[i24 >> 2] = i1;
 i24 = i2;
 return i24 | 0;
}

function _ps_parser_to_coord_array(i10, i6, i7) {
 i10 = i10 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i11;
 i8 = HEAP32[i10 + 8 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i2 = i1;
 L1 : do if (i2 >>> 0 < i8 >>> 0) while (1) {
  switch (HEAP8[i2 >> 0] | 0) {
  case 0:
  case 12:
  case 9:
  case 10:
  case 13:
  case 32:
   break;
  case 37:
   {
    i1 = i2;
    i2 = 37;
    L5 : while (1) {
     switch (i2 << 24 >> 24) {
     case 10:
     case 13:
      break L5;
     default:
      {}
     }
     i2 = i1 + 1 | 0;
     if (i2 >>> 0 >= i8 >>> 0) {
      i1 = i2;
      break;
     }
     i1 = i2;
     i2 = HEAP8[i2 >> 0] | 0;
    }
    break;
   }
  default:
   break L1;
  }
  i2 = i1 + 1 | 0;
  i1 = i2;
  if (i2 >>> 0 >= i8 >>> 0) break L1;
 } while (0);
 HEAP32[i10 >> 2] = i1;
 i2 = i1;
 HEAP32[i9 >> 2] = i2;
 L12 : do if (i2 >>> 0 < i8 >>> 0) {
  i5 = HEAP8[i2 >> 0] | 0;
  i5 = i5 << 24 >> 24 == 91 ? 93 : i5 << 24 >> 24 == 123 ? 125 : 0;
  i3 = i5 << 24 >> 24 != 0;
  if (i3) {
   i1 = i2 + 1 | 0;
   HEAP32[i9 >> 2] = i1;
   i2 = i1;
  }
  L17 : do if (!i7) if (i3) {
   i3 = 0;
   while (1) {
    if (i2 >>> 0 >= i8 >>> 0) break L12;
    i2 = i1;
    L23 : do if (i2 >>> 0 < i8 >>> 0) while (1) {
     switch (HEAP8[i2 >> 0] | 0) {
     case 0:
     case 12:
     case 9:
     case 10:
     case 13:
     case 32:
      break;
     case 37:
      {
       i1 = i2;
       i2 = 37;
       L27 : while (1) {
        switch (i2 << 24 >> 24) {
        case 10:
        case 13:
         break L27;
        default:
         {}
        }
        i2 = i1 + 1 | 0;
        if (i2 >>> 0 >= i8 >>> 0) {
         i1 = i2;
         break;
        }
        i1 = i2;
        i2 = HEAP8[i2 >> 0] | 0;
       }
       break;
      }
     default:
      break L23;
     }
     i2 = i1 + 1 | 0;
     i1 = i2;
     if (i2 >>> 0 >= i8 >>> 0) break L23;
    } while (0);
    HEAP32[i9 >> 2] = i1;
    i4 = i1;
    if (i4 >>> 0 >= i8 >>> 0) break L12;
    if ((HEAP8[i4 >> 0] | 0) == i5 << 24 >> 24) {
     i1 = i4;
     break L17;
    }
    _PS_Conv_ToFixed(i9, i8, 0) | 0;
    i2 = HEAP32[i9 >> 2] | 0;
    i1 = i2;
    if ((i4 | 0) == (i2 | 0)) {
     i3 = -1;
     break L12;
    } else i3 = i3 + 1 | 0;
   }
  } else {
   if (i2 >>> 0 >= i8 >>> 0) {
    i3 = 0;
    break L12;
   }
   i2 = i1;
   L38 : do if (i2 >>> 0 < i8 >>> 0) while (1) {
    switch (HEAP8[i2 >> 0] | 0) {
    case 0:
    case 12:
    case 9:
    case 10:
    case 13:
    case 32:
     break;
    case 37:
     {
      i1 = i2;
      i2 = 37;
      L42 : while (1) {
       switch (i2 << 24 >> 24) {
       case 10:
       case 13:
        break L42;
       default:
        {}
       }
       i2 = i1 + 1 | 0;
       if (i2 >>> 0 >= i8 >>> 0) {
        i1 = i2;
        break;
       }
       i1 = i2;
       i2 = HEAP8[i2 >> 0] | 0;
      }
      break;
     }
    default:
     break L38;
    }
    i2 = i1 + 1 | 0;
    i1 = i2;
    if (i2 >>> 0 >= i8 >>> 0) break L38;
   } while (0);
   HEAP32[i9 >> 2] = i1;
   i2 = i1;
   if (i2 >>> 0 >= i8 >>> 0) {
    i3 = 0;
    break L12;
   }
   if (!(HEAP8[i2 >> 0] | 0)) {
    i3 = 0;
    i1 = i2;
    break;
   }
   _PS_Conv_ToFixed(i9, i8, 0) | 0;
   i1 = HEAP32[i9 >> 2] | 0;
   i3 = (i2 | 0) == (i1 | 0) ? -1 : 1;
   break L12;
  } else if (i3) {
   i3 = 0;
   while (1) {
    if (i2 >>> 0 >= i8 >>> 0) break L12;
    i2 = i1;
    L56 : do if (i2 >>> 0 < i8 >>> 0) while (1) {
     switch (HEAP8[i2 >> 0] | 0) {
     case 0:
     case 12:
     case 9:
     case 10:
     case 13:
     case 32:
      break;
     case 37:
      {
       i1 = i2;
       i2 = 37;
       L60 : while (1) {
        switch (i2 << 24 >> 24) {
        case 10:
        case 13:
         break L60;
        default:
         {}
        }
        i2 = i1 + 1 | 0;
        if (i2 >>> 0 >= i8 >>> 0) {
         i1 = i2;
         break;
        }
        i1 = i2;
        i2 = HEAP8[i2 >> 0] | 0;
       }
       break;
      }
     default:
      break L56;
     }
     i2 = i1 + 1 | 0;
     i1 = i2;
     if (i2 >>> 0 >= i8 >>> 0) break L56;
    } while (0);
    HEAP32[i9 >> 2] = i1;
    i4 = i1;
    if (i4 >>> 0 >= i8 >>> 0) break L12;
    if ((HEAP8[i4 >> 0] | 0) == i5 << 24 >> 24) {
     i1 = i4;
     break L17;
    }
    if ((i3 | 0) >= (i6 | 0)) break L12;
    i2 = (_PS_Conv_ToFixed(i9, i8, 0) | 0) >>> 16 & 65535;
    HEAP16[i7 + (i3 << 1) >> 1] = i2;
    i2 = HEAP32[i9 >> 2] | 0;
    i1 = i2;
    if ((i4 | 0) == (i2 | 0)) {
     i3 = -1;
     break L12;
    } else i3 = i3 + 1 | 0;
   }
  } else {
   if (i2 >>> 0 >= i8 >>> 0) {
    i3 = 0;
    break L12;
   }
   i2 = i1;
   L72 : do if (i2 >>> 0 < i8 >>> 0) while (1) {
    switch (HEAP8[i2 >> 0] | 0) {
    case 0:
    case 12:
    case 9:
    case 10:
    case 13:
    case 32:
     break;
    case 37:
     {
      i1 = i2;
      i2 = 37;
      L76 : while (1) {
       switch (i2 << 24 >> 24) {
       case 10:
       case 13:
        break L76;
       default:
        {}
       }
       i2 = i1 + 1 | 0;
       if (i2 >>> 0 >= i8 >>> 0) {
        i1 = i2;
        break;
       }
       i1 = i2;
       i2 = HEAP8[i2 >> 0] | 0;
      }
      break;
     }
    default:
     break L72;
    }
    i2 = i1 + 1 | 0;
    i1 = i2;
    if (i2 >>> 0 >= i8 >>> 0) break L72;
   } while (0);
   HEAP32[i9 >> 2] = i1;
   i2 = i1;
   if (i2 >>> 0 >= i8 >>> 0) {
    i3 = 0;
    break L12;
   }
   if (!(HEAP8[i2 >> 0] | 0)) {
    i3 = 0;
    i1 = i2;
    break;
   }
   if ((i6 | 0) <= 0) {
    i3 = 0;
    break L12;
   }
   i1 = (_PS_Conv_ToFixed(i9, i8, 0) | 0) >>> 16 & 65535;
   HEAP16[i7 >> 1] = i1;
   i1 = HEAP32[i9 >> 2] | 0;
   i3 = (i2 | 0) == (i1 | 0) ? -1 : 1;
   break L12;
  } while (0);
  i1 = i1 + 1 | 0;
  HEAP32[i9 >> 2] = i1;
 } else i3 = 0; while (0);
 HEAP32[i10 >> 2] = i1;
 STACKTOP = i11;
 return i3 | 0;
}

function _tt_face_load_sbit_image(i5, i4, i10, i8, i11, i9, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i13 = i14 + 48 | 0;
 i7 = i14;
 switch (HEAP32[i5 + 732 >> 2] | 0) {
 case 2:
 case 1:
  {
   i2 = HEAP32[i5 + 104 >> 2] | 0;
   i1 = i5 + 508 | 0;
   if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, 1128416340, i2, i13) | 0)) i12 = 5; else if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, 1161970772, i2, i13) | 0)) i12 = 5; else {
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, 1650745716, i2, i13) | 0;
    if (!i1) i12 = 5;
   }
   if ((i12 | 0) == 5) {
    HEAP32[i7 >> 2] = i5;
    HEAP32[i7 + 4 >> 2] = i2;
    i6 = i5 + 84 | 0;
    HEAP32[i7 + 8 >> 2] = (HEAP32[i6 >> 2] | 0) + 76;
    HEAP32[i7 + 12 >> 2] = i3;
    HEAP8[i7 + 16 >> 0] = 0;
    HEAP8[i7 + 17 >> 0] = 0;
    i2 = _FT_Stream_Pos(i2) | 0;
    HEAP32[i7 + 20 >> 2] = i2;
    HEAP32[i7 + 24 >> 2] = HEAP32[i13 >> 2];
    i2 = HEAP32[i5 + 724 >> 2] | 0;
    HEAP32[i7 + 36 >> 2] = i2;
    i3 = HEAP32[i5 + 728 >> 2] | 0;
    HEAP32[i7 + 40 >> 2] = i2 + i3;
    i1 = i4 * 48 | 0;
    if (((i1 | 8) + 47 | 0) >>> 0 > i3 >>> 0) i1 = 3; else {
     i12 = i2 + 8 + i1 + 4 | 0;
     i1 = i12 + -4 | 0;
     i1 = HEAPU8[i1 + 1 >> 0] << 16 | HEAPU8[i1 >> 0] << 24 | HEAPU8[i1 + 2 >> 0] << 8 | HEAPU8[i1 + 3 >> 0];
     HEAP32[i7 + 28 >> 2] = i1;
     i12 = i12 + 4 + 4 | 0;
     i2 = i12 + -4 | 0;
     i2 = HEAPU8[i2 + 1 >> 0] << 16 | HEAPU8[i2 >> 0] << 24 | HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0];
     HEAP32[i7 + 32 >> 2] = i2;
     HEAP8[i7 + 18 >> 0] = HEAP8[i12 + 34 >> 0] | 0;
     if (i3 >>> 0 < i1 >>> 0) i1 = 3; else if (i2 >>> 0 > (i3 - i1 | 0) >>> 3 >>> 0) i1 = 3; else {
      i1 = _tt_sbit_decoder_load_image(i7, i10, 0, 0) | 0;
      if (i1 | i8 & 1048576 | 0) {
       i13 = i1;
       STACKTOP = i14;
       return i13 | 0;
      }
      i1 = i9 + 18 | 0;
      if ((HEAP8[i1 >> 0] | 0) != 7) {
       i13 = 0;
       STACKTOP = i14;
       return i13 | 0;
      }
      i2 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0;
      _FT_Bitmap_Init(i13);
      i3 = _FT_Bitmap_Convert(i2, i9, i13, 1) | 0;
      if (!i3) {
       HEAP8[i1 >> 0] = HEAP8[i13 + 18 >> 0] | 0;
       HEAP32[i9 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
       HEAP16[i9 + 16 >> 1] = HEAP16[i13 + 16 >> 1] | 0;
       _ft_glyphslot_set_bitmap(HEAP32[i6 >> 2] | 0, HEAP32[i13 + 12 >> 2] | 0);
       i13 = (HEAP32[(HEAP32[i6 >> 2] | 0) + 156 >> 2] | 0) + 4 | 0;
       HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1;
      } else _FT_Bitmap_Done(i2, i13) | 0;
      i13 = i3;
      STACKTOP = i14;
      return i13 | 0;
     }
    }
   }
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  }
 case 3:
  {
   HEAP16[i3 + 2 >> 1] = 0;
   HEAP16[i3 >> 1] = 0;
   i8 = (HEAP32[i5 + 724 >> 2] | 0) + 8 + (i4 << 2) + 4 + -4 | 0;
   i8 = HEAPU8[i8 + 1 >> 0] << 16 | HEAPU8[i8 >> 0] << 24 | HEAPU8[i8 + 2 >> 0] << 8 | HEAPU8[i8 + 3 >> 0];
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i5 + 508 >> 2] & 127](i5, 1935829368, i11, i13) | 0;
   L25 : do if (!i1) {
    i1 = _FT_Stream_Pos(i11) | 0;
    i7 = i5 + 16 | 0;
    if ((HEAP32[i7 >> 2] | 0) >>> 0 < i10 >>> 0) i1 = 6; else {
     i5 = i1 + i8 | 0;
     i6 = i5 + 4 | 0;
     i4 = 0;
     i1 = i10;
     L28 : while (1) {
      i2 = HEAP32[i13 >> 2] | 0;
      if (i2 >>> 0 <= i8 >>> 0) {
       i1 = 3;
       break L25;
      }
      i1 = i1 << 2;
      if ((i2 - i8 | 0) >>> 0 < (i1 + 12 | 0) >>> 0) {
       i1 = 3;
       break L25;
      }
      i1 = _FT_Stream_Seek(i11, i6 + i1 | 0) | 0;
      if (i1 | 0) break L25;
      i1 = _FT_Stream_EnterFrame(i11, 8) | 0;
      if (i1 | 0) break L25;
      i1 = _FT_Stream_GetULong(i11) | 0;
      i2 = _FT_Stream_GetULong(i11) | 0;
      _FT_Stream_ExitFrame(i11);
      if ((i2 | 0) == (i1 | 0)) {
       i1 = 6;
       break L25;
      }
      if (i2 >>> 0 < i1 >>> 0) {
       i1 = 3;
       break L25;
      }
      i3 = i2 - i1 | 0;
      if (i3 >>> 0 < 8) {
       i1 = 3;
       break L25;
      }
      if (((HEAP32[i13 >> 2] | 0) - i8 | 0) >>> 0 < i2 >>> 0) {
       i1 = 3;
       break L25;
      }
      i1 = _FT_Stream_Seek(i11, i1 + i5 | 0) | 0;
      if (i1 | 0) break L25;
      i1 = _FT_Stream_EnterFrame(i11, i3) | 0;
      if (i1 | 0) break L25;
      _FT_Stream_GetUShort(i11) | 0;
      _FT_Stream_GetUShort(i11) | 0;
      i1 = _FT_Stream_GetULong(i11) | 0;
      if ((i1 | 0) >= 1919378028) {
       i12 = 36;
       break;
      }
      if ((i1 | 0) >= 1785751328) {
       i12 = 38;
       break;
      }
      switch (i1 | 0) {
      case 1685418085:
       break;
      default:
       {
        i1 = 7;
        break L28;
       }
      }
      if ((i4 | 0) >= 4) {
       i1 = 3;
       break;
      }
      i1 = (_FT_Stream_GetUShort(i11) | 0) & 65535;
      _FT_Stream_ExitFrame(i11);
      if (i1 >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) {
       i1 = 6;
       break L25;
      } else i4 = i4 + 1 | 0;
     }
     L44 : do if ((i12 | 0) == 36) if ((i1 | 0) < 1953064550) switch (i1 | 0) {
     case 1919378028:
      {
       i12 = 25;
       break L44;
      }
     default:
      {
       i1 = 7;
       break L44;
      }
     } else switch (i1 | 0) {
     case 1953064550:
      {
       i12 = 25;
       break L44;
      }
     default:
      {
       i1 = 7;
       break L44;
      }
     } else if ((i12 | 0) == 38) switch (i1 | 0) {
     case 1785751328:
      {
       i12 = 25;
       break;
      }
     default:
      i1 = 7;
     } while (0);
     if ((i12 | 0) == 25) i1 = 2;
     _FT_Stream_ExitFrame(i11);
    }
   } while (0);
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  }
 default:
  {
   i13 = 2;
   STACKTOP = i14;
   return i13 | 0;
  }
 }
 return 0;
}
function _tt_face_vary_cvt(i4, i21) {
 i4 = i4 | 0;
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i22 = i24 + 8 | 0;
 i1 = i24 + 4 | 0;
 i19 = i24;
 i23 = HEAP32[i21 + 28 >> 2] | 0;
 i20 = HEAP32[i4 + 676 >> 2] | 0;
 if (!i20) {
  HEAP32[i22 >> 2] = 0;
  i19 = 0;
  i20 = 0;
  i21 = 0;
  _ft_mem_free(i23, i19);
  _ft_mem_free(i23, i20);
  _ft_mem_free(i23, i21);
  i23 = HEAP32[i22 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 i18 = i4 + 648 | 0;
 if (!(HEAP32[i18 >> 2] | 0)) {
  HEAP32[i22 >> 2] = 0;
  i19 = 0;
  i20 = 0;
  i21 = 0;
  _ft_mem_free(i23, i19);
  _ft_mem_free(i23, i20);
  _ft_mem_free(i23, i21);
  i23 = HEAP32[i22 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 i17 = FUNCTION_TABLE_iiiii[HEAP32[i4 + 508 >> 2] & 127](i4, 1668702578, i21, i1) | 0;
 HEAP32[i22 >> 2] = i17;
 if (i17 | 0) {
  HEAP32[i22 >> 2] = 0;
  i19 = 0;
  i20 = 0;
  i21 = 0;
  _ft_mem_free(i23, i19);
  _ft_mem_free(i23, i20);
  _ft_mem_free(i23, i21);
  i23 = HEAP32[i22 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 i17 = _FT_Stream_EnterFrame(i21, HEAP32[i1 >> 2] | 0) | 0;
 HEAP32[i22 >> 2] = i17;
 if (i17 | 0) {
  HEAP32[i22 >> 2] = 0;
  i19 = 0;
  i20 = 0;
  i21 = 0;
  _ft_mem_free(i23, i19);
  _ft_mem_free(i23, i20);
  _ft_mem_free(i23, i21);
  i23 = HEAP32[i22 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 i16 = i21 + 32 | 0;
 i5 = (HEAP32[i16 >> 2] | 0) - (HEAP32[i21 >> 2] | 0) | 0;
 if ((_FT_Stream_GetULong(i21) | 0) == 65536) {
  i1 = _ft_mem_realloc(i23, 4, 0, HEAP32[i20 >> 2] | 0, 0, i22) | 0;
  if (!(HEAP32[i22 >> 2] | 0)) {
   i2 = _ft_mem_realloc(i23, 4, 0, HEAP32[i20 >> 2] | 0, 0, i22) | 0;
   if (!(HEAP32[i22 >> 2] | 0)) {
    i3 = _ft_mem_realloc(i23, 4, 0, HEAP32[i20 >> 2] | 0, 0, i22) | 0;
    if (!(HEAP32[i22 >> 2] | 0)) {
     i15 = _FT_Stream_GetUShort(i21) | 0;
     i6 = _FT_Stream_GetUShort(i21) | 0;
     i15 = i15 & 4095;
     i17 = i15 & 65535;
     if (i15 << 16 >> 16) {
      i15 = i4 + 644 | 0;
      i14 = 0;
      i11 = i5 + (i6 & 65535) | 0;
      while (1) {
       i12 = (_FT_Stream_GetUShort(i21) | 0) & 65535;
       i6 = _FT_Stream_GetUShort(i21) | 0;
       i7 = i6 & 65535;
       if (!(i7 & 32768)) {
        if (i7 & 16384 | 0) if (HEAP32[i20 >> 2] & 2147483647 | 0) {
         i4 = 0;
         do {
          _FT_Stream_GetUShort(i21) | 0;
          i4 = i4 + 1 | 0;
         } while (i4 >>> 0 < HEAP32[i20 >> 2] << 1 >>> 0);
        }
       } else {
        if (!(HEAP32[i20 >> 2] | 0)) i4 = 0; else {
         i5 = 0;
         do {
          i4 = (_FT_Stream_GetUShort(i21) | 0) << 16 >> 16 << 2;
          HEAP32[i1 + (i5 << 2) >> 2] = i4;
          i5 = i5 + 1 | 0;
          i4 = HEAP32[i20 >> 2] | 0;
         } while (i5 >>> 0 < i4 >>> 0);
        }
        if (!((i7 & 16384 | 0) == 0 | (i4 | 0) == 0)) {
         i4 = 0;
         do {
          i5 = (_FT_Stream_GetUShort(i21) | 0) << 16 >> 16 << 2;
          HEAP32[i2 + (i4 << 2) >> 2] = i5;
          i4 = i4 + 1 | 0;
          i5 = HEAP32[i20 >> 2] | 0;
         } while (i4 >>> 0 < i5 >>> 0);
         if (i5 | 0) {
          i4 = 0;
          do {
           i10 = (_FT_Stream_GetUShort(i21) | 0) << 16 >> 16 << 2;
           HEAP32[i3 + (i4 << 2) >> 2] = i10;
           i4 = i4 + 1 | 0;
          } while (i4 >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0);
         }
        }
        i10 = _ft_var_apply_tuple(i20, i6, i1, i2, i3) | 0;
        if (!((i7 & 8192 | 0) == 0 | (i10 | 0) == 0)) {
         i9 = HEAP32[i21 >> 2] | 0;
         i8 = (HEAP32[i16 >> 2] | 0) - i9 | 0;
         HEAP32[i16 >> 2] = i9 + i11;
         i9 = _ft_var_readpackedpoints(i21, i19) | 0;
         i6 = HEAP32[i19 >> 2] | 0;
         i5 = (i6 | 0) == 0;
         if (i5) i4 = HEAP32[i15 >> 2] | 0; else i4 = i6;
         i7 = _ft_var_readpackeddeltas(i21, i4) | 0;
         do if ((i9 | 0) == 0 | (i7 | 0) == 0) i13 = 37; else if ((i9 | 0) == (-1 | 0)) {
          if (!(HEAP32[i15 >> 2] | 0)) break;
          i4 = 0;
          i5 = HEAP32[i18 >> 2] | 0;
          do {
           i13 = HEAPU16[i5 + (i4 << 1) >> 1] | 0;
           i13 = (_FT_MulFix(HEAP16[i7 + (i4 << 1) >> 1] | 0, i10) | 0) + i13 & 65535;
           i5 = HEAP32[i18 >> 2] | 0;
           HEAP16[i5 + (i4 << 1) >> 1] = i13;
           i4 = i4 + 1 | 0;
          } while (i4 >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0);
          i13 = 37;
         } else {
          if (i5) {
           i13 = 38;
           break;
          }
          i4 = 0;
          i5 = HEAP32[i18 >> 2] | 0;
          do {
           i13 = HEAPU16[i9 + (i4 << 1) >> 1] | 0;
           i25 = HEAPU16[i5 + (i13 << 1) >> 1] | 0;
           i25 = (_FT_MulFix(HEAP16[i7 + (i4 << 1) >> 1] | 0, i10) | 0) + i25 & 65535;
           i5 = HEAP32[i18 >> 2] | 0;
           HEAP16[i5 + (i13 << 1) >> 1] = i25;
           i4 = i4 + 1 | 0;
          } while (i4 >>> 0 < i6 >>> 0);
          i13 = 37;
         } while (0);
         if ((i13 | 0) == 37) {
          i13 = 0;
          if ((i9 | 0) != (-1 | 0)) i13 = 38;
         }
         if ((i13 | 0) == 38) {
          i13 = 0;
          _ft_mem_free(i23, i9);
         }
         _ft_mem_free(i23, i7);
         HEAP32[i16 >> 2] = (HEAP32[i21 >> 2] | 0) + i8;
        }
       }
       i14 = i14 + 1 | 0;
       if ((i14 | 0) == (i17 | 0)) break; else i11 = i12 + i11 | 0;
      }
     }
    }
   } else i3 = 0;
  } else {
   i3 = 0;
   i2 = 0;
  }
 } else {
  HEAP32[i22 >> 2] = 0;
  i3 = 0;
  i2 = 0;
  i1 = 0;
 }
 _FT_Stream_ExitFrame(i21);
 i20 = i1;
 i21 = i2;
 i25 = i3;
 _ft_mem_free(i23, i20);
 _ft_mem_free(i23, i21);
 _ft_mem_free(i23, i25);
 i25 = HEAP32[i22 >> 2] | 0;
 STACKTOP = i24;
 return i25 | 0;
}

function _af_cjk_metrics_init(i17, i18) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 i21 = i25 + 204 | 0;
 i22 = i25;
 i23 = HEAP32[i18 + 92 >> 2] | 0;
 HEAP32[i17 + 40 >> 2] = HEAPU16[i18 + 68 >> 1];
 if (_FT_Select_Charmap(i18, 1970170211) | 0) {
  _FT_Set_Charmap(i18, i23) | 0;
  STACKTOP = i25;
  return 0;
 }
 _af_cjk_metrics_init_widths(i17, i18);
 i1 = 20344 + (HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] << 3) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != 759) {
  i19 = i18 + 84 | 0;
  i20 = i17 + 36 | 0;
  do {
   i16 = i1 + 4 | 0;
   i13 = (HEAPU16[i16 >> 1] | 0) >>> 1 & 1 ^ 1;
   i15 = 0;
   i14 = 0;
   i3 = 1;
   i2 = 283130 + i2 | 0;
   L8 : while (1) {
    while (1) {
     while (1) {
      i4 = HEAP8[i2 >> 0] | 0;
      if (!(i4 << 24 >> 24)) break L8;
      i7 = i2 + 1 | 0;
      i2 = i4 & 255;
      if (i4 << 24 >> 24 < 0) {
       i12 = (i4 & 255) < 224;
       i4 = (i4 & 255) < 240;
       i6 = i12 ? 1 : i4 ? 2 : 3;
       i5 = i6;
       i2 = (i12 ? 31 : i4 ? 15 : 7) & i2;
       i4 = i7;
       while (1) {
        i2 = HEAP8[i4 >> 0] & 63 | i2 << 6;
        i5 = i5 + -1 | 0;
        if (!i5) break; else i4 = i4 + 1 | 0;
       }
       i7 = i7 + i6 | 0;
      }
      if ((i2 | 0) == 124) {
       i3 = 0;
       i2 = i7;
      } else break;
     }
     i2 = _FT_Get_Char_Index(HEAP32[HEAP32[i20 >> 2] >> 2] | 0, i2) | 0;
     if (!i2) {
      i2 = i7;
      continue;
     }
     i12 = _FT_Load_Glyph(i18, i2, 1) | 0;
     i2 = HEAP32[i19 >> 2] | 0;
     if (i12 | 0) {
      i2 = i7;
      continue;
     }
     if ((HEAP16[i2 + 110 >> 1] | 0) < 1) i2 = i7; else break;
    }
    i12 = HEAP32[i2 + 120 >> 2] | 0;
    i11 = HEAP32[i2 + 112 >> 2] | 0;
    i10 = HEAP16[i2 + 108 >> 1] | 0;
    i9 = i10 << 16 >> 16;
    if (i10 << 16 >> 16 > 0) {
     i6 = 0;
     i8 = 0;
     i4 = -1;
     i2 = 0;
     while (1) {
      i10 = HEAP16[i12 + (i8 << 1) >> 1] | 0;
      if ((i10 | 0) > (i6 | 0)) {
       i26 = HEAPU16[i16 >> 1] | 0;
       i5 = (i26 & 1 | 0) != 0;
       if (!(i26 & 2)) if (i5) while (1) {
        i5 = HEAP32[i11 + (i6 << 3) + 4 >> 2] | 0;
        i26 = (i4 | 0) < 0 | (i5 | 0) > (i2 | 0);
        i2 = i26 ? i5 : i2;
        i4 = i26 ? i6 : i4;
        if ((i6 | 0) < (i10 | 0)) i6 = i6 + 1 | 0; else break;
       } else while (1) {
        i5 = HEAP32[i11 + (i6 << 3) + 4 >> 2] | 0;
        i26 = (i4 | 0) < 0 | (i5 | 0) < (i2 | 0);
        i2 = i26 ? i5 : i2;
        i4 = i26 ? i6 : i4;
        if ((i6 | 0) < (i10 | 0)) i6 = i6 + 1 | 0; else break;
       } else if (i5) while (1) {
        i5 = HEAP32[i11 + (i6 << 3) >> 2] | 0;
        i26 = (i4 | 0) < 0 | (i5 | 0) > (i2 | 0);
        i2 = i26 ? i5 : i2;
        i4 = i26 ? i6 : i4;
        if ((i6 | 0) < (i10 | 0)) i6 = i6 + 1 | 0; else break;
       } else while (1) {
        i5 = HEAP32[i11 + (i6 << 3) >> 2] | 0;
        i26 = (i4 | 0) < 0 | (i5 | 0) < (i2 | 0);
        i2 = i26 ? i5 : i2;
        i4 = i26 ? i6 : i4;
        if ((i6 | 0) < (i10 | 0)) i6 = i6 + 1 | 0; else break;
       }
      }
      i8 = i8 + 1 | 0;
      if ((i8 | 0) == (i9 | 0)) break; else i6 = i10 + 1 | 0;
     }
    } else i2 = 0;
    i26 = i3 << 24 >> 24 == 0;
    HEAP32[(i26 ? i22 + (i14 << 2) | 0 : i21 + (i15 << 2) | 0) >> 2] = i2;
    i15 = ((i26 ^ 1) & 1) + i15 | 0;
    i14 = ((i3 ^ 1) & 255) + i14 | 0;
    i2 = i7;
   }
   i10 = i13 & 65535;
   i9 = (i15 | 0) == 0;
   if (i15 | i14 | 0) {
    i8 = (i14 | 0) == 0;
    if (i15 >>> 0 > 1) {
     i4 = 1;
     do {
      i5 = HEAP32[i21 + (i4 << 2) >> 2] | 0;
      i2 = i4;
      do {
       i3 = i2;
       i2 = i2 + -1 | 0;
       i6 = i21 + (i2 << 2) | 0;
       i7 = HEAP32[i6 >> 2] | 0;
       if ((i5 | 0) >= (i7 | 0)) break;
       HEAP32[i21 + (i3 << 2) >> 2] = i7;
       HEAP32[i6 >> 2] = i5;
      } while ((i2 | 0) != 0);
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i15 | 0));
    }
    if (i14 >>> 0 > 1) {
     i4 = 1;
     do {
      i5 = HEAP32[i22 + (i4 << 2) >> 2] | 0;
      i2 = i4;
      do {
       i3 = i2;
       i2 = i2 + -1 | 0;
       i6 = i22 + (i2 << 2) | 0;
       i7 = HEAP32[i6 >> 2] | 0;
       if ((i5 | 0) >= (i7 | 0)) break;
       HEAP32[i22 + (i3 << 2) >> 2] = i7;
       HEAP32[i6 >> 2] = i5;
      } while ((i2 | 0) != 0);
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i14 | 0));
    }
    i26 = i17 + 44 + (i10 * 1572 | 0) + 216 | 0;
    i7 = HEAP32[i26 >> 2] | 0;
    i5 = i17 + 44 + (i10 * 1572 | 0) + 220 + (i7 * 28 | 0) | 0;
    i6 = i17 + 44 + (i10 * 1572 | 0) + 220 + (i7 * 28 | 0) + 12 | 0;
    HEAP32[i26 >> 2] = i7 + 1;
    if (i8) {
     i2 = HEAP32[i21 + (i15 >>> 1 << 2) >> 2] | 0;
     i24 = 42;
    } else {
     i4 = HEAP32[i22 + (i14 >>> 1 << 2) >> 2] | 0;
     if (i9) {
      i2 = i4;
      i24 = 42;
     } else {
      i3 = HEAP32[i21 + (i15 >>> 1 << 2) >> 2] | 0;
      HEAP32[i5 >> 2] = i3;
      HEAP32[i6 >> 2] = i4;
      if ((i4 | 0) == (i3 | 0)) i24 = 43; else {
       i2 = HEAP16[i16 >> 1] | 0;
       if ((i2 & 1 | 0) != ((i4 | 0) < (i3 | 0) | 0)) {
        i26 = (i3 + i4 | 0) / 2 | 0;
        HEAP32[i6 >> 2] = i26;
        HEAP32[i5 >> 2] = i26;
       }
      }
     }
    }
    if ((i24 | 0) == 42) {
     HEAP32[i6 >> 2] = i2;
     HEAP32[i5 >> 2] = i2;
     i24 = 43;
    }
    if ((i24 | 0) == 43) {
     i24 = 0;
     i2 = HEAP16[i16 >> 1] | 0;
    }
    HEAP32[i17 + 44 + (i10 * 1572 | 0) + 220 + (i7 * 28 | 0) + 24 >> 2] = i2 << 1 & 2;
   }
   i1 = i1 + 8 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while ((i2 | 0) != 759);
 }
 _af_cjk_metrics_check_digits(i17, i18);
 _FT_Set_Charmap(i18, i23) | 0;
 STACKTOP = i25;
 return 0;
}

function _T1_Load_Glyph(i23, i11, i3, i1) {
 i23 = i23 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0;
 i26 = STACKTOP;
 STACKTOP = STACKTOP + 1552 | 0;
 i20 = i26 + 48 | 0;
 i14 = i26 + 32 | 0;
 i25 = i26 + 24 | 0;
 i22 = i26 + 8 | 0;
 i15 = i26;
 i24 = HEAP32[i23 + 4 >> 2] | 0;
 i5 = HEAP32[(HEAP32[i24 + 488 >> 2] | 0) + 12 >> 2] | 0;
 if ((HEAP32[i24 + 16 >> 2] | 0) >>> 0 <= i3 >>> 0) if (!(HEAP32[(HEAP32[i24 + 128 >> 2] | 0) + 48 >> 2] | 0)) {
  i25 = 6;
  STACKTOP = i26;
  return i25 | 0;
 }
 i7 = (i1 & 1024 | 0) == 0 ? i1 : i1 | 3;
 i10 = (i11 | 0) != 0;
 if (i10) {
  i2 = HEAP32[i11 + 20 >> 2] | 0;
  i1 = HEAP32[i11 + 16 >> 2] | 0;
 } else {
  i2 = 65536;
  i1 = 65536;
 }
 i16 = i23 + 172 | 0;
 HEAP32[i16 >> 2] = i1;
 i17 = i23 + 176 | 0;
 HEAP32[i17 >> 2] = i2;
 i19 = i23 + 108 | 0;
 HEAP16[i23 + 110 >> 1] = 0;
 HEAP16[i19 >> 1] = 0;
 i9 = (i7 & 1 | 0) == 0;
 i18 = (i7 & 3 | 0) == 0;
 i8 = i23 + 72 | 0;
 HEAP32[i8 >> 2] = 1869968492;
 i1 = FUNCTION_TABLE_iiiiiiiiii[HEAP32[i5 >> 2] & 1](i20, i24, i11, i23, HEAP32[i24 + 420 >> 2] | 0, HEAP32[i24 + 528 >> 2] | 0, i18 & 1, i7 >>> 16 & 15, 180) | 0;
 if (i1 | 0) {
  i25 = i1;
  STACKTOP = i26;
  return i25 | 0;
 }
 i2 = i7 & 1024;
 HEAP8[i20 + 69 >> 0] = i2 >>> 10;
 HEAP32[i20 + 1364 >> 2] = HEAP32[i24 + 404 >> 2];
 HEAP32[i20 + 1368 >> 2] = HEAP32[i24 + 408 >> 2];
 HEAP32[i20 + 1372 >> 2] = HEAP32[i24 + 412 >> 2];
 HEAP32[i20 + 1488 >> 2] = HEAP32[i24 + 544 >> 2];
 HEAP32[i20 + 1492 >> 2] = HEAP32[i24 + 540 >> 2];
 i1 = _T1_Parse_Glyph_And_Get_Char_String(i20, i3, i25) | 0;
 if (i1 | 0) {
  FUNCTION_TABLE_vi[HEAP32[i5 + 4 >> 2] & 127](i20);
  i25 = i1;
  STACKTOP = i26;
  return i25 | 0;
 }
 i4 = i20 + 1376 | 0;
 HEAP32[i14 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i4 = HEAP32[i20 + 1392 >> 2] | 0;
 i6 = HEAP32[i20 + 1396 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[i5 + 4 >> 2] & 127](i20);
 i3 = i23 + 124 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & 1 | 4;
 if (!i2) {
  i12 = i23 + 24 | 0;
  i5 = i20 + 40 | 0;
  i2 = (_FT_RoundFix(HEAP32[i5 >> 2] | 0) | 0) >> 16;
  i13 = i23 + 40 | 0;
  HEAP32[i13 >> 2] = i2;
  i5 = (_FT_RoundFix(HEAP32[i5 >> 2] | 0) | 0) >> 16;
  HEAP32[i23 + 56 >> 2] = i5;
  HEAP8[(HEAP32[i23 + 156 >> 2] | 0) + 8 >> 0] = 0;
  i7 = (i7 & 16 | 0) != 0;
  if (i7) {
   i1 = (HEAP32[i24 + 472 >> 2] | 0) - (HEAP32[i24 + 464 >> 2] | 0) >> 16;
   HEAP32[i23 + 52 >> 2] = i1;
  } else {
   i1 = i20 + 44 | 0;
   i5 = (_FT_RoundFix(HEAP32[i1 >> 2] | 0) | 0) >> 16;
   HEAP32[i23 + 52 >> 2] = i5;
   i1 = (_FT_RoundFix(HEAP32[i1 >> 2] | 0) | 0) >> 16;
  }
  HEAP32[i23 + 60 >> 2] = i1;
  HEAP32[i8 >> 2] = 1869968492;
  if (i10) if ((HEAPU16[i11 + 14 >> 1] | 0) < 24) HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 256;
  if ((HEAP32[i14 >> 2] | 0) == 65536) if ((HEAP32[i14 + 12 >> 2] | 0) == 65536) if (!(HEAP32[i14 + 4 >> 2] | 0)) {
   if (HEAP32[i14 + 8 >> 2] | 0) i21 = 19;
  } else i21 = 19; else i21 = 19; else i21 = 19;
  if ((i21 | 0) == 19) _FT_Outline_Transform(i19, i14);
  if (i6 | i4 | 0) _FT_Outline_Translate(i19, i4, i6);
  HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
  i11 = i15 + 4 | 0;
  HEAP32[i11 >> 2] = 0;
  _FT_Vector_Transform(i15, i14);
  HEAP32[i13 >> 2] = (HEAP32[i15 >> 2] | 0) + i4;
  HEAP32[i15 >> 2] = 0;
  i5 = i23 + 52 | 0;
  HEAP32[i11 >> 2] = HEAP32[i5 >> 2];
  _FT_Vector_Transform(i15, i14);
  HEAP32[i5 >> 2] = (HEAP32[i11 >> 2] | 0) + i6;
  if (i9) {
   i1 = HEAP32[i20 + 16 >> 2] | 0;
   i2 = HEAP32[i1 + 4 >> 2] | 0;
   i4 = HEAP32[i16 >> 2] | 0;
   i3 = HEAP32[i17 >> 2] | 0;
   if (i18) {
    if (!(HEAP32[i20 + 72 >> 2] | 0)) i21 = 25;
   } else i21 = 25;
   if ((i21 | 0) == 25) {
    i1 = HEAP16[i1 + 2 >> 1] | 0;
    if (i1 << 16 >> 16 > 0) {
     i1 = i1 << 16 >> 16;
     while (1) {
      i21 = _FT_MulFix(HEAP32[i2 >> 2] | 0, i4) | 0;
      HEAP32[i2 >> 2] = i21;
      i21 = i2 + 4 | 0;
      i20 = _FT_MulFix(HEAP32[i21 >> 2] | 0, i3) | 0;
      HEAP32[i21 >> 2] = i20;
      if ((i1 | 0) > 1) {
       i2 = i2 + 8 | 0;
       i1 = i1 + -1 | 0;
      } else break;
     }
    }
   }
   i21 = _FT_MulFix(HEAP32[i13 >> 2] | 0, i4) | 0;
   HEAP32[i13 >> 2] = i21;
   i21 = _FT_MulFix(HEAP32[i5 >> 2] | 0, i3) | 0;
   HEAP32[i5 >> 2] = i21;
  }
  _FT_Outline_Get_CBox(i19, i22);
  i20 = HEAP32[i22 >> 2] | 0;
  HEAP32[i12 >> 2] = (HEAP32[i22 + 8 >> 2] | 0) - i20;
  i21 = HEAP32[i22 + 12 >> 2] | 0;
  HEAP32[i23 + 28 >> 2] = i21 - (HEAP32[i22 + 4 >> 2] | 0);
  HEAP32[i23 + 32 >> 2] = i20;
  HEAP32[i23 + 36 >> 2] = i21;
  if (i7) _ft_synthesize_vertical_metrics(i12, HEAP32[i5 >> 2] | 0);
 } else {
  i22 = HEAP32[i23 + 156 >> 2] | 0;
  i21 = (_FT_RoundFix(HEAP32[i20 + 32 >> 2] | 0) | 0) >> 16;
  HEAP32[i23 + 32 >> 2] = i21;
  i21 = (_FT_RoundFix(HEAP32[i20 + 40 >> 2] | 0) | 0) >> 16;
  HEAP32[i23 + 40 >> 2] = i21;
  i21 = i22 + 12 | 0;
  HEAP32[i21 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i21 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
  HEAP32[i21 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
  HEAP32[i21 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
  HEAP32[i22 + 28 >> 2] = i4;
  HEAP32[i22 + 32 >> 2] = i6;
  HEAP8[i22 + 8 >> 0] = 1;
 }
 i3 = i23 + 136 | 0;
 HEAP32[i3 >> 2] = HEAP32[i25 >> 2];
 i2 = i23 + 140 | 0;
 HEAP32[i2 >> 2] = HEAP32[i25 + 4 >> 2];
 i1 = HEAP32[(HEAP32[i24 + 128 >> 2] | 0) + 48 >> 2] | 0;
 if (!i1) {
  i25 = 0;
  STACKTOP = i26;
  return i25 | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 63](HEAP32[i1 + 4 >> 2] | 0, i25);
 HEAP32[i3 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 i25 = 0;
 STACKTOP = i26;
 return i25 | 0;
}

function _psh_hint_align(i17, i18, i19, i20) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i21 = 0, i22 = 0;
 i16 = HEAP32[i18 + 4 + (i19 * 204 | 0) + 196 >> 2] | 0;
 i21 = i17 + 16 | 0;
 if (HEAP32[i21 >> 2] & 8 | 0) return;
 i7 = HEAP32[i18 + 4 + (i19 * 204 | 0) + 200 >> 2] | 0;
 i7 = (_FT_MulFix(HEAP32[i17 >> 2] | 0, i16) | 0) + i7 | 0;
 i15 = i17 + 4 | 0;
 i2 = _FT_MulFix(HEAP32[i15 >> 2] | 0, i16) | 0;
 L4 : do switch (i19 | 0) {
 case 0:
  {
   if (!(HEAP8[i20 + 120 >> 0] | 0)) i22 = 6; else {
    i3 = (HEAP8[i20 + 122 >> 0] | 0) != 0;
    i22 = 27;
   }
   break;
  }
 case 1:
  {
   if (!(HEAP8[i20 + 121 >> 0] | 0)) i22 = 6; else {
    i14 = (HEAP8[i20 + 123 >> 0] | 0) != 0;
    i1 = i17 + 12 | 0;
    HEAP32[i1 >> 2] = i2;
    i12 = HEAP32[i17 >> 2] | 0;
    i5 = (HEAP32[i15 >> 2] | 0) + i12 | 0;
    i13 = HEAP8[i18 + 2492 >> 0] | 0;
    i3 = HEAP32[i18 + 412 >> 2] | 0;
    L9 : do if (!i3) {
     i5 = 0;
     i4 = 0;
     i9 = 2;
    } else {
     i8 = HEAP32[i18 + 2488 >> 2] | 0;
     i9 = 0 - i8 | 0;
     i6 = i18 + 416 | 0;
     while (1) {
      i4 = i5 - (HEAP32[i6 + 12 >> 2] | 0) | 0;
      if ((i4 | 0) < (i9 | 0)) {
       i5 = 0;
       i4 = 0;
       i9 = 2;
       break L9;
      }
      if (((HEAP32[i6 + 8 >> 2] | 0) + i8 | 0) >= (i5 | 0)) break;
      i3 = i3 + -1 | 0;
      if (!i3) {
       i5 = 0;
       i4 = 0;
       i9 = 2;
       break L9;
      } else i6 = i6 + 32 | 0;
     }
     if (!(i13 << 24 >> 24)) if ((i4 | 0) > (HEAP32[i18 + 2484 >> 2] | 0)) {
      i5 = 0;
      i4 = 0;
      i9 = 2;
      break;
     }
     i5 = 1;
     i4 = HEAP32[i6 + 16 >> 2] | 0;
     i9 = 3;
    } while (0);
    i3 = HEAP32[i18 + 928 >> 2] | 0;
    L20 : do if (!i3) i3 = 0; else {
     i10 = HEAP32[i18 + 2488 >> 2] | 0;
     i11 = 0 - i10 | 0;
     i6 = i3;
     i8 = i18 + 932 + (i3 << 5) | 0;
     while (1) {
      i3 = (HEAP32[i8 + -24 >> 2] | 0) - i12 | 0;
      if ((i3 | 0) < (i11 | 0)) {
       i3 = 0;
       break L20;
      }
      i6 = i6 + -1 | 0;
      if (((HEAP32[i8 + -20 >> 2] | 0) - i10 | 0) <= (i12 | 0)) break;
      if (!i6) {
       i3 = 0;
       break L20;
      } else i8 = i8 + -32 | 0;
     }
     if (!(i13 << 24 >> 24)) if ((i3 | 0) >= (HEAP32[i18 + 2484 >> 2] | 0)) {
      i3 = 0;
      break;
     }
     i5 = i9;
     i3 = HEAP32[i8 + -16 >> 2] | 0;
    } while (0);
    switch (i5 | 0) {
    case 1:
     {
      i3 = i17 + 8 | 0;
      HEAP32[i3 >> 2] = i4 - i2;
      if (!i14) break L4;
      i2 = (i2 | 0) < 64 ? 64 : i2 + 32 & -64;
      i22 = 48;
      break L4;
     }
    case 2:
     {
      HEAP32[i17 + 8 >> 2] = i3;
      if (!i14) break L4;
      i2 = (i2 | 0) < 64 ? 64 : i2 + 32 & -64;
      i22 = 51;
      break L4;
     }
    case 3:
     {
      HEAP32[i17 + 8 >> 2] = i3;
      HEAP32[i1 >> 2] = i4 - i3;
      break L4;
     }
    default:
     {
      i9 = i5;
      i10 = i4;
      i8 = i14;
      i22 = 28;
      break L4;
     }
    }
   }
   break;
  }
 default:
  {
   i3 = 0;
   i22 = 27;
  }
 } while (0);
 if ((i22 | 0) == 6) {
  HEAP32[i17 + 8 >> 2] = i7;
  HEAP32[i17 + 12 >> 2] = i2;
 } else if ((i22 | 0) == 27) {
  i1 = i17 + 12 | 0;
  HEAP32[i1 >> 2] = i2;
  i9 = 0;
  i10 = 0;
  i8 = i3;
  i22 = 28;
 }
 L40 : do if ((i22 | 0) == 28) {
  i3 = HEAP32[i17 + 20 >> 2] | 0;
  if (i3) {
   if (!(HEAP32[i3 + 16 >> 2] & 8)) _psh_hint_align(i3, i18, i19, i20);
   i14 = HEAP32[i3 + 8 >> 2] | 0;
   i7 = HEAP32[i3 + 12 >> 2] >> 1;
   i7 = i14 - (i2 >> 1) + i7 + (_FT_MulFix((HEAP32[i17 >> 2] | 0) - ((HEAP32[i3 + 4 >> 2] >> 1) + (HEAP32[i3 >> 2] | 0)) + (HEAP32[i15 >> 2] >> 1) | 0, i16) | 0) | 0;
  }
  i3 = i17 + 8 | 0;
  HEAP32[i3 >> 2] = i7;
  HEAP32[i1 >> 2] = i2;
  do if (!(HEAP8[i20 + 124 >> 0] | 0)) i4 = i7; else {
   if ((i2 | 0) < 65) {
    if ((i2 | 0) > 31) {
     i4 = i7 + (i2 >>> 1) & -64;
     i2 = 64;
     break;
    }
    i4 = i7 + 32 & -64;
    if ((i2 | 0) <= 0) break;
    i19 = i7 + i2 | 0;
    i20 = i19 + 32 & -64;
    i18 = i4 - i7 | 0;
    i19 = i20 - i19 | 0;
    i4 = (((i18 | 0) < 0 ? 0 - i18 | 0 : i18) | 0) > (((i19 | 0) < 0 ? 0 - i19 | 0 : i19) | 0) ? i20 : i4;
    break;
   }
   i20 = HEAP32[i18 + 4 + (i19 * 204 | 0) + 8 >> 2] | 0;
   i19 = i2 - i20 | 0;
   i2 = (((i19 | 0) < 0 ? 0 - i19 | 0 : i19) | 0) < 40 ? ((i20 | 0) > 48 ? i20 : 48) : i2;
   if ((i2 | 0) >= 192) {
    i4 = i7;
    i2 = i2 + 32 & -64;
    break;
   }
   i5 = i2 & 63;
   i6 = i2 & -64;
   if (i5 >>> 0 < 10) i4 = i7; else if (i5 >>> 0 < 32) {
    i4 = i7;
    i2 = i6 | 10;
    break;
   } else {
    i4 = i7;
    i2 = i5 >>> 0 < 54 ? i6 | 54 : i2;
    break;
   }
  } while (0);
  i19 = i4 + 32 | 0;
  i20 = (i19 & -64) - i4 | 0;
  i19 = (i19 + i2 & -64) - i4 - i2 | 0;
  HEAP32[i3 >> 2] = ((((i20 | 0) < 0 ? 0 - i20 | 0 : i20) | 0) > (((i19 | 0) < 0 ? 0 - i19 | 0 : i19) | 0) ? i19 : i20) + i4;
  HEAP32[i1 >> 2] = i2;
  if (i8) {
   i2 = (i2 | 0) < 64 ? 64 : i2 + 32 & -64;
   switch (i9 | 0) {
   case 3:
    break L40;
   case 1:
    {
     i4 = i10;
     i22 = 48;
     break L40;
    }
   case 2:
    {
     i22 = 51;
     break L40;
    }
   default:
    {}
   }
   i22 = HEAP32[i3 >> 2] | 0;
   HEAP32[i1 >> 2] = i2;
   i4 = i2 >> 1;
   i22 = i22 + i4 | 0;
   i5 = i2;
   i4 = ((i2 & 64 | 0) == 0 ? i22 + 32 & -64 : i22 & -64 | 32) - i4 | 0;
   i2 = i3;
   i22 = 50;
  }
 } while (0);
 if ((i22 | 0) == 48) {
  i5 = i2;
  i4 = i4 - i2 | 0;
  i2 = i3;
  i22 = 50;
 }
 if ((i22 | 0) == 50) {
  HEAP32[i2 >> 2] = i4;
  i2 = i5;
  i22 = 51;
 }
 if ((i22 | 0) == 51) HEAP32[i1 >> 2] = i2;
 HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 8;
 return;
}

function _polyline_split_vert(i3, i1, i2, i4, i12, i5, i13, i14, i15) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 i5 = i5 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i11 = i3 + (i1 * 40 | 0) | 0;
 i10 = i11 + (i2 * 40 | 0) | 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 if ((i10 | 0) == (i3 | 0)) return;
 i9 = ((i15 | 0) < 0) << 31 >> 31;
 i1 = i4;
 i2 = i5;
 L4 : while (1) {
  i8 = i3 >>> 0 >= i11 >>> 0 & 1;
  i5 = i3 + 24 | 0;
  i7 = HEAP32[i3 + 20 >> 2] | 0;
  if ((HEAP32[i5 >> 2] | 0) != 0 | (i7 & 4 | 0) == 0) i6 = 0; else i6 = (HEAP32[i3 + 12 >> 2] >> 31 & 2) + -1 | 0;
  if (!(i7 & 32)) {
   i4 = i3;
   i17 = HEAP32[i4 >> 2] | 0;
   i4 = HEAP32[i4 + 4 >> 2] | 0;
   i16 = HEAP32[i3 + 12 >> 2] | 0;
   i18 = ___muldi3(i16 | 0, ((i16 | 0) < 0) << 31 >> 31 | 0, i15 | 0, i9 | 0) | 0;
   i18 = _i64Subtract(i17 | 0, i4 | 0, i18 | 0, tempRet0 | 0) | 0;
   i4 = tempRet0;
   i17 = HEAP32[i3 + 8 >> 2] | 0;
   i19 = HEAP32[((i7 & 2 | 0) == 0 ? i5 : i3 + 28 | 0) >> 2] | 0;
   i17 = ___muldi3(i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0, i17 | 0, ((i17 | 0) < 0) << 31 >> 31 | 0) | 0;
   i17 = _i64Subtract(i18 | 0, i4 | 0, i17 | 0, tempRet0 | 0) | 0;
   i4 = tempRet0;
   i16 = (i16 | 0) > 0;
   i18 = _i64Subtract(0, 0, i17 | 0, i4 | 0) | 0;
   i4 = _bitshift64Lshr((i16 ? i18 : i17) | 0, (i16 ? tempRet0 : i4) | 0, 63) | 0;
   i4 = i4 ^ 1;
  } else i4 = (HEAP32[i3 + 36 >> 2] | 0) <= (i15 | 0) & 1;
  do if (!i4) {
   if (!(i7 & 16)) {
    i4 = i3;
    i18 = HEAP32[i4 >> 2] | 0;
    i4 = HEAP32[i4 + 4 >> 2] | 0;
    i19 = HEAP32[i3 + 12 >> 2] | 0;
    i17 = ___muldi3(i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0, i15 | 0, i9 | 0) | 0;
    i17 = _i64Subtract(i18 | 0, i4 | 0, i17 | 0, tempRet0 | 0) | 0;
    i4 = tempRet0;
    i18 = HEAP32[i3 + 8 >> 2] | 0;
    i16 = HEAP32[((i7 & 2 | 0) == 0 ? i3 + 28 | 0 : i5) >> 2] | 0;
    i18 = ___muldi3(i16 | 0, ((i16 | 0) < 0) << 31 >> 31 | 0, i18 | 0, ((i18 | 0) < 0) << 31 >> 31 | 0) | 0;
    i18 = _i64Subtract(i17 | 0, i4 | 0, i18 | 0, tempRet0 | 0) | 0;
    i4 = tempRet0;
    i19 = (i19 | 0) < 0;
    i17 = _i64Subtract(0, 0, i18 | 0, i4 | 0) | 0;
    i4 = _bitshift64Lshr((i19 ? i17 : i18) | 0, (i19 ? tempRet0 : i4) | 0, 63) | 0;
    i4 = i4 ^ 1;
   } else i4 = (HEAP32[i3 + 32 >> 2] | 0) >= (i15 | 0) & 1;
   if (i4 | 0) {
    i5 = i2;
    i6 = i3;
    i7 = i5 + 40 | 0;
    do {
     HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    } while ((i5 | 0) < (i7 | 0));
    i17 = i2 + 32 | 0;
    i19 = (HEAP32[i17 >> 2] | 0) - i15 | 0;
    i18 = i2 + 36 | 0;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - i15;
    HEAP32[i17 >> 2] = (i19 | 0) > 0 ? i19 : 0;
    i17 = HEAP32[i2 + 12 >> 2] | 0;
    i17 = ___muldi3(i17 | 0, ((i17 | 0) < 0) << 31 >> 31 | 0, i15 | 0, i9 | 0) | 0;
    i18 = i2;
    i17 = _i64Subtract(HEAP32[i18 >> 2] | 0, HEAP32[i18 + 4 >> 2] | 0, i17 | 0, tempRet0 | 0) | 0;
    i18 = i2;
    HEAP32[i18 >> 2] = i17;
    HEAP32[i18 + 4 >> 2] = tempRet0;
    if ((i19 | 0) < 1) {
     i4 = i2 + 20 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 & 18 | 0) == 18) HEAP32[i4 >> 2] = i5 & -5;
    }
    i19 = i13 + (i8 << 2) | 0;
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    i2 = i2 + 40 | 0;
    break;
   }
   i4 = i14 + (i8 << 2) | 0;
   if (i7 & 2 | 0) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i6;
   i5 = i1;
   i6 = i3;
   i7 = i5 + 40 | 0;
   do {
    HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
    i5 = i5 + 4 | 0;
    i6 = i6 + 4 | 0;
   } while ((i5 | 0) < (i7 | 0));
   if ((HEAP32[i1 + 32 >> 2] | 0) >= (i15 | 0)) {
    i1 = 23;
    break L4;
   }
   i4 = i1 + 36 | 0;
   if ((HEAP32[i4 >> 2] | 0) <= (i15 | 0)) {
    i1 = 23;
    break L4;
   }
   i5 = i2;
   i6 = i1;
   i7 = i5 + 40 | 0;
   do {
    HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
    i5 = i5 + 4 | 0;
    i6 = i6 + 4 | 0;
   } while ((i5 | 0) < (i7 | 0));
   i7 = HEAP32[i1 + 12 >> 2] | 0;
   i7 = ___muldi3(i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0, i15 | 0, i9 | 0) | 0;
   i6 = i2;
   i7 = _i64Subtract(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, i7 | 0, tempRet0 | 0) | 0;
   i6 = i2;
   HEAP32[i6 >> 2] = i7;
   HEAP32[i6 + 4 >> 2] = tempRet0;
   HEAP32[i2 + 32 >> 2] = 0;
   i6 = i2 + 36 | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - i15;
   HEAP32[i4 >> 2] = i15;
   i6 = i1 + 20 | 0;
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] & -5;
   i7 = i2 + 20 | 0;
   i5 = HEAP32[i7 >> 2] & -9;
   HEAP32[i7 >> 2] = i5;
   i4 = HEAP32[i6 >> 2] | 0;
   if (i4 & 2) {
    HEAP32[i6 >> 2] = i5;
    HEAP32[i7 >> 2] = i4;
    i4 = HEAP32[i6 >> 2] | 0;
   }
   HEAP32[i6 >> 2] = i4 | 32;
   HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 16;
   i19 = i12 + (i8 << 2) | 0;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   i19 = i13 + (i8 << 2) | 0;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   i1 = i1 + 40 | 0;
   i2 = i2 + 40 | 0;
  } else {
   i19 = i14 + (i8 << 2) | 0;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + i6;
   if ((HEAP32[i3 + 32 >> 2] | 0) < (i15 | 0)) {
    i5 = i1;
    i6 = i3;
    i7 = i5 + 40 | 0;
    do {
     HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    } while ((i5 | 0) < (i7 | 0));
    i19 = i1 + 36 | 0;
    i18 = HEAP32[i19 >> 2] | 0;
    HEAP32[i19 >> 2] = (i18 | 0) < (i15 | 0) ? i18 : i15;
    i19 = i12 + (i8 << 2) | 0;
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    i1 = i1 + 40 | 0;
   }
  } while (0);
  i3 = i3 + 40 | 0;
  if ((i3 | 0) == (i10 | 0)) {
   i1 = 28;
   break;
  }
 }
 if ((i1 | 0) == 23) ___assert_fail(359635, 359365, 378, 359670); else if ((i1 | 0) == 28) return;
}

function _polyline_split_horz(i3, i1, i2, i4, i12, i5, i13, i14, i15) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 i5 = i5 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i11 = i3 + (i1 * 40 | 0) | 0;
 i10 = i11 + (i2 * 40 | 0) | 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 if ((i10 | 0) == (i3 | 0)) return;
 i9 = ((i15 | 0) < 0) << 31 >> 31;
 i1 = i4;
 i2 = i5;
 L4 : while (1) {
  i8 = i3 >>> 0 >= i11 >>> 0 & 1;
  i5 = i3 + 32 | 0;
  i7 = HEAP32[i3 + 20 >> 2] | 0;
  if ((HEAP32[i5 >> 2] | 0) != 0 | (i7 & 16 | 0) == 0) i6 = 0; else i6 = (HEAP32[i3 + 8 >> 2] >> 31 & 2) + -1 | 0;
  if (!(i7 & 8)) {
   i4 = i3;
   i17 = HEAP32[i4 >> 2] | 0;
   i4 = HEAP32[i4 + 4 >> 2] | 0;
   i16 = HEAP32[i3 + 8 >> 2] | 0;
   i18 = ___muldi3(i16 | 0, ((i16 | 0) < 0) << 31 >> 31 | 0, i15 | 0, i9 | 0) | 0;
   i18 = _i64Subtract(i17 | 0, i4 | 0, i18 | 0, tempRet0 | 0) | 0;
   i4 = tempRet0;
   i17 = HEAP32[i3 + 12 >> 2] | 0;
   i19 = HEAP32[((i7 & 2 | 0) == 0 ? i5 : i3 + 36 | 0) >> 2] | 0;
   i17 = ___muldi3(i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0, i17 | 0, ((i17 | 0) < 0) << 31 >> 31 | 0) | 0;
   i17 = _i64Subtract(i18 | 0, i4 | 0, i17 | 0, tempRet0 | 0) | 0;
   i4 = tempRet0;
   i16 = (i16 | 0) > 0;
   i18 = _i64Subtract(0, 0, i17 | 0, i4 | 0) | 0;
   i4 = _bitshift64Lshr((i16 ? i18 : i17) | 0, (i16 ? tempRet0 : i4) | 0, 63) | 0;
   i4 = i4 ^ 1;
  } else i4 = (HEAP32[i3 + 28 >> 2] | 0) <= (i15 | 0) & 1;
  do if (!i4) {
   if (!(i7 & 4)) {
    i4 = i3;
    i18 = HEAP32[i4 >> 2] | 0;
    i4 = HEAP32[i4 + 4 >> 2] | 0;
    i19 = HEAP32[i3 + 8 >> 2] | 0;
    i17 = ___muldi3(i19 | 0, ((i19 | 0) < 0) << 31 >> 31 | 0, i15 | 0, i9 | 0) | 0;
    i17 = _i64Subtract(i18 | 0, i4 | 0, i17 | 0, tempRet0 | 0) | 0;
    i4 = tempRet0;
    i18 = HEAP32[i3 + 12 >> 2] | 0;
    i16 = HEAP32[((i7 & 2 | 0) == 0 ? i3 + 36 | 0 : i5) >> 2] | 0;
    i18 = ___muldi3(i16 | 0, ((i16 | 0) < 0) << 31 >> 31 | 0, i18 | 0, ((i18 | 0) < 0) << 31 >> 31 | 0) | 0;
    i18 = _i64Subtract(i17 | 0, i4 | 0, i18 | 0, tempRet0 | 0) | 0;
    i4 = tempRet0;
    i19 = (i19 | 0) < 0;
    i17 = _i64Subtract(0, 0, i18 | 0, i4 | 0) | 0;
    i4 = _bitshift64Lshr((i19 ? i17 : i18) | 0, (i19 ? tempRet0 : i4) | 0, 63) | 0;
    i4 = i4 ^ 1;
   } else i4 = (HEAP32[i3 + 24 >> 2] | 0) >= (i15 | 0) & 1;
   if (i4 | 0) {
    i5 = i2;
    i6 = i3;
    i7 = i5 + 40 | 0;
    do {
     HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    } while ((i5 | 0) < (i7 | 0));
    i17 = i2 + 24 | 0;
    i19 = (HEAP32[i17 >> 2] | 0) - i15 | 0;
    i18 = i2 + 28 | 0;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - i15;
    HEAP32[i17 >> 2] = (i19 | 0) > 0 ? i19 : 0;
    i17 = HEAP32[i2 + 8 >> 2] | 0;
    i17 = ___muldi3(i17 | 0, ((i17 | 0) < 0) << 31 >> 31 | 0, i15 | 0, i9 | 0) | 0;
    i18 = i2;
    i17 = _i64Subtract(HEAP32[i18 >> 2] | 0, HEAP32[i18 + 4 >> 2] | 0, i17 | 0, tempRet0 | 0) | 0;
    i18 = i2;
    HEAP32[i18 >> 2] = i17;
    HEAP32[i18 + 4 >> 2] = tempRet0;
    if ((i19 | 0) < 1) {
     i4 = i2 + 20 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 & 6 | 0) == 6) HEAP32[i4 >> 2] = i5 & -17;
    }
    i19 = i13 + (i8 << 2) | 0;
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    i2 = i2 + 40 | 0;
    break;
   }
   i4 = i14 + (i8 << 2) | 0;
   if (i7 & 2 | 0) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i6;
   i5 = i1;
   i6 = i3;
   i7 = i5 + 40 | 0;
   do {
    HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
    i5 = i5 + 4 | 0;
    i6 = i6 + 4 | 0;
   } while ((i5 | 0) < (i7 | 0));
   if ((HEAP32[i1 + 24 >> 2] | 0) >= (i15 | 0)) {
    i1 = 23;
    break L4;
   }
   i4 = i1 + 28 | 0;
   if ((HEAP32[i4 >> 2] | 0) <= (i15 | 0)) {
    i1 = 23;
    break L4;
   }
   i5 = i2;
   i6 = i1;
   i7 = i5 + 40 | 0;
   do {
    HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
    i5 = i5 + 4 | 0;
    i6 = i6 + 4 | 0;
   } while ((i5 | 0) < (i7 | 0));
   i7 = HEAP32[i1 + 8 >> 2] | 0;
   i7 = ___muldi3(i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0, i15 | 0, i9 | 0) | 0;
   i6 = i2;
   i7 = _i64Subtract(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, i7 | 0, tempRet0 | 0) | 0;
   i6 = i2;
   HEAP32[i6 >> 2] = i7;
   HEAP32[i6 + 4 >> 2] = tempRet0;
   HEAP32[i2 + 24 >> 2] = 0;
   i6 = i2 + 28 | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - i15;
   HEAP32[i4 >> 2] = i15;
   i6 = i1 + 20 | 0;
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] & -17;
   i7 = i2 + 20 | 0;
   i5 = HEAP32[i7 >> 2] & -33;
   HEAP32[i7 >> 2] = i5;
   i4 = HEAP32[i6 >> 2] | 0;
   if (i4 & 2) {
    HEAP32[i6 >> 2] = i5;
    HEAP32[i7 >> 2] = i4;
    i4 = HEAP32[i6 >> 2] | 0;
   }
   HEAP32[i6 >> 2] = i4 | 8;
   HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 4;
   i19 = i12 + (i8 << 2) | 0;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   i19 = i13 + (i8 << 2) | 0;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   i1 = i1 + 40 | 0;
   i2 = i2 + 40 | 0;
  } else {
   i19 = i14 + (i8 << 2) | 0;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + i6;
   if ((HEAP32[i3 + 24 >> 2] | 0) < (i15 | 0)) {
    i5 = i1;
    i6 = i3;
    i7 = i5 + 40 | 0;
    do {
     HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    } while ((i5 | 0) < (i7 | 0));
    i19 = i1 + 28 | 0;
    i18 = HEAP32[i19 >> 2] | 0;
    HEAP32[i19 >> 2] = (i18 | 0) > (i15 | 0) ? i15 : i18;
    i19 = i12 + (i8 << 2) | 0;
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    i1 = i1 + 40 | 0;
   }
  } while (0);
  i3 = i3 + 40 | 0;
  if ((i3 | 0) == (i10 | 0)) {
   i1 = 28;
   break;
  }
 }
 if ((i1 | 0) == 23) ___assert_fail(359689, 359365, 357, 359724); else if ((i1 | 0) == 28) return;
}

function _outline_hash(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 switch (HEAP32[i2 >> 2] | 0) {
 case 0:
  {
   i3 = Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((HEAPU8[i2 + 8 >> 0] | 0) ^ -2128831035, 16777619) | 0) ^ (HEAPU8[i2 + 9 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 10 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 11 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 16 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 17 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 18 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 19 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 20 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 21 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 22 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 23 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 24 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 25 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 26 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 27 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 28 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 29 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 30 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 31 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 32 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 33 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 34 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 35 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 36 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 37 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 38 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 39 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 40 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 41 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 42 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 43 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 44 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 45 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 46 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 47 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 48 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 49 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 50 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 51 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 52 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 53 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 54 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 55 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 56 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 57 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 58 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 59 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 60 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 61 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 62 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 63 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 64 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 65 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 66 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 67 >> 0] | 0), 16777619) | 0;
   return i3 | 0;
  }
 case 1:
  {
   i1 = Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((HEAPU8[i2 + 8 >> 0] | 0) ^ -2128831035, 16777619) | 0) ^ (HEAPU8[i2 + 9 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 10 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 11 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 12 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 13 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 14 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 15 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 16 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 17 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 18 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 19 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 20 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 21 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 22 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 23 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 24 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 25 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 26 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 27 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 28 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 29 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 30 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 31 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 32 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 33 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 34 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 35 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 36 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 37 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 38 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 39 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 40 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 41 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 42 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i2 + 43 >> 0] | 0), 16777619) | 0;
   i2 = HEAP32[i2 + 44 >> 2] | 0;
   i3 = HEAP8[i2 >> 0] | 0;
   if (!(i3 << 24 >> 24)) {
    i3 = i1;
    return i3 | 0;
   }
   do {
    i2 = i2 + 1 | 0;
    i1 = Math_imul(i1 ^ i3 & 255, 16777619) | 0;
    i3 = HEAP8[i2 >> 0] | 0;
   } while (i3 << 24 >> 24 != 0);
   return i1 | 0;
  }
 default:
  {
   i3 = 0;
   return i3 | 0;
  }
 }
 return 0;
}

function _af_warper_compute(i27, i28, i1, i34, i35) {
 i27 = i27 | 0;
 i28 = i28 | 0;
 i1 = i1 | 0;
 i34 = i34 | 0;
 i35 = i35 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i38 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i36 = i38;
 i5 = (i1 | 0) == 1;
 i26 = HEAP32[(i5 ? i28 + 12 | 0 : i28 + 4 | 0) >> 2] | 0;
 i5 = HEAP32[(i5 ? i28 + 16 | 0 : i28 + 8 | 0) >> 2] | 0;
 i29 = i27 + 44 | 0;
 HEAP32[i29 >> 2] = i26;
 i30 = i27 + 48 | 0;
 HEAP32[i30 >> 2] = i5;
 i31 = i27 + 52 | 0;
 HEAP32[i31 >> 2] = -2147483648;
 i32 = i27 + 56 | 0;
 HEAP32[i32 >> 2] = 0;
 i33 = HEAP32[i28 + 44 + (i1 * 1468 | 0) + 8 >> 2] | 0;
 i25 = HEAP32[i28 + 44 + (i1 * 1468 | 0) >> 2] | 0;
 i3 = HEAP32[i28 + 28 >> 2] | 0;
 i4 = HEAP32[i28 + 24 >> 2] | 0;
 HEAP32[i34 >> 2] = i26;
 HEAP32[i35 >> 2] = i5;
 if ((i25 | 0) < 1) {
  STACKTOP = i38;
  return;
 }
 i1 = HEAP16[i3 + 12 >> 1] | 0;
 if ((i4 | 0) > 1) {
  i2 = 1;
  i24 = i1;
  i23 = i1;
 } else {
  STACKTOP = i38;
  return;
 }
 do {
  i22 = HEAP16[i3 + (i2 * 40 | 0) + 12 >> 1] | 0;
  i24 = (i22 | 0) < (i24 | 0) ? i22 : i24;
  i23 = (i22 | 0) > (i23 | 0) ? i22 : i23;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i4 | 0));
 if ((i23 | 0) <= (i24 | 0)) {
  STACKTOP = i38;
  return;
 }
 i17 = (_FT_MulFix(i24, i26) | 0) + i5 | 0;
 HEAP32[i27 >> 2] = i17;
 i5 = (_FT_MulFix(i23, i26) | 0) + i5 | 0;
 i17 = i27 + 4 | 0;
 HEAP32[i17 >> 2] = i5;
 i6 = HEAP32[i27 >> 2] | 0;
 i18 = i27 + 8 | 0;
 HEAP32[i18 >> 2] = i6 & -64;
 HEAP32[i27 + 12 >> 2] = i5 + 63 & -64;
 i4 = i6 & -32;
 i19 = i27 + 16 | 0;
 HEAP32[i19 >> 2] = i4;
 i1 = i4 + 32 | 0;
 i20 = i27 + 20 | 0;
 HEAP32[i20 >> 2] = i1;
 i2 = i5 & -32;
 i21 = i27 + 24 | 0;
 HEAP32[i21 >> 2] = i2;
 i7 = i2 + 32 | 0;
 i22 = i27 + 28 | 0;
 HEAP32[i22 >> 2] = i7;
 if ((i1 | 0) > (i5 | 0)) {
  HEAP32[i20 >> 2] = i5;
  i1 = i5;
 }
 if ((i2 | 0) < (i6 | 0)) {
  HEAP32[i21 >> 2] = i6;
  i2 = i6;
 }
 i9 = i5 - i6 | 0;
 i16 = i27 + 32 | 0;
 HEAP32[i16 >> 2] = i9;
 if ((i9 | 0) < 65) {
  HEAP32[i20 >> 2] = i6;
  HEAP32[i21 >> 2] = i5;
  i1 = i6;
  i2 = i5;
 }
 i3 = i2 - i1 | 0;
 i8 = i27 + 36 | 0;
 HEAP32[i8 >> 2] = i3;
 i4 = i7 - i4 | 0;
 i15 = i27 + 40 | 0;
 HEAP32[i15 >> 2] = i4;
 i2 = (i9 | 0) < 129 ? ((i9 | 0) < 97 ? 4 : 8) : 16;
 i1 = i9 - i2 | 0;
 if ((i3 | 0) < (i1 | 0)) {
  HEAP32[i8 >> 2] = i1;
  i3 = i1;
 }
 i1 = i2 + i9 | 0;
 if ((i4 | 0) > (i1 | 0)) {
  HEAP32[i15 >> 2] = i1;
  i2 = i1;
 } else i2 = i4;
 i1 = (i9 * 3 | 0) / 4 | 0;
 if ((i3 | 0) < (i1 | 0)) {
  HEAP32[i8 >> 2] = i1;
  i3 = i1;
 }
 i1 = (i9 * 5 | 0) / 4 | 0;
 if ((i2 | 0) > (i1 | 0)) HEAP32[i15 >> 2] = i1; else i1 = i2;
 L33 : do if ((i3 | 0) <= (i1 | 0)) {
  i13 = i23 - i24 | 0;
  i14 = (i25 | 0) > 0;
  i7 = i9;
  while (1) {
   i4 = i7 - i3 + i6 | 0;
   if ((i7 | 0) > (i3 | 0)) {
    i1 = HEAP32[i20 >> 2] | 0;
    i2 = (i1 | 0) < (i4 | 0);
    i8 = i2 ? i1 : i4;
   } else {
    i1 = HEAP32[i19 >> 2] | 0;
    i2 = (i1 | 0) > (i4 | 0);
    i8 = i2 ? i1 : i4;
   }
   i12 = i2 ? i1 - i4 | 0 : 0;
   i2 = i12 + i5 | 0;
   i12 = (((i5 | 0) > (i2 | 0) ? 0 - i12 | 0 : i12) + ((i8 | 0) < (i6 | 0) ? i6 - i8 | 0 : i8 - i6 | 0) | 0) * 10 | 0;
   i9 = (_FT_DivFix(i3 - i7 | 0, i13) | 0) + i26 | 0;
   i10 = i8 - (_FT_MulFix(i24, i9) | 0) | 0;
   _memset(i36 | 0, 0, 260) | 0;
   i7 = HEAP32[i18 >> 2] | 0;
   i11 = i8 - i7 | 0;
   i6 = HEAP32[i19 >> 2] | 0;
   i5 = i2 - i8 | 0;
   i2 = HEAP32[i21 >> 2] | 0;
   i8 = HEAP32[i20 >> 2] | 0;
   i4 = HEAP32[i22 >> 2] | 0;
   i6 = ((i6 + i5 | 0) < (i2 | 0) ? i2 - i5 | 0 : i6) - i7 | 0;
   i8 = ((i8 + i5 | 0) > (i4 | 0) ? i4 - i5 | 0 : i8) - i7 | 0;
   if ((i6 | 0) >= 0) if (!((i6 | 0) > (i8 | 0) | (i8 | 0) > 64)) {
    if (i14) {
     i5 = i10 - i11 + i6 | 0;
     i4 = 0;
     do {
      i7 = (HEAP16[i33 + (i4 * 48 | 0) + 6 >> 1] | 0) - (HEAP16[i33 + (i4 * 48 | 0) + 4 >> 1] | 0) | 0;
      i1 = i6;
      i2 = i5 + (_FT_MulFix(HEAP16[i33 + (i4 * 48 | 0) + 2 >> 1] | 0, i9) | 0) | 0;
      while (1) {
       i40 = Math_imul(HEAP32[23068 + ((i2 & 63) << 2) >> 2] | 0, i7) | 0;
       i39 = i36 + (i1 << 2) | 0;
       HEAP32[i39 >> 2] = (HEAP32[i39 >> 2] | 0) + i40;
       if ((i1 | 0) < (i8 | 0)) {
        i1 = i1 + 1 | 0;
        i2 = i2 + 1 | 0;
       } else break;
      }
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i25 | 0));
    }
    i5 = HEAP32[i31 >> 2] | 0;
    while (1) {
     i1 = HEAP32[i36 + (i6 << 2) >> 2] | 0;
     i2 = i6 - i11 | 0;
     i4 = i2 + i12 | 0;
     do if ((i1 | 0) > (i5 | 0)) i37 = 35; else {
      if ((i1 | 0) != (i5 | 0)) {
       i1 = i5;
       break;
      }
      if ((i4 | 0) < (HEAP32[i32 >> 2] | 0)) i37 = 35; else i1 = i5;
     } while (0);
     if ((i37 | 0) == 35) {
      i37 = 0;
      HEAP32[i31 >> 2] = i1;
      HEAP32[i32 >> 2] = i4;
      HEAP32[i29 >> 2] = i9;
      HEAP32[i30 >> 2] = i2 + i10;
     }
     if ((i6 | 0) < (i8 | 0)) {
      i6 = i6 + 1 | 0;
      i5 = i1;
     } else break;
    }
   }
   if ((i3 | 0) >= (HEAP32[i15 >> 2] | 0)) break L33;
   i3 = i3 + 1 | 0;
   i7 = HEAP32[i16 >> 2] | 0;
   i6 = HEAP32[i27 >> 2] | 0;
   i5 = HEAP32[i17 >> 2] | 0;
  }
 } while (0);
 i39 = HEAP32[i29 >> 2] | 0;
 i40 = HEAP32[i30 >> 2] | 0;
 i37 = i39 - i26 | 0;
 i36 = (_FT_MulFix(i24, i37) | 0) + i40 | 0;
 HEAP32[i28 + 2992 >> 2] = i36;
 i37 = (_FT_MulFix(i23, i37) | 0) + i40 | 0;
 HEAP32[i28 + 2996 >> 2] = i37;
 HEAP32[i34 >> 2] = i39;
 HEAP32[i35 >> 2] = i40;
 STACKTOP = i38;
 return;
}

function _FT_Raccess_Get_HeaderInfo(i1, i23, i5, i26, i4) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i5 = i5 | 0;
 i26 = i26 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i2 = i25 + 32 | 0;
 i18 = i25 + 16 | 0;
 i19 = i25;
 i20 = i23 + 20 | 0;
 i1 = HEAP32[i20 >> 2] | 0;
 do if (!i1) {
  i1 = i23 + 4 | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  if (i3 >>> 0 < i5 >>> 0) {
   i26 = 85;
   STACKTOP = i25;
   return i26 | 0;
  } else i21 = i1;
 } else if (!(FUNCTION_TABLE_iiiii[i1 & 127](i23, i5, 0, 0) | 0)) {
  i3 = i23 + 4 | 0;
  i21 = i3;
  i3 = HEAP32[i3 >> 2] | 0;
  break;
 } else {
  i26 = 85;
  STACKTOP = i25;
  return i26 | 0;
 } while (0);
 i22 = i23 + 8 | 0;
 HEAP32[i22 >> 2] = i5;
 if (i3 >>> 0 <= i5 >>> 0) {
  i26 = 85;
  STACKTOP = i25;
  return i26 | 0;
 }
 i1 = HEAP32[i20 >> 2] | 0;
 if (!i1) {
  i1 = i3 - i5 | 0;
  i1 = i1 >>> 0 < 16 ? i1 : 16;
  _memcpy(i18 | 0, (HEAP32[i23 >> 2] | 0) + i5 | 0, i1 | 0) | 0;
 } else i1 = FUNCTION_TABLE_iiiii[i1 & 127](i23, i5, i18, 16) | 0;
 HEAP32[i22 >> 2] = i1 + i5;
 if (i1 >>> 0 < 16) {
  i26 = 85;
  STACKTOP = i25;
  return i26 | 0;
 }
 i15 = i18 + 1 | 0;
 i16 = i18 + 2 | 0;
 i17 = i18 + 3 | 0;
 i6 = (HEAPU8[i15 >> 0] << 16 | HEAPU8[i18 >> 0] << 24 | HEAPU8[i16 >> 0] << 8 | HEAPU8[i17 >> 0]) + i5 | 0;
 HEAP32[i4 >> 2] = i6;
 i11 = i18 + 4 | 0;
 i12 = i18 + 5 | 0;
 i13 = i18 + 6 | 0;
 i14 = i18 + 7 | 0;
 i4 = HEAPU8[i12 >> 0] << 16 | HEAPU8[i11 >> 0] << 24 | HEAPU8[i13 >> 0] << 8 | HEAPU8[i14 >> 0];
 i1 = i4 + i5 | 0;
 i7 = i18 + 8 | 0;
 i8 = i18 + 9 | 0;
 i9 = i18 + 10 | 0;
 i10 = i18 + 11 | 0;
 if ((i4 | 0) == 0 ? 1 : ((HEAPU8[i8 >> 0] << 16 | HEAPU8[i7 >> 0] << 24 | HEAPU8[i9 >> 0] << 8 | HEAPU8[i10 >> 0]) + i6 | 0) != (i1 | 0)) {
  i26 = 2;
  STACKTOP = i25;
  return i26 | 0;
 }
 i3 = HEAP32[i20 >> 2] | 0;
 do if (!i3) {
  i3 = HEAP32[i21 >> 2] | 0;
  if (i3 >>> 0 < i1 >>> 0) {
   i26 = 85;
   STACKTOP = i25;
   return i26 | 0;
  }
 } else if (!(FUNCTION_TABLE_iiiii[i3 & 127](i23, i1, 0, 0) | 0)) {
  i3 = HEAP32[i21 >> 2] | 0;
  break;
 } else {
  i26 = 85;
  STACKTOP = i25;
  return i26 | 0;
 } while (0);
 HEAP32[i22 >> 2] = i1;
 i5 = i18 + 15 | 0;
 i6 = i19 + 15 | 0;
 HEAP8[i6 >> 0] = (HEAPU8[i5 >> 0] | 0) + 1;
 if (i3 >>> 0 <= i1 >>> 0) {
  i26 = 85;
  STACKTOP = i25;
  return i26 | 0;
 }
 i4 = HEAP32[i20 >> 2] | 0;
 if (!i4) {
  i3 = i3 - i1 | 0;
  i3 = i3 >>> 0 < 16 ? i3 : 16;
  _memcpy(i19 | 0, (HEAP32[i23 >> 2] | 0) + i1 | 0, i3 | 0) | 0;
 } else i3 = FUNCTION_TABLE_iiiii[i4 & 127](i23, i1, i19, 16) | 0;
 HEAP32[i22 >> 2] = i3 + i1;
 if (i3 >>> 0 < 16) {
  i26 = 85;
  STACKTOP = i25;
  return i26 | 0;
 }
 i4 = HEAP8[i19 >> 0] | 0;
 i3 = HEAP8[i19 + 1 >> 0] | 0;
 i27 = HEAP8[i19 + 2 >> 0] | 0;
 i28 = HEAP8[i19 + 3 >> 0] | 0;
 i29 = HEAP8[i19 + 4 >> 0] | 0;
 i30 = HEAP8[i19 + 5 >> 0] | 0;
 i31 = HEAP8[i19 + 6 >> 0] | 0;
 i32 = HEAP8[i19 + 7 >> 0] | 0;
 i33 = HEAP8[i19 + 8 >> 0] | 0;
 i34 = HEAP8[i19 + 9 >> 0] | 0;
 i35 = HEAP8[i19 + 10 >> 0] | 0;
 i36 = HEAP8[i19 + 11 >> 0] | 0;
 i37 = HEAP8[i19 + 12 >> 0] | 0;
 i38 = HEAP8[i19 + 13 >> 0] | 0;
 i19 = HEAP8[i19 + 14 >> 0] | 0;
 i6 = HEAP8[i6 >> 0] | 0;
 if (!(i6 << 24 >> 24 == (HEAP8[i5 >> 0] | 0) & (i19 << 24 >> 24 == (HEAP8[i18 + 14 >> 0] | 0) & (i38 << 24 >> 24 == (HEAP8[i18 + 13 >> 0] | 0) & (i37 << 24 >> 24 == (HEAP8[i18 + 12 >> 0] | 0) & (i36 << 24 >> 24 == (HEAP8[i10 >> 0] | 0) & (i35 << 24 >> 24 == (HEAP8[i9 >> 0] | 0) & (i34 << 24 >> 24 == (HEAP8[i8 >> 0] | 0) & (i33 << 24 >> 24 == (HEAP8[i7 >> 0] | 0) & (i32 << 24 >> 24 == (HEAP8[i14 >> 0] | 0) & (i31 << 24 >> 24 == (HEAP8[i13 >> 0] | 0) & (i30 << 24 >> 24 == (HEAP8[i12 >> 0] | 0) & (i29 << 24 >> 24 == (HEAP8[i11 >> 0] | 0) & (i28 << 24 >> 24 == (HEAP8[i17 >> 0] | 0) & (i27 << 24 >> 24 == (HEAP8[i16 >> 0] | 0) & (i3 << 24 >> 24 == (HEAP8[i15 >> 0] | 0) ? i4 << 24 >> 24 == (HEAP8[i18 >> 0] | 0) : 0)))))))))))))) | (i6 | (i19 | (i38 | (i37 | (i36 | (i35 | (i34 | (i33 | (i32 | (i31 | (i30 | (i29 | (i28 | (i27 | (i3 | i4))))))))))))))) << 24 >> 24 == 0)) {
  i38 = 2;
  STACKTOP = i25;
  return i38 | 0;
 }
 i3 = HEAP32[i22 >> 2] | 0;
 i4 = i3 + 8 | 0;
 i5 = HEAP32[i20 >> 2] | 0;
 if (!i5) if ((HEAP32[i21 >> 2] | 0) >>> 0 < i4 >>> 0) i4 = i3; else i24 = 25; else if (!(FUNCTION_TABLE_iiiii[i5 & 127](i23, i4, 0, 0) | 0)) i24 = 25; else i4 = HEAP32[i22 >> 2] | 0;
 if ((i24 | 0) == 25) HEAP32[i22 >> 2] = i4;
 do if ((i4 + 1 | 0) >>> 0 < (HEAP32[i21 >> 2] | 0) >>> 0) {
  i3 = HEAP32[i20 >> 2] | 0;
  if (!i3) {
   i2 = (HEAP32[i23 >> 2] | 0) + i4 | 0;
   if (!i2) {
    HEAP32[i22 >> 2] = i4 + 2;
    i24 = 35;
   } else {
    i3 = i4;
    i4 = 0;
    i24 = 33;
   }
  } else {
   if ((FUNCTION_TABLE_iiiii[i3 & 127](i23, i4, i2, 2) | 0) != 2) break;
   i3 = HEAP32[i22 >> 2] | 0;
   i4 = HEAP32[i20 >> 2] | 0;
   i24 = 33;
  }
  if ((i24 | 0) == 33) {
   i38 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
   HEAP32[i22 >> 2] = i3 + 2;
   i1 = i38 + i1 | 0;
   if (!i4) i24 = 35; else if (FUNCTION_TABLE_iiiii[i4 & 127](i23, i1, 0, 0) | 0) {
    i38 = 85;
    STACKTOP = i25;
    return i38 | 0;
   }
  }
  if ((i24 | 0) == 35) if ((HEAP32[i21 >> 2] | 0) >>> 0 < i1 >>> 0) {
   i38 = 85;
   STACKTOP = i25;
   return i38 | 0;
  }
  HEAP32[i22 >> 2] = i1;
  HEAP32[i26 >> 2] = i1;
  i38 = 0;
  STACKTOP = i25;
  return i38 | 0;
 } while (0);
 i38 = 85;
 STACKTOP = i25;
 return i38 | 0;
}

function __bdf_list_split(i2, i1, i9, i8) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i13 = i16;
 i11 = i16 + 8 | 0;
 i15 = i2 + 8 | 0;
 HEAP32[i15 >> 2] = 0;
 i14 = i2 + 4 | 0;
 if (HEAP32[i14 >> 2] | 0) {
  HEAP32[HEAP32[i2 >> 2] >> 2] = 369704;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] = 369704;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] = 369704;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] = 369704;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] = 369704;
 }
 if (!i8) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i3 = HEAP8[i9 >> 0] | 0;
 if (!(i3 << 24 >> 24)) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (!i1) {
  i15 = 6;
  STACKTOP = i16;
  return i15 | 0;
 }
 i7 = HEAP8[i1 >> 0] | 0;
 if (!(i7 << 24 >> 24)) {
  i15 = 6;
  STACKTOP = i16;
  return i15 | 0;
 }
 i4 = i11;
 i5 = i4 + 32 | 0;
 do {
  HEAP8[i4 >> 0] = 0;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (i5 | 0));
 i6 = i1;
 i4 = 0;
 i5 = i7;
 L16 : while (1) {
  switch (i5 << 24 >> 24) {
  case 0:
   break L16;
  case 43:
   {
    i1 = i6 + 1 | 0;
    if (!(HEAP8[i1 >> 0] | 0)) i4 = 1; else i12 = 11;
    break;
   }
  default:
   {
    i1 = i6 + 1 | 0;
    i12 = 11;
   }
  }
  if ((i12 | 0) == 11) {
   i12 = 0;
   i10 = i11 + ((i5 & 255) >>> 3) | 0;
   HEAP8[i10 >> 0] = HEAPU8[i10 >> 0] | 1 << (i5 & 7);
  }
  i6 = i1;
  i5 = HEAP8[i1 >> 0] | 0;
 }
 i10 = i9 + i8 | 0;
 L25 : do if ((i8 | 0) > 0) {
  i7 = i2 + 12 | 0;
  L27 : do if (!i4) {
   i5 = 0;
   i6 = i9;
   while (1) {
    if (!(i3 << 24 >> 24)) break L25; else i1 = i6;
    while (1) {
     if (HEAP8[i11 + ((i3 & 255) >>> 3) >> 0] & 1 << (i3 & 7) | 0) {
      i4 = i1;
      break;
     }
     i1 = i1 + 1 | 0;
     i3 = HEAP8[i1 >> 0] | 0;
     if (!(i3 << 24 >> 24)) {
      i4 = i1;
      break;
     }
    }
    i1 = HEAP32[i15 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i14 >> 2] | 0)) {
     HEAP32[i13 >> 2] = 0;
     if ((i1 | 0) == -1) i1 = -1; else {
      i3 = i1 + 5 + (i1 >>> 1) | 0;
      if ((i1 | 0) == 536870911) {
       i12 = 33;
       break L27;
      }
      i3 = i3 >>> 0 < i1 >>> 0 | i3 >>> 0 > 536870911 ? 536870911 : i3;
      i1 = _ft_mem_realloc(HEAP32[i7 >> 2] | 0, 4, i1, i3, HEAP32[i2 >> 2] | 0, i13) | 0;
      HEAP32[i2 >> 2] = i1;
      i1 = HEAP32[i13 >> 2] | 0;
      if (i1 | 0) break L27;
      HEAP32[i14 >> 2] = i3;
      i1 = HEAP32[i15 >> 2] | 0;
     }
    }
    i9 = HEAP32[i2 >> 2] | 0;
    HEAP32[i15 >> 2] = i1 + 1;
    HEAP32[i9 + (i1 << 2) >> 2] = i4 >>> 0 > i6 >>> 0 ? i6 : 369704;
    if (!(HEAP8[i4 >> 0] | 0)) {
     i3 = 0;
     i1 = 0;
    } else {
     i3 = i4 + 1 | 0;
     HEAP8[i4 >> 0] = 0;
     i1 = HEAP8[i3 >> 0] | 0;
     i4 = i3;
     i3 = i1;
     i1 = i1 << 24 >> 24 == 0;
    }
    i5 = i1 & 1;
    if (i4 >>> 0 < i10 >>> 0) i6 = i4; else break L25;
   }
  } else {
   i5 = 0;
   i4 = i9;
   while (1) {
    if (!(i3 << 24 >> 24)) break L25; else i1 = i4;
    while (1) {
     if (HEAP8[i11 + ((i3 & 255) >>> 3) >> 0] & 1 << (i3 & 7) | 0) {
      i5 = i1;
      break;
     }
     i1 = i1 + 1 | 0;
     i3 = HEAP8[i1 >> 0] | 0;
     if (!(i3 << 24 >> 24)) {
      i5 = i1;
      break;
     }
    }
    i1 = HEAP32[i15 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i14 >> 2] | 0)) {
     HEAP32[i13 >> 2] = 0;
     if ((i1 | 0) == -1) i1 = -1; else {
      i3 = i1 + 5 + (i1 >>> 1) | 0;
      if ((i1 | 0) == 536870911) {
       i12 = 33;
       break L27;
      }
      i3 = i3 >>> 0 < i1 >>> 0 | i3 >>> 0 > 536870911 ? 536870911 : i3;
      i1 = _ft_mem_realloc(HEAP32[i7 >> 2] | 0, 4, i1, i3, HEAP32[i2 >> 2] | 0, i13) | 0;
      HEAP32[i2 >> 2] = i1;
      i1 = HEAP32[i13 >> 2] | 0;
      if (i1 | 0) break L27;
      HEAP32[i14 >> 2] = i3;
      i1 = HEAP32[i15 >> 2] | 0;
     }
    }
    i9 = HEAP32[i2 >> 2] | 0;
    HEAP32[i15 >> 2] = i1 + 1;
    HEAP32[i9 + (i1 << 2) >> 2] = i5 >>> 0 > i4 >>> 0 ? i4 : 369704;
    i1 = HEAP8[i5 >> 0] | 0;
    if (!(i1 << 24 >> 24)) {
     i4 = i5;
     i3 = 0;
     i1 = 0;
    } else {
     i3 = i5;
     while (1) {
      if (!(HEAP8[i11 + ((i1 & 255) >>> 3) >> 0] & 1 << (i1 & 7))) break;
      HEAP8[i3 >> 0] = 0;
      i3 = i3 + 1 | 0;
      i1 = HEAP8[i3 >> 0] | 0;
      if (!(i1 << 24 >> 24)) {
       i1 = 0;
       break;
      }
     }
     i4 = i3;
     i3 = i3 >>> 0 > i5 >>> 0 & i1 << 24 >> 24 == 0;
    }
    i5 = i3 & 1;
    if (i4 >>> 0 < i10 >>> 0) i3 = i1; else break L25;
   }
  } while (0);
  if ((i12 | 0) == 33) {
   HEAP32[i13 >> 2] = 64;
   i1 = 64;
  }
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 } else i5 = 0; while (0);
 i1 = (HEAP32[i15 >> 2] | 0) + i5 | 0;
 i4 = HEAP32[i14 >> 2] | 0;
 if (i1 >>> 0 >= i4 >>> 0) {
  HEAP32[i13 >> 2] = 0;
  do if (i4 >>> 0 < (i1 + 1 | 0) >>> 0) {
   i1 = i4 + 5 + (i4 >>> 1) | 0;
   if ((i4 | 0) == 536870911) {
    HEAP32[i13 >> 2] = 64;
    i1 = 64;
   } else {
    i3 = i1 >>> 0 < i4 >>> 0 | i1 >>> 0 > 536870911 ? 536870911 : i1;
    i1 = _ft_mem_realloc(HEAP32[i2 + 12 >> 2] | 0, 4, i4, i3, HEAP32[i2 >> 2] | 0, i13) | 0;
    HEAP32[i2 >> 2] = i1;
    i1 = HEAP32[i13 >> 2] | 0;
    if (!i1) {
     HEAP32[i14 >> 2] = i3;
     break;
    }
   }
   i15 = i1;
   STACKTOP = i16;
   return i15 | 0;
  } while (0);
 }
 if (!i5) i1 = HEAP32[i15 >> 2] | 0; else {
  i13 = HEAP32[i2 >> 2] | 0;
  i14 = HEAP32[i15 >> 2] | 0;
  i1 = i14 + 1 | 0;
  HEAP32[i15 >> 2] = i1;
  HEAP32[i13 + (i14 << 2) >> 2] = 369704;
 }
 HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] = 0;
 i15 = 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _ass_render_frame(i15, i6, i13, i14, i18) {
 i15 = i15 | 0;
 i6 = i6 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i16 = 0, i17 = 0;
 i2 = i15 + 16 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) {
  if (HEAP32[i15 + 20 >> 2] | 0) i1 = 3;
 } else i1 = 3;
 if ((i1 | 0) == 3) if (HEAP32[i15 + 8 >> 2] | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 + 84 >> 2] | 0)) {
   i12 = i6 + 8 | 0;
   if (HEAP32[i12 >> 2] | 0) {
    HEAP32[i15 + 160 >> 2] = i6;
    i17 = i15 + 168 | 0;
    HEAP32[i17 >> 2] = i13;
    HEAP32[i17 + 4 >> 2] = i14;
    _ass_lazy_track_init(i1, i6);
    _ass_shaper_set_level(HEAP32[i15 + 116 >> 2] | 0, HEAP32[i15 + 92 >> 2] | 0);
    d4 = +HEAPF64[i15 + 80 >> 3];
    if (d4 == 0.0) {
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) d4 = 1.0; else {
      i2 = HEAP32[i15 + 20 >> 2] | 0;
      if (!i2) d4 = 1.0; else {
       i3 = HEAP32[i15 + 24 >> 2] | 0;
       if (!i3) d4 = 1.0; else {
        i5 = HEAP32[i15 + 28 >> 2] | 0;
        if (!i5) d4 = 1.0; else d4 = +(i3 | 0) / +(i5 | 0) / (+(i1 | 0) / +(i2 | 0));
       }
      }
     }
    }
    HEAPF64[i15 + 184 >> 3] = d4;
    i16 = i15 + 120 | 0;
    i17 = i15 + 124 | 0;
    HEAP32[i17 >> 2] = HEAP32[i16 >> 2];
    HEAP32[i16 >> 2] = 0;
    _ass_cache_cut(HEAP32[i15 + 740 >> 2] | 0, HEAP32[i15 + 752 >> 2] | 0);
    _ass_cache_cut(HEAP32[i15 + 736 >> 2] | 0, HEAP32[i15 + 748 >> 2] | 0);
    _ass_cache_cut(HEAP32[i15 + 732 >> 2] | 0, HEAP32[i15 + 744 >> 2] | 0);
    i2 = HEAP32[i12 >> 2] | 0;
    if ((i2 | 0) > 0) {
     i9 = i6 + 20 | 0;
     i10 = i15 + 132 | 0;
     i11 = i15 + 128 | 0;
     i1 = 0;
     i8 = 0;
     do {
      i3 = HEAP32[i9 >> 2] | 0;
      i7 = i3 + (i8 * 56 | 0) | 0;
      i6 = i7;
      i5 = HEAP32[i6 >> 2] | 0;
      i6 = HEAP32[i6 + 4 >> 2] | 0;
      if (!((i6 | 0) > (i14 | 0) | (i6 | 0) == (i14 | 0) & i5 >>> 0 > i13 >>> 0)) {
       i3 = i3 + (i8 * 56 | 0) + 8 | 0;
       i6 = _i64Add(HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, i5 | 0, i6 | 0) | 0;
       i5 = tempRet0;
       if ((i5 | 0) > (i14 | 0) | (i5 | 0) == (i14 | 0) & i6 >>> 0 > i13 >>> 0) {
        i6 = HEAP32[i10 >> 2] | 0;
        i2 = i6 + 100 | 0;
        if ((i1 | 0) < (i6 | 0)) i2 = HEAP32[i11 >> 2] | 0; else {
         HEAP32[i10 >> 2] = i2;
         i2 = _realloc(HEAP32[i11 >> 2] | 0, i2 << 5) | 0;
         HEAP32[i11 >> 2] = i2;
        }
        i1 = ((_ass_render_event(i15, i7, i2 + (i1 << 5) | 0) | 0) == 0 & 1) + i1 | 0;
        i2 = HEAP32[i12 >> 2] | 0;
       }
      }
      i8 = i8 + 1 | 0;
     } while ((i8 | 0) < (i2 | 0));
     i6 = i1;
     i1 = i11;
     i5 = i11;
    } else {
     i5 = i15 + 128 | 0;
     i6 = 0;
     i1 = i5;
    }
    _qsort(HEAP32[i1 >> 2] | 0, i6, 32, 203);
    i1 = HEAP32[i5 >> 2] | 0;
    if ((i6 | 0) > 1) {
     i2 = i1;
     i3 = 1;
     do {
      if ((HEAP32[(HEAP32[i2 + 28 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[(HEAP32[i1 + (i3 << 5) + 28 >> 2] | 0) + 20 >> 2] | 0)) {
       _fix_collisions(i15, i2, i1 + (i3 << 5) - i2 >> 5);
       i1 = HEAP32[i5 >> 2] | 0;
       i2 = i1 + (i3 << 5) | 0;
      }
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) != (i6 | 0));
    } else i2 = i1;
    if ((i6 | 0) > 0) {
     _fix_collisions(i15, i2, i1 + (i6 << 5) - i2 >> 5);
     i1 = i16;
     i3 = 0;
     do {
      i2 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i3 << 5) >> 2] | 0;
      if (i2) do {
       HEAP32[i1 >> 2] = i2;
       i1 = i2 + 28 | 0;
       i2 = HEAP32[i1 >> 2] | 0;
      } while ((i2 | 0) != 0);
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) != (i6 | 0));
    }
    i1 = HEAP32[i16 >> 2] | 0;
    if (i1 | 0) {
     i15 = i1 + 40 | 0;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    }
    i7 = HEAP32[i17 >> 2] | 0;
    if (i18 | 0) {
     L50 : do if (!i7) {
      i3 = i1;
      i2 = 0;
     } else {
      i6 = i7;
      i3 = i1;
      i2 = 0;
      do {
       i5 = i6;
       i6 = HEAP32[i6 + 28 >> 2] | 0;
       if (!i3) {
        i3 = 0;
        i2 = 2;
        break L50;
       }
       do if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) if ((HEAP32[i5 + 4 >> 2] | 0) == (HEAP32[i3 + 4 >> 2] | 0)) if ((HEAP32[i5 + 8 >> 2] | 0) == (HEAP32[i3 + 8 >> 2] | 0)) {
        if ((HEAP32[i5 + 16 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) {
         i5 = 2;
         break;
        }
        if ((HEAP32[i5 + 12 >> 2] | 0) != (HEAP32[i3 + 12 >> 2] | 0)) {
         i5 = 2;
         break;
        }
        if ((HEAP32[i5 + 20 >> 2] | 0) != (HEAP32[i3 + 20 >> 2] | 0)) {
         i5 = 1;
         break;
        }
        i5 = (HEAP32[i5 + 24 >> 2] | 0) != (HEAP32[i3 + 24 >> 2] | 0) & 1;
       } else i5 = 2; else i5 = 2; else i5 = 2; while (0);
       i2 = (i5 | 0) > (i2 | 0) ? i5 : i2;
       i3 = HEAP32[i3 + 28 >> 2] | 0;
      } while ((i6 | 0) != 0 & (i2 | 0) < 2);
     } while (0);
     HEAP32[i18 >> 2] = (i3 | 0) == 0 ? i2 : 2;
    }
    if (i7) {
     i15 = i7 + 40 | 0;
     i18 = (HEAP32[i15 >> 2] | 0) + -1 | 0;
     HEAP32[i15 >> 2] = i18;
     if (!i18) {
      i1 = i7;
      do {
       i2 = i1;
       i1 = HEAP32[i1 + 28 >> 2] | 0;
       i3 = HEAP32[i2 + 36 >> 2] | 0;
       if (!i3) _ass_aligned_free(HEAP32[i2 + 12 >> 2] | 0); else _ass_cache_dec_ref(i3);
       _free(i2);
      } while ((i1 | 0) != 0);
      i1 = HEAP32[i16 >> 2] | 0;
     }
    }
    HEAP32[i17 >> 2] = 0;
    i18 = i1;
    return i18 | 0;
   }
  }
 }
 if (!i18) {
  i18 = 0;
  return i18 | 0;
 }
 HEAP32[i18 >> 2] = 2;
 i18 = 0;
 return i18 | 0;
}

function _tt_face_load_font_dir(i19, i22) {
 i19 = i19 | 0;
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i16 = i24 + 40 | 0;
 i14 = i24 + 24 | 0;
 i18 = i24 + 8 | 0;
 i23 = i24;
 i20 = HEAP32[i22 + 28 >> 2] | 0;
 i1 = _FT_Stream_Pos(i22) | 0;
 i21 = i18 + 12 | 0;
 HEAP32[i21 >> 2] = i1;
 i1 = _FT_Stream_ReadULong(i22, i23) | 0;
 HEAP32[i18 >> 2] = i1;
 i1 = HEAP32[i23 >> 2] | 0;
 if (i1 | 0) {
  i23 = i1;
  STACKTOP = i24;
  return i23 | 0;
 }
 i1 = _FT_Stream_ReadFields(i22, 117404, i18) | 0;
 HEAP32[i23 >> 2] = i1;
 if (i1 | 0) {
  i23 = i1;
  STACKTOP = i24;
  return i23 | 0;
 }
 L7 : do if ((HEAP32[i18 >> 2] | 0) == 1330926671) {
  i2 = i18 + 4 | 0;
  i8 = i2;
  i2 = HEAP16[i2 >> 1] | 0;
  i1 = 1330926671;
 } else {
  i2 = HEAP32[i21 >> 2] | 0;
  i1 = _FT_Stream_Seek(i22, i2 + 12 | 0) | 0;
  HEAP32[i16 >> 2] = i1;
  do if (!i1) {
   i15 = i18 + 4 | 0;
   if (!(HEAP16[i15 >> 1] | 0)) HEAP16[i15 >> 1] = 0; else {
    i11 = i14 + 8 | 0;
    i12 = i22 + 4 | 0;
    i13 = i14 + 12 | 0;
    i10 = i2 + 28 | 0;
    i4 = 0;
    i3 = 0;
    i1 = 0;
    i2 = 0;
    i9 = 0;
    L15 : while (1) {
     i8 = _FT_Stream_ReadFields(i22, 117428, i14) | 0;
     HEAP32[i16 >> 2] = i8;
     if (i8 | 0) {
      i17 = 10;
      break;
     }
     i6 = HEAP32[i11 >> 2] | 0;
     i5 = HEAP32[i12 >> 2] | 0;
     L18 : do if (i5 >>> 0 >= i6 >>> 0) {
      i7 = HEAP32[i13 >> 2] | 0;
      i8 = HEAP32[i14 >> 2] | 0;
      L20 : do if (i7 >>> 0 > (i5 - i6 | 0) >>> 0) if ((i8 | 0) < 1986884728) switch (i8 | 0) {
      case 1752003704:
       break L20;
      default:
       break L18;
      } else switch (i8 | 0) {
      case 1986884728:
       break L20;
      default:
       break L18;
      } while (0);
      i2 = i2 + 1 << 16 >> 16;
      L26 : do if ((i8 | 0) < 1651008868) {
       if ((i8 | 0) >= 1397313095) switch (i8 | 0) {
       case 1397313095:
        {
         i3 = 1;
         break L18;
        }
       default:
        break L26;
       }
       switch (i8 | 0) {
       case 1296389185:
        break;
       default:
        break L26;
       }
       i4 = 1;
       break L18;
      } else {
       if ((i8 | 0) < 1751474532) switch (i8 | 0) {
       case 1651008868:
        break;
       default:
        break L26;
       } else switch (i8 | 0) {
       case 1751474532:
        break;
       default:
        break L26;
       }
       if (i7 >>> 0 < 54) {
        i17 = 16;
        break L15;
       }
       i1 = _FT_Stream_Seek(i22, i6 + 12 | 0) | 0;
       HEAP32[i16 >> 2] = i1;
       if (i1 | 0) {
        i17 = 22;
        break L15;
       }
       _FT_Stream_ReadULong(i22, i16) | 0;
       i1 = HEAP32[i16 >> 2] | 0;
       if (i1 | 0) {
        i17 = 22;
        break L15;
       }
       i1 = _FT_Stream_Seek(i22, i10 + (i9 << 4) | 0) | 0;
       HEAP32[i16 >> 2] = i1;
       if (!i1) {
        i1 = 1;
        break L18;
       } else {
        i17 = 22;
        break L15;
       }
      } while (0);
     } while (0);
     i5 = i9 + 1 | 0;
     if (i5 >>> 0 < (HEAPU16[i15 >> 1] | 0) >>> 0) i9 = i5; else break;
    }
    if ((i17 | 0) == 10) HEAP16[i15 >> 1] = (i9 & 65535) + -1 << 16 >> 16; else if ((i17 | 0) == 16) {
     HEAP32[i16 >> 2] = 142;
     i1 = 142;
     i17 = 22;
    }
    if ((i17 | 0) == 22) break;
    HEAP16[i15 >> 1] = i2;
    if (i2 << 16 >> 16) {
     if (!i1) if (!((i3 | 0) != 0 & (i4 | 0) != 0)) {
      HEAP32[i16 >> 2] = 142;
      i1 = 142;
      break;
     }
     HEAP32[i23 >> 2] = 0;
     i8 = i15;
     i1 = HEAP32[i18 >> 2] | 0;
     break L7;
    }
   }
   HEAP32[i16 >> 2] = 2;
   i1 = 2;
  } while (0);
  HEAP32[i23 >> 2] = i1;
  i23 = i1;
  STACKTOP = i24;
  return i23 | 0;
 } while (0);
 i3 = i19 + 152 | 0;
 HEAP16[i3 >> 1] = i2;
 HEAP32[i19 + 148 >> 2] = i1;
 i1 = _ft_mem_realloc(i20, 16, 0, i2 & 65535, 0, i23) | 0;
 i2 = i19 + 156 | 0;
 HEAP32[i2 >> 2] = i1;
 i1 = HEAP32[i23 >> 2] | 0;
 if (i1 | 0) {
  i23 = i1;
  STACKTOP = i24;
  return i23 | 0;
 }
 i1 = _FT_Stream_Seek(i22, (HEAP32[i21 >> 2] | 0) + 12 | 0) | 0;
 HEAP32[i23 >> 2] = i1;
 if (i1 | 0) {
  i23 = i1;
  STACKTOP = i24;
  return i23 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i22, HEAPU16[i3 >> 1] << 4) | 0;
 HEAP32[i23 >> 2] = i1;
 if (i1 | 0) {
  i23 = i1;
  STACKTOP = i24;
  return i23 | 0;
 }
 if (HEAP16[i8 >> 1] | 0) {
  i7 = i22 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  i6 = 0;
  do {
   i4 = _FT_Stream_GetULong(i22) | 0;
   HEAP32[i1 >> 2] = i4;
   i4 = _FT_Stream_GetULong(i22) | 0;
   HEAP32[i1 + 4 >> 2] = i4;
   i4 = _FT_Stream_GetULong(i22) | 0;
   i2 = i1 + 8 | 0;
   HEAP32[i2 >> 2] = i4;
   i4 = _FT_Stream_GetULong(i22) | 0;
   i5 = i1 + 12 | 0;
   HEAP32[i5 >> 2] = i4;
   i2 = HEAP32[i2 >> 2] | 0;
   i3 = HEAP32[i7 >> 2] | 0;
   L70 : do if (i3 >>> 0 >= i2 >>> 0) {
    i3 = i3 - i2 | 0;
    if (i4 >>> 0 <= i3 >>> 0) {
     i1 = i1 + 16 | 0;
     break;
    }
    i2 = HEAP32[i1 >> 2] | 0;
    if ((i2 | 0) < 1986884728) switch (i2 | 0) {
    case 1752003704:
     break;
    default:
     break L70;
    } else switch (i2 | 0) {
    case 1986884728:
     break;
    default:
     break L70;
    }
    HEAP32[i5 >> 2] = i3 & -4;
    i1 = i1 + 16 | 0;
   } while (0);
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (HEAPU16[i8 >> 1] | 0));
 }
 _FT_Stream_ExitFrame(i22);
 i23 = HEAP32[i23 >> 2] | 0;
 STACKTOP = i24;
 return i23 | 0;
}

function _Cubic_To(i32, i1, i4, i2, i5, i6, i3) {
 i32 = i32 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i33 = 0, i34 = 0, i35 = 0;
 i30 = i32 + 180 | 0;
 i31 = i32 + 52 | 0;
 HEAP32[i31 >> 2] = i30;
 i34 = i32 + 68 | 0;
 HEAP32[i32 + 204 >> 2] = HEAP32[i34 >> 2];
 i33 = i32 + 72 | 0;
 i15 = HEAP32[i33 >> 2] | 0;
 HEAP32[i32 + 208 >> 2] = i15;
 HEAP32[i32 + 196 >> 2] = i1;
 HEAP32[i32 + 200 >> 2] = i4;
 HEAP32[i32 + 188 >> 2] = i2;
 HEAP32[i32 + 192 >> 2] = i5;
 HEAP32[i30 >> 2] = i6;
 HEAP32[i32 + 184 >> 2] = i3;
 i16 = i32 + 100 | 0;
 i17 = i32 + 76 | 0;
 i18 = i32 + 80 | 0;
 i19 = i32 + 86 | 0;
 i20 = i32 + 88 | 0;
 i21 = i32 + 4 | 0;
 i22 = i32 + 8 | 0;
 i23 = i32 + 92 | 0;
 i24 = i32 + 40 | 0;
 i25 = i32 + 36 | 0;
 i26 = i32 + 176 | 0;
 i27 = i32 + 96 | 0;
 i28 = i32 + 87 | 0;
 i29 = i32 + 84 | 0;
 i2 = i30;
 L1 : while (1) {
  i10 = i2 + 28 | 0;
  i11 = i2 + 20 | 0;
  i12 = i2 + 12 | 0;
  i14 = i2 + 4 | 0;
  i13 = (i15 | 0) <= (i3 | 0);
  i9 = (i4 | 0) > (i5 | 0);
  do if (((i9 ? i5 : i4) | 0) < ((i13 ? i15 : i3) | 0) ? 1 : ((i9 ? i4 : i5) | 0) > ((i13 ? i3 : i15) | 0)) {
   i13 = i2 + 24 | 0;
   i14 = HEAP32[i13 >> 2] | 0;
   HEAP32[i2 + 48 >> 2] = i14;
   i35 = i2 + 8 | 0;
   i7 = i2 + 16 | 0;
   i8 = HEAP32[i7 >> 2] | 0;
   i1 = (HEAP32[i35 >> 2] | 0) + 1 | 0;
   i9 = i6 + i1 >> 1;
   HEAP32[i35 >> 2] = i9;
   i14 = i14 + 1 + i8 >> 1;
   HEAP32[i2 + 40 >> 2] = i14;
   i8 = (i1 + i8 >> 1) + 1 | 0;
   i9 = i8 + i9 >> 1;
   HEAP32[i7 >> 2] = i9;
   i14 = i8 + i14 >> 1;
   HEAP32[i2 + 32 >> 2] = i14;
   HEAP32[i13 >> 2] = i14 + 1 + i9 >> 1;
   HEAP32[i2 + 52 >> 2] = i15;
   i13 = i5 + 1 | 0;
   i9 = i3 + i13 >> 1;
   HEAP32[i12 >> 2] = i9;
   i14 = i15 + 1 + i4 >> 1;
   HEAP32[i2 + 44 >> 2] = i14;
   i13 = (i13 + i4 >> 1) + 1 | 0;
   i15 = i13 + i9 >> 1;
   HEAP32[i11 >> 2] = i15;
   i14 = i13 + i14 >> 1;
   HEAP32[i2 + 36 >> 2] = i14;
   HEAP32[i10 >> 2] = i14 + 1 + i15 >> 1;
   HEAP32[i31 >> 2] = i2 + 24;
  } else {
   if ((i15 | 0) == (i3 | 0)) {
    HEAP32[i31 >> 2] = i2 + -24;
    break;
   }
   i9 = i13 ? 1 : 2;
   i2 = HEAP32[i16 >> 2] | 0;
   if ((i2 | 0) != (i9 | 0)) {
    i1 = HEAP32[i21 >> 2] | 0;
    if (i13) i1 = (i15 + -1 + i1 & 0 - i1) - i15 | 0; else i1 = i1 + -1 & i15;
    i8 = (i1 | 0) >= (HEAP32[i22 >> 2] | 0);
    i1 = HEAP32[i24 >> 2] | 0;
    if (i2) {
     i2 = HEAP32[i20 >> 2] | 0;
     i7 = i1 - (HEAP32[i2 + 8 >> 2] | 0) | 0;
     if ((i7 | 0) < 0) {
      i2 = 12;
      break L1;
     }
     if (i7) {
      HEAP32[i2 + 16 >> 2] = i7 >> 2;
      if (i8) {
       i35 = i2 + 12 | 0;
       i7 = HEAPU16[i35 >> 1] | 0;
       HEAP16[i35 >> 1] = (i7 << 1 & 16 ^ 16) + 16 | i7;
      }
      HEAP32[i20 >> 2] = i1;
      i35 = i1 + 32 | 0;
      HEAP32[i24 >> 2] = i35;
      HEAP32[i1 + 16 >> 2] = 0;
      HEAP32[i1 + 8 >> 2] = i35;
      HEAP32[i2 + 28 >> 2] = i1;
      HEAP16[i29 >> 1] = (HEAP16[i29 >> 1] | 0) + 1 << 16 >> 16;
      i1 = i35;
     }
     if (i1 >>> 0 >= (HEAP32[i25 >> 2] | 0) >>> 0) {
      i2 = 18;
      break L1;
     }
     HEAP8[i28 >> 0] = 0;
    }
    if (!(HEAP32[i23 >> 2] | 0)) {
     HEAP32[i20 >> 2] = i1;
     HEAP32[i23 >> 2] = i1;
     i1 = i1 + 32 | 0;
     HEAP32[i24 >> 2] = i1;
    }
    if (i1 >>> 0 >= (HEAP32[i25 >> 2] | 0) >>> 0) {
     i2 = 23;
     break L1;
    }
    i2 = HEAP32[i20 >> 2] | 0;
    i7 = i2 + 12 | 0;
    HEAP32[i2 + 20 >> 2] = 0;
    HEAP32[i2 + 16 >> 2] = 0;
    HEAP32[i2 + 8 >> 2] = i1;
    HEAP32[i2 + 4 >> 2] = 0;
    HEAP32[i2 + 28 >> 2] = 0;
    i1 = HEAPU8[i26 >> 0] | 0;
    HEAP16[i7 >> 1] = i1;
    if (i13) {
     HEAP16[i7 >> 1] = i1 | 8;
     if (i8) HEAP16[i7 >> 1] = i1 | 40;
    } else if (i8) HEAP16[i7 >> 1] = i1 | 16;
    if (!(HEAP32[i27 >> 2] | 0)) HEAP32[i27 >> 2] = i2;
    HEAP32[i16 >> 2] = i9;
    HEAP8[i19 >> 0] = 1;
    HEAP8[i28 >> 0] = 0;
   }
   i1 = HEAP32[i17 >> 2] | 0;
   i2 = HEAP32[i18 >> 2] | 0;
   if (i13) if (!((_Bezier_Up(i32, 3, 69, i1, i2) | 0) << 24 >> 24)) break; else {
    i1 = 1;
    i2 = 41;
    break L1;
   }
   HEAP32[i14 >> 2] = 0 - i3;
   HEAP32[i12 >> 2] = 0 - i5;
   HEAP32[i11 >> 2] = 0 - i4;
   HEAP32[i10 >> 2] = 0 - i15;
   i35 = HEAP8[i19 >> 0] | 0;
   i1 = _Bezier_Up(i32, 3, 69, 0 - i2 | 0, 0 - i1 | 0) | 0;
   if (i35 << 24 >> 24) if (!(HEAP8[i19 >> 0] | 0)) {
    i35 = (HEAP32[i20 >> 2] | 0) + 20 | 0;
    HEAP32[i35 >> 2] = 0 - (HEAP32[i35 >> 2] | 0);
   }
   HEAP32[i14 >> 2] = 0 - (HEAP32[i14 >> 2] | 0);
   if (i1 << 24 >> 24) {
    i1 = 1;
    i2 = 41;
    break L1;
   }
  } while (0);
  i1 = HEAP32[i31 >> 2] | 0;
  if (i1 >>> 0 < i30 >>> 0) {
   i2 = 40;
   break;
  }
  i2 = i1;
  i15 = HEAP32[i1 + 28 >> 2] | 0;
  i3 = HEAP32[i1 + 4 >> 2] | 0;
  i4 = HEAP32[i1 + 20 >> 2] | 0;
  i5 = HEAP32[i1 + 12 >> 2] | 0;
  i6 = HEAP32[i1 >> 2] | 0;
 }
 if ((i2 | 0) == 12) {
  HEAP32[i32 + 44 >> 2] = 99;
  i35 = 1;
  return i35 | 0;
 } else if ((i2 | 0) == 18) {
  HEAP32[i32 + 44 >> 2] = 98;
  i35 = 1;
  return i35 | 0;
 } else if ((i2 | 0) == 23) {
  HEAP32[i32 + 44 >> 2] = 98;
  i35 = 1;
  return i35 | 0;
 } else if ((i2 | 0) == 40) {
  HEAP32[i34 >> 2] = i6;
  HEAP32[i33 >> 2] = i3;
  i35 = 0;
  return i35 | 0;
 } else if ((i2 | 0) == 41) return i1 | 0;
 return 0;
}

function _cid_load_glyph(i15, i16) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i19 = i21 + 16 | 0;
 i20 = i21;
 i12 = HEAP32[i15 + 4 >> 2] | 0;
 i11 = HEAP32[i12 + 328 >> 2] | 0;
 HEAP32[i19 >> 2] = 0;
 i14 = HEAP32[i12 + 100 >> 2] | 0;
 i13 = HEAP32[i12 + 136 >> 2] | 0;
 i17 = HEAP32[(HEAP32[i12 + 128 >> 2] | 0) + 48 >> 2] | 0;
 i18 = (i17 | 0) != 0;
 do if (i18) {
  i7 = i17 + 4 | 0;
  i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i17 >> 2] >> 2] & 127](HEAP32[i7 >> 2] | 0, i16, i20) | 0;
  HEAP32[i19 >> 2] = i1;
  if (!i1) {
   i6 = i12 + 288 | 0;
   i5 = HEAP32[i6 >> 2] | 0;
   i1 = i5 & 255;
   if (!(i1 << 24 >> 24)) i4 = 0; else {
    i2 = 0;
    i3 = HEAP32[i20 >> 2] | 0;
    while (1) {
     i2 = HEAPU8[i3 >> 0] | 0 | i2 << 8;
     i1 = i1 + -1 << 24 >> 24;
     if (!(i1 << 24 >> 24)) {
      i4 = i2;
      break;
     } else i3 = i3 + 1 | 0;
    }
   }
   i1 = HEAP32[i20 + 4 >> 2] | 0;
   if (!i1) {
    i3 = 0;
    i2 = 0;
   } else {
    i2 = i1 - i5 | 0;
    i1 = _ft_mem_alloc(i14, i2, i19) | 0;
    if (!(HEAP32[i19 >> 2] | 0)) {
     _memcpy(i1 | 0, (HEAP32[i20 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0, i2 | 0) | 0;
     i3 = i1;
    } else i3 = i1;
   }
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] & 63](HEAP32[i7 >> 2] | 0, i20);
   i1 = HEAP32[i19 >> 2] | 0;
   if (!i1) {
    i1 = i4;
    break;
   }
  }
  i20 = i1;
  STACKTOP = i21;
  return i20 | 0;
 } else {
  i3 = i12 + 288 | 0;
  i6 = i12 + 292 | 0;
  i1 = (HEAP32[i6 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) | 0;
  i10 = i12 + 308 | 0;
  i2 = _FT_Stream_Seek(i11, (HEAP32[i12 + 284 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) + (Math_imul(i1, i16) | 0) | 0) | 0;
  HEAP32[i19 >> 2] = i2;
  if (i2 | 0) {
   i20 = i2;
   STACKTOP = i21;
   return i20 | 0;
  }
  i1 = _FT_Stream_EnterFrame(i11, i1 << 1) | 0;
  HEAP32[i19 >> 2] = i1;
  if (i1 | 0) {
   i20 = i1;
   STACKTOP = i21;
   return i20 | 0;
  }
  i5 = HEAP32[i11 + 32 >> 2] | 0;
  i8 = HEAP32[i3 >> 2] | 0;
  i1 = i8 & 255;
  if (!(i1 << 24 >> 24)) i9 = 0; else {
   i3 = i8 + 255 & 255;
   i4 = 0;
   i2 = i5;
   while (1) {
    i4 = HEAPU8[i2 >> 0] | 0 | i4 << 8;
    i1 = i1 + -1 << 24 >> 24;
    if (!(i1 << 24 >> 24)) break; else i2 = i2 + 1 | 0;
   }
   i5 = i5 + (i3 + 1) | 0;
   i9 = i4;
  }
  i1 = HEAP32[i6 >> 2] | 0;
  i3 = i1 & 255;
  i6 = i3 << 24 >> 24 == 0;
  if (i6) {
   i4 = 0;
   i1 = 0;
  } else {
   i7 = i1 + 255 & 255;
   i4 = 0;
   i1 = i3;
   i2 = i5;
   while (1) {
    i4 = HEAPU8[i2 >> 0] | 0 | i4 << 8;
    i1 = i1 + -1 << 24 >> 24;
    if (!(i1 << 24 >> 24)) break; else i2 = i2 + 1 | 0;
   }
   if (i6) i1 = 0; else {
    i1 = 0;
    i2 = i5 + (i7 + 1) + i8 | 0;
    while (1) {
     i1 = HEAPU8[i2 >> 0] | 0 | i1 << 8;
     i3 = i3 + -1 << 24 >> 24;
     if (!(i3 << 24 >> 24)) break; else i2 = i2 + 1 | 0;
    }
   }
  }
  i2 = i1 - i4 | 0;
  _FT_Stream_ExitFrame(i11);
  if (i9 >>> 0 >= (HEAP32[i12 + 300 >> 2] | 0) >>> 0) {
   HEAP32[i19 >> 2] = 9;
   i20 = 9;
   STACKTOP = i21;
   return i20 | 0;
  }
  if (!i2) {
   i20 = 0;
   STACKTOP = i21;
   return i20 | 0;
  }
  i3 = _ft_mem_alloc(i14, i2, i19) | 0;
  i1 = HEAP32[i19 >> 2] | 0;
  if (i1 | 0) {
   i20 = i1;
   STACKTOP = i21;
   return i20 | 0;
  }
  i1 = _FT_Stream_ReadAt(i11, (HEAP32[i10 >> 2] | 0) + i4 | 0, i3, i2) | 0;
  HEAP32[i19 >> 2] = i1;
  if (!i1) i1 = i9; else {
   i20 = i1;
   STACKTOP = i21;
   return i20 | 0;
  }
 } while (0);
 i9 = HEAP32[i12 + 316 >> 2] | 0;
 HEAP32[i15 + 1364 >> 2] = HEAP32[i9 + (i1 << 3) >> 2];
 HEAP32[i15 + 1368 >> 2] = HEAP32[i9 + (i1 << 3) + 4 >> 2];
 HEAP32[i15 + 1372 >> 2] = 0;
 i12 = HEAP32[i12 + 304 >> 2] | 0;
 i9 = i15 + 1376 | 0;
 i10 = i12 + (i1 * 252 | 0) + 216 | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 i9 = i12 + (i1 * 252 | 0) + 232 | 0;
 i10 = HEAP32[i9 + 4 >> 2] | 0;
 i11 = i15 + 1392 | 0;
 HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i11 + 4 >> 2] = i10;
 i1 = HEAP32[i12 + (i1 * 252 | 0) + 4 >> 2] | 0;
 HEAP32[i15 + 1360 >> 2] = i1;
 i12 = (i1 | 0) > -1;
 i1 = i12 ? i1 : 0;
 if (i12) FUNCTION_TABLE_viii[HEAP32[i13 + 16 >> 2] & 31](i3, i2, 4330);
 i1 = FUNCTION_TABLE_iiii[HEAP32[i15 + 1484 >> 2] & 127](i15, i3 + i1 | 0, i2 - i1 | 0) | 0;
 HEAP32[i19 >> 2] = i1;
 _ft_mem_free(i14, i3);
 i1 = HEAP32[i19 >> 2] | 0;
 if (!(i18 & (i1 | 0) == 0)) {
  i20 = i1;
  STACKTOP = i21;
  return i20 | 0;
 }
 if (!(HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] | 0)) {
  i20 = 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 i11 = i15 + 32 | 0;
 i13 = (_FT_RoundFix(HEAP32[i11 >> 2] | 0) | 0) >> 16;
 HEAP32[i20 >> 2] = i13;
 HEAP32[i20 + 4 >> 2] = 0;
 i13 = i15 + 40 | 0;
 i18 = (_FT_RoundFix(HEAP32[i13 >> 2] | 0) | 0) >> 16;
 i12 = i20 + 8 | 0;
 HEAP32[i12 >> 2] = i18;
 i15 = i15 + 44 | 0;
 i18 = (_FT_RoundFix(HEAP32[i15 >> 2] | 0) | 0) >> 16;
 i14 = i20 + 12 | 0;
 HEAP32[i14 >> 2] = i18;
 i18 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] & 127](HEAP32[i17 + 4 >> 2] | 0, i16, 0, i20) | 0;
 HEAP32[i19 >> 2] = i18;
 HEAP32[i11 >> 2] = HEAP32[i20 >> 2] << 16;
 HEAP32[i13 >> 2] = HEAP32[i12 >> 2] << 16;
 HEAP32[i15 >> 2] = HEAP32[i14 >> 2] << 16;
 i20 = i18;
 STACKTOP = i21;
 return i20 | 0;
}

function _ps_hints_t1stem3(i14, i1, i4) {
 i14 = i14 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i19 = i22 + 12 | 0;
 i6 = i22;
 i21 = i14 + 4 | 0;
 if (HEAP32[i21 >> 2] | 0) {
  STACKTOP = i22;
  return;
 }
 i20 = HEAP32[i14 >> 2] | 0;
 i13 = (i1 | 0) != 0 & 1;
 i2 = i14 + 16 + (i13 * 36 | 0) | 0;
 L4 : do if ((HEAP32[i14 + 12 >> 2] | 0) == 1) {
  i1 = (_FT_RoundFix(HEAP32[i4 >> 2] | 0) | 0) >> 16;
  i1 = _ps_dimension_add_t1stem(i2, i1, (_FT_RoundFix(HEAP32[i4 + 4 >> 2] | 0) | 0) >> 16, i20, i6) | 0;
  if (!i1) {
   i1 = (_FT_RoundFix(HEAP32[i4 + 8 >> 2] | 0) | 0) >> 16;
   i5 = i6 + 4 | 0;
   i1 = _ps_dimension_add_t1stem(i2, i1, (_FT_RoundFix(HEAP32[i4 + 12 >> 2] | 0) | 0) >> 16, i20, i5) | 0;
   if (!i1) {
    i1 = (_FT_RoundFix(HEAP32[i4 + 16 >> 2] | 0) | 0) >> 16;
    i3 = i6 + 8 | 0;
    i1 = _ps_dimension_add_t1stem(i2, i1, (_FT_RoundFix(HEAP32[i4 + 20 >> 2] | 0) | 0) >> 16, i20, i3) | 0;
    if (!i1) {
     i15 = HEAP32[i6 >> 2] | 0;
     i16 = HEAP32[i5 >> 2] | 0;
     i17 = HEAP32[i3 >> 2] | 0;
     i12 = i14 + 16 + (i13 * 36 | 0) + 24 | 0;
     i11 = HEAP32[i12 >> 2] | 0;
     L9 : do if (!i11) i18 = 13; else {
      i2 = i15 >> 3;
      i3 = 128 >>> (i15 & 7);
      i4 = i16 >> 3;
      i5 = 128 >>> (i16 & 7);
      i6 = i17 >> 3;
      i8 = 128 >>> (i17 & 7);
      i1 = i11;
      i7 = HEAP32[i14 + 16 + (i13 * 36 | 0) + 32 >> 2] | 0;
      while (1) {
       i9 = i7;
       i10 = HEAP32[i9 >> 2] | 0;
       if (i10 >>> 0 > i15 >>> 0) if ((HEAPU8[(HEAP32[i9 + 8 >> 2] | 0) + i2 >> 0] | 0) & i3 | 0) break L9;
       if (i10 >>> 0 > i16 >>> 0) if ((HEAPU8[(HEAP32[i9 + 8 >> 2] | 0) + i4 >> 0] | 0) & i5 | 0) break L9;
       if (i10 >>> 0 > i17 >>> 0) if ((HEAPU8[(HEAP32[i9 + 8 >> 2] | 0) + i6 >> 0] | 0) & i8 | 0) break L9;
       i1 = i1 + -1 | 0;
       if (!i1) {
        i18 = 13;
        break;
       } else i7 = i9 + 16 | 0;
      }
     } while (0);
     if ((i18 | 0) == 13) {
      i5 = i11 + 1 | 0;
      i4 = i14 + 16 + (i13 * 36 | 0) + 28 | 0;
      i1 = HEAP32[i4 >> 2] | 0;
      do if (i5 >>> 0 > i1 >>> 0) {
       HEAP32[i19 >> 2] = 0;
       i3 = i11 + 8 & -8;
       i14 = i14 + 16 + (i13 * 36 | 0) + 32 | 0;
       i2 = _ft_mem_realloc(i20, 16, i1, i3, HEAP32[i14 >> 2] | 0, i19) | 0;
       HEAP32[i14 >> 2] = i2;
       i1 = HEAP32[i19 >> 2] | 0;
       if (!i1) {
        HEAP32[i4 >> 2] = i3;
        i1 = i2;
        break;
       } else break L4;
      } else i1 = HEAP32[i14 + 16 + (i13 * 36 | 0) + 32 >> 2] | 0; while (0);
      i7 = i1 + (i5 << 4) + -16 | 0;
      HEAP32[i7 >> 2] = 0;
      HEAP32[i7 + 12 >> 2] = 0;
      HEAP32[i12 >> 2] = i5;
     }
     if ((i15 | 0) > -1) {
      i4 = i7;
      if ((HEAP32[i4 >> 2] | 0) >>> 0 <= i15 >>> 0) {
       i5 = i15 + 1 | 0;
       i6 = i4 + 4 | 0;
       i2 = ((HEAP32[i6 >> 2] | 0) + 7 | 0) >>> 3;
       i1 = (i15 + 8 | 0) >>> 3;
       HEAP32[i19 >> 2] = 0;
       do if (i1 >>> 0 > i2 >>> 0) {
        i3 = i1 + 7 & 1073741816;
        i1 = i4 + 8 | 0;
        i14 = _ft_mem_realloc(i20, 1, i2, i3, HEAP32[i1 >> 2] | 0, i19) | 0;
        HEAP32[i1 >> 2] = i14;
        i1 = HEAP32[i19 >> 2] | 0;
        if (!i1) {
         HEAP32[i6 >> 2] = i3 << 3;
         break;
        } else break L4;
       } while (0);
       HEAP32[i4 >> 2] = i5;
      }
      i14 = (HEAP32[i4 + 8 >> 2] | 0) + (i15 >>> 3) | 0;
      HEAP8[i14 >> 0] = HEAPU8[i14 >> 0] | 0 | 128 >>> (i15 & 7);
     }
     if ((i16 | 0) > -1) {
      i6 = i7;
      if ((HEAP32[i6 >> 2] | 0) >>> 0 <= i16 >>> 0) {
       i4 = i16 + 1 | 0;
       i5 = i6 + 4 | 0;
       i2 = ((HEAP32[i5 >> 2] | 0) + 7 | 0) >>> 3;
       i1 = (i16 + 8 | 0) >>> 3;
       HEAP32[i19 >> 2] = 0;
       do if (i1 >>> 0 > i2 >>> 0) {
        i3 = i1 + 7 & 1073741816;
        i1 = i6 + 8 | 0;
        i15 = _ft_mem_realloc(i20, 1, i2, i3, HEAP32[i1 >> 2] | 0, i19) | 0;
        HEAP32[i1 >> 2] = i15;
        i1 = HEAP32[i19 >> 2] | 0;
        if (!i1) {
         HEAP32[i5 >> 2] = i3 << 3;
         break;
        } else break L4;
       } while (0);
       HEAP32[i6 >> 2] = i4;
      }
      i15 = (HEAP32[i6 + 8 >> 2] | 0) + (i16 >>> 3) | 0;
      HEAP8[i15 >> 0] = HEAPU8[i15 >> 0] | 0 | 128 >>> (i16 & 7);
      if ((i17 | 0) > -1) {
       i7 = i6;
       i18 = 37;
      }
     } else if ((i17 | 0) > -1) {
      i6 = i7;
      i7 = i6;
      i18 = 37;
     }
     if ((i18 | 0) == 37) {
      if ((HEAP32[i6 >> 2] | 0) >>> 0 <= i17 >>> 0) {
       i4 = i17 + 1 | 0;
       i5 = i7 + 4 | 0;
       i2 = ((HEAP32[i5 >> 2] | 0) + 7 | 0) >>> 3;
       i1 = (i17 + 8 | 0) >>> 3;
       HEAP32[i19 >> 2] = 0;
       do if (i1 >>> 0 > i2 >>> 0) {
        i3 = i1 + 7 & 1073741816;
        i1 = i7 + 8 | 0;
        i20 = _ft_mem_realloc(i20, 1, i2, i3, HEAP32[i1 >> 2] | 0, i19) | 0;
        HEAP32[i1 >> 2] = i20;
        i1 = HEAP32[i19 >> 2] | 0;
        if (!i1) {
         HEAP32[i5 >> 2] = i3 << 3;
         break;
        } else break L4;
       } while (0);
       HEAP32[i6 >> 2] = i4;
      }
      i21 = (HEAP32[i7 + 8 >> 2] | 0) + (i17 >>> 3) | 0;
      HEAP8[i21 >> 0] = HEAPU8[i21 >> 0] | 0 | 128 >>> (i17 & 7);
     }
     STACKTOP = i22;
     return;
    }
   }
  }
 } else i1 = 6; while (0);
 HEAP32[i21 >> 2] = i1;
 STACKTOP = i22;
 return;
}

function _cf2_hintmap_insertHint(i14, i1, i15) {
 i14 = i14 | 0;
 i1 = i1 | 0;
 i15 = i15 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  i13 = 0;
  i1 = i15;
 } else i13 = (HEAP32[i15 >> 2] | 0) != 0 & 1;
 i12 = i14 + 20 | 0;
 i4 = HEAP32[i12 >> 2] | 0;
 L4 : do if (!i4) i11 = 0; else {
  i5 = HEAP32[i1 + 8 >> 2] | 0;
  i2 = 0;
  while (1) {
   i3 = HEAP32[i14 + 28 + (i2 * 20 | 0) + 8 >> 2] | 0;
   if ((i3 | 0) >= (i5 | 0)) break;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i4 >>> 0) {
    i11 = i2;
    break L4;
   }
  }
  if ((i3 | 0) == (i5 | 0)) return;
  if (i13 << 24 >> 24) if ((i3 | 0) <= (HEAP32[i15 + 8 >> 2] | 0)) return;
  if (!(HEAP32[i14 + 28 + (i2 * 20 | 0) >> 2] & 8)) i11 = i2; else return;
 } while (0);
 i10 = HEAP32[i14 + 4 >> 2] | 0;
 do if (HEAP8[i10 + 12 >> 0] | 0) if (!(HEAP32[i1 >> 2] & 16)) {
  i7 = i1 + 8 | 0;
  i6 = HEAP32[i7 >> 2] | 0;
  if (!(i13 << 24 >> 24)) {
   i2 = HEAP32[i10 + 20 >> 2] | 0;
   if (!i2) i9 = 31; else if (!(HEAP8[i10 + 13 >> 0] | 0)) i9 = 31; else {
    i5 = i10 + 24 | 0;
    i3 = i2 + -1 | 0;
    i2 = HEAP32[i5 >> 2] | 0;
    while (1) {
     if (i2 >>> 0 >= i3 >>> 0) break;
     i4 = i2 + 1 | 0;
     if ((HEAP32[i10 + 28 + (i4 * 20 | 0) + 8 >> 2] | 0) > (i6 | 0)) break; else i2 = i4;
    }
    L31 : do if (!i2) i9 = 39; else {
     while (1) {
      i3 = i10 + 28 + (i2 * 20 | 0) + 8 | 0;
      if ((HEAP32[i3 >> 2] | 0) <= (i6 | 0)) break;
      i2 = i2 + -1 | 0;
      if (!i2) {
       i9 = 39;
       break L31;
      }
     }
     HEAP32[i5 >> 2] = i2;
     i3 = HEAP32[i3 >> 2] | 0;
     i9 = 41;
    } while (0);
    if ((i9 | 0) == 39) {
     HEAP32[i5 >> 2] = 0;
     i3 = HEAP32[i10 + 36 >> 2] | 0;
     if ((i3 | 0) > (i6 | 0)) {
      i4 = 0;
      i2 = i10 + 16 | 0;
     } else {
      i2 = 0;
      i9 = 41;
     }
    }
    if ((i9 | 0) == 41) {
     i4 = i2;
     i2 = i10 + 28 + (i2 * 20 | 0) + 16 | 0;
    }
    i2 = _FT_MulFix(i6 - i3 | 0, HEAP32[i2 >> 2] | 0) | 0;
    i2 = (HEAP32[i10 + 28 + (i4 * 20 | 0) + 12 >> 2] | 0) + i2 | 0;
   }
   if ((i9 | 0) == 31) i2 = _FT_MulFix(i6, HEAP32[i10 + 16 >> 2] | 0) | 0;
   HEAP32[i1 + 12 >> 2] = i2;
   break;
  } else {
   i8 = i15 + 8 | 0;
   i6 = ((HEAP32[i8 >> 2] | 0) + i6 | 0) / 2 | 0;
   i2 = HEAP32[i10 + 20 >> 2] | 0;
   if (!i2) i9 = 16; else if (!(HEAP8[i10 + 13 >> 0] | 0)) i9 = 16; else {
    i5 = i10 + 24 | 0;
    i3 = i2 + -1 | 0;
    i2 = HEAP32[i5 >> 2] | 0;
    while (1) {
     if (i2 >>> 0 >= i3 >>> 0) break;
     i4 = i2 + 1 | 0;
     if ((HEAP32[i10 + 28 + (i4 * 20 | 0) + 8 >> 2] | 0) > (i6 | 0)) break; else i2 = i4;
    }
    L53 : do if (!i2) i9 = 24; else {
     while (1) {
      i3 = i10 + 28 + (i2 * 20 | 0) + 8 | 0;
      if ((HEAP32[i3 >> 2] | 0) <= (i6 | 0)) break;
      i2 = i2 + -1 | 0;
      if (!i2) {
       i9 = 24;
       break L53;
      }
     }
     HEAP32[i5 >> 2] = i2;
     i3 = HEAP32[i3 >> 2] | 0;
     i9 = 26;
    } while (0);
    if ((i9 | 0) == 24) {
     HEAP32[i5 >> 2] = 0;
     i3 = HEAP32[i10 + 36 >> 2] | 0;
     if ((i3 | 0) > (i6 | 0)) {
      i4 = 0;
      i2 = i10 + 16 | 0;
     } else {
      i2 = 0;
      i9 = 26;
     }
    }
    if ((i9 | 0) == 26) {
     i4 = i2;
     i2 = i10 + 28 + (i2 * 20 | 0) + 16 | 0;
    }
    i2 = _FT_MulFix(i6 - i3 | 0, HEAP32[i2 >> 2] | 0) | 0;
    i2 = (HEAP32[i10 + 28 + (i4 * 20 | 0) + 12 >> 2] | 0) + i2 | 0;
   }
   if ((i9 | 0) == 16) i2 = _FT_MulFix(i6, HEAP32[i10 + 16 >> 2] | 0) | 0;
   i10 = _FT_MulFix(((HEAP32[i8 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) / 2 | 0, HEAP32[i14 + 16 >> 2] | 0) | 0;
   HEAP32[i1 + 12 >> 2] = i2 - i10;
   HEAP32[i15 + 12 >> 2] = i10 + i2;
   break;
  }
 } while (0);
 if (i11 | 0) if ((HEAP32[i1 + 12 >> 2] | 0) < (HEAP32[i14 + 28 + ((i11 + -1 | 0) * 20 | 0) + 12 >> 2] | 0)) return;
 i5 = HEAP32[i12 >> 2] | 0;
 do if (i5 >>> 0 > i11 >>> 0) {
  i2 = HEAP32[i14 + 28 + (i11 * 20 | 0) + 12 >> 2] | 0;
  if (!(i13 << 24 >> 24)) {
   if ((HEAP32[i1 + 12 >> 2] | 0) <= (i2 | 0)) break;
   return;
  } else {
   if ((HEAP32[i15 + 12 >> 2] | 0) <= (i2 | 0)) break;
   return;
  }
 } while (0);
 i3 = i5 + (i13 & 255) | 0;
 i2 = i5 - i11 | 0;
 if (i3 >>> 0 > 191) return;
 if (i2 | 0) {
  i4 = i2;
  i2 = i5;
  while (1) {
   i2 = i2 + -1 | 0;
   i4 = i4 + -1 | 0;
   i10 = i14 + 28 + (i3 * 20 | 0) | 0;
   i9 = i14 + 28 + (i2 * 20 | 0) | 0;
   HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   HEAP32[i10 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
   HEAP32[i10 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
   HEAP32[i10 + 16 >> 2] = HEAP32[i9 + 16 >> 2];
   if (!i4) break; else i3 = i3 + -1 | 0;
  }
 }
 i10 = i14 + 28 + (i11 * 20 | 0) | 0;
 HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i10 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 if (!(i13 << 24 >> 24)) return;
 i14 = i14 + 28 + ((i11 + 1 | 0) * 20 | 0) | 0;
 HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
 HEAP32[i14 + 16 >> 2] = HEAP32[i15 + 16 >> 2];
 HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 return;
}

function _setContext(i16, i1) {
 i16 = i16 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i26 = HEAP32[i16 + 356 >> 2] | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 if (!(i2 << 24 >> 24)) {
  i30 = 1;
  return i30 | 0;
 }
 i27 = i16 + 428 | 0;
 i28 = i16 + 424 | 0;
 i29 = i16 + 416 | 0;
 i30 = i16 + 432 | 0;
 i17 = i26 + 8 | 0;
 i15 = i16 + 496 | 0;
 i18 = i26 + 4 | 0;
 i19 = i26 + 152 | 0;
 i20 = i16 + 372 | 0;
 i21 = i26 + 60 | 0;
 i22 = i26 + 80 | 0;
 i23 = i26 + 92 | 0;
 i24 = i26 + 88 | 0;
 i25 = i26 + 96 | 0;
 L4 : while (1) {
  i4 = i1;
  L6 : while (1) {
   switch (i2 << 24 >> 24) {
   case 0:
   case 12:
    {
     i2 = 5;
     break L6;
    }
   case 61:
    {
     i2 = 22;
     break L6;
    }
   default:
    {}
   }
   i3 = HEAP32[i27 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i28 >> 2] | 0)) {
    if (!((_poolGrow(i29) | 0) << 24 >> 24)) {
     i1 = 0;
     i2 = 53;
     break L4;
    }
    i3 = HEAP32[i27 >> 2] | 0;
    i2 = HEAP8[i4 >> 0] | 0;
   }
   HEAP32[i27 >> 2] = i3 + 1;
   HEAP8[i3 >> 0] = i2;
   i2 = i4 + 1 | 0;
   if (!(HEAP8[i1 >> 0] | 0)) {
    i1 = 1;
    i2 = 53;
    break L4;
   }
   i4 = i2;
   i2 = HEAP8[i2 >> 0] | 0;
  }
  if ((i2 | 0) == 5) {
   i1 = HEAP32[i27 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i28 >> 2] | 0)) {
    if (!((_poolGrow(i29) | 0) << 24 >> 24)) {
     i1 = 0;
     i2 = 53;
     break;
    }
    i1 = HEAP32[i27 >> 2] | 0;
   }
   HEAP32[i27 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = 0;
   i11 = HEAP32[i30 >> 2] | 0;
   i12 = HEAP32[i17 >> 2] | 0;
   i13 = i11;
   L20 : do if (i12 | 0) {
    i1 = HEAP32[i15 >> 2] | 0;
    i14 = HEAP8[i11 >> 0] | 0;
    if (i14 << 24 >> 24) {
     i2 = i11;
     i3 = i14;
     do {
      i2 = i2 + 1 | 0;
      i1 = i1 * 1000003 ^ i3 & 255;
      i3 = HEAP8[i2 >> 0] | 0;
     } while (i3 << 24 >> 24 != 0);
    }
    i2 = i12 + -1 | 0;
    i3 = i1 & i2;
    i10 = HEAP32[i26 >> 2] | 0;
    i5 = HEAP32[i10 + (i3 << 2) >> 2] | 0;
    if (i5 | 0) {
     i9 = i1 & 0 - i12;
     i8 = i2 >>> 2;
     i1 = 0;
     i2 = i5;
     L27 : while (1) {
      i5 = HEAP32[i2 >> 2] | 0;
      if (i14 << 24 >> 24 == (HEAP8[i5 >> 0] | 0)) {
       i7 = i11;
       i6 = i14;
       do {
        if (!(i6 << 24 >> 24)) break L27;
        i7 = i7 + 1 | 0;
        i5 = i5 + 1 | 0;
        i6 = HEAP8[i7 >> 0] | 0;
       } while (i6 << 24 >> 24 == (HEAP8[i5 >> 0] | 0));
      }
      if (!(i1 << 24 >> 24)) i1 = (i9 >>> ((HEAPU8[i18 >> 0] | 0) + -1 | 0) & i8 | 1) & 255;
      i2 = i1 & 255;
      i3 = (i3 >>> 0 < i2 >>> 0 ? i12 : 0) + (i3 - i2) | 0;
      i2 = HEAP32[i10 + (i3 << 2) >> 2] | 0;
      if (!i2) break L20;
     }
     if (i2 | 0) HEAP8[i2 + 32 >> 0] = 1;
    }
   } while (0);
   i1 = (HEAP8[i4 >> 0] | 0) == 0 ? i4 : i4 + 1 | 0;
   HEAP32[i27 >> 2] = i13;
  } else if ((i2 | 0) == 22) {
   i1 = HEAP32[i27 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i30 >> 2] | 0)) i6 = i19; else {
    if ((i1 | 0) == (HEAP32[i28 >> 2] | 0)) {
     if (!((_poolGrow(i29) | 0) << 24 >> 24)) {
      i1 = 0;
      i2 = 53;
      break;
     }
     i1 = HEAP32[i27 >> 2] | 0;
    }
    HEAP32[i27 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = 0;
    i3 = _lookup(i16, i21, HEAP32[i30 >> 2] | 0, 8) | 0;
    if (!i3) {
     i1 = 0;
     i2 = 53;
     break;
    }
    i2 = HEAP32[i3 >> 2] | 0;
    i14 = HEAP32[i30 >> 2] | 0;
    i1 = i14;
    if ((i2 | 0) == (i14 | 0)) {
     while (1) {
      i1 = HEAP32[i23 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i24 >> 2] | 0)) {
       if (!((_poolGrow(i22) | 0) << 24 >> 24)) {
        i2 = 30;
        break L4;
       }
       i1 = HEAP32[i23 >> 2] | 0;
      }
      i14 = HEAP8[i2 >> 0] | 0;
      HEAP32[i23 >> 2] = i1 + 1;
      HEAP8[i1 >> 0] = i14;
      if (!(HEAP8[i2 >> 0] | 0)) break; else i2 = i2 + 1 | 0;
     }
     i14 = HEAP32[i25 >> 2] | 0;
     HEAP32[i25 >> 2] = HEAP32[i23 >> 2];
     HEAP32[i3 >> 2] = i14;
     if (!i14) {
      i1 = 0;
      i2 = 53;
      break;
     }
     i1 = HEAP32[i30 >> 2] | 0;
    }
    HEAP32[i27 >> 2] = i1;
    i6 = i3;
   }
   L59 : while (1) {
    i5 = i4 + 1 | 0;
    i2 = HEAP8[i5 >> 0] | 0;
    i3 = (i1 | 0) == (HEAP32[i28 >> 2] | 0);
    switch (i2 << 24 >> 24) {
    case 0:
    case 12:
     break L59;
    default:
     {}
    }
    if (i3) {
     if (!((_poolGrow(i29) | 0) << 24 >> 24)) {
      i1 = 0;
      i2 = 53;
      break L4;
     }
     i1 = HEAP32[i27 >> 2] | 0;
     i2 = HEAP8[i5 >> 0] | 0;
    }
    HEAP32[i27 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i2;
    i4 = i5;
    i1 = HEAP32[i27 >> 2] | 0;
   }
   if (i3) {
    if (!((_poolGrow(i29) | 0) << 24 >> 24)) {
     i1 = 0;
     i2 = 53;
     break;
    }
    i1 = HEAP32[i27 >> 2] | 0;
   }
   HEAP32[i27 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = 0;
   if (_addBinding(i16, i6, 0, HEAP32[i30 >> 2] | 0, i20) | 0) {
    i1 = 0;
    i2 = 53;
    break;
   }
   HEAP32[i27 >> 2] = HEAP32[i30 >> 2];
   i1 = (HEAP8[i5 >> 0] | 0) == 0 ? i5 : i4 + 2 | 0;
  }
  i2 = HEAP8[i1 >> 0] | 0;
  if (!(i2 << 24 >> 24)) {
   i1 = 1;
   i2 = 53;
   break;
  }
 }
 if ((i2 | 0) == 30) {
  HEAP32[i3 >> 2] = 0;
  i30 = 0;
  return i30 | 0;
 } else if ((i2 | 0) == 53) return i1 | 0;
 return 0;
}

function _ass_shrink_horz_c(i2, i58, i1, i59) {
 i2 = i2 | 0;
 i58 = i58 | 0;
 i1 = i1 | 0;
 i59 = i59 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0;
 i62 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i60 = i62;
 i61 = (i1 + 5 | 0) >>> 1;
 i57 = Math_imul(i1 + 15 & -16, i59) | 0;
 i8 = i59 << 4;
 i9 = i60 + 32 | 0;
 if (!i61) {
  STACKTOP = i62;
  return;
 }
 i10 = (i59 | 0) == 0;
 i11 = i60 + 2 | 0;
 i12 = i60 + 4 | 0;
 i13 = i60 + 6 | 0;
 i14 = i60 + 8 | 0;
 i15 = i60 + 10 | 0;
 i16 = i60 + 12 | 0;
 i17 = i60 + 14 | 0;
 i18 = i60 + 16 | 0;
 i19 = i60 + 18 | 0;
 i20 = i60 + 20 | 0;
 i21 = i60 + 22 | 0;
 i22 = i60 + 24 | 0;
 i23 = i60 + 26 | 0;
 i24 = i60 + 28 | 0;
 i25 = i60 + 30 | 0;
 i26 = i60 + 34 | 0;
 i27 = i60 + 36 | 0;
 i28 = i60 + 38 | 0;
 i29 = i60 + 40 | 0;
 i30 = i60 + 42 | 0;
 i31 = i60 + 44 | 0;
 i32 = i60 + 46 | 0;
 i33 = i60 + 48 | 0;
 i34 = i60 + 50 | 0;
 i35 = i60 + 52 | 0;
 i36 = i60 + 54 | 0;
 i37 = i60 + 56 | 0;
 i38 = i60 + 58 | 0;
 i39 = i60 + 60 | 0;
 i40 = i60 + 62 | 0;
 i41 = i60 + 64 | 0;
 i42 = i60 + 66 | 0;
 i43 = i60 + 68 | 0;
 i44 = i60 + 70 | 0;
 i45 = i60 + 72 | 0;
 i46 = i60 + 74 | 0;
 i47 = i60 + 76 | 0;
 i48 = i60 + 78 | 0;
 i49 = i60 + 80 | 0;
 i50 = i60 + 82 | 0;
 i51 = i60 + 84 | 0;
 i52 = i60 + 86 | 0;
 i53 = i60 + 88 | 0;
 i54 = i60 + 90 | 0;
 i55 = i60 + 92 | 0;
 i56 = i60 + 94 | 0;
 i7 = 0;
 i1 = 0;
 while (1) {
  if (!i10) {
   i6 = i2 + (i8 << 1) | 0;
   i4 = 0;
   i5 = i1;
   while (1) {
    i3 = i5 - i8 | 0;
    i3 = i3 >>> 0 < i57 >>> 0 ? i58 + (i3 << 1) | 0 : 368376;
    HEAP16[i60 >> 1] = HEAP16[i3 >> 1] | 0;
    HEAP16[i11 >> 1] = HEAP16[i3 + 2 >> 1] | 0;
    HEAP16[i12 >> 1] = HEAP16[i3 + 4 >> 1] | 0;
    HEAP16[i13 >> 1] = HEAP16[i3 + 6 >> 1] | 0;
    HEAP16[i14 >> 1] = HEAP16[i3 + 8 >> 1] | 0;
    HEAP16[i15 >> 1] = HEAP16[i3 + 10 >> 1] | 0;
    HEAP16[i16 >> 1] = HEAP16[i3 + 12 >> 1] | 0;
    HEAP16[i17 >> 1] = HEAP16[i3 + 14 >> 1] | 0;
    HEAP16[i18 >> 1] = HEAP16[i3 + 16 >> 1] | 0;
    HEAP16[i19 >> 1] = HEAP16[i3 + 18 >> 1] | 0;
    HEAP16[i20 >> 1] = HEAP16[i3 + 20 >> 1] | 0;
    HEAP16[i21 >> 1] = HEAP16[i3 + 22 >> 1] | 0;
    HEAP16[i22 >> 1] = HEAP16[i3 + 24 >> 1] | 0;
    HEAP16[i23 >> 1] = HEAP16[i3 + 26 >> 1] | 0;
    HEAP16[i24 >> 1] = HEAP16[i3 + 28 >> 1] | 0;
    HEAP16[i25 >> 1] = HEAP16[i3 + 30 >> 1] | 0;
    i3 = i5 >>> 0 < i57 >>> 0 ? i58 + (i5 << 1) | 0 : 368376;
    HEAP16[i9 >> 1] = HEAP16[i3 >> 1] | 0;
    HEAP16[i26 >> 1] = HEAP16[i3 + 2 >> 1] | 0;
    HEAP16[i27 >> 1] = HEAP16[i3 + 4 >> 1] | 0;
    HEAP16[i28 >> 1] = HEAP16[i3 + 6 >> 1] | 0;
    HEAP16[i29 >> 1] = HEAP16[i3 + 8 >> 1] | 0;
    HEAP16[i30 >> 1] = HEAP16[i3 + 10 >> 1] | 0;
    HEAP16[i31 >> 1] = HEAP16[i3 + 12 >> 1] | 0;
    HEAP16[i32 >> 1] = HEAP16[i3 + 14 >> 1] | 0;
    HEAP16[i33 >> 1] = HEAP16[i3 + 16 >> 1] | 0;
    HEAP16[i34 >> 1] = HEAP16[i3 + 18 >> 1] | 0;
    HEAP16[i35 >> 1] = HEAP16[i3 + 20 >> 1] | 0;
    HEAP16[i36 >> 1] = HEAP16[i3 + 22 >> 1] | 0;
    HEAP16[i37 >> 1] = HEAP16[i3 + 24 >> 1] | 0;
    HEAP16[i38 >> 1] = HEAP16[i3 + 26 >> 1] | 0;
    HEAP16[i39 >> 1] = HEAP16[i3 + 28 >> 1] | 0;
    HEAP16[i40 >> 1] = HEAP16[i3 + 30 >> 1] | 0;
    i3 = i5 + i8 | 0;
    i3 = i3 >>> 0 < i57 >>> 0 ? i58 + (i3 << 1) | 0 : 368376;
    HEAP16[i41 >> 1] = HEAP16[i3 >> 1] | 0;
    HEAP16[i42 >> 1] = HEAP16[i3 + 2 >> 1] | 0;
    HEAP16[i43 >> 1] = HEAP16[i3 + 4 >> 1] | 0;
    HEAP16[i44 >> 1] = HEAP16[i3 + 6 >> 1] | 0;
    HEAP16[i45 >> 1] = HEAP16[i3 + 8 >> 1] | 0;
    HEAP16[i46 >> 1] = HEAP16[i3 + 10 >> 1] | 0;
    HEAP16[i47 >> 1] = HEAP16[i3 + 12 >> 1] | 0;
    HEAP16[i48 >> 1] = HEAP16[i3 + 14 >> 1] | 0;
    HEAP16[i49 >> 1] = HEAP16[i3 + 16 >> 1] | 0;
    HEAP16[i50 >> 1] = HEAP16[i3 + 18 >> 1] | 0;
    HEAP16[i51 >> 1] = HEAP16[i3 + 20 >> 1] | 0;
    HEAP16[i52 >> 1] = HEAP16[i3 + 22 >> 1] | 0;
    HEAP16[i53 >> 1] = HEAP16[i3 + 24 >> 1] | 0;
    HEAP16[i54 >> 1] = HEAP16[i3 + 26 >> 1] | 0;
    HEAP16[i55 >> 1] = HEAP16[i3 + 28 >> 1] | 0;
    HEAP16[i56 >> 1] = HEAP16[i3 + 30 >> 1] | 0;
    i3 = 0;
    do {
     i63 = i3 << 1;
     i65 = HEAP16[i9 + (i63 + -3 << 1) >> 1] | 0;
     i64 = HEAP16[i9 + (i63 << 1) >> 1] | 0;
     i66 = HEAP16[i9 + (i63 + -2 << 1) >> 1] | 0;
     i67 = HEAP16[i9 + (i63 + -1 << 1) >> 1] | 0;
     HEAP16[i2 + (i3 << 1) >> 1] = (i66 + 2 + i67 + ((i64 + i65 + ((i67 + i66 + (i65 + (HEAP16[i9 + (i63 + -4 << 1) >> 1] | 0) + i64 + (HEAP16[i9 + ((i63 | 1) << 1) >> 1] | 0) >> 1) | 0) >>> 1) | 0) >>> 1) | 0) >>> 2;
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) != 16);
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i59 | 0)) break; else {
     i5 = i5 + 16 | 0;
     i2 = i2 + 32 | 0;
    }
   }
   i2 = i6;
   i1 = i8 + i1 | 0;
  }
  i7 = i7 + 16 | 0;
  if (i7 >>> 0 >= i61 >>> 0) break; else i1 = i1 + i8 | 0;
 }
 STACKTOP = i62;
 return;
}

function _raccess_guess_apple_generic(i8, i4, i12) {
 i8 = i8 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i14;
 i13 = i8 + 8 | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 i11 = i8 + 4 | 0;
 do if ((i2 + 3 | 0) >>> 0 < (HEAP32[i11 >> 2] | 0) >>> 0) {
  i9 = i8 + 20 | 0;
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i1) {
   i1 = (HEAP32[i8 >> 2] | 0) + i2 | 0;
   if (!i1) i1 = 0; else i7 = 6;
  } else {
   if ((FUNCTION_TABLE_iiiii[i1 & 127](i8, i2, i10, 4) | 0) != 4) break;
   i1 = i10;
   i2 = HEAP32[i13 >> 2] | 0;
   i7 = 6;
  }
  if ((i7 | 0) == 6) i1 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
  i3 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i3;
  if ((i1 | 0) != (i4 | 0)) {
   i13 = 2;
   STACKTOP = i14;
   return i13 | 0;
  }
  L13 : do if ((i2 + 7 | 0) >>> 0 < (HEAP32[i11 >> 2] | 0) >>> 0) {
   i1 = HEAP32[i9 >> 2] | 0;
   do if (!i1) {
    HEAP32[i13 >> 2] = i2 + 8;
    i2 = i2 + 24 | 0;
    i7 = 17;
   } else {
    if ((FUNCTION_TABLE_iiiii[i1 & 127](i8, i3, i10, 4) | 0) != 4) break L13;
    i3 = HEAP32[i13 >> 2] | 0;
    i1 = HEAP32[i9 >> 2] | 0;
    HEAP32[i13 >> 2] = i3 + 4;
    i2 = i3 + 20 | 0;
    if (!i1) i7 = 17; else if (!(FUNCTION_TABLE_iiiii[i1 & 127](i8, i2, 0, 0) | 0)) {
     i1 = HEAP32[i11 >> 2] | 0;
     break;
    } else {
     i13 = 85;
     STACKTOP = i14;
     return i13 | 0;
    }
   } while (0);
   if ((i7 | 0) == 17) {
    i1 = HEAP32[i11 >> 2] | 0;
    if (i1 >>> 0 < i2 >>> 0) {
     i13 = 85;
     STACKTOP = i14;
     return i13 | 0;
    }
   }
   HEAP32[i13 >> 2] = i2;
   do if ((i3 + 21 | 0) >>> 0 < i1 >>> 0) {
    i1 = HEAP32[i9 >> 2] | 0;
    if (!i1) {
     i1 = (HEAP32[i8 >> 2] | 0) + i2 | 0;
     if (!i1) {
      HEAP32[i13 >> 2] = i3 + 22;
      i13 = 2;
      STACKTOP = i14;
      return i13 | 0;
     }
    } else {
     if ((FUNCTION_TABLE_iiiii[i1 & 127](i8, i2, i10, 2) | 0) != 2) break;
     i1 = i10;
     i2 = HEAP32[i13 >> 2] | 0;
    }
    i6 = (HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0);
    i1 = i2 + 2 | 0;
    HEAP32[i13 >> 2] = i1;
    if (!i6) {
     i13 = 2;
     STACKTOP = i14;
     return i13 | 0;
    }
    L39 : do if ((i2 + 5 | 0) >>> 0 < (HEAP32[i11 >> 2] | 0) >>> 0) {
     i5 = 0;
     L40 : while (1) {
      i2 = HEAP32[i9 >> 2] | 0;
      if (!i2) {
       i2 = (HEAP32[i8 >> 2] | 0) + i1 | 0;
       if (!i2) {
        HEAP32[i13 >> 2] = i1 + 4;
        i1 = i1 + 12 | 0;
        i7 = 49;
       } else i7 = 33;
      } else {
       if ((FUNCTION_TABLE_iiiii[i2 & 127](i8, i1, i10, 4) | 0) != 4) break L39;
       i2 = i10;
       i1 = HEAP32[i13 >> 2] | 0;
       i7 = 33;
      }
      L47 : do if ((i7 | 0) == 33) {
       i7 = 0;
       i4 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
       i3 = i1 + 4 | 0;
       HEAP32[i13 >> 2] = i3;
       if ((i4 | 0) != 2) {
        i2 = HEAP32[i9 >> 2] | 0;
        i1 = i1 + 12 | 0;
        if (!i2) {
         i7 = 49;
         break;
        }
        if (!(FUNCTION_TABLE_iiiii[i2 & 127](i8, i1, 0, 0) | 0)) {
         i7 = 50;
         break;
        } else {
         i1 = 85;
         i7 = 53;
         break L40;
        }
       }
       i2 = HEAP32[i11 >> 2] | 0;
       do if ((i1 + 7 | 0) >>> 0 < i2 >>> 0) {
        i1 = HEAP32[i9 >> 2] | 0;
        if (!i1) {
         i1 = (HEAP32[i8 >> 2] | 0) + i3 | 0;
         if (!i1) i4 = 0; else i7 = 39;
        } else {
         if ((FUNCTION_TABLE_iiiii[i1 & 127](i8, i3, i10, 4) | 0) != 4) break;
         i1 = i10;
         i3 = HEAP32[i13 >> 2] | 0;
         i2 = HEAP32[i11 >> 2] | 0;
         i7 = 39;
        }
        if ((i7 | 0) == 39) {
         i7 = 0;
         i4 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
        }
        i1 = i3 + 4 | 0;
        HEAP32[i13 >> 2] = i1;
        if ((i3 + 7 | 0) >>> 0 < i2 >>> 0) {
         i2 = HEAP32[i9 >> 2] | 0;
         if (!i2) break L40;
         if ((FUNCTION_TABLE_iiiii[i2 & 127](i8, i1, i10, 4) | 0) == 4) {
          i7 = 44;
          break L40;
         }
        }
        break L47;
       } while (0);
      } while (0);
      if ((i7 | 0) == 49) if ((HEAP32[i11 >> 2] | 0) >>> 0 < i1 >>> 0) {
       i1 = 85;
       i7 = 53;
       break;
      } else i7 = 50;
      if ((i7 | 0) == 50) HEAP32[i13 >> 2] = i1;
      i5 = i5 + 1 | 0;
      if ((i5 | 0) >= (i6 | 0)) {
       i1 = 2;
       i7 = 53;
       break;
      }
      i1 = HEAP32[i13 >> 2] | 0;
      if ((i1 + 3 | 0) >>> 0 >= (HEAP32[i11 >> 2] | 0) >>> 0) break L39;
     }
     if ((i7 | 0) == 44) i1 = HEAP32[i13 >> 2] | 0; else if ((i7 | 0) == 53) {
      STACKTOP = i14;
      return i1 | 0;
     }
     HEAP32[i13 >> 2] = i1 + 4;
     HEAP32[i12 >> 2] = i4;
     i13 = 0;
     STACKTOP = i14;
     return i13 | 0;
    } while (0);
    i13 = 85;
    STACKTOP = i14;
    return i13 | 0;
   } while (0);
   i13 = 85;
   STACKTOP = i14;
   return i13 | 0;
  } while (0);
  i13 = 85;
  STACKTOP = i14;
  return i13 | 0;
 } while (0);
 i13 = 85;
 STACKTOP = i14;
 return i13 | 0;
}

function _tt_cmap14_variant_chars(i12, i13, i4) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i14 = i16;
 i11 = HEAP32[i12 + 16 >> 2] | 0;
 i5 = i11 + 10 | 0;
 i1 = 0;
 i2 = 0;
 i3 = (HEAPU8[i11 + 7 >> 0] | 0) << 16 | (HEAPU8[i11 + 6 >> 0] | 0) << 24 | (HEAPU8[i11 + 8 >> 0] | 0) << 8 | (HEAPU8[i11 + 9 >> 0] | 0);
 while (1) {
  if (i2 >>> 0 >= i3 >>> 0) {
   i1 = 0;
   i10 = 44;
   break;
  }
  i6 = (i2 + i3 | 0) >>> 1;
  i9 = i5 + (i6 * 11 | 0) + 3 | 0;
  i15 = i9 + -3 | 0;
  i15 = (HEAPU8[i15 + 1 >> 0] | 0) << 8 | (HEAPU8[i15 >> 0] | 0) << 16 | (HEAPU8[i15 + 2 >> 0] | 0);
  i7 = i15 >>> 0 > i4 >>> 0;
  i8 = i15 >>> 0 < i4 >>> 0;
  i9 = i8 ? i1 : i9;
  if ((i15 | 0) == (i4 | 0)) break; else {
   i1 = i7 ? i1 : i9;
   i2 = i7 ? i2 : i8 ? i6 + 1 | 0 : i2;
   i3 = i7 ? i6 : i3;
  }
 }
 if ((i10 | 0) == 44) {
  STACKTOP = i16;
  return i1 | 0;
 }
 if (!i9) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i2 = (HEAPU8[i9 + 1 >> 0] | 0) << 16 | (HEAPU8[i9 >> 0] | 0) << 24 | (HEAPU8[i9 + 2 >> 0] | 0) << 8 | (HEAPU8[i9 + 3 >> 0] | 0);
 i1 = (HEAPU8[i9 + 5 >> 0] | 0) << 16 | (HEAPU8[i9 + 4 >> 0] | 0) << 24 | (HEAPU8[i9 + 6 >> 0] | 0) << 8 | (HEAPU8[i9 + 7 >> 0] | 0);
 if (!(i1 | i2)) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (!i2) {
  i15 = _tt_cmap14_get_nondef_chars(i12, i11 + i1 | 0, i13) | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (!i1) {
  i15 = _tt_cmap14_get_def_chars(i12, i11 + i2 | 0, i13) | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i6 = i11 + i1 | 0;
 i4 = i11 + i2 | 0;
 i7 = i6 + 4 | 0;
 i11 = i7 + -4 | 0;
 i11 = (HEAPU8[i11 + 1 >> 0] | 0) << 16 | (HEAPU8[i11 >> 0] | 0) << 24 | (HEAPU8[i11 + 2 >> 0] | 0) << 8 | (HEAPU8[i11 + 3 >> 0] | 0);
 i15 = (HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0);
 if (!i15) i1 = 0; else {
  i2 = i15;
  i3 = i4 + 7 | 0;
  i1 = 0;
  while (1) {
   i1 = i1 + 1 + (HEAPU8[i3 >> 0] | 0) | 0;
   i2 = i2 + -1 | 0;
   if (!i2) break; else i3 = i3 + 4 | 0;
  }
 }
 i5 = i4 + 4 | 0;
 if (!i11) {
  i15 = _tt_cmap14_get_def_chars(i12, i4, i13) | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (!i1) {
  i15 = _tt_cmap14_get_nondef_chars(i12, i6, i13) | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i2 = i11 + 1 + i1 | 0;
 i3 = i12 + 28 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i14 >> 2] = 0;
 do if (i1 >>> 0 < i2 >>> 0) {
  HEAP32[i12 + 36 >> 2] = i13;
  i12 = i12 + 32 | 0;
  i1 = _ft_mem_realloc(i13, 4, i1, i2, HEAP32[i12 >> 2] | 0, i14) | 0;
  HEAP32[i12 >> 2] = i1;
  if (!(HEAP32[i14 >> 2] | 0)) {
   HEAP32[i3 >> 2] = i2;
   i10 = i1;
   break;
  }
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 } else i10 = HEAP32[i12 + 32 >> 2] | 0; while (0);
 i4 = i5 + 3 | 0;
 i5 = i4 + -3 | 0;
 i2 = i7 + 3 | 0;
 i9 = i2 + -3 | 0;
 i8 = 1;
 i6 = 1;
 i7 = i4 + 1 | 0;
 i9 = (HEAPU8[i9 + 1 >> 0] | 0) << 8 | (HEAPU8[i9 >> 0] | 0) << 16 | (HEAPU8[i9 + 2 >> 0] | 0);
 i4 = HEAPU8[i4 >> 0] | 0;
 i5 = (HEAPU8[i5 + 1 >> 0] | 0) << 8 | (HEAPU8[i5 >> 0] | 0) << 16 | (HEAPU8[i5 + 2 >> 0] | 0);
 i2 = i2 + 2 | 0;
 i1 = 0;
 L42 : while (1) {
  if (i9 >>> 0 > (i4 + i5 | 0) >>> 0) while (1) {
   i3 = 0;
   do {
    i14 = i1;
    i1 = i1 + 1 | 0;
    HEAP32[i10 + (i14 << 2) >> 2] = i3 + i5;
    i3 = i3 + 1 | 0;
   } while (i3 >>> 0 <= i4 >>> 0);
   i6 = i6 + 1 | 0;
   if (i6 >>> 0 > i15 >>> 0) break L42;
   i5 = (HEAPU8[i7 + 1 >> 0] | 0) << 8 | (HEAPU8[i7 >> 0] | 0) << 16 | (HEAPU8[i7 + 2 >> 0] | 0);
   i3 = i7 + 4 | 0;
   i4 = HEAPU8[i7 + 3 >> 0] | 0;
   if (i9 >>> 0 > (i4 + i5 | 0) >>> 0) i7 = i3; else {
    i7 = i3;
    break;
   }
  }
  if (i9 >>> 0 < i5 >>> 0) {
   HEAP32[i10 + (i1 << 2) >> 2] = i9;
   i1 = i1 + 1 | 0;
  }
  i3 = i8 + 1 | 0;
  if (i3 >>> 0 > i11 >>> 0) {
   i8 = i3;
   break;
  }
  i8 = i3;
  i9 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) << 16 | (HEAPU8[i2 + 2 >> 0] | 0);
  i2 = i2 + 5 | 0;
 }
 if (i8 >>> 0 > i11 >>> 0) {
  if (i6 >>> 0 <= i15 >>> 0) {
   i2 = 0;
   do {
    i14 = i1;
    i1 = i1 + 1 | 0;
    HEAP32[i10 + (i14 << 2) >> 2] = i2 + i5;
    i2 = i2 + 1 | 0;
   } while (i2 >>> 0 <= i4 >>> 0);
   if (i6 >>> 0 < i15 >>> 0) while (1) {
    i3 = (HEAPU8[i7 + 1 >> 0] | 0) << 8 | (HEAPU8[i7 >> 0] | 0) << 16 | (HEAPU8[i7 + 2 >> 0] | 0);
    i4 = HEAPU8[i7 + 3 >> 0] | 0;
    i5 = i1 + 1 | 0;
    i2 = 0;
    while (1) {
     HEAP32[i10 + (i1 << 2) >> 2] = i2 + i3;
     if ((i2 | 0) == (i4 | 0)) break; else {
      i2 = i2 + 1 | 0;
      i1 = i1 + 1 | 0;
     }
    }
    i1 = i5 + i4 | 0;
    i6 = i6 + 1 | 0;
    if ((i6 | 0) == (i15 | 0)) break; else i7 = i7 + 4 | 0;
   }
  }
 } else {
  HEAP32[i10 + (i1 << 2) >> 2] = i9;
  i4 = i1 + 1 | 0;
  if (i8 >>> 0 < i11 >>> 0) {
   i5 = i1 + i11 + 1 | 0;
   i3 = i8;
   i1 = i4;
   while (1) {
    HEAP32[i10 + (i1 << 2) >> 2] = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) << 16 | (HEAPU8[i2 + 2 >> 0] | 0);
    i3 = i3 + 1 | 0;
    if ((i3 | 0) == (i11 | 0)) break; else {
     i2 = i2 + 5 | 0;
     i1 = i1 + 1 | 0;
    }
   }
   i1 = i5 - i8 | 0;
  } else i1 = i4;
 }
 HEAP32[i10 + (i1 << 2) >> 2] = 0;
 i15 = i10;
 STACKTOP = i16;
 return i15 | 0;
}

function _cf2_doFlex(i14, i15, i18, i19, i11, i10) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i20 = i21;
 i3 = HEAP32[i15 >> 2] | 0;
 HEAP32[i20 >> 2] = i3;
 HEAP32[i20 + 4 >> 2] = HEAP32[i18 >> 2];
 i8 = (HEAP8[i11 + 9 >> 0] | 0) == 0;
 i9 = i8 ? 9 : 10;
 i16 = i14 + 392 | 0;
 i17 = i14 + 8 | 0;
 i12 = i17;
 i13 = i14 + 4 | 0;
 i7 = 0;
 i5 = 0;
 while (1) {
  i4 = i20 + (i7 + 2 << 2) | 0;
  HEAP32[i4 >> 2] = i3;
  if (HEAP8[i11 + i7 >> 0] | 0) {
   i6 = i5 + 1 | 0;
   L5 : do if ((HEAP32[i16 >> 2] | 0) - i12 >> 3 >>> 0 > i5 >>> 0) {
    i1 = i14 + 8 + (i5 << 3) | 0;
    switch (HEAP32[i14 + 8 + (i5 << 3) + 4 >> 2] | 0) {
    case 2:
     {
      i2 = HEAP32[i1 >> 2] << 16;
      i1 = i3;
      break L5;
     }
    case 1:
     {
      i1 = HEAP32[i1 >> 2] | 0;
      if ((i1 | 0) < 0) {
       i2 = 0 - (8192 - i1 >> 14) | 0;
       i1 = i3;
       break L5;
      } else {
       i2 = i1 + 8192 >> 14;
       i1 = i3;
       break L5;
      }
     }
    default:
     {
      i2 = HEAP32[i1 >> 2] | 0;
      i1 = i3;
      break L5;
     }
    }
   } else {
    i1 = HEAP32[i13 >> 2] | 0;
    if (!i1) {
     i2 = 0;
     i1 = i3;
    } else if (!(HEAP32[i1 >> 2] | 0)) {
     HEAP32[i1 >> 2] = 130;
     i2 = 0;
     i1 = HEAP32[i4 >> 2] | 0;
    } else {
     i2 = 0;
     i1 = i3;
    }
   } while (0);
   HEAP32[i4 >> 2] = i1 + i2;
   i5 = i6;
  }
  i1 = i7 + 1 | 0;
  if ((i1 | 0) >= (i9 | 0)) break;
  i7 = i1;
  i3 = HEAP32[i20 + (i1 << 2) >> 2] | 0;
 }
 if (i8) HEAP32[i20 + 44 >> 2] = HEAP32[i18 >> 2];
 do if (!(i10 << 24 >> 24)) {
  if (!(HEAP8[i11 + 10 >> 0] | 0)) i1 = HEAP32[i15 >> 2] | 0; else {
   i3 = HEAP32[i20 + 40 >> 2] | 0;
   i2 = i5 + 1 | 0;
   L29 : do if ((HEAP32[i16 >> 2] | 0) - i12 >> 3 >>> 0 > i5 >>> 0) {
    i1 = i14 + 8 + (i5 << 3) | 0;
    switch (HEAP32[i14 + 8 + (i5 << 3) + 4 >> 2] | 0) {
    case 2:
     {
      i1 = HEAP32[i1 >> 2] << 16;
      break L29;
     }
    case 1:
     {
      i1 = HEAP32[i1 >> 2] | 0;
      if ((i1 | 0) < 0) {
       i1 = 0 - (8192 - i1 >> 14) | 0;
       break L29;
      } else {
       i1 = i1 + 8192 >> 14;
       break L29;
      }
     }
    default:
     {
      i1 = HEAP32[i1 >> 2] | 0;
      break L29;
     }
    }
   } else {
    i1 = HEAP32[i13 >> 2] | 0;
    if (!i1) i1 = 0; else if (!(HEAP32[i1 >> 2] | 0)) {
     HEAP32[i1 >> 2] = 130;
     i1 = 0;
    } else i1 = 0;
   } while (0);
   i5 = i2;
   i1 = i1 + i3 | 0;
  }
  i4 = i20 + 48 | 0;
  HEAP32[i4 >> 2] = i1;
  if (!(HEAP8[i11 + 11 >> 0] | 0)) {
   i3 = i20 + 44 | 0;
   i2 = HEAP32[i18 >> 2] | 0;
   break;
  }
  i3 = i20 + 44 | 0;
  i6 = HEAP32[i3 >> 2] | 0;
  L46 : do if ((HEAP32[i16 >> 2] | 0) - i12 >> 3 >>> 0 > i5 >>> 0) {
   i2 = i14 + 8 + (i5 << 3) | 0;
   switch (HEAP32[i14 + 8 + (i5 << 3) + 4 >> 2] | 0) {
   case 2:
    {
     i2 = HEAP32[i2 >> 2] << 16;
     break L46;
    }
   case 1:
    {
     i2 = HEAP32[i2 >> 2] | 0;
     if ((i2 | 0) < 0) {
      i2 = 0 - (8192 - i2 >> 14) | 0;
      break L46;
     } else {
      i2 = i2 + 8192 >> 14;
      break L46;
     }
    }
   default:
    {
     i2 = HEAP32[i2 >> 2] | 0;
     break L46;
    }
   }
  } else {
   i2 = HEAP32[i13 >> 2] | 0;
   if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = 130;
    i2 = 0;
    i1 = HEAP32[i4 >> 2] | 0;
   } else i2 = 0;
  } while (0);
  i2 = i2 + i6 | 0;
 } else {
  i2 = i20 + 40 | 0;
  i11 = (HEAP32[i2 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) | 0;
  i4 = i20 + 44 | 0;
  i3 = (HEAP32[i4 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0;
  i3 = (((i11 | 0) < 0 ? 0 - i11 | 0 : i11) | 0) > (((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0);
  L60 : do if ((HEAP32[i16 >> 2] | 0) - i12 >> 3 >>> 0 > i5 >>> 0) {
   i1 = i14 + 8 + (i5 << 3) | 0;
   switch (HEAP32[i14 + 8 + (i5 << 3) + 4 >> 2] | 0) {
   case 2:
    {
     i1 = HEAP32[i1 >> 2] << 16;
     break L60;
    }
   case 1:
    {
     i1 = HEAP32[i1 >> 2] | 0;
     if ((i1 | 0) < 0) {
      i1 = 0 - (8192 - i1 >> 14) | 0;
      break L60;
     } else {
      i1 = i1 + 8192 >> 14;
      break L60;
     }
    }
   default:
    {
     i1 = HEAP32[i1 >> 2] | 0;
     break L60;
    }
   }
  } else {
   i1 = HEAP32[i13 >> 2] | 0;
   if (!i1) i1 = 0; else if (!(HEAP32[i1 >> 2] | 0)) {
    HEAP32[i1 >> 2] = 130;
    i1 = 0;
   } else i1 = 0;
  } while (0);
  if (i3) {
   i1 = (HEAP32[i2 >> 2] | 0) + i1 | 0;
   HEAP32[i20 + 48 >> 2] = i1;
   i3 = i4;
   i2 = HEAP32[i18 >> 2] | 0;
   break;
  } else {
   i14 = HEAP32[i15 >> 2] | 0;
   HEAP32[i20 + 48 >> 2] = i14;
   i3 = i4;
   i2 = (HEAP32[i4 >> 2] | 0) + i1 | 0;
   i1 = i14;
   break;
  }
 } while (0);
 HEAP32[i20 + 52 >> 2] = i2;
 _cf2_glyphpath_curveTo(i19, HEAP32[i20 + 8 >> 2] | 0, HEAP32[i20 + 12 >> 2] | 0, HEAP32[i20 + 16 >> 2] | 0, HEAP32[i20 + 20 >> 2] | 0, HEAP32[i20 + 24 >> 2] | 0, HEAP32[i20 + 28 >> 2] | 0);
 _cf2_glyphpath_curveTo(i19, HEAP32[i20 + 32 >> 2] | 0, HEAP32[i20 + 36 >> 2] | 0, HEAP32[i20 + 40 >> 2] | 0, HEAP32[i3 >> 2] | 0, i1, i2);
 HEAP32[i16 >> 2] = i17;
 HEAP32[i15 >> 2] = i1;
 HEAP32[i18 >> 2] = i2;
 STACKTOP = i21;
 return;
}

function _normal_getAtts(i1, i2, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 i8 = i1 + 76 | 0;
 i6 = 0;
 i7 = 0;
 i1 = 1;
 L1 : while (1) {
  i5 = i2 + 1 | 0;
  i4 = HEAP8[i5 >> 0] | 0;
  do switch (HEAP8[i8 + (i4 & 255) >> 0] | 0) {
  case 5:
   {
    if (!i1) if ((i7 | 0) < (i9 | 0)) {
     HEAP32[i10 + (i7 << 4) >> 2] = i5;
     HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
     i1 = 1;
    } else i1 = 1;
    i4 = i7;
    i5 = i6;
    i2 = i2 + 2 | 0;
    i7 = i4;
    i6 = i5;
    continue L1;
   }
  case 6:
   {
    if (!i1) if ((i7 | 0) < (i9 | 0)) {
     HEAP32[i10 + (i7 << 4) >> 2] = i5;
     HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
     i1 = 1;
    } else i1 = 1;
    i4 = i7;
    i5 = i6;
    i2 = i2 + 3 | 0;
    i7 = i4;
    i6 = i5;
    continue L1;
   }
  case 7:
   {
    if (!i1) if ((i7 | 0) < (i9 | 0)) {
     HEAP32[i10 + (i7 << 4) >> 2] = i5;
     HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
     i1 = 1;
    } else i1 = 1;
    i4 = i7;
    i5 = i6;
    i2 = i2 + 4 | 0;
    i7 = i4;
    i6 = i5;
    continue L1;
   }
  case 24:
  case 22:
  case 29:
   {
    if (i1 | 0) {
     i11 = i1;
     i3 = i7;
     i4 = i6;
     i2 = i5;
     i1 = i11;
     i7 = i3;
     i6 = i4;
     continue L1;
    }
    if ((i7 | 0) >= (i9 | 0)) {
     i4 = i7;
     i11 = i6;
     i1 = 1;
     i2 = i5;
     i7 = i4;
     i6 = i11;
     continue L1;
    }
    HEAP32[i10 + (i7 << 4) >> 2] = i5;
    HEAP8[i10 + (i7 << 4) + 12 >> 0] = 1;
    i4 = i7;
    i11 = i6;
    i1 = 1;
    i2 = i5;
    i7 = i4;
    i6 = i11;
    continue L1;
   }
  case 12:
   {
    if ((i1 | 0) != 2) {
     if ((i7 | 0) >= (i9 | 0)) {
      i11 = i7;
      i6 = 12;
      i1 = 2;
      i2 = i5;
      i7 = i11;
      continue L1;
     }
     HEAP32[i10 + (i7 << 4) + 4 >> 2] = i2 + 2;
     i11 = i7;
     i6 = 12;
     i1 = 2;
     i2 = i5;
     i7 = i11;
     continue L1;
    }
    if ((i6 | 0) != 12) {
     i4 = i7;
     i11 = i6;
     i1 = 2;
     i2 = i5;
     i7 = i4;
     i6 = i11;
     continue L1;
    }
    if ((i7 | 0) < (i9 | 0)) HEAP32[i10 + (i7 << 4) + 8 >> 2] = i5;
    i6 = 12;
    i7 = i7 + 1 | 0;
    i1 = 0;
    i2 = i5;
    continue L1;
   }
  case 13:
   {
    if ((i1 | 0) != 2) {
     if ((i7 | 0) >= (i9 | 0)) {
      i11 = i7;
      i6 = 13;
      i1 = 2;
      i2 = i5;
      i7 = i11;
      continue L1;
     }
     HEAP32[i10 + (i7 << 4) + 4 >> 2] = i2 + 2;
     i11 = i7;
     i6 = 13;
     i1 = 2;
     i2 = i5;
     i7 = i11;
     continue L1;
    }
    if ((i6 | 0) != 13) {
     i4 = i7;
     i11 = i6;
     i1 = 2;
     i2 = i5;
     i7 = i4;
     i6 = i11;
     continue L1;
    }
    if ((i7 | 0) < (i9 | 0)) HEAP32[i10 + (i7 << 4) + 8 >> 2] = i5;
    i6 = 13;
    i7 = i7 + 1 | 0;
    i1 = 0;
    i2 = i5;
    continue L1;
   }
  case 3:
   {
    if ((i7 | 0) >= (i9 | 0)) {
     i3 = i1;
     i4 = i7;
     i11 = i6;
     i2 = i5;
     i1 = i3;
     i7 = i4;
     i6 = i11;
     continue L1;
    }
    HEAP8[i10 + (i7 << 4) + 12 >> 0] = 0;
    i3 = i1;
    i4 = i7;
    i11 = i6;
    i2 = i5;
    i1 = i3;
    i7 = i4;
    i6 = i11;
    continue L1;
   }
  case 21:
   {
    switch (i1 | 0) {
    case 1:
     {
      i4 = i7;
      i11 = i6;
      i1 = 0;
      i2 = i5;
      i7 = i4;
      i6 = i11;
      continue L1;
     }
    case 2:
     break;
    default:
     {
      i3 = i1;
      i4 = i7;
      i11 = i6;
      i2 = i5;
      i1 = i3;
      i7 = i4;
      i6 = i11;
      continue L1;
     }
    }
    if ((i7 | 0) >= (i9 | 0)) {
     i4 = i7;
     i11 = i6;
     i1 = 2;
     i2 = i5;
     i7 = i4;
     i6 = i11;
     continue L1;
    }
    i3 = i10 + (i7 << 4) + 12 | 0;
    if (!(HEAP8[i3 >> 0] | 0)) {
     i4 = i7;
     i11 = i6;
     i1 = 2;
     i2 = i5;
     i7 = i4;
     i6 = i11;
     continue L1;
    }
    if (i4 << 24 >> 24 == 32 ? (i5 | 0) != (HEAP32[i10 + (i7 << 4) + 4 >> 2] | 0) : 0) {
     i1 = HEAP8[i2 + 2 >> 0] | 0;
     if (i1 << 24 >> 24 != 32) if ((HEAPU8[i8 + (i1 & 255) >> 0] | 0) != (i6 | 0)) {
      i4 = i7;
      i11 = i6;
      i1 = 2;
      i2 = i5;
      i7 = i4;
      i6 = i11;
      continue L1;
     }
    }
    HEAP8[i3 >> 0] = 0;
    i4 = i7;
    i11 = i6;
    i1 = 2;
    i2 = i5;
    i7 = i4;
    i6 = i11;
    continue L1;
   }
  case 10:
  case 9:
   {
    switch (i1 | 0) {
    case 1:
     {
      i4 = i7;
      i11 = i6;
      i1 = 0;
      i2 = i5;
      i7 = i4;
      i6 = i11;
      continue L1;
     }
    case 2:
     break;
    default:
     {
      i3 = i1;
      i4 = i7;
      i11 = i6;
      i2 = i5;
      i1 = i3;
      i7 = i4;
      i6 = i11;
      continue L1;
     }
    }
    if ((i7 | 0) >= (i9 | 0)) {
     i4 = i7;
     i11 = i6;
     i1 = 2;
     i2 = i5;
     i7 = i4;
     i6 = i11;
     continue L1;
    }
    HEAP8[i10 + (i7 << 4) + 12 >> 0] = 0;
    i4 = i7;
    i11 = i6;
    i1 = 2;
    i2 = i5;
    i7 = i4;
    i6 = i11;
    continue L1;
   }
  case 17:
  case 11:
   if ((i1 | 0) == 2) {
    i4 = i7;
    i11 = i6;
    i1 = 2;
    i2 = i5;
    i7 = i4;
    i6 = i11;
    continue L1;
   } else break L1;
  default:
   {
    i3 = i1;
    i4 = i7;
    i11 = i6;
    i2 = i5;
    i1 = i3;
    i7 = i4;
    i6 = i11;
    continue L1;
   }
  } while (0);
 }
 return i7 | 0;
}

function _FcLangSetContainsLang(i13, i15) {
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 i1 = _FcLangSetIndex(i15) | 0;
 if ((i1 | 0) < 0) i1 = ~i1; else {
  i2 = HEAPU8[63754 + i1 >> 0] | 0;
  i3 = i2 >>> 5;
  if (i3 >>> 0 < (HEAP32[i13 + 4 >> 2] | 0) >>> 0) if (HEAP32[i13 + 8 + (i3 << 2) >> 2] & 1 << (i2 & 31)) {
   i15 = 1;
   return i15 | 0;
  }
 }
 do if ((i1 | 0) > 0) {
  i11 = i13 + 4 | 0;
  i9 = i1;
  L9 : while (1) {
   i10 = i9;
   i9 = i9 + -1 | 0;
   i8 = 30904 + (i9 * 24 | 0) | 0;
   i2 = 2;
   i3 = i15;
   i4 = i8;
   while (1) {
    i5 = HEAP8[i4 >> 0] | 0;
    i6 = HEAP8[i3 >> 0] | 0;
    i7 = i5 & 255;
    i7 = (i5 + -65 & 255) < 26 ? i7 + 32 | 0 : i7;
    i5 = i6 & 255;
    i5 = (i6 + -65 & 255) < 26 ? i5 + 32 | 0 : i5;
    i6 = i7 & 255;
    i7 = i7 & 255;
    if ((i6 | 0) != (i5 & 255 | 0)) {
     i14 = 11;
     break;
    }
    if (!(i7 << 24 >> 24)) break;
    i2 = (i6 | 0) == 45 ? 1 : i2;
    i3 = i3 + 1 | 0;
    i4 = i4 + 1 | 0;
   }
   L15 : do if ((i14 | 0) == 11) {
    i14 = 0;
    switch (i7 << 24 >> 24) {
    case 0:
    case 45:
     {
      switch ((i5 & 255) << 24 >> 24) {
      case 0:
      case 45:
       break L15;
      default:
       {}
      }
      break;
     }
    default:
     {}
    }
    if ((i2 | 0) == 2) {
     i14 = 7;
     break L9;
    }
   } while (0);
   i2 = HEAPU8[63754 + i9 >> 0] | 0;
   i3 = i2 >>> 5;
   if (i3 >>> 0 < (HEAP32[i11 >> 2] | 0) >>> 0) if (HEAP32[i13 + 8 + (i3 << 2) >> 2] & 1 << (i2 & 31) | 0) {
    i6 = i15;
    i2 = i8;
    while (1) {
     i5 = HEAP8[i2 >> 0] | 0;
     i8 = HEAP8[i6 >> 0] | 0;
     i3 = i5 & 255;
     i3 = (i5 + -65 & 255) < 26 ? i3 + 32 | 0 : i3;
     i5 = i8 & 255;
     i4 = i3 & 255;
     i5 = ((i8 + -65 & 255) < 26 ? i5 + 32 | 0 : i5) & 255;
     if ((i4 | 0) != (i5 | 0)) break;
     if (!((i3 & 255) << 24 >> 24)) {
      i12 = 1;
      i14 = 46;
      break L9;
     } else {
      i6 = i6 + 1 | 0;
      i2 = i2 + 1 | 0;
     }
    }
    if ((i4 | 0) == 45 & (i5 | 0) == 0) {
     i12 = 1;
     i14 = 46;
     break;
    }
    if ((i4 | 0) == 0 & (i5 | 0) == 45) {
     i12 = 1;
     i14 = 46;
     break;
    }
   }
   if ((i10 | 0) <= 1) {
    i14 = 7;
    break;
   }
  }
  if ((i14 | 0) == 7) if ((i1 | 0) < 244) {
   i14 = 8;
   break;
  } else break; else if ((i14 | 0) == 46) return i12 | 0;
 } else i14 = 8; while (0);
 L34 : do if ((i14 | 0) == 8) {
  i9 = i13 + 4 | 0;
  L36 : while (1) {
   i8 = 30904 + (i1 * 24 | 0) | 0;
   i2 = 2;
   i3 = i15;
   i4 = i8;
   while (1) {
    i5 = HEAP8[i4 >> 0] | 0;
    i6 = HEAP8[i3 >> 0] | 0;
    i7 = i5 & 255;
    i7 = (i5 + -65 & 255) < 26 ? i7 + 32 | 0 : i7;
    i5 = i6 & 255;
    i5 = (i6 + -65 & 255) < 26 ? i5 + 32 | 0 : i5;
    i6 = i7 & 255;
    i7 = i7 & 255;
    if ((i6 | 0) != (i5 & 255 | 0)) {
     i14 = 25;
     break;
    }
    if (!(i7 << 24 >> 24)) break;
    i2 = (i6 | 0) == 45 ? 1 : i2;
    i3 = i3 + 1 | 0;
    i4 = i4 + 1 | 0;
   }
   L42 : do if ((i14 | 0) == 25) {
    i14 = 0;
    switch (i7 << 24 >> 24) {
    case 0:
    case 45:
     {
      switch ((i5 & 255) << 24 >> 24) {
      case 0:
      case 45:
       break L42;
      default:
       {}
      }
      break;
     }
    default:
     {}
    }
    if ((i2 | 0) == 2) break L34;
   } while (0);
   i2 = HEAPU8[63754 + i1 >> 0] | 0;
   i3 = i2 >>> 5;
   if (i3 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) if (HEAP32[i13 + 8 + (i3 << 2) >> 2] & 1 << (i2 & 31) | 0) {
    i6 = i15;
    i2 = i8;
    while (1) {
     i5 = HEAP8[i2 >> 0] | 0;
     i12 = HEAP8[i6 >> 0] | 0;
     i3 = i5 & 255;
     i3 = (i5 + -65 & 255) < 26 ? i3 + 32 | 0 : i3;
     i5 = i12 & 255;
     i4 = i3 & 255;
     i5 = ((i12 + -65 & 255) < 26 ? i5 + 32 | 0 : i5) & 255;
     if ((i4 | 0) != (i5 | 0)) break;
     if (!((i3 & 255) << 24 >> 24)) {
      i12 = 1;
      i14 = 46;
      break L36;
     } else {
      i6 = i6 + 1 | 0;
      i2 = i2 + 1 | 0;
     }
    }
    if ((i4 | 0) == 45 & (i5 | 0) == 0) {
     i12 = 1;
     i14 = 46;
     break;
    }
    if ((i4 | 0) == 0 & (i5 | 0) == 45) {
     i12 = 1;
     i14 = 46;
     break;
    }
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 244) break L34;
  }
  if ((i14 | 0) == 46) return i12 | 0;
 } while (0);
 i1 = HEAP32[i13 >> 2] | 0;
 if (!i1) {
  i15 = 0;
  return i15 | 0;
 }
 i6 = _FcStrListCreate(i1) | 0;
 if (!i6) {
  i15 = 0;
  return i15 | 0;
 }
 L66 : while (1) {
  i1 = _FcStrListNext(i6) | 0;
  if (!i1) {
   i14 = 45;
   break;
  } else i5 = i15;
  while (1) {
   i4 = HEAP8[i1 >> 0] | 0;
   i14 = HEAP8[i5 >> 0] | 0;
   i2 = i4 & 255;
   i2 = (i4 + -65 & 255) < 26 ? i2 + 32 | 0 : i2;
   i4 = i14 & 255;
   i3 = i2 & 255;
   i4 = ((i14 + -65 & 255) < 26 ? i4 + 32 | 0 : i4) & 255;
   if ((i3 | 0) != (i4 | 0)) break;
   if (!((i2 & 255) << 24 >> 24)) {
    i14 = 44;
    break L66;
   } else {
    i5 = i5 + 1 | 0;
    i1 = i1 + 1 | 0;
   }
  }
  if ((i3 | 0) == 45 & (i4 | 0) == 0) {
   i14 = 44;
   break;
  }
  if ((i3 | 0) == 0 & (i4 | 0) == 45) {
   i14 = 44;
   break;
  }
 }
 if ((i14 | 0) == 44) {
  _FcStrListDone(i6);
  i15 = 1;
  return i15 | 0;
 } else if ((i14 | 0) == 45) {
  _FcStrListDone(i6);
  i15 = 0;
  return i15 | 0;
 }
 return 0;
}

function _FT_Matrix_Invert(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 if (!i14) {
  i16 = 6;
  return i16 | 0;
 }
 i15 = HEAP32[i14 >> 2] | 0;
 i16 = i14 + 12 | 0;
 i10 = HEAP32[i16 >> 2] | 0;
 if ((i15 | 0) == 0 | (i10 | 0) == 65536) i5 = i15; else {
  i4 = i15 >> 31;
  i2 = (i15 | 0) < 0 ? 0 - i15 | 0 : i15;
  i3 = (i10 | 0) < 0;
  i1 = i3 ? 0 - i10 | 0 : i10;
  if (((i1 >>> 8) + i2 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else {
   i13 = i2 & 65535;
   i1 = (Math_imul(i1 >>> 16, i13) | 0) + (Math_imul(i2 >>> 16, i1) | 0) + (((Math_imul(i1 & 65535, i13) | 0) + 32768 | 0) >>> 16) | 0;
  }
  i5 = ((i3 ? 0 - (i4 | 1) | 0 : i4) | 0) < 0 ? 0 - i1 | 0 : i1;
 }
 i7 = i14 + 4 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 i9 = i14 + 8 | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 if ((i6 | 0) == 0 | (i8 | 0) == 65536) i1 = i6; else {
  i3 = i6 >> 31;
  i2 = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
  i4 = (i8 | 0) < 0;
  i1 = i4 ? 0 - i8 | 0 : i8;
  if (((i1 >>> 8) + i2 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else {
   i13 = i2 & 65535;
   i1 = (Math_imul(i1 >>> 16, i13) | 0) + (Math_imul(i2 >>> 16, i1) | 0) + (((Math_imul(i1 & 65535, i13) | 0) + 32768 | 0) >>> 16) | 0;
  }
  i1 = ((i4 ? 0 - (i3 | 1) | 0 : i3) | 0) < 0 ? 0 - i1 | 0 : i1;
 }
 i1 = i5 - i1 | 0;
 if (!i1) {
  i16 = 6;
  return i16 | 0;
 }
 i13 = i6 >> 31;
 i2 = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
 i11 = (i1 | 0) < 0;
 i6 = i11 ? 0 - (i13 | 1) | 0 : i13;
 i13 = i11 ? 0 - i1 | 0 : i1;
 i12 = (i13 | 0) == 0;
 do if (i12) i1 = 2147483647; else {
  if (i2 >>> 0 <= (i13 >>> 17 ^ 65535) >>> 0) {
   i1 = (((i2 << 16) + (i13 >>> 1) | 0) >>> 0) / (i13 >>> 0) | 0;
   break;
  }
  i1 = i2 << 16;
  i3 = i1 + (i13 >>> 1) | 0;
  i1 = (i3 >>> 0 < i1 >>> 0 & 1) + (i2 >>> 16) | 0;
  if (i1 >>> 0 < i13 >>> 0) {
   i4 = Math_clz32(i1 | 0) | 0;
   i5 = 32 - i4 | 0;
   i17 = i3 >>> i5 | i1 << i4;
   i2 = (i17 >>> 0) / (i13 >>> 0) | 0;
   i1 = i2;
   i2 = i17 - (Math_imul(i2, i13) | 0) | 0;
   i4 = i3 << i4;
   while (1) {
    i2 = i2 << 1 | i4 >>> 31;
    i3 = i2 >>> 0 < i13 >>> 0;
    i1 = (i3 ^ 1) & 1 | i1 << 1;
    i5 = i5 + -1 | 0;
    if (!i5) break; else {
     i2 = i2 - (i3 ? 0 : i13) | 0;
     i4 = i4 << 1;
    }
   }
  } else i1 = 2147483647;
 } while (0);
 HEAP32[i7 >> 2] = 0 - ((i6 | 0) < 0 ? 0 - i1 | 0 : i1);
 i6 = i8 >> 31;
 i1 = (i8 | 0) < 0 ? 0 - i8 | 0 : i8;
 i6 = i11 ? 0 - (i6 | 1) | 0 : i6;
 do if (i12) i1 = 2147483647; else {
  if (i1 >>> 0 <= (i13 >>> 17 ^ 65535) >>> 0) {
   i1 = (((i1 << 16) + (i13 >>> 1) | 0) >>> 0) / (i13 >>> 0) | 0;
   break;
  }
  i17 = i1 << 16;
  i3 = i17 + (i13 >>> 1) | 0;
  i1 = (i3 >>> 0 < i17 >>> 0 & 1) + (i1 >>> 16) | 0;
  if (i1 >>> 0 < i13 >>> 0) {
   i4 = Math_clz32(i1 | 0) | 0;
   i5 = 32 - i4 | 0;
   i17 = i3 >>> i5 | i1 << i4;
   i2 = (i17 >>> 0) / (i13 >>> 0) | 0;
   i1 = i2;
   i2 = i17 - (Math_imul(i2, i13) | 0) | 0;
   i4 = i3 << i4;
   while (1) {
    i2 = i2 << 1 | i4 >>> 31;
    i3 = i2 >>> 0 < i13 >>> 0;
    i1 = (i3 ^ 1) & 1 | i1 << 1;
    i5 = i5 + -1 | 0;
    if (!i5) break; else {
     i2 = i2 - (i3 ? 0 : i13) | 0;
     i4 = i4 << 1;
    }
   }
  } else i1 = 2147483647;
 } while (0);
 HEAP32[i9 >> 2] = 0 - ((i6 | 0) < 0 ? 0 - i1 | 0 : i1);
 i6 = i10 >> 31;
 i1 = (i10 | 0) < 0 ? 0 - i10 | 0 : i10;
 i6 = i11 ? 0 - (i6 | 1) | 0 : i6;
 do if (i12) i1 = 2147483647; else {
  if (i1 >>> 0 <= (i13 >>> 17 ^ 65535) >>> 0) {
   i1 = (((i1 << 16) + (i13 >>> 1) | 0) >>> 0) / (i13 >>> 0) | 0;
   break;
  }
  i17 = i1 << 16;
  i3 = i17 + (i13 >>> 1) | 0;
  i1 = (i3 >>> 0 < i17 >>> 0 & 1) + (i1 >>> 16) | 0;
  if (i1 >>> 0 < i13 >>> 0) {
   i4 = Math_clz32(i1 | 0) | 0;
   i5 = 32 - i4 | 0;
   i17 = i3 >>> i5 | i1 << i4;
   i2 = (i17 >>> 0) / (i13 >>> 0) | 0;
   i1 = i2;
   i2 = i17 - (Math_imul(i2, i13) | 0) | 0;
   i4 = i3 << i4;
   while (1) {
    i2 = i2 << 1 | i4 >>> 31;
    i3 = i2 >>> 0 < i13 >>> 0;
    i1 = (i3 ^ 1) & 1 | i1 << 1;
    i5 = i5 + -1 | 0;
    if (!i5) break; else {
     i2 = i2 - (i3 ? 0 : i13) | 0;
     i4 = i4 << 1;
    }
   }
  } else i1 = 2147483647;
 } while (0);
 HEAP32[i14 >> 2] = (i6 | 0) < 0 ? 0 - i1 | 0 : i1;
 i6 = i15 >> 31;
 i1 = (i15 | 0) < 0 ? 0 - i15 | 0 : i15;
 i6 = i11 ? 0 - (i6 | 1) | 0 : i6;
 do if (i12) i1 = 2147483647; else {
  if (i1 >>> 0 <= (i13 >>> 17 ^ 65535) >>> 0) {
   i1 = (((i1 << 16) + (i13 >>> 1) | 0) >>> 0) / (i13 >>> 0) | 0;
   break;
  }
  i17 = i1 << 16;
  i3 = i17 + (i13 >>> 1) | 0;
  i1 = (i3 >>> 0 < i17 >>> 0 & 1) + (i1 >>> 16) | 0;
  if (i1 >>> 0 < i13 >>> 0) {
   i4 = Math_clz32(i1 | 0) | 0;
   i5 = 32 - i4 | 0;
   i17 = i3 >>> i5 | i1 << i4;
   i2 = (i17 >>> 0) / (i13 >>> 0) | 0;
   i1 = i2;
   i2 = i17 - (Math_imul(i2, i13) | 0) | 0;
   i4 = i3 << i4;
   while (1) {
    i2 = i2 << 1 | i4 >>> 31;
    i3 = i2 >>> 0 < i13 >>> 0;
    i1 = (i3 ^ 1) & 1 | i1 << 1;
    i5 = i5 + -1 | 0;
    if (!i5) break; else {
     i2 = i2 - (i3 ? 0 : i13) | 0;
     i4 = i4 << 1;
    }
   }
  } else i1 = 2147483647;
 } while (0);
 HEAP32[i16 >> 2] = (i6 | 0) < 0 ? 0 - i1 | 0 : i1;
 i17 = 0;
 return i17 | 0;
}

function _twoway_strstr(i15, i16) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 i17 = i19 + 1024 | 0;
 i18 = i19;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 HEAP32[i17 + 12 >> 2] = 0;
 HEAP32[i17 + 16 >> 2] = 0;
 HEAP32[i17 + 20 >> 2] = 0;
 HEAP32[i17 + 24 >> 2] = 0;
 HEAP32[i17 + 28 >> 2] = 0;
 i1 = HEAP8[i16 >> 0] | 0;
 L1 : do if (!(i1 << 24 >> 24)) {
  i4 = 1;
  i1 = -1;
  i14 = 0;
  i2 = 1;
  i3 = -1;
  i5 = 27;
 } else {
  i14 = 0;
  i2 = i1;
  i1 = i1 & 255;
  while (1) {
   if (!(HEAP8[i15 + i14 >> 0] | 0)) {
    i1 = 0;
    break L1;
   }
   i13 = i17 + (((i2 & 255) >>> 5 & 255) << 2) | 0;
   HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1 << (i2 & 31);
   i14 = i14 + 1 | 0;
   HEAP32[i18 + (i1 << 2) >> 2] = i14;
   i1 = HEAP8[i16 + i14 >> 0] | 0;
   if (!(i1 << 24 >> 24)) break; else {
    i2 = i1;
    i1 = i1 & 255;
   }
  }
  i8 = i14 >>> 0 > 1;
  if (i8) {
   i2 = 0;
   i7 = -1;
   i3 = 1;
   L7 : while (1) {
    i4 = 1;
    i1 = i2;
    while (1) {
     i2 = i3;
     L11 : while (1) {
      i6 = 1;
      while (1) {
       i3 = HEAP8[i16 + (i6 + i7) >> 0] | 0;
       i5 = HEAP8[i16 + i2 >> 0] | 0;
       if (i3 << 24 >> 24 != i5 << 24 >> 24) break L11;
       if ((i6 | 0) == (i4 | 0)) break;
       i6 = i6 + 1 | 0;
       i2 = i6 + i1 | 0;
       if (i2 >>> 0 >= i14 >>> 0) {
        i9 = i4;
        i1 = i7;
        break L7;
       }
      }
      i1 = i4 + i1 | 0;
      i2 = i1 + 1 | 0;
      if (i2 >>> 0 >= i14 >>> 0) {
       i9 = i4;
       i1 = i7;
       break L7;
      }
     }
     i4 = i2 - i7 | 0;
     if ((i3 & 255) <= (i5 & 255)) break;
     i3 = i2 + 1 | 0;
     if (i3 >>> 0 >= i14 >>> 0) {
      i9 = i4;
      i1 = i7;
      break L7;
     } else i1 = i2;
    }
    i3 = i1 + 2 | 0;
    if (i3 >>> 0 >= i14 >>> 0) {
     i9 = 1;
     break;
    } else {
     i2 = i1 + 1 | 0;
     i7 = i1;
    }
   }
   if (i8) {
    i4 = 0;
    i8 = -1;
    i5 = 1;
    while (1) {
     i2 = 1;
     i3 = i4;
     while (1) {
      i4 = i5;
      L26 : while (1) {
       i7 = 1;
       while (1) {
        i5 = HEAP8[i16 + (i7 + i8) >> 0] | 0;
        i6 = HEAP8[i16 + i4 >> 0] | 0;
        if (i5 << 24 >> 24 != i6 << 24 >> 24) break L26;
        if ((i7 | 0) == (i2 | 0)) break;
        i7 = i7 + 1 | 0;
        i4 = i7 + i3 | 0;
        if (i4 >>> 0 >= i14 >>> 0) {
         i4 = i9;
         i3 = i8;
         i5 = 27;
         break L1;
        }
       }
       i3 = i2 + i3 | 0;
       i4 = i3 + 1 | 0;
       if (i4 >>> 0 >= i14 >>> 0) {
        i4 = i9;
        i3 = i8;
        i5 = 27;
        break L1;
       }
      }
      i2 = i4 - i8 | 0;
      if ((i5 & 255) >= (i6 & 255)) break;
      i5 = i4 + 1 | 0;
      if (i5 >>> 0 >= i14 >>> 0) {
       i4 = i9;
       i3 = i8;
       i5 = 27;
       break L1;
      } else i3 = i4;
     }
     i5 = i3 + 2 | 0;
     if (i5 >>> 0 >= i14 >>> 0) {
      i4 = i9;
      i2 = 1;
      i5 = 27;
      break;
     } else {
      i4 = i3 + 1 | 0;
      i8 = i3;
     }
    }
   } else {
    i4 = i9;
    i2 = 1;
    i3 = -1;
    i5 = 27;
   }
  } else {
   i4 = 1;
   i1 = -1;
   i2 = 1;
   i3 = -1;
   i5 = 27;
  }
 } while (0);
 L36 : do if ((i5 | 0) == 27) {
  i12 = (i3 + 1 | 0) >>> 0 > (i1 + 1 | 0) >>> 0;
  i2 = i12 ? i2 : i4;
  i12 = i12 ? i3 : i1;
  i13 = i12 + 1 | 0;
  if (!(_memcmp(i16, i16 + i2 | 0, i13) | 0)) i11 = i14 - i2 | 0; else {
   i2 = i14 - i12 + -1 | 0;
   i11 = 0;
   i2 = (i12 >>> 0 > i2 >>> 0 ? i12 : i2) + 1 | 0;
  }
  i7 = i14 | 63;
  i8 = i14 + -1 | 0;
  i9 = (i11 | 0) != 0;
  i10 = i14 - i2 | 0;
  i1 = i15;
  i6 = 0;
  i3 = i15;
  while (1) {
   i4 = i1;
   do if ((i3 - i4 | 0) >>> 0 < i14 >>> 0) {
    i5 = _memchr(i3, 0, i7) | 0;
    if (!i5) {
     i5 = i3 + i7 | 0;
     break;
    } else if ((i5 - i4 | 0) >>> 0 < i14 >>> 0) {
     i1 = 0;
     break L36;
    } else break;
   } else i5 = i3; while (0);
   i3 = HEAP8[i1 + i8 >> 0] | 0;
   L50 : do if (!(1 << (i3 & 31) & HEAP32[i17 + (((i3 & 255) >>> 5 & 255) << 2) >> 2])) {
    i4 = 0;
    i3 = i14;
   } else {
    i3 = i14 - (HEAP32[i18 + ((i3 & 255) << 2) >> 2] | 0) | 0;
    if (i3 | 0) {
     i4 = 0;
     i3 = i9 & (i6 | 0) != 0 & i3 >>> 0 < i2 >>> 0 ? i10 : i3;
     break;
    }
    i3 = i13 >>> 0 > i6 >>> 0 ? i13 : i6;
    i4 = HEAP8[i16 + i3 >> 0] | 0;
    L55 : do if (!(i4 << 24 >> 24)) i3 = i13; else {
     while (1) {
      if (i4 << 24 >> 24 != (HEAP8[i1 + i3 >> 0] | 0)) break;
      i3 = i3 + 1 | 0;
      i4 = HEAP8[i16 + i3 >> 0] | 0;
      if (!(i4 << 24 >> 24)) {
       i3 = i13;
       break L55;
      }
     }
     i4 = 0;
     i3 = i3 - i12 | 0;
     break L50;
    } while (0);
    while (1) {
     if (i3 >>> 0 <= i6 >>> 0) break L36;
     i3 = i3 + -1 | 0;
     if ((HEAP8[i16 + i3 >> 0] | 0) != (HEAP8[i1 + i3 >> 0] | 0)) {
      i4 = i11;
      i3 = i2;
      break;
     }
    }
   } while (0);
   i1 = i1 + i3 | 0;
   i6 = i4;
   i3 = i5;
  }
 } while (0);
 STACKTOP = i19;
 return i1 | 0;
}

function _load_post_names(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i14 = i16 + 4 | 0;
 i1 = i16;
 i13 = HEAP32[i15 + 104 >> 2] | 0;
 i2 = FUNCTION_TABLE_iiiii[HEAP32[i15 + 508 >> 2] & 127](i15, 1886352244, i13, i1) | 0;
 if (i2 | 0) {
  i15 = i2;
  STACKTOP = i16;
  return i15 | 0;
 }
 i8 = _FT_Stream_Pos(i13) | 0;
 i8 = (HEAP32[i1 >> 2] | 0) + i8 | 0;
 i1 = HEAP32[i15 + 468 >> 2] | 0;
 i2 = _FT_Stream_Skip(i13, 32) | 0;
 if (i2 | 0) {
  i15 = i2;
  STACKTOP = i16;
  return i15 | 0;
 }
 L7 : do if ((i1 | 0) < 163840) {
  switch (i1 | 0) {
  case 131072:
   break;
  default:
   {
    i1 = 3;
    break L7;
   }
  }
  i11 = HEAP32[i13 + 28 >> 2] | 0;
  i9 = _FT_Stream_ReadUShort(i13, i14) | 0;
  i3 = i9 & 65535;
  i1 = HEAP32[i14 >> 2] | 0;
  L10 : do if (!i1) {
   if ((i9 & 65535) > (HEAPU16[i15 + 264 >> 1] | 0)) {
    HEAP32[i14 >> 2] = 3;
    i1 = 3;
    break;
   }
   i10 = _ft_mem_realloc(i11, 2, 0, i3, 0, i14) | 0;
   L15 : do if (!(HEAP32[i14 >> 2] | 0)) {
    i7 = _FT_Stream_EnterFrame(i13, i3 << 1) | 0;
    HEAP32[i14 >> 2] = i7;
    if (!i7) {
     if (!(i9 << 16 >> 16)) {
      _FT_Stream_ExitFrame(i13);
      i6 = 0;
     } else {
      i1 = 0;
      do {
       i7 = _FT_Stream_GetUShort(i13) | 0;
       HEAP16[i10 + (i1 << 1) >> 1] = i7;
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) != (i3 | 0));
      _FT_Stream_ExitFrame(i13);
      i1 = 0;
      i2 = 0;
      do {
       i6 = HEAP16[i10 + (i2 << 1) >> 1] | 0;
       i7 = (i6 & 65535) + -257 | 0;
       i1 = (i6 & 65535) > 257 & (i7 | 0) > (i1 & 65535 | 0) ? i7 & 65535 : i1;
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) != (i3 | 0));
      i6 = i1;
     }
     i7 = i6 & 65535;
     i1 = _ft_mem_realloc(i11, 4, 0, i7, 0, i14) | 0;
     if (!(HEAP32[i14 >> 2] | 0)) {
      L27 : do if (i6 << 16 >> 16) {
       i2 = 0;
       while (1) {
        if ((_FT_Stream_Pos(i13) | 0) >>> 0 >= i8 >>> 0) {
         i12 = 23;
         break;
        }
        i3 = (_FT_Stream_ReadChar(i13, i14) | 0) & 255;
        if (HEAP32[i14 >> 2] | 0) {
         i2 = 0;
         break;
        }
        if (i8 >>> 0 < i3 >>> 0) i12 = 20; else if ((_FT_Stream_Pos(i13) | 0) >>> 0 > (i8 - i3 | 0) >>> 0) i12 = 20;
        if ((i12 | 0) == 20) {
         i12 = 0;
         i3 = i8 - (_FT_Stream_Pos(i13) | 0) | 0;
         i3 = (i3 | 0) > 0 ? i3 : 0;
        }
        i4 = _ft_mem_realloc(i11, 1, 0, i3 + 1 | 0, 0, i14) | 0;
        i5 = i1 + (i2 << 2) | 0;
        HEAP32[i5 >> 2] = i4;
        if (HEAP32[i14 >> 2] | 0) {
         i2 = 0;
         break;
        }
        i4 = _FT_Stream_Read(i13, i4, i3) | 0;
        HEAP32[i14 >> 2] = i4;
        if (i4 | 0) {
         i2 = 0;
         break;
        }
        HEAP8[(HEAP32[i5 >> 2] | 0) + i3 >> 0] = 0;
        i2 = i2 + 1 | 0;
        if (i2 >>> 0 >= i7 >>> 0) break L27;
       }
       L39 : do if ((i12 | 0) == 23) {
        if ((i2 & 65535) >= (i6 & 65535)) break L27;
        i3 = i2 & 65535;
        while (1) {
         i2 = _ft_mem_realloc(i11, 1, 0, 1, 0, i14) | 0;
         HEAP32[i1 + (i3 << 2) >> 2] = i2;
         if (HEAP32[i14 >> 2] | 0) {
          i2 = 0;
          break L39;
         }
         HEAP8[i2 >> 0] = 0;
         i3 = i3 + 1 | 0;
         if (i3 >>> 0 >= i7 >>> 0) break L27;
        }
       } while (0);
       while (1) {
        i13 = i1 + (i2 << 2) | 0;
        _ft_mem_free(i11, HEAP32[i13 >> 2] | 0);
        HEAP32[i13 >> 2] = 0;
        i2 = i2 + 1 | 0;
        if ((i2 | 0) == (i7 | 0)) break L15;
       }
      } while (0);
      HEAP16[i15 + 616 >> 1] = i9;
      HEAP16[i15 + 618 >> 1] = i6;
      HEAP32[i15 + 620 >> 2] = i10;
      HEAP32[i15 + 624 >> 2] = i1;
      i1 = 0;
      break L10;
     }
    } else i1 = 0;
   } else i1 = 0; while (0);
   _ft_mem_free(i11, i1);
   _ft_mem_free(i11, i10);
   i1 = HEAP32[i14 >> 2] | 0;
  } while (0);
 } else {
  switch (i1 | 0) {
  case 163840:
   break;
  default:
   {
    i1 = 3;
    break L7;
   }
  }
  i3 = HEAP32[i13 + 28 >> 2] | 0;
  i4 = _FT_Stream_ReadUShort(i13, i14) | 0;
  i5 = i4 & 65535;
  i1 = HEAP32[i14 >> 2] | 0;
  L52 : do if (!i1) {
   if ((i4 & 65535) > 258 ? 1 : (i4 & 65535) > (HEAPU16[i15 + 264 >> 1] | 0)) {
    HEAP32[i14 >> 2] = 3;
    i1 = 3;
    break;
   }
   i2 = _ft_mem_realloc(i3, 1, 0, i5, 0, i14) | 0;
   L57 : do if (!(HEAP32[i14 >> 2] | 0)) {
    i13 = _FT_Stream_Read(i13, i2, i5) | 0;
    HEAP32[i14 >> 2] = i13;
    if (!i13) {
     L60 : do if (i4 << 16 >> 16) {
      i1 = 0;
      while (1) {
       if (((HEAP8[i2 + i1 >> 0] | 0) + i1 | 0) >>> 0 > i5 >>> 0) break;
       i1 = i1 + 1 | 0;
       if ((i1 | 0) >= (i5 | 0)) break L60;
      }
      HEAP32[i14 >> 2] = 3;
      break L57;
     } while (0);
     HEAP16[i15 + 616 >> 1] = i4;
     HEAP32[i15 + 620 >> 2] = i2;
     i1 = 0;
     break L52;
    }
   } while (0);
   _ft_mem_free(i3, i2);
   i1 = HEAP32[i14 >> 2] | 0;
  } while (0);
 } while (0);
 HEAP8[i15 + 612 >> 0] = 1;
 i15 = i1;
 STACKTOP = i16;
 return i15 | 0;
}

function _T1_Get_MM_Var(i1, i14) {
 i1 = i1 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i9 = i17 + 24 | 0;
 i15 = i17 + 16 | 0;
 i16 = i17;
 i2 = HEAP32[i1 + 100 >> 2] | 0;
 i13 = HEAP32[i1 + 528 >> 2] | 0;
 if (!i13) {
  HEAP32[i15 >> 2] = 6;
  i16 = 6;
  STACKTOP = i17;
  return i16 | 0;
 }
 i5 = i13 + 4 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 HEAP32[i9 >> 2] = i6;
 i3 = HEAP32[i13 >> 2] | 0;
 HEAP32[i9 + 4 >> 2] = i3;
 i8 = (i6 | 0) == 0;
 if (!i8) {
  i1 = 0;
  do {
   HEAP32[i9 + 8 + (i1 * 12 | 0) >> 2] = HEAP32[i13 + 8 + (i1 << 2) >> 2];
   i12 = HEAP32[i13 + 88 + (i1 * 12 | 0) + 4 >> 2] | 0;
   HEAP32[i9 + 8 + (i1 * 12 | 0) + 4 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i9 + 8 + (i1 * 12 | 0) + 8 >> 2] = HEAP32[i12 + ((HEAPU8[i13 + 88 + (i1 * 12 | 0) >> 0] | 0) + -1 << 2) >> 2];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i6 | 0));
 }
 HEAP32[i15 >> 2] = 0;
 i12 = _ft_mem_alloc(i2, (i6 * 24 | 0) + 20 | 0, i15) | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if (i1 | 0) {
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 HEAP32[i12 >> 2] = i6;
 HEAP32[i12 + 4 >> 2] = i3;
 HEAP32[i12 + 8 >> 2] = -1;
 i1 = i12 + 20 | 0;
 i11 = i12 + 12 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 + 16 >> 2] = 0;
 if (!i8) {
  i3 = 0;
  do {
   i2 = HEAP32[i9 + 8 + (i3 * 12 | 0) >> 2] | 0;
   HEAP32[i1 + (i3 * 24 | 0) >> 2] = i2;
   i4 = HEAP32[i9 + 8 + (i3 * 12 | 0) + 4 >> 2] << 16;
   HEAP32[i1 + (i3 * 24 | 0) + 4 >> 2] = i4;
   i7 = HEAP32[i9 + 8 + (i3 * 12 | 0) + 8 >> 2] << 16;
   HEAP32[i1 + (i3 * 24 | 0) + 12 >> 2] = i7;
   HEAP32[i1 + (i3 * 24 | 0) + 8 >> 2] = (i7 + i4 | 0) / 2 | 0;
   HEAP32[i1 + (i3 * 24 | 0) + 20 >> 2] = -1;
   i4 = i1 + (i3 * 24 | 0) + 16 | 0;
   HEAP32[i4 >> 2] = -1;
   if (!(_strcmp(i2, 284829) | 0)) {
    i2 = 2003265652;
    i10 = 10;
   } else if (!(_strcmp(i2, 280150) | 0)) {
    i2 = 2003072104;
    i10 = 10;
   } else if (!(_strcmp(i2, 280156) | 0)) {
    i2 = 1869640570;
    i10 = 10;
   }
   if ((i10 | 0) == 10) {
    i10 = 0;
    HEAP32[i4 >> 2] = i2;
   }
   i3 = i3 + 1 | 0;
  } while (i3 >>> 0 < i6 >>> 0);
 }
 i2 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[i13 >> 2] | 0) == (1 << i2 | 0)) {
  i7 = HEAP32[i13 + 140 >> 2] | 0;
  i3 = HEAP32[i7 + 4 >> 2] | 0;
  switch (i2 | 0) {
  case 1:
   {
    HEAP32[i16 >> 2] = i3;
    break;
   }
  case 2:
   {
    i6 = HEAP32[i7 + 12 >> 2] | 0;
    HEAP32[i16 >> 2] = i6 + i3;
    HEAP32[i16 + 4 >> 2] = (HEAP32[i7 + 8 >> 2] | 0) + i6;
    break;
   }
  case 3:
   {
    i4 = HEAP32[i7 + 28 >> 2] | 0;
    i6 = HEAP32[i7 + 20 >> 2] | 0;
    i2 = HEAP32[i7 + 12 >> 2] | 0;
    HEAP32[i16 >> 2] = i4 + i3 + i6 + i2;
    i5 = HEAP32[i7 + 24 >> 2] | 0;
    HEAP32[i16 + 4 >> 2] = i5 + i4 + i2 + (HEAP32[i7 + 8 >> 2] | 0);
    i2 = 2;
    i3 = 4;
    i10 = 18;
    break;
   }
  default:
   {
    i19 = HEAP32[i7 + 60 >> 2] | 0;
    i10 = HEAP32[i7 + 52 >> 2] | 0;
    i4 = HEAP32[i7 + 44 >> 2] | 0;
    i6 = HEAP32[i7 + 36 >> 2] | 0;
    i18 = HEAP32[i7 + 28 >> 2] | 0;
    i2 = HEAP32[i7 + 20 >> 2] | 0;
    i20 = HEAP32[i7 + 12 >> 2] | 0;
    HEAP32[i16 >> 2] = i19 + i3 + i10 + i4 + i6 + i18 + i2 + i20;
    i19 = (HEAP32[i7 + 56 >> 2] | 0) + i19 | 0;
    i5 = HEAP32[i7 + 40 >> 2] | 0;
    i3 = HEAP32[i7 + 24 >> 2] | 0;
    HEAP32[i16 + 4 >> 2] = i19 + i4 + i5 + i18 + i3 + i20 + (HEAP32[i7 + 8 >> 2] | 0);
    i10 = i19 + i10 + (HEAP32[i7 + 48 >> 2] | 0) | 0;
    HEAP32[i16 + 8 >> 2] = i10 + i18 + i3 + i2 + (HEAP32[i7 + 16 >> 2] | 0);
    i2 = 3;
    i3 = 8;
    i4 = i10 + i4 | 0;
    i10 = 18;
   }
  }
  if ((i10 | 0) == 18) HEAP32[i16 + (i2 << 2) >> 2] = i5 + i4 + i6 + (HEAP32[i7 + (i3 << 2) >> 2] | 0);
  if (!i8) {
   i8 = HEAP32[i9 >> 2] | 0;
   i7 = 0;
   do {
    i4 = HEAP32[i16 + (i7 << 2) >> 2] | 0;
    i5 = HEAP32[i13 + 88 + (i7 * 12 | 0) + 8 >> 2] | 0;
    L35 : do if ((HEAP32[i5 >> 2] | 0) < (i4 | 0)) {
     i20 = HEAP8[i13 + 88 + (i7 * 12 | 0) >> 0] | 0;
     i6 = i20 & 255;
     L37 : do if ((i20 & 255) > 1) {
      i2 = 1;
      while (1) {
       i3 = HEAP32[i5 + (i2 << 2) >> 2] | 0;
       if ((i3 | 0) >= (i4 | 0)) break;
       i2 = i2 + 1 | 0;
       if ((i2 | 0) >= (i6 | 0)) break L37;
      }
      i19 = HEAP32[i13 + 88 + (i7 * 12 | 0) + 4 >> 2] | 0;
      i20 = i2 + -1 | 0;
      i1 = HEAP32[i19 + (i20 << 2) >> 2] | 0;
      i2 = (HEAP32[i19 + (i2 << 2) >> 2] | 0) - i1 | 0;
      i20 = HEAP32[i5 + (i20 << 2) >> 2] | 0;
      i2 = (Math_imul(_FT_DivFix(i4 - i20 | 0, i3 - i20 | 0) | 0, i2) | 0) + (i1 << 16) | 0;
      i1 = HEAP32[i11 >> 2] | 0;
      break L35;
     } while (0);
     i2 = HEAP32[(HEAP32[i13 + 88 + (i7 * 12 | 0) + 4 >> 2] | 0) + (i6 + -1 << 2) >> 2] << 16;
    } else i2 = HEAP32[HEAP32[i13 + 88 + (i7 * 12 | 0) + 4 >> 2] >> 2] << 16; while (0);
    HEAP32[i1 + (i7 * 24 | 0) + 8 >> 2] = i2;
    i7 = i7 + 1 | 0;
   } while (i7 >>> 0 < i8 >>> 0);
  }
 }
 HEAP32[i14 >> 2] = i12;
 i20 = HEAP32[i15 >> 2] | 0;
 STACKTOP = i17;
 return i20 | 0;
}

function _tt_face_build_cmaps(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i25 = 4;
 i24 = _malloc(40) | 0;
 HEAP32[i24 >> 2] = 0;
 i6 = i27 + 216 | 0;
 i10 = i27 + 212 | 0;
 i11 = i27 + 200 | 0;
 i14 = i27 + 196 | 0;
 i19 = i27 + 192 | 0;
 i20 = i27 + 188 | 0;
 i4 = i27 + 184 | 0;
 i21 = i27 + 8 | 0;
 i22 = i27 + 4 | 0;
 i23 = i27;
 i7 = HEAP32[i5 + 500 >> 2] | 0;
 i8 = i5 + 504 | 0;
 i9 = i7 + (HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = i7;
 if (!(HEAP32[i10 >> 2] | 0)) {
  _free(i24 | 0);
  STACKTOP = i27;
  return;
 }
 if (((HEAP32[i10 >> 2] | 0) + 4 | 0) >>> 0 > i9 >>> 0) {
  _free(i24 | 0);
  STACKTOP = i27;
  return;
 }
 HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 2;
 if (HEAPU8[(HEAP32[i10 >> 2] | 0) + -1 >> 0] | 0 | (HEAPU8[(HEAP32[i10 >> 2] | 0) + -2 >> 0] | 0) << 8 | 0) {
  _free(i24 | 0);
  STACKTOP = i27;
  return;
 }
 HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 2;
 HEAP32[i6 >> 2] = HEAPU8[(HEAP32[i10 >> 2] | 0) + -1 >> 0] | 0 | (HEAPU8[(HEAP32[i10 >> 2] | 0) + -2 >> 0] | 0) << 8;
 if (!(HEAP32[i6 >> 2] | 0)) {
  _free(i24 | 0);
  STACKTOP = i27;
  return;
 }
 i12 = i11 + 8 | 0;
 i13 = i11 + 10 | 0;
 i15 = i11 + 4 | 0;
 i16 = i5 + 264 | 0;
 i17 = i21 + 172 | 0;
 i18 = i21 + 168 | 0;
 while (1) {
  if (((HEAP32[i10 >> 2] | 0) + 8 | 0) >>> 0 > i9 >>> 0) {
   i26 = 26;
   break;
  }
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 2;
  HEAP16[i12 >> 1] = HEAPU8[(HEAP32[i10 >> 2] | 0) + -1 >> 0] | 0 | (HEAPU8[(HEAP32[i10 >> 2] | 0) + -2 >> 0] | 0) << 8;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 2;
  HEAP16[i13 >> 1] = HEAPU8[(HEAP32[i10 >> 2] | 0) + -1 >> 0] | 0 | (HEAPU8[(HEAP32[i10 >> 2] | 0) + -2 >> 0] | 0) << 8;
  HEAP32[i11 >> 2] = i5;
  HEAP32[i15 >> 2] = 0;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 4;
  i1 = (HEAPU8[(HEAP32[i10 >> 2] | 0) + -3 >> 0] | 0) << 16 | (HEAPU8[(HEAP32[i10 >> 2] | 0) + -4 >> 0] | 0) << 24 | (HEAPU8[(HEAP32[i10 >> 2] | 0) + -2 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[i10 >> 2] | 0) + -1 >> 0] | 0);
  if (i1 | 0) if (i1 >>> 0 <= ((HEAP32[i8 >> 2] | 0) + -2 | 0) >>> 0) {
   HEAP32[i14 >> 2] = i7 + i1;
   HEAP32[i19 >> 2] = HEAPU8[(HEAP32[i14 >> 2] | 0) + 1 >> 0] | 0 | (HEAPU8[HEAP32[i14 >> 2] >> 0] | 0) << 8;
   HEAP32[i20 >> 2] = 20304;
   L19 : do if (HEAP32[HEAP32[i20 >> 2] >> 2] | 0) {
    while (1) {
     HEAP32[i4 >> 2] = HEAP32[HEAP32[i20 >> 2] >> 2];
     if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0) == (HEAP32[i19 >> 2] | 0)) break;
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 4;
     if (!(HEAP32[HEAP32[i20 >> 2] >> 2] | 0)) break L19;
    }
    HEAP32[i22 >> 2] = 0;
    __THREW__ = 0;
    invoke_viiii(24, i21 | 0, HEAP32[i14 >> 2] | 0, i9 | 0, 0);
    i1 = __THREW__;
    __THREW__ = 0;
    if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
     i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i24 | 0, i25 | 0) | 0;
     if (!i2) _longjmp(i1 | 0, threwValue | 0);
     tempRet0 = threwValue;
    } else i2 = -1;
    if ((i2 | 0) == 1) i1 = tempRet0; else {
     HEAP32[i17 >> 2] = HEAPU16[i16 >> 1];
     i24 = _saveSetjmp(i21, 1, i24 | 0, i25 | 0) | 0;
     i25 = tempRet0;
     __THREW__ = 0;
     i1 = __THREW__;
     __THREW__ = 0;
     if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
      i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i24 | 0, i25 | 0) | 0;
      if (!i2) _longjmp(i1 | 0, threwValue | 0);
      tempRet0 = threwValue;
     } else i2 = -1;
     if ((i2 | 0) == 1) i1 = tempRet0; else i1 = 0;
    }
    while (1) {
     if (!i1) {
      __THREW__ = 0;
      i1 = invoke_iii(HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] | 0, HEAP32[i14 >> 2] | 0, i21 | 0) | 0;
      i2 = __THREW__;
      __THREW__ = 0;
      if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
       i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i24 | 0, i25 | 0) | 0;
       if (!i3) _longjmp(i2 | 0, threwValue | 0);
       tempRet0 = threwValue;
      } else i3 = -1;
      if ((i3 | 0) == 1) {
       i1 = tempRet0;
       continue;
      }
      HEAP32[i22 >> 2] = i1;
     }
     if (HEAP32[i18 >> 2] | 0) break;
     __THREW__ = 0;
     i1 = invoke_iiiii(66, HEAP32[i4 >> 2] | 0, HEAP32[i14 >> 2] | 0, i11 | 0, i23 | 0) | 0;
     i2 = __THREW__;
     __THREW__ = 0;
     if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
      i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i24 | 0, i25 | 0) | 0;
      if (!i3) _longjmp(i2 | 0, threwValue | 0);
      tempRet0 = threwValue;
     } else i3 = -1;
     if ((i3 | 0) == 1) i1 = tempRet0; else {
      i26 = 19;
      break;
     }
    }
    if ((i26 | 0) == 19) {
     i26 = 0;
     if (!i1) HEAP32[(HEAP32[i23 >> 2] | 0) + 20 >> 2] = HEAP32[i22 >> 2];
    }
   } while (0);
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  if (!(HEAP32[i6 >> 2] | 0)) {
   i26 = 26;
   break;
  }
 }
 if ((i26 | 0) == 26) {
  _free(i24 | 0);
  STACKTOP = i27;
  return;
 }
}

function _Conic_To(i30, i1, i3, i4, i2) {
 i30 = i30 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0, i33 = 0;
 i28 = i30 + 180 | 0;
 i29 = i30 + 52 | 0;
 HEAP32[i29 >> 2] = i28;
 i32 = i30 + 68 | 0;
 HEAP32[i30 + 196 >> 2] = HEAP32[i32 >> 2];
 i31 = i30 + 72 | 0;
 i12 = HEAP32[i31 >> 2] | 0;
 HEAP32[i30 + 200 >> 2] = i12;
 HEAP32[i30 + 188 >> 2] = i1;
 HEAP32[i30 + 192 >> 2] = i3;
 HEAP32[i28 >> 2] = i4;
 HEAP32[i30 + 184 >> 2] = i2;
 i13 = i30 + 100 | 0;
 i14 = i30 + 76 | 0;
 i15 = i30 + 80 | 0;
 i16 = i30 + 86 | 0;
 i17 = i30 + 88 | 0;
 i18 = i30 + 4 | 0;
 i19 = i30 + 8 | 0;
 i20 = i30 + 92 | 0;
 i21 = i30 + 40 | 0;
 i22 = i30 + 36 | 0;
 i23 = i30 + 176 | 0;
 i24 = i30 + 96 | 0;
 i25 = i30 + 87 | 0;
 i26 = i30 + 84 | 0;
 i5 = i28;
 i27 = i2;
 L1 : while (1) {
  i9 = i5 + 20 | 0;
  i10 = i5 + 12 | 0;
  i11 = i5 + 4 | 0;
  i8 = (i12 | 0) > (i27 | 0);
  do if ((i3 | 0) < ((i8 ? i27 : i12) | 0) | (i3 | 0) > ((i8 ? i12 : i27) | 0)) {
   i11 = i5 + 16 | 0;
   i8 = HEAP32[i11 >> 2] | 0;
   HEAP32[i5 + 32 >> 2] = i8;
   i6 = i5 + 8 | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   i8 = (i7 + i8 | 0) / 2 | 0;
   HEAP32[i5 + 24 >> 2] = i8;
   i7 = (i4 + i7 | 0) / 2 | 0;
   HEAP32[i6 >> 2] = i7;
   HEAP32[i11 >> 2] = (i7 + i8 | 0) / 2 | 0;
   HEAP32[i5 + 36 >> 2] = i12;
   i12 = (i3 + i12 | 0) / 2 | 0;
   HEAP32[i5 + 28 >> 2] = i12;
   i11 = (i27 + i3 | 0) / 2 | 0;
   HEAP32[i10 >> 2] = i11;
   HEAP32[i9 >> 2] = (i11 + i12 | 0) / 2 | 0;
   HEAP32[i29 >> 2] = i5 + 16;
  } else {
   if ((i12 | 0) == (i27 | 0)) {
    HEAP32[i29 >> 2] = i5 + -16;
    break;
   }
   i8 = (i12 | 0) < (i27 | 0);
   i7 = i8 ? 1 : 2;
   i2 = HEAP32[i13 >> 2] | 0;
   if ((i2 | 0) != (i7 | 0)) {
    i1 = HEAP32[i18 >> 2] | 0;
    if (i8) i1 = (i12 + -1 + i1 & 0 - i1) - i12 | 0; else i1 = i1 + -1 & i12;
    i6 = (i1 | 0) >= (HEAP32[i19 >> 2] | 0);
    i1 = HEAP32[i21 >> 2] | 0;
    if (i2) {
     i2 = HEAP32[i17 >> 2] | 0;
     i5 = i1 - (HEAP32[i2 + 8 >> 2] | 0) | 0;
     if ((i5 | 0) < 0) {
      i2 = 12;
      break L1;
     }
     if (i5) {
      HEAP32[i2 + 16 >> 2] = i5 >> 2;
      if (i6) {
       i5 = i2 + 12 | 0;
       i33 = HEAPU16[i5 >> 1] | 0;
       HEAP16[i5 >> 1] = (i33 << 1 & 16 ^ 16) + 16 | i33;
      }
      HEAP32[i17 >> 2] = i1;
      i33 = i1 + 32 | 0;
      HEAP32[i21 >> 2] = i33;
      HEAP32[i1 + 16 >> 2] = 0;
      HEAP32[i1 + 8 >> 2] = i33;
      HEAP32[i2 + 28 >> 2] = i1;
      HEAP16[i26 >> 1] = (HEAP16[i26 >> 1] | 0) + 1 << 16 >> 16;
      i1 = i33;
     }
     if (i1 >>> 0 >= (HEAP32[i22 >> 2] | 0) >>> 0) {
      i2 = 18;
      break L1;
     }
     HEAP8[i25 >> 0] = 0;
    }
    if (!(HEAP32[i20 >> 2] | 0)) {
     HEAP32[i17 >> 2] = i1;
     HEAP32[i20 >> 2] = i1;
     i1 = i1 + 32 | 0;
     HEAP32[i21 >> 2] = i1;
    }
    if (i1 >>> 0 >= (HEAP32[i22 >> 2] | 0) >>> 0) {
     i2 = 23;
     break L1;
    }
    i2 = HEAP32[i17 >> 2] | 0;
    i5 = i2 + 12 | 0;
    HEAP32[i2 + 20 >> 2] = 0;
    HEAP32[i2 + 16 >> 2] = 0;
    HEAP32[i2 + 8 >> 2] = i1;
    HEAP32[i2 + 4 >> 2] = 0;
    HEAP32[i2 + 28 >> 2] = 0;
    i1 = HEAPU8[i23 >> 0] | 0;
    HEAP16[i5 >> 1] = i1;
    if (i8) {
     HEAP16[i5 >> 1] = i1 | 8;
     if (i6) HEAP16[i5 >> 1] = i1 | 40;
    } else if (i6) HEAP16[i5 >> 1] = i1 | 16;
    if (!(HEAP32[i24 >> 2] | 0)) HEAP32[i24 >> 2] = i2;
    HEAP32[i13 >> 2] = i7;
    HEAP8[i16 >> 0] = 1;
    HEAP8[i25 >> 0] = 0;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   i2 = HEAP32[i15 >> 2] | 0;
   if (i8) if (!((_Bezier_Up(i30, 2, 68, i1, i2) | 0) << 24 >> 24)) break; else {
    i1 = 1;
    i2 = 41;
    break L1;
   }
   HEAP32[i11 >> 2] = 0 - i27;
   HEAP32[i10 >> 2] = 0 - i3;
   HEAP32[i9 >> 2] = 0 - i12;
   i33 = HEAP8[i16 >> 0] | 0;
   i1 = _Bezier_Up(i30, 2, 68, 0 - i2 | 0, 0 - i1 | 0) | 0;
   if (i33 << 24 >> 24) if (!(HEAP8[i16 >> 0] | 0)) {
    i33 = (HEAP32[i17 >> 2] | 0) + 20 | 0;
    HEAP32[i33 >> 2] = 0 - (HEAP32[i33 >> 2] | 0);
   }
   HEAP32[i11 >> 2] = 0 - (HEAP32[i11 >> 2] | 0);
   if (i1 << 24 >> 24) {
    i1 = 1;
    i2 = 41;
    break L1;
   }
  } while (0);
  i1 = HEAP32[i29 >> 2] | 0;
  if (i1 >>> 0 < i28 >>> 0) {
   i2 = 40;
   break;
  }
  i5 = i1;
  i12 = HEAP32[i1 + 20 >> 2] | 0;
  i27 = HEAP32[i1 + 4 >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  i4 = HEAP32[i1 >> 2] | 0;
 }
 if ((i2 | 0) == 12) {
  HEAP32[i30 + 44 >> 2] = 99;
  i33 = 1;
  return i33 | 0;
 } else if ((i2 | 0) == 18) {
  HEAP32[i30 + 44 >> 2] = 98;
  i33 = 1;
  return i33 | 0;
 } else if ((i2 | 0) == 23) {
  HEAP32[i30 + 44 >> 2] = 98;
  i33 = 1;
  return i33 | 0;
 } else if ((i2 | 0) == 40) {
  HEAP32[i32 >> 2] = i4;
  HEAP32[i31 >> 2] = i27;
  i33 = 0;
  return i33 | 0;
 } else if ((i2 | 0) == 41) return i1 | 0;
 return 0;
}

function _normal_scanRef(i8, i6, i9, i10) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i11 = 0;
 if ((i6 | 0) == (i9 | 0)) {
  i11 = -1;
  return i11 | 0;
 }
 i11 = i8 + 76 | 0;
 switch (HEAP8[i11 + (HEAPU8[i6 >> 0] | 0) >> 0] | 0) {
 case 29:
  {
   HEAP32[i10 >> 2] = i6;
   i11 = 0;
   return i11 | 0;
  }
 case 24:
 case 22:
  {
   i5 = 1;
   break;
  }
 case 5:
  {
   if ((i9 - i6 | 0) < 2) {
    i11 = -2;
    return i11 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 344 >> 2] & 255](i8, i6) | 0)) {
    HEAP32[i10 >> 2] = i6;
    i11 = 0;
    return i11 | 0;
   } else i5 = 2;
   break;
  }
 case 6:
  {
   if ((i9 - i6 | 0) < 3) {
    i11 = -2;
    return i11 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 348 >> 2] & 255](i8, i6) | 0)) {
    HEAP32[i10 >> 2] = i6;
    i11 = 0;
    return i11 | 0;
   } else i5 = 3;
   break;
  }
 case 7:
  {
   if ((i9 - i6 | 0) < 4) {
    i11 = -2;
    return i11 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i8 + 352 >> 2] & 255](i8, i6) | 0)) {
    HEAP32[i10 >> 2] = i6;
    i11 = 0;
    return i11 | 0;
   } else i5 = 4;
   break;
  }
 case 19:
  {
   i1 = i6 + 1 | 0;
   if ((i1 | 0) == (i9 | 0)) {
    i11 = -1;
    return i11 | 0;
   }
   i2 = HEAP8[i1 >> 0] | 0;
   if (i2 << 24 >> 24 != 120) {
    if ((HEAP8[i11 + (i2 & 255) >> 0] | 0) != 25) {
     HEAP32[i10 >> 2] = i1;
     i11 = 0;
     return i11 | 0;
    }
    L36 : while (1) {
     i2 = i1 + 1 | 0;
     if ((i2 | 0) == (i9 | 0)) {
      i7 = -1;
      i4 = 46;
      break;
     }
     switch (HEAP8[i11 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
     case 25:
      {
       i1 = i2;
       break;
      }
     case 18:
      {
       i4 = 29;
       break L36;
      }
     default:
      {
       i4 = 30;
       break L36;
      }
     }
    }
    if ((i4 | 0) == 29) {
     HEAP32[i10 >> 2] = i1 + 2;
     i11 = 10;
     return i11 | 0;
    } else if ((i4 | 0) == 30) {
     HEAP32[i10 >> 2] = i2;
     i11 = 0;
     return i11 | 0;
    } else if ((i4 | 0) == 46) return i7 | 0;
   }
   i2 = i6 + 2 | 0;
   if ((i2 | 0) == (i9 | 0)) {
    i11 = -1;
    return i11 | 0;
   }
   if ((HEAP8[i11 + (HEAPU8[i2 >> 0] | 0) >> 0] & -2) << 24 >> 24 != 24) {
    HEAP32[i10 >> 2] = i2;
    i11 = 0;
    return i11 | 0;
   }
   i1 = i6 + 3 | 0;
   if ((i1 | 0) == (i9 | 0)) {
    i11 = -1;
    return i11 | 0;
   } else i3 = i2;
   L55 : while (1) {
    switch (HEAP8[i11 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
    case 18:
     {
      i4 = 23;
      break L55;
     }
    case 24:
    case 25:
     break;
    default:
     {
      i4 = 24;
      break L55;
     }
    }
    i2 = i1 + 1 | 0;
    if ((i2 | 0) == (i9 | 0)) {
     i7 = -1;
     i4 = 46;
     break;
    } else {
     i3 = i1;
     i1 = i2;
    }
   }
   if ((i4 | 0) == 23) {
    HEAP32[i10 >> 2] = i3 + 2;
    i11 = 10;
    return i11 | 0;
   } else if ((i4 | 0) == 24) {
    HEAP32[i10 >> 2] = i1;
    i11 = 0;
    return i11 | 0;
   } else if ((i4 | 0) == 46) return i7 | 0;
   break;
  }
 default:
  {
   HEAP32[i10 >> 2] = i6;
   i11 = 0;
   return i11 | 0;
  }
 }
 i1 = i6 + i5 | 0;
 if ((i1 | 0) == (i9 | 0)) {
  i11 = -1;
  return i11 | 0;
 }
 i3 = i9;
 i4 = i8 + 332 | 0;
 i5 = i8 + 336 | 0;
 i6 = i8 + 340 | 0;
 L68 : while (1) {
  switch (HEAP8[i11 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
  case 29:
   {
    i4 = 33;
    break L68;
   }
  case 18:
   {
    i4 = 44;
    break L68;
   }
  case 27:
  case 26:
  case 25:
  case 24:
  case 22:
   {
    i2 = 1;
    break;
   }
  case 5:
   {
    if ((i3 - i1 | 0) < 2) {
     i7 = -2;
     i4 = 46;
     break L68;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i8, i1) | 0)) {
     i4 = 36;
     break L68;
    } else i2 = 2;
    break;
   }
  case 6:
   {
    if ((i3 - i1 | 0) < 3) {
     i7 = -2;
     i4 = 46;
     break L68;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i8, i1) | 0)) {
     i4 = 39;
     break L68;
    } else i2 = 3;
    break;
   }
  case 7:
   {
    if ((i3 - i1 | 0) < 4) {
     i7 = -2;
     i4 = 46;
     break L68;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i8, i1) | 0)) {
     i4 = 42;
     break L68;
    } else i2 = 4;
    break;
   }
  default:
   {
    i4 = 45;
    break L68;
   }
  }
  i2 = i1 + i2 | 0;
  if ((i2 | 0) == (i9 | 0)) {
   i7 = -1;
   i4 = 46;
   break;
  } else i1 = i2;
 }
 if ((i4 | 0) == 33) {
  HEAP32[i10 >> 2] = i1;
  i11 = 0;
  return i11 | 0;
 } else if ((i4 | 0) == 36) {
  HEAP32[i10 >> 2] = i1;
  i11 = 0;
  return i11 | 0;
 } else if ((i4 | 0) == 39) {
  HEAP32[i10 >> 2] = i1;
  i11 = 0;
  return i11 | 0;
 } else if ((i4 | 0) == 42) {
  HEAP32[i10 >> 2] = i1;
  i11 = 0;
  return i11 | 0;
 } else if ((i4 | 0) == 44) {
  HEAP32[i10 >> 2] = i1 + 1;
  i11 = 9;
  return i11 | 0;
 } else if ((i4 | 0) == 45) {
  HEAP32[i10 >> 2] = i1;
  i11 = 0;
  return i11 | 0;
 } else if ((i4 | 0) == 46) return i7 | 0;
 return 0;
}

function _FcDirCacheWrite(i11, i1) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i10 = i15 + 24 | 0;
 i9 = i15 + 16 | 0;
 i7 = i15 + 8 | 0;
 i4 = i15;
 i6 = i15 + 104 | 0;
 i14 = i15 + 28 | 0;
 i8 = (HEAP32[i11 + 12 >> 2] | 0) + i11 | 0;
 i3 = _FcConfigGetSysRoot(i1) | 0;
 i5 = _FcStrListCreate(HEAP32[i1 + 12 >> 2] | 0) | 0;
 if (!i5) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i2 = _FcStrListNext(i5) | 0;
 if (!i2) {
  _FcStrListDone(i5);
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 L8 : do if (!i3) {
  i1 = 0;
  while (1) {
   if (i1 | 0) _FcStrFree(i1);
   i1 = _FcStrCopyFilename(i2) | 0;
   if (!(_access(i1, 2) | 0)) {
    i13 = 15;
    break L8;
   }
   if ((_access(i1, 0) | 0) == -1) {
    if (_FcMakeDirectory(i1) | 0) {
     i13 = 18;
     break L8;
    }
   } else if (!(_chmod(i1, 493) | 0)) {
    i13 = 21;
    break L8;
   }
   i2 = _FcStrListNext(i5) | 0;
   if (!i2) {
    i2 = 0;
    break;
   }
  }
 } else {
  i1 = 0;
  while (1) {
   if (i1 | 0) _FcStrFree(i1);
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = 0;
   i1 = _FcStrBuildFilename(i3, i4) | 0;
   if (!(_access(i1, 2) | 0)) {
    i13 = 15;
    break L8;
   }
   if ((_access(i1, 0) | 0) == -1) {
    if (_FcMakeDirectory(i1) | 0) {
     i13 = 18;
     break L8;
    }
   } else if (!(_chmod(i1, 493) | 0)) {
    i13 = 21;
    break L8;
   }
   i2 = _FcStrListNext(i5) | 0;
   if (!i2) {
    i2 = 0;
    break;
   }
  }
 } while (0);
 if ((i13 | 0) == 15) i2 = _FcStrCopyFilename(i1) | 0; else if ((i13 | 0) == 18) {
  i2 = _FcStrCopyFilename(i1) | 0;
  _FcDirCacheCreateTagFile(i1) | 0;
 } else if ((i13 | 0) == 21) {
  i2 = _FcStrCopyFilename(i1) | 0;
  _FcDirCacheCreateTagFile(i1) | 0;
 }
 if (i1 | 0) _FcStrFree(i1);
 _FcStrListDone(i5);
 if (!i2) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 _FcDirCacheBasename(i8, i6);
 HEAP32[i7 >> 2] = i6;
 HEAP32[i7 + 4 >> 2] = 0;
 i12 = _FcStrBuildFilename(i2, i7) | 0;
 if (!i12) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 _FcStrFree(i2);
 if (HEAP32[91917] & 16 | 0) {
  HEAP32[i9 >> 2] = i8;
  HEAP32[i9 + 4 >> 2] = i12;
  _printf(347967, i9) | 0;
 }
 i7 = _FcAtomicCreate(i12) | 0;
 if (i7 | 0) {
  if (_FcAtomicLock(i7) | 0) {
   i3 = _FcAtomicNewFile(i7) | 0;
   HEAP32[i10 >> 2] = 438;
   i3 = _FcOpen(i3, 66, i10) | 0;
   do if ((i3 | 0) != -1) {
    i1 = HEAP32[i11 >> 2] | 0;
    if ((i1 | 0) == -66913276) {
     i2 = i11 + 8 | 0;
     i1 = i2;
     i2 = _write(i3, i11, HEAP32[i2 >> 2] | 0) | 0;
     i6 = i11;
    } else {
     HEAP32[i11 >> 2] = -66913276;
     i6 = i11 + 8 | 0;
     i2 = _write(i3, i11, HEAP32[i6 >> 2] | 0) | 0;
     HEAP32[i11 >> 2] = i1;
     i1 = i6;
     i6 = i11;
    }
    if ((i2 | 0) != (HEAP32[i1 >> 2] | 0)) {
     _perror(348006);
     _close(i3) | 0;
     break;
    }
    _close(i3) | 0;
    if (_FcAtomicReplaceOrig(i7) | 0) {
     if ((HEAP32[i1 >> 2] | 0) < 1024) if (_FcStat(i12, i14) | 0) {
      i1 = HEAP32[91921] | 0;
      L63 : do if (!i1) {
       while (1) {
        i1 = _malloc(28) | 0;
        _pthread_mutex_init(i1 | 0, 0) | 0;
        i2 = HEAP32[91921] | 0;
        if (!i2) HEAP32[91921] = i1;
        if (!i2) break;
        _pthread_mutex_destroy(i1 | 0) | 0;
        i1 = HEAP32[91921] | 0;
        if (i1 | 0) {
         i13 = 43;
         break L63;
        }
       }
       _pthread_mutex_lock(i1 | 0) | 0;
       _FcRandom() | 0;
      } else i13 = 43; while (0);
      if ((i13 | 0) == 43) _pthread_mutex_lock(i1 | 0) | 0;
      do if (i6 | 0) {
       i2 = HEAP32[91922] | 0;
       if ((i2 | 0) > 0) {
        i1 = 367692;
        do {
         i5 = i2;
         i2 = i2 + -1 | 0;
         i3 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
         L76 : do if (i3) {
          i4 = i3;
          while (1) {
           i3 = i4 + 24 | 0;
           if (((HEAP32[i4 >> 2] | 0) + (HEAP32[i4 + 8 >> 2] | 0) | 0) >>> 0 > i6 >>> 0) break L76;
           i4 = HEAP32[i4 + 24 + (i2 << 2) >> 2] | 0;
           if (!i4) {
            i1 = i3;
            break;
           } else i1 = i3;
          }
         } while (0);
        } while ((i5 | 0) > 1);
       } else i1 = 367692;
       i1 = HEAP32[i1 >> 2] | 0;
       if (!i1) break;
       if (((HEAP32[i1 >> 2] | 0) + (HEAP32[i1 + 8 >> 2] | 0) | 0) >>> 0 <= i6 >>> 0) break;
       HEAP32[i1 + 12 >> 2] = HEAP32[i14 >> 2];
       HEAP32[i1 + 16 >> 2] = HEAP32[i14 + 72 >> 2];
       HEAP32[i1 + 20 >> 2] = HEAP32[i14 + 56 >> 2];
      } while (0);
      _pthread_mutex_unlock(HEAP32[91921] | 0) | 0;
     }
     _FcStrFree(i12);
     _FcAtomicUnlock(i7);
     _FcAtomicDestroy(i7);
     i14 = 1;
     STACKTOP = i15;
     return i14 | 0;
    }
   } while (0);
   _FcAtomicUnlock(i7);
  }
  _FcAtomicDestroy(i7);
 }
 _FcStrFree(i12);
 i14 = 0;
 STACKTOP = i15;
 return i14 | 0;
}

function _FcCharSetSubtractCount(i7, i4) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 if (!((i7 | 0) != 0 & (i4 | 0) != 0)) {
  i21 = 0;
  return i21 | 0;
 }
 i19 = i7;
 i17 = (HEAP32[i7 + 12 >> 2] | 0) + i19 | 0;
 i20 = i17;
 i18 = HEAP32[i7 + 4 >> 2] | 0;
 if (!i17) {
  i1 = -1;
  i21 = 7;
 } else {
  i1 = i18;
  do {
   if ((i1 | 0) < 1) {
    i21 = 5;
    break;
   }
   i1 = i1 + -1 >> 1;
  } while ((HEAP16[i20 + (i1 << 1) >> 1] | 0) != 0);
  if ((i21 | 0) == 5) i1 = ~i1;
  if ((i1 | 0) < 0) i21 = 7; else {
   i2 = 0;
   i21 = 9;
  }
 }
 if ((i21 | 0) == 7) {
  i2 = ~i1;
  if ((i18 | 0) == (i2 | 0)) {
   i6 = 0;
   i5 = 0;
   i2 = -1;
  } else {
   i1 = i2;
   i2 = HEAPU16[i20 + (i2 << 1) >> 1] << 8;
   i21 = 9;
  }
 }
 if ((i21 | 0) == 9) {
  i6 = (HEAP32[i7 + 8 >> 2] | 0) + i19 | 0;
  i6 = i6 + (HEAP32[i6 + (i1 << 2) >> 2] | 0) | 0;
  i5 = i1;
 }
 i14 = i4;
 i17 = (HEAP32[i4 + 12 >> 2] | 0) + i14 | 0;
 i15 = i17;
 i16 = HEAP32[i4 + 4 >> 2] | 0;
 i17 = (i17 | 0) == 0;
 if (i17) {
  i1 = -1;
  i21 = 15;
 } else {
  i1 = i16;
  do {
   if ((i1 | 0) < 1) {
    i21 = 13;
    break;
   }
   i1 = i1 + -1 >> 1;
  } while ((HEAP16[i15 + (i1 << 1) >> 1] | 0) != 0);
  if ((i21 | 0) == 13) i1 = ~i1;
  if ((i1 | 0) < 0) i21 = 15; else {
   i3 = 0;
   i21 = 18;
  }
 }
 do if ((i21 | 0) == 15) {
  i3 = ~i1;
  if ((i16 | 0) == (i3 | 0)) {
   i13 = i4 + 8 | 0;
   i4 = 0;
   i3 = -1;
   break;
  } else {
   i1 = i3;
   i3 = HEAPU16[i15 + (i3 << 1) >> 1] << 8;
   i21 = 18;
   break;
  }
 } while (0);
 if ((i21 | 0) == 18) {
  i13 = i4 + 8 | 0;
  i4 = (HEAP32[i13 >> 2] | 0) + i14 | 0;
  i4 = i4 + (HEAP32[i4 + (i1 << 2) >> 2] | 0) | 0;
 }
 i11 = i7 + 8 | 0;
 i12 = i16 + -1 | 0;
 i1 = 0;
 L32 : while (1) {
  i10 = i5 + 1 | 0;
  i9 = (i10 | 0) < (i18 | 0);
  i8 = i6;
  while (1) {
   i7 = i2 >>> 8 & 65535;
   if (!i8) break L32;
   if (i2 >>> 0 > i3 >>> 0) {
    i3 = i4;
    while (1) {
     while (1) if (!i3) i3 = 0; else break;
     if (i17) {
      i3 = -1;
      i21 = 39;
     } else {
      i4 = i12;
      i5 = 0;
      while (1) {
       if ((i5 | 0) > (i4 | 0)) {
        i21 = 33;
        break;
       }
       i3 = i4 + i5 >> 1;
       i22 = HEAP16[i15 + (i3 << 1) >> 1] | 0;
       i6 = (i22 & 65535) < (i7 & 65535);
       if (i22 << 16 >> 16 == i7 << 16 >> 16) break; else {
        i4 = i6 ? i4 : i3 + -1 | 0;
        i5 = i6 ? i3 + 1 | 0 : i5;
       }
      }
      if ((i21 | 0) == 33) {
       i21 = 0;
       if ((i4 | 0) < 0) i21 = 36; else if ((i4 | 0) < (i16 | 0)) if ((HEAPU16[i15 + (i4 << 1) >> 1] | 0) < (i7 & 65535)) i21 = 36; else i3 = i4; else i3 = i4;
       if ((i21 | 0) == 36) i3 = i4 + 1 | 0;
       i3 = ~i3;
      }
      if ((i3 | 0) < 0) i21 = 39; else {
       i4 = i3;
       i3 = i2;
       i21 = 42;
      }
     }
     if ((i21 | 0) == 39) {
      i21 = 0;
      i3 = ~i3;
      if ((i16 | 0) == (i3 | 0)) {
       i4 = 0;
       i3 = -1;
      } else {
       i4 = i3;
       i3 = HEAPU16[i15 + (i3 << 1) >> 1] << 8;
       i21 = 42;
      }
     }
     if ((i21 | 0) == 42) {
      i21 = 0;
      i22 = (HEAP32[i13 >> 2] | 0) + i14 | 0;
      i4 = i22 + (HEAP32[i22 + (i4 << 2) >> 2] | 0) | 0;
     }
     if (i2 >>> 0 > i3 >>> 0) i3 = i4; else break;
    }
   }
   if ((i2 | 0) == (i3 | 0)) {
    i2 = (_llvm_ctpop_i32(HEAP32[i8 >> 2] & ~HEAP32[i4 >> 2] | 0) | 0) + i1 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 4 >> 2] & ~HEAP32[i4 + 4 >> 2] | 0) | 0) + i2 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 8 >> 2] & ~HEAP32[i4 + 8 >> 2] | 0) | 0) + i2 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 12 >> 2] & ~HEAP32[i4 + 12 >> 2] | 0) | 0) + i2 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 16 >> 2] & ~HEAP32[i4 + 16 >> 2] | 0) | 0) + i2 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 20 >> 2] & ~HEAP32[i4 + 20 >> 2] | 0) | 0) + i2 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 24 >> 2] & ~HEAP32[i4 + 24 >> 2] | 0) | 0) + i2 | 0;
    i1 = HEAP32[i8 + 28 >> 2] & ~HEAP32[i4 + 28 >> 2];
   } else {
    i2 = (_llvm_ctpop_i32(HEAP32[i8 >> 2] | 0) | 0) + i1 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 4 >> 2] | 0) | 0) + i2 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 8 >> 2] | 0) | 0) + i2 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 12 >> 2] | 0) | 0) + i2 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 16 >> 2] | 0) | 0) + i2 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 20 >> 2] | 0) | 0) + i2 | 0;
    i2 = (_llvm_ctpop_i32(HEAP32[i8 + 24 >> 2] | 0) | 0) + i2 | 0;
    i1 = HEAP32[i8 + 28 >> 2] | 0;
   }
   i1 = (_llvm_ctpop_i32(i1 | 0) | 0) + i2 | 0;
   if (i9) break; else {
    i8 = 0;
    i2 = -1;
   }
  }
  i6 = (HEAP32[i11 >> 2] | 0) + i19 | 0;
  i6 = i6 + (HEAP32[i6 + (i10 << 2) >> 2] | 0) | 0;
  i5 = i10;
  i2 = HEAPU16[i20 + (i10 << 1) >> 1] << 8;
 }
 return i1 | 0;
}

function _TT_Set_Var_Design(i15, i2, i9) {
 i15 = i15 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i18 + 8 | 0;
 i11 = i18 + 4 | 0;
 i16 = i18;
 HEAP32[i16 >> 2] = 0;
 i17 = HEAP32[i15 + 100 >> 2] | 0;
 i10 = i15 + 676 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 do if (!i1) {
  i14 = _TT_Get_MM_Var(i15, 0) | 0;
  HEAP32[i16 >> 2] = i14;
  if (!i14) {
   i1 = HEAP32[i10 >> 2] | 0;
   break;
  } else {
   i15 = 0;
   _ft_mem_free(i17, i15);
   i17 = HEAP32[i16 >> 2] | 0;
   STACKTOP = i18;
   return i17 | 0;
  }
 } while (0);
 i13 = HEAP32[i1 + 8 >> 2] | 0;
 i14 = HEAP32[i13 >> 2] | 0;
 i7 = i14 >>> 0 < i2 >>> 0 ? i14 : i2;
 i14 = _ft_mem_realloc(i17, 4, 0, i14, 0, i16) | 0;
 if (HEAP32[i16 >> 2] | 0) {
  i15 = i14;
  _ft_mem_free(i17, i15);
  i17 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 L10 : do if (!i7) i2 = 0; else {
  i2 = 0;
  i8 = HEAP32[i13 + 12 >> 2] | 0;
  while (1) {
   i3 = HEAP32[i9 + (i2 << 2) >> 2] | 0;
   i4 = HEAP32[i8 + 12 >> 2] | 0;
   if ((i3 | 0) > (i4 | 0)) break;
   i5 = HEAP32[i8 + 4 >> 2] | 0;
   if ((i3 | 0) < (i5 | 0)) break;
   i6 = HEAP32[i8 + 8 >> 2] | 0;
   if ((i3 | 0) < (i6 | 0)) i3 = 0 - (_FT_DivFix(i3 - i6 | 0, i5 - i6 | 0) | 0) | 0; else if ((i4 | 0) == (i6 | 0)) i3 = 0; else i3 = _FT_DivFix(i3 - i6 | 0, i4 - i6 | 0) | 0;
   HEAP32[i14 + (i2 << 2) >> 2] = i3;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 < i7 >>> 0) i8 = i8 + 24 | 0; else break L10;
  }
  HEAP32[i16 >> 2] = 6;
  i15 = i14;
  _ft_mem_free(i17, i15);
  i17 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 } while (0);
 i3 = HEAP32[i13 >> 2] | 0;
 if (i2 >>> 0 < i3 >>> 0) {
  i9 = i2 << 2;
  i8 = i2 + 1 | 0;
  _memset(i14 + i9 | 0, 0, ((i3 >>> 0 > i8 >>> 0 ? i3 : i8) << 2) - i9 | 0) | 0;
 }
 if (!(HEAP8[i1 + 16 >> 0] | 0)) {
  i8 = HEAP32[i15 + 104 >> 2] | 0;
  i9 = HEAP32[i8 + 28 >> 2] | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  HEAP8[i2 + 16 >> 0] = 1;
  i10 = FUNCTION_TABLE_iiiii[HEAP32[i15 + 508 >> 2] & 127](i15, 1635148146, i8, i11) | 0;
  HEAP32[i12 >> 2] = i10;
  if (!i10) {
   i11 = _FT_Stream_EnterFrame(i8, HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i12 >> 2] = i11;
   if (!i11) {
    i11 = _FT_Stream_GetULong(i8) | 0;
    i6 = _FT_Stream_GetULong(i8) | 0;
    L32 : do if ((i11 | 0) == 65536) if ((i6 | 0) == (HEAP32[HEAP32[i2 + 8 >> 2] >> 2] | 0)) {
     i4 = _ft_mem_realloc(i9, 8, 0, i6, 0, i12) | 0;
     i7 = i2 + 20 | 0;
     HEAP32[i7 >> 2] = i4;
     if ((i6 | 0) > 0 & (HEAP32[i12 >> 2] | 0) == 0) {
      i3 = 0;
      while (1) {
       i11 = _FT_Stream_GetUShort(i8) | 0;
       HEAP16[i4 >> 1] = i11;
       i11 = _ft_mem_realloc(i9, 8, 0, i11 & 65535, 0, i12) | 0;
       i5 = i4 + 4 | 0;
       HEAP32[i5 >> 2] = i11;
       if (HEAP32[i12 >> 2] | 0) break;
       if (HEAP16[i4 >> 1] | 0) {
        i2 = 0;
        do {
         i11 = (_FT_Stream_GetUShort(i8) | 0) << 16 >> 16 << 2;
         HEAP32[(HEAP32[i5 >> 2] | 0) + (i2 << 3) >> 2] = i11;
         i11 = (_FT_Stream_GetUShort(i8) | 0) << 16 >> 16 << 2;
         HEAP32[(HEAP32[i5 >> 2] | 0) + (i2 << 3) + 4 >> 2] = i11;
         i2 = i2 + 1 | 0;
        } while ((i2 | 0) < (HEAPU16[i4 >> 1] | 0));
       }
       i3 = i3 + 1 | 0;
       if ((i3 | 0) < (i6 | 0)) i4 = i4 + 8 | 0; else break L32;
      }
      i2 = HEAP32[i7 >> 2] | 0;
      if ((i3 | 0) > 0) do {
       i12 = i3;
       i3 = i3 + -1 | 0;
       _ft_mem_free(i9, HEAP32[i2 + (i3 << 3) + 4 >> 2] | 0);
       i2 = HEAP32[i7 >> 2] | 0;
       HEAP32[i2 + (i3 << 3) + 4 >> 2] = 0;
      } while ((i12 | 0) > 1);
      _ft_mem_free(i9, i2);
      HEAP32[i7 >> 2] = 0;
     }
    } while (0);
    _FT_Stream_ExitFrame(i8);
   }
  }
 }
 i2 = HEAP32[i1 + 20 >> 2] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if (i2) if (!i1) i1 = 0; else {
  i10 = 0;
  while (1) {
   i3 = HEAP16[i2 >> 1] | 0;
   L55 : do if ((i3 & 65535) > 1) {
    i6 = i14 + (i10 << 2) | 0;
    i7 = HEAP32[i6 >> 2] | 0;
    i8 = i2 + 4 | 0;
    i9 = HEAP32[i8 >> 2] | 0;
    i5 = i3 & 65535;
    i3 = 1;
    while (1) {
     i4 = HEAP32[i9 + (i3 << 3) >> 2] | 0;
     if ((i7 | 0) < (i4 | 0)) break;
     i3 = i3 + 1 | 0;
     if (i3 >>> 0 >= i5 >>> 0) break L55;
    }
    i12 = i3 + -1 | 0;
    i1 = HEAP32[i9 + (i12 << 3) >> 2] | 0;
    i1 = _FT_MulDiv(i7 - i1 | 0, (HEAP32[i9 + (i3 << 3) + 4 >> 2] | 0) - (HEAP32[i9 + (i12 << 3) + 4 >> 2] | 0) | 0, i4 - i1 | 0) | 0;
    HEAP32[i6 >> 2] = (HEAP32[(HEAP32[i8 >> 2] | 0) + (i12 << 3) + 4 >> 2] | 0) + i1;
    i1 = HEAP32[i13 >> 2] | 0;
   } while (0);
   i10 = i10 + 1 | 0;
   if (i10 >>> 0 >= i1 >>> 0) break; else i2 = i2 + 8 | 0;
  }
 }
 i15 = _TT_Set_MM_Blend(i15, i1, i14) | 0;
 HEAP32[i16 >> 2] = i15;
 i15 = i14;
 _ft_mem_free(i17, i15);
 i17 = HEAP32[i16 >> 2] | 0;
 STACKTOP = i18;
 return i17 | 0;
}

function _af_latin_hints_detect_features(i5, i1, i2, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i18 = i20;
 i3 = _af_latin_hints_compute_segments(i5, i6) | 0;
 if (i3 | 0) {
  i19 = i3;
  STACKTOP = i20;
  return i19 | 0;
 }
 _af_latin_hints_link_segments(i5, i1, i2, i6);
 i15 = i5 + 44 + (i6 * 1468 | 0) | 0;
 i16 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i5 + 2988 >> 2] | 0;
 i4 = HEAP32[i5 + 44 + (i6 * 1468 | 0) + 8 >> 2] | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 i13 = i4 + (i3 * 48 | 0) | 0;
 i17 = i5 + 44 + (i6 * 1468 | 0) + 12 | 0;
 HEAP32[i17 >> 2] = 0;
 i12 = (i6 | 0) == 0;
 i1 = i5 + 12 | 0;
 i14 = HEAP32[(i12 ? i5 + 4 | 0 : i1) >> 2] | 0;
 if (i12) i12 = _FT_DivFix(64, HEAP32[i1 >> 2] | 0) | 0; else i12 = 0;
 i11 = _FT_MulFix(HEAP32[i2 + 44 + (i6 * 1572 | 0) + 204 >> 2] | 0, i14) | 0;
 i11 = _FT_DivFix((i11 | 0) < 16 ? i11 : 16, i14) | 0;
 L7 : do if ((i3 | 0) > 0) {
  i10 = i12 * 3 | 0;
  i1 = i5 + 44 + (i6 * 1468 | 0) + 20 | 0;
  L9 : while (1) {
   i2 = HEAP16[i4 + 8 >> 1] | 0;
   L11 : do if ((i2 | 0) >= (i12 | 0)) if (!((i2 << 1 | 0) < (i10 | 0) & (HEAP32[i4 + 24 >> 2] | 0) != 0)) {
    i5 = HEAP32[i17 >> 2] | 0;
    L14 : do if ((i5 | 0) > 0) {
     i7 = HEAP32[i1 >> 2] | 0;
     i8 = i4 + 2 | 0;
     i2 = HEAP16[i8 >> 1] | 0;
     i9 = i2 << 16 >> 16;
     i6 = i4 + 1 | 0;
     i3 = 0;
     while (1) {
      i21 = i9 - (HEAP16[i7 + (i3 * 48 | 0) >> 1] | 0) | 0;
      if ((((i21 | 0) < 0 ? 0 - i21 | 0 : i21) | 0) < (i11 | 0)) if ((HEAP8[i7 + (i3 * 48 | 0) + 13 >> 0] | 0) == (HEAP8[i6 >> 0] | 0)) break;
      i3 = i3 + 1 | 0;
      if ((i3 | 0) >= (i5 | 0)) break L14;
     }
     HEAP32[i4 + 16 >> 2] = HEAP32[i7 + (i3 * 48 | 0) + 40 >> 2];
     i21 = i7 + (i3 * 48 | 0) + 44 | 0;
     HEAP32[(HEAP32[i21 >> 2] | 0) + 16 >> 2] = i4;
     HEAP32[i21 >> 2] = i4;
     break L11;
    } else {
     i2 = i4 + 2 | 0;
     i8 = i2;
     i6 = i4 + 1 | 0;
     i2 = HEAP16[i2 >> 1] | 0;
    } while (0);
    i2 = _af_axis_hints_new_edge(i15, i2 << 16 >> 16, HEAP8[i6 >> 0] | 0, i16, i18) | 0;
    if (i2 | 0) break L9;
    i2 = HEAP32[i18 >> 2] | 0;
    i3 = i2;
    i5 = i3 + 40 | 0;
    do {
     HEAP32[i3 >> 2] = 0;
     i3 = i3 + 4 | 0;
    } while ((i3 | 0) < (i5 | 0));
    HEAP32[i2 + 40 >> 2] = i4;
    HEAP32[i2 + 44 >> 2] = i4;
    HEAP8[i2 + 13 >> 0] = HEAP8[i6 >> 0] | 0;
    i21 = HEAP16[i8 >> 1] | 0;
    HEAP16[i2 >> 1] = i21;
    i21 = _FT_MulFix(i21 << 16 >> 16, i14) | 0;
    HEAP32[i2 + 4 >> 2] = i21;
    HEAP32[i2 + 8 >> 2] = i21;
    HEAP32[i4 + 16 >> 2] = i4;
   } while (0);
   i4 = i4 + 48 | 0;
   if (i4 >>> 0 >= i13 >>> 0) break L7;
  }
  i21 = i2;
  STACKTOP = i20;
  return i21 | 0;
 } else i1 = i5 + 44 + (i6 * 1468 | 0) + 20 | 0; while (0);
 i4 = HEAP32[i1 >> 2] | 0;
 i21 = HEAP32[i17 >> 2] | 0;
 i11 = i4 + (i21 * 48 | 0) | 0;
 if ((i21 | 0) > 0) i1 = i4; else {
  i21 = 0;
  STACKTOP = i20;
  return i21 | 0;
 }
 do {
  i3 = HEAP32[i1 + 40 >> 2] | 0;
  if (i3 | 0) {
   i2 = i3;
   do {
    HEAP32[i2 + 12 >> 2] = i1;
    i2 = HEAP32[i2 + 16 >> 2] | 0;
   } while ((i2 | 0) != (i3 | 0));
  }
  i1 = i1 + 48 | 0;
 } while (i1 >>> 0 < i11 >>> 0);
 do {
  i9 = HEAP32[i4 + 40 >> 2] | 0;
  i10 = i4 + 24 | 0;
  i7 = i4 + 28 | 0;
  i3 = 0;
  i5 = 0;
  i6 = i9;
  do {
   i1 = HEAP8[i6 >> 0] & 1;
   i5 = (i1 & 255) + i5 | 0;
   i3 = ((i1 ^ 1) & 255) + i3 | 0;
   i1 = HEAP32[i6 + 24 >> 2] | 0;
   if (!i1) i8 = 0; else {
    i8 = HEAP32[i1 + 12 >> 2] | 0;
    i8 = (i8 | 0) != (i4 | 0) & (i8 | 0) != 0;
   }
   i2 = HEAP32[i6 + 20 >> 2] | 0;
   if (!i2) {
    if (i8) i19 = 31;
   } else if (i8 | (HEAP32[i2 + 12 >> 2] | 0) != 0) if (i8) i19 = 31; else {
    i1 = i10;
    i19 = 32;
   }
   if ((i19 | 0) == 31) {
    i2 = i1;
    i1 = i7;
    i19 = 32;
   }
   do if ((i19 | 0) == 32) {
    i19 = 0;
    i1 = HEAP32[i1 >> 2] | 0;
    if (!i1) i19 = 34; else {
     i21 = (HEAP16[i4 >> 1] | 0) - (HEAP16[i1 >> 1] | 0) | 0;
     i18 = (HEAP16[i6 + 2 >> 1] | 0) - (HEAP16[i2 + 2 >> 1] | 0) | 0;
     if ((((i18 | 0) < 0 ? 0 - i18 | 0 : i18) | 0) < (((i21 | 0) < 0 ? 0 - i21 | 0 : i21) | 0)) i19 = 34;
    }
    if ((i19 | 0) == 34) {
     i19 = 0;
     i1 = HEAP32[i2 + 12 >> 2] | 0;
    }
    if (i8) {
     HEAP32[i7 >> 2] = i1;
     i21 = i1 + 12 | 0;
     HEAP8[i21 >> 0] = HEAP8[i21 >> 0] | 2;
     break;
    } else {
     HEAP32[i10 >> 2] = i1;
     break;
    }
   } while (0);
   i6 = HEAP32[i6 + 16 >> 2] | 0;
  } while ((i6 | 0) != (i9 | 0));
  HEAP8[i4 + 12 >> 0] = (i5 | 0) > 0 & (i5 | 0) >= (i3 | 0) & 1;
  if (HEAP32[i7 >> 2] | 0) if (HEAP32[i10 >> 2] | 0) HEAP32[i7 >> 2] = 0;
  i4 = i4 + 48 | 0;
 } while (i4 >>> 0 < i11 >>> 0);
 i1 = 0;
 STACKTOP = i20;
 return i1 | 0;
}

function _cff_face_done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 if (!i1) return;
 i11 = HEAP32[i1 + 100 >> 2] | 0;
 i2 = HEAP32[i1 + 532 >> 2] | 0;
 if (i2 | 0) FUNCTION_TABLE_vi[HEAP32[i2 + 12 >> 2] & 127](i1);
 i10 = i1 + 656 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 if (!i8) return;
 i9 = HEAP32[i8 + 4 >> 2] | 0;
 i1 = i8 + 84 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  i3 = HEAP32[i2 + 28 >> 2] | 0;
  i4 = i8 + 112 | 0;
  if (HEAP32[i4 >> 2] | 0) _FT_Stream_ReleaseFrame(i2, i4);
  _ft_mem_free(i3, HEAP32[i8 + 108 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
 }
 i1 = i8 + 1208 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  i3 = HEAP32[i2 + 28 >> 2] | 0;
  i4 = i8 + 1236 | 0;
  if (HEAP32[i4 >> 2] | 0) _FT_Stream_ReleaseFrame(i2, i4);
  _ft_mem_free(i3, HEAP32[i8 + 1232 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
 }
 i1 = i8 + 20 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  i3 = HEAP32[i2 + 28 >> 2] | 0;
  i4 = i8 + 48 | 0;
  if (HEAP32[i4 >> 2] | 0) _FT_Stream_ReleaseFrame(i2, i4);
  _ft_mem_free(i3, HEAP32[i8 + 44 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
 }
 i1 = i8 + 1176 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  i3 = HEAP32[i2 + 28 >> 2] | 0;
  i4 = i8 + 1204 | 0;
  if (HEAP32[i4 >> 2] | 0) _FT_Stream_ReleaseFrame(i2, i4);
  _ft_mem_free(i3, HEAP32[i8 + 1200 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
 }
 i7 = i8 + 1896 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (i1 | 0) {
  i6 = 0;
  do {
   i5 = HEAP32[i8 + 1900 + (i6 << 2) >> 2] | 0;
   if (i5) {
    i1 = i5 + 536 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2 | 0) {
     i3 = HEAP32[i2 + 28 >> 2] | 0;
     i4 = i5 + 564 | 0;
     if (HEAP32[i4 >> 2] | 0) _FT_Stream_ReleaseFrame(i2, i4);
     _ft_mem_free(i3, HEAP32[i5 + 560 >> 2] | 0);
     HEAP32[i1 >> 2] = 0;
     HEAP32[i1 + 4 >> 2] = 0;
     HEAP32[i1 + 8 >> 2] = 0;
     HEAP32[i1 + 12 >> 2] = 0;
     HEAP32[i1 + 16 >> 2] = 0;
     HEAP32[i1 + 20 >> 2] = 0;
     HEAP32[i1 + 24 >> 2] = 0;
     HEAP32[i1 + 28 >> 2] = 0;
    }
    i1 = i5 + 568 | 0;
    _ft_mem_free(i9, HEAP32[i1 >> 2] | 0);
    HEAP32[i1 >> 2] = 0;
    i1 = HEAP32[i7 >> 2] | 0;
   }
   i6 = i6 + 1 | 0;
  } while (i6 >>> 0 < i1 >>> 0);
  i7 = i8 + 1900 | 0;
  _ft_mem_free(i9, HEAP32[i7 >> 2] | 0);
  HEAP32[i7 >> 2] = 0;
 }
 HEAP32[i8 + 116 >> 2] = 0;
 HEAP32[i8 + 120 >> 2] = 0;
 HEAP32[i8 + 124 >> 2] = 0;
 i2 = HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] | 0;
 i1 = i8 + 1164 | 0;
 _ft_mem_free(i2, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 HEAP32[i8 + 1168 >> 2] = 0;
 i1 = i8 + 1160 | 0;
 _ft_mem_free(i2, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 HEAP32[i8 + 1152 >> 2] = 0;
 HEAP32[i8 + 1156 >> 2] = 0;
 i1 = i8 + 1860 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  i3 = HEAP32[i2 + 28 >> 2] | 0;
  i4 = i8 + 1888 | 0;
  if (HEAP32[i4 >> 2] | 0) _FT_Stream_ReleaseFrame(i2, i4);
  _ft_mem_free(i3, HEAP32[i8 + 1884 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
 }
 i1 = i8 + 1892 | 0;
 _ft_mem_free(i9, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i8 + 2932 | 0;
 if (HEAP32[i1 >> 2] | 0) _FT_Stream_ReleaseFrame(HEAP32[i8 >> 2] | 0, i1);
 HEAP32[i8 + 2936 >> 2] = 0;
 HEAP8[i8 + 2924 >> 0] = 0;
 HEAP32[i8 + 2928 >> 2] = 0;
 i1 = i8 + 2960 | 0;
 _ft_mem_free(i9, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i8 + 1304 | 0;
 _ft_mem_free(i9, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i8 + 1308 | 0;
 _ft_mem_free(i9, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i8 + 1316 | 0;
 _ft_mem_free(i9, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i8 + 1320 | 0;
 _ft_mem_free(i9, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = HEAP32[i8 + 2976 >> 2] | 0;
 if (i1 | 0) {
  i8 = i8 + 2972 | 0;
  FUNCTION_TABLE_vi[i1 & 127](HEAP32[i8 >> 2] | 0);
  _ft_mem_free(i9, HEAP32[i8 >> 2] | 0);
  HEAP32[i8 >> 2] = 0;
 }
 _ft_mem_free(i11, HEAP32[i10 >> 2] | 0);
 HEAP32[i10 >> 2] = 0;
 return;
}

function ___floatscan(i11, i2, i9) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0;
 switch (i2 | 0) {
 case 0:
  {
   i7 = -149;
   i8 = 24;
   i5 = 4;
   break;
  }
 case 1:
  {
   i7 = -1074;
   i8 = 53;
   i5 = 4;
   break;
  }
 case 2:
  {
   i7 = -1074;
   i8 = 53;
   i5 = 4;
   break;
  }
 default:
  d1 = 0.0;
 }
 L4 : do if ((i5 | 0) == 4) {
  i12 = i11 + 4 | 0;
  i10 = i11 + 100 | 0;
  do {
   i2 = HEAP32[i12 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    HEAP32[i12 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
   } else i2 = ___shgetc(i11) | 0;
  } while ((_isspace(i2) | 0) != 0);
  L13 : do switch (i2 | 0) {
  case 43:
  case 45:
   {
    i4 = 1 - (((i2 | 0) == 45 & 1) << 1) | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i12 >> 2] = i2 + 1;
     i3 = HEAPU8[i2 >> 0] | 0;
     break L13;
    } else {
     i3 = ___shgetc(i11) | 0;
     break L13;
    }
   }
  default:
   {
    i3 = i2;
    i4 = 1;
   }
  } while (0);
  i2 = 0;
  do {
   if ((i3 | 32 | 0) != (HEAP8[367600 + i2 >> 0] | 0)) break;
   do if (i2 >>> 0 < 7) {
    i3 = HEAP32[i12 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i12 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
     break;
    } else {
     i3 = ___shgetc(i11) | 0;
     break;
    }
   } while (0);
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < 8);
  L29 : do switch (i2 | 0) {
  case 8:
   break;
  case 3:
   {
    i5 = 23;
    break;
   }
  default:
   {
    i6 = (i9 | 0) != 0;
    if (i6 & i2 >>> 0 > 3) if ((i2 | 0) == 8) break L29; else {
     i5 = 23;
     break L29;
    }
    L34 : do if (!i2) {
     i2 = 0;
     do {
      if ((i3 | 32 | 0) != (HEAP8[367609 + i2 >> 0] | 0)) break L34;
      do if (i2 >>> 0 < 2) {
       i3 = HEAP32[i12 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
        break;
       } else {
        i3 = ___shgetc(i11) | 0;
        break;
       }
      } while (0);
      i2 = i2 + 1 | 0;
     } while (i2 >>> 0 < 3);
    } while (0);
    switch (i2 | 0) {
    case 3:
     {
      i2 = HEAP32[i12 >> 2] | 0;
      if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
       HEAP32[i12 >> 2] = i2 + 1;
       i2 = HEAPU8[i2 >> 0] | 0;
      } else i2 = ___shgetc(i11) | 0;
      if ((i2 | 0) == 40) i2 = 1; else {
       if (!(HEAP32[i10 >> 2] | 0)) {
        d1 = nan;
        break L4;
       }
       HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
       d1 = nan;
       break L4;
      }
      while (1) {
       i3 = HEAP32[i12 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
       } else i3 = ___shgetc(i11) | 0;
       if (!((i3 + -48 | 0) >>> 0 < 10 | (i3 + -65 | 0) >>> 0 < 26)) if (!((i3 | 0) == 95 | (i3 + -97 | 0) >>> 0 < 26)) break;
       i2 = i2 + 1 | 0;
      }
      if ((i3 | 0) == 41) {
       d1 = nan;
       break L4;
      }
      i3 = (HEAP32[i10 >> 2] | 0) == 0;
      if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
      if (!i6) {
       i12 = ___errno_location() | 0;
       HEAP32[i12 >> 2] = 22;
       ___shlim(i11, 0);
       d1 = 0.0;
       break L4;
      }
      if (!i2) {
       d1 = nan;
       break L4;
      }
      while (1) {
       i2 = i2 + -1 | 0;
       if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
       if (!i2) {
        d1 = nan;
        break L4;
       }
      }
     }
    case 0:
     {
      if ((i3 | 0) == 48) {
       i2 = HEAP32[i12 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i11) | 0;
       if ((i2 | 32 | 0) == 120) {
        d1 = +_hexfloat(i11, i8, i7, i4, i9);
        break L4;
       }
       if (!(HEAP32[i10 >> 2] | 0)) i2 = 48; else {
        HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
        i2 = 48;
       }
      } else i2 = i3;
      d1 = +_decfloat(i11, i2, i8, i7, i4, i9);
      break L4;
     }
    default:
     {
      if (HEAP32[i10 >> 2] | 0) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
      i12 = ___errno_location() | 0;
      HEAP32[i12 >> 2] = 22;
      ___shlim(i11, 0);
      d1 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((i5 | 0) == 23) {
   i3 = (HEAP32[i10 >> 2] | 0) == 0;
   if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
   if ((i9 | 0) != 0 & i2 >>> 0 > 3) do {
    if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
    i2 = i2 + -1 | 0;
   } while (i2 >>> 0 > 3);
  }
  d1 = +Math_fround(Math_fround(i4 | 0) * Math_fround(inf));
 } while (0);
 return +d1;
}

function _reportProcessingInstruction(i15, i10, i2, i9) {
 i15 = i15 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i16 + 4 | 0;
 i8 = i16;
 i6 = i15 + 64 | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i7 = i15 + 80 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  if (!i1) {
   i15 = 1;
   STACKTOP = i16;
   return i15 | 0;
  }
  HEAP32[i11 >> 2] = i2;
  if (!(HEAP8[i10 + 72 >> 0] | 0)) {
   if ((HEAP32[i15 + 144 >> 2] | 0) == (i10 | 0)) {
    i2 = i15 + 292 | 0;
    i3 = i15 + 288 | 0;
   } else {
    i3 = HEAP32[i15 + 300 >> 2] | 0;
    i2 = i3 + 4 | 0;
   }
   i4 = i15 + 44 | 0;
   i5 = i10 + 60 | 0;
   i6 = i15 + 48 | 0;
   i1 = i15 + 4 | 0;
   do {
    HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
    FUNCTION_TABLE_viiiii[HEAP32[i5 >> 2] & 31](i10, i11, i9, i8, HEAP32[i6 >> 2] | 0);
    HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
    i15 = HEAP32[i4 >> 2] | 0;
    FUNCTION_TABLE_viii[HEAP32[i7 >> 2] & 31](HEAP32[i1 >> 2] | 0, i15, (HEAP32[i8 >> 2] | 0) - i15 | 0);
    HEAP32[i3 >> 2] = HEAP32[i11 >> 2];
   } while ((HEAP32[i11 >> 2] | 0) != (i9 | 0));
  } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i15 + 4 >> 2] | 0, i2, i9 - i2 | 0);
  i15 = 1;
  STACKTOP = i16;
  return i15 | 0;
 }
 i3 = i10 + 68 | 0;
 i12 = i2 + (HEAP32[i3 >> 2] << 1) | 0;
 i2 = i12 + (FUNCTION_TABLE_iii[HEAP32[i10 + 32 >> 2] & 255](i10, i12) | 0) | 0;
 i8 = i15 + 416 | 0;
 HEAP32[i11 >> 2] = i12;
 i12 = i15 + 428 | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  if ((_poolGrow(i8) | 0) << 24 >> 24) i7 = 13;
 } else i7 = 13;
 L20 : do if ((i7 | 0) == 13) {
  i4 = i10 + 60 | 0;
  i13 = i15 + 424 | 0;
  while (1) {
   FUNCTION_TABLE_viiiii[HEAP32[i4 >> 2] & 31](i10, i11, i2, i12, HEAP32[i13 >> 2] | 0);
   if ((HEAP32[i11 >> 2] | 0) == (i2 | 0)) break;
   if (!((_poolGrow(i8) | 0) << 24 >> 24)) break L20;
  }
  i14 = i15 + 432 | 0;
  if (!(HEAP32[i14 >> 2] | 0)) {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  i1 = HEAP32[i12 >> 2] | 0;
  do if ((i1 | 0) == (HEAP32[i13 >> 2] | 0)) if (!((_poolGrow(i8) | 0) << 24 >> 24)) {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  } else {
   i1 = HEAP32[i12 >> 2] | 0;
   break;
  } while (0);
  HEAP32[i12 >> 2] = i1 + 1;
  HEAP8[i1 >> 0] = 0;
  i5 = HEAP32[i14 >> 2] | 0;
  if (!i5) {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  HEAP32[i14 >> 2] = HEAP32[i12 >> 2];
  i2 = FUNCTION_TABLE_iii[HEAP32[i10 + 36 >> 2] & 255](i10, i2) | 0;
  i1 = i9 + (0 - (HEAP32[i3 >> 2] << 1)) | 0;
  HEAP32[i11 >> 2] = i2;
  if (!(HEAP32[i12 >> 2] | 0)) {
   if ((_poolGrow(i8) | 0) << 24 >> 24) i7 = 24;
  } else i7 = 24;
  L40 : do if ((i7 | 0) == 24) {
   while (1) {
    i7 = 0;
    FUNCTION_TABLE_viiiii[HEAP32[i4 >> 2] & 31](i10, i11, i1, i12, HEAP32[i13 >> 2] | 0);
    if ((HEAP32[i11 >> 2] | 0) == (i1 | 0)) break;
    if (!((_poolGrow(i8) | 0) << 24 >> 24)) break L40; else i7 = 24;
   }
   if (!(HEAP32[i14 >> 2] | 0)) {
    i15 = 0;
    STACKTOP = i16;
    return i15 | 0;
   }
   i1 = HEAP32[i12 >> 2] | 0;
   do if ((i1 | 0) == (HEAP32[i13 >> 2] | 0)) if (!((_poolGrow(i8) | 0) << 24 >> 24)) {
    i15 = 0;
    STACKTOP = i16;
    return i15 | 0;
   } else {
    i1 = HEAP32[i12 >> 2] | 0;
    break;
   } while (0);
   HEAP32[i12 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = 0;
   i4 = HEAP32[i14 >> 2] | 0;
   if (!i4) {
    i15 = 0;
    STACKTOP = i16;
    return i15 | 0;
   } else i1 = i4;
   L56 : while (1) {
    switch (HEAP8[i1 >> 0] | 0) {
    case 0:
     break L56;
    case 13:
     {
      i3 = i1;
      i2 = 13;
      i7 = 34;
      break L56;
     }
    default:
     {}
    }
    i1 = i1 + 1 | 0;
   }
   if ((i7 | 0) == 34) {
    while (1) {
     i7 = 0;
     if (i2 << 24 >> 24 == 13) {
      HEAP8[i3 >> 0] = 10;
      i11 = i1 + 1 | 0;
      i1 = (HEAP8[i11 >> 0] | 0) == 10 ? i1 + 2 | 0 : i11;
     } else {
      HEAP8[i3 >> 0] = i2;
      i1 = i1 + 1 | 0;
     }
     i3 = i3 + 1 | 0;
     i2 = HEAP8[i1 >> 0] | 0;
     if (!(i2 << 24 >> 24)) break; else i7 = 34;
    }
    HEAP8[i3 >> 0] = 0;
   }
   FUNCTION_TABLE_viii[HEAP32[i6 >> 2] & 31](HEAP32[i15 + 4 >> 2] | 0, i5, i4);
   i4 = i15 + 420 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   if (!i2) i7 = 42; else if (i1 | 0) while (1) {
    i3 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = i2;
    if (!i3) {
     i7 = 42;
     break;
    } else {
     i2 = i1;
     i1 = i3;
    }
   }
   if ((i7 | 0) == 42) HEAP32[i4 >> 2] = i1;
   HEAP32[i8 >> 2] = 0;
   HEAP32[i14 >> 2] = 0;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i13 >> 2] = 0;
   i15 = 1;
   STACKTOP = i16;
   return i15 | 0;
  } while (0);
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 } while (0);
 i15 = 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _FcConfigParseAndLoad(i16, i14, i18) {
 i16 = i16 | 0;
 i14 = i14 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i17 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 2928 | 0;
 i13 = i19 + 2920 | 0;
 i12 = i19 + 2912 | 0;
 i10 = i19 + 2904 | 0;
 i9 = i19 + 2896 | 0;
 i7 = i19 + 2888 | 0;
 i4 = i19 + 2880 | 0;
 i5 = i19 + 2872 | 0;
 i8 = i19 + 2864 | 0;
 i6 = i19 + 2856 | 0;
 i2 = i19 + 2848 | 0;
 i11 = i19;
 i1 = _FcConfigGetSysRoot(i16) | 0;
 i3 = _FcConfigFilename(i14) | 0;
 do if (!i3) i1 = 1; else {
  if (!i1) i17 = ___strdup(i3) | 0; else {
   HEAP32[i2 >> 2] = i3;
   HEAP32[i2 + 4 >> 2] = 0;
   i17 = _FcStrBuildFilename(i1, i2) | 0;
  }
  _FcStrFree(i3);
  i1 = i16 + 16 | 0;
  if (_FcStrSetMember(HEAP32[i1 >> 2] | 0, i17) | 0) {
   _FcStrFree(i17);
   i18 = 1;
   STACKTOP = i19;
   return i18 | 0;
  }
  if (!(_FcStrSetAdd(HEAP32[i1 >> 2] | 0, i17) | 0)) {
   _FcStrFree(i17);
   i1 = 1;
   break;
  }
  if (!(_FcFileIsDir(i17) | 0)) {
   if (HEAP32[91917] & 1024 | 0) {
    HEAP32[i5 >> 2] = i17;
    _printf(352493, i5) | 0;
   }
   i5 = _FcOpen(i17, 0, i4) | 0;
   if ((i5 | 0) == -1) {
    _FcStrFree(i17);
    i1 = 1;
    break;
   }
   i4 = _XML_ParserCreate(357238) | 0;
   _FcStrFree(i17);
   if (!i4) i1 = 1; else {
    HEAP32[i11 >> 2] = 0;
    HEAP32[i11 + 24 >> 2] = 0;
    HEAP32[i11 + 4 >> 2] = 0;
    HEAP32[i11 + 1308 >> 2] = 0;
    i3 = i11 + 8 | 0;
    HEAP32[i3 >> 2] = 0;
    HEAP32[i11 + 12 >> 2] = i14;
    HEAP32[i11 + 16 >> 2] = i16;
    HEAP32[i11 + 20 >> 2] = i4;
    _XML_SetUserData(i4, i11);
    _XML_SetDoctypeDeclHandler(i4, 25, 71);
    _XML_SetElementHandler(i4, 18, 36);
    _XML_SetCharacterDataHandler(i4, 19);
    while (1) {
     i1 = _XML_GetBuffer(i4, 1024) | 0;
     if (!i1) {
      i15 = 37;
      break;
     }
     i1 = _read(i5, i1, 1024) | 0;
     if ((i1 | 0) < 0) {
      i15 = 39;
      break;
     }
     i2 = (i1 | 0) == 0;
     if (!(_XML_ParseBuffer(i4, i1, i2 & 1) | 0)) {
      i15 = 41;
      break;
     }
     if (i2) {
      i15 = 43;
      break;
     }
    }
    if ((i15 | 0) == 37) {
     _FcConfigMessage(i11, 2, 352518, i7);
     i1 = 1;
    } else if ((i15 | 0) == 39) {
     _FcConfigMessage(i11, 2, 352542, i9);
     i1 = 1;
    } else if ((i15 | 0) == 41) {
     i1 = _XML_ErrorString(_XML_GetErrorCode(i4) | 0) | 0;
     HEAP32[i10 >> 2] = i1;
     _FcConfigMessage(i11, 2, 352569, i10);
     i1 = 1;
    } else if ((i15 | 0) == 43) i1 = HEAP32[i3 >> 2] | 0;
    if (HEAP32[i11 >> 2] | 0) do _FcPStackPop(i11); while ((HEAP32[i11 >> 2] | 0) != 0);
    _XML_ParserFree(i4);
   }
   _close(i5) | 0;
   break;
  }
  i7 = _opendir(i17) | 0;
  if (!i7) if (!i18) i1 = 0; else {
   HEAP32[i6 >> 2] = i14;
   _FcConfigMessage(0, 2, 352434, i6);
   i1 = 0;
  } else {
   i6 = _malloc((_strlen(i17) | 0) + 4098 | 0) | 0;
   if (!i6) i1 = 0; else {
    _strcpy(i6, i17) | 0;
    i4 = i6 + (_strlen(i6) | 0) | 0;
    HEAP8[i4 >> 0] = 47;
    HEAP8[i4 + 1 >> 0] = 0;
    i4 = i6 + (_strlen(i6) | 0) | 0;
    i5 = _FcStrSetCreate() | 0;
    if (!i5) i1 = 0; else {
     if (HEAP32[91917] & 1024 | 0) {
      HEAP32[i8 >> 2] = i17;
      _printf(352462, i8) | 0;
     }
     i1 = _readdir(i7) | 0;
     L52 : do if (!i1) i15 = 23; else while (1) {
      i2 = i1 + 11 | 0;
      if (((HEAP8[i2 >> 0] | 0) + -48 & 255) < 10) {
       i3 = _strlen(i2) | 0;
       if ((i3 + -6 | 0) >>> 0 < 4090) if (!(_strcmp(i1 + 11 + i3 + -5 | 0, 352487) | 0)) {
        _strcpy(i4, i2) | 0;
        if (!(_FcStrSetAdd(i5, i6) | 0)) {
         i1 = 0;
         break L52;
        }
       }
      }
      i1 = _readdir(i7) | 0;
      if (!i1) {
       i15 = 23;
       break;
      }
     } while (0);
     L60 : do if ((i15 | 0) == 23) {
      i3 = i5 + 12 | 0;
      i4 = i5 + 4 | 0;
      _qsort(HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0, 4, 201);
      i2 = 0;
      i1 = 1;
      while (1) {
       if ((i2 | 0) >= (HEAP32[i4 >> 2] | 0)) break L60;
       i1 = _FcConfigParseAndLoad(i16, HEAP32[(HEAP32[i3 >> 2] | 0) + (i2 << 2) >> 2] | 0, i18) | 0;
       if (!i1) {
        i1 = 0;
        break;
       } else i2 = i2 + 1 | 0;
      }
     } while (0);
     _FcStrSetDestroy(i5);
    }
    _free(i6);
   }
   _closedir(i7) | 0;
  }
  _FcStrFree(i17);
  i18 = ((i18 | 0) == 0 | (i1 | 0) != 0) & 1;
  STACKTOP = i19;
  return i18 | 0;
 } while (0);
 if (!((i18 | 0) != 0 & (i1 | 0) != 0)) {
  i18 = 1;
  STACKTOP = i19;
  return i18 | 0;
 }
 if (!i14) {
  _FcConfigMessage(0, 2, 352601, i13);
  i18 = 0;
  STACKTOP = i19;
  return i18 | 0;
 } else {
  HEAP32[i12 >> 2] = i14;
  _FcConfigMessage(0, 2, 352572, i12);
  i18 = 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 return 0;
}

function _ass_strtod(i7, i15) {
 i7 = i7 | 0;
 i15 = i15 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = HEAP8[i7 >> 0] | 0;
 i4 = (i2 << 24 >> 24) + -9 | 0;
 L1 : do if (i4 >>> 0 < 24) {
  i3 = i7;
  do {
   if (!(8388639 >>> (i4 & 16777215) & 1)) break L1;
   i3 = i3 + 1 | 0;
   i2 = HEAP8[i3 >> 0] | 0;
   i4 = (i2 << 24 >> 24) + -9 | 0;
  } while (i4 >>> 0 < 24);
 } else i3 = i7; while (0);
 switch (i2 << 24 >> 24) {
 case 45:
  {
   i14 = 1;
   i2 = i3 + 1 | 0;
   break;
  }
 case 43:
  {
   i14 = 0;
   i2 = i3 + 1 | 0;
   break;
  }
 default:
  {
   i14 = 0;
   i2 = i3;
  }
 }
 i3 = -1;
 i4 = -1;
 i6 = 0;
 while (1) {
  i11 = HEAP8[i2 >> 0] | 0;
  if (((i11 << 24 >> 24) + -48 | 0) >>> 0 < 10) i3 = (i3 | 0) == -1 & i11 << 24 >> 24 != 48 ? i6 : i3; else if ((i4 | 0) != -1 | i11 << 24 >> 24 != 46) break; else i4 = i6;
  i6 = i6 + 1 | 0;
  i2 = i2 + 1 | 0;
 }
 i5 = (i3 | 0) == -1 ? i6 : i3;
 i12 = (i4 | 0) == -1;
 i3 = ((i12 ^ 1) << 31 >> 31) + i6 | 0;
 i12 = i12 ? i6 : i4;
 i4 = ((i4 >>> 0 < i5 >>> 0) << 31 >> 31) + i5 | 0;
 i3 = (i3 - i4 | 0) >>> 0 > 18 ? i4 + 18 | 0 : i3;
 i10 = i12 >>> 0 < i3 >>> 0;
 i13 = i10 & 1;
 i12 = i10 ? i3 - i12 | 0 : i12 - i3 | 0;
 do if (!i3) {
  i2 = i7;
  d1 = 0.0;
 } else {
  i6 = i2 + (i5 - i6) | 0;
  i3 = i3 - i4 | 0;
  if ((i3 | 0) > 9) {
   i8 = i3;
   i4 = 0;
   do {
    i5 = HEAP8[i6 >> 0] | 0;
    i7 = i6 + 1 | 0;
    if (i5 << 24 >> 24 == 46) {
     i5 = HEAP8[i7 >> 0] | 0;
     i6 = i6 + 2 | 0;
    } else {
     i5 = i5 << 24 >> 24;
     i6 = i7;
    }
    i4 = (i4 * 10 | 0) + -48 + i5 | 0;
    i8 = i8 + -1 | 0;
   } while ((i8 | 0) > 9);
   i7 = 9;
   i8 = 15;
  } else if ((i3 | 0) > 0) {
   i7 = i3;
   i4 = 0;
   i8 = 15;
  } else {
   i5 = 0;
   i4 = 0;
  }
  if ((i8 | 0) == 15) {
   i5 = 0;
   i10 = i7;
   while (1) {
    i7 = HEAP8[i6 >> 0] | 0;
    i8 = i6 + 1 | 0;
    if (i7 << 24 >> 24 == 46) {
     i7 = HEAP8[i8 >> 0] | 0;
     i6 = i6 + 2 | 0;
    } else {
     i7 = i7 << 24 >> 24;
     i6 = i8;
    }
    i5 = (i5 * 10 | 0) + -48 + i7 | 0;
    if ((i10 | 0) > 1) i10 = i10 + -1 | 0; else break;
   }
  }
  d9 = +(i4 | 0) * 1.0e9 + +(i5 | 0);
  L34 : do switch (i11 << 24 >> 24) {
  case 101:
  case 69:
   {
    i5 = i2 + 1 | 0;
    switch (HEAP8[i5 >> 0] | 0) {
    case 45:
     {
      i4 = 1;
      i2 = i2 + 2 | 0;
      break;
     }
    case 43:
     {
      i4 = 0;
      i2 = i2 + 2 | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i2 = i5;
     }
    }
    i11 = (i4 | 0) == (i13 | 0);
    if (i11) if (i12 >>> 0 > 511) i10 = 0; else i10 = ((511 - i12 | 0) >>> 0) / 10 | 0; else i10 = (((((i12 >>> 0) % 10 | 0) + 511 | 0) >>> 0) / 10 | 0) + ((i12 >>> 0) / 10 | 0) | 0;
    i8 = HEAP8[i2 >> 0] | 0;
    i7 = i8 + -48 | 0;
    L45 : do if (i7 >>> 0 < 10) {
     i5 = 0;
     i6 = 0;
     while (1) {
      if (i6 >>> 0 > i10 >>> 0 | (i5 | 0) != 0) break;
      i5 = i6 >>> 0 > (((47 - i8 | 0) >>> 0) / 10 | 0) >>> 0 & 1;
      i6 = i7 + (i6 * 10 | 0) | 0;
      i2 = i2 + 1 | 0;
      i8 = HEAP8[i2 >> 0] | 0;
      i7 = i8 + -48 | 0;
      if (i7 >>> 0 >= 10) break L45;
     }
     while (1) {
      i2 = i2 + 1 | 0;
      if (((HEAP8[i2 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
       i8 = 40;
       break L34;
      }
     }
    } else {
     i5 = 0;
     i6 = 0;
    } while (0);
    if (i11) {
     i5 = i6 + i12 | 0;
     i4 = i13;
     i8 = 39;
     break L34;
    }
    if (i12 >>> 0 <= i6 >>> 0 | (i5 | 0) != 0) {
     i5 = i6 - i12 | 0;
     i8 = 39;
     break L34;
    } else {
     i5 = i12 - i6 | 0;
     i4 = i13;
     i8 = 39;
     break L34;
    }
   }
  default:
   {
    i5 = i12;
    i4 = i13;
    i8 = 39;
   }
  } while (0);
  if ((i8 | 0) == 39) if (i5 >>> 0 > 511) i8 = 40; else i6 = i5;
  if ((i8 | 0) == 40) if (d9 != 0.0) {
   i6 = ___errno_location() | 0;
   HEAP32[i6 >> 2] = 34;
   i6 = 511;
  } else i6 = 511;
  if ((i4 | 0) != 0 & i6 >>> 0 > 308) {
   i6 = i6 - i3 | 0;
   if (!i3) d1 = 1.0; else {
    i4 = 1056;
    d1 = 1.0;
    while (1) {
     if (i3 & 1) d1 = d1 * +HEAPF64[i4 >> 3];
     i3 = i3 >>> 1;
     if (!i3) break; else i4 = i4 + 8 | 0;
    }
   }
   i5 = 1128;
   d9 = d9 / d1;
   i3 = i6;
   i4 = 0;
  } else {
   i5 = 1056;
   i3 = i6;
  }
  if (!i3) d1 = 1.0; else {
   d1 = 1.0;
   while (1) {
    if (i3 & 1) d1 = d1 * +HEAPF64[i5 >> 3];
    i3 = i3 >>> 1;
    if (!i3) break; else i5 = i5 + 8 | 0;
   }
  }
  if (!i4) {
   d1 = d9 * d1;
   break;
  } else {
   d1 = d9 / d1;
   break;
  }
 } while (0);
 if (!i15) {
  i15 = (i14 | 0) == 0;
  d9 = -d1;
  d9 = i15 ? d1 : d9;
  return +d9;
 }
 HEAP32[i15 >> 2] = i2;
 i15 = (i14 | 0) == 0;
 d9 = -d1;
 d9 = i15 ? d1 : d9;
 return +d9;
}

function _ass_font_get_glyph(i13, i5, i1, i6, i2, i11) {
 i13 = i13 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 var i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i16 + 8 | 0;
 i3 = i16;
 i14 = i16 + 32 | 0;
 i15 = i16 + 16 | 0;
 i12 = HEAP32[i13 + 64 + (i1 << 2) >> 2] | 0;
 i4 = HEAP32[i13 + 12 >> 2] | 0;
 switch (i2 | 0) {
 case 0:
  {
   i1 = 2570;
   break;
  }
 case 1:
  {
   i1 = 68136;
   break;
  }
 case 2:
  {
   i1 = 2600;
   break;
  }
 default:
  i1 = 2568;
 }
 if (_FT_Load_Glyph(i12, i6, i1) | 0) {
  i15 = HEAP32[i13 + 16 >> 2] | 0;
  HEAP32[i3 >> 2] = i6;
  _ass_msg(i15, 2, 358415, i3);
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i2 = i12 + 12 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(i1 & 1)) if ((HEAP32[i13 + 8 >> 2] | 0) >>> 0 > 55) {
  _FT_GlyphSlot_Oblique(HEAP32[i12 + 84 >> 2] | 0);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 if (!(i1 & 2)) if ((HEAP32[i13 + 4 >> 2] | 0) >>> 0 > 400) {
  i1 = HEAP32[i12 + 84 >> 2] | 0;
  if ((HEAP32[i1 + 72 >> 2] | 0) == 1869968492) {
   i10 = HEAP32[i1 + 4 >> 2] | 0;
   _FT_Outline_Embolden(i1 + 108 | 0, (_FT_MulFix(HEAPU16[i10 + 68 >> 1] | 0, HEAP32[(HEAP32[i10 + 88 >> 2] | 0) + 20 >> 2] | 0) | 0) / 64 | 0) | 0;
  }
 }
 i2 = i12 + 84 | 0;
 if (_FT_Get_Glyph(HEAP32[i2 >> 2] | 0, i14) | 0) {
  i15 = HEAP32[i13 + 16 >> 2] | 0;
  HEAP32[i7 >> 2] = i6;
  _ass_msg(i15, 2, 358415, i7);
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (i5 >>> 0 > 752 & (i4 | 0) != 0) {
  HEAP32[i15 >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = -65536;
  HEAP32[i15 + 8 >> 2] = 65536;
  HEAP32[i15 + 12 >> 2] = 0;
  i1 = _FT_Get_Sfnt_Table(i12, 2) | 0;
  if (!i1) i1 = 0; else i1 = _FT_MulFix(HEAP16[i1 + 72 >> 1] | 0, HEAP32[(HEAP32[i12 + 88 >> 2] | 0) + 20 >> 2] | 0) | 0;
  _FT_Outline_Translate((HEAP32[i14 >> 2] | 0) + 20 | 0, 0, 0 - i1 | 0);
  _FT_Outline_Transform((HEAP32[i14 >> 2] | 0) + 20 | 0, i15);
  _FT_Outline_Translate((HEAP32[i14 >> 2] | 0) + 20 | 0, HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] | 0, i1);
  i5 = HEAP32[i14 >> 2] | 0;
  HEAP32[i5 + 12 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 60 >> 2];
 } else i5 = HEAP32[i14 >> 2] | 0;
 i3 = i11 & 1;
 i4 = i11 & 2;
 i9 = _FT_Get_Sfnt_Table(i12, 2) | 0;
 i7 = _FT_Get_Sfnt_Table(i12, 5) | 0;
 i10 = i5 + 20 | 0;
 i6 = (i3 | 0) != 0;
 i8 = (i4 | 0) != 0;
 do if (i11 & 3 | 0) {
  i1 = (i4 << 1) + (i3 << 2) | 0;
  i2 = i10 + 2 | 0;
  if ((HEAP16[i2 >> 1] | 0) <= (i1 ^ 32767 | 0)) {
   i11 = ___errno_location() | 0;
   HEAP32[i11 >> 2] = 0;
   i11 = i5 + 24 | 0;
   i17 = _ass_try_realloc_array(HEAP32[i11 >> 2] | 0, (HEAP16[i2 >> 1] | 0) + i1 | 0, 8) | 0;
   HEAP32[i11 >> 2] = i17;
   i11 = ___errno_location() | 0;
   if (!(HEAP32[i11 >> 2] | 0)) {
    i17 = ___errno_location() | 0;
    HEAP32[i17 >> 2] = 0;
    i17 = i5 + 28 | 0;
    i11 = _ass_try_realloc_array(HEAP32[i17 >> 2] | 0, (HEAP16[i2 >> 1] | 0) + i1 | 0, 1) | 0;
    HEAP32[i17 >> 2] = i11;
    i17 = ___errno_location() | 0;
    if (!(HEAP32[i17 >> 2] | 0)) {
     i1 = (i4 >>> 1) + i3 | 0;
     if ((HEAP16[i10 >> 1] | 0) <= (i1 ^ 32767 | 0)) {
      i17 = ___errno_location() | 0;
      HEAP32[i17 >> 2] = 0;
      i17 = i5 + 32 | 0;
      i11 = _ass_try_realloc_array(HEAP32[i17 >> 2] | 0, (HEAP16[i10 >> 1] | 0) + i1 | 0, 2) | 0;
      HEAP32[i17 >> 2] = i11;
      i17 = ___errno_location() | 0;
      if (!(HEAP32[i17 >> 2] | 0)) {
       i5 = (HEAP32[i5 + 12 >> 2] | 0) + 512 >> 10;
       i3 = HEAP32[(HEAP32[i12 + 88 >> 2] | 0) + 20 >> 2] | 0;
       i4 = _FT_Outline_Get_Orientation(i10) | 0;
       if (i6 & (i7 | 0) != 0) {
        i2 = _FT_MulFix(HEAP16[i7 + 8 >> 1] | 0, i3) | 0;
        i1 = _FT_MulFix(HEAP16[i7 + 10 >> 1] | 0, (i3 | 0) / 2 | 0) | 0;
        if ((i2 | 0) > 0 | (i1 | 0) < 1) break;
        _add_line(i10, i5, i4, i2, i1);
       }
       if (i8 & (i9 | 0) != 0) {
        i2 = _FT_MulFix(HEAP16[i9 + 28 >> 1] | 0, i3) | 0;
        i1 = _FT_MulFix(HEAP16[i9 + 26 >> 1] | 0, (i3 | 0) / 2 | 0) | 0;
        if (!((i2 | 0) < 0 | (i1 | 0) < 1)) _add_line(i10, i5, i4, i2, i1);
       }
      }
     }
    }
   }
  }
 } while (0);
 i12 = i13 + 112 | 0;
 HEAP32[i15 >> 2] = ~~(+HEAPF64[i12 >> 3] * 65536.0);
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 HEAP32[i15 + 12 >> 2] = ~~(+HEAPF64[i13 + 120 >> 3] * 65536.0);
 i17 = (HEAP32[i14 >> 2] | 0) + 20 | 0;
 _FT_Outline_Transform(i17, i15);
 _FT_Outline_Translate(i17, HEAP32[i13 + 128 >> 2] | 0, HEAP32[i13 + 132 >> 2] | 0);
 i17 = HEAP32[i14 >> 2] | 0;
 i15 = i17 + 12 | 0;
 HEAP32[i15 >> 2] = ~~(+HEAPF64[i12 >> 3] * +(HEAP32[i15 >> 2] | 0));
 STACKTOP = i16;
 return i17 | 0;
}

function _cff_index_get_pointers(i14, i15, i16) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i19 + 4 | 0;
 i17 = i19;
 HEAP32[i17 >> 2] = 0;
 i10 = HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] | 0;
 HEAP32[i15 >> 2] = 0;
 i18 = i14 + 24 | 0;
 L1 : do if (!(HEAP32[i18 >> 2] | 0)) {
  HEAP32[i9 >> 2] = 0;
  i6 = HEAP32[i14 >> 2] | 0;
  i7 = HEAP32[i6 + 28 >> 2] | 0;
  i8 = i14 + 8 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  do if (i1 | 0) {
   i4 = HEAP8[i14 + 12 >> 0] | 0;
   i13 = i1 + 1 | 0;
   i3 = Math_imul(i4 & 255, i13) | 0;
   i13 = _ft_mem_realloc(i7, 4, 0, i13, 0, i9) | 0;
   HEAP32[i18 >> 2] = i13;
   if (!(HEAP32[i9 >> 2] | 0)) {
    i13 = _FT_Stream_Seek(i6, (HEAP32[i14 + 4 >> 2] | 0) + 3 | 0) | 0;
    HEAP32[i9 >> 2] = i13;
    if (!i13) {
     i13 = _FT_Stream_EnterFrame(i6, i3) | 0;
     HEAP32[i9 >> 2] = i13;
     if (!i13) {
      i2 = HEAP32[i18 >> 2] | 0;
      i1 = HEAP32[i6 + 32 >> 2] | 0;
      i5 = i1 + i3 | 0;
      switch (i4 << 24 >> 24) {
      case 1:
       {
        if ((i3 | 0) > 0) while (1) {
         HEAP32[i2 >> 2] = HEAPU8[i1 >> 0];
         i1 = i1 + 1 | 0;
         if (i1 >>> 0 >= i5 >>> 0) break; else i2 = i2 + 4 | 0;
        }
        break;
       }
      case 2:
       {
        if ((i3 | 0) > 0) while (1) {
         HEAP32[i2 >> 2] = (HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0);
         i1 = i1 + 2 | 0;
         if (i1 >>> 0 >= i5 >>> 0) break; else i2 = i2 + 4 | 0;
        }
        break;
       }
      case 3:
       {
        if ((i3 | 0) > 0) while (1) {
         HEAP32[i2 >> 2] = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) << 16 | (HEAPU8[i1 + 2 >> 0] | 0);
         i1 = i1 + 3 | 0;
         if (i1 >>> 0 >= i5 >>> 0) break; else i2 = i2 + 4 | 0;
        }
        break;
       }
      default:
       if ((i3 | 0) > 0) while (1) {
        HEAP32[i2 >> 2] = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
        i1 = i1 + 4 | 0;
        if (i1 >>> 0 >= i5 >>> 0) break; else i2 = i2 + 4 | 0;
       }
      }
      _FT_Stream_ExitFrame(i6);
      if (!(HEAP32[i9 >> 2] | 0)) break;
     }
    }
   }
   _ft_mem_free(i7, HEAP32[i18 >> 2] | 0);
   HEAP32[i18 >> 2] = 0;
   i13 = HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i13;
   if (!i13) {
    i9 = i8;
    break L1;
   }
   i18 = HEAP32[i17 >> 2] | 0;
   STACKTOP = i19;
   return i18 | 0;
  } while (0);
  HEAP32[i17 >> 2] = 0;
  i9 = i8;
 } else i9 = i14 + 8 | 0; while (0);
 i1 = HEAP32[i9 >> 2] | 0;
 if (!i1) {
  i18 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 i12 = _ft_mem_realloc(i10, 4, 0, i1 + 1 | 0, 0, i17) | 0;
 if (HEAP32[i17 >> 2] | 0) {
  i18 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 i13 = (i16 | 0) != 0;
 if (i13) {
  i1 = _ft_mem_alloc(i10, (HEAP32[i9 >> 2] | 0) + (HEAP32[i14 + 20 >> 2] | 0) | 0, i17) | 0;
  if (HEAP32[i17 >> 2] | 0) {
   i18 = HEAP32[i17 >> 2] | 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 } else i1 = 0;
 i11 = HEAP32[i14 + 28 >> 2] | 0;
 HEAP32[i12 >> 2] = i13 ? i1 : i11;
 i5 = HEAP32[i9 >> 2] | 0;
 L38 : do if (i5 | 0) {
  i10 = i14 + 20 | 0;
  if (i13) {
   i2 = 0;
   i7 = 0;
   i8 = 1;
   i4 = i5;
  } else {
   i2 = 0;
   i4 = 1;
   while (1) {
    i3 = (HEAP32[(HEAP32[i18 >> 2] | 0) + (i4 << 2) >> 2] | 0) + -1 | 0;
    if (i3 >>> 0 >= i2 >>> 0) {
     i2 = HEAP32[i10 >> 2] | 0;
     i2 = i3 >>> 0 > i2 >>> 0 ? i2 : i3;
    }
    HEAP32[i12 + (i4 << 2) >> 2] = i11 + i2;
    i4 = i4 + 1 | 0;
    if (i4 >>> 0 > i5 >>> 0) break L38;
   }
  }
  while (1) {
   i3 = (HEAP32[(HEAP32[i18 >> 2] | 0) + (i8 << 2) >> 2] | 0) + -1 | 0;
   if (i3 >>> 0 < i7 >>> 0) {
    HEAP32[i12 + (i8 << 2) >> 2] = i1 + i7 + i2;
    i3 = i7;
   } else {
    i5 = HEAP32[i10 >> 2] | 0;
    i3 = i3 >>> 0 > i5 >>> 0 ? i5 : i3;
    i5 = i1 + i3 + i2 | 0;
    i6 = i12 + (i8 << 2) | 0;
    HEAP32[i6 >> 2] = i5;
    if ((i3 | 0) != (i7 | 0)) {
     i4 = HEAP32[i12 + (i8 + -1 << 2) >> 2] | 0;
     _memcpy(i4 | 0, i11 + i7 | 0, i5 - i4 | 0) | 0;
     HEAP8[HEAP32[i6 >> 2] >> 0] = 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
     i2 = i2 + 1 | 0;
     i4 = HEAP32[i9 >> 2] | 0;
    }
   }
   i8 = i8 + 1 | 0;
   if (i8 >>> 0 > i4 >>> 0) break; else i7 = i3;
  }
 } while (0);
 HEAP32[i15 >> 2] = i12;
 if (!i13) {
  i18 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 HEAP32[i16 >> 2] = i1;
 i18 = HEAP32[i17 >> 2] | 0;
 STACKTOP = i19;
 return i18 | 0;
}

function _lookup(i2, i21, i22, i23) {
 i2 = i2 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i20 = i21 + 8 | 0;
 i12 = HEAP32[i20 >> 2] | 0;
 do if (!i12) {
  if (!i23) {
   i23 = 0;
   return i23 | 0;
  }
  HEAP8[i21 + 4 >> 0] = 6;
  HEAP32[i20 >> 2] = 64;
  i4 = i21 + 16 | 0;
  i1 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i4 >> 2] >> 2] & 63](256) | 0;
  HEAP32[i21 >> 2] = i1;
  if (!i1) {
   HEAP32[i20 >> 2] = 0;
   i23 = 0;
   return i23 | 0;
  }
  _memset(i1 | 0, 0, 256) | 0;
  i1 = HEAP32[i2 + 496 >> 2] | 0;
  i2 = HEAP8[i22 >> 0] | 0;
  if (i2 << 24 >> 24) {
   i3 = i22;
   do {
    i3 = i3 + 1 | 0;
    i1 = i1 * 1000003 ^ i2 & 255;
    i2 = HEAP8[i3 >> 0] | 0;
   } while (i2 << 24 >> 24 != 0);
  }
  i3 = (HEAP32[i20 >> 2] | 0) + -1 & i1;
  i1 = i4;
  i2 = i21;
 } else {
  i19 = i2 + 496 | 0;
  i1 = HEAP32[i19 >> 2] | 0;
  i11 = HEAP8[i22 >> 0] | 0;
  if (!(i11 << 24 >> 24)) i18 = i1; else {
   i2 = i22;
   i3 = i11;
   do {
    i2 = i2 + 1 | 0;
    i1 = i1 * 1000003 ^ i3 & 255;
    i3 = HEAP8[i2 >> 0] | 0;
   } while (i3 << 24 >> 24 != 0);
   i18 = i1;
  }
  i2 = i12 + -1 | 0;
  i4 = i2 & i18;
  i8 = HEAP32[i21 >> 2] | 0;
  i1 = HEAP32[i8 + (i4 << 2) >> 2] | 0;
  L19 : do if (!i1) i1 = i4; else {
   i9 = i18 & 0 - i12;
   i10 = i21 + 4 | 0;
   i7 = i2 >>> 2;
   i3 = 0;
   i2 = i4;
   L21 : while (1) {
    i4 = HEAP32[i1 >> 2] | 0;
    if (i11 << 24 >> 24 == (HEAP8[i4 >> 0] | 0)) {
     i6 = i22;
     i5 = i11;
     do {
      if (!(i5 << 24 >> 24)) break L21;
      i6 = i6 + 1 | 0;
      i4 = i4 + 1 | 0;
      i5 = HEAP8[i6 >> 0] | 0;
     } while (i5 << 24 >> 24 == (HEAP8[i4 >> 0] | 0));
    }
    if (!(i3 << 24 >> 24)) i3 = (i9 >>> ((HEAPU8[i10 >> 0] | 0) + -1 | 0) & i7 | 1) & 255;
    i1 = i3 & 255;
    i2 = i2 - i1 + (i2 >>> 0 < i1 >>> 0 ? i12 : 0) | 0;
    i1 = HEAP32[i8 + (i2 << 2) >> 2] | 0;
    if (!i1) {
     i1 = i2;
     break L19;
    }
   }
   return i1 | 0;
  } while (0);
  if (!i23) {
   i23 = 0;
   return i23 | 0;
  }
  i15 = i21 + 4 | 0;
  i2 = HEAPU8[i15 >> 0] | 0;
  if (!((HEAP32[i21 + 12 >> 2] | 0) >>> (i2 + -1 | 0))) {
   i3 = i1;
   i1 = i21 + 16 | 0;
   i2 = i21;
   break;
  }
  i13 = i2 + 1 | 0;
  i12 = i13 & 255;
  i13 = i13 & 255;
  i16 = 1 << i13;
  i14 = i16 + -1 | 0;
  i2 = i16 << 2;
  i1 = i21 + 16 | 0;
  i17 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i1 >> 2] >> 2] & 63](i2) | 0;
  if (!i17) {
   i23 = 0;
   return i23 | 0;
  }
  _memset(i17 | 0, 0, i2 | 0) | 0;
  i8 = HEAP32[i20 >> 2] | 0;
  if (i8 | 0) {
   i9 = 0 - i16 | 0;
   i10 = i13 + -1 | 0;
   i11 = i14 >>> 2;
   i6 = 0;
   do {
    i2 = HEAP32[(HEAP32[i21 >> 2] | 0) + (i6 << 2) >> 2] | 0;
    i7 = i2;
    if (i2 | 0) {
     i2 = HEAP32[i2 >> 2] | 0;
     i3 = HEAP32[i19 >> 2] | 0;
     i4 = HEAP8[i2 >> 0] | 0;
     if (i4 << 24 >> 24) do {
      i2 = i2 + 1 | 0;
      i3 = i3 * 1000003 ^ i4 & 255;
      i4 = HEAP8[i2 >> 0] | 0;
     } while (i4 << 24 >> 24 != 0);
     i4 = i3 & i14;
     i2 = i17 + (i4 << 2) | 0;
     if (HEAP32[i2 >> 2] | 0) {
      i5 = ((i3 & i9) >>> i10 & i11 | 1) & 255;
      i3 = i4;
      i4 = 0;
      do {
       i4 = i4 << 24 >> 24 == 0 ? i5 : i4;
       i2 = i4 & 255;
       i3 = i3 + (i3 >>> 0 < i2 >>> 0 ? i16 : 0) - i2 | 0;
       i2 = i17 + (i3 << 2) | 0;
      } while ((HEAP32[i2 >> 2] | 0) != 0);
     }
     HEAP32[i2 >> 2] = i7;
    }
    i6 = i6 + 1 | 0;
   } while (i6 >>> 0 < i8 >>> 0);
  }
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](HEAP32[i21 >> 2] | 0);
  HEAP32[i21 >> 2] = i17;
  HEAP8[i15 >> 0] = i12;
  HEAP32[i20 >> 2] = i16;
  i2 = i14 & i18;
  if (!(HEAP32[i17 + (i2 << 2) >> 2] | 0)) {
   i3 = i2;
   i2 = i21;
  } else {
   i4 = ((i18 & 0 - i16) >>> (i13 + -1 | 0) & i14 >>> 2 | 1) & 255;
   i3 = 0;
   do {
    i3 = i3 << 24 >> 24 == 0 ? i4 : i3;
    i20 = i3 & 255;
    i2 = i2 + (i2 >>> 0 < i20 >>> 0 ? i16 : 0) - i20 | 0;
   } while ((HEAP32[i17 + (i2 << 2) >> 2] | 0) != 0);
   i3 = i2;
   i2 = i21;
  }
 } while (0);
 i1 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i1 >> 2] >> 2] & 63](i23) | 0;
 HEAP32[(HEAP32[i2 >> 2] | 0) + (i3 << 2) >> 2] = i1;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + (i3 << 2) >> 2] | 0;
 if (!i1) {
  i23 = 0;
  return i23 | 0;
 }
 _memset(i1 | 0, 0, i23 | 0) | 0;
 i23 = (HEAP32[i2 >> 2] | 0) + (i3 << 2) | 0;
 HEAP32[HEAP32[i23 >> 2] >> 2] = i22;
 i22 = i21 + 12 | 0;
 HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
 i23 = HEAP32[i23 >> 2] | 0;
 return i23 | 0;
}

function _getEncodingIndex(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 if (!i14) {
  i14 = 6;
  return i14 | 0;
 } else {
  i1 = 349698;
  i2 = i14;
 }
 L3 : while (1) {
  i15 = HEAP8[i2 >> 0] | 0;
  i16 = HEAP8[i1 >> 0] | 0;
  i15 = (i15 + -97 & 255) < 26 ? (i15 & 255) + 224 & 255 : i15;
  switch ((i15 << 24 >> 24 == ((i16 + -97 & 255) < 26 ? (i16 & 255) + 224 & 255 : i16) << 24 >> 24 ? (i15 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
  case 0:
   {
    i1 = i1 + 1 | 0;
    i2 = i2 + 1 | 0;
    break;
   }
  case 1:
   {
    i3 = 345249;
    i8 = i14;
    i1 = 5;
    break L3;
   }
  case 2:
   {
    i13 = 0;
    i1 = 4;
    break L3;
   }
  default:
   {
    i1 = 3;
    break L3;
   }
  }
 }
 if ((i1 | 0) != 3) if ((i1 | 0) == 4) return i13 | 0; else if ((i1 | 0) == 5) {
  L6 : while (1) {
   i16 = HEAP8[i8 >> 0] | 0;
   i15 = HEAP8[i3 >> 0] | 0;
   i16 = (i16 + -97 & 255) < 26 ? (i16 & 255) + 224 & 255 : i16;
   switch ((i16 << 24 >> 24 == ((i15 + -97 & 255) < 26 ? (i15 & 255) + 224 & 255 : i15) << 24 >> 24 ? (i16 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
   case 0:
    {
     i3 = i3 + 1 | 0;
     i8 = i8 + 1 | 0;
     break;
    }
   case 1:
    {
     i4 = 357238;
     i9 = i14;
     i1 = 6;
     break L6;
    }
   case 2:
    {
     i13 = 1;
     i1 = 4;
     break L6;
    }
   default:
    {
     i1 = 3;
     break L6;
    }
   }
  }
  if ((i1 | 0) != 3) if ((i1 | 0) == 4) return i13 | 0; else if ((i1 | 0) == 6) {
   L9 : while (1) {
    i16 = HEAP8[i9 >> 0] | 0;
    i15 = HEAP8[i4 >> 0] | 0;
    i16 = (i16 + -97 & 255) < 26 ? (i16 & 255) + 224 & 255 : i16;
    switch ((i16 << 24 >> 24 == ((i15 + -97 & 255) < 26 ? (i15 & 255) + 224 & 255 : i15) << 24 >> 24 ? (i16 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
    case 0:
     {
      i4 = i4 + 1 | 0;
      i9 = i9 + 1 | 0;
      break;
     }
    case 1:
     {
      i5 = 345258;
      i10 = i14;
      i1 = 7;
      break L9;
     }
    case 2:
     {
      i13 = 2;
      i1 = 4;
      break L9;
     }
    default:
     {
      i1 = 3;
      break L9;
     }
    }
   }
   if ((i1 | 0) != 3) if ((i1 | 0) == 4) return i13 | 0; else if ((i1 | 0) == 7) {
    L12 : while (1) {
     i16 = HEAP8[i10 >> 0] | 0;
     i15 = HEAP8[i5 >> 0] | 0;
     i16 = (i16 + -97 & 255) < 26 ? (i16 & 255) + 224 & 255 : i16;
     switch ((i16 << 24 >> 24 == ((i15 + -97 & 255) < 26 ? (i15 & 255) + 224 & 255 : i15) << 24 >> 24 ? (i16 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
     case 0:
      {
       i5 = i5 + 1 | 0;
       i10 = i10 + 1 | 0;
       break;
      }
     case 1:
      {
       i6 = 349683;
       i11 = i14;
       i1 = 8;
       break L12;
      }
     case 2:
      {
       i13 = 3;
       i1 = 4;
       break L12;
      }
     default:
      {
       i1 = 3;
       break L12;
      }
     }
    }
    if ((i1 | 0) != 3) if ((i1 | 0) == 4) return i13 | 0; else if ((i1 | 0) == 8) {
     L15 : while (1) {
      i16 = HEAP8[i11 >> 0] | 0;
      i15 = HEAP8[i6 >> 0] | 0;
      i16 = (i16 + -97 & 255) < 26 ? (i16 & 255) + 224 & 255 : i16;
      switch ((i16 << 24 >> 24 == ((i15 + -97 & 255) < 26 ? (i15 & 255) + 224 & 255 : i15) << 24 >> 24 ? (i16 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
      case 0:
       {
        i6 = i6 + 1 | 0;
        i11 = i11 + 1 | 0;
        break;
       }
      case 1:
       {
        i7 = 345265;
        i12 = i14;
        i1 = 9;
        break L15;
       }
      case 2:
       {
        i13 = 4;
        i1 = 4;
        break L15;
       }
      default:
       {
        i1 = 3;
        break L15;
       }
      }
     }
     if ((i1 | 0) != 3) if ((i1 | 0) == 4) return i13 | 0; else if ((i1 | 0) == 9) {
      L18 : while (1) {
       i16 = HEAP8[i12 >> 0] | 0;
       i15 = HEAP8[i7 >> 0] | 0;
       i16 = (i16 + -97 & 255) < 26 ? (i16 & 255) + 224 & 255 : i16;
       switch ((i16 << 24 >> 24 == ((i15 + -97 & 255) < 26 ? (i15 & 255) + 224 & 255 : i15) << 24 >> 24 ? (i16 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
       case 0:
        {
         i7 = i7 + 1 | 0;
         i12 = i12 + 1 | 0;
         break;
        }
       case 1:
        {
         i1 = 10;
         break L18;
        }
       case 2:
        {
         i13 = 5;
         i1 = 4;
         break L18;
        }
       default:
        {
         i1 = 3;
         break L18;
        }
       }
      }
      if ((i1 | 0) != 3) if ((i1 | 0) == 4) return i13 | 0; else if ((i1 | 0) == 10) {
       i16 = -1;
       return i16 | 0;
      }
     }
    }
   }
  }
 }
 return 0;
}

function _rasterizer_set_outline(i15, i12, i17) {
 i15 = i15 | 0;
 i12 = i12 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i18;
 if (i17) {
  i1 = i15 + 44 | 0;
  i16 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
 } else {
  HEAP32[i15 + 8 >> 2] = 2147483647;
  HEAP32[i15 + 4 >> 2] = 2147483647;
  HEAP32[i15 + 16 >> 2] = -2147483648;
  HEAP32[i15 + 12 >> 2] = -2147483648;
  i16 = i15 + 44 | 0;
  HEAP32[i16 >> 2] = 0;
  i1 = 0;
 }
 i14 = i15 + 28 | 0;
 HEAP32[i14 >> 2] = i1;
 i2 = HEAP32[i12 >> 2] | 0;
 i10 = i12 + 16 | 0;
 i3 = HEAP32[i10 >> 2] | 0;
 L5 : do if (i2 | 0) {
  i1 = 0;
  while (1) {
   if (((HEAP32[i3 + (i1 << 3) >> 2] | 0) + 268435456 | 0) >>> 0 > 536870911) {
    i1 = 0;
    i2 = 25;
    break;
   }
   if (((HEAP32[i3 + (i1 << 3) + 4 >> 2] | 0) + 268435456 | 0) >>> 0 > 536870911) {
    i1 = 0;
    i2 = 25;
    break;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i2 >>> 0) break L5;
  }
  if ((i2 | 0) == 25) {
   STACKTOP = i18;
   return i1 | 0;
  }
 } while (0);
 i4 = i12 + 8 | 0;
 do if (!(HEAP32[i4 >> 2] | 0)) i11 = i3; else {
  i5 = i12 + 20 | 0;
  i6 = i13 + 8 | 0;
  i7 = i13 + 16 | 0;
  i8 = i13 + 24 | 0;
  i2 = 0;
  i9 = i3;
  L16 : while (1) {
   i19 = HEAP8[(HEAP32[i5 >> 2] | 0) + i2 >> 0] | 0;
   i9 = i9 + ((i19 & 3) << 3) | 0;
   i20 = (i19 & 4) == 0;
   i1 = i3;
   i3 = i20 ? i3 : i9;
   i1 = i20 ? i9 : i1;
   switch (i19 & 3) {
   case 1:
    {
     i20 = i9 + -8 | 0;
     if (!(_add_line_311(i15, HEAP32[i20 >> 2] | 0, HEAP32[i20 + 4 >> 2] | 0, HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0) | 0)) {
      i2 = 15;
      break L16;
     }
     break;
    }
   case 2:
    {
     i19 = i9 + -16 | 0;
     i20 = HEAP32[i19 + 4 >> 2] | 0;
     i21 = i13;
     HEAP32[i21 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i21 + 4 >> 2] = i20;
     i21 = i9 + -8 | 0;
     i20 = HEAP32[i21 + 4 >> 2] | 0;
     i19 = i6;
     HEAP32[i19 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i19 + 4 >> 2] = i20;
     i19 = HEAP32[i1 + 4 >> 2] | 0;
     i20 = i7;
     HEAP32[i20 >> 2] = HEAP32[i1 >> 2];
     HEAP32[i20 + 4 >> 2] = i19;
     if (!(_add_quadratic(i15, i13) | 0)) {
      i2 = 15;
      break L16;
     }
     break;
    }
   case 3:
    {
     i21 = i9 + -24 | 0;
     i20 = HEAP32[i21 + 4 >> 2] | 0;
     i19 = i13;
     HEAP32[i19 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i19 + 4 >> 2] = i20;
     i19 = i9 + -16 | 0;
     i20 = HEAP32[i19 + 4 >> 2] | 0;
     i21 = i6;
     HEAP32[i21 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i21 + 4 >> 2] = i20;
     i21 = i9 + -8 | 0;
     i20 = HEAP32[i21 + 4 >> 2] | 0;
     i19 = i7;
     HEAP32[i19 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i19 + 4 >> 2] = i20;
     i19 = i1;
     i20 = HEAP32[i19 + 4 >> 2] | 0;
     i21 = i8;
     HEAP32[i21 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i21 + 4 >> 2] = i20;
     if (!(_add_cubic(i15, i13) | 0)) {
      i2 = 15;
      break L16;
     }
     break;
    }
   default:
    {
     i2 = 15;
     break L16;
    }
   }
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= (HEAP32[i4 >> 2] | 0) >>> 0) {
    i2 = 16;
    break;
   }
  }
  if ((i2 | 0) == 15) {
   i21 = 0;
   STACKTOP = i18;
   return i21 | 0;
  } else if ((i2 | 0) == 16) {
   if ((i3 | 0) == (i9 | 0)) {
    i11 = i3;
    break;
   }
   ___assert_fail(360093, 359365, 317, 359743);
  }
 } while (0);
 if ((i11 | 0) != ((HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 3) | 0)) ___assert_fail(360093, 359365, 317, 359743);
 i1 = HEAP32[i16 >> 2] | 0;
 i7 = HEAP32[i14 >> 2] | 0;
 if (i1 >>> 0 < i7 >>> 0) {
  i8 = HEAP32[i15 + 20 >> 2] | 0;
  i9 = i15 + 4 | 0;
  i10 = i15 + 8 | 0;
  i11 = i15 + 12 | 0;
  i6 = i15 + 16 | 0;
  i2 = HEAP32[i9 >> 2] | 0;
  i3 = HEAP32[i10 >> 2] | 0;
  i4 = HEAP32[i11 >> 2] | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  do {
   i15 = HEAP32[i8 + (i1 * 40 | 0) + 24 >> 2] | 0;
   i19 = HEAP32[i8 + (i1 * 40 | 0) + 32 >> 2] | 0;
   i20 = HEAP32[i8 + (i1 * 40 | 0) + 28 >> 2] | 0;
   i21 = HEAP32[i8 + (i1 * 40 | 0) + 36 >> 2] | 0;
   i2 = (i2 | 0) > (i15 | 0) ? i15 : i2;
   i3 = (i3 | 0) > (i19 | 0) ? i19 : i3;
   i4 = (i4 | 0) > (i20 | 0) ? i4 : i20;
   i5 = (i5 | 0) > (i21 | 0) ? i5 : i21;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < i7 >>> 0);
  HEAP32[i9 >> 2] = i2;
  HEAP32[i10 >> 2] = i3;
  HEAP32[i11 >> 2] = i4;
  HEAP32[i6 >> 2] = i5;
 }
 if (i17) {
  i21 = 1;
  STACKTOP = i18;
  return i21 | 0;
 }
 HEAP32[i16 >> 2] = i7;
 i21 = 1;
 STACKTOP = i18;
 return i21 | 0;
}

function _ass_blur1246_horz_c(i2, i46, i1, i47, i48) {
 i2 = i2 | 0;
 i46 = i46 | 0;
 i1 = i1 | 0;
 i47 = i47 | 0;
 i48 = i48 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0;
 i51 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i49 = i51;
 i50 = i1 + 12 | 0;
 i45 = Math_imul(i1 + 15 & -16, i47) | 0;
 i9 = i47 << 4;
 i10 = i49 + 32 | 0;
 if (!i50) {
  STACKTOP = i51;
  return;
 }
 i11 = (i47 | 0) == 0;
 i12 = i49 + 2 | 0;
 i13 = i49 + 4 | 0;
 i14 = i49 + 6 | 0;
 i15 = i49 + 8 | 0;
 i16 = i49 + 10 | 0;
 i17 = i49 + 12 | 0;
 i18 = i49 + 14 | 0;
 i19 = i49 + 16 | 0;
 i20 = i49 + 18 | 0;
 i21 = i49 + 20 | 0;
 i22 = i49 + 22 | 0;
 i23 = i49 + 24 | 0;
 i24 = i49 + 26 | 0;
 i25 = i49 + 28 | 0;
 i26 = i49 + 30 | 0;
 i27 = i49 + 34 | 0;
 i28 = i49 + 36 | 0;
 i29 = i49 + 38 | 0;
 i30 = i49 + 40 | 0;
 i31 = i49 + 42 | 0;
 i32 = i49 + 44 | 0;
 i33 = i49 + 46 | 0;
 i34 = i49 + 48 | 0;
 i35 = i49 + 50 | 0;
 i36 = i49 + 52 | 0;
 i37 = i49 + 54 | 0;
 i38 = i49 + 56 | 0;
 i39 = i49 + 58 | 0;
 i40 = i49 + 60 | 0;
 i41 = i49 + 62 | 0;
 i42 = i48 + 2 | 0;
 i43 = i48 + 4 | 0;
 i44 = i48 + 6 | 0;
 i8 = 0;
 i1 = 0;
 do {
  if (!i11) {
   i7 = i2 + (i9 << 1) | 0;
   i5 = 0;
   i6 = i1;
   while (1) {
    i4 = i6 - i9 | 0;
    i4 = i4 >>> 0 < i45 >>> 0 ? i46 + (i4 << 1) | 0 : 368376;
    HEAP16[i49 >> 1] = HEAP16[i4 >> 1] | 0;
    HEAP16[i12 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i13 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i14 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i15 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i16 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i17 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i18 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i19 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i20 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i21 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i22 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i23 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i24 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i25 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i26 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = i6 >>> 0 < i45 >>> 0 ? i46 + (i6 << 1) | 0 : 368376;
    i3 = HEAP16[i4 >> 1] | 0;
    HEAP16[i10 >> 1] = i3;
    HEAP16[i27 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i28 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i29 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i30 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i31 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i32 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i33 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i34 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i35 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i36 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i37 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i38 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i39 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i40 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i41 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = 0;
    while (1) {
     i52 = HEAP16[i10 + (i4 + -6 << 1) >> 1] | 0;
     i55 = Math_imul(HEAP16[i48 >> 1] | 0, ((HEAPU16[i10 + (i4 + -5 << 1) >> 1] | 0) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -7 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0;
     i54 = Math_imul(HEAP16[i42 >> 1] | 0, ((HEAPU16[i10 + (i4 + -4 << 1) >> 1] | 0) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -8 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0;
     i53 = Math_imul(HEAP16[i43 >> 1] | 0, ((HEAPU16[i10 + (i4 + -2 << 1) >> 1] | 0) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -10 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0;
     i3 = ((i55 + 32768 + i54 + i53 + (Math_imul(HEAP16[i44 >> 1] | 0, ((i3 & 65535) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -12 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0) | 0) >>> 16) + i52 & 65535;
     HEAP16[i2 + (i4 << 1) >> 1] = i3;
     i3 = i4 + 1 | 0;
     if ((i3 | 0) == 16) break;
     i4 = i3;
     i3 = HEAP16[i10 + (i3 << 1) >> 1] | 0;
    }
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i47 | 0)) break; else {
     i6 = i6 + 16 | 0;
     i2 = i2 + 32 | 0;
    }
   }
   i2 = i7;
   i1 = i9 + i1 | 0;
  }
  i8 = i8 + 16 | 0;
 } while (i8 >>> 0 < i50 >>> 0);
 STACKTOP = i51;
 return;
}

function _ass_blur1235_horz_c(i2, i46, i1, i47, i48) {
 i2 = i2 | 0;
 i46 = i46 | 0;
 i1 = i1 | 0;
 i47 = i47 | 0;
 i48 = i48 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0;
 i51 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i49 = i51;
 i50 = i1 + 10 | 0;
 i45 = Math_imul(i1 + 15 & -16, i47) | 0;
 i9 = i47 << 4;
 i10 = i49 + 32 | 0;
 if (!i50) {
  STACKTOP = i51;
  return;
 }
 i11 = (i47 | 0) == 0;
 i12 = i49 + 2 | 0;
 i13 = i49 + 4 | 0;
 i14 = i49 + 6 | 0;
 i15 = i49 + 8 | 0;
 i16 = i49 + 10 | 0;
 i17 = i49 + 12 | 0;
 i18 = i49 + 14 | 0;
 i19 = i49 + 16 | 0;
 i20 = i49 + 18 | 0;
 i21 = i49 + 20 | 0;
 i22 = i49 + 22 | 0;
 i23 = i49 + 24 | 0;
 i24 = i49 + 26 | 0;
 i25 = i49 + 28 | 0;
 i26 = i49 + 30 | 0;
 i27 = i49 + 34 | 0;
 i28 = i49 + 36 | 0;
 i29 = i49 + 38 | 0;
 i30 = i49 + 40 | 0;
 i31 = i49 + 42 | 0;
 i32 = i49 + 44 | 0;
 i33 = i49 + 46 | 0;
 i34 = i49 + 48 | 0;
 i35 = i49 + 50 | 0;
 i36 = i49 + 52 | 0;
 i37 = i49 + 54 | 0;
 i38 = i49 + 56 | 0;
 i39 = i49 + 58 | 0;
 i40 = i49 + 60 | 0;
 i41 = i49 + 62 | 0;
 i42 = i48 + 2 | 0;
 i43 = i48 + 4 | 0;
 i44 = i48 + 6 | 0;
 i8 = 0;
 i1 = 0;
 do {
  if (!i11) {
   i7 = i2 + (i9 << 1) | 0;
   i5 = 0;
   i6 = i1;
   while (1) {
    i4 = i6 - i9 | 0;
    i4 = i4 >>> 0 < i45 >>> 0 ? i46 + (i4 << 1) | 0 : 368376;
    HEAP16[i49 >> 1] = HEAP16[i4 >> 1] | 0;
    HEAP16[i12 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i13 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i14 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i15 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i16 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i17 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i18 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i19 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i20 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i21 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i22 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i23 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i24 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i25 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i26 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = i6 >>> 0 < i45 >>> 0 ? i46 + (i6 << 1) | 0 : 368376;
    i3 = HEAP16[i4 >> 1] | 0;
    HEAP16[i10 >> 1] = i3;
    HEAP16[i27 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i28 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i29 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i30 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i31 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i32 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i33 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i34 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i35 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i36 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i37 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i38 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i39 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i40 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i41 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = 0;
    while (1) {
     i52 = HEAP16[i10 + (i4 + -5 << 1) >> 1] | 0;
     i55 = Math_imul(HEAP16[i48 >> 1] | 0, ((HEAPU16[i10 + (i4 + -4 << 1) >> 1] | 0) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -6 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0;
     i54 = Math_imul(HEAP16[i42 >> 1] | 0, ((HEAPU16[i10 + (i4 + -3 << 1) >> 1] | 0) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -7 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0;
     i53 = Math_imul(HEAP16[i43 >> 1] | 0, ((HEAPU16[i10 + (i4 + -2 << 1) >> 1] | 0) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -8 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0;
     i3 = ((i55 + 32768 + i54 + i53 + (Math_imul(HEAP16[i44 >> 1] | 0, ((i3 & 65535) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -10 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0) | 0) >>> 16) + i52 & 65535;
     HEAP16[i2 + (i4 << 1) >> 1] = i3;
     i3 = i4 + 1 | 0;
     if ((i3 | 0) == 16) break;
     i4 = i3;
     i3 = HEAP16[i10 + (i3 << 1) >> 1] | 0;
    }
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i47 | 0)) break; else {
     i6 = i6 + 16 | 0;
     i2 = i2 + 32 | 0;
    }
   }
   i2 = i7;
   i1 = i9 + i1 | 0;
  }
  i8 = i8 + 16 | 0;
 } while (i8 >>> 0 < i50 >>> 0);
 STACKTOP = i51;
 return;
}

function _ass_blur1234_horz_c(i2, i46, i1, i47, i48) {
 i2 = i2 | 0;
 i46 = i46 | 0;
 i1 = i1 | 0;
 i47 = i47 | 0;
 i48 = i48 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0;
 i51 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i49 = i51;
 i50 = i1 + 8 | 0;
 i45 = Math_imul(i1 + 15 & -16, i47) | 0;
 i9 = i47 << 4;
 i10 = i49 + 32 | 0;
 if (!i50) {
  STACKTOP = i51;
  return;
 }
 i11 = (i47 | 0) == 0;
 i12 = i49 + 2 | 0;
 i13 = i49 + 4 | 0;
 i14 = i49 + 6 | 0;
 i15 = i49 + 8 | 0;
 i16 = i49 + 10 | 0;
 i17 = i49 + 12 | 0;
 i18 = i49 + 14 | 0;
 i19 = i49 + 16 | 0;
 i20 = i49 + 18 | 0;
 i21 = i49 + 20 | 0;
 i22 = i49 + 22 | 0;
 i23 = i49 + 24 | 0;
 i24 = i49 + 26 | 0;
 i25 = i49 + 28 | 0;
 i26 = i49 + 30 | 0;
 i27 = i49 + 34 | 0;
 i28 = i49 + 36 | 0;
 i29 = i49 + 38 | 0;
 i30 = i49 + 40 | 0;
 i31 = i49 + 42 | 0;
 i32 = i49 + 44 | 0;
 i33 = i49 + 46 | 0;
 i34 = i49 + 48 | 0;
 i35 = i49 + 50 | 0;
 i36 = i49 + 52 | 0;
 i37 = i49 + 54 | 0;
 i38 = i49 + 56 | 0;
 i39 = i49 + 58 | 0;
 i40 = i49 + 60 | 0;
 i41 = i49 + 62 | 0;
 i42 = i48 + 2 | 0;
 i43 = i48 + 4 | 0;
 i44 = i48 + 6 | 0;
 i8 = 0;
 i1 = 0;
 do {
  if (!i11) {
   i7 = i2 + (i9 << 1) | 0;
   i5 = 0;
   i6 = i1;
   while (1) {
    i4 = i6 - i9 | 0;
    i4 = i4 >>> 0 < i45 >>> 0 ? i46 + (i4 << 1) | 0 : 368376;
    HEAP16[i49 >> 1] = HEAP16[i4 >> 1] | 0;
    HEAP16[i12 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i13 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i14 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i15 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i16 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i17 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i18 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i19 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i20 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i21 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i22 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i23 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i24 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i25 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i26 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = i6 >>> 0 < i45 >>> 0 ? i46 + (i6 << 1) | 0 : 368376;
    i3 = HEAP16[i4 >> 1] | 0;
    HEAP16[i10 >> 1] = i3;
    HEAP16[i27 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i28 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i29 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i30 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i31 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i32 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i33 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i34 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i35 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i36 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i37 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i38 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i39 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i40 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i41 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = 0;
    while (1) {
     i52 = HEAP16[i10 + (i4 + -4 << 1) >> 1] | 0;
     i55 = Math_imul(HEAP16[i48 >> 1] | 0, ((HEAPU16[i10 + (i4 + -3 << 1) >> 1] | 0) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -5 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0;
     i54 = Math_imul(HEAP16[i42 >> 1] | 0, ((HEAPU16[i10 + (i4 + -2 << 1) >> 1] | 0) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -6 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0;
     i53 = Math_imul(HEAP16[i43 >> 1] | 0, ((HEAPU16[i10 + (i4 + -1 << 1) >> 1] | 0) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -7 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0;
     i3 = ((i55 + 32768 + i54 + i53 + (Math_imul(HEAP16[i44 >> 1] | 0, ((i3 & 65535) - i52 << 16 >> 16) + ((HEAPU16[i10 + (i4 + -8 << 1) >> 1] | 0) - i52 << 16 >> 16) | 0) | 0) | 0) >>> 16) + i52 & 65535;
     HEAP16[i2 + (i4 << 1) >> 1] = i3;
     i3 = i4 + 1 | 0;
     if ((i3 | 0) == 16) break;
     i4 = i3;
     i3 = HEAP16[i10 + (i3 << 1) >> 1] | 0;
    }
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i47 | 0)) break; else {
     i6 = i6 + 16 | 0;
     i2 = i2 + 32 | 0;
    }
   }
   i2 = i7;
   i1 = i9 + i1 | 0;
  }
  i8 = i8 + 16 | 0;
 } while (i8 >>> 0 < i50 >>> 0);
 STACKTOP = i51;
 return;
}

function _psh_globals_set_scale(i10, i5, i11, i1, i9) {
 i10 = i10 | 0;
 i5 = i5 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0;
 i2 = i10 + 200 | 0;
 i3 = i10 + 204 | 0;
 if ((HEAP32[i2 >> 2] | 0) == (i5 | 0)) {
  if ((HEAP32[i3 >> 2] | 0) != (i1 | 0)) i4 = 3;
 } else i4 = 3;
 if ((i4 | 0) == 3) {
  HEAP32[i2 >> 2] = i5;
  HEAP32[i3 >> 2] = i1;
  i1 = HEAP32[i10 + 4 >> 2] | 0;
  if (i1 | 0) {
   i8 = _FT_MulFix(HEAP32[i10 + 8 >> 2] | 0, i5) | 0;
   i3 = i10 + 12 | 0;
   HEAP32[i3 >> 2] = i8;
   HEAP32[i10 + 16 >> 2] = i8 + 32 & -64;
   i1 = i1 + -1 | 0;
   if (i1 | 0) {
    i2 = i10 + 20 | 0;
    while (1) {
     i8 = _FT_MulFix(HEAP32[i2 >> 2] | 0, i5) | 0;
     i7 = HEAP32[i3 >> 2] | 0;
     i6 = i8 - i7 | 0;
     i8 = (((i6 | 0) < 0 ? 0 - i6 | 0 : i6) | 0) < 128 ? i7 : i8;
     HEAP32[i2 + 4 >> 2] = i8;
     HEAP32[i2 + 8 >> 2] = i8 + 32 & -64;
     i1 = i1 + -1 | 0;
     if (!i1) break; else i2 = i2 + 12 | 0;
    }
   }
  }
 }
 i1 = i10 + 404 | 0;
 i2 = i10 + 408 | 0;
 if ((HEAP32[i1 >> 2] | 0) == (i11 | 0)) if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) return;
 HEAP32[i1 >> 2] = i11;
 HEAP32[i2 >> 2] = i9;
 i1 = HEAP32[i10 + 208 >> 2] | 0;
 if (i1 | 0) {
  i8 = _FT_MulFix(HEAP32[i10 + 212 >> 2] | 0, i11) | 0;
  i3 = i10 + 216 | 0;
  HEAP32[i3 >> 2] = i8;
  HEAP32[i10 + 220 >> 2] = i8 + 32 & -64;
  i1 = i1 + -1 | 0;
  if (i1 | 0) {
   i2 = i10 + 224 | 0;
   while (1) {
    i8 = _FT_MulFix(HEAP32[i2 >> 2] | 0, i11) | 0;
    i7 = HEAP32[i3 >> 2] | 0;
    i6 = i8 - i7 | 0;
    i8 = (((i6 | 0) < 0 ? 0 - i6 | 0 : i6) | 0) < 128 ? i7 : i8;
    HEAP32[i2 + 4 >> 2] = i8;
    HEAP32[i2 + 8 >> 2] = i8 + 32 & -64;
    i1 = i1 + -1 | 0;
    if (!i1) break; else i2 = i2 + 12 | 0;
   }
  }
 }
 i5 = i10 + 412 | 0;
 i1 = HEAP32[i10 + 2476 >> 2] << 3;
 if ((i11 | 0) > 34359737) i1 = ((i1 | 0) / 125 | 0 | 0) > (i11 | 0); else i1 = (i11 * 125 | 0) < (i1 | 0);
 HEAP8[i10 + 2492 >> 0] = i1 & 1;
 i1 = HEAP32[i10 + 2480 >> 2] | 0;
 L24 : do if ((i1 | 0) > 0) while (1) {
  if ((_FT_MulFix(i1, i11) | 0) <= 32) break L24;
  i2 = i1 + -1 | 0;
  if ((i1 | 0) > 1) i1 = i2; else {
   i1 = i2;
   break;
  }
 } while (0);
 HEAP32[i10 + 2484 >> 2] = i1;
 i8 = i10 + 1960 | 0;
 i6 = i10 + 928 | 0;
 i7 = i10 + 1444 | 0;
 i4 = 0;
 do {
  switch (i4 | 0) {
  case 0:
   {
    i1 = i5;
    break;
   }
  case 1:
   {
    i1 = i6;
    break;
   }
  case 2:
   {
    i1 = i7;
    break;
   }
  default:
   i1 = i8;
  }
  i3 = HEAP32[i1 >> 2] | 0;
  if (i3 | 0) {
   i2 = i1 + 4 | 0;
   i1 = i3;
   while (1) {
    i12 = (_FT_MulFix(HEAP32[i2 + 8 >> 2] | 0, i11) | 0) + i9 | 0;
    HEAP32[i2 + 28 >> 2] = i12;
    i12 = (_FT_MulFix(HEAP32[i2 + 12 >> 2] | 0, i11) | 0) + i9 | 0;
    HEAP32[i2 + 24 >> 2] = i12;
    i12 = (_FT_MulFix(HEAP32[i2 >> 2] | 0, i11) | 0) + i9 | 0;
    i3 = i2 + 16 | 0;
    HEAP32[i3 >> 2] = i12;
    i12 = _FT_MulFix(HEAP32[i2 + 4 >> 2] | 0, i11) | 0;
    HEAP32[i2 + 20 >> 2] = i12;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 32 & -64;
    i1 = i1 + -1 | 0;
    if (!i1) break; else i2 = i2 + 32 | 0;
   }
  }
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 4);
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1 | 0) {
  i5 = i10 + 1448 | 0;
  i4 = i10 + 416 | 0;
  while (1) {
   i2 = HEAP32[i7 >> 2] | 0;
   L46 : do if (i2 | 0) {
    i3 = i5;
    while (1) {
     i12 = (HEAP32[i4 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
     if ((_FT_MulFix((i12 | 0) < 0 ? 0 - i12 | 0 : i12, i11) | 0) < 64) break;
     i2 = i2 + -1 | 0;
     if (!i2) break L46; else i3 = i3 + 32 | 0;
    }
    HEAP32[i4 + 28 >> 2] = HEAP32[i3 + 28 >> 2];
    HEAP32[i4 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
    HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
    HEAP32[i4 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
   } while (0);
   i1 = i1 + -1 | 0;
   if (!i1) break; else i4 = i4 + 32 | 0;
  }
 }
 i1 = HEAP32[i6 >> 2] | 0;
 if (!i1) return;
 i5 = i10 + 1964 | 0;
 i4 = i10 + 932 | 0;
 while (1) {
  i2 = HEAP32[i8 >> 2] | 0;
  L59 : do if (i2 | 0) {
   i3 = i5;
   while (1) {
    i12 = (HEAP32[i4 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
    if ((_FT_MulFix((i12 | 0) < 0 ? 0 - i12 | 0 : i12, i11) | 0) < 64) break;
    i2 = i2 + -1 | 0;
    if (!i2) break L59; else i3 = i3 + 32 | 0;
   }
   HEAP32[i4 + 28 >> 2] = HEAP32[i3 + 28 >> 2];
   HEAP32[i4 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
   HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
   HEAP32[i4 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
  } while (0);
  i1 = i1 + -1 | 0;
  if (!i1) break; else i4 = i4 + 32 | 0;
 }
 return;
}

function _reset_render_context(i11, i1) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, d13 = 0.0;
 i5 = i11 + 160 | 0;
 i12 = HEAP32[i11 + 208 >> 2] | 0;
 i2 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + ((HEAP32[i12 + 24 >> 2] | 0) * 144 | 0) | 0;
 i4 = i11 + 816 | 0;
 i8 = i11 + 536 | 0;
 if (!(_event_has_hard_overrides(HEAP32[i12 + 48 >> 2] | 0) | 0)) i12 = (HEAP32[i11 + 288 >> 2] | 0) != 0; else i12 = 1;
 i9 = HEAP32[i11 + 96 >> 2] | 0;
 HEAP32[i4 >> 2] = 358800;
 i1 = (i1 | 0) == 0 ? i2 : i1;
 _memcpy(i8 | 0, i1 | 0, 144) | 0;
 HEAP32[i11 + 532 >> 2] = i12 & 1;
 i10 = (i9 & 2 | 0) == 0;
 HEAP32[i11 + 528 >> 2] = (i10 | i12 ^ 1) & 1;
 i2 = i12 ? 0 : i9;
 i2 = (i2 & 1 | 0) == 0 ? i2 : i2 | 124;
 if (i2 & 512 | 0) _memcpy(i8 | 0, i4 | 0, 144) | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 d6 = +(HEAP32[i5 + 40 >> 2] | 0);
 d3 = d6 / 288.0;
 if (i2 & 4 | 0) {
  HEAPF64[i11 + 544 >> 3] = d3 * +HEAPF64[i11 + 824 >> 3];
  HEAPF64[i11 + 600 >> 3] = d3 * +HEAPF64[i11 + 880 >> 3];
  HEAPF64[i11 + 584 >> 3] = +HEAPF64[i11 + 864 >> 3];
  HEAPF64[i11 + 592 >> 3] = +HEAPF64[i11 + 872 >> 3];
 }
 if (i2 & 8 | 0) {
  HEAP32[i11 + 540 >> 2] = HEAP32[i11 + 820 >> 2];
  HEAP32[i11 + 660 >> 2] = HEAP32[i11 + 940 >> 2];
 }
 if (i2 & 16 | 0) {
  HEAP32[i11 + 552 >> 2] = HEAP32[i11 + 832 >> 2];
  HEAP32[i11 + 556 >> 2] = HEAP32[i11 + 836 >> 2];
  HEAP32[i11 + 560 >> 2] = HEAP32[i11 + 840 >> 2];
  HEAP32[i11 + 564 >> 2] = HEAP32[i11 + 844 >> 2];
 }
 if (i2 & 32 | 0) {
  HEAP32[i11 + 568 >> 2] = HEAP32[i11 + 848 >> 2];
  HEAP32[i11 + 572 >> 2] = HEAP32[i11 + 852 >> 2];
  HEAP32[i11 + 576 >> 2] = HEAP32[i11 + 856 >> 2];
  HEAP32[i11 + 580 >> 2] = HEAP32[i11 + 860 >> 2];
 }
 if (i2 & 64 | 0) {
  HEAP32[i11 + 616 >> 2] = HEAP32[i11 + 896 >> 2];
  HEAPF64[i11 + 624 >> 3] = d3 * +HEAPF64[i11 + 904 >> 3];
  HEAPF64[i11 + 632 >> 3] = d3 * +HEAPF64[i11 + 912 >> 3];
 }
 if (i2 & 128 | 0) HEAP32[i11 + 640 >> 2] = HEAP32[i11 + 920 >> 2];
 if (i2 & 1024 | 0) HEAP32[i11 + 672 >> 2] = HEAP32[i11 + 952 >> 2];
 if (i2 & 256 | 0) {
  HEAP32[i11 + 644 >> 2] = HEAP32[i11 + 924 >> 2];
  HEAP32[i11 + 648 >> 2] = HEAP32[i11 + 928 >> 2];
  HEAP32[i11 + 652 >> 2] = HEAP32[i11 + 932 >> 2];
 }
 i9 = i11 + 540 | 0;
 if (!(HEAP32[i9 >> 2] | 0)) HEAP32[i9 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i11 + 212 >> 2] = i8;
 HEAP32[i11 + 524 >> 2] = i2;
 d3 = +(HEAP32[i11 + 144 >> 2] | 0);
 d7 = d3 / d6;
 i2 = i11 + 176 | 0;
 HEAPF64[i2 >> 3] = d7;
 i4 = HEAP32[i11 + 28 >> 2] | 0;
 i8 = (i4 | 0) == 0;
 d3 = d3 / +(i4 | 0);
 d6 = i8 ? 1.0 : d3;
 i4 = i11 + 200 | 0;
 HEAPF64[i4 >> 3] = d6;
 d6 = (HEAP32[i5 + 60 >> 2] | 0) == 0 ? d6 : d7;
 i1 = i11 + 192 | 0;
 HEAPF64[i1 >> 3] = d6;
 if (i8) {
  HEAPF64[i4 >> 3] = d6;
  d3 = d6;
 }
 if (!(i12 & (i10 ^ 1))) {
  d13 = +HEAPF64[i11 + 32 >> 3];
  HEAPF64[i2 >> 3] = d7 * d13;
  HEAPF64[i1 >> 3] = d6 * d13;
  HEAPF64[i4 >> 3] = d3 * d13;
 }
 HEAP32[i11 + 384 >> 2] = HEAP32[i11 + 552 >> 2];
 HEAP32[i11 + 388 >> 2] = HEAP32[i11 + 556 >> 2];
 HEAP32[i11 + 392 >> 2] = HEAP32[i11 + 560 >> 2];
 HEAP32[i11 + 396 >> 2] = HEAP32[i11 + 564 >> 2];
 HEAP32[i11 + 232 >> 2] = (HEAP32[i11 + 580 >> 2] | 0 ? 2 : 0) | (HEAP32[i11 + 576 >> 2] | 0) != 0;
 HEAPF64[i11 + 224 >> 3] = +HEAPF64[i11 + 544 >> 3];
 i12 = i11 + 500 | 0;
 _free(HEAP32[i12 >> 2] | 0);
 HEAP32[i12 >> 2] = 0;
 i10 = ___strdup(HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i12 >> 2] = i10;
 HEAP32[i11 + 512 >> 2] = HEAP32[i11 + 660 >> 2];
 HEAP32[i11 + 504 >> 2] = HEAP32[i11 + 568 >> 2];
 HEAP32[i11 + 508 >> 2] = HEAP32[i11 + 572 >> 2];
 _update_font(i11);
 HEAP32[i11 + 360 >> 2] = HEAP32[i11 + 616 >> 2];
 d13 = +HEAPF64[i11 + 624 >> 3];
 HEAPF64[i11 + 368 >> 3] = d13;
 HEAPF64[i11 + 376 >> 3] = d13;
 HEAPF64[i11 + 336 >> 3] = +HEAPF64[i11 + 584 >> 3];
 HEAPF64[i11 + 344 >> 3] = +HEAPF64[i11 + 592 >> 3];
 HEAPF64[i11 + 352 >> 3] = +HEAPF64[i11 + 600 >> 3];
 HEAP8[i11 + 424 >> 0] = 0;
 HEAPF64[i11 + 432 >> 3] = +HEAPF64[i11 + 664 >> 3];
 d13 = +HEAPF64[i11 + 632 >> 3];
 HEAPF64[i11 + 440 >> 3] = d13;
 HEAPF64[i11 + 448 >> 3] = d13;
 i12 = i11 + 248 | 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAPF64[i11 + 264 >> 3] = +HEAPF64[i11 + 608 >> 3] * 3.141592653589793 / 180.0;
 i12 = i11 + 272 | 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAP32[i11 + 520 >> 2] = HEAP32[i11 + 656 >> 2];
 return;
}

function _tt_face_find_bdf_prop(i13, i15, i18) {
 i13 = i13 | 0;
 i15 = i15 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i16 = 0, i17 = 0;
 i11 = HEAP32[i13 + 88 >> 2] | 0;
 HEAP32[i18 >> 2] = 0;
 i8 = i13 + 780 | 0;
 do if (!(HEAP8[i8 >> 0] | 0)) {
  i9 = HEAP32[i13 + 104 >> 2] | 0;
  i7 = i13 + 760 | 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 12 >> 2] = 0;
  HEAP32[i7 + 16 >> 2] = 0;
  HEAP32[i7 + 20 >> 2] = 0;
  i10 = HEAP16[i13 + 152 >> 1] | 0;
  i1 = HEAP32[i13 + 156 >> 2] | 0;
  i3 = i1 + ((i10 & 65535) << 4) | 0;
  if (!(i10 << 16 >> 16)) {
   i18 = 8;
   return i18 | 0;
  }
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == 1111770656) {
    i4 = HEAP32[i1 + 12 >> 2] | 0;
    if (i4 | 0) break;
   }
   i2 = i1 + 16 | 0;
   if (i2 >>> 0 < i3 >>> 0) i1 = i2; else {
    i14 = 8;
    i12 = 34;
    break;
   }
  }
  if ((i12 | 0) == 34) return i14 | 0;
  if (i4 >>> 0 < 8 | (_FT_Stream_Seek(i9, HEAP32[i1 + 8 >> 2] | 0) | 0) != 0) {
   i18 = 8;
   return i18 | 0;
  }
  if (_FT_Stream_ExtractFrame(i9, i4, i7) | 0) {
   i18 = 8;
   return i18 | 0;
  }
  i1 = HEAP32[i7 >> 2] | 0;
  HEAP32[i13 + 764 >> 2] = i1 + i4;
  i5 = HEAPU8[i1 + 2 >> 0] << 8 | HEAPU8[i1 + 3 >> 0];
  i2 = HEAPU8[i1 + 5 >> 0] << 16 | HEAPU8[i1 + 4 >> 0] << 24 | HEAPU8[i1 + 6 >> 0] << 8 | HEAPU8[i1 + 7 >> 0];
  if (!(i2 >>> 0 < 8 ? 1 : (HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0] | 0) != 1)) if (!((i2 + 1 | 0) >>> 0 > i4 >>> 0 | (i2 + -8 | 0) >>> 2 >>> 0 < i5 >>> 0)) {
   HEAP32[i13 + 776 >> 2] = i5;
   i6 = i1 + i2 | 0;
   HEAP32[i13 + 768 >> 2] = i6;
   HEAP32[i13 + 772 >> 2] = i4 - i2;
   i3 = i1 + 8 | 0;
   i2 = i3 + (i5 << 2) | 0;
   if (i5) {
    i4 = i5;
    while (1) {
     i2 = i2 + ((HEAPU8[i3 + 2 >> 0] << 8 | HEAPU8[i3 + 3 >> 0]) * 10 | 0) | 0;
     i4 = i4 + -1 | 0;
     if (!i4) break; else i3 = i3 + 4 | 0;
    }
   }
   if (i2 >>> 0 <= i6 >>> 0) {
    HEAP8[i8 >> 0] = 1;
    break;
   }
  }
  _FT_Stream_ReleaseFrame(i9, i7);
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 12 >> 2] = 0;
  HEAP32[i7 + 16 >> 2] = 0;
  HEAP32[i7 + 20 >> 2] = 0;
  i18 = 8;
  return i18 | 0;
 } else {
  i5 = HEAP32[i13 + 776 >> 2] | 0;
  i1 = HEAP32[i13 + 760 >> 2] | 0;
 } while (0);
 i1 = i1 + 8 | 0;
 if ((i15 | 0) == 0 | (i11 | 0) == 0) {
  i18 = 6;
  return i18 | 0;
 }
 i10 = _strlen(i15) | 0;
 if (!((i5 | 0) != 0 & (i10 | 0) != 0)) {
  i18 = 6;
  return i18 | 0;
 }
 i4 = HEAPU16[i11 + 14 >> 1] | 0;
 i2 = i1;
 i3 = i5;
 i1 = i1 + (i5 << 2) | 0;
 while (1) {
  i5 = HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0];
  if ((HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0] | 0) == (i4 | 0)) break;
  i3 = i3 + -1 | 0;
  if (!i3) {
   i14 = 6;
   i12 = 34;
   break;
  } else {
   i2 = i2 + 4 | 0;
   i1 = i1 + (i5 * 10 | 0) | 0;
  }
 }
 if ((i12 | 0) == 34) return i14 | 0;
 if (!i5) {
  i18 = 6;
  return i18 | 0;
 }
 i9 = i13 + 772 | 0;
 i8 = i13 + 768 | 0;
 i2 = i5;
 L46 : while (1) {
  i7 = HEAP8[i1 + 5 >> 0] | 0;
  L48 : do if (i7 & 16) {
   i3 = HEAPU8[i1 + 1 >> 0] << 16 | HEAPU8[i1 >> 0] << 24 | HEAPU8[i1 + 2 >> 0] << 8 | HEAPU8[i1 + 3 >> 0];
   i16 = HEAPU8[i1 + 7 >> 0] << 16 | HEAPU8[i1 + 6 >> 0] << 24 | HEAPU8[i1 + 8 >> 0] << 8 | HEAPU8[i1 + 9 >> 0];
   i4 = HEAP32[i9 >> 2] | 0;
   if (i4 >>> 0 > i3 >>> 0) {
    i5 = i4 - i3 | 0;
    if (i10 >>> 0 < i5 >>> 0) {
     i6 = HEAP32[i8 >> 2] | 0;
     if (!(_strncmp(i15, i6 + i3 | 0, i5) | 0)) {
      switch (i7 & 15) {
      case 2:
       {
        i12 = 31;
        break L46;
       }
      case 3:
       {
        i12 = 32;
        break L46;
       }
      case 1:
      case 0:
       break;
      default:
       break L48;
      }
      if (i16 >>> 0 < i4 >>> 0) {
       i17 = i6 + i16 | 0;
       if (_memchr(i17, 0, i4) | 0) {
        i12 = 30;
        break L46;
       }
      }
     }
    }
   }
  } while (0);
  i2 = i2 + -1 | 0;
  if (!i2) {
   i14 = 6;
   i12 = 34;
   break;
  } else i1 = i1 + 10 | 0;
 }
 if ((i12 | 0) == 30) {
  HEAP32[i18 >> 2] = 1;
  HEAP32[i18 + 4 >> 2] = i17;
  i18 = 0;
  return i18 | 0;
 } else if ((i12 | 0) == 31) {
  HEAP32[i18 >> 2] = 2;
  HEAP32[i18 + 4 >> 2] = i16;
  i18 = 0;
  return i18 | 0;
 } else if ((i12 | 0) == 32) {
  HEAP32[i18 >> 2] = 3;
  HEAP32[i18 + 4 >> 2] = i16;
  i18 = 0;
  return i18 | 0;
 } else if ((i12 | 0) == 34) return i14 | 0;
 return 0;
}

function _FcDefaultSubstitute(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, d10 = 0.0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i4 = i9 + 72 | 0;
 i5 = i9 + 56 | 0;
 i6 = i9 + 40 | 0;
 i7 = i9 + 24 | 0;
 i1 = i9 + 16 | 0;
 i2 = i9 + 8 | 0;
 i3 = i9;
 if ((_FcPatternObjectGet(i8, 8, 0, i5) | 0) == 1) _FcPatternObjectAddInteger(i8, 8, 80) | 0;
 if ((_FcPatternObjectGet(i8, 7, 0, i5) | 0) == 1) _FcPatternObjectAddInteger(i8, 7, 0) | 0;
 if ((_FcPatternObjectGet(i8, 9, 0, i5) | 0) == 1) _FcPatternObjectAddInteger(i8, 9, 100) | 0;
 if ((_FcPatternObjectGet(i8, 17, 0, i5) | 0) == 1) _FcPatternObjectAddBool(i8, 17, 1) | 0;
 if ((_FcPatternObjectGet(i8, 18, 0, i5) | 0) == 1) _FcPatternObjectAddBool(i8, 18, 0) | 0;
 if ((_FcPatternObjectGet(i8, 19, 0, i5) | 0) == 1) _FcPatternObjectAddBool(i8, 19, 0) | 0;
 if ((_FcPatternObjectGet(i8, 20, 0, i5) | 0) == 1) _FcPatternObjectAddBool(i8, 20, 1) | 0;
 if ((_FcPatternObjectGet(i8, 39, 0, i5) | 0) == 1) _FcPatternObjectAddBool(i8, 39, 1) | 0;
 if ((_FcPatternObjectGet(i8, 40, 0, i5) | 0) == 1) _FcPatternObjectAddBool(i8, 40, 0) | 0;
 if ((_FcPatternObjectGet(i8, 48, 0, i5) | 0) == 1) _FcPatternObjectAddBool(i8, 48, 0) | 0;
 if (_FcPatternObjectGetDouble(i8, 10, 0, i2) | 0) HEAPF64[i2 >> 3] = 12.0;
 if (_FcPatternObjectGetDouble(i8, 28, 0, i3) | 0) HEAPF64[i3 >> 3] = 1.0;
 if (_FcPatternObjectGetDouble(i8, 26, 0, i1) | 0) HEAPF64[i1 >> 3] = 75.0;
 if (!(_FcPatternObjectGet(i8, 12, 0, i5) | 0)) HEAPF64[i2 >> 3] = +HEAPF64[i5 + 8 >> 3] / +HEAPF64[i1 >> 3] * 72.0 / +HEAPF64[i3 >> 3]; else {
  _FcPatternObjectDel(i8, 28) | 0;
  _FcPatternObjectAddDouble(i8, 28, +HEAPF64[i3 >> 3]) | 0;
  d10 = +HEAPF64[i2 >> 3] * +HEAPF64[i3 >> 3];
  _FcPatternObjectDel(i8, 26) | 0;
  _FcPatternObjectAddDouble(i8, 26, +HEAPF64[i1 >> 3]) | 0;
  _FcPatternObjectAddDouble(i8, 12, d10 * (+HEAPF64[i1 >> 3] / 72.0)) | 0;
 }
 _FcPatternObjectDel(i8, 10) | 0;
 _FcPatternObjectAddDouble(i8, 10, +HEAPF64[i2 >> 3]) | 0;
 if ((_FcPatternObjectGet(i8, 35, 0, i5) | 0) == 1) _FcPatternObjectAddInteger(i8, 35, 2147483647) | 0;
 if ((_FcPatternObjectGet(i8, 16, 0, i5) | 0) == 1) _FcPatternObjectAddInteger(i8, 16, 3) | 0;
 if ((_FcPatternObjectGet(i8, 42, 0, i5) | 0) == 1) {
  i1 = HEAP32[91946] | 0;
  L52 : do if (!i1) do {
   i2 = _FcGetDefaultLangs() | 0;
   i1 = ___strdup(HEAP32[HEAP32[i2 + 12 >> 2] >> 2] | 0) | 0;
   _FcStrSetDestroy(i2);
   i2 = HEAP32[91946] | 0;
   if (!i2) HEAP32[91946] = i1;
   if (!i2) break L52;
   _free(i1);
   i1 = HEAP32[91946] | 0;
  } while (!(i1 | 0)); while (0);
  _FcPatternObjectAddString(i8, 42, i1) | 0;
 }
 _FcPatternObjectGet(i8, 42, 0, i6) | 0;
 HEAP32[i7 >> 2] = 3;
 HEAP32[i7 + 8 >> 2] = 354572;
 if ((_FcPatternObjectGet(i8, 2, 0, i5) | 0) == 1) {
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  _FcPatternObjectAdd(i8, 2, i4, 1) | 0;
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  _FcPatternObjectAddWithBinding(i8, 2, i4, 0, 1) | 0;
 }
 if ((_FcPatternObjectGet(i8, 4, 0, i5) | 0) == 1) {
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  _FcPatternObjectAdd(i8, 4, i4, 1) | 0;
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  _FcPatternObjectAddWithBinding(i8, 4, i4, 0, 1) | 0;
 }
 if ((_FcPatternObjectGet(i8, 6, 0, i5) | 0) == 1) {
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  _FcPatternObjectAdd(i8, 6, i4, 1) | 0;
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  _FcPatternObjectAddWithBinding(i8, 6, i4, 0, 1) | 0;
 }
 if ((_FcPatternObjectGet(i8, 44, 0, i5) | 0) != 1) {
  STACKTOP = i9;
  return;
 }
 i1 = _FcGetPrgname() | 0;
 if (!i1) {
  STACKTOP = i9;
  return;
 }
 _FcPatternObjectAddString(i8, 44, i1) | 0;
 STACKTOP = i9;
 return;
}

function _cff_parse_real(i1, i13, i14, i16) {
 i1 = i1 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i16 = i16 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0, i17 = 0;
 i15 = (i16 | 0) != 0;
 if (i15) {
  HEAP32[i16 >> 2] = 0;
  i3 = i1;
  i8 = 0;
  i2 = 0;
  i1 = 0;
  i4 = 4;
 } else {
  i3 = i1;
  i8 = 0;
  i2 = 0;
  i1 = 0;
  i4 = 4;
 }
 L3 : while (1) {
  while (1) {
   if (i4) {
    i3 = i3 + 1 | 0;
    if (i3 >>> 0 >= i13 >>> 0) {
     i1 = 0;
     break L3;
    }
   }
   i5 = HEAP8[i3 >> 0] | 0;
   i6 = (i5 & 255) >>> i4 & 15;
   i4 = 4 - i4 | 0;
   if ((i6 | 0) != 14) break; else i2 = 1;
  }
  if (i6 >>> 0 > 9) {
   i12 = i8;
   i7 = 0;
   i9 = 15;
   break;
  }
  i12 = (i6 | i1 | 0) == 0;
  i1 = i12 ? i1 : i6 + (i1 * 10 | 0) | 0;
  i8 = ((i12 ^ 1) & 1) + i8 | 0;
  if ((i1 | 0) > 214748363) {
   i5 = 0;
   i9 = 4;
   break;
  }
 }
 L12 : do if ((i9 | 0) == 4) L13 : while (1) {
  i9 = 0;
  i7 = i5;
  while (1) {
   if (i4) {
    i3 = i3 + 1 | 0;
    if (i3 >>> 0 >= i13 >>> 0) {
     i1 = 0;
     break L12;
    }
   }
   i5 = HEAP8[i3 >> 0] | 0;
   i6 = (i5 & 255) >>> i4 & 15;
   i4 = 4 - i4 | 0;
   if ((i6 | 0) == 14) {
    i5 = i7;
    i2 = 1;
    i9 = 4;
    continue L13;
   }
   if (i6 >>> 0 > 9) {
    i12 = i8;
    i9 = 15;
    break L12;
   }
   i7 = i7 + 1 | 0;
  }
 } while (0);
 L22 : do if ((i9 | 0) == 15) {
  L24 : do if ((i6 | 0) == 10) {
   i8 = 0;
   while (1) {
    while (1) {
     if (i4) {
      i5 = i3 + 1 | 0;
      if (i5 >>> 0 >= i13 >>> 0) {
       i1 = 0;
       break L22;
      }
      i3 = i5;
      i5 = HEAP8[i5 >> 0] | 0;
     }
     i6 = (i5 & 255) >>> i4 & 15;
     i4 = 4 - i4 | 0;
     if (i6 >>> 0 > 9) {
      i11 = i8;
      break L24;
     }
     if (i6 | i1 | 0) break;
     i7 = i7 + -1 | 0;
    }
    i11 = (i1 | 0) < 214748364 & (i8 | 0) < 9;
    i8 = (i11 & 1) + i8 | 0;
    i1 = i11 ? i6 + (i1 * 10 | 0) | 0 : i1;
   }
  } else i11 = 0; while (0);
  i10 = (i6 | 0) == 12;
  if ((i6 + -11 | 0) >>> 0 < 2) {
   i8 = 0;
   i9 = 0;
   while (1) {
    if (i4) {
     i5 = i3 + 1 | 0;
     if (i5 >>> 0 >= i13 >>> 0) {
      i1 = 0;
      break L22;
     }
     i3 = i5;
     i5 = HEAP8[i5 >> 0] | 0;
    }
    i6 = (i5 & 255) >>> i4 & 15;
    if (i6 >>> 0 > 9) break;
    i17 = (i9 | 0) > 1e3;
    i8 = i17 ? 1 : i8;
    i9 = i17 ? i9 : i6 + (i9 * 10 | 0) | 0;
    i4 = 4 - i4 | 0;
   }
   i4 = i8;
   i3 = i10 ? 0 - i9 | 0 : i9;
  } else {
   i4 = 0;
   i3 = 0;
  }
  if (!i1) i1 = 0; else {
   do if (!i4) {
    i3 = i7 + i14 + i3 | 0;
    i6 = i3 + i12 | 0;
    if (!i15) {
     if ((i6 | 0) > 5) {
      i1 = 2147483647;
      break L22;
     }
     if ((i6 | 0) < -5) break;
     if ((i6 | 0) < 0) {
      i3 = i11 + i12 | 0;
      i1 = (i1 | 0) / (HEAP32[9356 + (0 - i6 << 2) >> 2] | 0) | 0;
     } else i3 = i11 - i3 | 0;
     i17 = (i3 | 0) == 10;
     i4 = i17 ? (i1 | 0) / 10 | 0 : i1;
     i1 = (i17 << 31 >> 31) + i3 | 0;
     if ((i1 | 0) <= 0) {
      i1 = Math_imul(HEAP32[9356 + (0 - i1 << 2) >> 2] | 0, i4) | 0;
      i1 = (i1 | 0) > 32767 ? 2147483647 : i1 << 16;
      break L22;
     }
     i1 = HEAP32[9356 + (i1 << 2) >> 2] | 0;
     if (((i4 | 0) / (i1 | 0) | 0 | 0) > 32767) {
      i1 = 0;
      break L22;
     }
     i1 = _FT_DivFix(i4, i1) | 0;
     break L22;
    }
    i4 = i11 + i12 | 0;
    if ((i4 | 0) >= 6) {
     i3 = HEAP32[9356 + (i4 + -5 << 2) >> 2] | 0;
     if (((i1 | 0) / (i3 | 0) | 0 | 0) > 32767) {
      i1 = _FT_DivFix(i1, HEAP32[9356 + (i4 + -4 << 2) >> 2] | 0) | 0;
      HEAP32[i16 >> 2] = i6 + -4;
      break L22;
     } else {
      i1 = _FT_DivFix(i1, i3) | 0;
      HEAP32[i16 >> 2] = i6 + -5;
      break L22;
     }
    }
    if ((i1 | 0) > 32767) {
     i1 = _FT_DivFix(i1, 10) | 0;
     HEAP32[i16 >> 2] = 1 - i4 + i6;
     break L22;
    }
    do if ((i6 | 0) > 0) {
     i3 = (i6 | 0) < 5 ? i6 : 5;
     i5 = i3 - i4 | 0;
     if ((i5 | 0) <= 0) {
      i3 = i6 - i4 | 0;
      break;
     }
     i3 = i6 - i3 | 0;
     i1 = Math_imul(HEAP32[9356 + (i5 << 2) >> 2] | 0, i1) | 0;
     if ((i1 | 0) > 32767) {
      i3 = i3 + 1 | 0;
      i1 = (i1 >>> 0) / 10 | 0;
     }
    } else i3 = i6 - i4 | 0; while (0);
    HEAP32[i16 >> 2] = i3;
    i1 = i1 << 16;
    break L22;
   } else if (!i10) {
    i1 = 2147483647;
    break L22;
   } while (0);
   i1 = 0;
  }
 } while (0);
 return ((i2 | 0) == 0 ? i1 : 0 - i1 | 0) | 0;
}

function ___rem_pio2(d2, i13) {
 d2 = +d2;
 i13 = i13 | 0;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, d15 = 0.0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i14 + 16 | 0;
 i9 = i14;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i1 = HEAP32[tempDoublePtr >> 2] | 0;
 i6 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i10 = _bitshift64Lshr(i1 | 0, i6 | 0, 63) | 0;
 i12 = i6 & 2147483647;
 do if (i12 >>> 0 < 1074752123) if ((i6 & 1048575 | 0) == 598523) i11 = 21; else {
  i1 = (i10 | 0) != 0;
  if (i12 >>> 0 < 1073928573) if (i1) {
   d5 = d2 + 1.5707963267341256;
   d7 = d5 + 6.077100506506192e-11;
   HEAPF64[i13 >> 3] = d7;
   HEAPF64[i13 + 8 >> 3] = d5 - d7 + 6.077100506506192e-11;
   i1 = -1;
   break;
  } else {
   d5 = d2 + -1.5707963267341256;
   d7 = d5 + -6.077100506506192e-11;
   HEAPF64[i13 >> 3] = d7;
   HEAPF64[i13 + 8 >> 3] = d5 - d7 + -6.077100506506192e-11;
   i1 = 1;
   break;
  } else if (i1) {
   d5 = d2 + 3.1415926534682512;
   d7 = d5 + 1.2154201013012384e-10;
   HEAPF64[i13 >> 3] = d7;
   HEAPF64[i13 + 8 >> 3] = d5 - d7 + 1.2154201013012384e-10;
   i1 = -2;
   break;
  } else {
   d5 = d2 + -3.1415926534682512;
   d7 = d5 + -1.2154201013012384e-10;
   HEAPF64[i13 >> 3] = d7;
   HEAPF64[i13 + 8 >> 3] = d5 - d7 + -1.2154201013012384e-10;
   i1 = 2;
   break;
  }
 } else {
  if (i12 >>> 0 < 1075594812) if (i12 >>> 0 < 1075183037) {
   if ((i12 | 0) == 1074977148) {
    i11 = 21;
    break;
   }
   if (!i10) {
    d5 = d2 + -4.712388980202377;
    d7 = d5 + -1.8231301519518578e-10;
    HEAPF64[i13 >> 3] = d7;
    HEAPF64[i13 + 8 >> 3] = d5 - d7 + -1.8231301519518578e-10;
    i1 = 3;
    break;
   } else {
    d5 = d2 + 4.712388980202377;
    d7 = d5 + 1.8231301519518578e-10;
    HEAPF64[i13 >> 3] = d7;
    HEAPF64[i13 + 8 >> 3] = d5 - d7 + 1.8231301519518578e-10;
    i1 = -3;
    break;
   }
  } else {
   if ((i12 | 0) == 1075388923) {
    i11 = 21;
    break;
   }
   if (!i10) {
    d5 = d2 + -6.2831853069365025;
    d7 = d5 + -2.430840202602477e-10;
    HEAPF64[i13 >> 3] = d7;
    HEAPF64[i13 + 8 >> 3] = d5 - d7 + -2.430840202602477e-10;
    i1 = 4;
    break;
   } else {
    d5 = d2 + 6.2831853069365025;
    d7 = d5 + 2.430840202602477e-10;
    HEAPF64[i13 >> 3] = d7;
    HEAPF64[i13 + 8 >> 3] = d5 - d7 + 2.430840202602477e-10;
    i1 = -4;
    break;
   }
  }
  if (i12 >>> 0 < 1094263291) i11 = 21; else {
   if (i12 >>> 0 > 2146435071) {
    d7 = d2 - d2;
    HEAPF64[i13 + 8 >> 3] = d7;
    HEAPF64[i13 >> 3] = d7;
    i1 = 0;
    break;
   }
   HEAP32[tempDoublePtr >> 2] = i1;
   HEAP32[tempDoublePtr + 4 >> 2] = i6 & 1048575 | 1096810496;
   d2 = +HEAPF64[tempDoublePtr >> 3];
   i1 = 0;
   do {
    d7 = +(~~d2 | 0);
    HEAPF64[i8 + (i1 << 3) >> 3] = d7;
    d2 = (d2 - d7) * 16777216.0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 2);
   HEAPF64[i8 + 16 >> 3] = d2;
   if (d2 == 0.0) {
    i1 = 1;
    while (1) if (+HEAPF64[i8 + (i1 << 3) >> 3] == 0.0) i1 = i1 + -1 | 0; else break;
   } else i1 = 2;
   i1 = ___rem_pio2_large(i8, i9, (i12 >>> 20) + -1046 | 0, i1 + 1 | 0, 1) | 0;
   d3 = +HEAPF64[i9 >> 3];
   d2 = +HEAPF64[i9 + 8 >> 3];
   if (!i10) {
    HEAPF64[i13 >> 3] = d3;
    HEAPF64[i13 + 8 >> 3] = d2;
    break;
   } else {
    HEAPF64[i13 >> 3] = -d3;
    HEAPF64[i13 + 8 >> 3] = -d2;
    i1 = 0 - i1 | 0;
    break;
   }
  }
 } while (0);
 if ((i11 | 0) == 21) {
  d5 = d2 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
  i1 = ~~d5;
  d3 = d2 - d5 * 1.5707963267341256;
  d4 = d5 * 6.077100506506192e-11;
  d2 = d3 - d4;
  HEAPF64[i13 >> 3] = d2;
  HEAPF64[tempDoublePtr >> 3] = d2;
  i11 = _bitshift64Lshr(HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] | 0, 52) | 0;
  i6 = i12 >>> 20;
  if ((i6 - (i11 & 2047) | 0) > 16) {
   d4 = d5 * 6.077100506303966e-11;
   d7 = d3 - d4;
   d4 = d5 * 2.0222662487959506e-21 - (d3 - d7 - d4);
   d2 = d7 - d4;
   HEAPF64[i13 >> 3] = d2;
   HEAPF64[tempDoublePtr >> 3] = d2;
   i12 = _bitshift64Lshr(HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] | 0, 52) | 0;
   d15 = d5 * 2.0222662487111665e-21;
   d3 = d7 - d15;
   d5 = d5 * 8.4784276603689e-32 - (d7 - d3 - d15);
   if ((i6 - (i12 & 2047) | 0) > 49) {
    d2 = d3 - d5;
    HEAPF64[i13 >> 3] = d2;
    d4 = d5;
   } else d3 = d7;
  }
  HEAPF64[i13 + 8 >> 3] = d3 - d2 - d4;
 }
 STACKTOP = i14;
 return i1 | 0;
}

function _psh_hint_table_init(i5, i4, i6, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i21 = i23;
 i22 = HEAP32[i4 >> 2] | 0;
 i2 = i22 << 1;
 i20 = _ft_mem_realloc(i1, 4, 0, i2, 0, i21) | 0;
 i3 = i5 + 12 | 0;
 HEAP32[i3 >> 2] = i20;
 if (HEAP32[i21 >> 2] | 0) {
  i22 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 i19 = _ft_mem_realloc(i1, 28, 0, i22, 0, i21) | 0;
 i20 = i5 + 8 | 0;
 HEAP32[i20 >> 2] = i19;
 if (HEAP32[i21 >> 2] | 0) {
  i22 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 i19 = _ft_mem_realloc(i1, 16, 0, i2 | 1, 0, i21) | 0;
 HEAP32[i5 + 24 >> 2] = i19;
 if (HEAP32[i21 >> 2] | 0) {
  i22 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 HEAP32[i5 >> 2] = i22;
 i19 = i5 + 16 | 0;
 HEAP32[i19 >> 2] = (HEAP32[i3 >> 2] | 0) + (i22 << 2);
 i18 = i5 + 4 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 0;
 HEAP32[i5 + 28 >> 2] = 0;
 if (i22 | 0) {
  i1 = HEAP32[i4 + 8 >> 2] | 0;
  i2 = HEAP32[i20 >> 2] | 0;
  i3 = i22;
  while (1) {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 8 >> 2];
   i3 = i3 + -1 | 0;
   if (!i3) break; else {
    i1 = i1 + 12 | 0;
    i2 = i2 + 28 | 0;
   }
  }
 }
 if (!i6) i1 = 0; else {
  i1 = HEAP32[i6 + 8 >> 2] | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i5 + 32 >> 2] = i6;
  if (!i2) i1 = 0; else {
   i17 = i1;
   i1 = 0;
   while (1) {
    i16 = HEAP32[i17 >> 2] | 0;
    if (i16) {
     i15 = 0;
     i5 = HEAP32[i17 + 8 >> 2] | 0;
     i4 = 0;
     i3 = 0;
     while (1) {
      if (!i3) {
       i3 = 128;
       i14 = i5 + 1 | 0;
       i4 = HEAPU8[i5 >> 0] | 0;
      } else i14 = i5;
      if (i3 & i4) {
       i7 = HEAP32[i20 >> 2] | 0;
       i13 = i7 + (i15 * 28 | 0) | 0;
       if (i22 >>> 0 > i15 >>> 0) {
        i5 = i7 + (i15 * 28 | 0) + 16 | 0;
        i6 = HEAP32[i5 >> 2] | 0;
        if (!(i6 & 4)) {
         HEAP32[i5 >> 2] = i6 | 4;
         i11 = HEAP32[i19 >> 2] | 0;
         i12 = i7 + (i15 * 28 | 0) + 20 | 0;
         HEAP32[i12 >> 2] = 0;
         L30 : do if (i1 | 0) {
          i10 = HEAP32[i13 >> 2] | 0;
          i7 = (HEAP32[i7 + (i15 * 28 | 0) + 4 >> 2] | 0) + i10 | 0;
          i5 = i11;
          i6 = i1;
          while (1) {
           i8 = HEAP32[i5 >> 2] | 0;
           i9 = HEAP32[i8 >> 2] | 0;
           if ((i7 | 0) >= (i9 | 0)) if (((HEAP32[i8 + 4 >> 2] | 0) + i9 | 0) >= (i10 | 0)) break;
           i6 = i6 + -1 | 0;
           if (!i6) break L30; else i5 = i5 + 4 | 0;
          }
          HEAP32[i12 >> 2] = i8;
         } while (0);
         if (i1 >>> 0 < i22 >>> 0) {
          i12 = i1 + 1 | 0;
          HEAP32[i18 >> 2] = i12;
          HEAP32[i11 + (i1 << 2) >> 2] = i13;
          i1 = i12;
         }
        }
       }
      }
      i15 = i15 + 1 | 0;
      if ((i15 | 0) == (i16 | 0)) break; else {
       i5 = i14;
       i3 = i3 >> 1;
      }
     }
    }
    i2 = i2 + -1 | 0;
    if (!i2) break; else i17 = i17 + 16 | 0;
   }
  }
 }
 if ((i1 | 0) != (i22 | 0) & (i22 | 0) != 0) i11 = 0; else {
  i22 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 do {
  i4 = HEAP32[i20 >> 2] | 0;
  i10 = i4 + (i11 * 28 | 0) | 0;
  if (i22 >>> 0 > i11 >>> 0) {
   i2 = i4 + (i11 * 28 | 0) + 16 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (!(i3 & 4)) {
    HEAP32[i2 >> 2] = i3 | 4;
    i8 = HEAP32[i19 >> 2] | 0;
    i9 = i4 + (i11 * 28 | 0) + 20 | 0;
    HEAP32[i9 >> 2] = 0;
    L50 : do if (i1 | 0) {
     i7 = HEAP32[i10 >> 2] | 0;
     i4 = (HEAP32[i4 + (i11 * 28 | 0) + 4 >> 2] | 0) + i7 | 0;
     i2 = i8;
     i3 = i1;
     while (1) {
      i5 = HEAP32[i2 >> 2] | 0;
      i6 = HEAP32[i5 >> 2] | 0;
      if ((i4 | 0) >= (i6 | 0)) if (((HEAP32[i5 + 4 >> 2] | 0) + i6 | 0) >= (i7 | 0)) break;
      i3 = i3 + -1 | 0;
      if (!i3) break L50; else i2 = i2 + 4 | 0;
     }
     HEAP32[i9 >> 2] = i5;
    } while (0);
    if (i1 >>> 0 < i22 >>> 0) {
     i17 = i1 + 1 | 0;
     HEAP32[i18 >> 2] = i17;
     HEAP32[i8 + (i1 << 2) >> 2] = i10;
     i1 = i17;
    }
   }
  }
  i11 = i11 + 1 | 0;
 } while ((i11 | 0) != (i22 | 0));
 i22 = HEAP32[i21 >> 2] | 0;
 STACKTOP = i23;
 return i22 | 0;
}

function _cid_slot_load_glyph(i21, i9, i3, i1) {
 i21 = i21 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 1552 | 0;
 i17 = i23 + 40 | 0;
 i10 = i23 + 24 | 0;
 i22 = i23 + 8 | 0;
 i12 = i23;
 i8 = HEAP32[i21 + 4 >> 2] | 0;
 i2 = HEAP32[i8 + 136 >> 2] | 0;
 if ((HEAP32[i8 + 16 >> 2] | 0) >>> 0 <= i3 >>> 0) {
  i22 = 6;
  STACKTOP = i23;
  return i22 | 0;
 }
 i19 = (i1 & 1024 | 0) == 0 ? i1 : i1 | 3;
 i14 = i21 + 164 | 0;
 HEAP32[i14 >> 2] = HEAP32[i9 + 16 >> 2];
 i15 = i21 + 168 | 0;
 HEAP32[i15 >> 2] = HEAP32[i9 + 20 >> 2];
 i20 = i21 + 108 | 0;
 HEAP16[i21 + 110 >> 1] = 0;
 HEAP16[i20 >> 1] = 0;
 i6 = (i19 & 1 | 0) == 0;
 i16 = i6 ? (i19 >>> 1 & 1 ^ 1) & 255 : 0;
 i7 = i21 + 72 | 0;
 HEAP32[i7 >> 2] = 1869968492;
 i2 = i2 + 12 | 0;
 i1 = FUNCTION_TABLE_iiiiiiiiii[HEAP32[HEAP32[i2 >> 2] >> 2] & 1](i17, i8, i9, i21, 0, 0, i16, i19 >>> 16 & 15, 183) | 0;
 if (i1 | 0) {
  i22 = i1;
  STACKTOP = i23;
  return i22 | 0;
 }
 i4 = i19 & 1024;
 HEAP8[i17 + 69 >> 0] = i4 >>> 10;
 i1 = _cid_load_glyph(i17, i3) | 0;
 if (i1 | 0) {
  i22 = i1;
  STACKTOP = i23;
  return i22 | 0;
 }
 i3 = i17 + 1376 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i3 = HEAP32[i17 + 1392 >> 2] | 0;
 i5 = HEAP32[i17 + 1396 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 127](i17);
 i1 = i21 + 124 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & 1 | 4;
 if (i4 | 0) {
  i22 = HEAP32[i21 + 156 >> 2] | 0;
  i20 = (_FT_RoundFix(HEAP32[i17 + 32 >> 2] | 0) | 0) >> 16;
  HEAP32[i21 + 32 >> 2] = i20;
  i20 = (_FT_RoundFix(HEAP32[i17 + 40 >> 2] | 0) | 0) >> 16;
  HEAP32[i21 + 40 >> 2] = i20;
  i21 = i22 + 12 | 0;
  HEAP32[i21 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i21 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i21 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i21 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
  HEAP32[i22 + 28 >> 2] = i3;
  HEAP32[i22 + 32 >> 2] = i5;
  HEAP8[i22 + 8 >> 0] = 1;
  i22 = 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 i11 = i21 + 24 | 0;
 i4 = i17 + 40 | 0;
 i2 = (_FT_RoundFix(HEAP32[i4 >> 2] | 0) | 0) >> 16;
 i13 = i21 + 40 | 0;
 HEAP32[i13 >> 2] = i2;
 i4 = (_FT_RoundFix(HEAP32[i4 >> 2] | 0) | 0) >> 16;
 HEAP32[i21 + 56 >> 2] = i4;
 HEAP8[(HEAP32[i21 + 156 >> 2] | 0) + 8 >> 0] = 0;
 i4 = (HEAP32[i8 + 208 >> 2] | 0) - (HEAP32[i8 + 200 >> 2] | 0) >> 16;
 i8 = i21 + 52 | 0;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i21 + 60 >> 2] = i4;
 HEAP32[i7 >> 2] = 1869968492;
 if ((HEAPU16[i9 + 14 >> 1] | 0) < 24) HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 256;
 _FT_Outline_Transform(i20, i10);
 _FT_Outline_Translate(i20, i3, i5);
 HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
 i9 = i12 + 4 | 0;
 HEAP32[i9 >> 2] = 0;
 _FT_Vector_Transform(i12, i10);
 HEAP32[i13 >> 2] = (HEAP32[i12 >> 2] | 0) + i3;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 _FT_Vector_Transform(i12, i10);
 HEAP32[i8 >> 2] = (HEAP32[i9 >> 2] | 0) + i5;
 if (i6) {
  i1 = HEAP32[i17 + 16 >> 2] | 0;
  i2 = HEAP32[i1 + 4 >> 2] | 0;
  i4 = HEAP32[i14 >> 2] | 0;
  i3 = HEAP32[i15 >> 2] | 0;
  if (!(i16 << 24 >> 24)) i18 = 11; else if (!(HEAP32[i17 + 72 >> 2] | 0)) i18 = 11;
  if ((i18 | 0) == 11) {
   i1 = HEAP16[i1 + 2 >> 1] | 0;
   if (i1 << 16 >> 16 > 0) {
    i1 = i1 << 16 >> 16;
    while (1) {
     i18 = _FT_MulFix(HEAP32[i2 >> 2] | 0, i4) | 0;
     HEAP32[i2 >> 2] = i18;
     i18 = i2 + 4 | 0;
     i17 = _FT_MulFix(HEAP32[i18 >> 2] | 0, i3) | 0;
     HEAP32[i18 >> 2] = i17;
     if ((i1 | 0) > 1) {
      i2 = i2 + 8 | 0;
      i1 = i1 + -1 | 0;
     } else break;
    }
   }
  }
  i18 = _FT_MulFix(HEAP32[i13 >> 2] | 0, i4) | 0;
  HEAP32[i13 >> 2] = i18;
  i18 = _FT_MulFix(HEAP32[i8 >> 2] | 0, i3) | 0;
  HEAP32[i8 >> 2] = i18;
 }
 _FT_Outline_Get_CBox(i20, i22);
 i18 = HEAP32[i22 >> 2] | 0;
 HEAP32[i11 >> 2] = (HEAP32[i22 + 8 >> 2] | 0) - i18;
 i20 = HEAP32[i22 + 12 >> 2] | 0;
 HEAP32[i21 + 28 >> 2] = i20 - (HEAP32[i22 + 4 >> 2] | 0);
 HEAP32[i21 + 32 >> 2] = i18;
 HEAP32[i21 + 36 >> 2] = i20;
 if (i19 & 16 | 0) _ft_synthesize_vertical_metrics(i11, HEAP32[i8 >> 2] | 0);
 i22 = 0;
 STACKTOP = i23;
 return i22 | 0;
}

function _af_cjk_metrics_init_widths(i10, i5) {
 i10 = i10 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 10064 | 0;
 i11 = i13 + 3192 | 0;
 i6 = i13 + 4 | 0;
 i8 = i13;
 i9 = HEAP32[i5 + 100 >> 2] | 0;
 _memset(i11 + 4 | 0, 0, 2996) | 0;
 HEAP32[i11 >> 2] = i9;
 i9 = i10 + 52 | 0;
 HEAP32[i9 >> 2] = 0;
 i12 = i10 + 1624 | 0;
 HEAP32[i12 >> 2] = 0;
 i2 = HEAP32[23324 + (HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] << 2) >> 2] | 0;
 i3 = (i10 | 0) == 0;
 if (i3) i4 = 3; else {
  i1 = _FT_Get_Char_Index(HEAP32[HEAP32[i10 + 36 >> 2] >> 2] | 0, HEAP32[i2 + 8 >> 2] | 0) | 0;
  if (!i1) i4 = 3; else i4 = 7;
 }
 if ((i4 | 0) == 3) {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if (!((i1 | 0) == 0 | i3)) {
   i1 = _FT_Get_Char_Index(HEAP32[HEAP32[i10 + 36 >> 2] >> 2] | 0, i1) | 0;
   if (!i1) {
    i1 = HEAP32[i2 + 16 >> 2] | 0;
    if (!(i3 | (i1 | 0) == 0)) {
     i1 = _FT_Get_Char_Index(HEAP32[HEAP32[i10 + 36 >> 2] >> 2] | 0, i1) | 0;
     if (i1 | 0) i4 = 7;
    }
   } else i4 = 7;
  }
 }
 do if ((i4 | 0) == 7) if (!(_FT_Load_Glyph(i5, i1, 1) | 0)) {
  i1 = HEAP32[i5 + 84 >> 2] | 0;
  if ((HEAP16[i1 + 110 >> 1] | 0) >= 1) {
   _memset(i6 | 0, 0, 3188) | 0;
   i7 = i6 + 40 | 0;
   HEAP32[i7 >> 2] = HEAP32[i10 + 40 >> 2];
   HEAP32[i6 + 8 >> 2] = 65536;
   HEAP32[i6 + 12 >> 2] = 65536;
   HEAP32[i6 + 16 >> 2] = 0;
   HEAP32[i6 + 20 >> 2] = 0;
   HEAP32[i6 + 4 >> 2] = i5;
   HEAP32[i6 + 24 >> 2] = 0;
   HEAP32[i6 + 28 >> 2] = 0;
   HEAP32[i11 + 2988 >> 2] = i6;
   HEAP32[i11 + 2980 >> 2] = 0;
   if (!(_af_glyph_hints_reload(i11, i1 + 108 | 0) | 0)) {
    HEAP32[i8 >> 2] = 0;
    if (!(_af_latin_hints_compute_segments(i11, 0) | 0)) {
     _af_latin_hints_link_segments(i11, 0, 0, 0);
     i1 = HEAP32[i11 + 52 >> 2] | 0;
     i6 = HEAP32[i11 + 44 >> 2] | 0;
     i4 = i1 + (i6 * 48 | 0) | 0;
     if ((i6 | 0) > 0) {
      i2 = 0;
      do {
       i3 = HEAP32[i1 + 20 >> 2] | 0;
       if (i3) if (i3 >>> 0 > i1 >>> 0 ? (HEAP32[i3 + 20 >> 2] | 0) == (i1 | 0) : 0) {
        i3 = (HEAP16[i1 + 2 >> 1] | 0) - (HEAP16[i3 + 2 >> 1] | 0) | 0;
        if (i2 >>> 0 < 16) {
         HEAP32[i10 + 56 + (i2 * 12 | 0) >> 2] = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
         i2 = i2 + 1 | 0;
        }
       }
       i1 = i1 + 48 | 0;
      } while (i1 >>> 0 < i4 >>> 0);
      HEAP32[i8 >> 2] = i2;
     }
     _af_sort_and_quantize_widths(i8, i10 + 56 | 0, ((HEAP32[i7 >> 2] | 0) >>> 0) / 100 | 0);
     HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
     HEAP32[i8 >> 2] = 0;
     if (!(_af_latin_hints_compute_segments(i11, 1) | 0)) {
      _af_latin_hints_link_segments(i11, 0, 0, 1);
      i1 = HEAP32[i11 + 1520 >> 2] | 0;
      i6 = HEAP32[i11 + 1512 >> 2] | 0;
      i4 = i1 + (i6 * 48 | 0) | 0;
      if ((i6 | 0) > 0) {
       i2 = 0;
       do {
        i3 = HEAP32[i1 + 20 >> 2] | 0;
        if (i3) if (i3 >>> 0 > i1 >>> 0 ? (HEAP32[i3 + 20 >> 2] | 0) == (i1 | 0) : 0) {
         i3 = (HEAP16[i1 + 2 >> 1] | 0) - (HEAP16[i3 + 2 >> 1] | 0) | 0;
         if (i2 >>> 0 < 16) {
          HEAP32[i10 + 1628 + (i2 * 12 | 0) >> 2] = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
          i2 = i2 + 1 | 0;
         }
        }
        i1 = i1 + 48 | 0;
       } while (i1 >>> 0 < i4 >>> 0);
       HEAP32[i8 >> 2] = i2;
      }
      _af_sort_and_quantize_widths(i8, i10 + 1628 | 0, ((HEAP32[i7 >> 2] | 0) >>> 0) / 100 | 0);
      HEAP32[i12 >> 2] = HEAP32[i8 >> 2];
      break;
     }
    }
   }
  }
 } while (0);
 i2 = i10 + 40 | 0;
 if (!(HEAP32[i9 >> 2] | 0)) i1 = ((HEAP32[i2 >> 2] | 0) * 50 | 0) / 2048 | 0; else i1 = HEAP32[i10 + 56 >> 2] | 0;
 HEAP32[i10 + 248 >> 2] = (i1 | 0) / 5 | 0;
 HEAP32[i10 + 252 >> 2] = i1;
 HEAP8[i10 + 256 >> 0] = 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  i9 = ((HEAP32[i2 >> 2] | 0) * 50 | 0) / 2048 | 0;
  i8 = (i9 | 0) / 5 | 0;
  i12 = i10 + 1820 | 0;
  HEAP32[i12 >> 2] = i8;
  i12 = i10 + 1824 | 0;
  HEAP32[i12 >> 2] = i9;
  i12 = i10 + 1828 | 0;
  HEAP8[i12 >> 0] = 0;
  _af_glyph_hints_done(i11);
  STACKTOP = i13;
  return;
 } else {
  i9 = HEAP32[i10 + 1628 >> 2] | 0;
  i8 = (i9 | 0) / 5 | 0;
  i12 = i10 + 1820 | 0;
  HEAP32[i12 >> 2] = i8;
  i12 = i10 + 1824 | 0;
  HEAP32[i12 >> 2] = i9;
  i12 = i10 + 1828 | 0;
  HEAP8[i12 >> 0] = 0;
  _af_glyph_hints_done(i11);
  STACKTOP = i13;
  return;
 }
}

function _parserCreate(i7, i3, i8, i2) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 do if (!i3) {
  i1 = _malloc(500) | 0;
  if (!i1) {
   i8 = 0;
   return i8 | 0;
  } else {
   HEAP32[i1 + 12 >> 2] = 51;
   HEAP32[i1 + 16 >> 2] = 194;
   HEAP32[i1 + 20 >> 2] = 70;
   i3 = 51;
   break;
  }
 } else {
  i1 = FUNCTION_TABLE_ii[HEAP32[i3 >> 2] & 63](500) | 0;
  if (!i1) {
   i8 = 0;
   return i8 | 0;
  } else {
   i6 = HEAP32[i3 >> 2] | 0;
   HEAP32[i1 + 12 >> 2] = i6;
   HEAP32[i1 + 16 >> 2] = HEAP32[i3 + 4 >> 2];
   HEAP32[i1 + 20 >> 2] = HEAP32[i3 + 8 >> 2];
   i3 = i6;
   break;
  }
 } while (0);
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 380 >> 2] = 16;
 i6 = i1 + 12 | 0;
 i5 = FUNCTION_TABLE_ii[i3 & 63](256) | 0;
 i4 = i1 + 392 | 0;
 HEAP32[i4 >> 2] = i5;
 if (!i5) {
  FUNCTION_TABLE_vi[HEAP32[i1 + 20 >> 2] & 127](i1);
  i8 = 0;
  return i8 | 0;
 }
 i3 = FUNCTION_TABLE_ii[HEAP32[i6 >> 2] & 63](1024) | 0;
 i5 = i1 + 44 | 0;
 HEAP32[i5 >> 2] = i3;
 if (!i3) {
  i8 = i1 + 20 | 0;
  FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](HEAP32[i4 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](i1);
  i8 = 0;
  return i8 | 0;
 }
 HEAP32[i1 + 48 >> 2] = i3 + 1024;
 do if (!i2) {
  i2 = FUNCTION_TABLE_ii[HEAP32[i6 >> 2] & 63](188) | 0;
  if (i2 | 0) {
   i5 = i2 + 80 | 0;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i5 + 4 >> 2] = 0;
   HEAP32[i5 + 8 >> 2] = 0;
   HEAP32[i5 + 12 >> 2] = 0;
   HEAP32[i5 + 16 >> 2] = 0;
   HEAP32[i2 + 100 >> 2] = i6;
   i5 = i2 + 104 | 0;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i5 + 4 >> 2] = 0;
   HEAP32[i5 + 8 >> 2] = 0;
   HEAP32[i5 + 12 >> 2] = 0;
   HEAP32[i5 + 16 >> 2] = 0;
   HEAP32[i2 + 124 >> 2] = i6;
   HEAP8[i2 + 4 >> 0] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   HEAP32[i2 + 12 >> 2] = 0;
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 16 >> 2] = i6;
   HEAP8[i2 + 24 >> 0] = 0;
   HEAP32[i2 + 28 >> 2] = 0;
   HEAP32[i2 + 32 >> 2] = 0;
   HEAP32[i2 + 20 >> 2] = 0;
   HEAP32[i2 + 36 >> 2] = i6;
   HEAP8[i2 + 44 >> 0] = 0;
   HEAP32[i2 + 48 >> 2] = 0;
   HEAP32[i2 + 52 >> 2] = 0;
   HEAP32[i2 + 40 >> 2] = 0;
   HEAP32[i2 + 56 >> 2] = i6;
   HEAP8[i2 + 64 >> 0] = 0;
   HEAP32[i2 + 68 >> 2] = 0;
   HEAP32[i2 + 72 >> 2] = 0;
   HEAP32[i2 + 60 >> 2] = 0;
   HEAP32[i2 + 76 >> 2] = i6;
   HEAP8[i2 + 131 >> 0] = 0;
   HEAP8[i2 + 136 >> 0] = 0;
   HEAP32[i2 + 140 >> 2] = 0;
   HEAP32[i2 + 144 >> 2] = 0;
   HEAP32[i2 + 132 >> 2] = 0;
   HEAP32[i2 + 148 >> 2] = i6;
   HEAP32[i2 + 152 >> 2] = 0;
   HEAP32[i2 + 156 >> 2] = 0;
   HEAP8[i2 + 160 >> 0] = 0;
   i5 = i2 + 164 | 0;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i5 + 4 >> 2] = 0;
   HEAP32[i5 + 8 >> 2] = 0;
   HEAP32[i5 + 12 >> 2] = 0;
   HEAP32[i5 + 16 >> 2] = 0;
   HEAP32[i5 + 20 >> 2] = 0;
   HEAP8[i2 + 128 >> 0] = 1;
   HEAP8[i2 + 129 >> 0] = 0;
   HEAP8[i2 + 130 >> 0] = 0;
   break;
  }
  HEAP32[i1 + 356 >> 2] = 0;
  i8 = i1 + 20 | 0;
  FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](HEAP32[i5 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](HEAP32[i4 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 127](i1);
  i8 = 0;
  return i8 | 0;
 } while (0);
 HEAP32[i1 + 356 >> 2] = i2;
 HEAP32[i1 + 376 >> 2] = 0;
 HEAP32[i1 + 368 >> 2] = 0;
 HEAP32[i1 + 304 >> 2] = 0;
 HEAP32[i1 + 468 >> 2] = 0;
 HEAP32[i1 + 464 >> 2] = 0;
 HEAP32[i1 + 124 >> 2] = 0;
 HEAP32[i1 + 248 >> 2] = 0;
 i2 = i1 + 472 | 0;
 HEAP8[i2 >> 0] = 33;
 i3 = i1 + 236 | 0;
 HEAP8[i3 >> 0] = 0;
 HEAP8[i1 + 237 >> 0] = 0;
 HEAP32[i1 + 396 >> 2] = 0;
 HEAP32[i1 + 400 >> 2] = 0;
 HEAP8[i1 + 404 >> 0] = 0;
 i5 = i1 + 416 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i1 + 436 >> 2] = i6;
 i5 = i1 + 440 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i1 + 460 >> 2] = i6;
 _parserInit(i1, i7);
 if (i7 | 0) if (!(HEAP32[i1 + 232 >> 2] | 0)) {
  _XML_ParserFree(i1);
  i8 = 0;
  return i8 | 0;
 }
 if (!i8) {
  i8 = _XmlGetUtf8InternalEncoding() | 0;
  HEAP32[i1 + 228 >> 2] = i8;
  i8 = i1;
  return i8 | 0;
 } else {
  HEAP8[i3 >> 0] = 1;
  i7 = _XmlGetUtf8InternalEncodingNS() | 0;
  HEAP32[i1 + 228 >> 2] = i7;
  HEAP8[i2 >> 0] = HEAP8[i8 >> 0] | 0;
  i8 = i1;
  return i8 | 0;
 }
 return 0;
}

function _tt_cmap4_validate(i7, i21) {
 i7 = i7 | 0;
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i20 = i21 + 160 | 0;
 if ((i7 + 4 | 0) >>> 0 > (HEAP32[i20 >> 2] | 0) >>> 0) _ft_validator_error(i21, 8);
 i1 = (HEAPU8[i7 + 2 >> 0] | 0) << 8 | (HEAPU8[i7 + 3 >> 0] | 0);
 do if ((i7 + i1 | 0) >>> 0 > (HEAP32[i20 >> 2] | 0) >>> 0) if (!(HEAP32[i21 + 164 >> 2] | 0)) {
  i6 = (HEAP32[i20 >> 2] | 0) - i7 | 0;
  break;
 } else _ft_validator_error(i21, 8); else i6 = i1; while (0);
 if (i6 >>> 0 < 16) _ft_validator_error(i21, 8);
 i18 = HEAPU8[i7 + 7 >> 0] | 0;
 i1 = (HEAPU8[i7 + 6 >> 0] | 0) << 8 | i18;
 i19 = i21 + 164 | 0;
 if (!((HEAP32[i19 >> 2] | 0) >>> 0 < 2 | (i18 & 1 | 0) == 0)) _ft_validator_error(i21, 8);
 i18 = i1 >>> 1;
 i4 = i18 << 1;
 if (i6 >>> 0 < ((i18 << 3) + 16 | 0) >>> 0) _ft_validator_error(i21, 8);
 if ((HEAP32[i19 >> 2] | 0) >>> 0 > 1) {
  i17 = HEAP8[i7 + 9 >> 0] | 0;
  i1 = (HEAPU8[i7 + 8 >> 0] | 0) << 8 | i17 & 255;
  i2 = (HEAPU8[i7 + 10 >> 0] | 0) << 8 | (HEAPU8[i7 + 11 >> 0] | 0);
  i16 = HEAP8[i7 + 13 >> 0] | 0;
  i3 = (HEAPU8[i7 + 12 >> 0] | 0) << 8 | i16 & 255;
  if ((i16 | i17) & 1) _ft_validator_error(i21, 8);
  i17 = i1 >>> 1;
  if (!((i17 | 0) == (1 << i2 | 0) & (i17 >>> 0 <= i18 >>> 0 & i17 << 1 >>> 0 >= i18 >>> 0 & ((i3 >>> 1) + i17 | 0) == (i18 | 0)))) _ft_validator_error(i21, 8);
 }
 i3 = i7 + 14 | 0;
 i5 = i7 + 16 + i4 | 0;
 i2 = i5 + i4 | 0;
 i1 = i2 + i4 | 0;
 i17 = i1 + i4 | 0;
 if ((HEAP32[i19 >> 2] | 0) >>> 0 > 1) {
  i16 = i3 + (i4 + -2) | 0;
  if (((HEAPU8[i16 >> 0] | 0) << 8 | (HEAPU8[i16 + 1 >> 0] | 0) | 0) != 65535) _ft_validator_error(i21, 8);
 }
 if (!i18) {
  i21 = 0;
  return i21 | 0;
 }
 i15 = i18 + -1 | 0;
 i16 = i21 + 172 | 0;
 i14 = i7 + i6 | 0;
 i13 = i1;
 i9 = 0;
 i10 = 0;
 i11 = 0;
 i1 = 0;
 L33 : while (1) {
  i12 = i5;
  i5 = i5 + 2 | 0;
  i6 = i10;
  i10 = (HEAPU8[i12 >> 0] | 0) << 8 | (HEAPU8[i12 + 1 >> 0] | 0);
  i12 = i3;
  i3 = i3 + 2 | 0;
  i4 = i9;
  i9 = (HEAPU8[i12 >> 0] | 0) << 8 | (HEAPU8[i12 + 1 >> 0] | 0);
  i12 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
  i2 = i2 + 2 | 0;
  i7 = i13;
  i13 = i13 + 2 | 0;
  i8 = (HEAPU8[i7 >> 0] | 0) << 8 | (HEAPU8[i7 + 1 >> 0] | 0);
  if (i9 >>> 0 < i10 >>> 0) {
   i2 = 24;
   break;
  }
  do if ((i11 | 0) != 0 & i10 >>> 0 <= i4 >>> 0) {
   if (HEAP32[i19 >> 2] | 0) {
    i2 = 27;
    break L33;
   }
   if (i6 >>> 0 > i10 >>> 0 | i4 >>> 0 > i9 >>> 0) {
    i1 = i1 | 1;
    break;
   } else {
    i1 = i1 | 2;
    break;
   }
  } while (0);
  switch ((i8 & 65535) << 16 >> 16) {
  case -1:
   {
    if ((HEAP32[i19 >> 2] | 0) >>> 0 > 1) {
     i2 = 47;
     break L33;
    }
    if (!((i11 | 0) == (i15 | 0) & (i10 | 0) == 65535 & (i9 | 0) == 65535)) {
     i2 = 47;
     break L33;
    }
    break;
   }
  case 0:
   break;
  default:
   {
    i4 = i7 + i8 | 0;
    if (!(HEAP32[i19 >> 2] | 0)) {
     if (!((i11 | 0) == (i15 | 0) & (i10 | 0) == 65535 & (i9 | 0) == 65535)) {
      if (i4 >>> 0 < i17 >>> 0) {
       i2 = 39;
       break L33;
      }
      if ((i4 + ((i9 - i10 << 1) + 2) | 0) >>> 0 > (HEAP32[i20 >> 2] | 0) >>> 0) {
       i2 = 39;
       break L33;
      }
     }
    } else {
     if (i4 >>> 0 < i17 >>> 0) {
      i2 = 35;
      break L33;
     }
     if ((i4 + ((i9 - i10 << 1) + 2) | 0) >>> 0 > i14 >>> 0) {
      i2 = 35;
      break L33;
     }
    }
    if ((HEAP32[i19 >> 2] | 0) != 0 & i9 >>> 0 > i10 >>> 0) {
     i6 = i10;
     do {
      i7 = (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0);
      i4 = i4 + 2 | 0;
      if (i7 | 0) if ((i7 + i12 & 65535) >>> 0 >= (HEAP32[i16 >> 2] | 0) >>> 0) {
       i2 = 43;
       break L33;
      }
      i6 = i6 + 1 | 0;
     } while ((i6 | 0) != (i9 | 0));
    }
   }
  }
  i11 = i11 + 1 | 0;
  if ((i11 | 0) == (i18 | 0)) {
   i2 = 49;
   break;
  }
 }
 if ((i2 | 0) == 24) _ft_validator_error(i21, 8); else if ((i2 | 0) == 27) _ft_validator_error(i21, 8); else if ((i2 | 0) == 35) _ft_validator_error(i21, 8); else if ((i2 | 0) == 39) _ft_validator_error(i21, 8); else if ((i2 | 0) == 43) _ft_validator_error(i21, 16); else if ((i2 | 0) == 47) _ft_validator_error(i21, 8); else if ((i2 | 0) == 49) return i1 | 0;
 return 0;
}

function _FcFreeTypeLangSet(i14, i9) {
 i14 = i14 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i19 = i22 + 40 | 0;
 i18 = i22 + 32 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 16 | 0;
 i17 = i22 + 8 | 0;
 i10 = i22;
 i15 = i22 + 56 | 0;
 i16 = i22 + 48 | 0;
 do if (!i9) i2 = 0; else {
  i1 = 0;
  i2 = -1;
  L2 : while (1) {
   i8 = 2;
   i3 = 30904 + (i1 * 24 | 0) | 0;
   i4 = i9;
   while (1) {
    i5 = HEAP8[i4 >> 0] | 0;
    i6 = HEAP8[i3 >> 0] | 0;
    i7 = i5 & 255;
    i7 = (i5 + -65 & 255) < 26 ? i7 + 32 | 0 : i7;
    i5 = i6 & 255;
    i5 = (i6 + -65 & 255) < 26 ? i5 + 32 | 0 : i5;
    i6 = i7 & 255;
    i7 = i7 & 255;
    if ((i6 | 0) != (i5 & 255 | 0)) break;
    if (!(i7 << 24 >> 24)) {
     i13 = 9;
     break L2;
    }
    i8 = (i6 | 0) == 45 ? 1 : i8;
    i3 = i3 + 1 | 0;
    i4 = i4 + 1 | 0;
   }
   switch (i7 << 24 >> 24) {
   case 0:
   case 45:
    {
     switch ((i5 & 255) << 24 >> 24) {
     case 0:
     case 45:
      {
       i13 = 10;
       break;
      }
     default:
      i13 = 8;
     }
     break;
    }
   default:
    i13 = 8;
   }
   if ((i13 | 0) == 8) {
    i13 = 0;
    switch (i8 | 0) {
    case 0:
     {
      i13 = 9;
      break L2;
     }
    case 1:
     {
      i13 = 10;
      break;
     }
    default:
     {}
    }
   }
   if ((i13 | 0) == 10) i2 = (i2 | 0) == -1 ? i1 : i2;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 244) {
    i13 = 12;
    break;
   }
  }
  if ((i13 | 0) == 9) {
   i2 = 30904 + (i1 * 24 | 0) + 8 | 0;
   break;
  } else if ((i13 | 0) == 12) {
   i2 = (i2 | 0) == -1 ? 0 : 30904 + (i2 * 24 | 0) + 8 | 0;
   break;
  }
 } while (0);
 i12 = _malloc(40) | 0;
 if (!i12) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 i1 = i12 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 8;
 HEAP32[i12 >> 2] = 0;
 i1 = HEAP32[91917] | 0;
 if (i1 & 2048) {
  _printf(351372, i10) | 0;
  _FcCharSetPrint(i14);
  _putchar(10) | 0;
  i1 = HEAP32[91917] | 0;
 }
 i11 = (i2 | 0) == 0;
 i10 = i2 + 4 | 0;
 i9 = 0;
 do {
  if (i1 & 2048 | 0) {
   HEAP32[i17 >> 2] = 30904 + (i9 * 24 | 0);
   _printf(351385, i17) | 0;
   _FcCharSetPrint(30904 + (i9 * 24 | 0) + 8 | 0);
   _putchar(10) | 0;
  }
  if (i11) i13 = 22; else if (!(_FcFreeTypeIsExclusiveLang(30904 + (i9 * 24 | 0) | 0) | 0)) i13 = 22; else if ((HEAP32[30904 + (i9 * 24 | 0) + 12 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) i13 = 22;
  if ((i13 | 0) == 22) {
   i13 = 0;
   i2 = 30904 + (i9 * 24 | 0) | 0;
   i1 = 30904 + (i9 * 24 | 0) + 8 | 0;
   i8 = _FcCharSetSubtractCount(i1, i14) | 0;
   do if (HEAP32[91917] & 256 | 0) {
    if ((i8 + -1 | 0) >>> 0 >= 9) {
     HEAP32[i19 >> 2] = i2;
     HEAP32[i19 + 4 >> 2] = i8;
     _printf(351416, i19) | 0;
     break;
    }
    i7 = _FcCharSetSubtract(i1, i14) | 0;
    HEAP32[i20 >> 2] = i2;
    HEAP32[i20 + 4 >> 2] = i8;
    _printf(351396, i20) | 0;
    _putchar(123) | 0;
    i1 = _FcCharSetFirstPage(i7, i15, i16) | 0;
    if ((i1 | 0) != -1) do {
     i4 = 0;
     do {
      i5 = i15 + (i4 << 2) | 0;
      i3 = HEAP32[i5 >> 2] | 0;
      L46 : do if (i3 | 0) {
       i6 = (i4 << 5) + i1 | 0;
       i2 = 0;
       while (1) {
        if (i3 & 1 << i2 | 0) {
         HEAP32[i21 >> 2] = i6 + i2;
         _printf(351405, i21) | 0;
        }
        i2 = i2 + 1 | 0;
        if ((i2 | 0) == 32) break L46;
        i3 = HEAP32[i5 >> 2] | 0;
       }
      } while (0);
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != 8);
     i1 = _FcCharSetNextPage(i7, i15, i16) | 0;
    } while ((i1 | 0) != -1);
    _printf(351411, i18) | 0;
    _FcCharSetDestroy(i7);
   } while (0);
   if (!i8) {
    i7 = HEAPU8[63754 + i9 >> 0] | 0;
    i8 = i12 + 8 + (i7 >>> 5 << 2) | 0;
    HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 1 << (i7 & 31);
   }
  }
  i9 = i9 + 1 | 0;
  i1 = HEAP32[91917] | 0;
 } while ((i9 | 0) != 244);
 if (!(i1 & 256)) {
  i21 = i12;
  STACKTOP = i22;
  return i21 | 0;
 }
 _putchar(10) | 0;
 i21 = i12;
 STACKTOP = i22;
 return i21 | 0;
}

function _af_face_globals_new(i12, i13, i3) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i16 + 4 | 0;
 i15 = i16;
 i2 = i12 + 16 | 0;
 i14 = _ft_mem_alloc(HEAP32[i12 + 100 >> 2] | 0, (HEAP32[i2 >> 2] | 0) + 216 | 0, i15) | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if (i1 | 0) {
  i15 = i1;
  HEAP32[i13 >> 2] = i14;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[i14 >> 2] = i12;
 i6 = HEAP32[i2 >> 2] | 0;
 i9 = i14 + 4 | 0;
 HEAP32[i9 >> 2] = i6;
 i10 = i14 + 216 | 0;
 HEAP32[i14 + 8 >> 2] = i10;
 i11 = i14 + 212 | 0;
 HEAP32[i11 >> 2] = i3;
 i8 = HEAP32[i12 + 92 >> 2] | 0;
 _memset(i10 | 0, 127, i6 | 0) | 0;
 if (!(_FT_Select_Charmap(i12, 1970170211) | 0)) {
  i6 = 0;
  i1 = 22032;
  while (1) {
   i2 = HEAP32[(HEAP32[23324 + (HEAP32[i1 + 8 >> 2] << 2) >> 2] | 0) + 4 >> 2] | 0;
   if (i2 | 0) if ((HEAP32[i1 + 16 >> 2] | 0) == 10) {
    i1 = HEAP32[i2 >> 2] | 0;
    if (i1 | 0) {
     i5 = i6 & 255;
     do {
      i3 = _FT_Get_Char_Index(i12, i1) | 0;
      HEAP32[i7 >> 2] = i3;
      if (i3 | 0) if (i3 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
       i3 = i10 + i3 | 0;
       if ((HEAP8[i3 >> 0] | 0) == 127) HEAP8[i3 >> 0] = i5;
      }
      i4 = i2 + 4 | 0;
      i1 = _FT_Get_Next_Char(i12, i1, i7) | 0;
      i3 = HEAP32[i7 >> 2] | 0;
      L19 : do if (i3 | 0) do {
       if (i1 >>> 0 > (HEAP32[i4 >> 2] | 0) >>> 0) break L19;
       if (i3 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
        i3 = i10 + i3 | 0;
        if ((HEAP8[i3 >> 0] | 0) == 127) HEAP8[i3 >> 0] = i5;
       }
       i1 = _FT_Get_Next_Char(i12, i1, i7) | 0;
       i3 = HEAP32[i7 >> 2] | 0;
      } while ((i3 | 0) != 0); while (0);
      i2 = i2 + 8 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
     } while ((i1 | 0) != 0);
    }
   }
   i1 = i6 + 1 | 0;
   if ((i1 | 0) == 49) break; else {
    i6 = i1;
    i1 = HEAP32[23492 + (i1 << 2) >> 2] | 0;
   }
  }
  i1 = _FT_Get_Char_Index(i12, 48) | 0;
  if (i1 | 0) if (i1 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   i7 = i10 + i1 | 0;
   HEAP8[i7 >> 0] = HEAP8[i7 >> 0] | -128;
  }
  i1 = _FT_Get_Char_Index(i12, 49) | 0;
  if (i1 | 0) if (i1 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   i7 = i10 + i1 | 0;
   HEAP8[i7 >> 0] = HEAP8[i7 >> 0] | -128;
  }
  i1 = _FT_Get_Char_Index(i12, 50) | 0;
  if (i1 | 0) if (i1 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   i7 = i10 + i1 | 0;
   HEAP8[i7 >> 0] = HEAP8[i7 >> 0] | -128;
  }
  i1 = _FT_Get_Char_Index(i12, 51) | 0;
  if (i1 | 0) if (i1 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   i7 = i10 + i1 | 0;
   HEAP8[i7 >> 0] = HEAP8[i7 >> 0] | -128;
  }
  i1 = _FT_Get_Char_Index(i12, 52) | 0;
  if (i1 | 0) if (i1 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   i7 = i10 + i1 | 0;
   HEAP8[i7 >> 0] = HEAP8[i7 >> 0] | -128;
  }
  i1 = _FT_Get_Char_Index(i12, 53) | 0;
  if (i1 | 0) if (i1 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   i7 = i10 + i1 | 0;
   HEAP8[i7 >> 0] = HEAP8[i7 >> 0] | -128;
  }
  i1 = _FT_Get_Char_Index(i12, 54) | 0;
  if (i1 | 0) if (i1 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   i7 = i10 + i1 | 0;
   HEAP8[i7 >> 0] = HEAP8[i7 >> 0] | -128;
  }
  i1 = _FT_Get_Char_Index(i12, 55) | 0;
  if (i1 | 0) if (i1 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   i7 = i10 + i1 | 0;
   HEAP8[i7 >> 0] = HEAP8[i7 >> 0] | -128;
  }
  i1 = _FT_Get_Char_Index(i12, 56) | 0;
  if (i1 | 0) if (i1 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   i7 = i10 + i1 | 0;
   HEAP8[i7 >> 0] = HEAP8[i7 >> 0] | -128;
  }
  i1 = _FT_Get_Char_Index(i12, 57) | 0;
  if (i1 | 0) if (i1 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   i7 = i10 + i1 | 0;
   HEAP8[i7 >> 0] = HEAP8[i7 >> 0] | -128;
  }
 }
 if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0) != 127) {
  i1 = HEAP32[i9 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i4 = 0;
   do {
    i2 = i10 + i4 | 0;
    i3 = HEAPU8[i2 >> 0] | 0;
    if ((i3 & 127 | 0) == 127) {
     i1 = i3 & 128;
     HEAP8[i2 >> 0] = i1;
     HEAP8[i2 >> 0] = HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | i1;
     i1 = HEAP32[i9 >> 2] | 0;
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) < (i1 | 0));
  }
 }
 _FT_Set_Charmap(i12, i8) | 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i14 + 12 >> 2] = 0;
 i15 = 0;
 HEAP32[i13 >> 2] = i14;
 STACKTOP = i16;
 return i15 | 0;
}

function _FT_Stream_ReadFields(i14, i2, i8) {
 i14 = i14 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 if (!i2) {
  i16 = 6;
  return i16 | 0;
 }
 if (!i14) {
  i16 = 40;
  return i16 | 0;
 }
 i15 = i14 + 32 | 0;
 i16 = i14 + 36 | 0;
 i12 = i14 + 20 | 0;
 i9 = i14 + 4 | 0;
 i10 = i14 + 8 | 0;
 i11 = i14 + 28 | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 i7 = 0;
 L7 : while (1) {
  L9 : while (1) {
   i5 = HEAP8[i2 >> 0] | 0;
   switch (i5 << 24 >> 24) {
   case 4:
    break L9;
   case 25:
   case 24:
    {
     i3 = HEAPU8[i2 + 1 >> 0] | 0;
     i4 = i1 + i3 | 0;
     if (i4 >>> 0 > (HEAP32[i16 >> 2] | 0) >>> 0) {
      i3 = 85;
      break L7;
     }
     if (i5 << 24 >> 24 == 24) {
      _memcpy(i8 + (HEAPU16[i2 + 2 >> 1] | 0) | 0, i1 | 0, i3 | 0) | 0;
      i1 = i4;
     } else i1 = i4;
     break;
    }
   case 9:
   case 8:
    {
     i3 = 24;
     i4 = HEAPU8[i1 >> 0] | 0;
     i1 = i1 + 1 | 0;
     i13 = 31;
     break;
    }
   case 12:
   case 13:
    {
     i3 = 16;
     i4 = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
     i1 = i1 + 2 | 0;
     i13 = 31;
     break;
    }
   case 14:
   case 15:
    {
     i3 = 16;
     i4 = HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 >> 0];
     i1 = i1 + 2 | 0;
     i13 = 31;
     break;
    }
   case 16:
   case 17:
    {
     i3 = 0;
     i4 = HEAPU8[i1 + 1 >> 0] << 16 | HEAPU8[i1 >> 0] << 24 | HEAPU8[i1 + 2 >> 0] << 8 | HEAPU8[i1 + 3 >> 0];
     i1 = i1 + 4 | 0;
     i13 = 31;
     break;
    }
   case 18:
   case 19:
    {
     i3 = 0;
     i4 = HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24 | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 >> 0];
     i1 = i1 + 4 | 0;
     i13 = 31;
     break;
    }
   case 20:
   case 21:
    {
     i3 = 8;
     i4 = HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 >> 0] << 16 | HEAPU8[i1 + 2 >> 0];
     i1 = i1 + 3 | 0;
     i13 = 31;
     break;
    }
   case 22:
   case 23:
    {
     i3 = 8;
     i4 = HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 >> 0];
     i1 = i1 + 3 | 0;
     i13 = 31;
     break;
    }
   default:
    {
     i13 = 30;
     break L7;
    }
   }
   L22 : do if ((i13 | 0) == 31) {
    i13 = 0;
    i3 = (i5 & 1) == 0 ? i4 : i4 << i3 >> i3;
    i4 = i8 + (HEAPU16[i2 + 2 >> 1] | 0) | 0;
    switch (HEAP8[i2 + 1 >> 0] | 0) {
    case 1:
     {
      HEAP8[i4 >> 0] = i3;
      break L22;
     }
    case 2:
     {
      HEAP16[i4 >> 1] = i3;
      break L22;
     }
    case 4:
     {
      HEAP32[i4 >> 2] = i3;
      break L22;
     }
    default:
     {
      HEAP32[i4 >> 2] = i3;
      break L22;
     }
    }
   } while (0);
   i2 = i2 + 4 | 0;
  }
  i1 = HEAP16[i2 + 2 >> 1] | 0;
  i6 = i1 & 65535;
  i3 = HEAP32[i12 >> 2] | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  if (!i3) {
   i1 = HEAP32[i10 >> 2] | 0;
   if (i4 >>> 0 <= i1 >>> 0 | (i4 - i1 | 0) >>> 0 < i6 >>> 0) {
    i3 = 85;
    break;
   }
   i7 = (HEAP32[i14 >> 2] | 0) + i1 | 0;
   HEAP32[i15 >> 2] = i7;
   HEAP32[i16 >> 2] = i7 + i6;
   HEAP32[i10 >> 2] = i1 + i6;
   i1 = i7;
  } else {
   i5 = HEAP32[i11 >> 2] | 0;
   if (i4 >>> 0 < i6 >>> 0) {
    i3 = 85;
    break;
   }
   if (!(i1 << 16 >> 16)) i1 = 0; else {
    i1 = FUNCTION_TABLE_iii[HEAP32[i5 + 4 >> 2] & 255](i5, i6) | 0;
    if (!i1) {
     i13 = 11;
     break;
    }
    i3 = HEAP32[i12 >> 2] | 0;
   }
   HEAP32[i14 >> 2] = i1;
   i4 = FUNCTION_TABLE_iiiii[i3 & 127](i14, HEAP32[i10 >> 2] | 0, i1, i6) | 0;
   i1 = HEAP32[i14 >> 2] | 0;
   if (i4 >>> 0 < i6 >>> 0) {
    if (i1 | 0) FUNCTION_TABLE_vii[HEAP32[i5 + 8 >> 2] & 63](i5, i1);
    HEAP32[i14 >> 2] = 0;
    i3 = 85;
    i1 = 0;
   } else i3 = 0;
   HEAP32[i15 >> 2] = i1;
   HEAP32[i16 >> 2] = i1 + i6;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i4;
   if (i3) break;
  }
  i7 = 1;
  i2 = i2 + 4 | 0;
 }
 if ((i13 | 0) == 11) {
  HEAP32[i14 >> 2] = 0;
  i3 = 64;
 } else if ((i13 | 0) == 30) {
  HEAP32[i15 >> 2] = i1;
  i3 = 0;
 }
 if (!(i7 << 24 >> 24)) {
  i16 = i3;
  return i16 | 0;
 }
 if (HEAP32[i12 >> 2] | 0) {
  i1 = HEAP32[i11 >> 2] | 0;
  i2 = HEAP32[i14 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i1 + 8 >> 2] & 63](i1, i2);
  HEAP32[i14 >> 2] = 0;
 }
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 i16 = i3;
 return i16 | 0;
}

function _remquo(d1, d3, i17) {
 d1 = +d1;
 d3 = +d3;
 i17 = i17 | 0;
 var i2 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i7 = HEAP32[tempDoublePtr >> 2] | 0;
 i8 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d3;
 i10 = HEAP32[tempDoublePtr >> 2] | 0;
 i11 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i6 = _bitshift64Lshr(i7 | 0, i8 | 0, 52) | 0;
 i6 = i6 & 2047;
 i9 = _bitshift64Lshr(i10 | 0, i11 | 0, 52) | 0;
 i9 = i9 & 2047;
 i13 = _bitshift64Lshr(i7 | 0, i8 | 0, 63) | 0;
 i14 = tempRet0;
 i15 = _bitshift64Lshr(i10 | 0, i11 | 0, 63) | 0;
 i16 = tempRet0;
 HEAP32[i17 >> 2] = 0;
 do if ((i10 | 0) == 0 & (i11 & 2147483647 | 0) == 0) i12 = 3; else {
  i4 = ___DOUBLE_BITS_680(d3) | 0;
  i2 = tempRet0 & 2147483647;
  if ((i6 | 0) == 2047 | (i2 >>> 0 > 2146435072 | (i2 | 0) == 2146435072 & i4 >>> 0 > 0)) i12 = 3; else if (!((i7 | 0) == 0 & (i8 & 2147483647 | 0) == 0)) {
   if (!i6) {
    i2 = _bitshift64Shl(i7 | 0, i8 | 0, 12) | 0;
    i4 = tempRet0;
    if ((i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295) {
     i6 = 0;
     do {
      i6 = i6 + -1 | 0;
      i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
      i4 = tempRet0;
     } while ((i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295);
    } else i6 = 0;
    i7 = _bitshift64Shl(i7 | 0, i8 | 0, 1 - i6 | 0) | 0;
    i4 = tempRet0;
   } else i4 = i8 & 1048575 | 1048576;
   if (!i9) {
    i8 = _bitshift64Shl(i10 | 0, i11 | 0, 12) | 0;
    i9 = tempRet0;
    if ((i9 | 0) > -1 | (i9 | 0) == -1 & i8 >>> 0 > 4294967295) {
     i2 = 0;
     do {
      i2 = i2 + -1 | 0;
      i8 = _bitshift64Shl(i8 | 0, i9 | 0, 1) | 0;
      i9 = tempRet0;
     } while ((i9 | 0) > -1 | (i9 | 0) == -1 & i8 >>> 0 > 4294967295);
    } else i2 = 0;
    i10 = _bitshift64Shl(i10 | 0, i11 | 0, 1 - i2 | 0) | 0;
    i9 = i2;
    i8 = tempRet0;
   } else i8 = i11 & 1048575 | 1048576;
   if ((i6 | 0) < (i9 | 0)) if ((i6 + 1 | 0) == (i9 | 0)) {
    i2 = 0;
    i12 = 22;
   } else break; else {
    i18 = _i64Subtract(i7 | 0, i4 | 0, i10 | 0, i8 | 0) | 0;
    i12 = tempRet0;
    i11 = (i12 | 0) > -1 | (i12 | 0) == -1 & i18 >>> 0 > 4294967295;
    i2 = _bitshift64Lshr(i18 | 0, i12 | 0, 63) | 0;
    i2 = i2 ^ 1;
    i7 = i11 ? i18 : i7;
    i4 = i11 ? i12 : i4;
    if ((i6 | 0) > (i9 | 0)) {
     do {
      i7 = _bitshift64Shl(i7 | 0, i4 | 0, 1) | 0;
      i4 = tempRet0;
      i6 = i6 + -1 | 0;
      i11 = _i64Subtract(i7 | 0, i4 | 0, i10 | 0, i8 | 0) | 0;
      i18 = tempRet0;
      i12 = (i18 | 0) > -1 | (i18 | 0) == -1 & i11 >>> 0 > 4294967295;
      i19 = _bitshift64Lshr(i11 | 0, i18 | 0, 63) | 0;
      i2 = (i19 | i2 << 1) ^ 1;
      i7 = i12 ? i11 : i7;
      i4 = i12 ? i18 : i4;
     } while ((i6 | 0) > (i9 | 0));
     i6 = i9;
    }
    if ((i7 | 0) == 0 & (i4 | 0) == 0) {
     i6 = -60;
     i7 = 0;
     i4 = 0;
     i12 = 24;
    } else if (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i7 >>> 0 < 0) {
     do {
      i7 = _bitshift64Shl(i7 | 0, i4 | 0, 1) | 0;
      i4 = tempRet0;
      i6 = i6 + -1 | 0;
     } while (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i7 >>> 0 < 0);
     i12 = 22;
    } else i12 = 22;
   }
   if ((i12 | 0) == 22) if ((i6 | 0) > 0) {
    i19 = _i64Add(i7 | 0, i4 | 0, 0, -1048576) | 0;
    i4 = tempRet0;
    i7 = _bitshift64Shl(i6 | 0, 0, 52) | 0;
    i4 = i4 | tempRet0;
    i7 = i19 | i7;
   } else i12 = 24;
   if ((i12 | 0) == 24) {
    i7 = _bitshift64Lshr(i7 | 0, i4 | 0, 1 - i6 | 0) | 0;
    i4 = tempRet0;
   }
   HEAP32[tempDoublePtr >> 2] = i7;
   HEAP32[tempDoublePtr + 4 >> 2] = i4;
   d1 = +HEAPF64[tempDoublePtr >> 3];
   d5 = (i15 | 0) == 0 & (i16 | 0) == 0 ? d3 : -d3;
   if ((i6 | 0) == (i9 | 0)) i12 = 29; else if ((i6 + 1 | 0) == (i9 | 0)) {
    d3 = d1 * 2.0;
    if (d3 > d5) i12 = 29; else if (!((i2 & 1 | 0) == 0 | d3 != d5)) i12 = 29;
   }
   if ((i12 | 0) == 29) {
    d1 = d1 - d5;
    i2 = i2 + 1 | 0;
   }
   i19 = i2 & 2147483647;
   HEAP32[i17 >> 2] = (i13 | 0) != (i15 | 0) | (i14 | 0) != (i16 | 0) ? 0 - i19 | 0 : i19;
   d1 = (i13 | 0) != 0 | (i14 | 0) != 0 ? -d1 : d1;
  }
 } while (0);
 if ((i12 | 0) == 3) {
  d1 = d1 * d3;
  d1 = d1 / d1;
 }
 return +d1;
}

function _parse_subrs(i2, i20) {
 i2 = i2 | 0;
 i20 = i20 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i15 = i22;
 i16 = i20 + 316 | 0;
 i18 = HEAP32[i20 + 16 >> 2] | 0;
 i4 = HEAP32[i2 + 488 >> 2] | 0;
 i19 = i20 + 28 | 0;
 FUNCTION_TABLE_vi[HEAP32[i19 >> 2] & 127](i20);
 i1 = HEAP32[i20 >> 2] | 0;
 i21 = i20 + 8 | 0;
 if (i1 >>> 0 < (HEAP32[i21 >> 2] | 0) >>> 0) if ((HEAP8[i1 >> 0] | 0) == 91) {
  FUNCTION_TABLE_vi[HEAP32[i20 + 32 >> 2] & 127](i20);
  FUNCTION_TABLE_vi[HEAP32[i19 >> 2] & 127](i20);
  i1 = HEAP32[i20 >> 2] | 0;
  if (i1 >>> 0 < (HEAP32[i21 >> 2] | 0) >>> 0) if ((HEAP8[i1 >> 0] | 0) == 93) {
   STACKTOP = i22;
   return;
  }
  HEAP32[i20 + 12 >> 2] = 3;
  STACKTOP = i22;
  return;
 }
 i11 = i20 + 36 | 0;
 i12 = FUNCTION_TABLE_ii[HEAP32[i11 >> 2] & 63](i20) | 0;
 i13 = i20 + 32 | 0;
 FUNCTION_TABLE_vi[HEAP32[i13 >> 2] & 127](i20);
 i17 = i20 + 12 | 0;
 if (HEAP32[i17 >> 2] | 0) {
  STACKTOP = i22;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[i19 >> 2] & 127](i20);
 i14 = i20 + 312 | 0;
 if (!(HEAP32[i14 >> 2] | 0)) {
  i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i4 >> 2] >> 2] & 127](i16, i12, i18) | 0;
  HEAP32[i15 >> 2] = i1;
  if (!i1) i3 = 9;
 } else i3 = 9;
 L15 : do if ((i3 | 0) == 9) {
  i1 = HEAP32[i20 >> 2] | 0;
  L17 : do if ((i1 + 4 | 0) >>> 0 < (HEAP32[i21 >> 2] | 0) >>> 0) {
   i10 = i2 + 128 | 0;
   i9 = i2 + 172 | 0;
   i7 = i4 + 16 | 0;
   i8 = i20 + 360 | 0;
   while (1) {
    if (_strncmp(i1, 280120, 3) | 0) break L17;
    FUNCTION_TABLE_vi[HEAP32[i13 >> 2] & 127](i20);
    i6 = FUNCTION_TABLE_ii[HEAP32[i11 >> 2] & 63](i20) | 0;
    i4 = HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] | 0;
    i2 = HEAP32[i21 >> 2] | 0;
    FUNCTION_TABLE_vi[HEAP32[i19 >> 2] & 127](i20);
    i1 = HEAP32[i20 >> 2] | 0;
    if (i1 >>> 0 >= i2 >>> 0) {
     i3 = 16;
     break;
    }
    if (((HEAPU8[i1 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     i3 = 16;
     break;
    }
    i3 = FUNCTION_TABLE_ii[HEAP32[i11 >> 2] & 63](i20) | 0;
    FUNCTION_TABLE_vi[HEAP32[i13 >> 2] & 127](i20);
    i1 = HEAP32[i20 >> 2] | 0;
    i5 = i1 + 1 | 0;
    if ((i3 | 0) <= -1) {
     i3 = 16;
     break;
    }
    if ((i3 | 0) >= (i2 - i5 | 0)) {
     i3 = 16;
     break;
    }
    HEAP32[i20 >> 2] = i1 + (i3 + 1);
    if (HEAP32[i17 >> 2] | 0) {
     i3 = 35;
     break;
    }
    FUNCTION_TABLE_vi[HEAP32[i13 >> 2] & 127](i20);
    if (HEAP32[i17 >> 2] | 0) {
     i3 = 35;
     break;
    }
    FUNCTION_TABLE_vi[HEAP32[i19 >> 2] & 127](i20);
    i1 = HEAP32[i20 >> 2] | 0;
    if ((i1 + 4 | 0) >>> 0 < (HEAP32[i21 >> 2] | 0) >>> 0) if (!(_strncmp(i1, 280124, 3) | 0)) {
     FUNCTION_TABLE_vi[HEAP32[i13 >> 2] & 127](i20);
     FUNCTION_TABLE_vi[HEAP32[i19 >> 2] & 127](i20);
    }
    if (!(HEAP32[i14 >> 2] | 0)) {
     i1 = HEAP32[i9 >> 2] | 0;
     if ((i1 | 0) > -1) {
      if (i3 >>> 0 < i1 >>> 0) {
       i3 = 27;
       break;
      }
      i2 = _ft_mem_alloc(i18, i3, i15) | 0;
      i1 = HEAP32[i15 >> 2] | 0;
      if (i1 | 0) break L15;
      _memcpy(i2 | 0, i5 | 0, i3 | 0) | 0;
      FUNCTION_TABLE_viii[HEAP32[i7 >> 2] & 31](i2, i3, 4330);
      i1 = HEAP32[i9 >> 2] | 0;
      i1 = FUNCTION_TABLE_iiiii[HEAP32[i8 >> 2] & 127](i16, i6, i2 + i1 | 0, i3 - i1 | 0) | 0;
      HEAP32[i15 >> 2] = i1;
      _ft_mem_free(i18, i2);
      i1 = HEAP32[i15 >> 2] | 0;
     } else {
      i1 = FUNCTION_TABLE_iiiii[HEAP32[i8 >> 2] & 127](i16, i6, i5, i3) | 0;
      HEAP32[i15 >> 2] = i1;
     }
     if (i1 | 0) break L15;
    }
    i1 = HEAP32[i20 >> 2] | 0;
    if ((i1 + 4 | 0) >>> 0 >= (HEAP32[i21 >> 2] | 0) >>> 0) break L17;
   }
   if ((i3 | 0) == 16) {
    if (i4 | 0) {
     STACKTOP = i22;
     return;
    }
    HEAP32[i17 >> 2] = 3;
    STACKTOP = i22;
    return;
   } else if ((i3 | 0) == 27) {
    HEAP32[i15 >> 2] = 3;
    i1 = 3;
    break L15;
   } else if ((i3 | 0) == 35) {
    STACKTOP = i22;
    return;
   }
  } while (0);
  if (HEAP32[i14 >> 2] | 0) {
   STACKTOP = i22;
   return;
  }
  HEAP32[i14 >> 2] = i12;
  STACKTOP = i22;
  return;
 } while (0);
 HEAP32[i17 >> 2] = i1;
 STACKTOP = i22;
 return;
}

function _find_font(i2, i1, i16, i17, i22, i20, i21, i23, i18, i19) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 i22 = i22 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 i23 = i23 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i14 = i2 + 16 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 if (!i3) {
  i23 = 0;
  return i23 | 0;
 }
 i15 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i15 | 0) <= 0) {
  i23 = 0;
  return i23 | 0;
 }
 i13 = HEAP32[i1 + 4 >> 2] | 0;
 i12 = i2 + 24 | 0;
 i1 = 0;
 i2 = -1;
 L7 : while (1) {
  i11 = HEAP32[i13 + (i1 << 2) >> 2] | 0;
  if ((i3 | 0) > 0) {
   i10 = 0;
   i3 = 0;
   L10 : while (1) {
    i8 = HEAP32[i12 >> 2] | 0;
    i9 = i8 + (i10 * 52 | 0) | 0;
    i5 = i8 + (i10 * 52 | 0) + 4 | 0;
    i6 = i8 + (i10 * 52 | 0) + 12 | 0;
    L12 : do if ((HEAP32[i6 >> 2] | 0) > 0) {
     i4 = 0;
     while (1) {
      if (!(_ass_strcasecmp(HEAP32[(HEAP32[i5 >> 2] | 0) + (i4 << 2) >> 2] | 0, i11) | 0)) break;
      i4 = i4 + 1 | 0;
      if ((i4 | 0) >= (HEAP32[i6 >> 2] | 0)) {
       i7 = 11;
       break L12;
      }
     }
     i5 = HEAP32[i8 + (i10 * 52 | 0) + 28 >> 2] | 0;
     i6 = (HEAP32[i8 + (i10 * 52 | 0) + 24 >> 2] | 0) - i16 | 0;
     i7 = (HEAP32[i8 + (i10 * 52 | 0) + 20 >> 2] | 0) - i17 | 0;
     i5 = ((i6 | 0) < 0 ? 0 - i6 | 0 : i6) + ((i7 | 0) < 0 ? 0 - i7 | 0 : i7) + ((i5 | 0) < 100 ? 100 - i5 | 0 : i5 + -100 | 0) | 0;
     i7 = 22;
    } else i7 = 11; while (0);
    do if ((i7 | 0) == 11) {
     i7 = 0;
     i5 = i8 + (i10 * 52 | 0) + 8 | 0;
     i6 = i8 + (i10 * 52 | 0) + 16 | 0;
     L19 : do if ((HEAP32[i6 >> 2] | 0) > 0) {
      i4 = 0;
      while (1) {
       if (!(_ass_strcasecmp(HEAP32[(HEAP32[i5 >> 2] | 0) + (i4 << 2) >> 2] | 0, i11) | 0)) {
        i6 = 1;
        break L19;
       }
       i4 = i4 + 1 | 0;
       if ((i4 | 0) >= (HEAP32[i6 >> 2] | 0)) {
        i6 = 0;
        break;
       }
      }
     } else i6 = 0; while (0);
     i4 = HEAP32[i8 + (i10 * 52 | 0) + 40 >> 2] | 0;
     if (!i4) if (i6) i4 = 0; else break; else {
      i4 = (_ass_strcasecmp(i4, i11) | 0) == 0;
      if (!(i6 ^ i4)) if (i6) {
       i5 = 0;
       i7 = 22;
       break;
      } else break;
     }
     i5 = HEAP32[i8 + (i10 * 52 | 0) + 44 >> 2] | 0;
     if (!i5) {
      i7 = 19;
      break L7;
     }
     i5 = HEAP32[i5 + 8 >> 2] | 0;
     if (!i5) {
      i7 = 19;
      break L7;
     }
     i5 = FUNCTION_TABLE_ii[i5 & 63](HEAP32[i8 + (i10 * 52 | 0) + 48 >> 2] | 0) | 0;
     if (i5 ? i4 : i6) {
      i5 = 0;
      i7 = 22;
     }
    } while (0);
    do if ((i7 | 0) == 22) {
     HEAP8[i19 >> 0] = 1;
     if (i5 >>> 0 < i2 >>> 0) {
      i4 = HEAP32[i8 + (i10 * 52 | 0) + 44 >> 2] | 0;
      if (!i4) {
       i7 = 25;
       break L7;
      }
      i4 = HEAP32[i4 + 12 >> 2] | 0;
      if (!i4) {
       i7 = 25;
       break L7;
      }
      if (FUNCTION_TABLE_iii[i4 & 255](HEAP32[i8 + (i10 * 52 | 0) + 48 >> 2] | 0, i18) | 0) {
       i3 = i9;
       i2 = i5;
      } else break;
     }
     if (!i5) {
      i4 = i3;
      break L10;
     }
    } while (0);
    i10 = i10 + 1 | 0;
    if ((i10 | 0) >= (HEAP32[i14 >> 2] | 0)) {
     i4 = i3;
     break;
    }
   }
   if (i4) {
    i7 = 30;
    break;
   }
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i15 | 0)) {
   i1 = 0;
   i7 = 36;
   break;
  }
  i3 = HEAP32[i14 >> 2] | 0;
 }
 if ((i7 | 0) == 19) ___assert_fail(358120, 358165, 418, 358182); else if ((i7 | 0) == 25) ___assert_fail(358199, 358165, 513, 358239); else if ((i7 | 0) == 30) {
  i2 = HEAP32[i4 + 44 >> 2] | 0;
  i3 = i4 + 40 | 0;
  HEAP32[i20 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i21 >> 2] = HEAP32[i4 >> 2];
  i1 = HEAP32[i2 + 36 >> 2] | 0;
  if (!i1) i1 = HEAP32[i4 + 36 >> 2] | 0; else i1 = FUNCTION_TABLE_ii[i1 & 63](HEAP32[i4 + 48 >> 2] | 0) | 0;
  HEAP32[i22 >> 2] = i1;
  i1 = HEAP32[i4 + 32 >> 2] | 0;
  if (i1 | 0) {
   i23 = i1;
   return i23 | 0;
  }
  HEAP32[i23 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i23 + 4 >> 2] = HEAP32[i4 + 48 >> 2];
  i1 = HEAP32[i3 >> 2] | 0;
  if (i1 | 0) {
   i23 = i1;
   return i23 | 0;
  }
  i23 = HEAP32[HEAP32[i4 + 4 >> 2] >> 2] | 0;
  return i23 | 0;
 } else if ((i7 | 0) == 36) return i1 | 0;
 return 0;
}

function _add_cubic(i9, i10) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i13 = i23;
 i15 = i10 + 24 | 0;
 i14 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i4 = HEAP32[i10 + 4 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i5 = HEAP32[i10 + 28 >> 2] | 0;
 i18 = i2 - i1 | 0;
 i22 = i5 - i4 | 0;
 i3 = (i18 | 0) < 0 ? 0 - i18 | 0 : i18;
 i16 = (i22 | 0) < 0 ? 0 - i22 | 0 : i22;
 i11 = ((i18 | 0) < 0) << 31 >> 31;
 i20 = ___muldi3(i18 | 0, i11 | 0, i18 | 0, i11 | 0) | 0;
 i21 = tempRet0;
 i12 = ((i22 | 0) < 0) << 31 >> 31;
 i6 = ___muldi3(i22 | 0, i12 | 0, i22 | 0, i12 | 0) | 0;
 i21 = _i64Add(i6 | 0, tempRet0 | 0, i20 | 0, i21 | 0) | 0;
 i20 = tempRet0;
 i16 = (i3 | 0) > (i16 | 0) ? i3 : i16;
 i14 = ___muldi3(i16 | 0, ((i16 | 0) < 0) << 31 >> 31 | 0, i14 | 0, ((i14 | 0) < 0) << 31 >> 31 | 0) | 0;
 i16 = tempRet0;
 i3 = HEAP32[i10 + 8 >> 2] | 0;
 i6 = HEAP32[i10 + 12 >> 2] | 0;
 i19 = i3 - i1 | 0;
 i29 = i6 - i4 | 0;
 i26 = ((i19 | 0) < 0) << 31 >> 31;
 i25 = ___muldi3(i19 | 0, i26 | 0, i18 | 0, i11 | 0) | 0;
 i24 = tempRet0;
 i17 = ((i29 | 0) < 0) << 31 >> 31;
 i28 = ___muldi3(i29 | 0, i17 | 0, i22 | 0, i12 | 0) | 0;
 i24 = _i64Add(i28 | 0, tempRet0 | 0, i25 | 0, i24 | 0) | 0;
 i25 = tempRet0;
 i17 = ___muldi3(i29 | 0, i17 | 0, i18 | 0, i11 | 0) | 0;
 i29 = tempRet0;
 i26 = ___muldi3(i19 | 0, i26 | 0, i22 | 0, i12 | 0) | 0;
 i26 = _i64Subtract(i17 | 0, i29 | 0, i26 | 0, tempRet0 | 0) | 0;
 i29 = tempRet0;
 i17 = _i64Subtract(0, 0, i14 | 0, i16 | 0) | 0;
 i19 = tempRet0;
 i20 = _i64Add(i14 | 0, i16 | 0, i21 | 0, i20 | 0) | 0;
 i21 = tempRet0;
 i28 = (i29 | 0) < 0;
 i27 = _i64Subtract(0, 0, i26 | 0, i29 | 0) | 0;
 i29 = i28 ? tempRet0 : i29;
 i7 = HEAP32[i10 + 16 >> 2] | 0;
 i8 = HEAP32[i10 + 20 >> 2] | 0;
 if (!((i25 | 0) < (i19 | 0) | (i25 | 0) == (i19 | 0) & i24 >>> 0 < i17 >>> 0 | ((i29 | 0) > (i16 | 0) | (i29 | 0) == (i16 | 0) & (i28 ? i27 : i26) >>> 0 > i14 >>> 0 | ((i25 | 0) > (i21 | 0) | (i25 | 0) == (i21 | 0) & i24 >>> 0 > i20 >>> 0)))) {
  i28 = i7 - i1 | 0;
  i26 = i8 - i4 | 0;
  i29 = ((i28 | 0) < 0) << 31 >> 31;
  i24 = ___muldi3(i28 | 0, i29 | 0, i18 | 0, i11 | 0) | 0;
  i25 = tempRet0;
  i27 = ((i26 | 0) < 0) << 31 >> 31;
  i30 = ___muldi3(i26 | 0, i27 | 0, i22 | 0, i12 | 0) | 0;
  i25 = _i64Add(i30 | 0, tempRet0 | 0, i24 | 0, i25 | 0) | 0;
  i24 = tempRet0;
  i27 = ___muldi3(i26 | 0, i27 | 0, i18 | 0, i11 | 0) | 0;
  i26 = tempRet0;
  i29 = ___muldi3(i28 | 0, i29 | 0, i22 | 0, i12 | 0) | 0;
  i29 = _i64Subtract(i27 | 0, i26 | 0, i29 | 0, tempRet0 | 0) | 0;
  i26 = tempRet0;
  i27 = (i26 | 0) < 0;
  i28 = _i64Subtract(0, 0, i29 | 0, i26 | 0) | 0;
  i26 = i27 ? tempRet0 : i26;
  if (!((i24 | 0) < (i19 | 0) | (i24 | 0) == (i19 | 0) & i25 >>> 0 < i17 >>> 0 | ((i24 | 0) > (i21 | 0) | (i24 | 0) == (i21 | 0) & i25 >>> 0 > i20 >>> 0 | ((i26 | 0) > (i16 | 0) | (i26 | 0) == (i16 | 0) & (i27 ? i28 : i29) >>> 0 > i14 >>> 0)))) {
   i30 = _add_line_311(i9, i1, i4, i2, i5) | 0;
   STACKTOP = i23;
   return i30 | 0;
  }
 }
 i27 = i3 + i1 | 0;
 i28 = i6 + i4 | 0;
 i25 = i3 + 2 + i7 | 0;
 i26 = i6 + 2 + i8 | 0;
 i29 = i2 + i7 | 0;
 i30 = i5 + i8 | 0;
 i22 = i27 + i25 | 0;
 i24 = i28 + i26 | 0;
 i25 = i29 + i25 | 0;
 i26 = i30 + i26 | 0;
 HEAP32[i13 + 24 >> 2] = i25 + -1 + i22 >> 3;
 HEAP32[i13 + 28 >> 2] = i24 + -1 + i26 >> 3;
 HEAP32[i13 + 16 >> 2] = i22 >> 2;
 HEAP32[i13 + 20 >> 2] = i24 >> 2;
 HEAP32[i13 + 32 >> 2] = i25 >> 2;
 HEAP32[i13 + 36 >> 2] = i26 >> 2;
 HEAP32[i13 + 8 >> 2] = i27 >> 1;
 HEAP32[i13 + 12 >> 2] = i28 >> 1;
 HEAP32[i13 + 40 >> 2] = i29 >> 1;
 HEAP32[i13 + 44 >> 2] = i30 >> 1;
 i30 = i10;
 i29 = HEAP32[i30 + 4 >> 2] | 0;
 i28 = i13;
 HEAP32[i28 >> 2] = HEAP32[i30 >> 2];
 HEAP32[i28 + 4 >> 2] = i29;
 i28 = i15;
 i29 = HEAP32[i28 + 4 >> 2] | 0;
 i30 = i13 + 48 | 0;
 HEAP32[i30 >> 2] = HEAP32[i28 >> 2];
 HEAP32[i30 + 4 >> 2] = i29;
 if (_add_cubic(i9, i13) | 0) i1 = _add_cubic(i9, i13 + 24 | 0) | 0; else i1 = 0;
 i30 = i1;
 STACKTOP = i23;
 return i30 | 0;
}

function _add_face(i1, i16, i2) {
 i1 = i1 | 0;
 i16 = i16 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i13 = i19 + 32 | 0;
 i9 = i19 + 24 | 0;
 i7 = i19 + 16 | 0;
 i6 = i19 + 8 | 0;
 i12 = i19 + 84 | 0;
 i8 = i19 + 80 | 0;
 i18 = i19 + 76 | 0;
 i4 = i19;
 i14 = i19 + 72 | 0;
 i5 = i19 + 40 | 0;
 HEAP32[i12 >> 2] = 0;
 i17 = i4;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 i17 = i16 + 108 | 0;
 if ((HEAP32[i17 >> 2] | 0) == 10) {
  i18 = -1;
  STACKTOP = i19;
  return i18 | 0;
 }
 i11 = i16 + 16 | 0;
 i10 = _ass_font_select(i1, HEAP32[i11 >> 2] | 0, i16, i8, i12, i18, i4, i2) | 0;
 if (!i10) {
  i18 = -1;
  STACKTOP = i19;
  return i18 | 0;
 }
 i2 = HEAP32[i17 >> 2] | 0;
 L7 : do if ((i2 | 0) > 0) {
  i3 = HEAP32[i18 >> 2] | 0;
  i1 = 0;
  while (1) {
   if ((HEAP32[i16 + 24 + (i1 << 2) >> 2] | 0) == (i3 | 0)) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i2 | 0)) break L7;
  }
  _ass_msg(HEAP32[i11 >> 2] | 0, 4, 357829, i6);
  i18 = i1;
  STACKTOP = i19;
  return i18 | 0;
 } while (0);
 L15 : do if (!(HEAP32[i4 >> 2] | 0)) {
  i3 = i16 + 20 | 0;
  i7 = (_FT_New_Face(HEAP32[i3 >> 2] | 0, i10, HEAP32[i8 >> 2] | 0, i14) | 0) == 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i7) {
   i18 = HEAP32[i11 >> 2] | 0;
   HEAP32[i9 >> 2] = i10;
   HEAP32[i9 + 4 >> 2] = i1;
   _ass_msg(i18, 2, 357914, i9);
   i18 = -1;
   STACKTOP = i19;
   return i18 | 0;
  }
  if ((i1 | 0) < 0 & (HEAP32[i12 >> 2] | 0) != 0) {
   i1 = HEAP32[i14 >> 2] | 0;
   if ((HEAP32[i1 >> 2] | 0) > 0) {
    i2 = 0;
    while (1) {
     _FT_Done_Face(i1) | 0;
     if (_FT_New_Face(HEAP32[i3 >> 2] | 0, i10, i2, i14) | 0) break;
     i1 = _FT_Get_Postscript_Name(HEAP32[i14 >> 2] | 0) | 0;
     if (i1 | 0) if (!(_strcmp(i1, HEAP32[i12 >> 2] | 0) | 0)) break L15;
     i2 = i2 + 1 | 0;
     i1 = HEAP32[i14 >> 2] | 0;
     if ((i2 | 0) >= (HEAP32[i1 >> 2] | 0)) break L15;
    }
    i18 = HEAP32[i11 >> 2] | 0;
    HEAP32[i13 >> 2] = i10;
    HEAP32[i13 + 4 >> 2] = i2;
    _ass_msg(i18, 2, 357914, i13);
    i18 = -1;
    STACKTOP = i19;
    return i18 | 0;
   }
  }
 } else {
  i13 = _calloc(1, 40) | 0;
  i12 = _calloc(1, 8) | 0;
  i3 = i4;
  i9 = HEAP32[i3 >> 2] | 0;
  i3 = HEAP32[i3 + 4 >> 2] | 0;
  i6 = i12;
  HEAP32[i6 >> 2] = i9;
  HEAP32[i6 + 4 >> 2] = i3;
  i9 = FUNCTION_TABLE_iiiii[i9 & 127](HEAP32[i4 + 4 >> 2] | 0, 0, 0, 0) | 0;
  HEAP32[i13 + 4 >> 2] = i9;
  HEAP32[i13 + 20 >> 2] = 84;
  HEAP32[i13 + 24 >> 2] = 72;
  HEAP32[i13 + 12 >> 2] = i12;
  i12 = i5 + 4 | 0;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  HEAP32[i12 + 12 >> 2] = 0;
  HEAP32[i12 + 16 >> 2] = 0;
  HEAP32[i12 + 20 >> 2] = 0;
  HEAP32[i12 + 24 >> 2] = 0;
  HEAP32[i5 >> 2] = 2;
  HEAP32[i5 + 16 >> 2] = i13;
  if (!(_FT_Open_Face(HEAP32[i16 + 20 >> 2] | 0, i5, HEAP32[i8 >> 2] | 0, i14) | 0)) break;
  i18 = HEAP32[i11 >> 2] | 0;
  HEAP32[i7 >> 2] = i10;
  _ass_msg(i18, 2, 357882, i7);
  i18 = -1;
  STACKTOP = i19;
  return i18 | 0;
 } while (0);
 _charmap_magic(HEAP32[i11 >> 2] | 0, HEAP32[i14 >> 2] | 0);
 i4 = HEAP32[i14 >> 2] | 0;
 i2 = i4 + 70 | 0;
 i3 = i4 + 72 | 0;
 if ((HEAP16[i2 >> 1] | 0) == (0 - (HEAP16[i3 >> 1] | 0) | 0)) i15 = 23; else if (!(HEAP16[i4 + 74 >> 1] | 0)) i15 = 23; else {
  i2 = i4;
  i1 = i4;
 }
 if ((i15 | 0) == 23) {
  i1 = _FT_Get_Sfnt_Table(i4, 2) | 0;
  if (!i1) {
   i15 = HEAP32[i4 + 64 >> 2] | 0;
   HEAP16[i2 >> 1] = i15;
   i1 = HEAP32[i4 + 56 >> 2] | 0;
   HEAP16[i3 >> 1] = i1;
   i1 = (i15 & 65535) - i1 | 0;
  } else {
   i15 = HEAP16[i1 + 70 >> 1] | 0;
   HEAP16[i2 >> 1] = i15;
   i1 = HEAP16[i1 + 72 >> 1] | 0;
   HEAP16[i3 >> 1] = i1;
   i1 = (i15 << 16 >> 16) - (i1 << 16 >> 16) | 0;
  }
  HEAP16[i4 + 74 >> 1] = i1;
  i1 = HEAP32[i14 >> 2] | 0;
  i2 = i1;
 }
 HEAP32[i16 + 64 + (HEAP32[i17 >> 2] << 2) >> 2] = i2;
 i15 = HEAP32[i18 >> 2] | 0;
 i18 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = i18 + 1;
 HEAP32[i16 + 24 + (i18 << 2) >> 2] = i15;
 _ass_face_set_size(i1, +HEAPF64[i16 + 136 >> 3]);
 i18 = (HEAP32[i17 >> 2] | 0) + -1 | 0;
 STACKTOP = i19;
 return i18 | 0;
}

function _FcLangSetHasLang(i12, i13) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0;
 i1 = _FcLangSetIndex(i13) | 0;
 if ((i1 | 0) < 0) i8 = ~i1; else {
  i2 = HEAPU8[63754 + i1 >> 0] | 0;
  i3 = i2 >>> 5;
  if (i3 >>> 0 < (HEAP32[i12 + 4 >> 2] | 0) >>> 0) if (!(HEAP32[i12 + 8 + (i3 << 2) >> 2] & 1 << (i2 & 31))) i8 = i1; else {
   i14 = 0;
   return i14 | 0;
  } else i8 = i1;
 }
 if ((i8 | 0) > 0) {
  i11 = i12 + 4 | 0;
  i9 = i8;
  i1 = 2;
  L9 : do {
   i10 = i9;
   i9 = i9 + -1 | 0;
   i4 = 2;
   i2 = 30904 + (i9 * 24 | 0) | 0;
   i3 = i13;
   while (1) {
    i5 = HEAP8[i3 >> 0] | 0;
    i6 = HEAP8[i2 >> 0] | 0;
    i7 = i5 & 255;
    i7 = (i5 + -65 & 255) < 26 ? i7 + 32 | 0 : i7;
    i5 = i6 & 255;
    i5 = (i6 + -65 & 255) < 26 ? i5 + 32 | 0 : i5;
    i6 = i7 & 255;
    i7 = i7 & 255;
    if ((i6 | 0) != (i5 & 255 | 0)) {
     i14 = 11;
     break;
    }
    if (!(i7 << 24 >> 24)) {
     i4 = 0;
     break;
    }
    i4 = (i6 | 0) == 45 ? 1 : i4;
    i2 = i2 + 1 | 0;
    i3 = i3 + 1 | 0;
   }
   L15 : do if ((i14 | 0) == 11) {
    i14 = 0;
    switch (i7 << 24 >> 24) {
    case 0:
    case 45:
     {
      switch ((i5 & 255) << 24 >> 24) {
      case 0:
      case 45:
       {
        i4 = 1;
        break L15;
       }
      default:
       {}
      }
      break;
     }
    default:
     {}
    }
    if ((i4 | 0) == 2) break L9;
   } while (0);
   i2 = HEAPU8[63754 + i9 >> 0] | 0;
   i3 = i2 >>> 5;
   if (i3 >>> 0 < (HEAP32[i11 >> 2] | 0) >>> 0) i2 = (HEAP32[i12 + 8 + (i3 << 2) >> 2] & 1 << (i2 & 31) | 0) != 0 & 1; else i2 = 0;
   i1 = i4 >>> 0 < i1 >>> 0 & (i2 | 0) != 0 ? i4 : i1;
  } while ((i10 | 0) > 1);
  if ((i8 | 0) < 244) i14 = 8;
 } else {
  i1 = 2;
  i14 = 8;
 }
 L25 : do if ((i14 | 0) == 8) {
  i9 = i12 + 4 | 0;
  do {
   i4 = 2;
   i2 = 30904 + (i8 * 24 | 0) | 0;
   i3 = i13;
   while (1) {
    i5 = HEAP8[i3 >> 0] | 0;
    i6 = HEAP8[i2 >> 0] | 0;
    i7 = i5 & 255;
    i7 = (i5 + -65 & 255) < 26 ? i7 + 32 | 0 : i7;
    i5 = i6 & 255;
    i5 = (i6 + -65 & 255) < 26 ? i5 + 32 | 0 : i5;
    i6 = i7 & 255;
    i7 = i7 & 255;
    if ((i6 | 0) != (i5 & 255 | 0)) {
     i14 = 21;
     break;
    }
    if (!(i7 << 24 >> 24)) {
     i4 = 0;
     break;
    }
    i4 = (i6 | 0) == 45 ? 1 : i4;
    i2 = i2 + 1 | 0;
    i3 = i3 + 1 | 0;
   }
   L33 : do if ((i14 | 0) == 21) {
    i14 = 0;
    switch (i7 << 24 >> 24) {
    case 0:
    case 45:
     {
      switch ((i5 & 255) << 24 >> 24) {
      case 0:
      case 45:
       {
        i4 = 1;
        break L33;
       }
      default:
       {}
      }
      break;
     }
    default:
     {}
    }
    if ((i4 | 0) == 2) break L25;
   } while (0);
   i2 = HEAPU8[63754 + i8 >> 0] | 0;
   i3 = i2 >>> 5;
   if (i3 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) i2 = (HEAP32[i12 + 8 + (i3 << 2) >> 2] & 1 << (i2 & 31) | 0) != 0 & 1; else i2 = 0;
   i1 = i4 >>> 0 < i1 >>> 0 & (i2 | 0) != 0 ? i4 : i1;
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) < 244);
 } while (0);
 i2 = HEAP32[i12 >> 2] | 0;
 if (!i2) {
  i14 = i1;
  return i14 | 0;
 }
 i8 = _FcStrListCreate(i2) | 0;
 if (!i8) {
  i14 = i1;
  return i14 | 0;
 }
 L49 : do if (!i1) i1 = 0; else while (1) {
  i3 = _FcStrListNext(i8) | 0;
  if (!i3) break L49; else {
   i2 = 2;
   i4 = i13;
  }
  while (1) {
   i5 = HEAP8[i4 >> 0] | 0;
   i6 = HEAP8[i3 >> 0] | 0;
   i7 = i5 & 255;
   i7 = (i5 + -65 & 255) < 26 ? i7 + 32 | 0 : i7;
   i5 = i6 & 255;
   i5 = (i6 + -65 & 255) < 26 ? i5 + 32 | 0 : i5;
   i6 = i7 & 255;
   i7 = i7 & 255;
   if ((i6 | 0) != (i5 & 255 | 0)) {
    i14 = 34;
    break;
   }
   if (!(i7 << 24 >> 24)) {
    i2 = 0;
    break;
   }
   i2 = (i6 | 0) == 45 ? 1 : i2;
   i3 = i3 + 1 | 0;
   i4 = i4 + 1 | 0;
  }
  L56 : do if ((i14 | 0) == 34) {
   i14 = 0;
   switch (i7 << 24 >> 24) {
   case 0:
   case 45:
    break;
   default:
    break L56;
   }
   switch ((i5 & 255) << 24 >> 24) {
   case 0:
   case 45:
    break;
   default:
    break L56;
   }
   i2 = 1;
  } while (0);
  i1 = i2 >>> 0 < i1 >>> 0 ? i2 : i1;
  if (!i1) {
   i1 = 0;
   break;
  }
 } while (0);
 _FcStrListDone(i8);
 i14 = i1;
 return i14 | 0;
}

function ___udivmoddi4(i5, i6, i8, i11, i13) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0;
 i9 = i5;
 i4 = i6;
 i7 = i4;
 i2 = i8;
 i12 = i11;
 i3 = i12;
 if (!i7) {
  i1 = (i13 | 0) != 0;
  if (!i3) {
   if (i1) {
    HEAP32[i13 >> 2] = (i9 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i9 >>> 0) / (i2 >>> 0) >>> 0;
   return (tempRet0 = i12, i13) | 0;
  } else {
   if (!i1) {
    i12 = 0;
    i13 = 0;
    return (tempRet0 = i12, i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i6 & 0;
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
 }
 i1 = (i3 | 0) == 0;
 do if (!i2) {
  if (i1) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = (i7 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i7 >>> 0) / (i2 >>> 0) >>> 0;
   return (tempRet0 = i12, i13) | 0;
  }
  if (!i9) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = 0;
    HEAP32[i13 + 4 >> 2] = (i7 >>> 0) % (i3 >>> 0);
   }
   i12 = 0;
   i13 = (i7 >>> 0) / (i3 >>> 0) >>> 0;
   return (tempRet0 = i12, i13) | 0;
  }
  i1 = i3 - 1 | 0;
  if (!(i1 & i3)) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = i5 | 0;
    HEAP32[i13 + 4 >> 2] = i1 & i7 | i6 & 0;
   }
   i12 = 0;
   i13 = i7 >>> ((_llvm_cttz_i32(i3 | 0) | 0) >>> 0);
   return (tempRet0 = i12, i13) | 0;
  }
  i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
  if (i1 >>> 0 <= 30) {
   i6 = i1 + 1 | 0;
   i3 = 31 - i1 | 0;
   i2 = i6;
   i5 = i7 << i3 | i9 >>> (i6 >>> 0);
   i6 = i7 >>> (i6 >>> 0);
   i1 = 0;
   i3 = i9 << i3;
   break;
  }
  if (!i13) {
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
  HEAP32[i13 >> 2] = i5 | 0;
  HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
  i12 = 0;
  i13 = 0;
  return (tempRet0 = i12, i13) | 0;
 } else {
  if (!i1) {
   i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
   if (i1 >>> 0 <= 31) {
    i10 = i1 + 1 | 0;
    i3 = 31 - i1 | 0;
    i6 = i1 - 31 >> 31;
    i2 = i10;
    i5 = i9 >>> (i10 >>> 0) & i6 | i7 << i3;
    i6 = i7 >>> (i10 >>> 0) & i6;
    i1 = 0;
    i3 = i9 << i3;
    break;
   }
   if (!i13) {
    i12 = 0;
    i13 = 0;
    return (tempRet0 = i12, i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
  i1 = i2 - 1 | 0;
  if (i1 & i2 | 0) {
   i3 = (Math_clz32(i2 | 0) | 0) + 33 - (Math_clz32(i7 | 0) | 0) | 0;
   i15 = 64 - i3 | 0;
   i10 = 32 - i3 | 0;
   i4 = i10 >> 31;
   i14 = i3 - 32 | 0;
   i6 = i14 >> 31;
   i2 = i3;
   i5 = i10 - 1 >> 31 & i7 >>> (i14 >>> 0) | (i7 << i10 | i9 >>> (i3 >>> 0)) & i6;
   i6 = i6 & i7 >>> (i3 >>> 0);
   i1 = i9 << i15 & i4;
   i3 = (i7 << i15 | i9 >>> (i14 >>> 0)) & i4 | i9 << i10 & i3 - 33 >> 31;
   break;
  }
  if (i13 | 0) {
   HEAP32[i13 >> 2] = i1 & i9;
   HEAP32[i13 + 4 >> 2] = 0;
  }
  if ((i2 | 0) == 1) {
   i14 = i4 | i6 & 0;
   i15 = i5 | 0 | 0;
   return (tempRet0 = i14, i15) | 0;
  } else {
   i15 = _llvm_cttz_i32(i2 | 0) | 0;
   i14 = i7 >>> (i15 >>> 0) | 0;
   i15 = i7 << 32 - i15 | i9 >>> (i15 >>> 0) | 0;
   return (tempRet0 = i14, i15) | 0;
  }
 } while (0);
 if (!i2) {
  i7 = i3;
  i4 = 0;
  i3 = 0;
 } else {
  i10 = i8 | 0 | 0;
  i9 = i12 | i11 & 0;
  i7 = _i64Add(i10 | 0, i9 | 0, -1, -1) | 0;
  i8 = tempRet0;
  i4 = i3;
  i3 = 0;
  do {
   i11 = i4;
   i4 = i1 >>> 31 | i4 << 1;
   i1 = i3 | i1 << 1;
   i11 = i5 << 1 | i11 >>> 31 | 0;
   i12 = i5 >>> 31 | i6 << 1 | 0;
   _i64Subtract(i7 | 0, i8 | 0, i11 | 0, i12 | 0) | 0;
   i15 = tempRet0;
   i14 = i15 >> 31 | ((i15 | 0) < 0 ? -1 : 0) << 1;
   i3 = i14 & 1;
   i5 = _i64Subtract(i11 | 0, i12 | 0, i14 & i10 | 0, (((i15 | 0) < 0 ? -1 : 0) >> 31 | ((i15 | 0) < 0 ? -1 : 0) << 1) & i9 | 0) | 0;
   i6 = tempRet0;
   i2 = i2 - 1 | 0;
  } while ((i2 | 0) != 0);
  i7 = i4;
  i4 = 0;
 }
 i2 = 0;
 if (i13 | 0) {
  HEAP32[i13 >> 2] = i5;
  HEAP32[i13 + 4 >> 2] = i6;
 }
 i14 = (i1 | 0) >>> 31 | (i7 | i2) << 1 | (i2 << 1 | i1 >>> 31) & 0 | i4;
 i15 = (i1 << 1 | 0 >>> 31) & -2 | i3;
 return (tempRet0 = i14, i15) | 0;
}

function _tt_sbit_decoder_load_bit_aligned(i1, i7, i22, i5, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i22 = i22 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i23 = HEAP32[i4 + 8 >> 2] | 0;
 i15 = HEAP32[i4 + 12 >> 2] | 0;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i2 = HEAPU16[i6 + 2 >> 1] | 0;
 i6 = HEAP16[i6 >> 1] | 0;
 i10 = i6 & 65535;
 i16 = Math_imul(HEAPU8[i1 + 18 >> 0] | 0, i2) | 0;
 if ((i5 | 0) < 0) {
  i23 = 3;
  return i23 | 0;
 }
 if ((i10 + i3 | 0) >>> 0 > (HEAP32[i4 >> 2] | 0) >>> 0 | ((i3 | 0) < 0 ? 1 : (i2 + i5 | 0) >>> 0 > (HEAP32[i4 + 4 >> 2] | 0) >>> 0)) {
  i23 = 3;
  return i23 | 0;
 }
 if ((i7 + (((Math_imul(i16, i10) | 0) + 7 | 0) >>> 3) | 0) >>> 0 > i22 >>> 0) {
  i23 = 3;
  return i23 | 0;
 }
 i4 = Math_imul(i23, i3) | 0;
 i11 = i5 >>> 3;
 i9 = i15 + (i4 + i11) | 0;
 i21 = i5 & 7;
 if (!(i6 << 16 >> 16)) {
  i23 = 0;
  return i23 | 0;
 }
 i18 = 8 - i21 | 0;
 i17 = i16 >>> 0 < i18 >>> 0 ? i16 : i18;
 i18 = ~(255 << i17) << i18 - i17;
 i19 = i16 - i17 | 0;
 i20 = 8 - i17 | 0;
 if (!i21) {
  i13 = i16 + -8 | 0;
  i21 = i13 >>> 3;
  i12 = i21 + 1 | 0;
  i13 = i13 - (i21 << 3) | 0;
  i14 = i16 >>> 0 > 7;
  i2 = 0;
  i1 = i7;
  i8 = 0;
  i7 = i15 + (i11 + i21 + i4 + 1) | 0;
  while (1) {
   if (i14) {
    i3 = i9;
    i4 = i16;
    i5 = i1;
    while (1) {
     i21 = HEAPU8[i5 >> 0] | 0 | i2 & 65535;
     HEAP8[i3 >> 0] = i21 >>> i8 | (HEAPU8[i3 >> 0] | 0);
     i2 = i21 << 8 & 65535;
     i4 = i4 + -8 | 0;
     if ((i4 | 0) <= 7) break; else {
      i3 = i3 + 1 | 0;
      i5 = i5 + 1 | 0;
     }
    }
    i5 = i13;
    i6 = i7;
    i1 = i1 + i12 | 0;
   } else {
    i5 = i16;
    i6 = i9;
   }
   do if ((i5 | 0) > 0) {
    i3 = 65280 >>> i5;
    i4 = HEAPU8[i6 >> 0] | 0;
    if ((i8 | 0) >= (i5 | 0)) {
     HEAP8[i6 >> 0] = i4 | i3 & (i2 & 65535) >>> i8;
     i3 = i8 - i5 | 0;
     break;
    }
    if (i1 >>> 0 < i22 >>> 0) {
     i2 = (HEAPU8[i1 >> 0] | 0 | i2 & 65535) & 65535;
     i1 = i1 + 1 | 0;
    }
    i2 = i2 & 65535;
    HEAP8[i6 >> 0] = i2 >>> i8 & i3 | i4;
    i3 = i8 + 8 - i5 | 0;
    i2 = i2 << 8 & 65535;
   } else i3 = i8; while (0);
   if ((i10 | 0) > 1) {
    i8 = i3;
    i10 = i10 + -1 | 0;
    i9 = i9 + i23 | 0;
    i7 = i7 + i23 | 0;
   } else {
    i1 = 0;
    break;
   }
  }
  return i1 | 0;
 }
 i8 = ~i16;
 i14 = i21 + -9 | 0;
 i14 = (i14 >>> 0 < i8 >>> 0 ? i8 : i14) + i16 + -7 | 0;
 i8 = i14 >>> 3;
 i13 = i8 + 1 | 0;
 i14 = i14 - (i8 << 3) | 0;
 i16 = (i19 | 0) > 7;
 i2 = 0;
 i1 = i7;
 i3 = 0;
 i12 = i10;
 i11 = i15 + (i11 + i8 + i4 + 2) | 0;
 while (1) {
  do if ((i12 | 0) == (i10 | 0)) {
   i8 = i21;
   i2 = HEAPU8[i1 >> 0] | 0;
   i1 = i1 + 1 | 0;
  } else {
   if ((i3 | 0) >= (i17 | 0)) {
    i8 = i3 - i17 | 0;
    i2 = (i2 & 65535) >>> 8;
    break;
   }
   if (i1 >>> 0 < i22 >>> 0) {
    i2 = (HEAPU8[i1 >> 0] | 0 | i2 & 65535) & 65535;
    i1 = i1 + 1 | 0;
   }
   i8 = i20 + i3 | 0;
  } while (0);
  i5 = i2 & 65535;
  i2 = i9 + 1 | 0;
  HEAP8[i9 >> 0] = i5 >>> i8 & i18 | (HEAPU8[i9 >> 0] | 0);
  i5 = i5 << 8;
  if (i16) {
   i3 = i19;
   i4 = i1;
   while (1) {
    i15 = HEAPU8[i4 >> 0] | 0 | i5 & 65280;
    HEAP8[i2 >> 0] = i15 >>> i8 | (HEAPU8[i2 >> 0] | 0);
    i5 = i15 << 8;
    i3 = i3 + -8 | 0;
    if ((i3 | 0) <= 7) break; else {
     i2 = i2 + 1 | 0;
     i4 = i4 + 1 | 0;
    }
   }
   i7 = i14;
   i6 = i11;
   i1 = i1 + i13 | 0;
  } else {
   i7 = i19;
   i6 = i2;
  }
  i2 = i5 & 65535;
  do if ((i7 | 0) > 0) {
   i3 = 65280 >>> i7;
   i4 = HEAPU8[i6 >> 0] | 0;
   if ((i8 | 0) >= (i7 | 0)) {
    HEAP8[i6 >> 0] = i4 | i3 & (i5 & 65280) >>> i8;
    i3 = i8 - i7 | 0;
    break;
   }
   if (i1 >>> 0 < i22 >>> 0) {
    i5 = HEAPU8[i1 >> 0] | 0 | i5 & 65280;
    i1 = i1 + 1 | 0;
   }
   i2 = i5 & 65535;
   HEAP8[i6 >> 0] = i2 >>> i8 & i3 | i4;
   i3 = i8 + 8 - i7 | 0;
   i2 = i2 << 8 & 65535;
  } else i3 = i8; while (0);
  if ((i12 | 0) > 1) {
   i12 = i12 + -1 | 0;
   i9 = i9 + i23 | 0;
   i11 = i11 + i23 | 0;
  } else {
   i1 = 0;
   break;
  }
 }
 return i1 | 0;
}

function _ass_shaper_shape(i10, i11) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i15;
 i12 = HEAP32[i11 >> 2] | 0;
 i13 = i11 + 4 | 0;
 if (!(_check_allocations(i10, HEAP32[i13 >> 2] | 0) | 0)) {
  i14 = -1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[i13 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i8 = i10 + 8 | 0;
  i5 = i10 + 24 | 0;
  i6 = i10 + 12 | 0;
  i7 = i10 + 16 | 0;
  i3 = 0;
  i4 = 0;
  do {
   i1 = i12 + (i4 * 344 | 0) | 0;
   i2 = HEAP32[i8 >> 2] | 0;
   HEAP32[i2 + (i4 << 2) >> 2] = HEAP32[i1 >> 2];
   if ((HEAP32[i1 >> 2] | 0) == 10) i14 = 10; else {
    i1 = HEAP32[i13 >> 2] | 0;
    if ((i4 | 0) == (i1 + -1 | 0)) i14 = 10; else i4 = i4 + 1 | 0;
   }
   if ((i14 | 0) == 10) {
    i14 = 0;
    HEAP32[i9 >> 2] = HEAP32[i5 >> 2];
    i1 = i4 - i3 + 1 | 0;
    _fribidi_get_bidi_types(i2 + (i3 << 2) | 0, i1, (HEAP32[i6 >> 2] | 0) + (i3 << 2) | 0);
    if (!((_fribidi_get_par_embedding_levels((HEAP32[i6 >> 2] | 0) + (i3 << 2) | 0, i1, i9, (HEAP32[i7 >> 2] | 0) + i3 | 0) | 0) << 24 >> 24)) {
     i1 = -1;
     i14 = 21;
     break;
    }
    i4 = i4 + 1 | 0;
    i3 = i4;
    i1 = HEAP32[i13 >> 2] | 0;
   }
  } while ((i4 | 0) < (i1 | 0));
  if ((i14 | 0) == 21) {
   STACKTOP = i15;
   return i1 | 0;
  }
  if ((i1 | 0) > 0) {
   i4 = i10 + 16 | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   i2 = 0;
   do {
    i9 = i12 + (i2 * 344 | 0) + 284 | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP8[i3 + i2 >> 0] | 0);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (i1 | 0));
   i2 = i4;
  } else i14 = 5;
 } else i14 = 5;
 if ((i14 | 0) == 5) i2 = i10 + 16 | 0;
 i3 = _calloc(1, i1) | 0;
 i4 = i10 + 8 | 0;
 _fribidi_get_joining_types(HEAP32[i4 >> 2] | 0, i1, i3);
 _fribidi_join_arabic(HEAP32[i10 + 12 >> 2] | 0, i1, HEAP32[i2 >> 2] | 0, i3);
 _fribidi_shape(262915, HEAP32[i2 >> 2] | 0, i1, i3, HEAP32[i4 >> 2] | 0);
 if (i1 | 0) {
  i2 = 0;
  do {
   i9 = HEAP32[(HEAP32[i12 + (i2 * 344 | 0) + 8 >> 2] | 0) + 64 + (HEAP32[i12 + (i2 * 344 | 0) + 12 >> 2] << 2) >> 2] | 0;
   i10 = (HEAP32[i4 >> 2] | 0) + (i2 << 2) | 0;
   HEAP32[i12 + (i2 * 344 | 0) >> 2] = HEAP32[i10 >> 2];
   i10 = _FT_Get_Char_Index(i9, _ass_font_index_magic(i9, HEAP32[i10 >> 2] | 0) | 0) | 0;
   HEAP32[i12 + (i2 * 344 | 0) + 16 >> 2] = i10;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i1 | 0));
 }
 _free(i3);
 i5 = HEAP32[i11 >> 2] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((i2 | 0) > 0) i1 = 0; else {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 while (1) {
  i3 = i5 + (i1 * 344 | 0) | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  L32 : do if ((i4 & -4 | 0) == 8288) i14 = 19; else if ((i4 | 0) < 8207) {
   if ((i4 | 0) >= 8204) switch (i4 | 0) {
   case 8204:
   case 8205:
   case 8206:
    {
     i14 = 19;
     break L32;
    }
   default:
    break L32;
   }
   if ((i4 | 0) < 847) switch (i4 | 0) {
   case 173:
    {
     i14 = 19;
     break L32;
    }
   default:
    break L32;
   }
   if ((i4 | 0) < 8203) switch (i4 | 0) {
   case 847:
    {
     i14 = 19;
     break L32;
    }
   default:
    break L32;
   } else switch (i4 | 0) {
   case 8203:
    {
     i14 = 19;
     break L32;
    }
   default:
    break L32;
   }
  } else {
   if ((i4 | 0) < 8236) switch (i4 | 0) {
   case 8207:
   case 8234:
   case 8235:
    {
     i14 = 19;
     break L32;
    }
   default:
    break L32;
   }
   if ((i4 | 0) < 8238) switch (i4 | 0) {
   case 8236:
   case 8237:
    {
     i14 = 19;
     break L32;
    }
   default:
    break L32;
   }
   if ((i4 | 0) < 65279) switch (i4 | 0) {
   case 8238:
    {
     i14 = 19;
     break L32;
    }
   default:
    break L32;
   } else switch (i4 | 0) {
   case 65279:
    {
     i14 = 19;
     break L32;
    }
   default:
    break L32;
   }
  } while (0);
  if ((i14 | 0) == 19) {
   i14 = 0;
   HEAP32[i3 >> 2] = 0;
   i13 = i5 + (i1 * 344 | 0) + 4 | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) == (i2 | 0)) {
   i1 = 0;
   break;
  }
 }
 STACKTOP = i15;
 return i1 | 0;
}

function _cff_parse_cid_ros(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = HEAP32[i7 + 412 >> 2] | 0;
 i9 = i7 + 28 | 0;
 if ((HEAP32[i7 + 404 >> 2] | 0) >>> 0 < i9 >>> 0) {
  i10 = 161;
  return i10 | 0;
 }
 i1 = i7 + 20 | 0;
 i3 = HEAP32[i7 + 16 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i6 = HEAP8[i3 >> 0] | 0;
 L4 : do if (i6 << 24 >> 24 == 30) {
  i6 = (_cff_parse_real(i3, i2, 0, 0) | 0) >> 16;
  i8 = HEAP32[i1 >> 2] | 0;
  i1 = i6;
 } else {
  i4 = i3 + 1 | 0;
  i5 = i6 & 255;
  switch (i6 << 24 >> 24) {
  case 28:
   {
    if ((i3 + 3 | 0) >>> 0 > i2 >>> 0) {
     i8 = i2;
     i1 = 0;
     break L4;
    }
    i8 = i2;
    i1 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i3 + 2 >> 0] | 0)) << 16 >> 16;
    break L4;
   }
  case 29:
   {
    if ((i3 + 5 | 0) >>> 0 > i2 >>> 0) {
     i8 = i2;
     i1 = 0;
     break L4;
    }
    i8 = i2;
    i1 = (HEAPU8[i3 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i3 + 3 >> 0] | 0) << 8 | (HEAPU8[i3 + 4 >> 0] | 0);
    break L4;
   }
  default:
   {
    if ((i6 & 255) < 247) {
     i8 = i2;
     i1 = i5 + -139 | 0;
     break L4;
    }
    i1 = (i3 + 2 | 0) >>> 0 > i2 >>> 0;
    if ((i6 & 255) < 251) {
     if (i1) {
      i8 = i2;
      i1 = 0;
      break L4;
     }
     i8 = i2;
     i1 = (HEAPU8[i4 >> 0] | 0 | (i5 << 8) + -63232) + 108 | 0;
     break L4;
    } else {
     if (i1) {
      i8 = i2;
      i1 = 0;
      break L4;
     }
     i8 = i2;
     i1 = (251 - i5 << 8) + -108 - (HEAPU8[i4 >> 0] | 0) | 0;
     break L4;
    }
   }
  }
 } while (0);
 HEAP32[i10 + 132 >> 2] = i1;
 i1 = i7 + 24 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP8[i8 >> 0] | 0;
 L22 : do if (i3 << 24 >> 24 == 30) {
  i8 = (_cff_parse_real(i8, i2, 0, 0) | 0) >> 16;
  i6 = HEAP32[i1 >> 2] | 0;
  i1 = i8;
 } else {
  i4 = i8 + 1 | 0;
  i5 = i3 & 255;
  switch (i3 << 24 >> 24) {
  case 28:
   {
    if ((i8 + 3 | 0) >>> 0 > i2 >>> 0) {
     i6 = i2;
     i1 = 0;
     break L22;
    }
    i6 = i2;
    i1 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i8 + 2 >> 0] | 0)) << 16 >> 16;
    break L22;
   }
  case 29:
   {
    if ((i8 + 5 | 0) >>> 0 > i2 >>> 0) {
     i6 = i2;
     i1 = 0;
     break L22;
    }
    i6 = i2;
    i1 = (HEAPU8[i8 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i8 + 3 >> 0] | 0) << 8 | (HEAPU8[i8 + 4 >> 0] | 0);
    break L22;
   }
  default:
   {
    if ((i3 & 255) < 247) {
     i6 = i2;
     i1 = i5 + -139 | 0;
     break L22;
    }
    i1 = (i8 + 2 | 0) >>> 0 > i2 >>> 0;
    if ((i3 & 255) < 251) {
     if (i1) {
      i6 = i2;
      i1 = 0;
      break L22;
     }
     i6 = i2;
     i1 = (HEAPU8[i4 >> 0] | 0 | (i5 << 8) + -63232) + 108 | 0;
     break L22;
    } else {
     if (i1) {
      i6 = i2;
      i1 = 0;
      break L22;
     }
     i6 = i2;
     i1 = (251 - i5 << 8) + -108 - (HEAPU8[i4 >> 0] | 0) | 0;
     break L22;
    }
   }
  }
 } while (0);
 HEAP32[i10 + 136 >> 2] = i1;
 i1 = HEAP32[i9 >> 2] | 0;
 i2 = HEAP8[i6 >> 0] | 0;
 L40 : do if (i2 << 24 >> 24 == 30) i1 = (_cff_parse_real(i6, i1, 0, 0) | 0) >> 16; else {
  i3 = i6 + 1 | 0;
  i4 = i2 & 255;
  switch (i2 << 24 >> 24) {
  case 28:
   {
    if ((i6 + 3 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     break L40;
    }
    i1 = ((HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i6 + 2 >> 0] | 0)) << 16 >> 16;
    break L40;
   }
  case 29:
   {
    if ((i6 + 5 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     break L40;
    }
    i1 = (HEAPU8[i6 + 2 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i6 + 3 >> 0] | 0) << 8 | (HEAPU8[i6 + 4 >> 0] | 0);
    break L40;
   }
  default:
   {
    if ((i2 & 255) < 247) {
     i1 = i4 + -139 | 0;
     break L40;
    }
    i1 = (i6 + 2 | 0) >>> 0 > i1 >>> 0;
    if ((i2 & 255) < 251) {
     if (i1) {
      i1 = 0;
      break L40;
     }
     i1 = (HEAPU8[i3 >> 0] | 0 | (i4 << 8) + -63232) + 108 | 0;
     break L40;
    } else {
     if (i1) {
      i1 = 0;
      break L40;
     }
     i1 = (251 - i4 << 8) + -108 - (HEAPU8[i3 >> 0] | 0) | 0;
     break L40;
    }
   }
  }
 } while (0);
 HEAP32[i10 + 140 >> 2] = i1;
 i10 = 0;
 return i10 | 0;
}

function _getAttributeId(i11, i3, i2, i4) {
 i11 = i11 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i14;
 i12 = HEAP32[i11 + 356 >> 2] | 0;
 i10 = i12 + 80 | 0;
 i13 = i12 + 92 | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 i9 = i12 + 88 | 0;
 do if ((i1 | 0) == (HEAP32[i9 >> 2] | 0)) if (!((_poolGrow(i10) | 0) << 24 >> 24)) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 } else {
  i1 = HEAP32[i13 >> 2] | 0;
  break;
 } while (0);
 HEAP32[i13 >> 2] = i1 + 1;
 HEAP8[i1 >> 0] = 0;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[i13 >> 2] | 0)) {
  if ((_poolGrow(i10) | 0) << 24 >> 24) i7 = 6;
 } else i7 = 6;
 L9 : do if ((i7 | 0) == 6) {
  i1 = i3 + 60 | 0;
  while (1) {
   FUNCTION_TABLE_viiiii[HEAP32[i1 >> 2] & 31](i3, i5, i4, i13, HEAP32[i9 >> 2] | 0);
   if ((HEAP32[i5 >> 2] | 0) == (i4 | 0)) break;
   if (!((_poolGrow(i10) | 0) << 24 >> 24)) break L9;
  }
  i8 = i12 + 96 | 0;
  if (!(HEAP32[i8 >> 2] | 0)) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  i1 = HEAP32[i13 >> 2] | 0;
  do if ((i1 | 0) == (HEAP32[i9 >> 2] | 0)) if (!((_poolGrow(i10) | 0) << 24 >> 24)) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  } else {
   i1 = HEAP32[i13 >> 2] | 0;
   break;
  } while (0);
  HEAP32[i13 >> 2] = i1 + 1;
  HEAP8[i1 >> 0] = 0;
  i3 = HEAP32[i8 >> 2] | 0;
  if (!i3) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  i6 = i3 + 1 | 0;
  i1 = _lookup(i11, i12 + 40 | 0, i6, 12) | 0;
  if (!i1) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  if ((HEAP32[i1 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i13 >> 2] = HEAP32[i8 >> 2];
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  }
  i2 = HEAP32[i13 >> 2] | 0;
  HEAP32[i8 >> 2] = i2;
  if (!(HEAP8[i11 + 236 >> 0] | 0)) {
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  }
  i4 = HEAP8[i6 >> 0] | 0;
  L37 : do if (i4 << 24 >> 24 == 120) if ((HEAP8[i3 + 2 >> 0] | 0) == 109) if ((HEAP8[i3 + 3 >> 0] | 0) == 108) if ((HEAP8[i3 + 4 >> 0] | 0) == 110) if ((HEAP8[i3 + 5 >> 0] | 0) == 115) {
   switch (HEAP8[i3 + 6 >> 0] | 0) {
   case 0:
    {
     i2 = i12 + 152 | 0;
     break;
    }
   case 58:
    {
     i2 = _lookup(i11, i12 + 60 | 0, i3 + 7 | 0, 8) | 0;
     break;
    }
   default:
    {
     i5 = 0;
     i3 = 120;
     break L37;
    }
   }
   HEAP32[i1 + 4 >> 2] = i2;
   HEAP8[i1 + 9 >> 0] = 1;
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  } else {
   i5 = 0;
   i3 = 120;
  } else {
   i5 = 0;
   i3 = 120;
  } else {
   i5 = 0;
   i3 = 120;
  } else {
   i5 = 0;
   i3 = 120;
  } else {
   i5 = 0;
   i3 = i4;
  } while (0);
  L48 : while (1) {
   switch (i3 << 24 >> 24) {
   case 58:
    break L48;
   case 0:
    {
     i7 = 41;
     break L48;
    }
   default:
    {}
   }
   i3 = i5 + 1 | 0;
   i5 = i3;
   i3 = HEAP8[i6 + i3 >> 0] | 0;
  }
  if ((i7 | 0) == 41) {
   STACKTOP = i14;
   return i1 | 0;
  }
  i3 = (i2 | 0) == (HEAP32[i9 >> 2] | 0);
  L54 : do if ((i5 | 0) > 0) {
   i4 = 0;
   while (1) {
    if (i3) {
     if (!((_poolGrow(i10) | 0) << 24 >> 24)) {
      i1 = 0;
      break;
     }
     i2 = HEAP32[i13 >> 2] | 0;
    }
    i3 = HEAP8[i6 + i4 >> 0] | 0;
    HEAP32[i13 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i3;
    i4 = i4 + 1 | 0;
    i2 = HEAP32[i13 >> 2] | 0;
    i3 = (i2 | 0) == (HEAP32[i9 >> 2] | 0);
    if ((i4 | 0) >= (i5 | 0)) break L54;
   }
   STACKTOP = i14;
   return i1 | 0;
  } while (0);
  do if (i3) if (!((_poolGrow(i10) | 0) << 24 >> 24)) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  } else {
   i2 = HEAP32[i13 >> 2] | 0;
   break;
  } while (0);
  HEAP32[i13 >> 2] = i2 + 1;
  HEAP8[i2 >> 0] = 0;
  i12 = _lookup(i11, i12 + 60 | 0, HEAP32[i8 >> 2] | 0, 8) | 0;
  HEAP32[i1 + 4 >> 2] = i12;
  i2 = HEAP32[i8 >> 2] | 0;
  if ((HEAP32[i12 >> 2] | 0) == (i2 | 0)) {
   HEAP32[i8 >> 2] = HEAP32[i13 >> 2];
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  } else {
   HEAP32[i13 >> 2] = i2;
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  }
 } while (0);
 i13 = 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _pfr_extra_item_load_bitmap_info(i1, i8, i10) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i17 = i18;
 i6 = HEAP32[i10 >> 2] | 0;
 HEAP32[i17 >> 2] = 0;
 i2 = i1 + 5 | 0;
 if (i2 >>> 0 <= i8 >>> 0) {
  i7 = HEAPU8[i1 + 3 >> 0] | 0;
  i9 = HEAP8[i1 + 4 >> 0] | 0;
  i15 = i9 & 255;
  i16 = i10 + 92 | 0;
  i3 = HEAP32[i16 >> 2] | 0;
  i1 = i3 + i15 | 0;
  i5 = i10 + 96 | 0;
  do if (i1 >>> 0 > (HEAP32[i5 >> 2] | 0) >>> 0) {
   i4 = i1 + 3 & -4;
   i1 = i10 + 100 | 0;
   i14 = _ft_mem_realloc(i6, 36, i3, i4, HEAP32[i1 >> 2] | 0, i17) | 0;
   HEAP32[i1 >> 2] = i14;
   i1 = HEAP32[i17 >> 2] | 0;
   if (!i1) {
    HEAP32[i5 >> 2] = i4;
    break;
   } else {
    i17 = i1;
    STACKTOP = i18;
    return i17 | 0;
   }
  } while (0);
  i3 = i7 & 1;
  i1 = (i3 | 0) == 0;
  i4 = i7 & 2;
  i12 = (i4 | 0) == 0;
  i5 = i7 & 4;
  i13 = (i5 | 0) == 0;
  i6 = i7 & 8;
  i14 = (i6 | 0) == 0;
  i7 = i7 & 16;
  i11 = (i7 | 0) == 0;
  if ((i2 + (Math_imul((i3 | 8) + (i4 >>> 1) + (i5 >>> 2) + (i6 >>> 3) + (i7 >>> 4) | 0, i15) | 0) | 0) >>> 0 <= i8 >>> 0) {
   i7 = HEAP32[i16 >> 2] | 0;
   i3 = (HEAP32[i10 + 100 >> 2] | 0) + (i7 * 36 | 0) | 0;
   if (i9 << 24 >> 24) if (i1) {
    i6 = 0;
    i5 = i3;
    while (1) {
     i1 = i2 + 1 | 0;
     HEAP32[i5 >> 2] = HEAPU8[i2 >> 0];
     if (i12) {
      i3 = i2 + 2 | 0;
      i1 = HEAPU8[i1 >> 0] | 0;
     } else {
      i3 = i2 + 3 | 0;
      i1 = (HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0);
     }
     HEAP32[i5 + 4 >> 2] = i1;
     HEAP32[i5 + 8 >> 2] = HEAPU8[i3 >> 0];
     i1 = HEAP8[i3 + 1 >> 0] | 0;
     if (i13) {
      i4 = i3 + 3 | 0;
      i1 = (i1 & 255) << 8;
      i2 = 2;
     } else {
      i4 = i3 + 4 | 0;
      i1 = (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (i1 & 255) << 16;
      i2 = 3;
     }
     HEAP32[i5 + 20 >> 2] = HEAPU8[i3 + i2 >> 0] | 0 | i1;
     if (i14) {
      i3 = i4 + 2 | 0;
      i1 = (HEAPU8[i4 >> 0] | 0) << 8;
      i2 = 1;
     } else {
      i3 = i4 + 3 | 0;
      i1 = (HEAPU8[i4 + 1 >> 0] | 0) << 8 | (HEAPU8[i4 >> 0] | 0) << 16;
      i2 = 2;
     }
     HEAP32[i5 + 24 >> 2] = HEAPU8[i4 + i2 >> 0] | 0 | i1;
     if (i11) {
      i2 = i3 + 1 | 0;
      i1 = HEAPU8[i3 >> 0] | 0;
     } else {
      i2 = i3 + 2 | 0;
      i1 = (HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i3 + 1 >> 0] | 0);
     }
     HEAP32[i5 + 28 >> 2] = i1;
     i6 = i6 + 1 | 0;
     if ((i6 | 0) == (i15 | 0)) break; else i5 = i5 + 36 | 0;
    }
   } else {
    i6 = 0;
    i5 = i3;
    while (1) {
     i1 = i2 + 2 | 0;
     HEAP32[i5 >> 2] = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
     if (i12) {
      i3 = i2 + 3 | 0;
      i1 = HEAPU8[i1 >> 0] | 0;
     } else {
      i3 = i2 + 4 | 0;
      i1 = (HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
     }
     HEAP32[i5 + 4 >> 2] = i1;
     HEAP32[i5 + 8 >> 2] = HEAPU8[i3 >> 0];
     i1 = HEAP8[i3 + 1 >> 0] | 0;
     if (i13) {
      i4 = i3 + 3 | 0;
      i1 = (i1 & 255) << 8;
      i2 = 2;
     } else {
      i4 = i3 + 4 | 0;
      i1 = (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (i1 & 255) << 16;
      i2 = 3;
     }
     HEAP32[i5 + 20 >> 2] = HEAPU8[i3 + i2 >> 0] | 0 | i1;
     if (i14) {
      i3 = i4 + 2 | 0;
      i1 = (HEAPU8[i4 >> 0] | 0) << 8;
      i2 = 1;
     } else {
      i3 = i4 + 3 | 0;
      i1 = (HEAPU8[i4 + 1 >> 0] | 0) << 8 | (HEAPU8[i4 >> 0] | 0) << 16;
      i2 = 2;
     }
     HEAP32[i5 + 24 >> 2] = HEAPU8[i4 + i2 >> 0] | 0 | i1;
     if (i11) {
      i2 = i3 + 1 | 0;
      i1 = HEAPU8[i3 >> 0] | 0;
     } else {
      i2 = i3 + 2 | 0;
      i1 = (HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i3 + 1 >> 0] | 0);
     }
     HEAP32[i5 + 28 >> 2] = i1;
     i6 = i6 + 1 | 0;
     if ((i6 | 0) == (i15 | 0)) break; else i5 = i5 + 36 | 0;
    }
   }
   HEAP32[i16 >> 2] = i7 + i15;
   i17 = HEAP32[i17 >> 2] | 0;
   STACKTOP = i18;
   return i17 | 0;
  }
 }
 HEAP32[i17 >> 2] = 8;
 i17 = 8;
 STACKTOP = i18;
 return i17 | 0;
}

function _TT_Hint_Glyph(i13, i7) {
 i13 = i13 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i8 = i13 + 124 | 0;
 i9 = HEAP32[(HEAP32[i13 + 8 >> 2] | 0) + 140 >> 2] | 0;
 i3 = (i9 | 0) > 0;
 if (i3) _memcpy(HEAP32[i13 + 136 >> 2] | 0, HEAP32[i13 + 140 >> 2] | 0, HEAPU16[i13 + 132 >> 1] << 3 | 0) | 0;
 i12 = i13 + 160 | 0;
 i2 = i13 + 4 | 0;
 i4 = (HEAP32[i12 >> 2] | 0) + 284 | 0;
 i5 = (HEAP32[i2 >> 2] | 0) + 172 | 0;
 i6 = i4 + 68 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  i4 = i4 + 4 | 0;
  i5 = i5 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 i1 = HEAP32[i12 >> 2] | 0;
 if (!(i7 << 24 >> 24)) {
  i10 = HEAP32[i2 >> 2] | 0;
  HEAP32[i1 + 220 >> 2] = HEAP32[i10 + 48 >> 2];
  HEAP32[i1 + 224 >> 2] = HEAP32[i10 + 52 >> 2];
  i10 = i13 + 132 | 0;
  i11 = i13 + 140 | 0;
 } else {
  HEAP32[i1 + 220 >> 2] = 65536;
  HEAP32[i1 + 224 >> 2] = 65536;
  i11 = i13 + 140 | 0;
  i10 = i13 + 132 | 0;
  _memcpy(HEAP32[i13 + 144 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAPU16[i10 >> 1] << 3 | 0) | 0;
 }
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = HEAP16[i10 >> 1] | 0;
 i6 = i2 & 65535;
 i5 = i1 + (i6 + -4 << 3) | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 32 & -64;
 i5 = i1 + (i6 + -3 << 3) | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 32 & -64;
 i5 = i1 + (i6 + -2 << 3) + 4 | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 32 & -64;
 i6 = i1 + (i6 + -1 << 3) + 4 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 32 & -64;
 if (i3) {
  i3 = HEAP32[(HEAP32[i13 + 12 >> 2] | 0) + 64 >> 2] | 0;
  i4 = HEAP32[i12 >> 2] | 0;
  HEAP32[i4 + 460 >> 2] = HEAP32[i4 + 392 >> 2];
  HEAP32[i4 + 464 >> 2] = i9;
  HEAP8[i4 + 560 >> 0] = i7;
  i4 = i4 + 144 | 0;
  i5 = i8;
  i6 = i4 + 36 | 0;
  do {
   HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
   i4 = i4 + 4 | 0;
   i5 = i5 + 4 | 0;
  } while ((i4 | 0) < (i6 | 0));
  i1 = HEAP32[i12 >> 2] | 0;
  HEAP32[i1 + 356 >> 2] = HEAP32[i1 + 460 >> 2];
  HEAP32[i1 + 364 >> 2] = HEAP32[i1 + 464 >> 2];
  HEAP32[i1 + 360 >> 2] = 0;
  HEAP32[i1 + 352 >> 2] = 3;
  i2 = i1 + 144 | 0;
  i4 = i1 + 36 | 0;
  i5 = i2;
  i6 = i4 + 36 | 0;
  do {
   HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
   i4 = i4 + 4 | 0;
   i5 = i5 + 4 | 0;
  } while ((i4 | 0) < (i6 | 0));
  i4 = i1 + 72 | 0;
  i5 = i2;
  i6 = i4 + 36 | 0;
  do {
   HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
   i4 = i4 + 4 | 0;
   i5 = i5 + 4 | 0;
  } while ((i4 | 0) < (i6 | 0));
  i4 = i1 + 108 | 0;
  i5 = i2;
  i6 = i4 + 36 | 0;
  do {
   HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
   i4 = i4 + 4 | 0;
   i5 = i5 + 4 | 0;
  } while ((i4 | 0) < (i6 | 0));
  HEAP16[i1 + 344 >> 1] = 1;
  HEAP16[i1 + 346 >> 1] = 1;
  HEAP16[i1 + 348 >> 1] = 1;
  i9 = i1 + 294 | 0;
  HEAP16[i9 >> 1] = 16384;
  HEAP16[i1 + 296 >> 1] = 0;
  i2 = i1 + 298 | 0;
  i9 = HEAPU16[i9 >> 1] | HEAPU16[i9 + 2 >> 1] << 16;
  HEAP16[i2 >> 1] = i9;
  HEAP16[i2 + 2 >> 1] = i9 >>> 16;
  i2 = i1 + 290 | 0;
  HEAP16[i2 >> 1] = i9;
  HEAP16[i2 + 2 >> 1] = i9 >>> 16;
  HEAP32[i1 + 312 >> 2] = 1;
  HEAP32[i1 + 304 >> 2] = 1;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 428 >> 2] = 0;
  i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 652 >> 2] & 63](i1) | 0;
  i1 = HEAP32[i12 >> 2] | 0;
  if (i2 | 0) if (HEAP8[i1 + 561 >> 0] | 0) {
   i13 = i2;
   return i13 | 0;
  }
  HEAP8[i3 >> 0] = HEAP32[i1 + 340 >> 2] << 5 | HEAPU8[i3 >> 0] | 4;
  i2 = HEAP16[i10 >> 1] | 0;
  i1 = HEAP32[i11 >> 2] | 0;
 }
 i11 = i2 & 65535;
 i9 = i1 + (i11 + -4 << 3) | 0;
 i10 = HEAP32[i9 + 4 >> 2] | 0;
 i12 = i13 + 68 | 0;
 HEAP32[i12 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i12 + 4 >> 2] = i10;
 i12 = i1 + (i11 + -3 << 3) | 0;
 i10 = HEAP32[i12 + 4 >> 2] | 0;
 i9 = i13 + 76 | 0;
 HEAP32[i9 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i9 + 4 >> 2] = i10;
 i9 = i1 + (i11 + -2 << 3) | 0;
 i10 = HEAP32[i9 + 4 >> 2] | 0;
 i12 = i13 + 184 | 0;
 HEAP32[i12 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i12 + 4 >> 2] = i10;
 i11 = i1 + (i11 + -1 << 3) | 0;
 i12 = HEAP32[i11 + 4 >> 2] | 0;
 i13 = i13 + 192 | 0;
 HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i13 + 4 >> 2] = i12;
 i13 = 0;
 return i13 | 0;
}

function _epilogProcessor(i6, i1, i5, i19) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i19 = i19 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 4 | 0;
 i17 = i20;
 HEAP32[i6 + 280 >> 2] = 81;
 i18 = i6 + 288 | 0;
 HEAP32[i18 >> 2] = i1;
 i8 = i6 + 144 | 0;
 i9 = i6 + 292 | 0;
 i10 = i6 + 80 | 0;
 i11 = i6 + 44 | 0;
 i12 = i6 + 48 | 0;
 i13 = i6 + 4 | 0;
 i14 = i6 + 480 | 0;
 i4 = i1;
 L1 : while (1) {
  HEAP32[i17 >> 2] = 0;
  i3 = HEAP32[i8 >> 2] | 0;
  i3 = FUNCTION_TABLE_iiiii[HEAP32[i3 >> 2] & 127](i3, i4, i5, i17) | 0;
  i1 = HEAP32[i17 >> 2] | 0;
  HEAP32[i9 >> 2] = i1;
  i7 = i1;
  switch (i3 | 0) {
  case -15:
   {
    i2 = 3;
    break L1;
   }
  case -4:
   {
    i2 = 11;
    break L1;
   }
  case 0:
   {
    i2 = 20;
    break L1;
   }
  case -1:
   {
    i2 = 21;
    break L1;
   }
  case -2:
   {
    i2 = 23;
    break L1;
   }
  case 15:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    if (i2 | 0) {
     i3 = HEAP32[i8 >> 2] | 0;
     HEAP32[i15 >> 2] = i4;
     if (!(HEAP8[i3 + 72 >> 0] | 0)) {
      i1 = i3 + 60 | 0;
      do {
       HEAP32[i16 >> 2] = HEAP32[i11 >> 2];
       FUNCTION_TABLE_viiiii[HEAP32[i1 >> 2] & 31](i3, i15, i7, i16, HEAP32[i12 >> 2] | 0);
       HEAP32[i9 >> 2] = HEAP32[i15 >> 2];
       i4 = HEAP32[i11 >> 2] | 0;
       FUNCTION_TABLE_viii[HEAP32[i10 >> 2] & 31](HEAP32[i13 >> 2] | 0, i4, (HEAP32[i16 >> 2] | 0) - i4 | 0);
       i4 = HEAP32[i15 >> 2] | 0;
       HEAP32[i18 >> 2] = i4;
      } while ((i4 | 0) != (i7 | 0));
     } else FUNCTION_TABLE_viii[i2 & 31](HEAP32[i13 >> 2] | 0, i4, i1 - i4 | 0);
    }
    break;
   }
  case 11:
   {
    if (!(_reportProcessingInstruction(i6, HEAP32[i8 >> 2] | 0, i4, i7) | 0)) {
     i1 = 1;
     i2 = 28;
     break L1;
    }
    break;
   }
  case 13:
   {
    if (!(_reportComment(i6, HEAP32[i8 >> 2] | 0, i4, i7) | 0)) {
     i1 = 1;
     i2 = 28;
     break L1;
    }
    break;
   }
  default:
   {
    i1 = 9;
    i2 = 28;
    break L1;
   }
  }
  i1 = HEAP32[i17 >> 2] | 0;
  HEAP32[i18 >> 2] = i1;
  switch (HEAP32[i14 >> 2] | 0) {
  case 3:
   {
    i2 = 26;
    break L1;
   }
  case 2:
   {
    i1 = 35;
    i2 = 28;
    break L1;
   }
  default:
   {}
  }
  i4 = i1;
 }
 if ((i2 | 0) == 3) {
  i2 = HEAP32[i10 >> 2] | 0;
  do if (i2) {
   i3 = HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i4;
   if (!(HEAP8[i3 + 72 >> 0] | 0)) {
    i1 = i3 + 60 | 0;
    do {
     HEAP32[i16 >> 2] = HEAP32[i11 >> 2];
     FUNCTION_TABLE_viiiii[HEAP32[i1 >> 2] & 31](i3, i15, i7, i16, HEAP32[i12 >> 2] | 0);
     HEAP32[i9 >> 2] = HEAP32[i15 >> 2];
     i8 = HEAP32[i11 >> 2] | 0;
     FUNCTION_TABLE_viii[HEAP32[i10 >> 2] & 31](HEAP32[i13 >> 2] | 0, i8, (HEAP32[i16 >> 2] | 0) - i8 | 0);
     i8 = HEAP32[i15 >> 2] | 0;
     HEAP32[i18 >> 2] = i8;
    } while ((i8 | 0) != (i7 | 0));
   } else FUNCTION_TABLE_viii[i2 & 31](HEAP32[i13 >> 2] | 0, i4, i1 - i4 | 0);
   if ((HEAP32[i14 >> 2] | 0) == 2) {
    i19 = 35;
    STACKTOP = i20;
    return i19 | 0;
   } else {
    i1 = HEAP32[i17 >> 2] | 0;
    break;
   }
  } while (0);
  HEAP32[i19 >> 2] = i1;
  i19 = 0;
  STACKTOP = i20;
  return i19 | 0;
 } else if ((i2 | 0) == 11) {
  HEAP32[i19 >> 2] = i4;
  i19 = 0;
  STACKTOP = i20;
  return i19 | 0;
 } else if ((i2 | 0) == 20) {
  HEAP32[i18 >> 2] = i1;
  i19 = 4;
  STACKTOP = i20;
  return i19 | 0;
 } else if ((i2 | 0) == 21) {
  if (HEAP8[i6 + 484 >> 0] | 0) {
   i19 = 5;
   STACKTOP = i20;
   return i19 | 0;
  }
  HEAP32[i19 >> 2] = i4;
  i19 = 0;
  STACKTOP = i20;
  return i19 | 0;
 } else if ((i2 | 0) == 23) {
  if (HEAP8[i6 + 484 >> 0] | 0) {
   i19 = 6;
   STACKTOP = i20;
   return i19 | 0;
  }
  HEAP32[i19 >> 2] = i4;
  i19 = 0;
  STACKTOP = i20;
  return i19 | 0;
 } else if ((i2 | 0) == 26) {
  HEAP32[i19 >> 2] = i1;
  i19 = 0;
  STACKTOP = i20;
  return i19 | 0;
 } else if ((i2 | 0) == 28) {
  STACKTOP = i20;
  return i1 | 0;
 }
 return 0;
}

function _parsePseudoAttribute(i6, i1, i9, i3, i2, i5, i14) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i14 = i14 | 0;
 var i4 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i15 + 4 | 0;
 i11 = i15;
 i12 = i15 + 8 | 0;
 if ((i1 | 0) == (i9 | 0)) {
  HEAP32[i3 >> 2] = 0;
  i14 = 1;
  STACKTOP = i15;
  return i14 | 0;
 }
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i12;
 i7 = i6 + 60 | 0;
 i8 = i12 + 1 | 0;
 FUNCTION_TABLE_viiiii[HEAP32[i7 >> 2] & 31](i6, i10, i9, i11, i8);
 switch (((HEAP32[i11 >> 2] | 0) == (i12 | 0) ? -1 : HEAP8[i12 >> 0] | 0) | 0) {
 case 9:
 case 10:
 case 13:
 case 32:
  break;
 default:
  {
   HEAP32[i14 >> 2] = i1;
   i14 = 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 }
 i13 = i6 + 68 | 0;
 L9 : while (1) {
  i1 = i1 + (HEAP32[i13 >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = i1;
  HEAP32[i11 >> 2] = i12;
  FUNCTION_TABLE_viiiii[HEAP32[i7 >> 2] & 31](i6, i10, i9, i11, i8);
  switch (((HEAP32[i11 >> 2] | 0) == (i12 | 0) ? -1 : HEAP8[i12 >> 0] | 0) | 0) {
  case 9:
  case 10:
  case 13:
  case 32:
   break;
  default:
   break L9;
  }
 }
 if ((i1 | 0) == (i9 | 0)) {
  HEAP32[i3 >> 2] = 0;
  i14 = 1;
  STACKTOP = i15;
  return i14 | 0;
 }
 HEAP32[i3 >> 2] = i1;
 L16 : while (1) {
  HEAP32[i10 >> 2] = i1;
  HEAP32[i11 >> 2] = i12;
  FUNCTION_TABLE_viiiii[HEAP32[i7 >> 2] & 31](i6, i10, i9, i11, i8);
  switch (((HEAP32[i11 >> 2] | 0) == (i12 | 0) ? -1 : HEAP8[i12 >> 0] | 0) | 0) {
  case -1:
   {
    i4 = 11;
    break L16;
   }
  case 61:
   {
    i4 = 12;
    break L16;
   }
  case 9:
  case 10:
  case 13:
  case 32:
   {
    i4 = 13;
    break L16;
   }
  default:
   {}
  }
  i1 = i1 + (HEAP32[i13 >> 2] | 0) | 0;
 }
 L19 : do if ((i4 | 0) == 11) {
  HEAP32[i14 >> 2] = i1;
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 } else if ((i4 | 0) == 12) HEAP32[i2 >> 2] = i1; else if ((i4 | 0) == 13) {
  HEAP32[i2 >> 2] = i1;
  L24 : while (1) {
   i1 = i1 + (HEAP32[i13 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = i1;
   HEAP32[i11 >> 2] = i12;
   FUNCTION_TABLE_viiiii[HEAP32[i7 >> 2] & 31](i6, i10, i9, i11, i8);
   switch (((HEAP32[i11 >> 2] | 0) == (i12 | 0) ? -1 : HEAP8[i12 >> 0] | 0) | 0) {
   case 61:
    break L19;
   case 9:
   case 10:
   case 13:
   case 32:
    break;
   default:
    break L24;
   }
  }
  HEAP32[i14 >> 2] = i1;
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 } while (0);
 if ((i1 | 0) == (HEAP32[i3 >> 2] | 0)) {
  HEAP32[i14 >> 2] = i1;
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 L33 : while (1) {
  i1 = i1 + (HEAP32[i13 >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = i1;
  HEAP32[i11 >> 2] = i12;
  FUNCTION_TABLE_viiiii[HEAP32[i7 >> 2] & 31](i6, i10, i9, i11, i8);
  i3 = (HEAP32[i11 >> 2] | 0) == (i12 | 0) ? -1 : HEAP8[i12 >> 0] | 0;
  switch (i3 | 0) {
  case 9:
  case 10:
  case 13:
  case 32:
   break;
  case 34:
  case 39:
   break L33;
  default:
   {
    i4 = 21;
    break L33;
   }
  }
 }
 if ((i4 | 0) == 21) {
  HEAP32[i14 >> 2] = i1;
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = i1 + (HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i12;
 FUNCTION_TABLE_viiiii[HEAP32[i7 >> 2] & 31](i6, i10, i9, i11, i8);
 i2 = (HEAP32[i11 >> 2] | 0) == (i12 | 0) ? -1 : HEAP8[i12 >> 0] | 0;
 L39 : do if ((i2 | 0) != (i3 | 0)) {
  L40 : while (1) {
   if ((i2 + -48 | 0) >>> 0 > 9 & ((i2 & -33) + -65 | 0) >>> 0 > 25) switch (i2 | 0) {
   case 45:
   case 46:
   case 95:
    break;
   default:
    break L40;
   }
   i1 = i1 + (HEAP32[i13 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = i1;
   HEAP32[i11 >> 2] = i12;
   FUNCTION_TABLE_viiiii[HEAP32[i7 >> 2] & 31](i6, i10, i9, i11, i8);
   i2 = (HEAP32[i11 >> 2] | 0) == (i12 | 0) ? -1 : HEAP8[i12 >> 0] | 0;
   if ((i2 | 0) == (i3 | 0)) break L39;
  }
  HEAP32[i14 >> 2] = i1;
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 } while (0);
 HEAP32[i14 >> 2] = i1 + (HEAP32[i13 >> 2] | 0);
 i14 = 1;
 STACKTOP = i15;
 return i14 | 0;
}

function _ft_smooth_render_generic(i11, i8, i1, i3, i2) {
 i11 = i11 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i22 = i24 + 64 | 0;
 i4 = i24 + 48 | 0;
 i13 = i24;
 i23 = i8 + 108 | 0;
 i14 = i8 + 76 | 0;
 i21 = HEAP32[i11 + 8 >> 2] | 0;
 i12 = (i1 | 0) == 3;
 i17 = (i1 | 0) == 4;
 i9 = i8 + 72 | 0;
 if ((HEAP32[i9 >> 2] | 0) != (HEAP32[i11 + 16 >> 2] | 0)) {
  HEAP32[i22 >> 2] = 6;
  i23 = HEAP32[i22 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 if ((i1 | 0) != (i2 | 0)) {
  HEAP32[i22 >> 2] = 19;
  i23 = HEAP32[i22 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 if (!i3) {
  i1 = 0;
  i2 = 0;
 } else {
  i1 = HEAP32[i3 >> 2] | 0;
  i2 = HEAP32[i3 + 4 >> 2] | 0;
 }
 _FT_Outline_Get_CBox(i23, i4);
 i5 = (HEAP32[i4 >> 2] | 0) + i1 | 0;
 i7 = i5 & -64;
 HEAP32[i4 >> 2] = i7;
 i20 = i4 + 4 | 0;
 i6 = (HEAP32[i20 >> 2] | 0) + i2 & -64;
 HEAP32[i20 >> 2] = i6;
 i20 = i4 + 8 | 0;
 i10 = i1 + 63 + (HEAP32[i20 >> 2] | 0) & -64;
 HEAP32[i20 >> 2] = i10;
 i20 = i4 + 12 | 0;
 i3 = i2 + 63 + (HEAP32[i20 >> 2] | 0) | 0;
 i15 = i3 & -64;
 HEAP32[i20 >> 2] = i15;
 i20 = i1 - i7 | 0;
 i18 = i2 - i6 | 0;
 i7 = (i10 - i7 | 0) >>> 6;
 i2 = (i15 - i6 | 0) >>> 6;
 i6 = i7 * 3 | 0;
 i15 = i12 ? i6 + 3 & 536870908 : i7;
 i6 = i12 ? i6 : i7;
 i10 = i17 ? i2 * 3 | 0 : i2;
 if ((i6 | i10) & 268402688 | 0) {
  HEAP32[i22 >> 2] = 98;
  i23 = HEAP32[i22 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 i19 = i8 + 156 | 0;
 i16 = i8 + 88 | 0;
 if (HEAP32[(HEAP32[i19 >> 2] | 0) + 4 >> 2] & 1 | 0) {
  _ft_mem_free(i21, HEAP32[i16 >> 2] | 0);
  HEAP32[i16 >> 2] = 0;
  i4 = (HEAP32[i19 >> 2] | 0) + 4 | 0;
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -2;
 }
 i4 = _ft_mem_alloc(i21, Math_imul(i15, i10) | 0, i22) | 0;
 HEAP32[i16 >> 2] = i4;
 if (HEAP32[i22 >> 2] | 0) {
  i23 = HEAP32[i22 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 i4 = (HEAP32[i19 >> 2] | 0) + 4 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1;
 HEAP32[i9 >> 2] = 1651078259;
 HEAP32[i8 + 100 >> 2] = i5 >> 6;
 HEAP32[i8 + 104 >> 2] = i3 >> 6;
 HEAP8[i8 + 94 >> 0] = 2;
 HEAP16[i8 + 92 >> 1] = 256;
 HEAP32[i8 + 80 >> 2] = i6;
 HEAP32[i14 >> 2] = i10;
 HEAP32[i8 + 84 >> 2] = i15;
 if (!(i18 | i20)) i8 = 0; else {
  _FT_Outline_Translate(i23, i20, i18);
  i8 = 1;
 }
 HEAP32[i13 >> 2] = i14;
 HEAP32[i13 + 4 >> 2] = i23;
 HEAP32[i13 + 8 >> 2] = 1;
 i14 = FUNCTION_TABLE_iii[HEAP32[i11 + 56 >> 2] & 255](HEAP32[i11 + 52 >> 2] | 0, i13) | 0;
 HEAP32[i22 >> 2] = i14;
 if (!i14) {
  if (!((i2 | 0) == 0 | i12 ^ 1 | (i7 | 0) == 0)) {
   i4 = i2;
   i5 = HEAP32[i16 >> 2] | 0;
   while (1) {
    i1 = i5 + i6 | 0;
    i3 = i7;
    do {
     i3 = i3 + -1 | 0;
     i13 = HEAP8[i5 + i3 >> 0] | 0;
     i14 = i1;
     i1 = i1 + -3 | 0;
     HEAP8[i1 >> 0] = i13;
     HEAP8[i14 + -2 >> 0] = i13;
     HEAP8[i14 + -1 >> 0] = i13;
    } while ((i3 | 0) != 0);
    i4 = i4 + -1 | 0;
    if (!i4) break; else i5 = i5 + i15 | 0;
   }
  }
  if (i17) {
   i1 = HEAP32[i16 >> 2] | 0;
   if (i2 | 0) {
    i4 = i1;
    i3 = i1 + (Math_imul(i15, i10 - i2 | 0) | 0) | 0;
    while (1) {
     _memcpy(i4 | 0, i3 | 0, i15 | 0) | 0;
     i1 = i4 + i15 | 0;
     _memcpy(i1 | 0, i3 | 0, i15 | 0) | 0;
     i1 = i1 + i15 | 0;
     _memcpy(i1 | 0, i3 | 0, i15 | 0) | 0;
     i2 = i2 + -1 | 0;
     if (!i2) break; else {
      i4 = i1 + i15 | 0;
      i3 = i3 + i15 | 0;
     }
    }
   }
  }
  HEAP32[i22 >> 2] = 0;
  i1 = 0;
 } else i1 = 1;
 if (i8 << 24 >> 24) _FT_Outline_Translate(i23, 0 - i20 | 0, 0 - i18 | 0);
 if (!(i1 << 24 >> 24)) {
  i23 = HEAP32[i22 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 _ft_mem_free(i21, HEAP32[i16 >> 2] | 0);
 HEAP32[i16 >> 2] = 0;
 i23 = (HEAP32[i19 >> 2] | 0) + 4 | 0;
 HEAP32[i23 >> 2] = HEAP32[i23 >> 2] & -2;
 i23 = HEAP32[i22 >> 2] | 0;
 STACKTOP = i24;
 return i23 | 0;
}

function _doParseXmlDecl(i7, i11, i21, i1, i2, i22, i4, i5, i6, i9, i14) {
 i7 = i7 | 0;
 i11 = i11 | 0;
 i21 = i21 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i22 = i22 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i14 = i14 | 0;
 var i3 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i16 = i23 + 20 | 0;
 i17 = i23 + 16 | 0;
 i18 = i23 + 24 | 0;
 i19 = i23 + 12 | 0;
 i12 = i23 + 8 | 0;
 i8 = i23 + 4 | 0;
 i10 = i23;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 i20 = i21 + 68 | 0;
 i15 = HEAP32[i20 >> 2] | 0;
 i13 = i1 + (i15 * 5 | 0) | 0;
 HEAP32[i19 >> 2] = i13;
 i15 = i2 + (0 - (i15 << 1)) | 0;
 i13 = (_parsePseudoAttribute(i21, i13, i15, i8, i10, i12, i19) | 0) != 0;
 i3 = HEAP32[i8 >> 2] | 0;
 i1 = i3;
 if (!(i13 & (i3 | 0) != 0)) {
  HEAP32[i22 >> 2] = HEAP32[i19 >> 2];
  i22 = 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 i13 = i21 + 28 | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 do if (!(FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 127](i21, i3, i2, 280887) | 0)) {
  if (!i11) {
   HEAP32[i22 >> 2] = i1;
   i22 = 0;
   STACKTOP = i23;
   return i22 | 0;
  }
 } else {
  if (i4 | 0) HEAP32[i4 >> 2] = HEAP32[i12 >> 2];
  i1 = HEAP32[i19 >> 2] | 0;
  if (i5 | 0) HEAP32[i5 >> 2] = i1;
  if (!(_parsePseudoAttribute(i21, i1, i15, i8, i10, i12, i19) | 0)) {
   HEAP32[i22 >> 2] = HEAP32[i19 >> 2];
   i22 = 0;
   STACKTOP = i23;
   return i22 | 0;
  }
  i2 = HEAP32[i8 >> 2] | 0;
  if (i2 | 0) {
   i1 = i2;
   i3 = i2;
   i2 = HEAP32[i10 >> 2] | 0;
   break;
  }
  if (!i11) {
   i22 = 1;
   STACKTOP = i23;
   return i22 | 0;
  }
  HEAP32[i22 >> 2] = HEAP32[i19 >> 2];
  i22 = 0;
  STACKTOP = i23;
  return i22 | 0;
 } while (0);
 do if (FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 127](i21, i3, i2, 345575) | 0) {
  i2 = HEAP32[i12 >> 2] | 0;
  HEAP32[i16 >> 2] = i2;
  HEAP32[i17 >> 2] = i18;
  FUNCTION_TABLE_viiiii[HEAP32[i21 + 60 >> 2] & 31](i21, i16, i15, i17, i18 + 1 | 0);
  if (!((HEAP32[i17 >> 2] | 0) != (i18 | 0) ? ((HEAP8[i18 >> 0] & -33) + -65 | 0) >>> 0 < 26 : 0)) {
   HEAP32[i22 >> 2] = i2;
   i22 = 0;
   STACKTOP = i23;
   return i22 | 0;
  }
  if (i6 | 0) HEAP32[i6 >> 2] = i2;
  i1 = HEAP32[i19 >> 2] | 0;
  if (i9 | 0) {
   i7 = FUNCTION_TABLE_iiii[i7 & 127](i21, i2, i1 + (0 - (HEAP32[i20 >> 2] | 0)) | 0) | 0;
   HEAP32[i9 >> 2] = i7;
  }
  if (!(_parsePseudoAttribute(i21, i1, i15, i8, i10, i12, i19) | 0)) {
   HEAP32[i22 >> 2] = HEAP32[i19 >> 2];
   i22 = 0;
   STACKTOP = i23;
   return i22 | 0;
  }
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) {
   i22 = 1;
   STACKTOP = i23;
   return i22 | 0;
  } else {
   i3 = i1;
   i2 = HEAP32[i10 >> 2] | 0;
   break;
  }
 } while (0);
 if ((i11 | 0) != 0 | (FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 127](i21, i3, i2, 345584) | 0) == 0) {
  HEAP32[i22 >> 2] = i1;
  i22 = 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 i2 = HEAP32[i12 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i3 = i2;
 do if (!(FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 127](i21, i2, i1 + (0 - (HEAP32[i20 >> 2] | 0)) | 0, 355978) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 127](i21, i2, i1 + (0 - (HEAP32[i20 >> 2] | 0)) | 0, 345595) | 0)) {
  HEAP32[i22 >> 2] = i3;
  i22 = 0;
  STACKTOP = i23;
  return i22 | 0;
 } else {
  if (!i14) break;
  HEAP32[i14 >> 2] = 0;
  break;
 } else if (i14 | 0) HEAP32[i14 >> 2] = 1; while (0);
 i3 = i21 + 60 | 0;
 i4 = i18 + 1 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 L62 : while (1) {
  HEAP32[i16 >> 2] = i1;
  HEAP32[i17 >> 2] = i18;
  FUNCTION_TABLE_viiiii[HEAP32[i3 >> 2] & 31](i21, i16, i15, i17, i4);
  switch (((HEAP32[i17 >> 2] | 0) == (i18 | 0) ? -1 : HEAP8[i18 >> 0] | 0) | 0) {
  case 9:
  case 10:
  case 13:
  case 32:
   break;
  default:
   break L62;
  }
  i2 = i1 + (HEAP32[i20 >> 2] | 0) | 0;
  i1 = i2;
 }
 HEAP32[i19 >> 2] = i2;
 if ((i1 | 0) == (i15 | 0)) {
  i22 = 1;
  STACKTOP = i23;
  return i22 | 0;
 }
 HEAP32[i22 >> 2] = i1;
 i22 = 0;
 STACKTOP = i23;
 return i22 | 0;
}

function _little2_cdataSectionTok(i4, i5, i1, i8) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i9 = 0;
 if ((i5 | 0) == (i1 | 0)) {
  i8 = -4;
  return i8 | 0;
 }
 i3 = i5;
 i6 = i1 - i3 | 0;
 i9 = (i6 & 1 | 0) == 0;
 i6 = i6 & -2;
 i2 = (i6 | 0) == 0;
 i6 = i9 | i2 ? i1 : i5 + i6 | 0;
 if (!(i9 | i2 ^ 1)) {
  i9 = -1;
  return i9 | 0;
 }
 i1 = HEAP8[i5 >> 0] | 0;
 L7 : do switch (HEAP8[i5 + 1 >> 0] | 0) {
 case 0:
  {
   i2 = i4 + 76 | 0;
   switch (HEAP8[i2 + (i1 & 255) >> 0] | 0) {
   case 7:
    {
     i7 = 22;
     break L7;
    }
   case 8:
   case 1:
   case 0:
    {
     i7 = 24;
     break L7;
    }
   case 4:
    {
     i1 = i5 + 2 | 0;
     if ((i1 | 0) == (i6 | 0)) {
      i9 = -1;
      return i9 | 0;
     }
     if (HEAP8[i5 + 3 >> 0] | 0) break L7;
     if ((HEAP8[i1 >> 0] | 0) != 93) break L7;
     i2 = i5 + 4 | 0;
     if ((i2 | 0) == (i6 | 0)) {
      i9 = -1;
      return i9 | 0;
     }
     if (HEAP8[i5 + 5 >> 0] | 0) break L7;
     if ((HEAP8[i2 >> 0] | 0) != 62) break L7;
     HEAP32[i8 >> 2] = i5 + 6;
     i9 = 40;
     return i9 | 0;
    }
   case 9:
    {
     i1 = i5 + 2 | 0;
     if ((i1 | 0) == (i6 | 0)) {
      i9 = -1;
      return i9 | 0;
     }
     if (!(HEAP8[i5 + 3 >> 0] | 0)) i1 = (HEAP8[i2 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) == 10 ? i5 + 4 | 0 : i1;
     HEAP32[i8 >> 2] = i1;
     i9 = 7;
     return i9 | 0;
    }
   case 10:
    {
     HEAP32[i8 >> 2] = i5 + 2;
     i9 = 7;
     return i9 | 0;
    }
   case 5:
    if ((i6 - i3 | 0) < 2) {
     i9 = -2;
     return i9 | 0;
    } else {
     i1 = i5 + 2 | 0;
     break L7;
    }
   case 6:
    if ((i6 - i3 | 0) < 3) {
     i9 = -2;
     return i9 | 0;
    } else {
     i1 = i5 + 3 | 0;
     break L7;
    }
   default:
    {
     i7 = 25;
     break L7;
    }
   }
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i7 = 22;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i7 = 24;
   break;
  }
 case -1:
  {
   if ((i1 & 255) > 253) i7 = 24; else i7 = 25;
   break;
  }
 default:
  i7 = 25;
 } while (0);
 do if ((i7 | 0) == 22) if ((i6 - i3 | 0) < 4) {
  i9 = -2;
  return i9 | 0;
 } else {
  i1 = i5 + 4 | 0;
  break;
 } else if ((i7 | 0) == 24) {
  HEAP32[i8 >> 2] = i5;
  i9 = 0;
  return i9 | 0;
 } else if ((i7 | 0) == 25) i1 = i5 + 2 | 0; while (0);
 L50 : do if ((i1 | 0) != (i6 | 0)) {
  i3 = i4 + 76 | 0;
  i4 = i6;
  L52 : while (1) {
   i2 = HEAP8[i1 >> 0] | 0;
   L54 : do switch (HEAP8[i1 + 1 >> 0] | 0) {
   case -33:
   case -34:
   case -35:
   case -36:
    {
     i7 = 37;
     break L52;
    }
   case 0:
    switch (HEAP8[i3 + (i2 & 255) >> 0] | 0) {
    case 4:
    case 10:
    case 9:
    case 8:
    case 1:
    case 0:
     {
      i7 = 37;
      break L52;
     }
    case 7:
     {
      i7 = 35;
      break L54;
     }
    case 5:
     if ((i4 - i1 | 0) < 2) {
      i7 = 32;
      break L52;
     } else {
      i2 = 2;
      break L54;
     }
    case 6:
     if ((i4 - i1 | 0) < 3) {
      i7 = 34;
      break L52;
     } else {
      i2 = 3;
      break L54;
     }
    default:
     {
      i2 = 2;
      break L54;
     }
    }
   case -37:
   case -38:
   case -39:
   case -40:
    {
     i7 = 35;
     break;
    }
   case -1:
    {
     if ((i2 & 255) > 253) {
      i7 = 37;
      break L52;
     } else i2 = 2;
     break;
    }
   default:
    i2 = 2;
   } while (0);
   if ((i7 | 0) == 35) {
    i7 = 0;
    if ((i4 - i1 | 0) < 4) {
     i7 = 36;
     break;
    } else i2 = 4;
   }
   i1 = i1 + i2 | 0;
   if ((i1 | 0) == (i6 | 0)) break L50;
  }
  if ((i7 | 0) == 32) {
   HEAP32[i8 >> 2] = i1;
   i9 = 6;
   return i9 | 0;
  } else if ((i7 | 0) == 34) {
   HEAP32[i8 >> 2] = i1;
   i9 = 6;
   return i9 | 0;
  } else if ((i7 | 0) == 36) {
   HEAP32[i8 >> 2] = i1;
   i9 = 6;
   return i9 | 0;
  } else if ((i7 | 0) == 37) {
   HEAP32[i8 >> 2] = i1;
   i9 = 6;
   return i9 | 0;
  }
 } while (0);
 HEAP32[i8 >> 2] = i6;
 i9 = 6;
 return i9 | 0;
}

function _big2_cdataSectionTok(i4, i5, i1, i8) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i9 = 0;
 if ((i5 | 0) == (i1 | 0)) {
  i8 = -4;
  return i8 | 0;
 }
 i3 = i5;
 i6 = i1 - i3 | 0;
 i9 = (i6 & 1 | 0) == 0;
 i6 = i6 & -2;
 i2 = (i6 | 0) == 0;
 i6 = i9 | i2 ? i1 : i5 + i6 | 0;
 if (!(i9 | i2 ^ 1)) {
  i9 = -1;
  return i9 | 0;
 }
 i1 = HEAP8[i5 + 1 >> 0] | 0;
 L7 : do switch (HEAP8[i5 >> 0] | 0) {
 case 0:
  {
   i2 = i4 + 76 | 0;
   switch (HEAP8[i2 + (i1 & 255) >> 0] | 0) {
   case 7:
    {
     i7 = 22;
     break L7;
    }
   case 8:
   case 1:
   case 0:
    {
     i7 = 24;
     break L7;
    }
   case 4:
    {
     i1 = i5 + 2 | 0;
     if ((i1 | 0) == (i6 | 0)) {
      i9 = -1;
      return i9 | 0;
     }
     if (HEAP8[i1 >> 0] | 0) break L7;
     if ((HEAP8[i5 + 3 >> 0] | 0) != 93) break L7;
     i2 = i5 + 4 | 0;
     if ((i2 | 0) == (i6 | 0)) {
      i9 = -1;
      return i9 | 0;
     }
     if (HEAP8[i2 >> 0] | 0) break L7;
     if ((HEAP8[i5 + 5 >> 0] | 0) != 62) break L7;
     HEAP32[i8 >> 2] = i5 + 6;
     i9 = 40;
     return i9 | 0;
    }
   case 9:
    {
     i1 = i5 + 2 | 0;
     if ((i1 | 0) == (i6 | 0)) {
      i9 = -1;
      return i9 | 0;
     }
     if (!(HEAP8[i1 >> 0] | 0)) i1 = (HEAP8[i2 + (HEAPU8[i5 + 3 >> 0] | 0) >> 0] | 0) == 10 ? i5 + 4 | 0 : i1;
     HEAP32[i8 >> 2] = i1;
     i9 = 7;
     return i9 | 0;
    }
   case 10:
    {
     HEAP32[i8 >> 2] = i5 + 2;
     i9 = 7;
     return i9 | 0;
    }
   case 5:
    if ((i6 - i3 | 0) < 2) {
     i9 = -2;
     return i9 | 0;
    } else {
     i1 = i5 + 2 | 0;
     break L7;
    }
   case 6:
    if ((i6 - i3 | 0) < 3) {
     i9 = -2;
     return i9 | 0;
    } else {
     i1 = i5 + 3 | 0;
     break L7;
    }
   default:
    {
     i7 = 25;
     break L7;
    }
   }
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i7 = 22;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i7 = 24;
   break;
  }
 case -1:
  {
   if ((i1 & 255) > 253) i7 = 24; else i7 = 25;
   break;
  }
 default:
  i7 = 25;
 } while (0);
 do if ((i7 | 0) == 22) if ((i6 - i3 | 0) < 4) {
  i9 = -2;
  return i9 | 0;
 } else {
  i1 = i5 + 4 | 0;
  break;
 } else if ((i7 | 0) == 24) {
  HEAP32[i8 >> 2] = i5;
  i9 = 0;
  return i9 | 0;
 } else if ((i7 | 0) == 25) i1 = i5 + 2 | 0; while (0);
 L50 : do if ((i1 | 0) != (i6 | 0)) {
  i3 = i4 + 76 | 0;
  i4 = i6;
  L52 : while (1) {
   i2 = HEAP8[i1 + 1 >> 0] | 0;
   L54 : do switch (HEAP8[i1 >> 0] | 0) {
   case -33:
   case -34:
   case -35:
   case -36:
    {
     i7 = 37;
     break L52;
    }
   case 0:
    switch (HEAP8[i3 + (i2 & 255) >> 0] | 0) {
    case 4:
    case 10:
    case 9:
    case 8:
    case 1:
    case 0:
     {
      i7 = 37;
      break L52;
     }
    case 7:
     {
      i7 = 35;
      break L54;
     }
    case 5:
     if ((i4 - i1 | 0) < 2) {
      i7 = 32;
      break L52;
     } else {
      i2 = 2;
      break L54;
     }
    case 6:
     if ((i4 - i1 | 0) < 3) {
      i7 = 34;
      break L52;
     } else {
      i2 = 3;
      break L54;
     }
    default:
     {
      i2 = 2;
      break L54;
     }
    }
   case -37:
   case -38:
   case -39:
   case -40:
    {
     i7 = 35;
     break;
    }
   case -1:
    {
     if ((i2 & 255) > 253) {
      i7 = 37;
      break L52;
     } else i2 = 2;
     break;
    }
   default:
    i2 = 2;
   } while (0);
   if ((i7 | 0) == 35) {
    i7 = 0;
    if ((i4 - i1 | 0) < 4) {
     i7 = 36;
     break;
    } else i2 = 4;
   }
   i1 = i1 + i2 | 0;
   if ((i1 | 0) == (i6 | 0)) break L50;
  }
  if ((i7 | 0) == 32) {
   HEAP32[i8 >> 2] = i1;
   i9 = 6;
   return i9 | 0;
  } else if ((i7 | 0) == 34) {
   HEAP32[i8 >> 2] = i1;
   i9 = 6;
   return i9 | 0;
  } else if ((i7 | 0) == 36) {
   HEAP32[i8 >> 2] = i1;
   i9 = 6;
   return i9 | 0;
  } else if ((i7 | 0) == 37) {
   HEAP32[i8 >> 2] = i1;
   i9 = 6;
   return i9 | 0;
  }
 } while (0);
 HEAP32[i8 >> 2] = i6;
 i9 = 6;
 return i9 | 0;
}

function _drawing_add_curve(i10, i1, i11, i17) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, d29 = 0.0, d30 = 0.0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i16 = i19 + 32 | 0;
 i18 = i19;
 i9 = i10 + 88 | 0;
 i28 = i10 + 96 | 0;
 i26 = i10 + 104 | 0;
 i24 = i10 + 108 | 0;
 i22 = i10 + 112 | 0;
 i20 = i10 + 116 | 0;
 i23 = i1 + 4 | 0;
 i21 = HEAP32[i23 + 4 >> 2] | 0;
 d30 = +HEAPF64[i9 >> 3];
 i23 = _lrint(d30 * +(HEAP32[i23 >> 2] | 0)) | 0;
 HEAP32[i18 >> 2] = i23;
 d29 = +HEAPF64[i28 >> 3];
 i12 = i18 + 4 | 0;
 i21 = _lrint(d29 * +(i21 | 0)) | 0;
 HEAP32[i12 >> 2] = i21;
 i27 = HEAP32[i26 >> 2] | 0;
 i27 = (i27 | 0) > (i23 | 0) ? i23 : i27;
 HEAP32[i26 >> 2] = i27;
 i25 = HEAP32[i24 >> 2] | 0;
 i25 = (i25 | 0) > (i21 | 0) ? i21 : i25;
 HEAP32[i24 >> 2] = i25;
 i8 = HEAP32[i22 >> 2] | 0;
 i23 = (i8 | 0) > (i23 | 0) ? i8 : i23;
 HEAP32[i22 >> 2] = i23;
 i8 = HEAP32[i20 >> 2] | 0;
 i21 = (i8 | 0) > (i21 | 0) ? i8 : i21;
 HEAP32[i20 >> 2] = i21;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i13 = i18 + 8 | 0;
 i2 = i8 + 4 | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i2 = _lrint(d30 * +(HEAP32[i2 >> 2] | 0)) | 0;
 HEAP32[i13 >> 2] = i2;
 i3 = i18 + 12 | 0;
 i4 = _lrint(d29 * +(i4 | 0)) | 0;
 HEAP32[i3 >> 2] = i4;
 i27 = (i27 | 0) > (i2 | 0) ? i2 : i27;
 HEAP32[i26 >> 2] = i27;
 i25 = (i25 | 0) > (i4 | 0) ? i4 : i25;
 HEAP32[i24 >> 2] = i25;
 i23 = (i23 | 0) > (i2 | 0) ? i23 : i2;
 HEAP32[i22 >> 2] = i23;
 i21 = (i21 | 0) > (i4 | 0) ? i21 : i4;
 HEAP32[i20 >> 2] = i21;
 i8 = HEAP32[i8 + 12 >> 2] | 0;
 i14 = i18 + 16 | 0;
 i5 = i8 + 4 | 0;
 i7 = HEAP32[i5 + 4 >> 2] | 0;
 i5 = _lrint(d30 * +(HEAP32[i5 >> 2] | 0)) | 0;
 HEAP32[i14 >> 2] = i5;
 i6 = i18 + 20 | 0;
 i7 = _lrint(d29 * +(i7 | 0)) | 0;
 HEAP32[i6 >> 2] = i7;
 i27 = (i27 | 0) > (i5 | 0) ? i5 : i27;
 HEAP32[i26 >> 2] = i27;
 i25 = (i25 | 0) > (i7 | 0) ? i7 : i25;
 HEAP32[i24 >> 2] = i25;
 i23 = (i23 | 0) > (i5 | 0) ? i23 : i5;
 HEAP32[i22 >> 2] = i23;
 i21 = (i21 | 0) > (i7 | 0) ? i21 : i7;
 HEAP32[i20 >> 2] = i21;
 i15 = i18 + 24 | 0;
 i8 = (HEAP32[i8 + 12 >> 2] | 0) + 4 | 0;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 i8 = _lrint(+HEAPF64[i9 >> 3] * +(HEAP32[i8 >> 2] | 0)) | 0;
 HEAP32[i15 >> 2] = i8;
 i9 = i18 + 28 | 0;
 i1 = _lrint(+HEAPF64[i28 >> 3] * +(i1 | 0)) | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i26 >> 2] = (i27 | 0) > (i8 | 0) ? i8 : i27;
 HEAP32[i24 >> 2] = (i25 | 0) > (i1 | 0) ? i1 : i25;
 HEAP32[i22 >> 2] = (i23 | 0) > (i8 | 0) ? i23 : i8;
 HEAP32[i20 >> 2] = (i21 | 0) > (i1 | 0) ? i21 : i1;
 if (i11) {
  i26 = (i4 - (HEAP32[i12 >> 2] | 0) | 0) / 3 | 0;
  i27 = (i5 - i2 | 0) / 3 | 0;
  i28 = (i7 - i4 | 0) / 3 | 0;
  HEAP32[i18 >> 2] = (i27 - ((i2 - (HEAP32[i18 >> 2] | 0) | 0) / 3 | 0) >> 1) + i2;
  HEAP32[i12 >> 2] = (i28 - i26 >> 1) + i4;
  HEAP32[i18 + 24 >> 2] = (((i8 - i5 | 0) / 3 | 0) - i27 >> 1) + i5;
  HEAP32[i9 >> 2] = (((i1 - i7 | 0) / 3 | 0) - i28 >> 1) + i7;
  HEAP32[i18 + 8 >> 2] = i27 + i2;
  HEAP32[i3 >> 2] = i28 + i4;
  HEAP32[i18 + 16 >> 2] = i5 - i27;
  HEAP32[i6 >> 2] = i7 - i28;
 }
 i1 = i10 + 40 | 0;
 if (!i17) {
  HEAP32[i16 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  if (!(_outline_add_point(i1, i16, 0) | 0)) {
   i28 = 0;
   STACKTOP = i19;
   return i28 | 0;
  }
 };
 HEAP32[i16 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 if (!(_outline_add_point(i1, i16, 0) | 0)) {
  i28 = 0;
  STACKTOP = i19;
  return i28 | 0;
 };
 HEAP32[i16 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 if (!(_outline_add_point(i1, i16, 0) | 0)) {
  i28 = 0;
  STACKTOP = i19;
  return i28 | 0;
 };
 HEAP32[i16 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 i28 = _outline_add_point(i1, i16, 3) | 0;
 STACKTOP = i19;
 return i28 | 0;
}

function _FcConfigAddCache(i19, i18, i1, i21) {
 i19 = i19 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 i21 = i21 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i14 = i22;
 i17 = i18;
 i15 = (HEAP32[i18 + 24 >> 2] | 0) + i17 | 0;
 i16 = i15;
 if (i15 | 0) {
  if ((HEAP32[i16 >> 2] | 0) > 0) {
   i9 = i16 + 8 | 0;
   i10 = i19 + 36 | 0;
   i11 = i19 + 40 | 0;
   i12 = i19 + 44 | 0;
   i13 = i19 + 48 | 0;
   i8 = i19 + 52 + (i1 << 2) | 0;
   i1 = 0;
   i7 = 0;
   do {
    i2 = HEAP32[i9 >> 2] | 0;
    i3 = i2;
    if (!(i3 & 1)) i6 = HEAP32[i2 + (i7 << 2) >> 2] | 0; else i6 = (HEAP32[(i3 & -2) + i15 + (i7 << 2) >> 2] & -2) + i15 | 0;
    L11 : do if (!(_FcPatternObjectGetString(i6, 21, 0, i14) | 0)) {
     i5 = HEAP32[i14 >> 2] | 0;
     i4 = HEAP32[i10 >> 2] | 0;
     i3 = i4 + 12 | 0;
     i4 = i4 + 4 | 0;
     if ((HEAP32[i4 >> 2] | 0) > 0) {
      i2 = 0;
      do {
       if (_FcStrGlobMatch(HEAP32[(HEAP32[i3 >> 2] | 0) + (i2 << 2) >> 2] | 0, i5) | 0) {
        i20 = 14;
        break L11;
       }
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) < (HEAP32[i4 >> 2] | 0));
     }
     i4 = HEAP32[i11 >> 2] | 0;
     i3 = i4 + 12 | 0;
     i4 = i4 + 4 | 0;
     if ((HEAP32[i4 >> 2] | 0) > 0) {
      i2 = 0;
      while (1) {
       if (_FcStrGlobMatch(HEAP32[(HEAP32[i3 >> 2] | 0) + (i2 << 2) >> 2] | 0, i5) | 0) break L11;
       i2 = i2 + 1 | 0;
       if ((i2 | 0) >= (HEAP32[i4 >> 2] | 0)) {
        i20 = 14;
        break;
       }
      }
     } else i20 = 14;
    } else i20 = 14; while (0);
    L21 : do if ((i20 | 0) == 14) {
     i20 = 0;
     i3 = HEAP32[i12 >> 2] | 0;
     i4 = i3 + 8 | 0;
     L23 : do if ((HEAP32[i3 >> 2] | 0) > 0) {
      i2 = 0;
      while (1) {
       if (_FcListPatternMatchAny(HEAP32[(HEAP32[i4 >> 2] | 0) + (i2 << 2) >> 2] | 0, i6) | 0) break L23;
       i2 = i2 + 1 | 0;
       if ((i2 | 0) >= (HEAP32[i3 >> 2] | 0)) {
        i20 = 17;
        break;
       }
      }
     } else i20 = 17; while (0);
     if ((i20 | 0) == 17) {
      i20 = 0;
      i3 = HEAP32[i13 >> 2] | 0;
      i4 = i3 + 8 | 0;
      if ((HEAP32[i3 >> 2] | 0) > 0) {
       i2 = 0;
       do {
        if (_FcListPatternMatchAny(HEAP32[(HEAP32[i4 >> 2] | 0) + (i2 << 2) >> 2] | 0, i6) | 0) break L21;
        i2 = i2 + 1 | 0;
       } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
      }
     }
     i1 = ((_FcFontSetAdd(HEAP32[i8 >> 2] | 0, i6) | 0) != 0 & 1) + i1 | 0;
    } while (0);
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) < (HEAP32[i16 >> 2] | 0));
  } else i1 = 0;
  _FcDirCacheReference(i18, i1);
 }
 i9 = (HEAP32[i18 + 16 >> 2] | 0) + i17 | 0;
 i10 = i9;
 if (!i9) {
  STACKTOP = i22;
  return 1;
 }
 i8 = i18 + 20 | 0;
 if ((HEAP32[i8 >> 2] | 0) <= 0) {
  STACKTOP = i22;
  return 1;
 }
 i7 = i19 + 36 | 0;
 i5 = i19 + 40 | 0;
 i4 = 0;
 do {
  i6 = (HEAP32[i10 + (i4 << 2) >> 2] | 0) + i9 | 0;
  i3 = HEAP32[i7 >> 2] | 0;
  i2 = i3 + 12 | 0;
  i3 = i3 + 4 | 0;
  L44 : do if ((HEAP32[i3 >> 2] | 0) > 0) {
   i1 = 0;
   while (1) {
    if (_FcStrGlobMatch(HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] | 0, i6) | 0) {
     i20 = 32;
     break L44;
    }
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (HEAP32[i3 >> 2] | 0)) {
     i20 = 29;
     break;
    }
   }
  } else i20 = 29; while (0);
  L48 : do if ((i20 | 0) == 29) {
   i20 = 0;
   i3 = HEAP32[i5 >> 2] | 0;
   i2 = i3 + 12 | 0;
   i3 = i3 + 4 | 0;
   if ((HEAP32[i3 >> 2] | 0) > 0) {
    i1 = 0;
    while (1) {
     if (_FcStrGlobMatch(HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] | 0, i6) | 0) break L48;
     i1 = i1 + 1 | 0;
     if ((i1 | 0) >= (HEAP32[i3 >> 2] | 0)) {
      i20 = 32;
      break;
     }
    }
   } else i20 = 32;
  } while (0);
  if ((i20 | 0) == 32) _FcStrSetAddFilename(i21, i6) | 0;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < (HEAP32[i8 >> 2] | 0));
 STACKTOP = i22;
 return 1;
}

function _start_segment(i22, i18, i20, d19, d21, i13) {
 i22 = i22 | 0;
 i18 = i18 | 0;
 i20 = i20 | 0;
 d19 = +d19;
 d21 = +d21;
 i13 = i13 | 0;
 var i1 = 0, d2 = 0.0, d3 = 0.0, i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, d16 = 0.0, d17 = 0.0, i23 = 0, i24 = 0, i25 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i15 = i24;
 i14 = i24 + 128 | 0;
 i1 = i22 + 52 | 0;
 if (HEAP8[i1 >> 0] | 0) {
  HEAP8[i1 >> 0] = 0;
  HEAP32[i22 + 60 >> 2] = 0;
  HEAP32[i22 + 56 >> 2] = 0;
  i23 = i22 + 64 | 0;
  i15 = i22 + 80 | 0;
  HEAPF64[i22 + 80 >> 3] = d19;
  HEAPF64[i22 + 88 >> 3] = d21;
  HEAP32[i23 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i23 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  HEAP32[i23 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
  HEAP32[i23 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
  i23 = i22 + 96 | 0;
  HEAP32[i23 >> 2] = i18;
  HEAP32[i23 + 4 >> 2] = i20;
  i23 = 1;
  STACKTOP = i24;
  return i23 | 0;
 }
 i1 = i22 + 80 | 0;
 d16 = +HEAPF64[i1 >> 3];
 i4 = i22 + 88 | 0;
 d17 = +HEAPF64[i4 >> 3];
 d5 = d16 * d19 + d17 * d21;
 if (d5 > +HEAPF64[i22 + 104 >> 3]) {
  d9 = 1.0 / (d5 + 1.0);
  HEAPF64[i1 >> 3] = d9 * (d16 + d19);
  HEAPF64[i4 >> 3] = d9 * (d17 + d21);
  i23 = 1;
  STACKTOP = i24;
  return i23 | 0;
 }
 HEAPF64[i1 >> 3] = d19;
 HEAPF64[i4 >> 3] = d21;
 i12 = d16 * d21 - d17 * d19 < 0.0 ? 1 : 2;
 i11 = i22 + 60 | 0;
 if (i12 & i13 | 0) {
  i1 = i12 & ~HEAP32[i11 >> 2];
  i4 = i22 + 16 | 0;
  i7 = ~~(d16 * +HEAPF64[i4 >> 3]);
  i10 = i22 + 24 | 0;
  i8 = ~~(d17 * +HEAPF64[i10 >> 3]);
  if (i1 & 1 | 0) {
   HEAP32[i14 >> 2] = i7 + i18;
   HEAP32[i14 + 4 >> 2] = i8 + i20;
   i25 = HEAP32[i22 >> 2] | 0;
   HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   if (!(_outline_add_point(i25, i15, 1) | 0)) {
    i25 = 0;
    STACKTOP = i24;
    return i25 | 0;
   }
  }
  if (i1 & 2 | 0) {
   HEAP32[i14 >> 2] = i18 - i7;
   HEAP32[i14 + 4 >> 2] = i20 - i8;
   i25 = HEAP32[i22 + 4 >> 2] | 0;
   HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   if (!(_outline_add_point(i25, i15, 1) | 0)) {
    i25 = 0;
    STACKTOP = i24;
    return i25 | 0;
   }
  }
  i4 = ~~(+HEAPF64[i4 >> 3] * 0.0);
  i1 = ~~(+HEAPF64[i10 >> 3] * 0.0);
  if (i12 & 1 | 0) {
   HEAP32[i14 >> 2] = i4 + i18;
   HEAP32[i14 + 4 >> 2] = i1 + i20;
   i25 = HEAP32[i22 >> 2] | 0;
   HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   if (!(_outline_add_point(i25, i15, 1) | 0)) {
    i25 = 0;
    STACKTOP = i24;
    return i25 | 0;
   }
  }
  if (i12 & 2 | 0) {
   HEAP32[i14 >> 2] = i18 - i4;
   HEAP32[i14 + 4 >> 2] = i20 - i1;
   i25 = HEAP32[i22 + 4 >> 2] | 0;
   HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   if (!(_outline_add_point(i25, i15, 1) | 0)) {
    i25 = 0;
    STACKTOP = i24;
    return i25 | 0;
   }
  }
 }
 HEAP32[i11 >> 2] = i12;
 i8 = ~i12 & i13;
 if (!i8) {
  i25 = 1;
  STACKTOP = i24;
  return i25 | 0;
 }
 if (d5 < 0.0) {
  d2 = (i8 & 2 | 0 ? -.7071067811865476 : .7071067811865476) / +Math_sqrt(+(1.0 - d5));
  d5 = d5 * .5 + .5;
  d5 = +Math_sqrt(+(d5 < 0.0 ? 0.0 : d5));
  i7 = 0;
  d3 = (d21 - d17) * d2;
  d2 = (d16 - d19) * d2;
 } else {
  i7 = 1;
  d3 = 0.0;
  d2 = 0.0;
 }
 d9 = +HEAPF64[i22 + 112 >> 3];
 d6 = d5 + 1.0;
 if (d5 < d9) {
  i1 = 15;
  d5 = d6;
  do {
   d6 = .7071067811865476 / +Math_sqrt(+d5);
   HEAPF64[i15 + (i1 << 3) >> 3] = d6;
   d6 = d5 * d6;
   i1 = i1 + -1 | 0;
   d5 = d6 + 1.0;
  } while ((i1 | 0) != 0 & d6 < d9);
 } else {
  i1 = 15;
  d5 = d6;
 }
 i4 = i15 + (i1 << 3) | 0;
 HEAPF64[i4 >> 3] = 1.0 / d5;
 i1 = 15 - i1 | 0;
 if (i7) {
  d3 = d16;
  d2 = d17;
  i23 = 21;
 } else if (_process_arc(i22, i18, i20, d16, d17, d3, d2, i4, i1, i8) | 0) i23 = 21; else i1 = 0;
 if ((i23 | 0) == 21) i1 = _process_arc(i22, i18, i20, d3, d2, d19, d21, i4, i1, i8) | 0;
 i25 = i1;
 STACKTOP = i24;
 return i25 | 0;
}

function _FcStrCaseWalkerNext(i12, i4) {
 i12 = i12 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[i12 >> 2] | 0;
 do if (i1 | 0) {
  HEAP32[i12 >> 2] = i1 + 1;
  i1 = HEAP8[i1 >> 0] | 0;
  if (!(i1 << 24 >> 24)) {
   HEAP32[i12 >> 2] = 0;
   break;
  } else {
   i12 = i1;
   return i12 | 0;
  }
 } while (0);
 i11 = i12 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 L7 : do if (!i4) {
  i10 = i1 + 1 | 0;
  HEAP32[i11 >> 2] = i10;
  i1 = HEAP8[i1 >> 0] | 0;
  i2 = i1 & 255;
 } else while (1) {
  i3 = i1 + 1 | 0;
  HEAP32[i11 >> 2] = i3;
  i1 = HEAP8[i1 >> 0] | 0;
  i2 = i1 & 255;
  if (!(i1 << 24 >> 24)) {
   i1 = 0;
   i10 = i3;
   break L7;
  }
  if (!(_strchr(i4, i2) | 0)) {
   i10 = i3;
   break;
  } else i1 = i3;
 } while (0);
 if ((i2 & 192 | 0) != 192) {
  i12 = (i1 + -65 & 255) < 26 ? i2 + 32 & 255 : i1;
  return i12 | 0;
 }
 i3 = _strlen(i10) | 0;
 i6 = i10 + -1 | 0;
 if ((i3 | 0) == -1) {
  i12 = i1;
  return i12 | 0;
 }
 i2 = HEAPU8[i6 >> 0] | 0;
 do if (!(i2 & 128)) i4 = 0; else {
  if (!(i2 & 64)) {
   i12 = i1;
   return i12 | 0;
  }
  if (!(i2 & 32)) {
   i2 = i2 & 31;
   i4 = 1;
   break;
  }
  if (!(i2 & 16)) {
   i2 = i2 & 15;
   i4 = 2;
   break;
  }
  if (!(i2 & 8)) {
   i2 = i2 & 7;
   i4 = 3;
   break;
  }
  if (!(i2 & 4)) {
   i2 = i2 & 3;
   i4 = 4;
   break;
  }
  if (!(i2 & 2)) {
   i2 = i2 & 1;
   i4 = 5;
   break;
  } else {
   i12 = i1;
   return i12 | 0;
  }
 } while (0);
 if ((i4 | 0) > (i3 | 0)) {
  i12 = i1;
  return i12 | 0;
 }
 L44 : do if (!i4) i3 = i10; else {
  i3 = i10;
  i5 = i4;
  while (1) {
   i5 = i5 + -1 | 0;
   i4 = HEAPU8[i3 >> 0] | 0;
   if ((i4 & 192 | 0) != 128) break;
   i2 = i4 & 63 | i2 << 6;
   i3 = i3 + 1 | 0;
   if (!i5) break L44;
  }
  return i1 | 0;
 } while (0);
 i9 = i3 - i6 | 0;
 if ((i2 + -65 | 0) >>> 0 < 71807 & (i9 | 0) > 0) {
  i3 = 0;
  i5 = 271;
 } else {
  i12 = i1;
  return i12 | 0;
 }
 L52 : while (1) {
  while (1) {
   i8 = i3 + i5 >> 1;
   i6 = HEAP32[64836 + (i8 << 3) >> 2] | 0;
   i7 = HEAP16[64836 + (i8 << 3) + 4 >> 1] | 0;
   i4 = (i7 & 65535) >>> 2 & 65535;
   if ((((i7 & 3) == 2 ? 1 : i4) + i6 | 0) >>> 0 > i2 >>> 0) break;
   if ((i8 | 0) < (i5 | 0)) i3 = i8 + 1 | 0; else {
    i5 = 48;
    break L52;
   }
  }
  if (i2 >>> 0 >= i6 >>> 0) {
   i5 = 32;
   break;
  }
  if ((i3 | 0) < (i8 | 0)) i5 = i8 + -1 | 0; else {
   i5 = 48;
   break;
  }
 }
 if ((i5 | 0) == 32) {
  switch (i7 & 3) {
  case 1:
   {
    if (!((i6 ^ i2) & 1)) i5 = 34; else {
     i12 = i1;
     return i12 | 0;
    }
    break;
   }
  case 2:
   {
    i3 = i12 + 8 | 0;
    _memcpy(i3 | 0, 347475 + (HEAP16[64836 + (i8 << 3) + 6 >> 1] | 0) | 0, i4 | 0) | 0;
    i1 = i10;
    break;
   }
  default:
   i5 = 34;
  }
  do if ((i5 | 0) == 34) {
   i6 = (HEAP16[64836 + (i8 << 3) + 6 >> 1] | 0) + i2 | 0;
   i3 = i12 + 8 | 0;
   if (i6 >>> 0 < 128) {
    HEAP8[i3 >> 0] = i6;
    i1 = i12 + 9 | 0;
    i2 = i10;
   } else {
    if (i6 >>> 0 < 2048) {
     i2 = 0;
     i1 = 6;
     i4 = 192;
     i5 = 31;
    } else if (i6 >>> 0 < 65536) {
     i2 = 6;
     i1 = 12;
     i4 = 224;
     i5 = 15;
    } else if (i6 >>> 0 < 2097152) {
     i2 = 12;
     i1 = 18;
     i4 = 240;
     i5 = 7;
    } else if (i6 >>> 0 < 67108864) {
     i2 = 18;
     i1 = 24;
     i4 = 248;
     i5 = 3;
    } else if ((i6 | 0) > -1) {
     i2 = 24;
     i1 = 30;
     i4 = 252;
     i5 = 1;
    } else {
     i4 = 0;
     i1 = i10;
     break;
    }
    HEAP8[i3 >> 0] = i6 >>> i1 & i5 | i4;
    i1 = i12 + 9 | 0;
    do {
     HEAP8[i1 >> 0] = i6 >>> i2 & 63 | 128;
     i2 = i2 + -6 | 0;
     i1 = i1 + 1 | 0;
    } while ((i2 | 0) > -1);
    i2 = HEAP32[i11 >> 2] | 0;
   }
   i4 = i1 - i3 | 0;
   i1 = i2;
  } while (0);
  HEAP32[i11 >> 2] = i1 + (i9 + -1);
  HEAP8[i12 + 8 + i4 >> 0] = 0;
  HEAP32[i12 >> 2] = i12 + 9;
  i12 = HEAP8[i3 >> 0] | 0;
  return i12 | 0;
 } else if ((i5 | 0) == 48) return i1 | 0;
 return 0;
}

function _open_face(i3, i9, i4, i6, i7, i8, i14) {
 i3 = i3 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i11 = HEAP32[i3 + 12 >> 2] | 0;
 i12 = HEAP32[i3 + 8 >> 2] | 0;
 i1 = HEAP32[i11 + 36 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i2 = FUNCTION_TABLE_iii[HEAP32[i12 + 4 >> 2] & 255](i12, i1) | 0;
  if (!i2) {
   i5 = 0;
   i4 = 64;
   i3 = 0;
   i2 = 0;
  } else {
   _memset(i2 | 0, 0, i1 | 0) | 0;
   i13 = i2;
   i10 = 5;
  }
 } else if (!i1) {
  i13 = 0;
  i10 = 5;
 } else {
  i5 = 0;
  i4 = 6;
  i3 = 0;
  i2 = 0;
 }
 L5 : do if ((i10 | 0) == 5) {
  HEAP32[i13 + 96 >> 2] = i3;
  HEAP32[i13 + 100 >> 2] = i12;
  i5 = i13 + 104 | 0;
  HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
  if (i4 << 24 >> 24) {
   i4 = i13 + 8 | 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1024;
  }
  i2 = FUNCTION_TABLE_iii[HEAP32[i12 + 4 >> 2] & 255](i12, 60) | 0;
  do if (!i2) if (!i13) {
   i5 = i13;
   i4 = 64;
   i3 = 0;
   i2 = 0;
   break L5;
  } else {
   i4 = 64;
   i2 = 0;
  } else {
   i1 = i2;
   i3 = i1 + 60 | 0;
   do {
    HEAP8[i1 >> 0] = 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i3 | 0));
   HEAP32[i13 + 128 >> 2] = i2;
   HEAP32[i2 + 48 >> 2] = 0;
   L13 : do if ((i7 | 0) > 0) {
    i4 = i2 + 48 | 0;
    i3 = 0;
    i1 = HEAP32[i4 >> 2] | 0;
    do {
     if (i1 | 0) break L13;
     if ((HEAP32[i8 + (i3 << 3) >> 2] | 0) == 1768842098) {
      i1 = HEAP32[i8 + (i3 << 3) + 4 >> 2] | 0;
      HEAP32[i4 >> 2] = i1;
     } else i1 = 0;
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) < (i7 | 0));
   } while (0);
   i1 = HEAP32[i11 + 48 >> 2] | 0;
   if (!i1) HEAP32[i9 >> 2] = HEAP32[i5 >> 2]; else {
    i1 = FUNCTION_TABLE_iiiiii[i1 & 127](HEAP32[i9 >> 2] | 0, i13, i6, i7, i8) | 0;
    HEAP32[i9 >> 2] = HEAP32[i5 >> 2];
    if (i1 | 0) {
     i4 = i1;
     break;
    }
   }
   i4 = HEAP32[i13 + 40 >> 2] | 0;
   if (!i4) {
    HEAP32[i14 >> 2] = i13;
    i14 = 0;
    return i14 | 0;
   }
   i2 = i4 + (HEAP32[i13 + 36 >> 2] << 2) | 0;
   i1 = i2 + -4 | 0;
   L30 : do if (i1 >>> 0 < i4 >>> 0) i10 = 26; else {
    L31 : while (1) {
     i3 = HEAP32[i1 >> 2] | 0;
     L33 : do if ((HEAP32[i3 + 4 >> 2] | 0) == 1970170211) switch (HEAP16[i3 + 8 >> 1] | 0) {
     case 3:
      if ((HEAP16[i3 + 10 >> 1] | 0) == 10) break L31; else break L33;
     case 0:
      if ((HEAP16[i3 + 10 >> 1] | 0) == 4) break L31; else break L33;
     default:
      break L33;
     } while (0);
     i1 = i1 + -4 | 0;
     if (i1 >>> 0 < i4 >>> 0) {
      i10 = 26;
      break L30;
     }
    }
    HEAP32[i13 + 92 >> 2] = i3;
   } while (0);
   L40 : do if ((i10 | 0) == 26) {
    while (1) {
     i2 = i2 + -4 | 0;
     if (i2 >>> 0 < i4 >>> 0) break L40;
     i1 = HEAP32[i2 >> 2] | 0;
     if ((HEAP32[i1 + 4 >> 2] | 0) == 1970170211) break; else i10 = 26;
    }
    HEAP32[i13 + 92 >> 2] = i1;
   } while (0);
   HEAP32[i14 >> 2] = i13;
   i14 = 0;
   return i14 | 0;
  } while (0);
  i7 = i13 + 36 | 0;
  i8 = i13 + 40 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if ((HEAP32[i7 >> 2] | 0) > 0) {
   i6 = 0;
   do {
    i3 = HEAP32[i1 + (i6 << 2) >> 2] | 0;
    i5 = HEAP32[(HEAP32[i3 >> 2] | 0) + 100 >> 2] | 0;
    i1 = HEAP32[(HEAP32[i3 + 12 >> 2] | 0) + 8 >> 2] | 0;
    if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i3);
    FUNCTION_TABLE_vii[HEAP32[i5 + 8 >> 2] & 63](i5, i3);
    HEAP32[(HEAP32[i8 >> 2] | 0) + (i6 << 2) >> 2] = 0;
    i6 = i6 + 1 | 0;
    i1 = HEAP32[i8 >> 2] | 0;
   } while ((i6 | 0) < (HEAP32[i7 >> 2] | 0));
  }
  if (i1 | 0) FUNCTION_TABLE_vii[HEAP32[i12 + 8 >> 2] & 63](i12, i1);
  HEAP32[i8 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  i5 = i13;
  i3 = i13;
 } while (0);
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i3);
 if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i12 + 8 >> 2] & 63](i12, i2);
 if (i5 | 0) FUNCTION_TABLE_vii[HEAP32[i12 + 8 >> 2] & 63](i12, i5);
 HEAP32[i14 >> 2] = 0;
 i14 = i4;
 return i14 | 0;
}
function _ass_pre_blur2_horz_c(i2, i43, i1, i44) {
 i2 = i2 | 0;
 i43 = i43 | 0;
 i1 = i1 | 0;
 i44 = i44 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0;
 i47 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i45 = i47;
 i46 = i1 + 4 | 0;
 i41 = Math_imul(i1 + 15 & -16, i44) | 0;
 i42 = i44 << 4;
 i9 = i45 + 32 | 0;
 if (!i46) {
  STACKTOP = i47;
  return;
 }
 i10 = (i44 | 0) == 0;
 i11 = i45 + 2 | 0;
 i12 = i45 + 4 | 0;
 i13 = i45 + 6 | 0;
 i14 = i45 + 8 | 0;
 i15 = i45 + 10 | 0;
 i16 = i45 + 12 | 0;
 i17 = i45 + 14 | 0;
 i18 = i45 + 16 | 0;
 i19 = i45 + 18 | 0;
 i20 = i45 + 20 | 0;
 i21 = i45 + 22 | 0;
 i22 = i45 + 24 | 0;
 i23 = i45 + 26 | 0;
 i24 = i45 + 28 | 0;
 i25 = i45 + 30 | 0;
 i26 = i45 + 34 | 0;
 i27 = i45 + 36 | 0;
 i28 = i45 + 38 | 0;
 i29 = i45 + 40 | 0;
 i30 = i45 + 42 | 0;
 i31 = i45 + 44 | 0;
 i32 = i45 + 46 | 0;
 i33 = i45 + 48 | 0;
 i34 = i45 + 50 | 0;
 i35 = i45 + 52 | 0;
 i36 = i45 + 54 | 0;
 i37 = i45 + 56 | 0;
 i38 = i45 + 58 | 0;
 i39 = i45 + 60 | 0;
 i40 = i45 + 62 | 0;
 i8 = 0;
 i1 = 0;
 do {
  if (!i10) {
   i7 = i2 + (i42 << 1) | 0;
   i5 = 0;
   i6 = i1;
   while (1) {
    i4 = i6 - i42 | 0;
    i4 = i4 >>> 0 < i41 >>> 0 ? i43 + (i4 << 1) | 0 : 368376;
    HEAP16[i45 >> 1] = HEAP16[i4 >> 1] | 0;
    HEAP16[i11 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i12 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i13 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i14 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i15 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i16 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i17 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i18 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i19 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i20 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i21 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i22 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i23 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i24 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i25 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = i6 >>> 0 < i41 >>> 0 ? i43 + (i6 << 1) | 0 : 368376;
    i3 = HEAP16[i4 >> 1] | 0;
    HEAP16[i9 >> 1] = i3;
    HEAP16[i26 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i27 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i28 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i29 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i30 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i31 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i32 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i33 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i34 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i35 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i36 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i37 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i38 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i39 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i40 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = 0;
    while (1) {
     i48 = HEAP16[i9 + (i4 + -2 << 1) >> 1] | 0;
     i3 = (((((i3 & 65535) + (HEAPU16[i9 + (i4 + -4 << 1) >> 1] | 0) | 0) >>> 1 & 32767) + i48 | 0) >>> 1 & 32767) + i48 | 0;
     i48 = (HEAPU16[i9 + (i4 + -1 << 1) >> 1] | 0) + (HEAPU16[i9 + (i4 + -3 << 1) >> 1] | 0) | 0;
     HEAP16[i2 + (i4 << 1) >> 1] = (((i3 + i48 | 0) >>> 1 & 32767 | i48 & 32768 & i3) + 1 | 0) >>> 1 & 32767;
     i3 = i4 + 1 | 0;
     if ((i3 | 0) == 16) break;
     i4 = i3;
     i3 = HEAP16[i9 + (i3 << 1) >> 1] | 0;
    }
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i44 | 0)) break; else {
     i6 = i6 + 16 | 0;
     i2 = i2 + 32 | 0;
    }
   }
   i2 = i7;
   i1 = i42 + i1 | 0;
  }
  i8 = i8 + 16 | 0;
 } while (i8 >>> 0 < i46 >>> 0);
 STACKTOP = i47;
 return;
}

function _ass_pre_blur3_horz_c(i2, i43, i1, i44) {
 i2 = i2 | 0;
 i43 = i43 | 0;
 i1 = i1 | 0;
 i44 = i44 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i45 = 0, i46 = 0, i47 = 0;
 i47 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i45 = i47;
 i46 = i1 + 6 | 0;
 i41 = Math_imul(i1 + 15 & -16, i44) | 0;
 i42 = i44 << 4;
 i9 = i45 + 32 | 0;
 if (!i46) {
  STACKTOP = i47;
  return;
 }
 i10 = (i44 | 0) == 0;
 i11 = i45 + 2 | 0;
 i12 = i45 + 4 | 0;
 i13 = i45 + 6 | 0;
 i14 = i45 + 8 | 0;
 i15 = i45 + 10 | 0;
 i16 = i45 + 12 | 0;
 i17 = i45 + 14 | 0;
 i18 = i45 + 16 | 0;
 i19 = i45 + 18 | 0;
 i20 = i45 + 20 | 0;
 i21 = i45 + 22 | 0;
 i22 = i45 + 24 | 0;
 i23 = i45 + 26 | 0;
 i24 = i45 + 28 | 0;
 i25 = i45 + 30 | 0;
 i26 = i45 + 34 | 0;
 i27 = i45 + 36 | 0;
 i28 = i45 + 38 | 0;
 i29 = i45 + 40 | 0;
 i30 = i45 + 42 | 0;
 i31 = i45 + 44 | 0;
 i32 = i45 + 46 | 0;
 i33 = i45 + 48 | 0;
 i34 = i45 + 50 | 0;
 i35 = i45 + 52 | 0;
 i36 = i45 + 54 | 0;
 i37 = i45 + 56 | 0;
 i38 = i45 + 58 | 0;
 i39 = i45 + 60 | 0;
 i40 = i45 + 62 | 0;
 i8 = 0;
 i1 = 0;
 do {
  if (!i10) {
   i7 = i2 + (i42 << 1) | 0;
   i5 = 0;
   i6 = i1;
   while (1) {
    i4 = i6 - i42 | 0;
    i4 = i4 >>> 0 < i41 >>> 0 ? i43 + (i4 << 1) | 0 : 368376;
    HEAP16[i45 >> 1] = HEAP16[i4 >> 1] | 0;
    HEAP16[i11 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i12 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i13 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i14 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i15 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i16 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i17 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i18 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i19 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i20 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i21 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i22 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i23 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i24 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i25 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = i6 >>> 0 < i41 >>> 0 ? i43 + (i6 << 1) | 0 : 368376;
    i3 = HEAP16[i4 >> 1] | 0;
    HEAP16[i9 >> 1] = i3;
    HEAP16[i26 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i27 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i28 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i29 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i30 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i31 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i32 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i33 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i34 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i35 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i36 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i37 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i38 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i39 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i40 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = 0;
    while (1) {
     HEAP16[i2 + (i4 << 1) >> 1] = (((HEAPU16[i9 + (i4 + -3 << 1) >> 1] | 0) * 20 | 0) + 32 + (((HEAPU16[i9 + (i4 + -2 << 1) >> 1] | 0) + (HEAPU16[i9 + (i4 + -4 << 1) >> 1] | 0) & 65535) * 15 | 0) + (((HEAPU16[i9 + (i4 + -1 << 1) >> 1] | 0) + (HEAPU16[i9 + (i4 + -5 << 1) >> 1] | 0) & 65535) * 6 | 0) + ((i3 & 65535) + (HEAPU16[i9 + (i4 + -6 << 1) >> 1] | 0) & 65535) | 0) >>> 6;
     i3 = i4 + 1 | 0;
     if ((i3 | 0) == 16) break;
     i4 = i3;
     i3 = HEAP16[i9 + (i3 << 1) >> 1] | 0;
    }
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i44 | 0)) break; else {
     i6 = i6 + 16 | 0;
     i2 = i2 + 32 | 0;
    }
   }
   i2 = i7;
   i1 = i42 + i1 | 0;
  }
  i8 = i8 + 16 | 0;
 } while (i8 >>> 0 < i46 >>> 0);
 STACKTOP = i47;
 return;
}

function _try_realloc_chunk(i12, i10) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = i12 + 4 | 0;
 i9 = HEAP32[i11 >> 2] | 0;
 i1 = i9 & -8;
 i6 = i12 + i1 | 0;
 if (!(i9 & 3)) {
  if (i10 >>> 0 < 256) {
   i12 = 0;
   return i12 | 0;
  }
  if (i1 >>> 0 >= (i10 + 4 | 0) >>> 0) if ((i1 - i10 | 0) >>> 0 <= HEAP32[92067] << 1 >>> 0) return i12 | 0;
  i12 = 0;
  return i12 | 0;
 }
 if (i1 >>> 0 >= i10 >>> 0) {
  i1 = i1 - i10 | 0;
  if (i1 >>> 0 <= 15) return i12 | 0;
  i8 = i12 + i10 | 0;
  HEAP32[i11 >> 2] = i9 & 1 | i10 | 2;
  HEAP32[i8 + 4 >> 2] = i1 | 3;
  i11 = i8 + i1 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  _dispose_chunk(i8, i1);
  return i12 | 0;
 }
 if ((i6 | 0) == (HEAP32[91953] | 0)) {
  i8 = (HEAP32[91950] | 0) + i1 | 0;
  i1 = i8 - i10 | 0;
  i2 = i12 + i10 | 0;
  if (i8 >>> 0 <= i10 >>> 0) {
   i12 = 0;
   return i12 | 0;
  }
  HEAP32[i11 >> 2] = i9 & 1 | i10 | 2;
  HEAP32[i2 + 4 >> 2] = i1 | 1;
  HEAP32[91953] = i2;
  HEAP32[91950] = i1;
  return i12 | 0;
 }
 if ((i6 | 0) == (HEAP32[91952] | 0)) {
  i3 = (HEAP32[91949] | 0) + i1 | 0;
  if (i3 >>> 0 < i10 >>> 0) {
   i12 = 0;
   return i12 | 0;
  }
  i1 = i3 - i10 | 0;
  i2 = i9 & 1;
  if (i1 >>> 0 > 15) {
   i9 = i12 + i10 | 0;
   i8 = i9 + i1 | 0;
   HEAP32[i11 >> 2] = i2 | i10 | 2;
   HEAP32[i9 + 4 >> 2] = i1 | 1;
   HEAP32[i8 >> 2] = i1;
   i2 = i8 + 4 | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
   i2 = i9;
  } else {
   HEAP32[i11 >> 2] = i2 | i3 | 2;
   i2 = i12 + i3 + 4 | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
   i2 = 0;
   i1 = 0;
  }
  HEAP32[91949] = i1;
  HEAP32[91952] = i2;
  return i12 | 0;
 }
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 if (i2 & 2 | 0) {
  i12 = 0;
  return i12 | 0;
 }
 i7 = (i2 & -8) + i1 | 0;
 if (i7 >>> 0 < i10 >>> 0) {
  i12 = 0;
  return i12 | 0;
 }
 i8 = i7 - i10 | 0;
 i3 = i2 >>> 3;
 do if (i2 >>> 0 < 256) {
  i2 = HEAP32[i6 + 8 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) {
   HEAP32[91947] = HEAP32[91947] & ~(1 << i3);
   break;
  } else {
   HEAP32[i2 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i2;
   break;
  }
 } else {
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i6 | 0)) {
   i3 = i6 + 16 | 0;
   i2 = i3 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i3 = 0;
     break;
    } else i4 = i3;
   } else i4 = i2;
   while (1) {
    i3 = i1 + 20 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    if (i2 | 0) {
     i1 = i2;
     i4 = i3;
     continue;
    }
    i2 = i1 + 16 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) break; else {
     i1 = i3;
     i4 = i2;
    }
   }
   HEAP32[i4 >> 2] = 0;
   i3 = i1;
  } else {
   i3 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i3 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i3;
   i3 = i1;
  } while (0);
  if (i5 | 0) {
   i1 = HEAP32[i6 + 28 >> 2] | 0;
   i2 = 368092 + (i1 << 2) | 0;
   if ((i6 | 0) == (HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = i3;
    if (!i3) {
     HEAP32[91948] = HEAP32[91948] & ~(1 << i1);
     break;
    }
   } else {
    HEAP32[i5 + 16 + (((HEAP32[i5 + 16 >> 2] | 0) != (i6 | 0) & 1) << 2) >> 2] = i3;
    if (!i3) break;
   }
   HEAP32[i3 + 24 >> 2] = i5;
   i1 = i6 + 16 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 | 0) {
    HEAP32[i3 + 16 >> 2] = i2;
    HEAP32[i2 + 24 >> 2] = i3;
   }
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (i1 | 0) {
    HEAP32[i3 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
   }
  }
 } while (0);
 i1 = i9 & 1;
 if (i8 >>> 0 < 16) {
  HEAP32[i11 >> 2] = i7 | i1 | 2;
  i11 = i12 + i7 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  return i12 | 0;
 } else {
  i9 = i12 + i10 | 0;
  HEAP32[i11 >> 2] = i1 | i10 | 2;
  HEAP32[i9 + 4 >> 2] = i8 | 3;
  i11 = i9 + i8 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  _dispose_chunk(i9, i8);
  return i12 | 0;
 }
 return 0;
}

function _ps_parser_to_int(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i10 = HEAP32[i11 + 8 >> 2] | 0;
 i2 = HEAP32[i11 >> 2] | 0;
 i1 = i2;
 L1 : do if (i1 >>> 0 < i10 >>> 0) while (1) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 0:
  case 12:
  case 9:
  case 10:
  case 13:
  case 32:
   {
    i1 = i2;
    break;
   }
  case 37:
   {
    i2 = 37;
    L5 : while (1) {
     switch (i2 << 24 >> 24) {
     case 10:
     case 13:
      break L5;
     default:
      {}
     }
     i2 = i1 + 1 | 0;
     if (i2 >>> 0 >= i10 >>> 0) {
      i1 = i2;
      break;
     }
     i1 = i2;
     i2 = HEAP8[i2 >> 0] | 0;
    }
    break;
   }
  default:
   {
    i1 = i2;
    break L1;
   }
  }
  i1 = i1 + 1 | 0;
  i2 = i1;
  if (i1 >>> 0 >= i10 >>> 0) {
   i1 = i2;
   break L1;
  }
 } else i1 = i2; while (0);
 HEAP32[i11 >> 2] = i1;
 if (i1 >>> 0 >= i10 >>> 0) {
  i11 = 0;
  return i11 | 0;
 }
 i3 = HEAP8[i1 >> 0] | 0;
 switch (i3 << 24 >> 24) {
 case 43:
 case 45:
  {
   i2 = i1 + 1 | 0;
   if ((i2 | 0) == (i10 | 0)) {
    i11 = 0;
    return i11 | 0;
   } else i6 = i3 << 24 >> 24 == 45 & 1;
   break;
  }
 default:
  {
   i2 = i1;
   i6 = 0;
  }
 }
 L19 : do if (i2 >>> 0 < i10 >>> 0) {
  i5 = 0;
  i4 = 0;
  while (1) {
   i3 = HEAP8[i2 >> 0] | 0;
   switch (i3 << 24 >> 24) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    {
     i3 = i5;
     break L19;
    }
   default:
    {}
   }
   if (i3 << 24 >> 24 < 0) {
    i3 = i5;
    break L19;
   }
   i9 = i3 & 127;
   i3 = HEAP8[284035 + i9 >> 0] | 0;
   if ((i9 + -48 | 0) >>> 0 >= 10) {
    i3 = i5;
    break L19;
   }
   if ((i5 | 0) > 214748364) {
    i3 = i5;
    i4 = 1;
   } else {
    i9 = (i5 | 0) == 214748364 & i3 << 24 >> 24 > 7;
    i3 = i9 ? 214748364 : (i5 * 10 | 0) + (i3 << 24 >> 24) | 0;
    i4 = i9 ? 1 : i4;
   }
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 < i10 >>> 0) i5 = i3; else break L19;
  }
 } else {
  i3 = 0;
  i4 = 0;
 } while (0);
 i3 = i4 << 24 >> 24 == 0 ? i3 : 2147483647;
 i3 = i6 << 24 >> 24 == 0 ? i3 : 0 - i3 | 0;
 i4 = i2;
 if ((i2 | 0) == (i1 | 0)) {
  i11 = 0;
  return i11 | 0;
 }
 if (i2 >>> 0 < i10 >>> 0) if ((HEAP8[i2 >> 0] | 0) == 35) {
  i1 = i2 + 1 | 0;
  if (i1 >>> 0 >= i10 >>> 0 | (i3 + -2 | 0) >>> 0 > 34) {
   i11 = 0;
   return i11 | 0;
  }
  i1 = HEAP8[i1 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 43:
  case 45:
   {
    if ((i2 + 2 | 0) == (i10 | 0)) {
     i11 = 0;
     return i11 | 0;
    } else {
     i4 = 2;
     i9 = i1 << 24 >> 24 == 45 & 1;
    }
    break;
   }
  default:
   {
    i4 = 1;
    i9 = 0;
   }
  }
  i7 = 2147483647 / (i3 | 0) | 0;
  L42 : do if ((i2 + i4 | 0) >>> 0 < i10 >>> 0) {
   i8 = (2147483647 % (i3 | 0) | 0) << 24 >> 24;
   i6 = 0;
   i1 = 0;
   while (1) {
    i5 = HEAP8[i2 + i4 >> 0] | 0;
    switch (i5 << 24 >> 24) {
    case 0:
    case 12:
    case 9:
    case 10:
    case 13:
    case 32:
     {
      i3 = i6;
      break L42;
     }
    default:
     {}
    }
    if (i5 << 24 >> 24 < 0) {
     i3 = i6;
     break L42;
    }
    i12 = HEAP8[284035 + (i5 & 127) >> 0] | 0;
    i5 = i12 << 24 >> 24;
    if (!(i12 << 24 >> 24 > -1 & (i5 | 0) < (i3 | 0))) {
     i3 = i6;
     break L42;
    }
    if ((i6 | 0) > (i7 | 0)) {
     i5 = i6;
     i1 = 1;
    } else {
     i12 = (i6 | 0) == (i7 | 0) & (i5 | 0) > (i8 | 0);
     i5 = i5 + (Math_imul(i6, i3) | 0) | 0;
     i5 = i12 ? i7 : i5;
     i1 = i12 ? 1 : i1;
    }
    i4 = i4 + 1 | 0;
    if ((i2 + i4 | 0) >>> 0 < i10 >>> 0) i6 = i5; else {
     i3 = i5;
     break L42;
    }
   }
  } else {
   i3 = 0;
   i1 = 0;
  } while (0);
  i1 = i1 << 24 >> 24 == 0 ? i3 : 2147483647;
  if ((i4 | 0) == 1) {
   i12 = 0;
   return i12 | 0;
  } else {
   i3 = i9 << 24 >> 24 == 0 ? i1 : 0 - i1 | 0;
   i1 = i2 + i4 | 0;
  }
 } else i1 = i4; else i1 = i4;
 HEAP32[i11 >> 2] = i1;
 i12 = i3;
 return i12 | 0;
}

function _big2_scanPercent(i4, i2, i7, i8) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 if ((i2 | 0) == (i7 | 0)) {
  i8 = -1;
  return i8 | 0;
 }
 i3 = HEAP8[i2 >> 0] | 0;
 L4 : do switch (i3 << 24 >> 24) {
 case 0:
  {
   i1 = HEAP8[i2 + 1 >> 0] | 0;
   switch (HEAP8[i4 + 76 + (i1 & 255) >> 0] | 0) {
   case 29:
    {
     i6 = 8;
     break L4;
    }
   case 24:
   case 22:
    break L4;
   case 7:
    {
     i6 = 14;
     break L4;
    }
   case 5:
    {
     if ((i7 - i2 | 0) < 2) {
      i8 = -2;
      return i8 | 0;
     }
     HEAP32[i8 >> 2] = i2;
     i8 = 0;
     return i8 | 0;
    }
   case 6:
    {
     if ((i7 - i2 | 0) < 3) {
      i8 = -2;
      return i8 | 0;
     }
     HEAP32[i8 >> 2] = i2;
     i8 = 0;
     return i8 | 0;
    }
   case 30:
   case 9:
   case 10:
   case 21:
    {
     HEAP32[i8 >> 2] = i2;
     i8 = 22;
     return i8 | 0;
    }
   default:
    {
     i6 = 17;
     break L4;
    }
   }
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i6 = 14;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i6 = 17;
   break;
  }
 case -1:
  {
   i1 = HEAP8[i2 + 1 >> 0] | 0;
   if ((i1 & 255) > 253) i6 = 17; else i6 = 8;
   break;
  }
 default:
  {
   i1 = HEAP8[i2 + 1 >> 0] | 0;
   i6 = 8;
  }
 } while (0);
 if ((i6 | 0) == 8) {
  i5 = i1 & 255;
  if (!(1 << (i5 & 31) & HEAP32[25356 + ((i5 >>> 5 | HEAPU8[344737 + (i3 & 255) >> 0] << 3) << 2) >> 2])) {
   HEAP32[i8 >> 2] = i2;
   i8 = 0;
   return i8 | 0;
  }
 } else if ((i6 | 0) == 14) {
  if ((i7 - i2 | 0) < 4) {
   i8 = -2;
   return i8 | 0;
  }
  HEAP32[i8 >> 2] = i2;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 17) {
  HEAP32[i8 >> 2] = i2;
  i8 = 0;
  return i8 | 0;
 }
 i1 = i2 + 2 | 0;
 if ((i1 | 0) == (i7 | 0)) {
  i8 = -1;
  return i8 | 0;
 }
 i5 = i4 + 76 | 0;
 i4 = i1;
 L36 : while (1) {
  i3 = HEAP8[i4 >> 0] | 0;
  switch (i3 << 24 >> 24) {
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i6 = 29;
    break L36;
   }
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i6 = 32;
    break L36;
   }
  case 0:
   {
    i1 = HEAP8[i2 + 3 >> 0] | 0;
    switch (HEAP8[i5 + (i1 & 255) >> 0] | 0) {
    case 7:
     {
      i6 = 29;
      break L36;
     }
    case 5:
     {
      i6 = 25;
      break L36;
     }
    case 6:
     {
      i6 = 27;
      break L36;
     }
    case 18:
     {
      i6 = 31;
      break L36;
     }
    case 29:
     {
      i6 = 22;
      break;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 22:
     break;
    default:
     {
      i6 = 32;
      break L36;
     }
    }
    break;
   }
  case -1:
   {
    i1 = HEAP8[i2 + 3 >> 0] | 0;
    if ((i1 & 255) > 253) {
     i6 = 32;
     break L36;
    } else i6 = 22;
    break;
   }
  default:
   {
    i1 = HEAP8[i2 + 3 >> 0] | 0;
    i6 = 22;
   }
  }
  if ((i6 | 0) == 22) {
   i6 = 0;
   i2 = i1 & 255;
   if (!(1 << (i2 & 31) & HEAP32[25356 + ((i2 >>> 5 | HEAPU8[344993 + (i3 & 255) >> 0] << 3) << 2) >> 2])) {
    i6 = 24;
    break;
   }
  }
  i1 = i4 + 2 | 0;
  if ((i1 | 0) == (i7 | 0)) {
   i1 = -1;
   i6 = 33;
   break;
  } else {
   i2 = i4;
   i4 = i1;
  }
 }
 if ((i6 | 0) == 24) {
  HEAP32[i8 >> 2] = i4;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 25) {
  if ((i7 - i4 | 0) < 2) {
   i8 = -2;
   return i8 | 0;
  }
  HEAP32[i8 >> 2] = i4;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 27) {
  if ((i7 - i4 | 0) < 3) {
   i8 = -2;
   return i8 | 0;
  }
  HEAP32[i8 >> 2] = i4;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 29) {
  if ((i7 - i4 | 0) < 4) {
   i8 = -2;
   return i8 | 0;
  }
  HEAP32[i8 >> 2] = i4;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 31) {
  HEAP32[i8 >> 2] = i2 + 4;
  i8 = 28;
  return i8 | 0;
 } else if ((i6 | 0) == 32) {
  HEAP32[i8 >> 2] = i4;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 33) return i1 | 0;
 return 0;
}

function _rasterizer_fill(i16, i17, i18, i3, i4, i19, i20, i21) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i15 = i23 + 16 | 0;
 i22 = i23 + 8 | 0;
 i1 = i23;
 if (!((i19 | 0) > 0 & (i20 | 0) > 0)) ___assert_fail(359341, 359365, 727, 359382);
 i2 = (1 << HEAP32[i16 + 4 >> 2]) + -1 | 0;
 if (i2 & i19 | 0) ___assert_fail(359398, 359365, 728, 359382);
 if (i2 & i20 | 0) ___assert_fail(359441, 359365, 729, 359382);
 i6 = i3 << 6;
 i7 = i4 << 6;
 i13 = i17 + 20 | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 i14 = i17 + 28 | 0;
 i12 = HEAP32[i14 >> 2] | 0;
 i3 = i2 + (i12 * 40 | 0) | 0;
 if (!i12) i2 = 0; else {
  i4 = ((i6 | 0) < 0) << 31 >> 31;
  i5 = ((i7 | 0) < 0) << 31 >> 31;
  do {
   i9 = i2 + 24 | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - i6;
   i9 = i2 + 28 | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - i6;
   i9 = i2 + 32 | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - i7;
   i9 = i2 + 36 | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - i7;
   i9 = HEAP32[i2 + 8 >> 2] | 0;
   i8 = HEAP32[i2 + 12 >> 2] | 0;
   i12 = i2;
   i10 = HEAP32[i12 >> 2] | 0;
   i12 = HEAP32[i12 + 4 >> 2] | 0;
   i9 = ___muldi3(i9 | 0, ((i9 | 0) < 0) << 31 >> 31 | 0, i6 | 0, i4 | 0) | 0;
   i11 = tempRet0;
   i8 = ___muldi3(i8 | 0, ((i8 | 0) < 0) << 31 >> 31 | 0, i7 | 0, i5 | 0) | 0;
   i11 = _i64Add(i8 | 0, tempRet0 | 0, i9 | 0, i11 | 0) | 0;
   i11 = _i64Subtract(i10 | 0, i12 | 0, i11 | 0, tempRet0 | 0) | 0;
   i12 = i2;
   HEAP32[i12 >> 2] = i11;
   HEAP32[i12 + 4 >> 2] = tempRet0;
   i2 = i2 + 40 | 0;
  } while ((i2 | 0) != (i3 | 0));
  i2 = HEAP32[i14 >> 2] | 0;
 }
 i12 = i17 + 4 | 0;
 HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - i6;
 i8 = i17 + 12 | 0;
 i6 = (HEAP32[i8 >> 2] | 0) - i6 | 0;
 HEAP32[i8 >> 2] = i6;
 i9 = i17 + 8 | 0;
 HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - i7;
 i10 = i17 + 16 | 0;
 HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - i7;
 i11 = i17 + 32 | 0;
 i5 = (HEAP32[i11 >> 2] | 0) + i2 | 0;
 i7 = i17 + 40 | 0;
 i3 = HEAP32[i7 >> 2] | 0;
 do if (i3 >>> 0 < i5 >>> 0) {
  i4 = i3 << 1;
  i4 = i4 >>> 0 > 64 ? i4 : 64;
  while (1) if (i4 >>> 0 < i5 >>> 0) i4 = i4 << 1; else break;
  i2 = i17 + 24 | 0;
  i3 = _realloc(HEAP32[i2 >> 2] | 0, i4 * 40 | 0) | 0;
  if (!i3) {
   i22 = 0;
   STACKTOP = i23;
   return i22 | 0;
  } else {
   HEAP32[i2 >> 2] = i3;
   HEAP32[i7 >> 2] = i4;
   i2 = HEAP32[i14 >> 2] | 0;
   i6 = HEAP32[i8 >> 2] | 0;
   break;
  }
 } while (0);
 i5 = HEAP32[i17 + 44 >> 2] | 0;
 HEAP32[i22 >> 2] = i5;
 i7 = i22 + 4 | 0;
 i2 = i2 - i5 | 0;
 HEAP32[i7 >> 2] = i2;
 i3 = i1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 i3 = i19 << 6;
 i4 = i20 << 6;
 if ((i6 | 0) >= (i3 | 0)) {
  i8 = HEAP32[i13 >> 2] | 0;
  _polyline_split_horz(i8, i5, i2, i8, i22, HEAP32[i17 + 24 >> 2] | 0, i15, i1, i3);
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
 }
 if ((HEAP32[i10 >> 2] | 0) >= (i4 | 0)) {
  i10 = HEAP32[i13 >> 2] | 0;
  _polyline_split_vert(i10, HEAP32[i22 >> 2] | 0, HEAP32[i7 >> 2] | 0, i10, i22, HEAP32[i17 + 24 >> 2] | 0, i15, i1, i4);
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
 }
 if ((HEAP32[i12 >> 2] | 0) < 1) {
  i12 = HEAP32[i13 >> 2] | 0;
  _polyline_split_horz(i12, HEAP32[i22 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i17 + 24 >> 2] | 0, i15, i12, i22, i1, 0);
 }
 if ((HEAP32[i9 >> 2] | 0) < 1) {
  i13 = HEAP32[i13 >> 2] | 0;
  _polyline_split_vert(i13, HEAP32[i22 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i17 + 24 >> 2] | 0, i15, i13, i22, i1, 0);
 }
 HEAP32[i14 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
 HEAP32[i11 >> 2] = 0;
 i22 = _rasterizer_fill_level(i16, i17, i18, i19, i20, i21, 0, i22, i1) | 0;
 STACKTOP = i23;
 return i22 | 0;
}

function _little2_scanPercent(i4, i2, i7, i8) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 if ((i2 | 0) == (i7 | 0)) {
  i8 = -1;
  return i8 | 0;
 }
 i3 = HEAP8[i2 + 1 >> 0] | 0;
 L4 : do switch (i3 << 24 >> 24) {
 case 0:
  {
   i1 = HEAP8[i2 >> 0] | 0;
   switch (HEAP8[i4 + 76 + (i1 & 255) >> 0] | 0) {
   case 29:
    {
     i6 = 8;
     break L4;
    }
   case 24:
   case 22:
    break L4;
   case 7:
    {
     i6 = 14;
     break L4;
    }
   case 5:
    {
     if ((i7 - i2 | 0) < 2) {
      i8 = -2;
      return i8 | 0;
     }
     HEAP32[i8 >> 2] = i2;
     i8 = 0;
     return i8 | 0;
    }
   case 6:
    {
     if ((i7 - i2 | 0) < 3) {
      i8 = -2;
      return i8 | 0;
     }
     HEAP32[i8 >> 2] = i2;
     i8 = 0;
     return i8 | 0;
    }
   case 30:
   case 9:
   case 10:
   case 21:
    {
     HEAP32[i8 >> 2] = i2;
     i8 = 22;
     return i8 | 0;
    }
   default:
    {
     i6 = 17;
     break L4;
    }
   }
  }
 case -37:
 case -38:
 case -39:
 case -40:
  {
   i6 = 14;
   break;
  }
 case -33:
 case -34:
 case -35:
 case -36:
  {
   i6 = 17;
   break;
  }
 case -1:
  {
   i1 = HEAP8[i2 >> 0] | 0;
   if ((i1 & 255) > 253) i6 = 17; else i6 = 8;
   break;
  }
 default:
  {
   i1 = HEAP8[i2 >> 0] | 0;
   i6 = 8;
  }
 } while (0);
 if ((i6 | 0) == 8) {
  i5 = i1 & 255;
  if (!(1 << (i5 & 31) & HEAP32[25356 + ((i5 >>> 5 | HEAPU8[344737 + (i3 & 255) >> 0] << 3) << 2) >> 2])) {
   HEAP32[i8 >> 2] = i2;
   i8 = 0;
   return i8 | 0;
  }
 } else if ((i6 | 0) == 14) {
  if ((i7 - i2 | 0) < 4) {
   i8 = -2;
   return i8 | 0;
  }
  HEAP32[i8 >> 2] = i2;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 17) {
  HEAP32[i8 >> 2] = i2;
  i8 = 0;
  return i8 | 0;
 }
 i1 = i2 + 2 | 0;
 if ((i1 | 0) == (i7 | 0)) {
  i8 = -1;
  return i8 | 0;
 }
 i5 = i4 + 76 | 0;
 i4 = i1;
 L36 : while (1) {
  i3 = HEAP8[i2 + 3 >> 0] | 0;
  switch (i3 << 24 >> 24) {
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i6 = 29;
    break L36;
   }
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i6 = 32;
    break L36;
   }
  case 0:
   {
    i1 = HEAP8[i4 >> 0] | 0;
    switch (HEAP8[i5 + (i1 & 255) >> 0] | 0) {
    case 7:
     {
      i6 = 29;
      break L36;
     }
    case 5:
     {
      i6 = 25;
      break L36;
     }
    case 6:
     {
      i6 = 27;
      break L36;
     }
    case 18:
     {
      i6 = 31;
      break L36;
     }
    case 29:
     {
      i6 = 22;
      break;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 22:
     break;
    default:
     {
      i6 = 32;
      break L36;
     }
    }
    break;
   }
  case -1:
   {
    i1 = HEAP8[i4 >> 0] | 0;
    if ((i1 & 255) > 253) {
     i6 = 32;
     break L36;
    } else i6 = 22;
    break;
   }
  default:
   {
    i1 = HEAP8[i4 >> 0] | 0;
    i6 = 22;
   }
  }
  if ((i6 | 0) == 22) {
   i6 = 0;
   i2 = i1 & 255;
   if (!(1 << (i2 & 31) & HEAP32[25356 + ((i2 >>> 5 | HEAPU8[344993 + (i3 & 255) >> 0] << 3) << 2) >> 2])) {
    i6 = 24;
    break;
   }
  }
  i1 = i4 + 2 | 0;
  if ((i1 | 0) == (i7 | 0)) {
   i1 = -1;
   i6 = 33;
   break;
  } else {
   i2 = i4;
   i4 = i1;
  }
 }
 if ((i6 | 0) == 24) {
  HEAP32[i8 >> 2] = i4;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 25) {
  if ((i7 - i4 | 0) < 2) {
   i8 = -2;
   return i8 | 0;
  }
  HEAP32[i8 >> 2] = i4;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 27) {
  if ((i7 - i4 | 0) < 3) {
   i8 = -2;
   return i8 | 0;
  }
  HEAP32[i8 >> 2] = i4;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 29) {
  if ((i7 - i4 | 0) < 4) {
   i8 = -2;
   return i8 | 0;
  }
  HEAP32[i8 >> 2] = i4;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 31) {
  HEAP32[i8 >> 2] = i2 + 4;
  i8 = 28;
  return i8 | 0;
 } else if ((i6 | 0) == 32) {
  HEAP32[i8 >> 2] = i4;
  i8 = 0;
  return i8 | 0;
 } else if ((i6 | 0) == 33) return i1 | 0;
 return 0;
}

function _add_line(i5, i1, i6, i2, i3) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i8;
 HEAP32[i7 >> 2] = 0;
 i4 = i3 + i2 | 0;
 HEAP32[i7 + 4 >> 2] = i4;
 HEAP32[i7 + 8 >> 2] = i1;
 HEAP32[i7 + 12 >> 2] = i4;
 HEAP32[i7 + 16 >> 2] = i1;
 i1 = i2 - i3 | 0;
 HEAP32[i7 + 20 >> 2] = i1;
 HEAP32[i7 + 24 >> 2] = 0;
 HEAP32[i7 + 28 >> 2] = i1;
 i1 = i5 + 4 | 0;
 i2 = i5 + 2 | 0;
 i3 = i5 + 8 | 0;
 i4 = (HEAP32[i1 >> 2] | 0) + (HEAP16[i2 >> 1] << 3) | 0;
 if (!i6) {
  i10 = i7;
  i6 = HEAP32[i10 + 4 >> 2] | 0;
  i9 = i4;
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i9 + 4 >> 2] = i6;
  i9 = HEAP32[i3 >> 2] | 0;
  i6 = HEAP16[i2 >> 1] | 0;
  HEAP16[i2 >> 1] = i6 + 1 << 16 >> 16;
  HEAP8[i9 + (i6 << 16 >> 16) >> 0] = 1;
  i6 = i7 + 8 | 0;
  i9 = HEAP32[i6 + 4 >> 2] | 0;
  i4 = (HEAP32[i1 >> 2] | 0) + (HEAP16[i2 >> 1] << 3) | 0;
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i4 + 4 >> 2] = i9;
  i4 = HEAP32[i3 >> 2] | 0;
  i9 = HEAP16[i2 >> 1] | 0;
  HEAP16[i2 >> 1] = i9 + 1 << 16 >> 16;
  HEAP8[i4 + (i9 << 16 >> 16) >> 0] = 1;
  i9 = i7 + 16 | 0;
  i4 = HEAP32[i9 + 4 >> 2] | 0;
  i6 = (HEAP32[i1 >> 2] | 0) + (HEAP16[i2 >> 1] << 3) | 0;
  HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i6 + 4 >> 2] = i4;
  i6 = HEAP32[i3 >> 2] | 0;
  i4 = HEAP16[i2 >> 1] | 0;
  HEAP16[i2 >> 1] = i4 + 1 << 16 >> 16;
  HEAP8[i6 + (i4 << 16 >> 16) >> 0] = 1;
  i4 = (HEAP32[i1 >> 2] | 0) + (HEAP16[i2 >> 1] << 3) | 0;
  i6 = i7 + 24 | 0;
  i1 = i6;
  i1 = HEAP32[i1 >> 2] | 0;
  i6 = i6 + 4 | 0;
  i6 = HEAP32[i6 >> 2] | 0;
  i7 = i4;
  HEAP32[i7 >> 2] = i1;
  i4 = i4 + 4 | 0;
  HEAP32[i4 >> 2] = i6;
  i4 = HEAP32[i3 >> 2] | 0;
  i6 = HEAP16[i2 >> 1] | 0;
  i7 = i6 + 1 << 16 >> 16;
  HEAP16[i2 >> 1] = i7;
  i6 = i6 << 16 >> 16;
  i6 = i4 + i6 | 0;
  HEAP8[i6 >> 0] = 1;
  i6 = HEAP16[i2 >> 1] | 0;
  i6 = i6 & 65535;
  i6 = i6 + 65535 | 0;
  i6 = i6 & 65535;
  i4 = i5 + 12 | 0;
  i4 = HEAP32[i4 >> 2] | 0;
  i7 = HEAP16[i5 >> 1] | 0;
  i3 = i7 + 1 << 16 >> 16;
  HEAP16[i5 >> 1] = i3;
  i7 = i7 << 16 >> 16;
  i7 = i4 + (i7 << 1) | 0;
  HEAP16[i7 >> 1] = i6;
  STACKTOP = i8;
  return;
 } else {
  i10 = i7 + 24 | 0;
  i9 = HEAP32[i10 + 4 >> 2] | 0;
  i6 = i4;
  HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i6 + 4 >> 2] = i9;
  i6 = HEAP32[i3 >> 2] | 0;
  i9 = HEAP16[i2 >> 1] | 0;
  HEAP16[i2 >> 1] = i9 + 1 << 16 >> 16;
  HEAP8[i6 + (i9 << 16 >> 16) >> 0] = 1;
  i9 = i7 + 16 | 0;
  i6 = HEAP32[i9 + 4 >> 2] | 0;
  i10 = (HEAP32[i1 >> 2] | 0) + (HEAP16[i2 >> 1] << 3) | 0;
  HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i10 + 4 >> 2] = i6;
  i10 = HEAP32[i3 >> 2] | 0;
  i6 = HEAP16[i2 >> 1] | 0;
  HEAP16[i2 >> 1] = i6 + 1 << 16 >> 16;
  HEAP8[i10 + (i6 << 16 >> 16) >> 0] = 1;
  i6 = i7 + 8 | 0;
  i10 = HEAP32[i6 + 4 >> 2] | 0;
  i9 = (HEAP32[i1 >> 2] | 0) + (HEAP16[i2 >> 1] << 3) | 0;
  HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i9 + 4 >> 2] = i10;
  i9 = HEAP32[i3 >> 2] | 0;
  i10 = HEAP16[i2 >> 1] | 0;
  HEAP16[i2 >> 1] = i10 + 1 << 16 >> 16;
  HEAP8[i9 + (i10 << 16 >> 16) >> 0] = 1;
  i10 = (HEAP32[i1 >> 2] | 0) + (HEAP16[i2 >> 1] << 3) | 0;
  i9 = i7;
  i6 = i9;
  i6 = HEAP32[i6 >> 2] | 0;
  i9 = i9 + 4 | 0;
  i9 = HEAP32[i9 >> 2] | 0;
  i7 = i10;
  i10 = i7;
  HEAP32[i10 >> 2] = i6;
  i7 = i7 + 4 | 0;
  HEAP32[i7 >> 2] = i9;
  i7 = HEAP32[i3 >> 2] | 0;
  i9 = HEAP16[i2 >> 1] | 0;
  i10 = i9 + 1 << 16 >> 16;
  HEAP16[i2 >> 1] = i10;
  i9 = i9 << 16 >> 16;
  i9 = i7 + i9 | 0;
  HEAP8[i9 >> 0] = 1;
  i9 = HEAP16[i2 >> 1] | 0;
  i9 = i9 & 65535;
  i9 = i9 + 65535 | 0;
  i9 = i9 & 65535;
  i7 = i5 + 12 | 0;
  i7 = HEAP32[i7 >> 2] | 0;
  i10 = HEAP16[i5 >> 1] | 0;
  i6 = i10 + 1 << 16 >> 16;
  HEAP16[i5 >> 1] = i6;
  i10 = i10 << 16 >> 16;
  i10 = i7 + (i10 << 1) | 0;
  HEAP16[i10 >> 1] = i9;
  STACKTOP = i8;
  return;
 }
}

function _TT_Load_Context(i9, i7, i1) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10;
 HEAP32[i9 >> 2] = i7;
 HEAP32[i9 + 4 >> 2] = i1;
 if (i1 | 0) {
  HEAP32[i9 + 396 >> 2] = HEAP32[i1 + 116 >> 2];
  HEAP32[i9 + 400 >> 2] = HEAP32[i1 + 120 >> 2];
  HEAP32[i9 + 408 >> 2] = HEAP32[i1 + 128 >> 2];
  HEAP32[i9 + 412 >> 2] = HEAP32[i1 + 132 >> 2];
  HEAP32[i9 + 404 >> 2] = HEAP32[i1 + 124 >> 2];
  HEAP32[i9 + 416 >> 2] = HEAP32[i1 + 136 >> 2];
  i2 = i9 + 244 | 0;
  i3 = i1 + 72 | 0;
  i4 = i2 + 40 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  i4 = i9 + 216 | 0;
  i3 = i1 + 44 | 0;
  HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
  HEAP32[i4 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
  HEAP32[i4 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
  HEAP32[i9 + 420 >> 2] = HEAP32[i1 + 140 >> 2];
  HEAP32[i9 + 424 >> 2] = HEAP32[i1 + 144 >> 2];
  i4 = i1 + 148 | 0;
  i3 = HEAP32[i4 + 4 >> 2] | 0;
  i2 = i9 + 444 | 0;
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i2 + 4 >> 2] = i3;
  i2 = i1 + 156 | 0;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  i4 = i9 + 452 | 0;
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i4 + 4 >> 2] = i3;
  i4 = i1 + 164 | 0;
  i3 = HEAP32[i4 + 4 >> 2] | 0;
  i2 = i9 + 460 | 0;
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i2 + 4 >> 2] = i3;
  i2 = i9 + 284 | 0;
  i3 = i1 + 172 | 0;
  i4 = i2 + 68 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  HEAP32[i9 + 380 >> 2] = HEAP32[i1 + 240 >> 2];
  HEAP32[i9 + 384 >> 2] = HEAP32[i1 + 244 >> 2];
  HEAP16[i9 + 468 >> 1] = HEAP16[i1 + 248 >> 1] | 0;
  HEAP32[i9 + 472 >> 2] = HEAP32[i1 + 252 >> 2];
  i2 = i9 + 180 | 0;
  i3 = i1 + 256 | 0;
  i4 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  i2 = i9 + 36 | 0;
  i4 = i2 + 108 | 0;
  do {
   HEAP32[i2 >> 2] = 0;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
 }
 i6 = i9 + 20 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i4 = i9 + 8 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i2 = i9 + 24 | 0;
 i3 = (HEAPU16[i7 + 284 >> 1] | 0) + 32 | 0;
 do if (i1 >>> 0 < i3 >>> 0) {
  i5 = _ft_mem_realloc(i5, 1, i1 << 2, i3 << 2, HEAP32[i2 >> 2] | 0, i8) | 0;
  HEAP32[i2 >> 2] = i5;
  i2 = HEAP32[i8 >> 2] | 0;
  if (!i2) {
   i1 = i3;
   i5 = HEAP32[i4 >> 2] | 0;
   break;
  }
  HEAP32[i6 >> 2] = i1;
  i9 = i2;
  STACKTOP = i10;
  return i9 | 0;
 } while (0);
 HEAP32[i6 >> 2] = i1;
 i4 = i9 + 388 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = i9 + 392 | 0;
 i3 = HEAPU16[i7 + 286 >> 1] | 0;
 if (i1 >>> 0 < i3 >>> 0) {
  i7 = _ft_mem_realloc(i5, 1, i1, i3, HEAP32[i2 >> 2] | 0, i8) | 0;
  HEAP32[i2 >> 2] = i7;
  i2 = HEAP32[i8 >> 2] | 0;
  if (!i2) i1 = i3; else {
   HEAP32[i4 >> 2] = i1 & 65535;
   i9 = i2;
   STACKTOP = i10;
   return i9 | 0;
  }
 }
 HEAP32[i4 >> 2] = i1 & 65535;
 i1 = i9 + 144 | 0;
 HEAP16[i9 + 152 >> 1] = 0;
 HEAP16[i9 + 154 >> 1] = 0;
 i2 = i9 + 72 | 0;
 i3 = i1;
 i4 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 i2 = i9 + 108 | 0;
 i3 = i1;
 i4 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 i2 = i9 + 36 | 0;
 i3 = i1;
 i4 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAP8[i9 + 488 >> 0] = 0;
 i9 = 0;
 STACKTOP = i10;
 return i9 | 0;
}

function _cf2_builder_cubeTo(i8, i10) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i9 = HEAP32[i8 + 28 >> 2] | 0;
 i1 = i9 + 64 | 0;
 L1 : do if (!(HEAP8[i1 >> 0] | 0)) {
  i6 = HEAP32[i10 >> 2] | 0;
  i7 = HEAP32[i10 + 4 >> 2] | 0;
  HEAP8[i1 >> 0] = 1;
  i4 = i9 + 20 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i9 + 65 | 0;
  do if (!(HEAP8[i5 >> 0] | 0)) {
   i2 = i9 + 12 | 0;
   i11 = 8;
  } else {
   i3 = i9 + 12 | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   if (((HEAP16[i2 + 20 >> 1] | 0) + 1 + (HEAP16[i2 + 56 >> 1] | 0) | 0) >>> 0 > (HEAP32[i2 + 8 >> 2] | 0) >>> 0) {
    i2 = _FT_GlyphLoader_CheckPoints(i2, 0, 1) | 0;
    if (i2 | 0) break;
   }
   i2 = HEAP16[i1 >> 1] | 0;
   if (i2 << 16 >> 16 > 0) {
    HEAP16[(HEAP32[i1 + 12 >> 2] | 0) + ((i2 << 16 >> 16) + -1 << 1) >> 1] = (HEAPU16[i1 + 2 >> 1] | 0) + 65535;
    i2 = i3;
    i11 = 8;
   } else {
    i2 = i3;
    i11 = 8;
   }
  } while (0);
  do if ((i11 | 0) == 8) {
   HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
   i1 = HEAP32[i2 >> 2] | 0;
   if (((HEAP16[i1 + 22 >> 1] | 0) + 1 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
    i2 = _FT_GlyphLoader_CheckPoints(i1, 1, 0) | 0;
    if (i2 | 0) break;
   }
   i1 = HEAP32[i4 >> 2] | 0;
   if (!(HEAP8[i5 >> 0] | 0)) i1 = i1 + 2 | 0; else {
    i3 = HEAP32[i1 + 4 >> 2] | 0;
    i5 = i1 + 2 | 0;
    i4 = HEAP16[i5 >> 1] | 0;
    i1 = (HEAP32[i1 + 8 >> 2] | 0) + i4 | 0;
    HEAP32[i3 + (i4 << 3) >> 2] = i6 >> 10;
    HEAP32[i3 + (i4 << 3) + 4 >> 2] = i7 >> 10;
    HEAP8[i1 >> 0] = 1;
    i1 = i5;
   }
   HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
   break L1;
  } while (0);
  i1 = HEAP32[i8 + 24 >> 2] | 0;
  if (HEAP32[i1 >> 2] | 0) return;
  HEAP32[i1 >> 2] = i2;
  return;
 } while (0);
 i1 = HEAP32[i9 + 12 >> 2] | 0;
 if (((HEAP16[i1 + 22 >> 1] | 0) + 3 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
  i2 = _FT_GlyphLoader_CheckPoints(i1, 3, 0) | 0;
  if (i2 | 0) {
   i1 = HEAP32[i8 + 24 >> 2] | 0;
   if (HEAP32[i1 >> 2] | 0) return;
   HEAP32[i1 >> 2] = i2;
   return;
  }
 }
 i2 = i9 + 20 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i3 = i9 + 65 | 0;
 if (!(HEAP8[i3 >> 0] | 0)) {
  i11 = i1 + 2 | 0;
  HEAP16[i11 >> 1] = (HEAP16[i11 >> 1] | 0) + 1 << 16 >> 16;
  i11 = 23;
 } else {
  i6 = HEAP32[i10 + 12 >> 2] | 0;
  i7 = HEAP32[i1 + 4 >> 2] | 0;
  i8 = i1 + 2 | 0;
  i9 = HEAP16[i8 >> 1] | 0;
  i1 = (HEAP32[i1 + 8 >> 2] | 0) + i9 | 0;
  HEAP32[i7 + (i9 << 3) >> 2] = HEAP32[i10 + 8 >> 2] >> 10;
  HEAP32[i7 + (i9 << 3) + 4 >> 2] = i6 >> 10;
  HEAP8[i1 >> 0] = 2;
  i1 = HEAP32[i2 >> 2] | 0;
  i9 = (HEAP8[i3 >> 0] | 0) == 0;
  HEAP16[i8 >> 1] = (HEAP16[i8 >> 1] | 0) + 1 << 16 >> 16;
  if (i9) i11 = 23; else {
   i6 = HEAP32[i10 + 20 >> 2] | 0;
   i7 = HEAP32[i1 + 4 >> 2] | 0;
   i8 = i1 + 2 | 0;
   i9 = HEAP16[i8 >> 1] | 0;
   i1 = (HEAP32[i1 + 8 >> 2] | 0) + i9 | 0;
   HEAP32[i7 + (i9 << 3) >> 2] = HEAP32[i10 + 16 >> 2] >> 10;
   HEAP32[i7 + (i9 << 3) + 4 >> 2] = i6 >> 10;
   HEAP8[i1 >> 0] = 2;
   i1 = HEAP32[i2 >> 2] | 0;
   i9 = (HEAP8[i3 >> 0] | 0) == 0;
   HEAP16[i8 >> 1] = (HEAP16[i8 >> 1] | 0) + 1 << 16 >> 16;
   if (i9) i11 = 25; else {
    i6 = HEAP32[i10 + 28 >> 2] | 0;
    i7 = HEAP32[i1 + 4 >> 2] | 0;
    i9 = i1 + 2 | 0;
    i8 = HEAP16[i9 >> 1] | 0;
    i1 = (HEAP32[i1 + 8 >> 2] | 0) + i8 | 0;
    HEAP32[i7 + (i8 << 3) >> 2] = HEAP32[i10 + 24 >> 2] >> 10;
    HEAP32[i7 + (i8 << 3) + 4 >> 2] = i6 >> 10;
    HEAP8[i1 >> 0] = 1;
    i1 = i9;
   }
  }
 }
 if ((i11 | 0) == 23) {
  i10 = i1 + 2 | 0;
  HEAP16[i10 >> 1] = (HEAP16[i10 >> 1] | 0) + 1 << 16 >> 16;
  i11 = 25;
 }
 if ((i11 | 0) == 25) i1 = i1 + 2 | 0;
 HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
 return;
}

function _tt_cmap14_validate(i11, i17) {
 i11 = i11 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i1 = i11 + 10 | 0;
 i13 = i17 + 160 | 0;
 if (i1 >>> 0 > (HEAP32[i13 >> 2] | 0) >>> 0) _ft_validator_error(i17, 8);
 i12 = (HEAPU8[i11 + 3 >> 0] | 0) << 16 | (HEAPU8[i11 + 2 >> 0] | 0) << 24 | (HEAPU8[i11 + 4 >> 0] | 0) << 8 | (HEAPU8[i11 + 5 >> 0] | 0);
 i14 = (HEAPU8[i11 + 7 >> 0] | 0) << 16 | (HEAPU8[i11 + 6 >> 0] | 0) << 24 | (HEAPU8[i11 + 8 >> 0] | 0) << 8 | (HEAPU8[i11 + 9 >> 0] | 0);
 if (i12 >>> 0 < 10 ? 1 : i12 >>> 0 > ((HEAP32[i13 >> 2] | 0) - i11 | 0) >>> 0) _ft_validator_error(i17, 8);
 if ((((i12 + -10 | 0) >>> 0) / 11 | 0) >>> 0 < i14 >>> 0) _ft_validator_error(i17, 8);
 if (!i14) return 0;
 i15 = i17 + 164 | 0;
 i16 = i17 + 172 | 0;
 i9 = 0;
 i10 = 1;
 L13 : while (1) {
  i2 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) << 16 | (HEAPU8[i1 + 2 >> 0] | 0);
  i3 = (HEAPU8[i1 + 4 >> 0] | 0) << 16 | (HEAPU8[i1 + 3 >> 0] | 0) << 24 | (HEAPU8[i1 + 5 >> 0] | 0) << 8 | (HEAPU8[i1 + 6 >> 0] | 0);
  i8 = (HEAPU8[i1 + 8 >> 0] | 0) << 16 | (HEAPU8[i1 + 7 >> 0] | 0) << 24 | (HEAPU8[i1 + 9 >> 0] | 0) << 8 | (HEAPU8[i1 + 10 >> 0] | 0);
  i1 = i1 + 11 | 0;
  if (!(i3 >>> 0 < i12 >>> 0 & i8 >>> 0 < i12 >>> 0)) {
   i1 = 9;
   break;
  }
  if (i2 >>> 0 < i10 >>> 0) {
   i1 = 11;
   break;
  }
  i10 = i2 + 1 | 0;
  if (i3 | 0) {
   i2 = i11 + i3 + 4 | 0;
   i7 = i2 + -4 | 0;
   i7 = (HEAPU8[i7 + 1 >> 0] | 0) << 16 | (HEAPU8[i7 >> 0] | 0) << 24 | (HEAPU8[i7 + 2 >> 0] | 0) << 8 | (HEAPU8[i7 + 3 >> 0] | 0);
   if (i7 >>> 0 > ((HEAP32[i13 >> 2] | 0) - i2 | 0) >>> 2 >>> 0) {
    i1 = 14;
    break;
   }
   if (i7 | 0) {
    i3 = 0;
    i4 = 0;
    while (1) {
     i5 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) << 16 | (HEAPU8[i2 + 2 >> 0] | 0);
     i6 = i5 + (HEAPU8[i2 + 3 >> 0] | 0) | 0;
     if (i6 >>> 0 > 1114111) {
      i1 = 17;
      break L13;
     }
     if (i5 >>> 0 < i4 >>> 0) {
      i1 = 19;
      break L13;
     }
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == (i7 | 0)) break; else {
      i2 = i2 + 4 | 0;
      i4 = i6 + 1 | 0;
     }
    }
   }
  }
  if (i8 | 0) {
   i2 = i11 + i8 + 4 | 0;
   i7 = i2 + -4 | 0;
   i7 = (HEAPU8[i7 + 1 >> 0] | 0) << 16 | (HEAPU8[i7 >> 0] | 0) << 24 | (HEAPU8[i7 + 2 >> 0] | 0) << 8 | (HEAPU8[i7 + 3 >> 0] | 0);
   if (i7 >>> 0 > ((HEAP32[i13 >> 2] | 0) - i2 | 0) >>> 2 >>> 0) {
    i1 = 23;
    break;
   }
   if (i7 | 0) {
    i5 = 0;
    i6 = 0;
    do {
     i4 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) << 16 | (HEAPU8[i2 + 2 >> 0] | 0);
     i3 = i2;
     i2 = i2 + 5 | 0;
     if (i4 >>> 0 > 1114111) {
      i1 = 26;
      break L13;
     }
     if (i4 >>> 0 < i5 >>> 0) {
      i1 = 28;
      break L13;
     }
     i5 = i4 + 1 | 0;
     if (HEAP32[i15 >> 2] | 0) if (((HEAPU8[i3 + 3 >> 0] | 0) << 8 | (HEAPU8[i3 + 4 >> 0] | 0)) >>> 0 >= (HEAP32[i16 >> 2] | 0) >>> 0) {
      i1 = 31;
      break L13;
     }
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i7 | 0));
   }
  }
  i9 = i9 + 1 | 0;
  if ((i9 | 0) == (i14 | 0)) {
   i1 = 34;
   break;
  }
 }
 switch (i1 | 0) {
 case 9:
  {
   _ft_validator_error(i17, 8);
   break;
  }
 case 11:
  {
   _ft_validator_error(i17, 8);
   break;
  }
 case 14:
  {
   _ft_validator_error(i17, 8);
   break;
  }
 case 17:
  {
   _ft_validator_error(i17, 8);
   break;
  }
 case 19:
  {
   _ft_validator_error(i17, 8);
   break;
  }
 case 23:
  {
   _ft_validator_error(i17, 8);
   break;
  }
 case 26:
  {
   _ft_validator_error(i17, 8);
   break;
  }
 case 28:
  {
   _ft_validator_error(i17, 8);
   break;
  }
 case 31:
  {
   _ft_validator_error(i17, 16);
   break;
  }
 case 34:
  return 0;
 }
 return 0;
}

function _ass_pre_blur1_horz_c(i2, i43, i1, i44) {
 i2 = i2 | 0;
 i43 = i43 | 0;
 i1 = i1 | 0;
 i44 = i44 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i45 = 0, i46 = 0, i47 = 0;
 i47 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i45 = i47;
 i46 = i1 + 2 | 0;
 i41 = Math_imul(i1 + 15 & -16, i44) | 0;
 i42 = i44 << 4;
 i9 = i45 + 32 | 0;
 if (!i46) {
  STACKTOP = i47;
  return;
 }
 i10 = (i44 | 0) == 0;
 i11 = i45 + 2 | 0;
 i12 = i45 + 4 | 0;
 i13 = i45 + 6 | 0;
 i14 = i45 + 8 | 0;
 i15 = i45 + 10 | 0;
 i16 = i45 + 12 | 0;
 i17 = i45 + 14 | 0;
 i18 = i45 + 16 | 0;
 i19 = i45 + 18 | 0;
 i20 = i45 + 20 | 0;
 i21 = i45 + 22 | 0;
 i22 = i45 + 24 | 0;
 i23 = i45 + 26 | 0;
 i24 = i45 + 28 | 0;
 i25 = i45 + 30 | 0;
 i26 = i45 + 34 | 0;
 i27 = i45 + 36 | 0;
 i28 = i45 + 38 | 0;
 i29 = i45 + 40 | 0;
 i30 = i45 + 42 | 0;
 i31 = i45 + 44 | 0;
 i32 = i45 + 46 | 0;
 i33 = i45 + 48 | 0;
 i34 = i45 + 50 | 0;
 i35 = i45 + 52 | 0;
 i36 = i45 + 54 | 0;
 i37 = i45 + 56 | 0;
 i38 = i45 + 58 | 0;
 i39 = i45 + 60 | 0;
 i40 = i45 + 62 | 0;
 i8 = 0;
 i1 = 0;
 do {
  if (!i10) {
   i7 = i2 + (i42 << 1) | 0;
   i5 = 0;
   i6 = i1;
   while (1) {
    i4 = i6 - i42 | 0;
    i4 = i4 >>> 0 < i41 >>> 0 ? i43 + (i4 << 1) | 0 : 368376;
    HEAP16[i45 >> 1] = HEAP16[i4 >> 1] | 0;
    HEAP16[i11 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i12 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i13 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i14 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i15 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i16 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i17 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i18 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i19 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i20 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i21 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i22 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i23 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i24 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i25 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = i6 >>> 0 < i41 >>> 0 ? i43 + (i6 << 1) | 0 : 368376;
    i3 = HEAP16[i4 >> 1] | 0;
    HEAP16[i9 >> 1] = i3;
    HEAP16[i26 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
    HEAP16[i27 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
    HEAP16[i28 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
    HEAP16[i29 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
    HEAP16[i30 >> 1] = HEAP16[i4 + 10 >> 1] | 0;
    HEAP16[i31 >> 1] = HEAP16[i4 + 12 >> 1] | 0;
    HEAP16[i32 >> 1] = HEAP16[i4 + 14 >> 1] | 0;
    HEAP16[i33 >> 1] = HEAP16[i4 + 16 >> 1] | 0;
    HEAP16[i34 >> 1] = HEAP16[i4 + 18 >> 1] | 0;
    HEAP16[i35 >> 1] = HEAP16[i4 + 20 >> 1] | 0;
    HEAP16[i36 >> 1] = HEAP16[i4 + 22 >> 1] | 0;
    HEAP16[i37 >> 1] = HEAP16[i4 + 24 >> 1] | 0;
    HEAP16[i38 >> 1] = HEAP16[i4 + 26 >> 1] | 0;
    HEAP16[i39 >> 1] = HEAP16[i4 + 28 >> 1] | 0;
    HEAP16[i40 >> 1] = HEAP16[i4 + 30 >> 1] | 0;
    i4 = 0;
    while (1) {
     HEAP16[i2 + (i4 << 1) >> 1] = ((HEAPU16[i9 + (i4 + -1 << 1) >> 1] | 0) + 1 + (((i3 & 65535) + (HEAPU16[i9 + (i4 + -2 << 1) >> 1] | 0) | 0) >>> 1 & 32767) | 0) >>> 1 & 32767;
     i3 = i4 + 1 | 0;
     if ((i3 | 0) == 16) break;
     i4 = i3;
     i3 = HEAP16[i9 + (i3 << 1) >> 1] | 0;
    }
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i44 | 0)) break; else {
     i6 = i6 + 16 | 0;
     i2 = i2 + 32 | 0;
    }
   }
   i2 = i7;
   i1 = i42 + i1 | 0;
  }
  i8 = i8 + 16 | 0;
 } while (i8 >>> 0 < i46 >>> 0);
 STACKTOP = i47;
 return;
}

function _FT_Done_Library(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0;
 if (!i15) {
  i17 = 33;
  return i17 | 0;
 }
 i16 = i15 + 188 | 0;
 i17 = HEAP32[i16 >> 2] | 0;
 HEAP32[i16 >> 2] = i17 + -1;
 if ((i17 | 0) > 1) {
  i17 = 0;
  return i17 | 0;
 }
 i16 = HEAP32[i15 >> 2] | 0;
 i17 = i15 + 16 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i13 = 0;
 i1 = i2;
 do {
  L9 : do if (!i2) i2 = 0; else {
   if (i13 | 0) {
    i11 = 0;
    while (1) {
     i1 = HEAP32[i15 + 20 + (i11 << 2) >> 2] | 0;
     if (HEAP32[HEAP32[i1 >> 2] >> 2] & 1 | 0) {
      i10 = i1 + 16 | 0;
      i1 = HEAP32[i10 >> 2] | 0;
      if (i1 | 0) do {
       i7 = HEAP32[i1 + 8 >> 2] | 0;
       i8 = HEAP32[i7 + 96 >> 2] | 0;
       i4 = (HEAP32[i7 + 128 >> 2] | 0) + 56 | 0;
       i9 = i8 + 16 | 0;
       i2 = HEAP32[i9 >> 2] | 0;
       i5 = (i2 | 0) == 0;
       i6 = (i7 | 0) == 0 | (i8 | 0) == 0;
       i3 = HEAP32[i4 >> 2] | 0;
       do {
        do {} while (i6);
        i12 = i3;
        i3 = i3 + -1 | 0;
       } while ((i12 | 0) > 1 | i5);
       HEAP32[i4 >> 2] = i3;
       i3 = HEAP32[i8 + 8 >> 2] | 0;
       do {
        if ((HEAP32[i2 + 8 >> 2] | 0) == (i7 | 0)) {
         i14 = 31;
         break;
        }
        i2 = HEAP32[i2 + 4 >> 2] | 0;
       } while ((i2 | 0) != 0);
       if ((i14 | 0) == 31) {
        i14 = 0;
        i12 = HEAP32[i2 >> 2] | 0;
        i1 = HEAP32[i2 + 4 >> 2] | 0;
        HEAP32[(i12 | 0 ? i12 + 4 | 0 : i9) >> 2] = i1;
        HEAP32[(i1 | 0 ? i1 : i8 + 20 | 0) >> 2] = i12;
        FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
        _destroy_face(i3, i7, i8);
        i1 = HEAP32[i10 >> 2] | 0;
       }
      } while ((i1 | 0) != 0);
     }
     i11 = i11 + 1 | 0;
     i1 = HEAP32[i17 >> 2] | 0;
     if (i11 >>> 0 >= i1 >>> 0) {
      i2 = i1;
      break L9;
     }
    }
   }
   i12 = HEAP32[24980 + (i13 << 2) >> 2] | 0;
   i11 = 0;
   do {
    i1 = HEAP32[i15 + 20 + (i11 << 2) >> 2] | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (!(_strcmp(HEAP32[i2 + 8 >> 2] | 0, i12) | 0)) if (HEAP32[i2 >> 2] & 1 | 0) {
     i10 = i1 + 16 | 0;
     i1 = HEAP32[i10 >> 2] | 0;
     if (i1 | 0) do {
      i7 = HEAP32[i1 + 8 >> 2] | 0;
      i8 = HEAP32[i7 + 96 >> 2] | 0;
      i4 = (HEAP32[i7 + 128 >> 2] | 0) + 56 | 0;
      i9 = i8 + 16 | 0;
      i2 = HEAP32[i9 >> 2] | 0;
      i5 = (i2 | 0) == 0;
      i6 = (i7 | 0) == 0 | (i8 | 0) == 0;
      i3 = HEAP32[i4 >> 2] | 0;
      do {
       do {} while (i6);
       i18 = i3;
       i3 = i3 + -1 | 0;
      } while ((i18 | 0) > 1 | i5);
      HEAP32[i4 >> 2] = i3;
      i3 = HEAP32[i8 + 8 >> 2] | 0;
      do {
       if ((HEAP32[i2 + 8 >> 2] | 0) == (i7 | 0)) {
        i14 = 17;
        break;
       }
       i2 = HEAP32[i2 + 4 >> 2] | 0;
      } while ((i2 | 0) != 0);
      if ((i14 | 0) == 17) {
       i14 = 0;
       i18 = HEAP32[i2 >> 2] | 0;
       i1 = HEAP32[i2 + 4 >> 2] | 0;
       HEAP32[(i18 | 0 ? i18 + 4 | 0 : i9) >> 2] = i1;
       HEAP32[(i1 | 0 ? i1 : i8 + 20 | 0) >> 2] = i18;
       FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
       _destroy_face(i3, i7, i8);
       i1 = HEAP32[i10 >> 2] | 0;
      }
     } while ((i1 | 0) != 0);
    }
    i11 = i11 + 1 | 0;
    i1 = HEAP32[i17 >> 2] | 0;
   } while (i11 >>> 0 < i1 >>> 0);
   i2 = i1;
  } while (0);
  i13 = i13 + 1 | 0;
 } while ((i13 | 0) != 2);
 if (i1 | 0) do {
  _FT_Remove_Module(i15, HEAP32[i15 + 20 + (i1 + -1 << 2) >> 2] | 0) | 0;
  i1 = HEAP32[i17 >> 2] | 0;
 } while ((i1 | 0) != 0);
 FUNCTION_TABLE_vii[HEAP32[i16 + 8 >> 2] & 63](i16, i15);
 i18 = 0;
 return i18 | 0;
}

function _FT_Add_Module(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 if (!i11) {
  i12 = 33;
  return i12 | 0;
 }
 if (!i10) {
  i12 = 6;
  return i12 | 0;
 }
 if ((HEAP32[i10 + 16 >> 2] | 0) > 131078) {
  i12 = 4;
  return i12 | 0;
 }
 i12 = i11 + 16 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if (i1 | 0) {
  i3 = HEAP32[i10 + 8 >> 2] | 0;
  i2 = 0;
  do {
   i4 = HEAP32[i11 + 20 + (i2 << 2) >> 2] | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   i2 = i2 + 1 | 0;
   if (!(_strcmp(HEAP32[i5 + 8 >> 2] | 0, i3) | 0)) {
    i8 = 8;
    break;
   }
  } while (i2 >>> 0 < i1 >>> 0);
  do if ((i8 | 0) == 8) if ((HEAP32[i10 + 12 >> 2] | 0) > (HEAP32[i5 + 12 >> 2] | 0)) {
   _FT_Remove_Module(i11, i4) | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   break;
  } else {
   i12 = 5;
   return i12 | 0;
  } while (0);
  if (i1 >>> 0 > 31) {
   i12 = 48;
   return i12 | 0;
  }
 }
 i9 = HEAP32[i11 >> 2] | 0;
 i1 = HEAP32[i10 + 4 >> 2] | 0;
 do if ((i1 | 0) > 0) {
  i2 = FUNCTION_TABLE_iii[HEAP32[i9 + 4 >> 2] & 255](i9, i1) | 0;
  if (!i2) {
   i12 = 64;
   return i12 | 0;
  } else {
   _memset(i2 | 0, 0, i1 | 0) | 0;
   i7 = i2;
   break;
  }
 } else if (!i1) i7 = 0; else {
  i12 = 6;
  return i12 | 0;
 } while (0);
 HEAP32[i7 + 4 >> 2] = i11;
 HEAP32[i7 + 8 >> 2] = i9;
 HEAP32[i7 >> 2] = i10;
 i1 = HEAP32[i10 >> 2] | 0;
 L31 : do if (!(i1 & 2)) {
  i2 = i10;
  i8 = 26;
 } else {
  i5 = HEAP32[i11 >> 2] | 0;
  i6 = FUNCTION_TABLE_iii[HEAP32[i5 + 4 >> 2] & 255](i5, 12) | 0;
  if (!i6) i3 = 64; else {
   i1 = i6;
   i2 = i1 + 12 | 0;
   do {
    HEAP8[i1 >> 0] = 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i2 | 0));
   i2 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 + 12 >> 2] = i2;
   i4 = HEAP32[i2 + 36 >> 2] | 0;
   HEAP32[i7 + 16 >> 2] = i4;
   do if ((i4 | 0) == 1869968492) {
    i4 = i2 + 56 | 0;
    i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0;
    if (i1 | 0) {
     i3 = FUNCTION_TABLE_iii[i1 & 255](i5, i7 + 52 | 0) | 0;
     if (!i3) {
      HEAP32[i7 + 56 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2];
      HEAP32[i7 + 60 >> 2] = HEAP32[i2 + 40 >> 2];
      break;
     } else {
      FUNCTION_TABLE_vii[HEAP32[i5 + 8 >> 2] & 63](i5, i6);
      break L31;
     }
    }
   } while (0);
   HEAP32[i6 + 8 >> 2] = i7;
   i8 = i11 + 152 | 0;
   i5 = HEAP32[i8 >> 2] | 0;
   HEAP32[i6 + 4 >> 2] = 0;
   HEAP32[i6 >> 2] = i5;
   i1 = i11 + 148 | 0;
   HEAP32[(i5 | 0 ? i5 + 4 | 0 : i1) >> 2] = i6;
   HEAP32[i8 >> 2] = i6;
   i1 = HEAP32[i1 >> 2] | 0;
   L41 : do if (!i1) i1 = 0; else {
    i2 = i1;
    while (1) {
     i1 = HEAP32[i2 + 8 >> 2] | 0;
     if ((HEAP32[i1 + 16 >> 2] | 0) == 1869968492) break L41;
     i2 = HEAP32[i2 + 4 >> 2] | 0;
     if (!i2) {
      i1 = 0;
      break;
     }
    }
   } while (0);
   HEAP32[i11 + 156 >> 2] = i1;
   i2 = HEAP32[i7 >> 2] | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   i8 = 26;
  }
 } while (0);
 do if ((i8 | 0) == 26) {
  if (i1 & 4 | 0) HEAP32[i11 + 160 >> 2] = i7;
  if (i1 & 1 | 0) HEAP32[i7 + 12 >> 2] = i2;
  i1 = HEAP32[i10 + 24 >> 2] | 0;
  if (i1 | 0) {
   i1 = FUNCTION_TABLE_ii[i1 & 63](i7) | 0;
   if (i1 | 0) {
    i3 = i1;
    break;
   }
  }
  i10 = HEAP32[i12 >> 2] | 0;
  HEAP32[i12 >> 2] = i10 + 1;
  HEAP32[i11 + 20 + (i10 << 2) >> 2] = i7;
  i12 = 0;
  return i12 | 0;
 } while (0);
 if (HEAP32[HEAP32[i7 >> 2] >> 2] & 2 | 0) {
  i1 = HEAP32[i7 + 12 >> 2] | 0;
  if (i1 | 0) if ((HEAP32[i1 + 36 >> 2] | 0) == 1869968492) {
   i2 = HEAP32[i7 + 52 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 + 56 >> 2] | 0) + 20 >> 2] & 127](i2);
  }
 }
 FUNCTION_TABLE_vii[HEAP32[i9 + 8 >> 2] & 63](i9, i7);
 i12 = i3;
 return i12 | 0;
}

function _FT_Gzip_Uncompress(i4, i1, i5, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i10;
 if (!((i1 | 0) != 0 & ((i4 | 0) != 0 & (i5 | 0) != 0))) {
  i9 = 6;
  STACKTOP = i10;
  return i9 | 0;
 }
 HEAP32[i8 >> 2] = i2;
 HEAP32[i8 + 4 >> 2] = i3;
 HEAP32[i8 + 12 >> 2] = i1;
 HEAP32[i8 + 16 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i8 + 32 >> 2] = 82;
 i7 = i8 + 36 | 0;
 HEAP32[i7 >> 2] = 31;
 i9 = i8 + 40 | 0;
 HEAP32[i9 >> 2] = i4;
 if (_inflateInit2_(i8, 15) | 0) {
  i9 = 6;
  STACKTOP = i10;
  return i9 | 0;
 }
 i6 = _inflate(i8, 4) | 0;
 L7 : do if ((i6 | 0) == 1) {
  HEAP32[i5 >> 2] = HEAP32[i8 + 20 >> 2];
  i5 = i8 + 28 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  if (i1 | 0) {
   i2 = HEAP32[i7 >> 2] | 0;
   if (i2 | 0) {
    i4 = HEAP32[i1 + 20 >> 2] | 0;
    if (i4) {
     i1 = HEAP32[i4 >> 2] | 0;
     if ((i1 & -2 | 0) == 4) {
      FUNCTION_TABLE_vii[i2 & 63](HEAP32[i9 >> 2] | 0, HEAP32[i4 + 12 >> 2] | 0);
      i1 = HEAP32[i4 >> 2] | 0;
     }
     if ((i1 | 0) == 6) FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 63](HEAP32[i9 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0);
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 28 >> 2] = 0;
     HEAP32[i4 + 32 >> 2] = 0;
     i2 = i4 + 40 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     HEAP32[i4 + 52 >> 2] = i1;
     HEAP32[i4 + 48 >> 2] = i1;
     i3 = HEAP32[i4 + 56 >> 2] | 0;
     if (i3) {
      i1 = FUNCTION_TABLE_iiii[i3 & 127](0, 0, 0) | 0;
      HEAP32[i4 + 60 >> 2] = i1;
      HEAP32[i8 + 48 >> 2] = i1;
      i1 = HEAP32[i2 >> 2] | 0;
     }
     FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 63](HEAP32[i9 >> 2] | 0, i1);
     FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 63](HEAP32[i9 >> 2] | 0, HEAP32[i4 + 36 >> 2] | 0);
     FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 63](HEAP32[i9 >> 2] | 0, i4);
     i2 = HEAP32[i7 >> 2] | 0;
     i1 = HEAP32[i5 >> 2] | 0;
    }
    FUNCTION_TABLE_vii[i2 & 63](HEAP32[i9 >> 2] | 0, i1);
    HEAP32[i5 >> 2] = 0;
   }
  }
 } else {
  i5 = i8 + 28 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  if (i1 | 0) {
   i2 = HEAP32[i7 >> 2] | 0;
   if (i2 | 0) {
    i4 = HEAP32[i1 + 20 >> 2] | 0;
    if (i4) {
     i1 = HEAP32[i4 >> 2] | 0;
     if ((i1 & -2 | 0) == 4) {
      FUNCTION_TABLE_vii[i2 & 63](HEAP32[i9 >> 2] | 0, HEAP32[i4 + 12 >> 2] | 0);
      i1 = HEAP32[i4 >> 2] | 0;
     }
     if ((i1 | 0) == 6) FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 63](HEAP32[i9 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0);
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 28 >> 2] = 0;
     HEAP32[i4 + 32 >> 2] = 0;
     i2 = i4 + 40 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     HEAP32[i4 + 52 >> 2] = i1;
     HEAP32[i4 + 48 >> 2] = i1;
     i3 = HEAP32[i4 + 56 >> 2] | 0;
     if (i3) {
      i1 = FUNCTION_TABLE_iiii[i3 & 127](0, 0, 0) | 0;
      HEAP32[i4 + 60 >> 2] = i1;
      HEAP32[i8 + 48 >> 2] = i1;
      i1 = HEAP32[i2 >> 2] | 0;
     }
     FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 63](HEAP32[i9 >> 2] | 0, i1);
     FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 63](HEAP32[i9 >> 2] | 0, HEAP32[i4 + 36 >> 2] | 0);
     FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 63](HEAP32[i9 >> 2] | 0, i4);
     i2 = HEAP32[i7 >> 2] | 0;
     i1 = HEAP32[i5 >> 2] | 0;
    }
    FUNCTION_TABLE_vii[i2 & 63](HEAP32[i9 >> 2] | 0, i1);
    HEAP32[i5 >> 2] = 0;
   }
  }
  switch (((i6 | 0) == 0 ? -5 : i6) | 0) {
  case -5:
   {
    i9 = 10;
    STACKTOP = i10;
    return i9 | 0;
   }
  case -3:
   {
    i9 = 8;
    STACKTOP = i10;
    return i9 | 0;
   }
  case -4:
   {
    i9 = 64;
    STACKTOP = i10;
    return i9 | 0;
   }
  default:
   break L7;
  }
 } while (0);
 i9 = 0;
 STACKTOP = i10;
 return i9 | 0;
}

function _tt_sbit_decoder_load_byte_aligned(i2, i1, i5, i8, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i7 = HEAP32[i2 + 8 >> 2] | 0;
 i20 = HEAP32[i7 + 8 >> 2] | 0;
 i17 = HEAP32[i7 + 12 >> 2] | 0;
 i9 = HEAP32[i2 + 12 >> 2] | 0;
 i4 = HEAPU16[i9 + 2 >> 1] | 0;
 i9 = HEAP16[i9 >> 1] | 0;
 i3 = i9 & 65535;
 i19 = Math_imul(HEAPU8[i2 + 18 >> 0] | 0, i4) | 0;
 if ((i8 | 0) < 0) {
  i20 = 3;
  return i20 | 0;
 }
 if ((i3 + i6 | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0 | ((i6 | 0) < 0 ? 1 : (i4 + i8 | 0) >>> 0 > (HEAP32[i7 + 4 >> 2] | 0) >>> 0)) {
  i20 = 3;
  return i20 | 0;
 }
 if ((i1 + (Math_imul((i19 + 7 | 0) >>> 3, i3) | 0) | 0) >>> 0 > i5 >>> 0) {
  i20 = 3;
  return i20 | 0;
 }
 i5 = Math_imul(i20, i6) | 0;
 i6 = i8 >>> 3;
 i2 = i17 + (i5 + i6) | 0;
 i18 = i8 & 7;
 i4 = i9 << 16 >> 16 != 0;
 if (!i18) {
  if (!i4) {
   i20 = 0;
   return i20 | 0;
  }
  if (i19 >>> 0 <= 7) {
   i5 = (i19 | 0) == 0;
   i4 = 65280 >>> i19;
   while (1) {
    if (!i5) {
     HEAP8[i2 >> 0] = (HEAPU8[i1 >> 0] | 0) & i4 | (HEAPU8[i2 >> 0] | 0);
     i1 = i1 + 1 | 0;
    }
    if ((i3 | 0) > 1) {
     i3 = i3 + -1 | 0;
     i2 = i2 + i20 | 0;
    } else {
     i1 = 0;
     break;
    }
   }
   return i1 | 0;
  }
  i8 = i19 + -8 | 0;
  i12 = i8 >>> 3;
  i11 = i12 << 3;
  i9 = i12 + 1 | 0;
  i10 = (i19 - i11 | 0) > 8;
  i11 = 65280 >>> (i8 - i11 | 0);
  i8 = i17 + (i6 + i12 + i5 + 1) | 0;
  while (1) {
   i7 = i1 + i12 | 0;
   i4 = i19;
   i5 = i2;
   i6 = i1;
   while (1) {
    HEAP8[i5 >> 0] = HEAP8[i6 >> 0] | HEAP8[i5 >> 0];
    i4 = i4 + -8 | 0;
    if ((i4 | 0) <= 7) break; else {
     i5 = i5 + 1 | 0;
     i6 = i6 + 1 | 0;
    }
   }
   i1 = i1 + i9 | 0;
   if (i10) {
    HEAP8[i8 >> 0] = (HEAPU8[i1 >> 0] | 0) & i11 | (HEAPU8[i8 >> 0] | 0);
    i1 = i7 + 2 | 0;
   }
   if ((i3 | 0) > 1) {
    i3 = i3 + -1 | 0;
    i2 = i2 + i20 | 0;
    i8 = i8 + i20 | 0;
   } else {
    i1 = 0;
    break;
   }
  }
  return i1 | 0;
 }
 if (!i4) {
  i20 = 0;
  return i20 | 0;
 }
 if (i19 >>> 0 <= 7) {
  i6 = (i19 | 0) == 0;
  i7 = (i19 + i18 | 0) >>> 0 > 8;
  i5 = 65280 >>> i19;
  while (1) {
   if (i6) i4 = 0; else {
    i4 = (HEAPU8[i1 >> 0] | 0) & i5;
    i1 = i1 + 1 | 0;
   }
   HEAP8[i2 >> 0] = i4 >>> i18 | (HEAPU8[i2 >> 0] | 0);
   if (i7) {
    i19 = i2 + 1 | 0;
    HEAP8[i19 >> 0] = HEAPU8[i19 >> 0] | 0 | i4 << 8 >>> i18;
   }
   if ((i3 | 0) > 1) {
    i3 = i3 + -1 | 0;
    i2 = i2 + i20 | 0;
   } else {
    i1 = 0;
    break;
   }
  }
  return i1 | 0;
 }
 i15 = i19 + -8 | 0;
 i16 = i15 >>> 3;
 i13 = i16 << 3;
 i10 = i6 + i16 + i5 | 0;
 i12 = i16 + 1 | 0;
 i15 = i15 - i13 | 0;
 i13 = (i19 - i13 | 0) > 8;
 i14 = 65280 >>> i15;
 i15 = (i15 + i18 | 0) > 8;
 i11 = i17 + i10 | 0;
 i10 = i17 + (i10 + 1) | 0;
 while (1) {
  i8 = i1 + i16 | 0;
  i5 = i19;
  i6 = i2;
  i4 = 0;
  i7 = i1;
  i9 = HEAPU8[i2 >> 0] | 0;
  while (1) {
   i17 = HEAPU8[i7 >> 0] | 0 | i4;
   HEAP8[i6 >> 0] = i17 >>> i18 | i9;
   i6 = i6 + 1 | 0;
   i4 = i17 << 8;
   i5 = i5 + -8 | 0;
   i9 = HEAPU8[i6 >> 0] | 0;
   if ((i5 | 0) <= 7) break; else i7 = i7 + 1 | 0;
  }
  i1 = i1 + i12 | 0;
  if (i13) {
   i4 = (HEAPU8[i1 >> 0] | 0) & i14 | i4;
   i1 = i8 + 2 | 0;
  }
  HEAP8[i10 >> 0] = i4 >>> i18 | i9;
  if (i15) {
   i17 = i11 + 2 | 0;
   HEAP8[i17 >> 0] = HEAPU8[i17 >> 0] | 0 | i4 << 8 >>> i18;
  }
  if ((i3 | 0) > 1) {
   i3 = i3 + -1 | 0;
   i2 = i2 + i20 | 0;
   i11 = i11 + i20 | 0;
   i10 = i10 + i20 | 0;
  } else {
   i1 = 0;
   break;
  }
 }
 return i1 | 0;
}

function _FcCompareValueList(i19, i20, i21, i22, i16, i25, i26, i17) {
 i19 = i19 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i16 = i16 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i17 = i17 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, d10 = 0.0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0, i23 = 0, i24 = 0, i27 = 0, i28 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i24 = i27 + 48 | 0;
 i23 = i27 + 32 | 0;
 i2 = i27 + 16 | 0;
 i18 = i27;
 if (!i20) {
  if (i16 | 0) {
   _FcValueCanonicalize(i2, i22 + 8 | 0);
   HEAP32[i16 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  }
  if (!i26) {
   i26 = 1;
   STACKTOP = i27;
   return i26 | 0;
  }
  HEAP32[i26 >> 2] = 0;
  i26 = 1;
  STACKTOP = i27;
  return i26 | 0;
 }
 L11 : do if (!i21) {
  i6 = 0;
  d5 = 1.e+99;
  d1 = 1.e+99;
  d4 = 1.e+99;
 } else {
  i14 = i20 + 4 | 0;
  i15 = (i16 | 0) == 0;
  if (!i22) {
   i2 = i21;
   while (1) {
    i17 = HEAP32[i2 >> 2] | 0;
    i18 = i17;
    i2 = (i18 & 1 | 0) == 0 ? i17 : (i18 & -2) + i2 | 0;
    if (!i2) {
     i6 = 0;
     d5 = 1.e+99;
     d1 = 1.e+99;
     d4 = 1.e+99;
     break L11;
    }
   }
  } else {
   i12 = i21;
   i6 = 0;
   i13 = 0;
   d5 = 1.e+99;
   d1 = 1.e+99;
   d4 = 1.e+99;
  }
  L16 : while (1) {
   i9 = i12 + 8 | 0;
   d10 = +(i13 | 0);
   i11 = i12 + 24 | 0;
   if (i15) {
    i2 = 0;
    i3 = i22;
    while (1) {
     d7 = +FUNCTION_TABLE_dii[HEAP32[i14 >> 2] & 15](i9, i3 + 8 | 0);
     if (d7 < 0.0) break L16;
     d7 = d10 + d7 * 1.0e3;
     i8 = d7 < d4;
     d4 = i8 ? d7 : d4;
     i6 = i8 ? i2 : i6;
     if ((HEAP32[i11 >> 2] | 0) == 1) {
      if (d7 < d1) d1 = d7;
     } else if (d7 < d5) d5 = d7;
     i28 = HEAP32[i3 >> 2] | 0;
     i8 = i28;
     i3 = (i8 & 1 | 0) == 0 ? i28 : (i8 & -2) + i3 | 0;
     if (!i3) break; else i2 = i2 + 1 | 0;
    }
   } else {
    i3 = 0;
    i8 = i22;
    while (1) {
     i2 = i8 + 8 | 0;
     d7 = +FUNCTION_TABLE_dii[HEAP32[i14 >> 2] & 15](i9, i2);
     if (d7 < 0.0) break L16;
     d7 = d10 + d7 * 1.0e3;
     if (d7 < d4) {
      _FcValueCanonicalize(i18, i2);
      HEAP32[i16 >> 2] = HEAP32[i18 >> 2];
      HEAP32[i16 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
      HEAP32[i16 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
      HEAP32[i16 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
      i6 = i3;
      d4 = d7;
     }
     if ((HEAP32[i11 >> 2] | 0) == 1) {
      if (d7 < d1) d1 = d7;
     } else if (d7 < d5) d5 = d7;
     i2 = HEAP32[i8 >> 2] | 0;
     i28 = i2;
     i8 = (i28 & 1 | 0) == 0 ? i2 : (i28 & -2) + i8 | 0;
     if (!i8) break; else i3 = i3 + 1 | 0;
    }
   }
   i11 = HEAP32[i12 >> 2] | 0;
   i28 = i11;
   i12 = (i28 & 1 | 0) == 0 ? i11 : (i28 & -2) + i12 | 0;
   if (!i12) break L11; else i13 = i13 + 1 | 0;
  }
  HEAP32[i17 >> 2] = 2;
  i28 = 0;
  STACKTOP = i27;
  return i28 | 0;
 } while (0);
 if (HEAP32[91917] & 2 | 0) {
  i28 = _FcObjectName(i19) | 0;
  HEAP32[i23 >> 2] = i28;
  HEAPF64[i23 + 8 >> 3] = d4;
  _printf(354588, i23) | 0;
  _FcValueListPrint(i21);
  _printf(354597, i24) | 0;
  _FcValueListPrint(i22);
  _putchar(10) | 0;
 }
 if (i25 | 0) {
  i28 = HEAP32[i20 + 12 >> 2] | 0;
  i3 = HEAP32[i20 + 8 >> 2] | 0;
  i2 = i25 + (i28 << 3) | 0;
  if ((i28 | 0) == (i3 | 0)) d1 = d4; else HEAPF64[i2 >> 3] = d5 + +HEAPF64[i2 >> 3];
  i28 = i25 + (i3 << 3) | 0;
  HEAPF64[i28 >> 3] = d1 + +HEAPF64[i28 >> 3];
 }
 if (!i26) {
  i28 = 1;
  STACKTOP = i27;
  return i28 | 0;
 }
 HEAP32[i26 >> 2] = i6;
 i28 = 1;
 STACKTOP = i27;
 return i28 | 0;
}

function _ps_dimension_end(i3, i1, i16) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i16 = i16 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i17 = i19;
 i2 = HEAP32[i3 + 12 >> 2] | 0;
 if (i2 | 0) HEAP32[(HEAP32[i3 + 20 >> 2] | 0) + (i2 << 4) + -16 + 12 >> 2] = i1;
 i15 = i3 + 24 | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if ((i1 | 0) <= 1) {
  i18 = 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 i14 = i3 + 32 | 0;
 i13 = i1;
 L7 : while (1) {
  i2 = i13 + -2 | 0;
  i13 = i13 + -1 | 0;
  L9 : do if ((i2 | 0) > -1) {
   i12 = HEAP32[i14 >> 2] | 0;
   i6 = HEAP32[i12 + (i13 << 4) + 8 >> 2] | 0;
   i7 = HEAP32[i12 + (i13 << 4) >> 2] | 0;
   L11 : while (1) {
    i3 = HEAP32[i12 + (i2 << 4) + 8 >> 2] | 0;
    i4 = HEAP32[i12 + (i2 << 4) >> 2] | 0;
    i4 = i7 >>> 0 < i4 >>> 0 ? i7 : i4;
    if (i4 >>> 0 > 7) {
     i5 = i6;
     do {
      if ((HEAP8[i3 >> 0] & HEAP8[i5 >> 0]) << 24 >> 24) break L11;
      i5 = i5 + 1 | 0;
      i3 = i3 + 1 | 0;
      i4 = i4 + -8 | 0;
     } while (i4 >>> 0 > 7);
    } else i5 = i6;
    if (i4 | 0) if (HEAP8[i3 >> 0] & HEAP8[i5 >> 0] & 255 & ~(255 >>> i4) | 0) break;
    if ((i2 | 0) > 0) i2 = i2 + -1 | 0; else break L9;
   }
   i9 = i2 >>> 0 > i13 >>> 0;
   i11 = i9 ? i2 : i13;
   i9 = i9 ? i13 : i2;
   if (i9 >>> 0 < i11 >>> 0 & i11 >>> 0 < i1 >>> 0) {
    i10 = i12 + (i11 << 4) | 0;
    i7 = i12 + (i9 << 4) | 0;
    i2 = HEAP32[i7 >> 2] | 0;
    i8 = HEAP32[i10 >> 2] | 0;
    if (i8 | 0) {
     if (i8 >>> 0 > i2 >>> 0) {
      i5 = i12 + (i9 << 4) + 4 | 0;
      i4 = ((HEAP32[i5 >> 2] | 0) + 7 | 0) >>> 3;
      i1 = (i8 + 7 | 0) >>> 3;
      HEAP32[i17 >> 2] = 0;
      if (i1 >>> 0 > i4 >>> 0) {
       i6 = i1 + 7 & 1073741816;
       i3 = i12 + (i9 << 4) + 8 | 0;
       i4 = _ft_mem_realloc(i16, 1, i4, i6, HEAP32[i3 >> 2] | 0, i17) | 0;
       HEAP32[i3 >> 2] = i4;
       i4 = HEAP32[i17 >> 2] | 0;
       if (i4 | 0) break L7;
       HEAP32[i5 >> 2] = i6 << 3;
      } else i3 = i12 + (i9 << 4) + 8 | 0;
      do {
       if ((HEAP32[i7 >> 2] | 0) >>> 0 > i2 >>> 0) {
        i6 = (HEAP32[i3 >> 2] | 0) + (i2 >>> 3) | 0;
        HEAP8[i6 >> 0] = (HEAPU8[i6 >> 0] | 0) & (128 >>> (i2 & 7) ^ 255);
       }
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) != (i8 | 0));
     } else i1 = (i8 + 7 | 0) >>> 3;
     if (i1 | 0) {
      i2 = HEAP32[i12 + (i9 << 4) + 8 >> 2] | 0;
      i3 = HEAP32[i12 + (i11 << 4) + 8 >> 2] | 0;
      while (1) {
       HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | HEAP8[i2 >> 0];
       i1 = i1 + -1 | 0;
       if (!i1) break; else {
        i2 = i2 + 1 | 0;
        i3 = i3 + 1 | 0;
       }
      }
     }
    }
    HEAP32[i10 >> 2] = 0;
    HEAP32[i12 + (i11 << 4) + 12 >> 2] = 0;
    i1 = HEAP32[i15 >> 2] | 0;
    i2 = i1 + ~i11 | 0;
    if ((i2 | 0) > 0) {
     HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
     HEAP32[i17 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
     HEAP32[i17 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
     HEAP32[i17 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
     _memmove(i10 | 0, i10 + 16 | 0, i2 << 4 | 0) | 0;
     i1 = i10 + (i2 << 4) | 0;
     HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
     HEAP32[i1 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
     HEAP32[i1 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
     HEAP32[i1 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
     i1 = HEAP32[i15 >> 2] | 0;
    }
    i1 = i1 + -1 | 0;
    HEAP32[i15 >> 2] = i1;
   }
  } while (0);
  if ((i13 | 0) <= 1) {
   i1 = 0;
   i18 = 33;
   break;
  }
 }
 if ((i18 | 0) == 33) {
  STACKTOP = i19;
  return i1 | 0;
 }
 i18 = i4;
 STACKTOP = i19;
 return i18 | 0;
}

function _addBinding(i12, i13, i9, i14, i10) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i9 = i9 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 i5 = HEAP8[i14 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 i1 = (i2 | 0) != 0;
 if (!(i5 << 24 >> 24 != 0 | i1 ^ 1)) {
  i14 = 28;
  return i14 | 0;
 }
 if (i1) if ((HEAP8[i2 >> 0] | 0) == 120) if ((HEAP8[i2 + 1 >> 0] | 0) == 109) if ((HEAP8[i2 + 2 >> 0] | 0) == 108) {
  i1 = HEAP8[i2 + 3 >> 0] | 0;
  if (i1 << 24 >> 24 == 110) if ((HEAP8[i2 + 4 >> 0] | 0) == 115) if (!(HEAP8[i2 + 5 >> 0] | 0)) {
   i14 = 39;
   return i14 | 0;
  }
  i6 = i1 << 24 >> 24 == 0 & 1;
 } else i6 = 0; else i6 = 0; else i6 = 0; else i6 = 0;
 L15 : do if (!(i5 << 24 >> 24)) {
  i3 = 1;
  i2 = 0;
  i1 = 1;
 } else {
  if (!(i6 << 24 >> 24)) {
   i3 = 1;
   i4 = 1;
   i2 = 0;
   i1 = 1;
  } else {
   i2 = 1;
   i4 = 0;
   i1 = 1;
   i3 = i5;
   while (1) {
    do if (i1) {
     if ((i4 | 0) <= 36) if (i3 << 24 >> 24 == (HEAP8[345508 + i4 >> 0] | 0)) break;
     i2 = 0;
    } else i2 = 0; while (0);
    i4 = i4 + 1 | 0;
    i3 = HEAP8[i14 + i4 >> 0] | 0;
    i1 = i2 << 24 >> 24 != 0;
    if (!(i3 << 24 >> 24)) {
     i3 = 1;
     i2 = i4;
     break L15;
    }
   }
  }
  do {
   do if (i1) {
    if ((i2 | 0) <= 36) if (i5 << 24 >> 24 == (HEAP8[345508 + i2 >> 0] | 0)) break;
    i4 = 0;
   } else i4 = 0; while (0);
   do if (!(i3 << 24 >> 24)) i3 = 0; else {
    if ((i2 | 0) <= 29) if (i5 << 24 >> 24 == (HEAP8[345545 + i2 >> 0] | 0)) break;
    i3 = 0;
   } while (0);
   i2 = i2 + 1 | 0;
   i5 = HEAP8[i14 + i2 >> 0] | 0;
   i1 = i4 << 24 >> 24 != 0;
  } while (i5 << 24 >> 24 != 0);
 } while (0);
 if ((i6 & 255 | 0) != (i1 & (i2 | 0) == 36 & 1 | 0)) {
  i14 = i6 << 24 >> 24 ? 38 : 40;
  return i14 | 0;
 }
 if (i3 << 24 >> 24 != 0 & (i2 | 0) == 29) {
  i14 = 40;
  return i14 | 0;
 }
 i8 = i12 + 472 | 0;
 i7 = ((HEAP8[i8 >> 0] | 0) != 0 & 1) + i2 | 0;
 i1 = i12 + 376 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 do if (!i3) {
  i1 = i12 + 12 | 0;
  i2 = FUNCTION_TABLE_ii[HEAP32[i1 >> 2] & 63](28) | 0;
  if (!i2) {
   i14 = 1;
   return i14 | 0;
  }
  i3 = i7 + 24 | 0;
  i6 = FUNCTION_TABLE_ii[HEAP32[i1 >> 2] & 63](i3) | 0;
  HEAP32[i2 + 16 >> 2] = i6;
  if (i6 | 0) {
   HEAP32[i2 + 24 >> 2] = i3;
   i3 = i2;
   break;
  }
  FUNCTION_TABLE_vi[HEAP32[i12 + 20 >> 2] & 127](i2);
  i14 = 1;
  return i14 | 0;
 } else {
  i2 = i3 + 24 | 0;
  do if ((i7 | 0) > (HEAP32[i2 >> 2] | 0)) {
   i4 = i3 + 16 | 0;
   i5 = i7 + 24 | 0;
   i6 = FUNCTION_TABLE_iii[HEAP32[i12 + 16 >> 2] & 255](HEAP32[i4 >> 2] | 0, i5) | 0;
   if (!i6) {
    i14 = 1;
    return i14 | 0;
   } else {
    HEAP32[i4 >> 2] = i6;
    HEAP32[i2 >> 2] = i5;
    break;
   }
  } while (0);
  HEAP32[i1 >> 2] = HEAP32[i3 + 4 >> 2];
 } while (0);
 HEAP32[i3 + 20 >> 2] = i7;
 i2 = i3 + 16 | 0;
 _memcpy(HEAP32[i2 >> 2] | 0, i14 | 0, i7 | 0) | 0;
 i1 = HEAP8[i8 >> 0] | 0;
 if (i1 << 24 >> 24) HEAP8[(HEAP32[i2 >> 2] | 0) + (i7 + -1) >> 0] = i1;
 HEAP32[i3 >> 2] = i13;
 HEAP32[i3 + 12 >> 2] = i9;
 i2 = i13 + 4 | 0;
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 >> 2];
 if (!(HEAP8[i14 >> 0] | 0)) if (((HEAP32[i12 + 356 >> 2] | 0) + 152 | 0) == (i13 | 0)) i1 = 0; else i11 = 42; else i11 = 42;
 if ((i11 | 0) == 42) i1 = i3;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i10 >> 2] = i3;
 if (!i9) {
  i14 = 0;
  return i14 | 0;
 }
 i1 = HEAP32[i12 + 100 >> 2] | 0;
 if (!i1) {
  i14 = 0;
  return i14 | 0;
 }
 FUNCTION_TABLE_viii[i1 & 31](HEAP32[i12 + 4 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i2 >> 2] | 0 ? i14 : 0);
 i14 = 0;
 return i14 | 0;
}

function _FcCharSetMerge(i21, i3, i1) {
 i21 = i21 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 if (!((i21 | 0) != 0 & (i3 | 0) != 0)) {
  i22 = 0;
  return i22 | 0;
 }
 i2 = (i1 | 0) != 0;
 if ((HEAP32[i21 >> 2] | 0) == -1) {
  if (!i2) {
   i22 = 0;
   return i22 | 0;
  }
  HEAP32[i1 >> 2] = 0;
  i22 = 0;
  return i22 | 0;
 }
 if (i2) {
  i20 = (_FcCharSetIsSubset(i3, i21) | 0) == 0;
  HEAP32[i1 >> 2] = i20 & 1;
  if (!i20) {
   i22 = 1;
   return i22 | 0;
  }
 }
 i15 = i3 + 4 | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if ((i1 | 0) <= 0) {
  i22 = 1;
  return i22 | 0;
 }
 i16 = i21 + 4 | 0;
 i17 = i21;
 i18 = i21 + 12 | 0;
 i19 = i3;
 i20 = i3 + 12 | 0;
 i13 = i3 + 8 | 0;
 i14 = i21 + 8 | 0;
 i2 = 0;
 i12 = 0;
 L18 : while (1) {
  i9 = HEAP32[i16 >> 2] | 0;
  i10 = HEAP16[(HEAP32[i20 >> 2] | 0) + i19 + (i12 << 1) >> 1] | 0;
  i11 = i10 & 65535;
  i7 = (i12 | 0) < (i1 | 0);
  i8 = i9 + -1 | 0;
  i6 = i2;
  while (1) {
   if ((i6 | 0) < (i9 | 0)) i1 = HEAPU16[(HEAP32[i18 >> 2] | 0) + i17 + (i6 << 1) >> 1] | 0; else i1 = -1;
   i3 = i1 & 65535;
   if (i3 >>> 0 >= i11 >>> 0) break;
   i4 = (HEAP32[i18 >> 2] | 0) + i17 | 0;
   i5 = i4;
   L26 : do if (!i4) i1 = -1; else {
    i4 = i8;
    i2 = i6 + 1 | 0;
    while (1) {
     if ((i2 | 0) > (i4 | 0)) break;
     i1 = i4 + i2 >> 1;
     i6 = HEAP16[i5 + (i1 << 1) >> 1] | 0;
     i3 = (i6 & 65535) < (i10 & 65535);
     if (i6 << 16 >> 16 == i10 << 16 >> 16) break L26; else {
      i4 = i3 ? i4 : i1 + -1 | 0;
      i2 = i3 ? i1 + 1 | 0 : i2;
     }
    }
    if ((i4 | 0) < 0) i22 = 20; else if ((i4 | 0) < (i9 | 0)) if ((HEAPU16[i5 + (i4 << 1) >> 1] | 0) < (i10 & 65535)) i22 = 20; else i1 = i4; else i1 = i4;
    if ((i22 | 0) == 20) {
     i22 = 0;
     i1 = i4 + 1 | 0;
    }
    i1 = ~i1;
   } while (0);
   if (i7) i6 = i1 >> 31 ^ i1; else {
    i1 = 1;
    i22 = 28;
    break L18;
   }
  }
  i2 = (HEAP32[i13 >> 2] | 0) + i19 | 0;
  i2 = i2 + (HEAP32[i2 + (i12 << 2) >> 2] | 0) | 0;
  i1 = i2;
  if (i11 >>> 0 < i3 >>> 0) {
   i1 = _FcCharSetFindLeafCreate(i21, i11 << 8) | 0;
   if (!i1) {
    i1 = 0;
    i22 = 28;
    break;
   }
   i11 = i2;
   HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i1 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
   HEAP32[i1 + 20 >> 2] = HEAP32[i11 + 20 >> 2];
   HEAP32[i1 + 24 >> 2] = HEAP32[i11 + 24 >> 2];
   HEAP32[i1 + 28 >> 2] = HEAP32[i11 + 28 >> 2];
  } else {
   i11 = (HEAP32[i14 >> 2] | 0) + i17 | 0;
   i11 = i11 + (HEAP32[i11 + (i6 << 2) >> 2] | 0) | 0;
   HEAP32[i11 >> 2] = HEAP32[i1 >> 2] | HEAP32[i11 >> 2];
   i10 = i11 + 4 | 0;
   HEAP32[i10 >> 2] = HEAP32[i1 + 4 >> 2] | HEAP32[i10 >> 2];
   i10 = i11 + 8 | 0;
   HEAP32[i10 >> 2] = HEAP32[i1 + 8 >> 2] | HEAP32[i10 >> 2];
   i10 = i11 + 12 | 0;
   HEAP32[i10 >> 2] = HEAP32[i1 + 12 >> 2] | HEAP32[i10 >> 2];
   i10 = i11 + 16 | 0;
   HEAP32[i10 >> 2] = HEAP32[i1 + 16 >> 2] | HEAP32[i10 >> 2];
   i10 = i11 + 20 | 0;
   HEAP32[i10 >> 2] = HEAP32[i1 + 20 >> 2] | HEAP32[i10 >> 2];
   i10 = i11 + 24 | 0;
   HEAP32[i10 >> 2] = HEAP32[i1 + 24 >> 2] | HEAP32[i10 >> 2];
   i11 = i11 + 28 | 0;
   HEAP32[i11 >> 2] = HEAP32[i1 + 28 >> 2] | HEAP32[i11 >> 2];
  }
  i12 = i12 + 1 | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i12 | 0) >= (i1 | 0)) {
   i1 = 1;
   i22 = 28;
   break;
  } else i2 = i6 + 1 | 0;
 }
 if ((i22 | 0) == 28) return i1 | 0;
 return 0;
}

function _cff_ps_get_font_info(i2, i7) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i8;
 i5 = HEAP32[i2 + 656 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 if (!i5) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i6 = i5 + 2960 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  i1 = _ft_mem_alloc(HEAP32[i2 + 100 >> 2] | 0, 32, i4) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (i2 | 0) {
   i7 = i2;
   STACKTOP = i8;
   return i7 | 0;
  }
  i2 = HEAP32[i5 + 1324 >> 2] | 0;
  do if ((i2 | 0) == 65535) i2 = 0; else if (i2 >>> 0 > 390) {
   i2 = i2 + -391 | 0;
   if ((HEAP32[i5 + 1312 >> 2] | 0) >>> 0 <= i2 >>> 0) {
    i2 = 0;
    break;
   }
   i2 = HEAP32[(HEAP32[i5 + 1316 >> 2] | 0) + (i2 << 2) >> 2] | 0;
   break;
  } else {
   i3 = HEAP32[i5 + 2956 >> 2] | 0;
   if (!i3) {
    i2 = 0;
    break;
   }
   i2 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2) | 0;
   break;
  } while (0);
  HEAP32[i1 >> 2] = i2;
  i2 = HEAP32[i5 + 1328 >> 2] | 0;
  do if ((i2 | 0) == 65535) i2 = 0; else if (i2 >>> 0 > 390) {
   i2 = i2 + -391 | 0;
   if ((HEAP32[i5 + 1312 >> 2] | 0) >>> 0 <= i2 >>> 0) {
    i2 = 0;
    break;
   }
   i2 = HEAP32[(HEAP32[i5 + 1316 >> 2] | 0) + (i2 << 2) >> 2] | 0;
   break;
  } else {
   i3 = HEAP32[i5 + 2956 >> 2] | 0;
   if (!i3) {
    i2 = 0;
    break;
   }
   i2 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2) | 0;
   break;
  } while (0);
  HEAP32[i1 + 4 >> 2] = i2;
  i2 = HEAP32[i5 + 1336 >> 2] | 0;
  do if ((i2 | 0) == 65535) i2 = 0; else if (i2 >>> 0 > 390) {
   i2 = i2 + -391 | 0;
   if ((HEAP32[i5 + 1312 >> 2] | 0) >>> 0 <= i2 >>> 0) {
    i2 = 0;
    break;
   }
   i2 = HEAP32[(HEAP32[i5 + 1316 >> 2] | 0) + (i2 << 2) >> 2] | 0;
   break;
  } else {
   i3 = HEAP32[i5 + 2956 >> 2] | 0;
   if (!i3) {
    i2 = 0;
    break;
   }
   i2 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2) | 0;
   break;
  } while (0);
  HEAP32[i1 + 8 >> 2] = i2;
  i2 = HEAP32[i5 + 1340 >> 2] | 0;
  do if ((i2 | 0) == 65535) i2 = 0; else if (i2 >>> 0 > 390) {
   i2 = i2 + -391 | 0;
   if ((HEAP32[i5 + 1312 >> 2] | 0) >>> 0 <= i2 >>> 0) {
    i2 = 0;
    break;
   }
   i2 = HEAP32[(HEAP32[i5 + 1316 >> 2] | 0) + (i2 << 2) >> 2] | 0;
   break;
  } else {
   i3 = HEAP32[i5 + 2956 >> 2] | 0;
   if (!i3) {
    i2 = 0;
    break;
   }
   i2 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2) | 0;
   break;
  } while (0);
  HEAP32[i1 + 12 >> 2] = i2;
  i3 = HEAP32[i5 + 1344 >> 2] | 0;
  do if ((i3 | 0) == 65535) i2 = 0; else if (i3 >>> 0 > 390) {
   i2 = i3 + -391 | 0;
   if ((HEAP32[i5 + 1312 >> 2] | 0) >>> 0 <= i2 >>> 0) {
    i2 = 0;
    break;
   }
   i2 = HEAP32[(HEAP32[i5 + 1316 >> 2] | 0) + (i2 << 2) >> 2] | 0;
   break;
  } else {
   i2 = HEAP32[i5 + 2956 >> 2] | 0;
   if (!i2) {
    i2 = 0;
    break;
   }
   i2 = FUNCTION_TABLE_ii[HEAP32[i2 + 20 >> 2] & 63](i3) | 0;
   break;
  } while (0);
  HEAP32[i1 + 16 >> 2] = i2;
  HEAP32[i1 + 20 >> 2] = HEAP32[i5 + 1352 >> 2];
  HEAP8[i1 + 24 >> 0] = HEAP8[i5 + 1348 >> 0] | 0;
  HEAP16[i1 + 26 >> 1] = HEAP32[i5 + 1356 >> 2];
  HEAP16[i1 + 28 >> 1] = HEAP32[i5 + 1360 >> 2];
  HEAP32[i6 >> 2] = i1;
  i2 = HEAP32[i4 >> 2] | 0;
 } else i2 = 0;
 HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i7 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i7 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i7 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i7 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
 i7 = i2;
 STACKTOP = i8;
 return i7 | 0;
}

function _cf2_glyphpath_pushMove(i13, i11, i12) {
 i13 = i13 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i14 = i16;
 HEAP32[i14 + 32 >> 2] = 1;
 i15 = i13 + 11728 | 0;
 i8 = i15;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 i9 = i14;
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i9 + 4 >> 2] = i1;
 i9 = i13 + 8 | 0;
 i1 = i13 + 20 | 0;
 if (!(HEAP8[i1 >> 0] | 0)) {
  i5 = i13 + 11736 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = i13 + 11740 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  i2 = i13 + 11664 | 0;
  if (!(HEAP8[i2 >> 0] | 0)) {
   i2 = 1;
   i1 = i13 + 11667 | 0;
  } else {
   i3 = i13 + 11665 | 0;
   HEAP8[i3 >> 0] = 1;
   _cf2_glyphpath_lineTo(i13, i6, i8);
   i4 = i13 + 11744 | 0;
   if (HEAP8[i4 >> 0] | 0) _cf2_glyphpath_pushPrevElem(i13, i9, i13 + 11704 | 0, HEAP32[i13 + 11712 >> 2] | 0, HEAP32[i13 + 11716 >> 2] | 0, 1);
   i17 = i13 + 11667 | 0;
   HEAP8[i17 >> 0] = 1;
   HEAP8[i2 >> 0] = 0;
   HEAP8[i3 >> 0] = 0;
   HEAP8[i4 >> 0] = 0;
   i2 = (HEAP8[i1 >> 0] | 0) == 0;
   i1 = i17;
  }
  HEAP32[i5 >> 2] = i6;
  HEAP32[i13 + 11720 >> 2] = i6;
  HEAP32[i7 >> 2] = i8;
  HEAP32[i13 + 11724 >> 2] = i8;
  HEAP8[i1 >> 0] = 1;
  i1 = HEAP32[i13 + 11676 >> 2] | 0;
  if (i2) i10 = 9; else if (HEAP8[i1 + 5 >> 0] | 0) i10 = 9;
  if ((i10 | 0) == 9) _cf2_hintmap_build(i9, HEAP32[i13 + 11668 >> 2] | 0, HEAP32[i13 + 11672 >> 2] | 0, i1, HEAP32[i13 + 11680 >> 2] | 0, 0);
  _memcpy(i13 + 3876 | 0, i9 | 0, 3868) | 0;
 }
 i5 = i14 + 8 | 0;
 i6 = _FT_MulFix(HEAP32[i13 + 11644 >> 2] | 0, i11) | 0;
 i6 = (_FT_MulFix(HEAP32[i13 + 11648 >> 2] | 0, i12) | 0) + i6 | 0;
 i1 = HEAP32[i13 + 28 >> 2] | 0;
 if (!i1) i10 = 13; else if (!(HEAP8[i13 + 21 >> 0] | 0)) i10 = 13; else {
  i4 = i13 + 32 | 0;
  i2 = i1 + -1 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  while (1) {
   if (i1 >>> 0 >= i2 >>> 0) break;
   i3 = i1 + 1 | 0;
   if ((HEAP32[i13 + 36 + (i3 * 20 | 0) + 8 >> 2] | 0) > (i12 | 0)) break; else i1 = i3;
  }
  L23 : do if (!i1) i10 = 21; else {
   while (1) {
    i2 = i13 + 36 + (i1 * 20 | 0) + 8 | 0;
    if ((HEAP32[i2 >> 2] | 0) <= (i12 | 0)) break;
    i1 = i1 + -1 | 0;
    if (!i1) {
     i10 = 21;
     break L23;
    }
   }
   HEAP32[i4 >> 2] = i1;
   i2 = HEAP32[i2 >> 2] | 0;
   i10 = 23;
  } while (0);
  if ((i10 | 0) == 21) {
   HEAP32[i4 >> 2] = 0;
   i2 = HEAP32[i13 + 44 >> 2] | 0;
   if ((i2 | 0) > (i12 | 0)) {
    i3 = 0;
    i1 = i13 + 24 | 0;
   } else {
    i1 = 0;
    i10 = 23;
   }
  }
  if ((i10 | 0) == 23) {
   i3 = i1;
   i1 = i13 + 36 + (i1 * 20 | 0) + 16 | 0;
  }
  i1 = _FT_MulFix(i12 - i2 | 0, HEAP32[i1 >> 2] | 0) | 0;
  i1 = (HEAP32[i13 + 36 + (i3 * 20 | 0) + 12 >> 2] | 0) + i1 | 0;
 }
 if ((i10 | 0) == 13) i1 = _FT_MulFix(i12, HEAP32[i13 + 24 >> 2] | 0) | 0;
 i10 = _FT_MulFix(HEAP32[(HEAP32[i13 >> 2] | 0) + 60 >> 2] | 0, i6) | 0;
 i10 = (_FT_MulFix(HEAP32[(HEAP32[i13 >> 2] | 0) + 68 >> 2] | 0, i1) | 0) + i10 | 0;
 HEAP32[i5 >> 2] = i10 + (HEAP32[i13 + 11656 >> 2] | 0);
 i10 = _FT_MulFix(HEAP32[(HEAP32[i13 >> 2] | 0) + 64 >> 2] | 0, i6) | 0;
 i10 = (_FT_MulFix(HEAP32[(HEAP32[i13 >> 2] | 0) + 72 >> 2] | 0, i1) | 0) + i10 | 0;
 HEAP32[i14 + 12 >> 2] = i10 + (HEAP32[i13 + 11660 >> 2] | 0);
 i10 = HEAP32[i13 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[i10 >> 2] & 63](i10, i14);
 i10 = i5;
 i14 = HEAP32[i10 + 4 >> 2] | 0;
 i17 = i15;
 HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i17 + 4 >> 2] = i14;
 i17 = i13 + 11704 | 0;
 HEAP32[i17 >> 2] = i11;
 HEAP32[i17 + 4 >> 2] = i12;
 STACKTOP = i16;
 return;
}

function _FcStrBuildFilename(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i14;
 if (!i1) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i13 = _malloc(16) | 0;
 if (!i13) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 HEAP32[i13 >> 2] = 1;
 i11 = i13 + 4 | 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 i12 = i13 + 12 | 0;
 HEAP32[i12 >> 2] = 0;
 i1 = ___strdup(i1) | 0;
 do if (!i1) i3 = 0; else {
  if (!(__FcStrSetAppend(i13, i1) | 0)) {
   _free(i1);
   i3 = 0;
   break;
  }
  HEAP32[i3 >> 2] = i2;
  while (1) {
   i10 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP32[i3 >> 2] = i10 + 4;
   if (!i1) {
    i4 = 11;
    break;
   }
   i1 = ___strdup(i1) | 0;
   if (!i1) {
    i1 = 0;
    break;
   }
   if (!(__FcStrSetAppend(i13, i1) | 0)) {
    i4 = 10;
    break;
   }
  }
  if ((i4 | 0) == 10) {
   _free(i1);
   i1 = 0;
  } else if ((i4 | 0) == 11) {
   i1 = _malloc(8) | 0;
   if (!i1) {
    i9 = 0;
    i10 = 0;
   } else {
    HEAP32[i1 >> 2] = i13;
    if ((HEAP32[i13 >> 2] | 0) != -1) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
    HEAP32[i1 + 4 >> 2] = 0;
    i9 = i1;
    i10 = i1;
   }
   i8 = i9 + 4 | 0;
   i2 = HEAP32[i8 >> 2] | 0;
   i3 = HEAP32[i9 >> 2] | 0;
   i7 = i3 + 4 | 0;
   i6 = HEAP32[i7 >> 2] | 0;
   L24 : do if ((i2 | 0) < (i6 | 0)) {
    i5 = HEAP32[i3 + 12 >> 2] | 0;
    i1 = 0;
    do {
     i4 = i2;
     i2 = i2 + 1 | 0;
     HEAP32[i8 >> 2] = i2;
     i4 = HEAP32[i5 + (i4 << 2) >> 2] | 0;
     if (!i4) break L24;
     i1 = i1 + 1 + (_strlen(i4) | 0) | 0;
    } while ((i2 | 0) < (i6 | 0));
   } else i1 = 0; while (0);
   HEAP32[i8 >> 2] = 0;
   i1 = _malloc(i1 + 1 | 0) | 0;
   if (i1) {
    L32 : do if ((HEAP32[i7 >> 2] | 0) > 0) {
     i2 = i1;
     i4 = 0;
     do {
      i3 = HEAP32[i3 + 12 >> 2] | 0;
      HEAP32[i8 >> 2] = i4 + 1;
      i3 = HEAP32[i3 + (i4 << 2) >> 2] | 0;
      if (!i3) break L32;
      if ((i2 | 0) == (i1 | 0)) i2 = i1; else {
       HEAP8[i2 >> 0] = 47;
       i2 = i2 + 1 | 0;
      }
      i4 = _strlen(i3) | 0;
      _memcpy(i2 | 0, i3 | 0, i4 | 0) | 0;
      i2 = i2 + i4 | 0;
      i4 = HEAP32[i8 >> 2] | 0;
      i3 = HEAP32[i9 >> 2] | 0;
     } while ((i4 | 0) < (HEAP32[i3 + 4 >> 2] | 0));
    } else i2 = i1; while (0);
    HEAP8[i2 >> 0] = 0;
    i3 = HEAP32[i9 >> 2] | 0;
   }
   if ((HEAP32[i3 >> 2] | 0) != -1) {
    i9 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = i9 + -1;
    if ((i9 | 0) == 1) {
     i5 = i3 + 4 | 0;
     i6 = i3 + 12 | 0;
     i2 = HEAP32[i6 >> 2] | 0;
     if ((HEAP32[i5 >> 2] | 0) > 0) {
      i4 = 0;
      do {
       _free(HEAP32[i2 + (i4 << 2) >> 2] | 0);
       i4 = i4 + 1 | 0;
       i2 = HEAP32[i6 >> 2] | 0;
      } while ((i4 | 0) < (HEAP32[i5 >> 2] | 0));
     }
     if (i2 | 0) _free(i2);
     _free(i3);
    }
   }
   _free(i10);
  }
  i3 = i1;
 } while (0);
 if ((HEAP32[i13 >> 2] | 0) == -1) {
  i13 = i3;
  STACKTOP = i14;
  return i13 | 0;
 }
 i10 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i10 + -1;
 if ((i10 | 0) != 1) {
  i13 = i3;
  STACKTOP = i14;
  return i13 | 0;
 }
 i1 = HEAP32[i12 >> 2] | 0;
 if ((HEAP32[i11 >> 2] | 0) > 0) {
  i2 = 0;
  do {
   _free(HEAP32[i1 + (i2 << 2) >> 2] | 0);
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i12 >> 2] | 0;
  } while ((i2 | 0) < (HEAP32[i11 >> 2] | 0));
 }
 if (i1 | 0) _free(i1);
 _free(i13);
 i13 = i3;
 STACKTOP = i14;
 return i13 | 0;
}

function _reportComment(i14, i10, i3, i9) {
 i14 = i14 | 0;
 i10 = i10 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i15 + 4 | 0;
 i8 = i15;
 i5 = i14 + 68 | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  i7 = i14 + 80 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  if (!i1) {
   i14 = 1;
   STACKTOP = i15;
   return i14 | 0;
  }
  HEAP32[i11 >> 2] = i3;
  if (!(HEAP8[i10 + 72 >> 0] | 0)) {
   if ((HEAP32[i14 + 144 >> 2] | 0) == (i10 | 0)) {
    i2 = i14 + 292 | 0;
    i3 = i14 + 288 | 0;
   } else {
    i3 = HEAP32[i14 + 300 >> 2] | 0;
    i2 = i3 + 4 | 0;
   }
   i4 = i14 + 44 | 0;
   i5 = i10 + 60 | 0;
   i6 = i14 + 48 | 0;
   i1 = i14 + 4 | 0;
   do {
    HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
    FUNCTION_TABLE_viiiii[HEAP32[i5 >> 2] & 31](i10, i11, i9, i8, HEAP32[i6 >> 2] | 0);
    HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
    i14 = HEAP32[i4 >> 2] | 0;
    FUNCTION_TABLE_viii[HEAP32[i7 >> 2] & 31](HEAP32[i1 >> 2] | 0, i14, (HEAP32[i8 >> 2] | 0) - i14 | 0);
    HEAP32[i3 >> 2] = HEAP32[i11 >> 2];
   } while ((HEAP32[i11 >> 2] | 0) != (i9 | 0));
  } else FUNCTION_TABLE_viii[i1 & 31](HEAP32[i14 + 4 >> 2] | 0, i3, i9 - i3 | 0);
  i14 = 1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i13 = i14 + 416 | 0;
 i7 = HEAP32[i10 + 68 >> 2] | 0;
 i2 = i9 + (Math_imul(i7, -3) | 0) | 0;
 HEAP32[i11 >> 2] = i3 + (i7 << 2);
 i7 = i14 + 428 | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  if ((_poolGrow(i13) | 0) << 24 >> 24) i12 = 13;
 } else i12 = 13;
 L20 : do if ((i12 | 0) == 13) {
  i1 = i10 + 60 | 0;
  i8 = i14 + 424 | 0;
  while (1) {
   FUNCTION_TABLE_viiiii[HEAP32[i1 >> 2] & 31](i10, i11, i2, i7, HEAP32[i8 >> 2] | 0);
   if ((HEAP32[i11 >> 2] | 0) == (i2 | 0)) break;
   if (!((_poolGrow(i13) | 0) << 24 >> 24)) break L20;
  }
  i6 = i14 + 432 | 0;
  if (!(HEAP32[i6 >> 2] | 0)) {
   i14 = 0;
   STACKTOP = i15;
   return i14 | 0;
  }
  i1 = HEAP32[i7 >> 2] | 0;
  do if ((i1 | 0) == (HEAP32[i8 >> 2] | 0)) if (!((_poolGrow(i13) | 0) << 24 >> 24)) {
   i14 = 0;
   STACKTOP = i15;
   return i14 | 0;
  } else {
   i1 = HEAP32[i7 >> 2] | 0;
   break;
  } while (0);
  HEAP32[i7 >> 2] = i1 + 1;
  HEAP8[i1 >> 0] = 0;
  i4 = HEAP32[i6 >> 2] | 0;
  if (!i4) {
   i14 = 0;
   STACKTOP = i15;
   return i14 | 0;
  } else i1 = i4;
  L37 : while (1) {
   switch (HEAP8[i1 >> 0] | 0) {
   case 0:
    break L37;
   case 13:
    {
     i3 = i1;
     i2 = 13;
     i12 = 24;
     break L37;
    }
   default:
    {}
   }
   i1 = i1 + 1 | 0;
  }
  if ((i12 | 0) == 24) {
   while (1) {
    i12 = 0;
    if (i2 << 24 >> 24 == 13) {
     HEAP8[i3 >> 0] = 10;
     i11 = i1 + 1 | 0;
     i1 = (HEAP8[i11 >> 0] | 0) == 10 ? i1 + 2 | 0 : i11;
    } else {
     HEAP8[i3 >> 0] = i2;
     i1 = i1 + 1 | 0;
    }
    i3 = i3 + 1 | 0;
    i2 = HEAP8[i1 >> 0] | 0;
    if (!(i2 << 24 >> 24)) break; else i12 = 24;
   }
   HEAP8[i3 >> 0] = 0;
  }
  FUNCTION_TABLE_vii[HEAP32[i5 >> 2] & 63](HEAP32[i14 + 4 >> 2] | 0, i4);
  i4 = i14 + 420 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i2) i12 = 32; else if (i1 | 0) while (1) {
   i3 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = i2;
   if (!i3) {
    i12 = 32;
    break;
   } else {
    i2 = i1;
    i1 = i3;
   }
  }
  if ((i12 | 0) == 32) HEAP32[i4 >> 2] = i1;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
  i14 = 1;
  STACKTOP = i15;
  return i14 | 0;
 } while (0);
 i14 = 0;
 STACKTOP = i15;
 return i14 | 0;
}

function _FcCharSetEqual(i7, i5) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 if ((i7 | 0) == (i5 | 0)) {
  i16 = 1;
  return i16 | 0;
 }
 if (!((i7 | 0) != 0 & (i5 | 0) != 0)) {
  i16 = 0;
  return i16 | 0;
 }
 i15 = i7;
 i13 = (HEAP32[i7 + 12 >> 2] | 0) + i15 | 0;
 i16 = i13;
 i14 = HEAP32[i7 + 4 >> 2] | 0;
 if (!i13) {
  i1 = -1;
  i8 = 8;
 } else {
  i1 = i14;
  do {
   if ((i1 | 0) < 1) {
    i8 = 6;
    break;
   }
   i1 = i1 + -1 >> 1;
  } while ((HEAP16[i16 + (i1 << 1) >> 1] | 0) != 0);
  if ((i8 | 0) == 6) i1 = ~i1;
  if ((i1 | 0) < 0) i8 = 8; else {
   i2 = 0;
   i8 = 10;
  }
 }
 if ((i8 | 0) == 8) {
  i2 = ~i1;
  if ((i14 | 0) == (i2 | 0)) {
   i6 = 0;
   i1 = 0;
   i2 = -1;
  } else {
   i1 = i2;
   i2 = HEAPU16[i16 + (i2 << 1) >> 1] << 8;
   i8 = 10;
  }
 }
 if ((i8 | 0) == 10) {
  i6 = (HEAP32[i7 + 8 >> 2] | 0) + i15 | 0;
  i6 = i6 + (HEAP32[i6 + (i1 << 2) >> 2] | 0) | 0;
 }
 i11 = i5;
 i10 = (HEAP32[i5 + 12 >> 2] | 0) + i11 | 0;
 i12 = i10;
 i13 = HEAP32[i5 + 4 >> 2] | 0;
 if (!i10) {
  i3 = -1;
  i8 = 16;
 } else {
  i3 = i13;
  do {
   if ((i3 | 0) < 1) {
    i8 = 14;
    break;
   }
   i3 = i3 + -1 >> 1;
  } while ((HEAP16[i12 + (i3 << 1) >> 1] | 0) != 0);
  if ((i8 | 0) == 14) i3 = ~i3;
  if ((i3 | 0) < 0) i8 = 16; else {
   i4 = 0;
   i8 = 19;
  }
 }
 do if ((i8 | 0) == 16) {
  i4 = ~i3;
  if ((i13 | 0) == (i4 | 0)) {
   i10 = i5 + 8 | 0;
   i5 = 0;
   i3 = 0;
   i4 = -1;
   break;
  } else {
   i3 = i4;
   i4 = HEAPU16[i12 + (i4 << 1) >> 1] << 8;
   i8 = 19;
   break;
  }
 } while (0);
 if ((i8 | 0) == 19) {
  i10 = i5 + 8 | 0;
  i5 = (HEAP32[i10 >> 2] | 0) + i11 | 0;
  i5 = i5 + (HEAP32[i5 + (i3 << 2) >> 2] | 0) | 0;
 }
 i9 = i7 + 8 | 0;
 L35 : while (1) {
  i8 = i3 + 1 | 0;
  i7 = (i8 | 0) < (i13 | 0);
  i3 = i6;
  while (1) {
   if (!((i3 | 0) != 0 & (i5 | 0) != 0)) {
    i8 = 29;
    break L35;
   }
   if ((i2 | 0) != (i4 | 0)) {
    i1 = 0;
    i8 = 30;
    break L35;
   }
   if ((HEAP32[i3 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
    i1 = 0;
    i8 = 30;
    break L35;
   }
   if ((HEAP32[i3 + 4 >> 2] | 0) != (HEAP32[i5 + 4 >> 2] | 0)) {
    i1 = 0;
    i8 = 30;
    break L35;
   }
   if ((HEAP32[i3 + 8 >> 2] | 0) != (HEAP32[i5 + 8 >> 2] | 0)) {
    i1 = 0;
    i8 = 30;
    break L35;
   }
   if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i5 + 12 >> 2] | 0)) {
    i1 = 0;
    i8 = 30;
    break L35;
   }
   if ((HEAP32[i3 + 16 >> 2] | 0) != (HEAP32[i5 + 16 >> 2] | 0)) {
    i1 = 0;
    i8 = 30;
    break L35;
   }
   if ((HEAP32[i3 + 20 >> 2] | 0) != (HEAP32[i5 + 20 >> 2] | 0)) {
    i1 = 0;
    i8 = 30;
    break L35;
   }
   if ((HEAP32[i3 + 24 >> 2] | 0) != (HEAP32[i5 + 24 >> 2] | 0)) {
    i1 = 0;
    i8 = 30;
    break L35;
   }
   if ((HEAP32[i3 + 28 >> 2] | 0) != (HEAP32[i5 + 28 >> 2] | 0)) {
    i1 = 0;
    i8 = 30;
    break L35;
   }
   i2 = i1 + 1 | 0;
   if ((i2 | 0) < (i14 | 0)) {
    i3 = (HEAP32[i9 >> 2] | 0) + i15 | 0;
    i3 = i3 + (HEAP32[i3 + (i2 << 2) >> 2] | 0) | 0;
    i1 = i2;
    i2 = HEAPU16[i16 + (i2 << 1) >> 1] << 8;
   } else {
    i3 = 0;
    i2 = -1;
   }
   if (i7) break; else {
    i5 = 0;
    i4 = -1;
   }
  }
  i5 = (HEAP32[i10 >> 2] | 0) + i11 | 0;
  i5 = i5 + (HEAP32[i5 + (i8 << 2) >> 2] | 0) | 0;
  i6 = i3;
  i3 = i8;
  i4 = HEAPU16[i12 + (i8 << 1) >> 1] << 8;
 }
 if ((i8 | 0) == 29) {
  i16 = (i3 | 0) == (i5 | 0) & 1;
  return i16 | 0;
 } else if ((i8 | 0) == 30) return i1 | 0;
 return 0;
}

function _gray_cubic_to(i2, i3, i1, i20) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i20 = i20 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0;
 i17 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 >> 2] << 2;
 HEAP32[i20 + 232 >> 2] = i4;
 i1 = i17 << 2;
 HEAP32[i20 + 236 >> 2] = i1;
 HEAP32[i20 + 240 >> 2] = HEAP32[i3 >> 2] << 2;
 i17 = HEAP32[i3 + 4 >> 2] << 2;
 HEAP32[i20 + 244 >> 2] = i17;
 HEAP32[i20 + 248 >> 2] = HEAP32[i2 >> 2] << 2;
 i18 = HEAP32[i2 + 4 >> 2] << 2;
 HEAP32[i20 + 252 >> 2] = i18;
 HEAP32[i20 + 256 >> 2] = HEAP32[i20 + 220 >> 2];
 i3 = HEAP32[i20 + 224 >> 2] | 0;
 HEAP32[i20 + 260 >> 2] = i3;
 i19 = (i17 | 0) < (i1 | 0) ? i17 : i1;
 i2 = (i17 | 0) > (i1 | 0) ? i17 : i1;
 i19 = (i18 | 0) < (i19 | 0) ? i18 : i19;
 i2 = (i18 | 0) > (i2 | 0) ? i18 : i2;
 if ((((i3 | 0) < (i19 | 0) ? i3 : i19) >> 8 | 0) < (HEAP32[i20 + 176 >> 2] | 0)) if ((((i3 | 0) > (i2 | 0) ? i3 : i2) >> 8 | 0) < (HEAP32[i20 + 172 >> 2] | 0)) {
  i3 = 0;
  i2 = i4;
  i21 = 9;
 } else i3 = 0; else {
  i3 = 0;
  i2 = i4;
  i21 = 9;
 }
 while (1) {
  if ((i21 | 0) == 9) {
   i21 = 0;
   _gray_render_line(i20, i2, i1);
   if (!i3) break;
   i3 = i3 + -3 | 0;
  }
  i16 = i20 + 232 + (i3 << 3) | 0;
  i15 = i3 + 3 | 0;
  i17 = HEAP32[i20 + 232 + (i15 << 3) >> 2] | 0;
  i2 = HEAP32[i16 >> 2] | 0;
  i12 = i17 - i2 | 0;
  i18 = i16 + 28 | 0;
  i19 = HEAP32[i18 >> 2] | 0;
  i1 = HEAP32[i20 + 232 + (i3 << 3) + 4 >> 2] | 0;
  i13 = i19 - i1 | 0;
  i14 = (i12 | 0) < 0 ? 0 - i12 | 0 : i12;
  i4 = (i13 | 0) < 0 ? 0 - i13 | 0 : i13;
  i11 = (i14 | 0) > (i4 | 0);
  i4 = ((i11 ? i4 : i14) * 3 >> 3) + (i11 ? i14 : i4) | 0;
  if ((i4 | 0) > 32767) {
   i4 = i16 + 8 | 0;
   i3 = i16 + 12 | 0;
   i6 = i4;
   i5 = i3;
   i4 = HEAP32[i4 >> 2] | 0;
   i3 = HEAP32[i3 >> 2] | 0;
  } else {
   i7 = i4 * 42 | 0;
   i6 = i16 + 8 | 0;
   i4 = HEAP32[i6 >> 2] | 0;
   i8 = i4 - i2 | 0;
   i5 = i16 + 12 | 0;
   i14 = HEAP32[i5 >> 2] | 0;
   i9 = i14 - i1 | 0;
   i11 = (Math_imul(i8, i13) | 0) - (Math_imul(i9, i12) | 0) | 0;
   if ((((i11 | 0) < 0 ? 0 - i11 | 0 : i11) | 0) > (i7 | 0)) i3 = i14; else {
    i10 = (HEAP32[i16 + 16 >> 2] | 0) - i2 | 0;
    i11 = (HEAP32[i16 + 20 >> 2] | 0) - i1 | 0;
    i22 = (Math_imul(i10, i13) | 0) - (Math_imul(i11, i12) | 0) | 0;
    if ((((i22 | 0) < 0 ? 0 - i22 | 0 : i22) | 0) > (i7 | 0)) i3 = i14; else if (((Math_imul(i9 - i13 | 0, i9) | 0) + (Math_imul(i8 - i12 | 0, i8) | 0) | 0) > 0 ? 1 : ((Math_imul(i11 - i13 | 0, i11) | 0) + (Math_imul(i10 - i12 | 0, i10) | 0) | 0) > 0) i3 = i14; else {
     i21 = 9;
     continue;
    }
   }
  }
  HEAP32[i16 + 48 >> 2] = i17;
  i13 = i16 + 16 | 0;
  i12 = HEAP32[i13 >> 2] | 0;
  i14 = (i4 + i2 | 0) / 2 | 0;
  HEAP32[i6 >> 2] = i14;
  i22 = (i12 + i17 | 0) / 2 | 0;
  HEAP32[i16 + 40 >> 2] = i22;
  i17 = (i12 + i4 | 0) / 2 | 0;
  i14 = (i17 + i14 | 0) / 2 | 0;
  HEAP32[i13 >> 2] = i14;
  i17 = (i22 + i17 | 0) / 2 | 0;
  HEAP32[i16 + 32 >> 2] = i17;
  HEAP32[i16 + 24 >> 2] = (i14 + i17 | 0) / 2 | 0;
  HEAP32[i16 + 52 >> 2] = i19;
  i17 = i16 + 20 | 0;
  i14 = HEAP32[i17 >> 2] | 0;
  i22 = (i3 + i1 | 0) / 2 | 0;
  HEAP32[i5 >> 2] = i22;
  i19 = (i14 + i19 | 0) / 2 | 0;
  HEAP32[i16 + 44 >> 2] = i19;
  i3 = (i14 + i3 | 0) / 2 | 0;
  i22 = (i3 + i22 | 0) / 2 | 0;
  HEAP32[i17 >> 2] = i22;
  i3 = (i19 + i3 | 0) / 2 | 0;
  HEAP32[i16 + 36 >> 2] = i3;
  HEAP32[i18 >> 2] = (i22 + i3 | 0) / 2 | 0;
  i3 = i15;
 }
 return 0;
}

function _fmod(d12, d1) {
 d12 = +d12;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 HEAPF64[tempDoublePtr >> 3] = d12;
 i6 = HEAP32[tempDoublePtr >> 2] | 0;
 i8 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i10 = HEAP32[tempDoublePtr >> 2] | 0;
 i11 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i3 = _bitshift64Lshr(i6 | 0, i8 | 0, 52) | 0;
 i3 = i3 & 2047;
 i9 = _bitshift64Lshr(i10 | 0, i11 | 0, 52) | 0;
 i9 = i9 & 2047;
 i13 = i8 & -2147483648;
 i5 = _bitshift64Shl(i10 | 0, i11 | 0, 1) | 0;
 i7 = tempRet0;
 L1 : do if ((i5 | 0) == 0 & (i7 | 0) == 0) i14 = 3; else {
  i4 = ___DOUBLE_BITS_552(d1) | 0;
  i2 = tempRet0 & 2147483647;
  if ((i3 | 0) == 2047 | (i2 >>> 0 > 2146435072 | (i2 | 0) == 2146435072 & i4 >>> 0 > 0)) i14 = 3; else {
   i2 = _bitshift64Shl(i6 | 0, i8 | 0, 1) | 0;
   i4 = tempRet0;
   if (!(i4 >>> 0 > i7 >>> 0 | (i4 | 0) == (i7 | 0) & i2 >>> 0 > i5 >>> 0)) return +((i2 | 0) == (i5 | 0) & (i4 | 0) == (i7 | 0) ? d12 * 0.0 : d12);
   if (!i3) {
    i2 = _bitshift64Shl(i6 | 0, i8 | 0, 12) | 0;
    i4 = tempRet0;
    if ((i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295) {
     i3 = 0;
     do {
      i3 = i3 + -1 | 0;
      i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
      i4 = tempRet0;
     } while ((i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295);
    } else i3 = 0;
    i6 = _bitshift64Shl(i6 | 0, i8 | 0, 1 - i3 | 0) | 0;
    i5 = tempRet0;
   } else i5 = i8 & 1048575 | 1048576;
   if (!i9) {
    i4 = _bitshift64Shl(i10 | 0, i11 | 0, 12) | 0;
    i7 = tempRet0;
    if ((i7 | 0) > -1 | (i7 | 0) == -1 & i4 >>> 0 > 4294967295) {
     i2 = 0;
     do {
      i2 = i2 + -1 | 0;
      i4 = _bitshift64Shl(i4 | 0, i7 | 0, 1) | 0;
      i7 = tempRet0;
     } while ((i7 | 0) > -1 | (i7 | 0) == -1 & i4 >>> 0 > 4294967295);
    } else i2 = 0;
    i10 = _bitshift64Shl(i10 | 0, i11 | 0, 1 - i2 | 0) | 0;
    i9 = i2;
    i8 = tempRet0;
   } else i8 = i11 & 1048575 | 1048576;
   i4 = _i64Subtract(i6 | 0, i5 | 0, i10 | 0, i8 | 0) | 0;
   i2 = tempRet0;
   i7 = (i2 | 0) > -1 | (i2 | 0) == -1 & i4 >>> 0 > 4294967295;
   L23 : do if ((i3 | 0) > (i9 | 0)) {
    while (1) {
     if (i7) {
      if ((i4 | 0) == 0 & (i2 | 0) == 0) break;
     } else {
      i4 = i6;
      i2 = i5;
     }
     i6 = _bitshift64Shl(i4 | 0, i2 | 0, 1) | 0;
     i5 = tempRet0;
     i3 = i3 + -1 | 0;
     i4 = _i64Subtract(i6 | 0, i5 | 0, i10 | 0, i8 | 0) | 0;
     i2 = tempRet0;
     i7 = (i2 | 0) > -1 | (i2 | 0) == -1 & i4 >>> 0 > 4294967295;
     if ((i3 | 0) <= (i9 | 0)) break L23;
    }
    d1 = d12 * 0.0;
    break L1;
   } while (0);
   if (i7) {
    if ((i4 | 0) == 0 & (i2 | 0) == 0) {
     d1 = d12 * 0.0;
     break;
    }
   } else {
    i2 = i5;
    i4 = i6;
   }
   if (i2 >>> 0 < 1048576 | (i2 | 0) == 1048576 & i4 >>> 0 < 0) do {
    i4 = _bitshift64Shl(i4 | 0, i2 | 0, 1) | 0;
    i2 = tempRet0;
    i3 = i3 + -1 | 0;
   } while (i2 >>> 0 < 1048576 | (i2 | 0) == 1048576 & i4 >>> 0 < 0);
   if ((i3 | 0) > 0) {
    i11 = _i64Add(i4 | 0, i2 | 0, 0, -1048576) | 0;
    i2 = tempRet0;
    i3 = _bitshift64Shl(i3 | 0, 0, 52) | 0;
    i2 = i2 | tempRet0;
    i3 = i11 | i3;
   } else {
    i3 = _bitshift64Lshr(i4 | 0, i2 | 0, 1 - i3 | 0) | 0;
    i2 = tempRet0;
   }
   HEAP32[tempDoublePtr >> 2] = i3;
   HEAP32[tempDoublePtr + 4 >> 2] = i2 | i13;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((i14 | 0) == 3) {
  d1 = d12 * d1;
  d1 = d1 / d1;
 }
 return +d1;
}

function __fribidi__shadow_run_list__internal__(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 if ((HEAP32[i4 + 16 >> 2] | 0) == 128) i1 = 1; else {
  i14 = (i1 | 0) == 0;
  i5 = 0;
  i1 = i4;
  L3 : while (1) {
   while (1) {
    i7 = HEAP32[i1 + 12 >> 2] | 0;
    if (i7 | 0) {
     i13 = HEAP32[i1 + 8 >> 2] | 0;
     if ((i13 | 0) >= (i5 | 0)) break;
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if ((HEAP32[i1 + 16 >> 2] | 0) == 128) {
     i1 = 1;
     break L3;
    }
   }
   while (1) {
    i10 = i3 + 4 | 0;
    i4 = HEAP32[i10 >> 2] | 0;
    i5 = HEAP32[i4 + 16 >> 2] | 0;
    if ((i5 | 0) == 128) break;
    if ((HEAP32[i4 + 8 >> 2] | 0) > (i13 | 0)) break; else i3 = i4;
   }
   i12 = i7 + i13 | 0;
   L14 : do if ((i5 | 0) == 128) i11 = i3; else {
    i5 = i3;
    i6 = i4;
    while (1) {
     if ((HEAP32[i6 + 8 >> 2] | 0) >= (i12 | 0)) {
      i11 = i5;
      i4 = i6;
      break L14;
     }
     i4 = HEAP32[i6 + 4 >> 2] | 0;
     if ((HEAP32[i4 + 16 >> 2] | 0) == 128) {
      i11 = i6;
      break;
     } else {
      i5 = i6;
      i6 = i4;
     }
    }
   } while (0);
   if (!i14) {
    i9 = i11 + 12 | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i7;
   }
   i8 = i3 + 8 | 0;
   i6 = HEAP32[i8 >> 2] | 0;
   i9 = i3 + 12 | 0;
   i5 = HEAP32[i9 >> 2] | 0;
   i7 = i5 + i6 | 0;
   do if ((i3 | 0) == (i11 | 0)) {
    if ((i7 | 0) > (i12 | 0)) {
     i4 = _malloc(24) | 0;
     if (!i4) {
      i1 = 0;
      break L3;
     }
     i6 = i4 + 20 | 0;
     HEAP8[i6 >> 0] = 0;
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 4 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = 0;
     HEAP32[i4 + 12 >> 2] = 0;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i5 >> 2] = i4;
     HEAP32[i4 + 4 >> 2] = i5;
     HEAP8[i6 >> 0] = HEAP8[i3 + 20 >> 0] | 0;
     HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
     HEAP32[i4 + 12 >> 2] = (HEAP32[i8 >> 2] | 0) - i12 + (HEAP32[i9 >> 2] | 0);
     HEAP32[i4 + 8 >> 2] = i12;
     i6 = HEAP32[i8 >> 2] | 0;
     i5 = HEAP32[i9 >> 2] | 0;
    }
    if ((i5 + i6 | 0) >= (i13 | 0)) if ((i13 | 0) > (i6 | 0)) {
     HEAP32[i9 >> 2] = i13 - i6;
     break;
    } else {
     i12 = HEAP32[i3 >> 2] | 0;
     _free(i3);
     i3 = i12;
     break;
    }
   } else {
    do if ((i7 | 0) >= (i13 | 0)) if ((i13 | 0) > (i6 | 0)) {
     HEAP32[i9 >> 2] = i13 - i6;
     break;
    } else {
     i3 = HEAP32[i3 >> 2] | 0;
     break;
    } while (0);
    i5 = i11 + 8 | 0;
    i6 = i11 + 12 | 0;
    i7 = (HEAP32[i6 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0;
    if ((i7 | 0) > (i12 | 0)) {
     HEAP32[i6 >> 2] = i7 - i12;
     HEAP32[i5 >> 2] = i12;
     i4 = i11;
    }
    i5 = HEAP32[i3 + 4 >> 2] | 0;
    if ((i5 | 0) != (i4 | 0)) do {
     i12 = i5;
     i5 = HEAP32[i5 + 4 >> 2] | 0;
     _free(i12);
    } while ((i5 | 0) != (i4 | 0));
   } while (0);
   i10 = HEAP32[i1 >> 2] | 0;
   i11 = i1 + 4 | 0;
   i12 = i10 + 4 | 0;
   HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
   HEAP32[HEAP32[i11 >> 2] >> 2] = i10;
   HEAP32[i3 + 4 >> 2] = i1;
   HEAP32[i1 >> 2] = i3;
   HEAP32[i11 >> 2] = i4;
   HEAP32[i4 >> 2] = i1;
   i1 = HEAP32[i12 >> 2] | 0;
   if ((HEAP32[i1 + 16 >> 2] | 0) == 128) {
    i1 = 1;
    break;
   } else i5 = i13;
  }
  if (!i2) {
   i14 = i1;
   return i14 | 0;
  }
 }
 HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] = 0;
 do {
  i14 = i2;
  i2 = HEAP32[i2 + 4 >> 2] | 0;
  _free(i14);
 } while ((i2 | 0) != 0);
 return i1 | 0;
}

function _XmlInitUnknownEncoding(i10, i11, i12, i13) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i14 = 0;
 i1 = 0;
 do {
  HEAP8[i10 + i1 >> 0] = HEAP8[26636 + i1 >> 0] | 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 368);
 i1 = 0;
 L3 : do {
  switch (HEAP8[26712 + i1 >> 0] | 0) {
  case 0:
  case 28:
   break;
  default:
   if ((HEAP32[i11 + (i1 << 2) >> 2] | 0) != (i1 | 0)) {
    i9 = 0;
    i14 = 32;
    break L3;
   }
  }
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) < 128);
 if ((i14 | 0) == 32) return i9 | 0;
 i7 = i10 + 76 | 0;
 i8 = i10 + 376 | 0;
 i5 = i10 + 888 | 0;
 i4 = 0;
 L11 : while (1) {
  i6 = HEAP32[i11 + (i4 << 2) >> 2] | 0;
  do if ((i6 | 0) == -1) {
   HEAP8[i7 + i4 >> 0] = 1;
   HEAP16[i8 + (i4 << 1) >> 1] = -1;
   HEAP8[i5 + (i4 << 2) >> 0] = 1;
   HEAP8[i5 + (i4 << 2) + 1 >> 0] = 0;
  } else {
   if ((i6 | 0) < 0) {
    if ((i6 | 0) < -4) {
     i9 = 0;
     i14 = 32;
     break L11;
    }
    HEAP8[i7 + i4 >> 0] = 3 - i6;
    HEAP8[i5 + (i4 << 2) >> 0] = 0;
    HEAP16[i8 + (i4 << 1) >> 1] = 0;
    break;
   }
   if ((i6 | 0) < 128) {
    i1 = HEAP8[26712 + i6 >> 0] | 0;
    switch (i1 << 24 >> 24) {
    case 0:
    case 28:
     break;
    default:
     if ((i6 | 0) != (i4 | 0)) {
      i9 = 0;
      i14 = 32;
      break L11;
     }
    }
    HEAP8[i7 + i4 >> 0] = i1;
    HEAP8[i5 + (i4 << 2) >> 0] = 1;
    HEAP8[i5 + (i4 << 2) + 1 >> 0] = i6;
    HEAP16[i8 + (i4 << 1) >> 1] = (i6 | 0) == 0 ? -1 : i6 & 65535;
    break;
   }
   i3 = i6 >>> 8;
   switch (i3 & 16777215 | 0) {
   case 223:
   case 222:
   case 221:
   case 220:
   case 219:
   case 218:
   case 217:
   case 216:
    {
     i14 = 19;
     break;
    }
   case 0:
    {
     if (!(HEAP8[26712 + i6 >> 0] | 0)) i14 = 19;
     break;
    }
   case 255:
    {
     if ((i6 | 1 | 0) == 65535) i14 = 19;
     break;
    }
   default:
    {}
   }
   if ((i14 | 0) == 19) {
    i14 = 0;
    HEAP8[i7 + i4 >> 0] = 0;
    HEAP16[i8 + (i4 << 1) >> 1] = -1;
    HEAP8[i5 + (i4 << 2) >> 0] = 1;
    HEAP8[i5 + (i4 << 2) + 1 >> 0] = 0;
    break;
   }
   if ((i6 | 0) > 65535) {
    i9 = 0;
    i14 = 32;
    break L11;
   }
   i1 = i6 >>> 5 & 7;
   i2 = 1 << (i6 & 31);
   if (!(HEAP32[25356 + ((HEAPU8[344737 + i3 >> 0] << 3 | i1) << 2) >> 2] & i2)) HEAP8[i7 + i4 >> 0] = HEAP32[25356 + ((HEAPU8[344993 + i3 >> 0] << 3 | i1) << 2) >> 2] & i2 | 0 ? 26 : 28; else HEAP8[i7 + i4 >> 0] = 22;
   i3 = i5 + (i4 << 2) + 1 | 0;
   if ((i6 | 0) < 2048) {
    HEAP8[i3 >> 0] = i6 >>> 6 | 192;
    i1 = 2;
    i2 = 1;
   } else {
    HEAP8[i3 >> 0] = i6 >>> 12 | 224;
    HEAP8[i5 + (i4 << 2) + 2 >> 0] = i6 >>> 6 & 63 | 128;
    i1 = 3;
    i2 = 2;
   }
   HEAP8[i3 + i2 >> 0] = i6 & 63 | 128;
   HEAP8[i5 + (i4 << 2) >> 0] = i1;
   HEAP16[i8 + (i4 << 1) >> 1] = i6;
  } while (0);
  i4 = i4 + 1 | 0;
  if ((i4 | 0) >= 256) {
   i14 = 29;
   break;
  }
 }
 if ((i14 | 0) == 29) {
  HEAP32[i10 + 372 >> 2] = i13;
  HEAP32[i10 + 368 >> 2] = i12;
  if (i12 | 0) {
   HEAP32[i10 + 332 >> 2] = 195;
   HEAP32[i10 + 336 >> 2] = 195;
   HEAP32[i10 + 340 >> 2] = 195;
   HEAP32[i10 + 344 >> 2] = 196;
   HEAP32[i10 + 348 >> 2] = 196;
   HEAP32[i10 + 352 >> 2] = 196;
   HEAP32[i10 + 356 >> 2] = 197;
   HEAP32[i10 + 360 >> 2] = 197;
   HEAP32[i10 + 364 >> 2] = 197;
  }
  HEAP32[i10 + 60 >> 2] = 23;
  HEAP32[i10 + 64 >> 2] = 24;
  i14 = i10;
  return i14 | 0;
 } else if ((i14 | 0) == 32) return i9 | 0;
 return 0;
}

function _ft_black_render(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 17408 | 0;
 i11 = i12 + 16384 | 0;
 i5 = i12;
 i6 = HEAP32[i4 + 4 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 if (!i1) {
  i11 = 96;
  STACKTOP = i12;
  return i11 | 0;
 }
 if (!i6) {
  i11 = 20;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = HEAP16[i6 + 2 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i2 = HEAP16[i6 >> 1] | 0;
 if (i2 << 16 >> 16 < 1) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i3 = HEAP32[i6 + 12 >> 2] | 0;
 if (!i3) {
  i11 = 20;
  STACKTOP = i12;
  return i11 | 0;
 }
 if (!(HEAP32[i6 + 4 >> 2] | 0)) {
  i11 = 20;
  STACKTOP = i12;
  return i11 | 0;
 }
 if ((i1 << 16 >> 16 | 0) != ((HEAP16[i3 + ((i2 << 16 >> 16) + -1 << 1) >> 1] | 0) + 1 | 0)) {
  i11 = 20;
  STACKTOP = i12;
  return i11 | 0;
 }
 if (HEAP32[i4 + 8 >> 2] & 3 | 0) {
  i11 = 19;
  STACKTOP = i12;
  return i11 | 0;
 }
 if (!i7) {
  i11 = 20;
  STACKTOP = i12;
  return i11 | 0;
 }
 if (!(HEAP32[i7 + 4 >> 2] | 0)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 if (!(HEAP32[i7 >> 2] | 0)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 if (!(HEAP32[i7 + 12 >> 2] | 0)) {
  i11 = 20;
  STACKTOP = i12;
  return i11 | 0;
 }
 i3 = i11 + 128 | 0;
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
 i3 = i11 + 104 | 0;
 HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
 HEAP32[i11 + 28 >> 2] = i5;
 HEAP32[i11 + 32 >> 2] = i5 + 16384;
 i3 = HEAP32[i11 + 144 >> 2] | 0;
 i9 = (i3 & 256 | 0) == 0;
 i10 = i9 ? 6 : 12;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i11 + 16 >> 2] = i9 ? 32 : 256;
 HEAP32[i11 + 20 >> 2] = i9 ? 2 : 30;
 i9 = 1 << i10;
 HEAP32[i11 + 4 >> 2] = i9;
 HEAP32[i11 + 8 >> 2] = i9 >>> 1;
 i10 = i10 + -6 | 0;
 HEAP32[i11 + 12 >> 2] = i10;
 HEAP32[i11 + 24 >> 2] = i10;
 if (!(i3 & 8)) {
  i1 = i11 + 176 | 0;
  i2 = (i3 & 16) >>> 2;
  HEAP8[i1 >> 0] = i2;
  if (!(i3 & 32)) HEAP8[i1 >> 0] = i2 | 1;
 } else HEAP8[i11 + 176 >> 0] = 2;
 i10 = i11 + 177 | 0;
 HEAP8[i10 >> 0] = i3 >>> 9 & 1 ^ 1;
 i1 = i11 + 160 | 0;
 HEAP32[i1 >> 2] = 16;
 i2 = i11 + 164 | 0;
 HEAP32[i2 >> 2] = 3;
 i3 = i11 + 168 | 0;
 HEAP32[i3 >> 2] = 4;
 i4 = i11 + 172 | 0;
 HEAP32[i4 >> 2] = 66;
 i5 = i11 + 1020 | 0;
 HEAP32[i5 >> 2] = 0;
 i6 = i11 + 956 | 0;
 HEAP16[i6 >> 1] = 0;
 i7 = i11 + 958 | 0;
 HEAP16[i7 >> 1] = (HEAP32[i11 + 104 >> 2] | 0) + 65535;
 i8 = i11 + 108 | 0;
 HEAP16[i11 + 56 >> 1] = HEAP32[i8 >> 2];
 HEAP32[i11 + 60 >> 2] = HEAP32[i11 + 116 >> 2];
 i9 = _Render_Single_Pass(i11, 0) | 0;
 if (i9 | 0) {
  i11 = i9;
  STACKTOP = i12;
  return i11 | 0;
 }
 if (HEAP8[i10 >> 0] | 0) if ((HEAP8[i11 + 176 >> 0] | 0) != 2) {
  HEAP32[i1 >> 2] = 17;
  HEAP32[i2 >> 2] = 5;
  HEAP32[i3 >> 2] = 6;
  HEAP32[i4 >> 2] = 67;
  HEAP32[i5 >> 2] = 0;
  HEAP16[i6 >> 1] = 0;
  HEAP16[i7 >> 1] = (HEAP32[i8 >> 2] | 0) + 65535;
  i1 = _Render_Single_Pass(i11, 1) | 0;
  if (i1 | 0) {
   i11 = i1;
   STACKTOP = i12;
   return i11 | 0;
  }
 }
 i11 = 0;
 STACKTOP = i12;
 return i11 | 0;
}

function _sfnt_get_ps_name(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i12;
 i11 = i9 + 664 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if (i1 | 0) {
  i11 = i1;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = HEAP16[i9 + 340 >> 1] | 0;
 do if (!(i1 << 16 >> 16)) i1 = 0; else {
  i5 = HEAP32[i9 + 356 >> 2] | 0;
  i4 = i1 & 65535;
  i3 = 0;
  i2 = -1;
  i1 = -1;
  while (1) {
   L8 : do if ((HEAP16[i5 + (i3 * 20 | 0) + 6 >> 1] | 0) == 6) if (!(HEAP16[i5 + (i3 * 20 | 0) + 8 >> 1] | 0)) i8 = i1; else switch (HEAP16[i5 + (i3 * 20 | 0) >> 1] | 0) {
   case 3:
    {
     if ((HEAP16[i5 + (i3 * 20 | 0) + 2 >> 1] | 0) != 1) {
      i8 = i1;
      break L8;
     }
     i8 = i1;
     i2 = (HEAP16[i5 + (i3 * 20 | 0) + 4 >> 1] | 0) == 1033 ? i3 : i2;
     break L8;
    }
   case 1:
    {
     if (HEAP16[i5 + (i3 * 20 | 0) + 2 >> 1] | 0) {
      i8 = i1;
      break L8;
     }
     i8 = (HEAP16[i5 + (i3 * 20 | 0) + 4 >> 1] | 0) == 0 ? i3 : i1;
     break L8;
    }
   default:
    {
     i8 = i1;
     break L8;
    }
   } else i8 = i1; while (0);
   i3 = i3 + 1 | 0;
   if ((i3 | 0) >= (i4 | 0)) break; else i1 = i8;
  }
  if ((i2 | 0) == -1) {
   if ((i8 | 0) == -1) {
    i1 = 0;
    break;
   }
   i4 = HEAP32[i9 + 100 >> 2] | 0;
   i5 = HEAP32[i9 + 356 >> 2] | 0;
   i6 = i5 + (i8 * 20 | 0) + 8 | 0;
   i7 = HEAPU16[i6 >> 1] | 0;
   HEAP32[i10 >> 2] = 0;
   i1 = _ft_mem_alloc(i4, i7 + 1 | 0, i10) | 0;
   do if (!(HEAP32[i10 >> 2] | 0)) {
    i2 = HEAP32[i9 + 360 >> 2] | 0;
    i3 = i5 + (i8 * 20 | 0) + 12 | 0;
    i9 = _FT_Stream_Seek(i2, HEAP32[i3 >> 2] | 0) | 0;
    HEAP32[i10 >> 2] = i9;
    if (!i9) {
     i9 = _FT_Stream_Read(i2, i1, i7) | 0;
     HEAP32[i10 >> 2] = i9;
     if (!i9) {
      HEAP8[i1 + i7 >> 0] = 0;
      break;
     }
    }
    HEAP32[i3 >> 2] = 0;
    HEAP16[i6 >> 1] = 0;
    i10 = i5 + (i8 * 20 | 0) + 16 | 0;
    _ft_mem_free(i4, HEAP32[i10 >> 2] | 0);
    HEAP32[i10 >> 2] = 0;
    _ft_mem_free(i4, i1);
    i1 = 0;
   } while (0);
   break;
  }
  i5 = HEAP32[i9 + 100 >> 2] | 0;
  i6 = HEAP32[i9 + 356 >> 2] | 0;
  i7 = i6 + (i2 * 20 | 0) + 8 | 0;
  i1 = HEAP16[i7 >> 1] | 0;
  i8 = (i1 & 65535) >>> 1;
  i4 = i8 & 65535;
  HEAP32[i10 >> 2] = 0;
  i1 = _ft_mem_alloc(i5, (i1 & 65535) + 1 | 0, i10) | 0;
  do if (!(HEAP32[i10 >> 2] | 0)) {
   i9 = HEAP32[i9 + 360 >> 2] | 0;
   i3 = i6 + (i2 * 20 | 0) + 12 | 0;
   i13 = _FT_Stream_Seek(i9, HEAP32[i3 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = i13;
   if (!i13) {
    i13 = _FT_Stream_EnterFrame(i9, HEAPU16[i7 >> 1] | 0) | 0;
    HEAP32[i10 >> 2] = i13;
    if (!i13) {
     if (!(i8 << 16 >> 16)) i2 = i1; else {
      i5 = HEAP32[i9 + 32 >> 2] | 0;
      i2 = i1;
      while (1) {
       if (!(HEAP8[i5 >> 0] | 0)) {
        i3 = HEAP8[i5 + 1 >> 0] | 0;
        if (i3 << 24 >> 24 > 31) {
         HEAP8[i2 >> 0] = i3;
         i2 = i2 + 1 | 0;
        }
       }
       i4 = i4 + -1 | 0;
       if (!i4) break; else i5 = i5 + 2 | 0;
      }
     }
     HEAP8[i2 >> 0] = 0;
     _FT_Stream_ExitFrame(i9);
     break;
    }
   }
   _ft_mem_free(i5, i1);
   HEAP16[i7 >> 1] = 0;
   HEAP32[i3 >> 2] = 0;
   i1 = i6 + (i2 * 20 | 0) + 16 | 0;
   _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   i1 = 0;
  } while (0);
 } while (0);
 HEAP32[i11 >> 2] = i1;
 i13 = i1;
 STACKTOP = i12;
 return i13 | 0;
}

function _bdf_free_font(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 if (!i6) return;
 i7 = HEAP32[i6 + 278664 >> 2] | 0;
 _ft_mem_free(i7, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 i5 = i6 + 128 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1 | 0) {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  i3 = i1 + 12 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i4) {
   i2 = 0;
   while (1) {
    _ft_mem_free(i7, HEAP32[i1 >> 2] | 0);
    HEAP32[i1 >> 2] = 0;
    i2 = i2 + 1 | 0;
    if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 4 | 0;
   }
   i1 = HEAP32[i3 >> 2] | 0;
  }
  _ft_mem_free(i7, i1);
  HEAP32[i3 >> 2] = 0;
  _ft_mem_free(i7, HEAP32[i5 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
 }
 i4 = i6 + 84 | 0;
 _ft_mem_free(i7, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i6 + 72 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 i5 = i6 + 80 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i2) {
  i3 = 0;
  do {
   if ((HEAP32[i1 + (i3 << 4) + 4 >> 2] | 0) == 1) {
    _ft_mem_free(i7, HEAP32[i1 + (i3 << 4) + 12 >> 2] | 0);
    HEAP32[(HEAP32[i5 >> 2] | 0) + (i3 << 4) + 12 >> 2] = 0;
    i1 = HEAP32[i5 >> 2] | 0;
    i2 = HEAP32[i4 >> 2] | 0;
   }
   i3 = i3 + 1 | 0;
  } while (i3 >>> 0 < i2 >>> 0);
 }
 _ft_mem_free(i7, i1);
 HEAP32[i5 >> 2] = 0;
 i5 = i6 + 56 | 0;
 i3 = i6 + 52 | 0;
 if (HEAP32[i3 >> 2] | 0) {
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = 0;
  while (1) {
   _ft_mem_free(i7, HEAP32[i1 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   i4 = i1 + 24 | 0;
   _ft_mem_free(i7, HEAP32[i4 >> 2] | 0);
   HEAP32[i4 >> 2] = 0;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= (HEAP32[i3 >> 2] | 0) >>> 0) break; else i1 = i1 + 36 | 0;
  }
 }
 i3 = i6 + 68 | 0;
 i4 = i6 + 64 | 0;
 if (HEAP32[i4 >> 2] | 0) {
  i1 = HEAP32[i3 >> 2] | 0;
  i2 = 0;
  while (1) {
   _ft_mem_free(i7, HEAP32[i1 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   i8 = i1 + 24 | 0;
   _ft_mem_free(i7, HEAP32[i8 >> 2] | 0);
   HEAP32[i8 >> 2] = 0;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= (HEAP32[i4 >> 2] | 0) >>> 0) break; else i1 = i1 + 36 | 0;
  }
 }
 _ft_mem_free(i7, HEAP32[i5 >> 2] | 0);
 HEAP32[i5 >> 2] = 0;
 _ft_mem_free(i7, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 i4 = i6 + 104 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = i6 + 112 | 0;
 if (HEAP32[i3 >> 2] | 0) {
  i2 = 0;
  while (1) {
   _ft_mem_free(i7, HEAP32[i1 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   i8 = i1 + 24 | 0;
   _ft_mem_free(i7, HEAP32[i8 >> 2] | 0);
   HEAP32[i8 >> 2] = 0;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= (HEAP32[i3 >> 2] | 0) >>> 0) break; else i1 = i1 + 36 | 0;
  }
  i1 = HEAP32[i4 >> 2] | 0;
 }
 _ft_mem_free(i7, i1);
 HEAP32[i4 >> 2] = 0;
 i3 = HEAP32[i6 + 278680 >> 2] | 0;
 i4 = i6 + 278688 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i3) {
  i2 = 0;
  while (1) {
   _ft_mem_free(i7, HEAP32[i1 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   i2 = i2 + 1 | 0;
   if ((i2 | 0) == (i3 | 0)) break; else i1 = i1 + 4 | 0;
  }
  i1 = HEAP32[i4 >> 2] | 0;
 }
 _ft_mem_free(i7, i1);
 HEAP32[i4 >> 2] = 0;
 i4 = i6 + 278668 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = i6 + 278672 | 0;
 if (HEAP32[i3 >> 2] | 0) {
  i2 = 0;
  while (1) {
   _ft_mem_free(i7, HEAP32[i1 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   if ((HEAP32[i1 + 4 >> 2] | 0) == 1) {
    i8 = i1 + 12 | 0;
    _ft_mem_free(i7, HEAP32[i8 >> 2] | 0);
    HEAP32[i8 >> 2] = 0;
   }
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= (HEAP32[i3 >> 2] | 0) >>> 0) break; else i1 = i1 + 16 | 0;
  }
  i1 = HEAP32[i4 >> 2] | 0;
 }
 _ft_mem_free(i7, i1);
 HEAP32[i4 >> 2] = 0;
 return;
}

function _ass_synth_blur(i14, i1, i12, d2, i11, i5) {
 i14 = i14 | 0;
 i1 = i1 | 0;
 i12 = i12 | 0;
 d2 = +d2;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i15 = 0;
 i4 = (i5 | 0) != 0;
 i13 = (i1 | 0) != 0;
 i10 = i13 | i4 ^ 1;
 if (!((i11 | 0) != 0 | i4 & (i13 ^ 1))) return;
 d2 = d2 * d2 / 5.545177444479562;
 if (d2 > .001) {
  if (i4) _ass_gaussian_blur(i14, i5, d2) | 0;
  if (i10) _ass_gaussian_blur(i14, i11, d2) | 0;
 }
 if (!i12) return;
 if (i4) i1 = HEAP32[i5 + 16 >> 2] << 2; else i1 = 0;
 if (i10) i3 = HEAP32[i11 + 16 >> 2] << 2; else i3 = 0;
 i1 = i1 >>> 0 > i3 >>> 0 ? i1 : i3;
 if (!i1) return;
 i13 = _ass_aligned_alloc(32, i1, 0) | 0;
 if (!i13) return;
 if (i4) {
  i7 = HEAP32[i5 + 8 >> 2] | 0;
  i8 = HEAP32[i5 + 12 >> 2] | 0;
  i9 = HEAP32[i5 + 16 >> 2] | 0;
  i6 = HEAP32[i5 + 20 >> 2] | 0;
  if ((i7 | 0) != 0 & (i8 | 0) != 0) {
   if (i12 >>> 0 > 1) {
    i5 = (i7 | 0) > 0 & (i8 | 0) > 0;
    if (i5) {
     i1 = 0;
     do {
      i4 = Math_imul(i1, i9) | 0;
      i3 = 0;
      do {
       i15 = i6 + (i3 + i4) | 0;
       HEAP8[i15 >> 0] = (((HEAPU8[i15 >> 0] | 0) >>> 1) + 1 | 0) >>> 1;
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) != (i7 | 0));
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != (i8 | 0));
    }
    i1 = i12 + -1 | 0;
    if (i1 | 0) {
     i3 = i9 << 1;
     i4 = i14 + 32 | 0;
     do {
      _memset(i13 | 0, 0, i3 | 0) | 0;
      FUNCTION_TABLE_viiiii[HEAP32[i4 >> 2] & 31](i6, i7, i8, i9, i13);
      i1 = i1 + -1 | 0;
     } while ((i1 | 0) != 0);
    }
    if (i5) {
     i3 = 0;
     do {
      i4 = Math_imul(i3, i9) | 0;
      i1 = 0;
      do {
       i15 = i6 + (i1 + i4) | 0;
       i5 = HEAP8[i15 >> 0] | 0;
       HEAP8[i15 >> 0] = ((i5 & 255) << 2) - ((i5 & 255) > 32 & 1);
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) != (i7 | 0));
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) != (i8 | 0));
    }
   }
   _memset(i13 | 0, 0, i9 << 1 | 0) | 0;
   FUNCTION_TABLE_viiiii[HEAP32[i14 + 32 >> 2] & 31](i6, i7, i8, i9, i13);
  }
 }
 if (i10) {
  i7 = HEAP32[i11 + 8 >> 2] | 0;
  i8 = HEAP32[i11 + 12 >> 2] | 0;
  i9 = HEAP32[i11 + 16 >> 2] | 0;
  i6 = HEAP32[i11 + 20 >> 2] | 0;
  if ((i7 | 0) != 0 & (i8 | 0) != 0) {
   if (i12 >>> 0 > 1) {
    i5 = (i7 | 0) > 0 & (i8 | 0) > 0;
    if (i5) {
     i1 = 0;
     do {
      i4 = Math_imul(i1, i9) | 0;
      i3 = 0;
      do {
       i15 = i6 + (i3 + i4) | 0;
       HEAP8[i15 >> 0] = (((HEAPU8[i15 >> 0] | 0) >>> 1) + 1 | 0) >>> 1;
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) != (i7 | 0));
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != (i8 | 0));
    }
    i1 = i12 + -1 | 0;
    if (i1 | 0) {
     i3 = i9 << 1;
     i4 = i14 + 32 | 0;
     do {
      _memset(i13 | 0, 0, i3 | 0) | 0;
      FUNCTION_TABLE_viiiii[HEAP32[i4 >> 2] & 31](i6, i7, i8, i9, i13);
      i1 = i1 + -1 | 0;
     } while ((i1 | 0) != 0);
    }
    if (i5) {
     i3 = 0;
     do {
      i4 = Math_imul(i3, i9) | 0;
      i1 = 0;
      do {
       i15 = i6 + (i1 + i4) | 0;
       i12 = HEAP8[i15 >> 0] | 0;
       HEAP8[i15 >> 0] = ((i12 & 255) << 2) - ((i12 & 255) > 32 & 1);
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) != (i7 | 0));
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) != (i8 | 0));
    }
   }
   _memset(i13 | 0, 0, i9 << 1 | 0) | 0;
   FUNCTION_TABLE_viiiii[HEAP32[i14 + 32 >> 2] & 31](i6, i7, i8, i9, i13);
  }
 }
 _ass_aligned_free(i13);
 return;
}

function _ps_unicode_value(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i2 = HEAP8[i6 >> 0] | 0;
 L1 : do if (i2 << 24 >> 24 == 117) {
  i5 = HEAP8[i6 + 1 >> 0] | 0;
  L3 : do if (i5 << 24 >> 24 == 110) if ((HEAP8[i6 + 2 >> 0] | 0) == 105) {
   i1 = HEAPU8[i6 + 3 >> 0] | 0;
   i3 = i1 + -48 | 0;
   i1 = (i1 + -65 | 0) >>> 0 > 5 ? 16 : i1 + -55 | 0;
   if (i3 >>> 0 > 9) {
    if (i1 >>> 0 > 15) break;
   } else i1 = i3;
   i3 = HEAPU8[i6 + 4 >> 0] | 0;
   i4 = i3 + -48 | 0;
   i3 = (i3 + -65 | 0) >>> 0 > 5 ? 16 : i3 + -55 | 0;
   if (i4 >>> 0 > 9) if (i3 >>> 0 > 15) break; else i3 = i3 + (i1 << 4) | 0; else i3 = i4 + (i1 << 4) | 0;
   i1 = HEAPU8[i6 + 5 >> 0] | 0;
   i4 = i1 + -48 | 0;
   i1 = (i1 + -65 | 0) >>> 0 > 5 ? 16 : i1 + -55 | 0;
   if (i4 >>> 0 > 9) if (i1 >>> 0 > 15) break; else i3 = i1 + (i3 << 4) | 0; else i3 = i4 + (i3 << 4) | 0;
   i1 = HEAPU8[i6 + 6 >> 0] | 0;
   i4 = i1 + -48 | 0;
   i1 = (i1 + -65 | 0) >>> 0 > 5 ? 16 : i1 + -55 | 0;
   if (i4 >>> 0 > 9) if (i1 >>> 0 > 15) break; else i1 = i1 + (i3 << 4) | 0; else i1 = i4 + (i3 << 4) | 0;
   switch (HEAP8[i6 + 7 >> 0] | 0) {
   case 46:
    break;
   case 0:
    {
     i7 = i1;
     return i7 | 0;
    }
   default:
    break L3;
   }
   i7 = i1 | -2147483648;
   return i7 | 0;
  } while (0);
  i1 = i5 & 255;
  i3 = i1 + -48 | 0;
  i1 = (i1 + -65 | 0) >>> 0 > 5 ? 16 : i1 + -55 | 0;
  if (i3 >>> 0 > 9) {
   if (i1 >>> 0 > 15) {
    i1 = i6;
    break;
   }
  } else i1 = i3;
  i3 = HEAPU8[i6 + 2 >> 0] | 0;
  i4 = i3 + -48 | 0;
  i3 = (i3 + -65 | 0) >>> 0 > 5 ? 16 : i3 + -55 | 0;
  if (i4 >>> 0 > 9) if (i3 >>> 0 > 15) {
   i1 = i6;
   break;
  } else i1 = i3 + (i1 << 4) | 0; else i1 = i4 + (i1 << 4) | 0;
  i3 = HEAPU8[i6 + 3 >> 0] | 0;
  i4 = i3 + -48 | 0;
  i3 = (i3 + -65 | 0) >>> 0 > 5 ? 16 : i3 + -55 | 0;
  if (i4 >>> 0 > 9) if (i3 >>> 0 > 15) {
   i1 = i6;
   break;
  } else i1 = i3 + (i1 << 4) | 0; else i1 = i4 + (i1 << 4) | 0;
  i3 = HEAPU8[i6 + 4 >> 0] | 0;
  i4 = i3 + -48 | 0;
  i3 = (i3 + -65 | 0) >>> 0 > 5 ? 16 : i3 + -55 | 0;
  if (i4 >>> 0 > 9) if (i3 >>> 0 > 15) {
   i1 = i6;
   break;
  } else i1 = i3 + (i1 << 4) | 0; else i1 = i4 + (i1 << 4) | 0;
  i3 = i6 + 5 | 0;
  i4 = HEAPU8[i3 >> 0] | 0;
  i5 = i4 + -48 | 0;
  i4 = (i4 + -65 | 0) >>> 0 > 5 ? 16 : i4 + -55 | 0;
  if (i5 >>> 0 > 9) {
   if (i4 >>> 0 <= 15) {
    i1 = i4 + (i1 << 4) | 0;
    i7 = 32;
   }
  } else {
   i1 = i5 + (i1 << 4) | 0;
   i7 = 32;
  }
  do if ((i7 | 0) == 32) {
   i3 = i6 + 6 | 0;
   i4 = HEAPU8[i3 >> 0] | 0;
   i5 = i4 + -48 | 0;
   i4 = (i4 + -65 | 0) >>> 0 > 5 ? 16 : i4 + -55 | 0;
   if (i5 >>> 0 > 9) if (i4 >>> 0 > 15) break; else i1 = i4 + (i1 << 4) | 0; else i1 = i5 + (i1 << 4) | 0;
   i3 = i6 + 7 | 0;
  } while (0);
  switch (HEAP8[i3 >> 0] | 0) {
  case 46:
   break;
  case 0:
   {
    i7 = i1;
    return i7 | 0;
   }
  default:
   {
    i1 = i6;
    break L1;
   }
  }
  i7 = i1 | -2147483648;
  return i7 | 0;
 } else i1 = i6; while (0);
 L55 : while (1) {
  switch (i2 << 24 >> 24) {
  case 0:
   break L55;
  case 46:
   {
    if (i1 >>> 0 > i6 >>> 0) {
     i7 = 17;
     break L55;
    }
    break;
   }
  default:
   {}
  }
  i2 = i1 + 1 | 0;
  i1 = i2;
  i2 = HEAP8[i2 >> 0] | 0;
 }
 if ((i7 | 0) == 17) if (!i1) i1 = 0; else {
  i7 = _ft_get_adobe_glyph_index(i6, i1) | 0 | -2147483648;
  return i7 | 0;
 }
 i7 = _ft_get_adobe_glyph_index(i6, i1) | 0;
 return i7 | 0;
}

function _normal_cdataSectionTok(i7, i3, i9, i10) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 if ((i3 | 0) == (i9 | 0)) {
  i10 = -4;
  return i10 | 0;
 }
 i8 = i7 + 76 | 0;
 L4 : do switch (HEAP8[i8 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0) {
 case 4:
  {
   i1 = i3 + 1 | 0;
   if ((i1 | 0) == (i9 | 0)) {
    i10 = -1;
    return i10 | 0;
   }
   if ((HEAP8[i1 >> 0] | 0) == 93) {
    i2 = i3 + 2 | 0;
    if ((i2 | 0) == (i9 | 0)) {
     i10 = -1;
     return i10 | 0;
    }
    if ((HEAP8[i2 >> 0] | 0) == 62) {
     HEAP32[i10 >> 2] = i3 + 3;
     i10 = 40;
     return i10 | 0;
    }
   }
   break;
  }
 case 9:
  {
   i1 = i3 + 1 | 0;
   if ((i1 | 0) == (i9 | 0)) {
    i10 = -1;
    return i10 | 0;
   }
   HEAP32[i10 >> 2] = (HEAP8[i8 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) == 10 ? i3 + 2 | 0 : i1;
   i10 = 7;
   return i10 | 0;
  }
 case 10:
  {
   HEAP32[i10 >> 2] = i3 + 1;
   i10 = 7;
   return i10 | 0;
  }
 case 5:
  {
   if ((i9 - i3 | 0) < 2) {
    i10 = -2;
    return i10 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i7 + 356 >> 2] & 255](i7, i3) | 0)) {
    i1 = i3 + 2 | 0;
    break L4;
   }
   HEAP32[i10 >> 2] = i3;
   i10 = 0;
   return i10 | 0;
  }
 case 6:
  {
   if ((i9 - i3 | 0) < 3) {
    i10 = -2;
    return i10 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i7 + 360 >> 2] & 255](i7, i3) | 0)) {
    i1 = i3 + 3 | 0;
    break L4;
   }
   HEAP32[i10 >> 2] = i3;
   i10 = 0;
   return i10 | 0;
  }
 case 7:
  {
   if ((i9 - i3 | 0) < 4) {
    i10 = -2;
    return i10 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i7 + 364 >> 2] & 255](i7, i3) | 0)) {
    i1 = i3 + 4 | 0;
    break L4;
   }
   HEAP32[i10 >> 2] = i3;
   i10 = 0;
   return i10 | 0;
  }
 case 8:
 case 1:
 case 0:
  {
   HEAP32[i10 >> 2] = i3;
   i10 = 0;
   return i10 | 0;
  }
 default:
  i1 = i3 + 1 | 0;
 } while (0);
 L50 : do if ((i1 | 0) != (i9 | 0)) {
  i3 = i9;
  i4 = i7 + 356 | 0;
  i5 = i7 + 360 | 0;
  i6 = i7 + 364 | 0;
  i2 = i1;
  L52 : while (1) {
   switch (HEAP8[i8 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
   case 4:
   case 10:
   case 9:
   case 8:
   case 1:
   case 0:
    {
     i1 = 37;
     break L52;
    }
   case 5:
    {
     if ((i3 - i2 | 0) < 2) {
      i1 = 30;
      break L52;
     }
     if (!(FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i7, i2) | 0)) i1 = 2; else {
      i1 = 30;
      break L52;
     }
     break;
    }
   case 6:
    {
     if ((i3 - i2 | 0) < 3) {
      i1 = 33;
      break L52;
     }
     if (!(FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i7, i2) | 0)) i1 = 3; else {
      i1 = 33;
      break L52;
     }
     break;
    }
   case 7:
    {
     if ((i3 - i2 | 0) < 4) {
      i1 = 36;
      break L52;
     }
     if (!(FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i7, i2) | 0)) i1 = 4; else {
      i1 = 36;
      break L52;
     }
     break;
    }
   default:
    i1 = 1;
   }
   i1 = i2 + i1 | 0;
   if ((i1 | 0) == (i9 | 0)) break L50; else i2 = i1;
  }
  if ((i1 | 0) == 30) {
   HEAP32[i10 >> 2] = i2;
   i10 = 6;
   return i10 | 0;
  } else if ((i1 | 0) == 33) {
   HEAP32[i10 >> 2] = i2;
   i10 = 6;
   return i10 | 0;
  } else if ((i1 | 0) == 36) {
   HEAP32[i10 >> 2] = i2;
   i10 = 6;
   return i10 | 0;
  } else if ((i1 | 0) == 37) {
   HEAP32[i10 >> 2] = i2;
   i10 = 6;
   return i10 | 0;
  }
 } while (0);
 HEAP32[i10 >> 2] = i9;
 i10 = 6;
 return i10 | 0;
}

function _PCF_Glyph_Load(i14, i1, i3, i2) {
 i14 = i14 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = HEAP32[i1 >> 2] | 0;
 if (!i13) {
  i14 = 35;
  return i14 | 0;
 }
 if ((HEAP32[i13 + 16 >> 2] | 0) >>> 0 <= i3 >>> 0) {
  i14 = 6;
  return i14 | 0;
 }
 i4 = HEAP32[i13 + 104 >> 2] | 0;
 i7 = (i3 | 0) == 0 ? 0 : i3 + -1 | 0;
 i8 = HEAP32[i13 + 292 >> 2] | 0;
 i9 = i8 + (i7 << 4) + 6 | 0;
 i2 = (HEAP16[i8 + (i7 << 4) + 8 >> 1] | 0) + (HEAP16[i9 >> 1] | 0) | 0;
 i10 = i14 + 76 | 0;
 HEAP32[i10 >> 2] = i2;
 i11 = i8 + (i7 << 4) + 2 | 0;
 i12 = i8 + (i7 << 4) | 0;
 i1 = (HEAP16[i11 >> 1] | 0) - (HEAP16[i12 >> 1] | 0) | 0;
 HEAP32[i14 + 80 >> 2] = i1;
 HEAP16[i14 + 92 >> 1] = 1;
 HEAP8[i14 + 94 >> 0] = 1;
 i6 = i13 + 308 | 0;
 switch (1 << (HEAP32[i6 >> 2] & 3) & 15) {
 case 1:
  {
   i1 = (i1 + 7 | 0) >>> 3;
   break;
  }
 case 2:
  {
   i1 = (i1 + 15 | 0) >>> 4 << 1;
   break;
  }
 case 4:
  {
   i1 = (i1 + 31 | 0) >>> 5 << 2;
   break;
  }
 case 8:
  {
   i1 = (i1 + 63 | 0) >>> 6 << 3;
   break;
  }
 default:
  {
   i14 = 3;
   return i14 | 0;
  }
 }
 HEAP32[i14 + 84 >> 2] = i1;
 i2 = Math_imul(i2, i1) | 0;
 i1 = _ft_glyphslot_alloc_bitmap(i14, i2) | 0;
 if (i1 | 0) {
  i14 = i1;
  return i14 | 0;
 }
 i1 = _FT_Stream_Seek(i4, HEAP32[i8 + (i7 << 4) + 12 >> 2] | 0) | 0;
 if (i1 | 0) {
  i14 = i1;
  return i14 | 0;
 }
 i5 = i14 + 88 | 0;
 i1 = _FT_Stream_Read(i4, HEAP32[i5 >> 2] | 0, i2) | 0;
 if (i1 | 0) {
  i14 = i1;
  return i14 | 0;
 }
 i1 = HEAP32[i6 >> 2] | 0;
 if (!((i1 & 8 | 0) != 0 | (i2 | 0) == 0)) {
  i1 = i2;
  i3 = HEAP32[i5 >> 2] | 0;
  while (1) {
   i4 = HEAPU8[i3 >> 0] | 0;
   i4 = i4 >>> 1 & 85 | i4 << 1 & 170;
   i4 = i4 >>> 2 & 51 | i4 << 2 & 204;
   HEAP8[i3 >> 0] = i4 >>> 4 | i4 << 4;
   i1 = i1 + -1 | 0;
   if (!i1) break; else i3 = i3 + 1 | 0;
  }
  i1 = HEAP32[i6 >> 2] | 0;
 }
 L29 : do if ((i1 >>> 2 ^ i1 >>> 3) & 1 | 0) switch (1 << (i1 >>> 4 & 3) & 15) {
 case 4:
  {
   if (i2 >>> 0 <= 3) break L29;
   i1 = HEAP32[i5 >> 2] | 0;
   while (1) {
    i5 = HEAP8[i1 >> 0] | 0;
    i4 = i1 + 3 | 0;
    HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = i5;
    i4 = i1 + 1 | 0;
    i5 = HEAP8[i4 >> 0] | 0;
    i6 = i1 + 2 | 0;
    HEAP8[i4 >> 0] = HEAP8[i6 >> 0] | 0;
    HEAP8[i6 >> 0] = i5;
    i2 = i2 + -4 | 0;
    if (i2 >>> 0 <= 3) break; else i1 = i1 + 4 | 0;
   }
   break;
  }
 case 2:
  {
   if (i2 >>> 0 <= 1) break L29;
   i1 = HEAP32[i5 >> 2] | 0;
   while (1) {
    i5 = HEAP8[i1 >> 0] | 0;
    i6 = i1 + 1 | 0;
    HEAP8[i1 >> 0] = HEAP8[i6 >> 0] | 0;
    HEAP8[i6 >> 0] = i5;
    i2 = i2 + -2 | 0;
    if (i2 >>> 0 <= 1) break; else i1 = i1 + 2 | 0;
   }
   break;
  }
 default:
  break L29;
 } while (0);
 HEAP32[i14 + 72 >> 2] = 1651078259;
 i6 = HEAP16[i12 >> 1] | 0;
 HEAP32[i14 + 100 >> 2] = i6;
 i9 = HEAP16[i9 >> 1] | 0;
 HEAP32[i14 + 104 >> 2] = i9;
 i12 = i14 + 24 | 0;
 HEAP32[i14 + 40 >> 2] = HEAP16[i8 + (i7 << 4) + 4 >> 1] << 6;
 HEAP32[i14 + 32 >> 2] = i6 << 6;
 HEAP32[i14 + 36 >> 2] = i9 << 6;
 HEAP32[i12 >> 2] = (HEAP16[i11 >> 1] | 0) - i6 << 6;
 HEAP32[i14 + 28 >> 2] = HEAP32[i10 >> 2] << 6;
 _ft_synthesize_vertical_metrics(i12, (HEAP32[i13 + 208 >> 2] | 0) + (HEAP32[i13 + 204 >> 2] | 0) << 6);
 i14 = 0;
 return i14 | 0;
}

function _af_latin_hints_link_segments(i5, i1, i3, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i2 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i2 = HEAP32[i5 + 44 + (i6 * 1468 | 0) + 8 >> 2] | 0;
 i4 = HEAP32[i5 + 44 + (i6 * 1468 | 0) >> 2] | 0;
 i19 = i2 + (i4 * 48 | 0) | 0;
 if (!i1) i17 = 0; else i17 = HEAP32[i3 + ((i1 + -1 | 0) * 12 | 0) >> 2] | 0;
 i18 = HEAP32[(HEAP32[i5 + 2988 >> 2] | 0) + 40 >> 2] | 0;
 i16 = (i18 + 255 | 0) >>> 0 < 511 ? 1 : (i18 | 0) / 256 | 0;
 i18 = (i18 * 6e3 | 0) / 2048 | 0;
 i15 = (i4 | 0) > 0;
 if (!i15) return;
 i7 = HEAP32[i5 + 44 + (i6 * 1468 | 0) + 24 >> 2] | 0;
 i8 = (i17 | 0) == 0;
 i6 = i2;
 do {
  L9 : do if ((HEAP8[i6 + 1 >> 0] | 0) == (i7 | 0)) {
   i9 = HEAP16[i6 + 2 >> 1] | 0;
   i10 = i9 << 16 >> 16;
   i11 = i6 + 4 | 0;
   i12 = i6 + 6 | 0;
   i13 = i6 + 32 | 0;
   i14 = i6 + 20 | 0;
   if (i8) {
    i4 = i2;
    while (1) {
     i5 = HEAP16[i4 + 2 >> 1] | 0;
     i1 = i5 << 16 >> 16;
     if (i5 << 16 >> 16 > i9 << 16 >> 16 ? (i7 | 0) == (0 - (HEAP8[i4 + 1 >> 0] | 0) | 0) : 0) {
      i3 = HEAP16[i11 >> 1] | 0;
      i20 = HEAP16[i12 >> 1] | 0;
      i5 = HEAP16[i4 + 4 >> 1] | 0;
      i21 = HEAP16[i4 + 6 >> 1] | 0;
      i3 = ((i20 << 16 >> 16 > i21 << 16 >> 16 ? i21 : i20) << 16 >> 16) - ((i3 << 16 >> 16 < i5 << 16 >> 16 ? i5 : i3) << 16 >> 16) | 0;
      if ((i3 | 0) >= (i16 | 0)) {
       i1 = ((i18 | 0) / (i3 | 0) | 0) + (i1 - i10) | 0;
       if ((i1 | 0) < (HEAP32[i13 >> 2] | 0)) {
        HEAP32[i13 >> 2] = i1;
        HEAP32[i14 >> 2] = i4;
       }
       i3 = i4 + 32 | 0;
       if ((i1 | 0) < (HEAP32[i3 >> 2] | 0)) {
        HEAP32[i3 >> 2] = i1;
        HEAP32[i4 + 20 >> 2] = i6;
       }
      }
     }
     i4 = i4 + 48 | 0;
     if (i4 >>> 0 >= i19 >>> 0) break L9;
    }
   } else i5 = i2;
   do {
    i21 = HEAP16[i5 + 2 >> 1] | 0;
    i1 = i21 << 16 >> 16;
    if (i21 << 16 >> 16 > i9 << 16 >> 16 ? (i7 | 0) == (0 - (HEAP8[i5 + 1 >> 0] | 0) | 0) : 0) {
     i4 = HEAP16[i11 >> 1] | 0;
     i20 = HEAP16[i12 >> 1] | 0;
     i21 = HEAP16[i5 + 4 >> 1] | 0;
     i3 = HEAP16[i5 + 6 >> 1] | 0;
     i4 = ((i20 << 16 >> 16 > i3 << 16 >> 16 ? i3 : i20) << 16 >> 16) - ((i4 << 16 >> 16 < i21 << 16 >> 16 ? i21 : i4) << 16 >> 16) | 0;
     if ((i4 | 0) >= (i16 | 0)) {
      i1 = (i1 - i10 << 10 | 0) / (i17 | 0) | 0;
      i3 = i1 + -1024 | 0;
      if ((i3 | 0) > 1e4) i1 = 32e3; else if ((i1 | 0) > 1024) i1 = ((Math_imul(i3, i3) | 0) >>> 0) / 3e3 | 0; else i1 = 0;
      i1 = ((i18 | 0) / (i4 | 0) | 0) + i1 | 0;
      if ((i1 | 0) < (HEAP32[i13 >> 2] | 0)) {
       HEAP32[i13 >> 2] = i1;
       HEAP32[i14 >> 2] = i5;
      }
      i3 = i5 + 32 | 0;
      if ((i1 | 0) < (HEAP32[i3 >> 2] | 0)) {
       HEAP32[i3 >> 2] = i1;
       HEAP32[i5 + 20 >> 2] = i6;
      }
     }
    }
    i5 = i5 + 48 | 0;
   } while (i5 >>> 0 < i19 >>> 0);
  } while (0);
  i6 = i6 + 48 | 0;
 } while (i6 >>> 0 < i19 >>> 0);
 if (!i15) return;
 do {
  i3 = i2 + 20 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i1 | 0) {
   i1 = i1 + 20 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i2 | 0)) {
    HEAP32[i3 >> 2] = 0;
    HEAP32[i2 + 24 >> 2] = HEAP32[i1 >> 2];
   }
  }
  i2 = i2 + 48 | 0;
 } while (i2 >>> 0 < i19 >>> 0);
 return;
}

function _select_font(i7, i8, i2, i11, i12, i13, i14, i15, i16, i17) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i6 = i21 + 56 | 0;
 i20 = i21 + 48 | 0;
 i18 = i21 + 16 | 0;
 i9 = i21 + 88 | 0;
 i3 = i21;
 HEAP32[i20 >> 2] = i2;
 i10 = HEAP32[i7 + 28 >> 2] | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 HEAP32[i18 + 12 >> 2] = 0;
 HEAP32[i18 + 16 >> 2] = 0;
 HEAP32[i18 + 20 >> 2] = 0;
 HEAP32[i18 + 24 >> 2] = 0;
 HEAP32[i18 + 28 >> 2] = 0;
 HEAP8[i9 >> 0] = 0;
 if (!i2) {
  i20 = 0;
  STACKTOP = i21;
  return i20 | 0;
 };
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 i5 = (i10 | 0) != 0;
 if (i5) {
  i1 = HEAP32[i10 + 28 >> 2] | 0;
  if (!i1) i4 = 4; else {
   FUNCTION_TABLE_viii[i1 & 31](HEAP32[i10 + 40 >> 2] | 0, i2, i18);
   i1 = i18 + 16 | 0;
   if (!(HEAP32[i18 + 16 >> 2] | 0)) i4 = 6; else i19 = i1;
  }
 } else i4 = 4;
 if ((i4 | 0) == 4) {
  i1 = i18 + 16 | 0;
  i4 = 6;
 }
 if ((i4 | 0) == 6) {
  HEAP32[i18 >> 2] = 0;
  HEAP32[i18 + 4 >> 2] = i20;
  i19 = i18 + 8 | 0;
  HEAP32[i19 >> 2] = 0;
  HEAP32[i19 + 4 >> 2] = 0;
  HEAP32[i1 >> 2] = 1;
  i19 = i18 + 20 | 0;
  HEAP32[i19 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i19 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i19 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  i19 = i1;
 };
 HEAP32[i6 >> 2] = HEAP32[i18 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
 HEAP32[i6 + 16 >> 2] = HEAP32[i18 + 16 >> 2];
 HEAP32[i6 + 20 >> 2] = HEAP32[i18 + 20 >> 2];
 HEAP32[i6 + 24 >> 2] = HEAP32[i18 + 24 >> 2];
 HEAP32[i6 + 28 >> 2] = HEAP32[i18 + 28 >> 2];
 i4 = _find_font(i7, i6, i11, i12, i13, i14, i15, i16, i17, i9) | 0;
 if (!i4) if (i5 & (HEAP8[i9 >> 0] | 0) == 0) {
  i2 = i10 + 24 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) i4 = 0; else {
   if ((HEAP32[i19 >> 2] | 0) > 0) {
    i3 = i18 + 4 | 0;
    FUNCTION_TABLE_viii[i1 & 31](i8, i10, HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
    if ((HEAP32[i19 >> 2] | 0) > 1) {
     i1 = 1;
     do {
      FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](i8, i10, HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 << 2) >> 2] | 0);
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) < (HEAP32[i19 >> 2] | 0));
    }
   };
   HEAP32[i6 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
   HEAP32[i6 + 16 >> 2] = HEAP32[i18 + 16 >> 2];
   HEAP32[i6 + 20 >> 2] = HEAP32[i18 + 20 >> 2];
   HEAP32[i6 + 24 >> 2] = HEAP32[i18 + 24 >> 2];
   HEAP32[i6 + 28 >> 2] = HEAP32[i18 + 28 >> 2];
   i4 = _find_font(i7, i6, i11, i12, i13, i14, i15, i16, i17, i9) | 0;
  }
 } else i4 = 0;
 i3 = i18 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i20 | 0)) {
  if ((HEAP32[i19 >> 2] | 0) > 0) {
   i2 = 0;
   do {
    _free(HEAP32[i1 + (i2 << 2) >> 2] | 0);
    i2 = i2 + 1 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
   } while ((i2 | 0) < (HEAP32[i19 >> 2] | 0));
  }
  _free(i1);
 }
 i20 = i4;
 STACKTOP = i21;
 return i20 | 0;
}

function _tt_face_get_name(i13, i10, i15) {
 i13 = i13 | 0;
 i10 = i10 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i14 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i16 = i17;
 i14 = HEAP32[i13 + 100 >> 2] | 0;
 HEAP32[i16 >> 2] = 0;
 i11 = i13 + 356 | 0;
 i1 = HEAP16[i13 + 340 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  i14 = 0;
  HEAP32[i15 >> 2] = i14;
  i16 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i8 = i1 & 65535;
 i1 = 0;
 i2 = -1;
 i3 = -1;
 i4 = -1;
 i5 = -1;
 i6 = HEAP32[i11 >> 2] | 0;
 i9 = 0;
 while (1) {
  L6 : do if ((HEAP16[i6 + 6 >> 1] | 0) == i10 << 16 >> 16) if (!(HEAP16[i6 + 8 >> 1] | 0)) i7 = i1; else switch (HEAP16[i6 >> 1] | 0) {
  case 2:
  case 0:
   {
    i7 = i1;
    i2 = i9;
    break L6;
   }
  case 1:
   {
    if (!(HEAP16[i6 + 4 >> 1] | 0)) {
     i7 = i1;
     i4 = i9;
     break L6;
    }
    i7 = i1;
    i5 = (HEAP16[i6 + 2 >> 1] | 0) == 0 ? i9 : i5;
    break L6;
   }
  case 3:
   {
    if ((i3 | 0) != -1) if ((HEAP16[i6 + 4 >> 1] & 1023) != 9) {
     i7 = i1;
     break L6;
    }
    switch (HEAP16[i6 + 2 >> 1] | 0) {
    case 10:
    case 1:
    case 0:
     break;
    default:
     {
      i7 = i1;
      break L6;
     }
    }
    i7 = (HEAP16[i6 + 4 >> 1] & 1023) == 9 & 1;
    i3 = i9;
    break L6;
   }
  default:
   {
    i7 = i1;
    break L6;
   }
  } else i7 = i1; while (0);
  i9 = i9 + 1 | 0;
  if (i9 >>> 0 >= i8 >>> 0) break; else {
   i1 = i7;
   i6 = i6 + 20 | 0;
  }
 }
 i1 = (i4 | 0) > -1 ? i4 : i5;
 L20 : do if ((i3 | 0) > -1) if ((i1 | 0) < 0 | i7 << 24 >> 24 != 0) {
  i1 = HEAP32[i11 >> 2] | 0;
  switch (HEAP16[i1 + (i3 * 20 | 0) + 2 >> 1] | 0) {
  case 10:
  case 0:
  case 1:
   {
    i5 = 187;
    i4 = i1 + (i3 * 20 | 0) | 0;
    break L20;
   }
  default:
   i1 = 0;
  }
  HEAP32[i15 >> 2] = i1;
  i16 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 } else i12 = 17; else i12 = 17; while (0);
 do if ((i12 | 0) == 17) {
  if ((i1 | 0) > -1) {
   i5 = 188;
   i4 = (HEAP32[i11 >> 2] | 0) + (i1 * 20 | 0) | 0;
   break;
  }
  if ((i2 | 0) > -1) {
   i5 = 187;
   i4 = (HEAP32[i11 >> 2] | 0) + (i2 * 20 | 0) | 0;
   break;
  } else {
   i14 = 0;
   HEAP32[i15 >> 2] = i14;
   i16 = HEAP32[i16 >> 2] | 0;
   STACKTOP = i17;
   return i16 | 0;
  }
 } while (0);
 if (!i4) {
  i14 = 0;
  HEAP32[i15 >> 2] = i14;
  i16 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i3 = i4 + 16 | 0;
 do if (!(HEAP32[i3 >> 2] | 0)) {
  i1 = HEAP32[i13 + 360 >> 2] | 0;
  i2 = i4 + 8 | 0;
  i13 = _ft_mem_realloc(i14, 1, 0, HEAPU16[i2 >> 1] | 0, 0, i16) | 0;
  HEAP32[i3 >> 2] = i13;
  if (!(HEAP32[i16 >> 2] | 0)) {
   i13 = _FT_Stream_Seek(i1, HEAP32[i4 + 12 >> 2] | 0) | 0;
   HEAP32[i16 >> 2] = i13;
   if (!i13) {
    i13 = _FT_Stream_Read(i1, HEAP32[i3 >> 2] | 0, HEAPU16[i2 >> 1] | 0) | 0;
    HEAP32[i16 >> 2] = i13;
    if (!i13) break;
   }
  }
  _ft_mem_free(i14, HEAP32[i3 >> 2] | 0);
  HEAP32[i3 >> 2] = 0;
  HEAP16[i2 >> 1] = 0;
  i14 = 0;
  HEAP32[i15 >> 2] = i14;
  i16 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 } while (0);
 i14 = FUNCTION_TABLE_iii[i5 & 255](i4, i14) | 0;
 HEAP32[i15 >> 2] = i14;
 i16 = HEAP32[i16 >> 2] | 0;
 STACKTOP = i17;
 return i16 | 0;
}
function _load_face_in_embedded_rfork(i11, i2, i12, i13, i1) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i16 = i18 + 72 | 0;
 i14 = i18 + 36 | 0;
 i15 = i18;
 i17 = HEAP32[i11 >> 2] | 0;
 i10 = i1 + 12 | 0;
 _FT_Raccess_Guess(i11, i2, HEAP32[i10 >> 2] | 0, i16, i14, i15);
 L1 : do if (!i11) i3 = 1; else {
  i2 = 2;
  i9 = 0;
  i1 = 0;
  while (1) {
   i8 = ((HEAP32[12512 + (i9 << 3) + 4 >> 2] | 0) + -3 | 0) >>> 0 < 2;
   L4 : do if (i1 << 24 >> 24 == 0 | i8 ^ 1) if (!(HEAP32[i15 + (i9 << 2) >> 2] | 0)) {
    i5 = i16 + (i9 << 2) | 0;
    i5 = HEAP32[(HEAP32[i5 >> 2] | 0 ? i5 : i10) >> 2] | 0;
    i6 = HEAP32[i11 >> 2] | 0;
    i7 = FUNCTION_TABLE_iii[HEAP32[i6 + 4 >> 2] & 255](i6, 40) | 0;
    do if (!i7) i2 = 64; else {
     i2 = i7;
     i3 = i2 + 40 | 0;
     do {
      HEAP8[i2 >> 0] = 0;
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) < (i3 | 0));
     i4 = i7 + 28 | 0;
     HEAP32[i4 >> 2] = i6;
     i2 = _FT_Stream_Open(i7, i5) | 0;
     HEAP32[i7 + 16 >> 2] = i5;
     if (i2 | 0) {
      FUNCTION_TABLE_vii[HEAP32[i6 + 8 >> 2] & 63](i6, i7);
      break;
     }
     HEAP32[i4 >> 2] = i6;
     i3 = _IsMacResource(i11, i7, HEAP32[i14 + (i9 << 2) >> 2] | 0, i12, i13) | 0;
     i2 = HEAP32[i4 >> 2] | 0;
     i4 = HEAP32[i7 + 24 >> 2] | 0;
     if (i4 | 0) FUNCTION_TABLE_vi[i4 & 127](i7);
     FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i7);
     if (!i3) {
      i3 = 0;
      break L1;
     }
     i1 = i8 ? 1 : i1;
     break L4;
    } while (0);
    i3 = i2;
    i1 = i8 & (i2 & 255 | 0) == 81 ? 1 : i1;
   } else i3 = i2; else i3 = i2; while (0);
   i9 = i9 + 1 | 0;
   if (i9 >>> 0 >= 9) break; else i2 = i3;
  }
 } while (0);
 i4 = i17 + 8 | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 if (i1 | 0) {
  FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i17, i1);
  HEAP32[i16 >> 2] = 0;
 }
 i1 = i16 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i17, i2);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = i16 + 8 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i17, i2);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = i16 + 12 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i17, i2);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = i16 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i17, i2);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = i16 + 20 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i17, i2);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = i16 + 24 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i17, i2);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = i16 + 28 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i17, i2);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = i16 + 32 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  i17 = (i3 | 0) == 0;
  i17 = i17 ? 0 : 2;
  STACKTOP = i18;
  return i17 | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i17, i2);
 HEAP32[i1 >> 2] = 0;
 i17 = (i3 | 0) == 0;
 i17 = i17 ? 0 : 2;
 STACKTOP = i18;
 return i17 | 0;
}

function _ass_font_get_index(i7, i14, i1, i16, i17) {
 i7 = i7 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i15 = i18 + 24 | 0;
 i12 = i18 + 16 | 0;
 i11 = i18;
 HEAP32[i17 >> 2] = 0;
 if (i1 >>> 0 < 32) {
  HEAP32[i16 >> 2] = 0;
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i13 = (i1 | 0) == 160 ? 32 : i1;
 i5 = i14 + 108 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if (!i2) {
  HEAP32[i16 >> 2] = 0;
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i1 = HEAP32[i16 >> 2] | 0;
 if ((i1 | 0) < (i2 | 0)) {
  i2 = HEAP32[i14 + 64 + (i1 << 2) >> 2] | 0;
  i1 = HEAP32[i2 + 92 >> 2] | 0;
  if (!i1) i1 = i13; else i1 = (HEAP32[i1 + 4 >> 2] | 0) == 1937337698 ? i13 | 61440 : i13;
  i1 = _FT_Get_Char_Index(i2, i1) | 0;
  i2 = HEAP32[i5 >> 2] | 0;
 } else i1 = 0;
 i3 = (i1 | 0) == 0;
 L15 : do if (i3 & (i2 | 0) > 0) {
  i4 = i13 | 61440;
  i3 = 0;
  while (1) {
   i2 = HEAP32[i14 + 64 + (i3 << 2) >> 2] | 0;
   i1 = HEAP32[i2 + 92 >> 2] | 0;
   if (!i1) i1 = i13; else i1 = (HEAP32[i1 + 4 >> 2] | 0) == 1937337698 ? i4 : i13;
   i1 = _FT_Get_Char_Index(i2, i1) | 0;
   i2 = (i1 | 0) == 0;
   if (!i2) break;
   i1 = i3 + 1 | 0;
   if (i2 & (i1 | 0) < (HEAP32[i5 >> 2] | 0)) i3 = i1; else {
    i6 = 17;
    break L15;
   }
  }
  HEAP32[i16 >> 2] = i3;
 } else if (i3) i6 = 17; while (0);
 L25 : do if ((i6 | 0) == 17) {
  i8 = i14 + 16 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  i4 = HEAP32[i14 >> 2] | 0;
  i9 = i14 + 4 | 0;
  i5 = HEAP32[i9 >> 2] | 0;
  i10 = i14 + 8 | 0;
  i6 = HEAP32[i10 >> 2] | 0;
  HEAP32[i11 >> 2] = i13;
  HEAP32[i11 + 4 >> 2] = i4;
  HEAP32[i11 + 8 >> 2] = i5;
  HEAP32[i11 + 12 >> 2] = i6;
  _ass_msg(i1, 4, 358251, i11);
  i1 = _add_face(i7, i14, i13) | 0;
  HEAP32[i16 >> 2] = i1;
  if ((i1 | 0) > -1) {
   i6 = HEAP32[i14 + 64 + (i1 << 2) >> 2] | 0;
   i7 = i6 + 92 | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   if (!i1) i1 = i13; else i1 = (HEAP32[i1 + 4 >> 2] | 0) == 1937337698 ? i13 | 61440 : i13;
   i1 = _FT_Get_Char_Index(i6, i1) | 0;
   if (!i1) {
    i5 = i6 + 36 | 0;
    if ((HEAP32[i5 >> 2] | 0) > 0) {
     i11 = HEAP32[i8 >> 2] | 0;
     HEAP32[i12 >> 2] = i13;
     _ass_msg(i11, 2, 358314, i12);
     if ((HEAP32[i5 >> 2] | 0) > 0) {
      i3 = i6 + 40 | 0;
      i4 = i13 | 61440;
      i2 = 0;
      do {
       _FT_Set_Charmap(i6, HEAP32[(HEAP32[i3 >> 2] | 0) + (i2 << 2) >> 2] | 0) | 0;
       i1 = HEAP32[i7 >> 2] | 0;
       if (!i1) i1 = i13; else i1 = (HEAP32[i1 + 4 >> 2] | 0) == 1937337698 ? i4 : i13;
       i1 = _FT_Get_Char_Index(i6, i1) | 0;
       i2 = i2 + 1 | 0;
       if (i1 | 0) break L25;
      } while ((i2 | 0) < (HEAP32[i5 >> 2] | 0));
     }
    }
    i1 = HEAP32[i8 >> 2] | 0;
    i11 = HEAP32[i14 >> 2] | 0;
    i12 = HEAP32[i9 >> 2] | 0;
    i14 = HEAP32[i10 >> 2] | 0;
    HEAP32[i15 >> 2] = i13;
    HEAP32[i15 + 4 >> 2] = i11;
    HEAP32[i15 + 8 >> 2] = i12;
    HEAP32[i15 + 12 >> 2] = i14;
    _ass_msg(i1, 1, 358369, i15);
    i1 = 0;
   }
  } else i1 = 0;
 } while (0);
 i15 = HEAP32[i16 >> 2] | 0;
 HEAP32[i16 >> 2] = (i15 | 0) > 0 ? i15 : 0;
 HEAP32[i17 >> 2] = i1;
 i17 = 1;
 STACKTOP = i18;
 return i17 | 0;
}

function _psh_globals_new(i1, i8, i9) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i12;
 i11 = _ft_mem_alloc(i1, 2496, i10) | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if (i2 | 0) {
  i10 = i2;
  HEAP32[i9 >> 2] = i11;
  STACKTOP = i12;
  return i10 | 0;
 }
 HEAP32[i11 >> 2] = i1;
 i6 = i11 + 4 | 0;
 i5 = i11 + 208 | 0;
 HEAP32[i11 + 212 >> 2] = HEAPU16[i8 + 120 >> 1];
 i7 = HEAP8[i8 + 124 >> 0] | 0;
 i4 = i7 & 255;
 if (i7 << 24 >> 24) {
  i1 = i4;
  i2 = i8 + 128 | 0;
  i3 = i11 + 224 | 0;
  while (1) {
   HEAP32[i3 >> 2] = HEAP16[i2 >> 1];
   i1 = i1 + -1 | 0;
   if (!i1) break; else {
    i2 = i2 + 2 | 0;
    i3 = i3 + 12 | 0;
   }
  }
 }
 HEAP32[i5 >> 2] = i4 + 1;
 HEAP32[i11 + 8 >> 2] = HEAPU16[i8 + 122 >> 1];
 i7 = HEAP8[i8 + 125 >> 0] | 0;
 i4 = i7 & 255;
 if (i7 << 24 >> 24) {
  i1 = i11 + 20 | 0;
  i2 = i4;
  i3 = i8 + 154 | 0;
  while (1) {
   HEAP32[i1 >> 2] = HEAP16[i3 >> 1];
   i2 = i2 + -1 | 0;
   if (!i2) break; else {
    i1 = i1 + 12 | 0;
    i3 = i3 + 2 | 0;
   }
  }
 }
 HEAP32[i6 >> 2] = i4 + 1;
 i3 = i11 + 412 | 0;
 i2 = i8 + 8 | 0;
 i4 = i8 + 9 | 0;
 i7 = i8 + 116 | 0;
 _psh_blues_set_zones(i3, HEAPU8[i2 >> 0] | 0, i8 + 12 | 0, HEAPU8[i4 >> 0] | 0, i8 + 40 | 0, HEAP32[i7 >> 2] | 0, 0);
 i5 = i8 + 10 | 0;
 i6 = i8 + 11 | 0;
 _psh_blues_set_zones(i3, HEAPU8[i5 >> 0] | 0, i8 + 60 | 0, HEAPU8[i6 >> 0] | 0, i8 + 88 | 0, HEAP32[i7 >> 2] | 0, 1);
 i2 = HEAP8[i2 >> 0] | 0;
 i3 = i2 & 255;
 if (!(i2 << 24 >> 24)) i1 = 1; else {
  i2 = 0;
  i1 = 1;
  do {
   i13 = (HEAPU16[i8 + 12 + ((i2 | 1) << 1) >> 1] | 0) - (HEAPU16[i8 + 12 + (i2 << 1) >> 1] | 0) | 0;
   i1 = (i13 << 16 >> 16 | 0) > (i1 << 16 >> 16 | 0) ? i13 & 65535 : i1;
   i2 = i2 + 2 | 0;
  } while (i2 >>> 0 < i3 >>> 0);
 }
 i13 = HEAP8[i4 >> 0] | 0;
 i3 = i13 & 255;
 if (i13 << 24 >> 24) {
  i2 = 0;
  do {
   i13 = (HEAPU16[i8 + 40 + ((i2 | 1) << 1) >> 1] | 0) - (HEAPU16[i8 + 40 + (i2 << 1) >> 1] | 0) | 0;
   i1 = (i13 << 16 >> 16 | 0) > (i1 << 16 >> 16 | 0) ? i13 & 65535 : i1;
   i2 = i2 + 2 | 0;
  } while (i2 >>> 0 < i3 >>> 0);
 }
 i13 = HEAP8[i5 >> 0] | 0;
 i3 = i13 & 255;
 if (i13 << 24 >> 24) {
  i2 = 0;
  do {
   i13 = (HEAPU16[i8 + 60 + ((i2 | 1) << 1) >> 1] | 0) - (HEAPU16[i8 + 60 + (i2 << 1) >> 1] | 0) | 0;
   i1 = (i13 << 16 >> 16 | 0) > (i1 << 16 >> 16 | 0) ? i13 & 65535 : i1;
   i2 = i2 + 2 | 0;
  } while (i2 >>> 0 < i3 >>> 0);
 }
 i13 = HEAP8[i6 >> 0] | 0;
 i3 = i13 & 255;
 if (i13 << 24 >> 24) {
  i2 = 0;
  do {
   i13 = (HEAPU16[i8 + 88 + ((i2 | 1) << 1) >> 1] | 0) - (HEAPU16[i8 + 88 + (i2 << 1) >> 1] | 0) | 0;
   i1 = (i13 << 16 >> 16 | 0) > (i1 << 16 >> 16 | 0) ? i13 & 65535 : i1;
   i2 = i2 + 2 | 0;
  } while (i2 >>> 0 < i3 >>> 0);
 }
 i13 = _FT_DivFix(1e3, i1 << 16 >> 16) | 0;
 i6 = HEAP32[i8 + 108 >> 2] | 0;
 HEAP32[i11 + 2476 >> 2] = (i6 | 0) < (i13 | 0) ? i6 : i13;
 HEAP32[i11 + 2480 >> 2] = HEAP32[i8 + 112 >> 2];
 HEAP32[i11 + 2488 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i11 + 200 >> 2] = 0;
 HEAP32[i11 + 204 >> 2] = 0;
 HEAP32[i11 + 404 >> 2] = 0;
 HEAP32[i11 + 408 >> 2] = 0;
 i13 = HEAP32[i10 >> 2] | 0;
 HEAP32[i9 >> 2] = i11;
 STACKTOP = i12;
 return i13 | 0;
}

function _destroy_face(i11, i12, i1) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = i1 + 12 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i12 + 120 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](HEAP32[i12 + 116 >> 2] | 0);
 i7 = i12 + 84 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (i1 | 0) do {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  i6 = HEAP32[(HEAP32[i4 + 96 >> 2] | 0) + 8 >> 2] | 0;
  i4 = i4 + 84 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  i3 = 0;
  while (1) {
   if (!i2) break;
   i5 = HEAP32[i2 + 8 >> 2] | 0;
   if ((i2 | 0) == (i1 | 0)) {
    i8 = 7;
    break;
   } else {
    i3 = i2;
    i2 = i5;
   }
  }
  if ((i8 | 0) == 7) {
   i8 = 0;
   HEAP32[((i3 | 0) == 0 ? i4 : i3 + 8 | 0) >> 2] = i5;
   i2 = HEAP32[i1 + 20 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_vi[i2 & 127](i1);
   _ft_glyphslot_done(i1);
   FUNCTION_TABLE_vii[HEAP32[i6 + 8 >> 2] & 63](i6, i1);
   i1 = HEAP32[i7 >> 2] | 0;
  }
 } while ((i1 | 0) != 0);
 if (i11 | 0) {
  i6 = i12 + 108 | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (i1 | 0) {
   i7 = i11 + 8 | 0;
   do {
    i4 = i1;
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    i5 = HEAP32[i4 + 8 >> 2] | 0;
    i2 = HEAP32[i5 + 8 >> 2] | 0;
    if (i2 | 0) FUNCTION_TABLE_vi[i2 & 127](i5);
    i2 = HEAP32[(HEAP32[i9 >> 2] | 0) + 60 >> 2] | 0;
    if (i2 | 0) FUNCTION_TABLE_vi[i2 & 127](i5);
    i2 = i5 + 40 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (i3 | 0) FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 63](i11, i3);
    HEAP32[i2 >> 2] = 0;
    FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 63](i11, i5);
    FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 63](i11, i4);
   } while ((i1 | 0) != 0);
  }
  HEAP32[i6 >> 2] = 0;
  HEAP32[i12 + 112 >> 2] = 0;
 }
 HEAP32[i12 + 88 >> 2] = 0;
 i1 = HEAP32[i12 + 48 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i12);
 i5 = i12 + 36 | 0;
 i6 = i12 + 40 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((HEAP32[i5 >> 2] | 0) > 0) {
  i4 = 0;
  do {
   i1 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
   i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] | 0;
   i3 = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0;
   if (i3 | 0) FUNCTION_TABLE_vi[i3 & 127](i1);
   FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i1);
   HEAP32[(HEAP32[i6 >> 2] | 0) + (i4 << 2) >> 2] = 0;
   i4 = i4 + 1 | 0;
   i1 = HEAP32[i6 >> 2] | 0;
  } while ((i4 | 0) < (HEAP32[i5 >> 2] | 0));
 }
 if (i1 | 0) FUNCTION_TABLE_vii[HEAP32[i11 + 8 >> 2] & 63](i11, i1);
 HEAP32[i6 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 i1 = HEAP32[i10 + 52 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i12);
 i3 = i12 + 104 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i12 + 8 >> 2] & 1024;
 if (i4 | 0) {
  i5 = HEAP32[i4 + 28 >> 2] | 0;
  i2 = HEAP32[i4 + 24 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_vi[i2 & 127](i4);
  if (!i1) FUNCTION_TABLE_vii[HEAP32[i5 + 8 >> 2] & 63](i5, i4);
 }
 HEAP32[i3 >> 2] = 0;
 i1 = i12 + 128 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  i10 = i11 + 8 | 0;
  i10 = HEAP32[i10 >> 2] | 0;
  FUNCTION_TABLE_vii[i10 & 63](i11, i12);
  return;
 } else {
  i10 = i11 + 8 | 0;
  FUNCTION_TABLE_vii[HEAP32[i10 >> 2] & 63](i11, i2);
  HEAP32[i1 >> 2] = 0;
  i10 = HEAP32[i10 >> 2] | 0;
  FUNCTION_TABLE_vii[i10 & 63](i11, i12);
  return;
 }
}

function _cf2_doStems(i2, i11, i13, i3, i14) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 i3 = i3 | 0;
 i14 = i14 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i15 = i19;
 i16 = i11 + 392 | 0;
 i5 = HEAP32[i16 >> 2] | 0;
 i17 = i11 + 8 | 0;
 i18 = i17;
 i12 = i5 - i18 >> 3;
 i4 = i12 & 1;
 if (i4 | 0) if (!(HEAP8[i14 >> 0] | 0)) {
  L4 : do if (!i12) {
   i1 = HEAP32[i11 + 4 >> 2] | 0;
   if (!i1) i1 = 0; else if (!(HEAP32[i1 >> 2] | 0)) {
    HEAP32[i1 >> 2] = 130;
    i1 = 0;
   } else i1 = 0;
  } else switch (HEAP32[i11 + 12 >> 2] | 0) {
  case 2:
   {
    i1 = HEAP32[i17 >> 2] << 16;
    break L4;
   }
  case 1:
   {
    i1 = HEAP32[i17 >> 2] | 0;
    if ((i1 | 0) < 0) {
     i1 = 0 - (8192 - i1 >> 14) | 0;
     break L4;
    } else {
     i1 = i1 + 8192 >> 14;
     break L4;
    }
   }
  default:
   {
    i1 = HEAP32[i17 >> 2] | 0;
    break L4;
   }
  } while (0);
  HEAP32[i3 >> 2] = (HEAP32[(HEAP32[(HEAP32[i2 + 132 >> 2] | 0) + 736 >> 2] | 0) + 532 >> 2] << 16) + i1;
 }
 if (HEAP8[(HEAP32[i2 + 132 >> 2] | 0) + 561 >> 0] | 0) {
  HEAP8[i14 >> 0] = 1;
  STACKTOP = i19;
  return;
 }
 L21 : do if (i4 >>> 0 < i12 >>> 0) {
  i6 = i15 + 4 | 0;
  i7 = i15 + 8 | 0;
  i8 = i15 + 12 | 0;
  i9 = i15 + 16 | 0;
  i10 = i11 + 4 | 0;
  i1 = i4;
  i3 = 0;
  i2 = i5;
  while (1) {
   i5 = i2 - i18 >> 3;
   L25 : do if (i5 >>> 0 > i1 >>> 0) {
    i2 = i11 + 8 + (i1 << 3) | 0;
    switch (HEAP32[i11 + 8 + (i1 << 3) + 4 >> 2] | 0) {
    case 2:
     {
      i2 = HEAP32[i2 >> 2] << 16;
      break L25;
     }
    case 1:
     {
      i2 = HEAP32[i2 >> 2] | 0;
      if ((i2 | 0) < 0) {
       i2 = 0 - (8192 - i2 >> 14) | 0;
       break L25;
      } else {
       i2 = i2 + 8192 >> 14;
       break L25;
      }
     }
    default:
     {
      i2 = HEAP32[i2 >> 2] | 0;
      break L25;
     }
    }
   } else {
    i2 = HEAP32[i10 >> 2] | 0;
    if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
     HEAP32[i2 >> 2] = 130;
     i2 = 0;
    } else i2 = 0;
   } while (0);
   i4 = i2 + i3 | 0;
   HEAP32[i6 >> 2] = i4;
   i3 = i1 + 1 | 0;
   L38 : do if (i5 >>> 0 > i3 >>> 0) {
    i2 = i11 + 8 + (i3 << 3) | 0;
    switch (HEAP32[i11 + 8 + (i3 << 3) + 4 >> 2] | 0) {
    case 2:
     {
      i2 = HEAP32[i2 >> 2] << 16;
      break L38;
     }
    case 1:
     {
      i2 = HEAP32[i2 >> 2] | 0;
      if ((i2 | 0) < 0) {
       i2 = 0 - (8192 - i2 >> 14) | 0;
       break L38;
      } else {
       i2 = i2 + 8192 >> 14;
       break L38;
      }
     }
    default:
     {
      i2 = HEAP32[i2 >> 2] | 0;
      break L38;
     }
    }
   } else {
    i2 = HEAP32[i10 >> 2] | 0;
    if (!i2) i2 = 0; else if (!(HEAP32[i2 >> 2] | 0)) {
     HEAP32[i2 >> 2] = 130;
     i2 = 0;
    } else i2 = 0;
   } while (0);
   i2 = i2 + i4 | 0;
   HEAP32[i7 >> 2] = i2;
   HEAP8[i15 >> 0] = 0;
   HEAP32[i8 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
   _cf2_arrstack_push(i13, i15);
   i1 = i1 + 2 | 0;
   if (i1 >>> 0 >= i12 >>> 0) break L21;
   i3 = i2;
   i2 = HEAP32[i16 >> 2] | 0;
  }
 } while (0);
 HEAP32[i16 >> 2] = i17;
 HEAP8[i14 >> 0] = 1;
 STACKTOP = i19;
 return;
}

function _pfr_face_get_kerning(i4, i1, i3, i13) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i13 = i13 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = i4 + 288 | 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 i2 = (i1 | 0) == 0 ? 0 : i1 + -1 | 0;
 i1 = (i3 | 0) == 0 ? 0 : i3 + -1 | 0;
 i12 = HEAP32[i5 + 120 >> 2] | 0;
 if (i2 >>> 0 > i12 >>> 0 | i1 >>> 0 > i12 >>> 0) {
  i13 = 0;
  return i13 | 0;
 }
 i11 = HEAP32[i5 + 128 >> 2] | 0;
 i11 = HEAP32[i11 + (i1 << 4) >> 2] & 65535 | HEAP32[i11 + (i2 << 4) >> 2] << 16;
 i12 = HEAP32[i4 + 104 >> 2] | 0;
 i1 = HEAP32[i5 + 136 >> 2] | 0;
 if (!i1) {
  i13 = 0;
  return i13 | 0;
 } else i10 = i1;
 while (1) {
  if (i11 >>> 0 >= (HEAP32[i10 + 16 >> 2] | 0) >>> 0) if (i11 >>> 0 <= (HEAP32[i10 + 20 >> 2] | 0) >>> 0) break;
  i1 = HEAP32[i10 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i9 = 28;
   break;
  } else i10 = i1;
 }
 if ((i9 | 0) == 28) return i1 | 0;
 i1 = _FT_Stream_Seek(i12, HEAP32[i10 + 12 >> 2] | 0) | 0;
 if (i1 | 0) {
  i13 = i1;
  return i13 | 0;
 }
 i1 = i10 + 4 | 0;
 i2 = i10 + 8 | 0;
 i3 = _FT_Stream_EnterFrame(i12, Math_imul(HEAPU8[i1 >> 0] | 0, HEAP32[i2 >> 2] | 0) | 0) | 0;
 if (i3 | 0) {
  i13 = i3;
  return i13 | 0;
 }
 i1 = HEAPU8[i1 >> 0] | 0;
 i7 = HEAP32[i2 >> 2] | 0;
 i2 = 31 - (Math_clz32(i1 | 0) | 0) | 0;
 i5 = i7 << i2;
 i2 = i1 - (1 << i2) | 0;
 i1 = HEAP32[i12 + 32 >> 2] | 0;
 i8 = HEAPU8[i10 + 5 >> 0] | 0;
 i6 = i8 & 1;
 i8 = i8 & 2;
 if (!i2) i9 = 14; else {
  i2 = i1 + (Math_imul(i2, i7) | 0) | 0;
  if (!(i6 << 24 >> 24)) {
   i4 = i2 + 2 | 0;
   i2 = i4;
   i3 = HEAPU8[i4 + -2 >> 0] << 16;
   i4 = i4 + -1 | 0;
  } else {
   i2 = i2 + 4 | 0;
   i4 = i2 + -4 | 0;
   i3 = HEAPU8[i4 + 1 >> 0] << 16 | HEAPU8[i4 >> 0] << 24 | HEAPU8[i4 + 2 >> 0] << 8;
   i4 = i4 + 3 | 0;
  }
  i3 = HEAPU8[i4 >> 0] | i3;
  if ((i3 | 0) == (i11 | 0)) i9 = 24; else {
   i1 = i3 >>> 0 < i11 >>> 0 ? i2 + (i8 << 24 >> 24 == 0 ? 1 : 2) | 0 : i1;
   i9 = 14;
  }
 }
 L27 : do if ((i9 | 0) == 14) {
  i6 = i6 << 24 >> 24 != 0;
  if (i5 >>> 0 > i7 >>> 0) if (i6) do {
   i5 = i5 >>> 1;
   i4 = i1 + i5 | 0;
   i2 = i4 + 4 | 0;
   i3 = i2 + -4 | 0;
   i3 = HEAPU8[i3 + 3 >> 0] | (HEAPU8[i3 + 1 >> 0] << 16 | HEAPU8[i3 >> 0] << 24 | HEAPU8[i3 + 2 >> 0] << 8);
   if ((i3 | 0) == (i11 | 0)) {
    i9 = 24;
    break L27;
   }
   i1 = i3 >>> 0 < i11 >>> 0 ? i4 : i1;
  } while (i5 >>> 0 > i7 >>> 0); else do {
   i5 = i5 >>> 1;
   i3 = i1 + i5 | 0;
   i2 = i3 + 2 | 0;
   i4 = HEAPU8[i2 + -1 >> 0] | HEAPU8[i2 + -2 >> 0] << 16;
   if ((i4 | 0) == (i11 | 0)) {
    i9 = 24;
    break L27;
   }
   i1 = i4 >>> 0 < i11 >>> 0 ? i3 : i1;
  } while (i5 >>> 0 > i7 >>> 0);
  if (i6) {
   i2 = i1 + 4 | 0;
   i3 = HEAPU8[i1 + 1 >> 0] << 16 | HEAPU8[i1 >> 0] << 24 | HEAPU8[i1 + 2 >> 0] << 8;
   i4 = 3;
  } else {
   i2 = i1 + 2 | 0;
   i3 = HEAPU8[i1 >> 0] << 16;
   i4 = 1;
  }
  if ((HEAPU8[i1 + i4 >> 0] | i3 | 0) == (i11 | 0)) i9 = 24;
 } while (0);
 if ((i9 | 0) == 24) {
  i1 = HEAPU8[i2 >> 0] | 0;
  if (i8 << 24 >> 24) i1 = (HEAPU8[i2 + 1 >> 0] | i1 << 8) << 16 >> 16;
  HEAP32[i13 >> 2] = (HEAP16[i10 + 6 >> 1] | 0) + i1;
 }
 _FT_Stream_ExitFrame(i12);
 i13 = 0;
 return i13 | 0;
}

function _process_arc(i18, i16, i17, d9, d10, d7, d8, i2, i1, i11) {
 i18 = i18 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 d9 = +d9;
 d10 = +d10;
 d7 = +d7;
 d8 = +d8;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, i15 = 0, i19 = 0, i20 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i19 + 8 | 0;
 i12 = i19;
 d14 = +HEAPF64[i2 + (i1 << 3) >> 3];
 d13 = (d9 + d7) * d14;
 d14 = (d10 + d8) * d14;
 if (i1 | 0) {
  i1 = i1 + -1 | 0;
  if (!(_process_arc(i18, i16, i17, d9, d10, d13, d14, i2, i1, i11) | 0)) {
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
  i18 = _process_arc(i18, i16, i17, d13, d14, d7, d8, i2, i1, i11) | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 i3 = i18 + 16 | 0;
 i2 = ~~(+HEAPF64[i3 >> 3] * d9);
 i4 = i18 + 24 | 0;
 i1 = ~~(+HEAPF64[i4 >> 3] * d10);
 i5 = (i11 & 1 | 0) == 0;
 if (!i5) {
  HEAP32[i12 >> 2] = i2 + i16;
  HEAP32[i12 + 4 >> 2] = i1 + i17;
  i15 = HEAP32[i18 >> 2] | 0;
  HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  if (!(_outline_add_point(i15, i6, 2) | 0)) {
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 }
 i15 = (i11 & 2 | 0) == 0;
 if (!i15) {
  HEAP32[i12 >> 2] = i16 - i2;
  HEAP32[i12 + 4 >> 2] = i17 - i1;
  i11 = HEAP32[i18 + 4 >> 2] | 0;
  HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  if (!(_outline_add_point(i11, i6, 2) | 0)) {
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 }
 i12 = ~~(d13 * +HEAPF64[i3 >> 3]);
 i11 = ~~(d14 * +HEAPF64[i4 >> 3]);
 if (!i5) {
  i4 = i12 + i16 | 0;
  i5 = i11 + i17 | 0;
  i6 = HEAP32[i18 >> 2] | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  i3 = i6 + 4 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  do if (i1 >>> 0 < i2 >>> 0) i2 = i6 + 16 | 0; else {
   i1 = i2 << 1;
   i2 = ___errno_location() | 0;
   HEAP32[i2 >> 2] = 0;
   i2 = i6 + 16 | 0;
   i20 = _ass_try_realloc_array(HEAP32[i2 >> 2] | 0, i1, 8) | 0;
   HEAP32[i2 >> 2] = i20;
   i20 = ___errno_location() | 0;
   if (!(HEAP32[i20 >> 2] | 0)) {
    HEAP32[i3 >> 2] = i1;
    i1 = HEAP32[i6 >> 2] | 0;
    break;
   } else {
    i20 = 0;
    STACKTOP = i19;
    return i20 | 0;
   }
  } while (0);
  i20 = (HEAP32[i2 >> 2] | 0) + (i1 << 3) | 0;
  HEAP32[i20 >> 2] = i4;
  HEAP32[i20 + 4 >> 2] = i5;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if (i15) {
  i20 = 1;
  STACKTOP = i19;
  return i20 | 0;
 }
 i6 = i16 - i12 | 0;
 i5 = i17 - i11 | 0;
 i4 = HEAP32[i18 + 4 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = i4 + 4 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 do if (i1 >>> 0 < i2 >>> 0) i2 = i4 + 16 | 0; else {
  i1 = i2 << 1;
  i2 = ___errno_location() | 0;
  HEAP32[i2 >> 2] = 0;
  i2 = i4 + 16 | 0;
  i20 = _ass_try_realloc_array(HEAP32[i2 >> 2] | 0, i1, 8) | 0;
  HEAP32[i2 >> 2] = i20;
  i20 = ___errno_location() | 0;
  if (!(HEAP32[i20 >> 2] | 0)) {
   HEAP32[i3 >> 2] = i1;
   i1 = HEAP32[i4 >> 2] | 0;
   break;
  } else {
   i20 = 0;
   STACKTOP = i19;
   return i20 | 0;
  }
 } while (0);
 i20 = (HEAP32[i2 >> 2] | 0) + (i1 << 3) | 0;
 HEAP32[i20 >> 2] = i6;
 HEAP32[i20 + 4 >> 2] = i5;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 i20 = 1;
 STACKTOP = i19;
 return i20 | 0;
}

function _hash_insert(i7, i8, i9, i15) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i16 = i19 + 4 | 0;
 i18 = i19;
 i17 = i9 + 12 | 0;
 i5 = HEAP32[i17 >> 2] | 0;
 i6 = HEAP8[i7 >> 0] | 0;
 if (!(i6 << 24 >> 24)) i1 = 0; else {
  i2 = i7;
  i1 = 0;
  i3 = i6;
  do {
   i2 = i2 + 1 | 0;
   i1 = (i1 * 31 | 0) + (i3 << 24 >> 24) | 0;
   i3 = HEAP8[i2 >> 0] | 0;
  } while (i3 << 24 >> 24 != 0);
 }
 i14 = i9 + 4 | 0;
 i2 = HEAP32[i14 >> 2] | 0;
 i1 = i5 + (((i1 >>> 0) % (i2 >>> 0) | 0) << 2) | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 L5 : do if (i3) {
  i4 = i5 + (i2 + -1 << 2) | 0;
  while (1) {
   i2 = HEAP32[i3 >> 2] | 0;
   if ((HEAP8[i2 >> 0] | 0) == i6 << 24 >> 24) if (!(_strcmp(i2, i7) | 0)) break;
   i1 = i1 + -4 | 0;
   i1 = i1 >>> 0 < i5 >>> 0 ? i4 : i1;
   i3 = HEAP32[i1 >> 2] | 0;
   if (!i3) break L5;
  }
  HEAP32[i18 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = i8;
  i18 = 0;
  STACKTOP = i19;
  return i18 | 0;
 } while (0);
 HEAP32[i18 >> 2] = 0;
 i2 = _ft_mem_alloc(i15, 8, i18) | 0;
 i3 = HEAP32[i18 >> 2] | 0;
 if (i3 | 0) {
  i18 = i3;
  STACKTOP = i19;
  return i18 | 0;
 }
 HEAP32[i1 >> 2] = i2;
 HEAP32[i2 >> 2] = i7;
 HEAP32[i2 + 4 >> 2] = i8;
 i13 = i9 + 8 | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 do if (i1 >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) {
  i11 = HEAP32[i17 >> 2] | 0;
  i12 = HEAP32[i14 >> 2] | 0;
  HEAP32[i16 >> 2] = 0;
  i1 = i12 << 1;
  HEAP32[i14 >> 2] = i1;
  HEAP32[i9 >> 2] = (i1 >>> 0) / 3 | 0;
  i1 = _ft_mem_realloc(i15, 4, 0, i1, 0, i16) | 0;
  HEAP32[i17 >> 2] = i1;
  i1 = HEAP32[i16 >> 2] | 0;
  if (i1 | 0) {
   HEAP32[i18 >> 2] = i1;
   i18 = i1;
   STACKTOP = i19;
   return i18 | 0;
  }
  if (i12 | 0) {
   i8 = i11;
   i9 = 0;
   while (1) {
    i1 = HEAP32[i8 >> 2] | 0;
    i10 = i1;
    if (i1 | 0) {
     i5 = HEAP32[i1 >> 2] | 0;
     i6 = HEAP32[i17 >> 2] | 0;
     i7 = HEAP8[i5 >> 0] | 0;
     if (!(i7 << 24 >> 24)) i1 = 0; else {
      i2 = i5;
      i1 = 0;
      i3 = i7;
      do {
       i2 = i2 + 1 | 0;
       i1 = (i1 * 31 | 0) + (i3 << 24 >> 24) | 0;
       i3 = HEAP8[i2 >> 0] | 0;
      } while (i3 << 24 >> 24 != 0);
     }
     i2 = HEAP32[i14 >> 2] | 0;
     i1 = i6 + (((i1 >>> 0) % (i2 >>> 0) | 0) << 2) | 0;
     i3 = HEAP32[i1 >> 2] | 0;
     L33 : do if (i3) {
      i4 = i6 + (i2 + -1 << 2) | 0;
      i2 = i3;
      do {
       i2 = HEAP32[i2 >> 2] | 0;
       if ((HEAP8[i2 >> 0] | 0) == i7 << 24 >> 24) if (!(_strcmp(i2, i5) | 0)) break L33;
       i1 = i1 + -4 | 0;
       i1 = i1 >>> 0 < i6 >>> 0 ? i4 : i1;
       i2 = HEAP32[i1 >> 2] | 0;
      } while ((i2 | 0) != 0);
     } while (0);
     HEAP32[i1 >> 2] = i10;
    }
    i9 = i9 + 1 | 0;
    if ((i9 | 0) == (i12 | 0)) break; else i8 = i8 + 4 | 0;
   }
  }
  _ft_mem_free(i15, i11);
  i1 = HEAP32[i16 >> 2] | 0;
  HEAP32[i18 >> 2] = i1;
  if (!i1) {
   i1 = HEAP32[i13 >> 2] | 0;
   break;
  } else {
   i18 = i1;
   STACKTOP = i19;
   return i18 | 0;
  }
 } while (0);
 HEAP32[i13 >> 2] = i1 + 1;
 i18 = 0;
 STACKTOP = i19;
 return i18 | 0;
}

function _TT_Load_Composite_Glyph(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0;
 i16 = i15 + 200 | 0;
 i17 = HEAP32[i15 + 204 >> 2] | 0;
 i18 = HEAP32[i15 + 12 >> 2] | 0;
 i13 = i18 + 88 | 0;
 i14 = 0;
 i5 = HEAP32[i16 >> 2] | 0;
 while (1) {
  i12 = i14;
  i14 = i14 + 1 | 0;
  i1 = _FT_GlyphLoader_CheckSubGlyphs(i18, i14) | 0;
  if (i1 | 0) {
   i2 = 25;
   break;
  }
  i3 = i5 + 4 | 0;
  if (i3 >>> 0 > i17 >>> 0) {
   i1 = 21;
   i2 = 25;
   break;
  }
  i10 = HEAP32[i13 >> 2] | 0;
  i7 = i10 + (i12 << 5) + 12 | 0;
  HEAP32[i7 >> 2] = 0;
  i4 = i10 + (i12 << 5) + 8 | 0;
  HEAP32[i4 >> 2] = 0;
  i8 = HEAPU8[i5 + 1 >> 0] | 0;
  i11 = (HEAPU8[i5 >> 0] << 8 | i8) & 65535;
  HEAP16[i10 + (i12 << 5) + 4 >> 1] = i11;
  HEAP32[i10 + (i12 << 5) >> 2] = HEAPU8[i5 + 2 >> 0] << 8 | HEAPU8[i5 + 3 >> 0];
  i1 = i8 << 1 & 2;
  i2 = i1 + 2 | 0;
  i9 = (i8 & 8 | 0) == 0;
  do if (i9) if (!(i8 & 64)) {
   i1 = i2 | i8 >>> 4 & 8;
   break;
  } else {
   i1 = i1 + 6 | 0;
   break;
  } else i1 = i1 | 4; while (0);
  if ((i3 + i1 | 0) >>> 0 > i17 >>> 0) {
   i1 = 21;
   i2 = 25;
   break;
  }
  i1 = (i8 & 1 | 0) != 0;
  do if (!(i8 & 2)) if (i1) {
   HEAP32[i4 >> 2] = HEAPU8[i3 >> 0] << 8 | HEAPU8[i5 + 5 >> 0];
   i6 = i5 + 8 | 0;
   i1 = HEAPU8[i5 + 6 >> 0] << 8 | HEAPU8[i5 + 7 >> 0];
   break;
  } else {
   HEAP32[i4 >> 2] = HEAPU8[i3 >> 0];
   i6 = i5 + 6 | 0;
   i1 = HEAPU8[i5 + 5 >> 0] | 0;
   break;
  } else if (i1) {
   HEAP32[i4 >> 2] = (HEAPU8[i3 >> 0] << 8 | HEAPU8[i5 + 5 >> 0]) << 16 >> 16;
   i6 = i5 + 8 | 0;
   i1 = (HEAPU8[i5 + 6 >> 0] << 8 | HEAPU8[i5 + 7 >> 0]) << 16 >> 16;
   break;
  } else {
   HEAP32[i4 >> 2] = HEAP8[i3 >> 0];
   i6 = i5 + 6 | 0;
   i1 = HEAP8[i5 + 5 >> 0] | 0;
   break;
  } while (0);
  HEAP32[i7 >> 2] = i1;
  do if (i9) {
   if (i8 & 64 | 0) {
    i1 = 0;
    i2 = (HEAPU8[i6 + 2 >> 0] << 8 | HEAPU8[i6 + 3 >> 0]) << 16 >> 14;
    i3 = 0;
    i4 = (HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0]) << 16 >> 14;
    i5 = i6 + 4 | 0;
    break;
   }
   if (!(i8 & 128)) {
    i1 = 0;
    i2 = 65536;
    i3 = 0;
    i4 = 65536;
    i5 = i6;
   } else {
    i1 = (HEAPU8[i6 + 2 >> 0] << 8 | HEAPU8[i6 + 3 >> 0]) << 16 >> 14;
    i2 = (HEAPU8[i6 + 6 >> 0] << 8 | HEAPU8[i6 + 7 >> 0]) << 16 >> 14;
    i3 = (HEAPU8[i6 + 4 >> 0] << 8 | HEAPU8[i6 + 5 >> 0]) << 16 >> 14;
    i4 = (HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0]) << 16 >> 14;
    i5 = i6 + 8 | 0;
   }
  } else {
   i4 = (HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0]) << 16 >> 14;
   i1 = 0;
   i2 = i4;
   i3 = 0;
   i5 = i6 + 2 | 0;
  } while (0);
  HEAP32[i10 + (i12 << 5) + 16 >> 2] = i4;
  HEAP32[i10 + (i12 << 5) + 20 >> 2] = i3;
  HEAP32[i10 + (i12 << 5) + 24 >> 2] = i1;
  HEAP32[i10 + (i12 << 5) + 28 >> 2] = i2;
  if (!(i11 & 32)) {
   i2 = 24;
   break;
  }
 }
 if ((i2 | 0) == 24) {
  HEAP32[i18 + 84 >> 2] = i14;
  i18 = i5 + (_FT_Stream_Pos(HEAP32[i15 + 24 >> 2] | 0) | 0) - i17 | 0;
  HEAP32[i15 + 168 >> 2] = i18;
  HEAP32[i16 >> 2] = i5;
  i18 = 0;
  return i18 | 0;
 } else if ((i2 | 0) == 25) return i1 | 0;
 return 0;
}

function _ps_tofixedarray(i12, i8, i5, i6, i9) {
 i12 = i12 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i13;
 i2 = HEAP32[i12 >> 2] | 0;
 HEAP32[i11 >> 2] = i2;
 i1 = i2;
 L1 : do if (i2 >>> 0 < i8 >>> 0) {
  i10 = HEAP8[i2 >> 0] | 0;
  i10 = i10 << 24 >> 24 == 91 ? 93 : i10 << 24 >> 24 == 123 ? 125 : 0;
  i3 = i10 << 24 >> 24 != 0;
  if (i3) {
   i4 = i2 + 1 | 0;
   HEAP32[i11 >> 2] = i4;
   i1 = i4;
  } else i4 = i2;
  i7 = i3 ^ 1;
  L6 : do if (!i6) {
   i2 = 0;
   while (1) {
    if (i4 >>> 0 >= i8 >>> 0) break L1;
    i3 = i1;
    L10 : do if (i3 >>> 0 < i8 >>> 0) while (1) {
     switch (HEAP8[i3 >> 0] | 0) {
     case 0:
     case 12:
     case 9:
     case 10:
     case 13:
     case 32:
      break;
     case 37:
      {
       i1 = i3;
       i3 = 37;
       L14 : while (1) {
        switch (i3 << 24 >> 24) {
        case 10:
        case 13:
         break L14;
        default:
         {}
        }
        i3 = i1 + 1 | 0;
        if (i3 >>> 0 >= i8 >>> 0) {
         i1 = i3;
         break;
        }
        i1 = i3;
        i3 = HEAP8[i3 >> 0] | 0;
       }
       break;
      }
     default:
      break L10;
     }
     i3 = i1 + 1 | 0;
     i1 = i3;
     if (i3 >>> 0 >= i8 >>> 0) break L10;
    } while (0);
    HEAP32[i11 >> 2] = i1;
    i3 = i1;
    if (i3 >>> 0 >= i8 >>> 0) break L1;
    if ((HEAP8[i3 >> 0] | 0) == i10 << 24 >> 24) {
     i1 = i3;
     break L6;
    }
    _PS_Conv_ToFixed(i11, i8, i9) | 0;
    i4 = HEAP32[i11 >> 2] | 0;
    i3 = (i3 | 0) == (i4 | 0);
    i2 = i2 + 1 | 0;
    i1 = i4;
    if (i3 | i7) {
     i2 = i3 ? -1 : i2;
     break L1;
    }
   }
  } else {
   i2 = 0;
   while (1) {
    if (i4 >>> 0 >= i8 >>> 0) break L1;
    i3 = i1;
    L26 : do if (i3 >>> 0 < i8 >>> 0) while (1) {
     switch (HEAP8[i3 >> 0] | 0) {
     case 0:
     case 12:
     case 9:
     case 10:
     case 13:
     case 32:
      break;
     case 37:
      {
       i1 = i3;
       i3 = 37;
       L30 : while (1) {
        switch (i3 << 24 >> 24) {
        case 10:
        case 13:
         break L30;
        default:
         {}
        }
        i3 = i1 + 1 | 0;
        if (i3 >>> 0 >= i8 >>> 0) {
         i1 = i3;
         break;
        }
        i1 = i3;
        i3 = HEAP8[i3 >> 0] | 0;
       }
       break;
      }
     default:
      break L26;
     }
     i3 = i1 + 1 | 0;
     i1 = i3;
     if (i3 >>> 0 >= i8 >>> 0) break L26;
    } while (0);
    HEAP32[i11 >> 2] = i1;
    i3 = i1;
    if (i3 >>> 0 >= i8 >>> 0) break L1;
    if ((HEAP8[i3 >> 0] | 0) == i10 << 24 >> 24) {
     i1 = i3;
     break L6;
    }
    if ((i2 | 0) >= (i5 | 0)) break L1;
    i4 = _PS_Conv_ToFixed(i11, i8, i9) | 0;
    HEAP32[i6 + (i2 << 2) >> 2] = i4;
    i4 = HEAP32[i11 >> 2] | 0;
    i3 = (i3 | 0) == (i4 | 0);
    i2 = i2 + 1 | 0;
    i1 = i4;
    if (i3 | i7) {
     i2 = i3 ? -1 : i2;
     break L1;
    }
   }
  } while (0);
  i1 = i1 + 1 | 0;
  HEAP32[i11 >> 2] = i1;
 } else i2 = 0; while (0);
 HEAP32[i12 >> 2] = i1;
 STACKTOP = i13;
 return i2 | 0;
}

function _FcLangNormalize(i13) {
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i15 = i17 + 48 | 0;
 i14 = i17 + 40 | 0;
 i10 = i17 + 32 | 0;
 i11 = i17 + 24 | 0;
 i9 = i17 + 16 | 0;
 i7 = i17 + 8 | 0;
 i3 = i17;
 if (!i13) {
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 if (!(HEAP8[i13 >> 0] | 0)) {
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 L7 : do if (!(_FcStrCmpIgnoreCase(i13, 350458) | 0)) i16 = 5; else if (!(_FcStrCmpIgnoreCase(i13, 349442) | 0)) i16 = 5; else {
  i12 = _FcStrCopy(i13) | 0;
  if (!i12) i1 = 0; else {
   i1 = _strchr(i12, 64) | 0;
   if (!i1) {
    i8 = 0;
    i2 = 0;
   } else {
    HEAP8[i1 >> 0] = 0;
    i2 = i1 + 1 | 0;
    i8 = _strlen(i2) | 0;
   }
   i1 = _strchr(i12, 46) | 0;
   if (i1) {
    HEAP8[i1 >> 0] = 0;
    i1 = i1 + 1 | 0;
    if (!i2) i2 = 0; else {
     _memmove(i1 | 0, i2 | 0, i8 + 1 | 0) | 0;
     i2 = i1;
    }
   }
   i1 = _strchr(i12, 95) | 0;
   if (!i1) {
    i1 = _strchr(i12, 45) | 0;
    if (!i1) {
     i5 = 0;
     i6 = 0;
    } else i16 = 14;
   } else i16 = 14;
   if ((i16 | 0) == 14) {
    HEAP8[i1 >> 0] = 0;
    i6 = i1 + 1 | 0;
    i5 = _strlen(i6) | 0;
   }
   do if (((_strlen(i12) | 0) & -2 | 0) == 2) {
    i4 = (i6 | 0) != 0;
    if (!((i5 & -2 | 0) == 2 | i4 ^ 1)) {
     i1 = HEAP32[22811] | 0;
     HEAP32[i7 >> 2] = i13;
     _fprintf(i1, 349507, i7) | 0;
     i1 = 0;
     break;
    }
    if (i4) HEAP8[i6 + -1 >> 0] = 45;
    i3 = (i2 | 0) != 0;
    if (i3) HEAP8[i2 + -1 >> 0] = 64;
    i1 = _FcStrDowncase(i12) | 0;
    if (!i1) i1 = 0; else {
     if (i4) {
      if (HEAP32[91917] & 2048 | 0) {
       HEAP32[i9 >> 2] = i12;
       _printf(349564, i9) | 0;
      }
      if ((_FcLangSetIndex(i12) | 0) < 0) {
       _memmove(i6 + -1 | 0, i6 + i5 | 0, (i8 | 0 ? i8 + 2 | 0 : 1) | 0) | 0;
       if (i3) {
        i2 = i6;
        i16 = 29;
       } else i16 = 34;
      }
     } else i16 = 29;
     if ((i16 | 0) == 29) if (!i2) i16 = 34; else {
      if (HEAP32[91917] & 2048 | 0) {
       HEAP32[i11 >> 2] = i12;
       _printf(349564, i11) | 0;
      }
      if ((_FcLangSetIndex(i12) | 0) < 0) {
       HEAP8[i2 + -1 >> 0] = 0;
       i16 = 34;
      }
     }
     if ((i16 | 0) == 34) {
      if (HEAP32[91917] & 2048 | 0) {
       HEAP32[i10 >> 2] = i12;
       _printf(349564, i10) | 0;
      }
      if ((_FcLangSetIndex(i12) | 0) < 0) break;
     }
     _FcStrFree(i1);
     i1 = i12;
     break L7;
    }
   } else {
    i1 = HEAP32[22811] | 0;
    HEAP32[i3 >> 2] = i13;
    _fprintf(i1, 349448, i3) | 0;
    i1 = 0;
   } while (0);
   if (i12) _free(i12);
  }
 } while (0);
 if ((i16 | 0) == 5) i1 = _FcStrCopy(349964) | 0;
 if (!(HEAP32[91917] & 2048)) {
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 if (!i1) {
  HEAP32[i15 >> 2] = i13;
  _printf(349621, i15) | 0;
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 } else {
  HEAP32[i14 >> 2] = i13;
  HEAP32[i14 + 4 >> 2] = i1;
  _printf(349599, i14) | 0;
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 return 0;
}

function _FcPopExpr(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, i4 = 0, i6 = 0;
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 if (!i1) {
  i5 = 0;
  return i5 | 0;
 }
 if ((HEAP32[i1 + 4 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
  i5 = 0;
  return i5 | 0;
 }
 i2 = i1 + 8 | 0;
 do switch (HEAP32[i2 >> 2] | 0) {
 case 18:
  {
   i1 = HEAP32[i1 + 16 >> 2] | 0;
   HEAP32[i2 >> 2] = 0;
   break;
  }
 case 2:
 case 1:
  {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   i1 = _FcConfigAllocExpr(HEAP32[i5 + 16 >> 2] | 0) | 0;
   if (!i1) i1 = 0; else {
    HEAP32[i1 >> 2] = 2;
    i4 = ___strdup(i2) | 0;
    HEAP32[i1 + 8 >> 2] = i4;
   }
   break;
  }
 case 5:
  {
   i4 = i1 + 16 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   i4 = HEAP32[i4 + 4 >> 2] | 0;
   i1 = _FcConfigAllocExpr(HEAP32[i5 + 16 >> 2] | 0) | 0;
   if (!i1) i1 = 0; else {
    HEAP32[i1 >> 2] = 9;
    i6 = i1 + 8 | 0;
    HEAP32[i6 >> 2] = i2;
    HEAP32[i6 + 4 >> 2] = i4;
   }
   break;
  }
 case 3:
  {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   i1 = _FcConfigAllocExpr(HEAP32[i5 + 16 >> 2] | 0) | 0;
   if (!i1) i1 = 0; else {
    HEAP32[i1 >> 2] = 10;
    i6 = ___strdup(i2) | 0;
    HEAP32[i1 + 8 >> 2] = i6;
   }
   break;
  }
 case 16:
  {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   i1 = _FcConfigAllocExpr(HEAP32[i5 + 16 >> 2] | 0) | 0;
   if (!i1) i1 = 0; else {
    HEAP32[i1 >> 2] = 7;
    i6 = _FcLangSetCopy(i2) | 0;
    HEAP32[i1 + 8 >> 2] = i6;
   }
   break;
  }
 case 9:
 case 8:
 case 7:
  {
   i1 = HEAP32[i1 + 16 >> 2] | 0;
   HEAP32[i2 >> 2] = 0;
   break;
  }
 case 10:
  {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   i1 = _FcConfigAllocExpr(HEAP32[i5 + 16 >> 2] | 0) | 0;
   if (!i1) i1 = 0; else {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = i2;
   }
   break;
  }
 case 11:
  {
   d3 = +HEAPF64[i1 + 16 >> 3];
   i1 = _FcConfigAllocExpr(HEAP32[i5 + 16 >> 2] | 0) | 0;
   if (!i1) i1 = 0; else {
    HEAP32[i1 >> 2] = 1;
    HEAPF64[i1 + 8 >> 3] = d3;
   }
   break;
  }
 case 12:
  {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   i1 = _FcConfigAllocExpr(HEAP32[i5 + 16 >> 2] | 0) | 0;
   if (!i1) i1 = 0; else {
    HEAP32[i1 >> 2] = 3;
    i4 = _malloc(16) | 0;
    if (i4 | 0) {
     HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
    }
    HEAP32[i1 + 8 >> 2] = i4;
   }
   break;
  }
 case 13:
  {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   i1 = _FcConfigAllocExpr(HEAP32[i5 + 16 >> 2] | 0) | 0;
   if (!i1) i1 = 0; else {
    HEAP32[i1 >> 2] = 4;
    i6 = _FcRangeCopy(i2) | 0;
    HEAP32[i1 + 8 >> 2] = i6;
   }
   break;
  }
 case 14:
  {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   i1 = _FcConfigAllocExpr(HEAP32[i5 + 16 >> 2] | 0) | 0;
   if (!i1) i1 = 0; else {
    HEAP32[i1 >> 2] = 5;
    HEAP32[i1 + 8 >> 2] = i2;
   }
   break;
  }
 case 15:
  {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   i1 = _FcConfigAllocExpr(HEAP32[i5 + 16 >> 2] | 0) | 0;
   if (!i1) i1 = 0; else {
    HEAP32[i1 >> 2] = 6;
    i6 = _FcCharSetCopy(i2) | 0;
    HEAP32[i1 + 8 >> 2] = i6;
   }
   break;
  }
 default:
  i1 = 0;
 } while (0);
 _FcVStackPopAndDestroy(i5);
 i6 = i1;
 return i6 | 0;
}

function _normal_scanPercent(i7, i2, i8, i10) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 if ((i2 | 0) == (i8 | 0)) {
  i10 = -1;
  return i10 | 0;
 }
 i9 = i7 + 76 | 0;
 switch (HEAP8[i9 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) {
 case 29:
  {
   HEAP32[i10 >> 2] = i2;
   i10 = 0;
   return i10 | 0;
  }
 case 24:
 case 22:
  {
   i1 = 1;
   break;
  }
 case 5:
  {
   if ((i8 - i2 | 0) < 2) {
    i10 = -2;
    return i10 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i7 + 344 >> 2] & 255](i7, i2) | 0)) {
    HEAP32[i10 >> 2] = i2;
    i10 = 0;
    return i10 | 0;
   } else i1 = 2;
   break;
  }
 case 6:
  {
   if ((i8 - i2 | 0) < 3) {
    i10 = -2;
    return i10 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i7 + 348 >> 2] & 255](i7, i2) | 0)) {
    HEAP32[i10 >> 2] = i2;
    i10 = 0;
    return i10 | 0;
   } else i1 = 3;
   break;
  }
 case 7:
  {
   if ((i8 - i2 | 0) < 4) {
    i10 = -2;
    return i10 | 0;
   }
   if (!(FUNCTION_TABLE_iii[HEAP32[i7 + 352 >> 2] & 255](i7, i2) | 0)) {
    HEAP32[i10 >> 2] = i2;
    i10 = 0;
    return i10 | 0;
   } else i1 = 4;
   break;
  }
 case 30:
 case 9:
 case 10:
 case 21:
  {
   HEAP32[i10 >> 2] = i2;
   i10 = 22;
   return i10 | 0;
  }
 default:
  {
   HEAP32[i10 >> 2] = i2;
   i10 = 0;
   return i10 | 0;
  }
 }
 i1 = i2 + i1 | 0;
 if ((i1 | 0) == (i8 | 0)) {
  i10 = -1;
  return i10 | 0;
 }
 i3 = i8;
 i4 = i7 + 332 | 0;
 i5 = i7 + 336 | 0;
 i6 = i7 + 340 | 0;
 L33 : while (1) {
  switch (HEAP8[i9 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
  case 29:
   {
    i2 = 18;
    break L33;
   }
  case 18:
   {
    i2 = 29;
    break L33;
   }
  case 27:
  case 26:
  case 25:
  case 24:
  case 22:
   {
    i2 = 1;
    break;
   }
  case 5:
   {
    if ((i3 - i1 | 0) < 2) {
     i1 = -2;
     i2 = 31;
     break L33;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i7, i1) | 0)) {
     i2 = 21;
     break L33;
    } else i2 = 2;
    break;
   }
  case 6:
   {
    if ((i3 - i1 | 0) < 3) {
     i1 = -2;
     i2 = 31;
     break L33;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i7, i1) | 0)) {
     i2 = 24;
     break L33;
    } else i2 = 3;
    break;
   }
  case 7:
   {
    if ((i3 - i1 | 0) < 4) {
     i1 = -2;
     i2 = 31;
     break L33;
    }
    if (!(FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i7, i1) | 0)) {
     i2 = 27;
     break L33;
    } else i2 = 4;
    break;
   }
  default:
   {
    i2 = 30;
    break L33;
   }
  }
  i1 = i1 + i2 | 0;
  if ((i1 | 0) == (i8 | 0)) {
   i1 = -1;
   i2 = 31;
   break;
  }
 }
 if ((i2 | 0) == 18) {
  HEAP32[i10 >> 2] = i1;
  i10 = 0;
  return i10 | 0;
 } else if ((i2 | 0) == 21) {
  HEAP32[i10 >> 2] = i1;
  i10 = 0;
  return i10 | 0;
 } else if ((i2 | 0) == 24) {
  HEAP32[i10 >> 2] = i1;
  i10 = 0;
  return i10 | 0;
 } else if ((i2 | 0) == 27) {
  HEAP32[i10 >> 2] = i1;
  i10 = 0;
  return i10 | 0;
 } else if ((i2 | 0) == 29) {
  HEAP32[i10 >> 2] = i1 + 1;
  i10 = 28;
  return i10 | 0;
 } else if ((i2 | 0) == 30) {
  HEAP32[i10 >> 2] = i1;
  i10 = 0;
  return i10 | 0;
 } else if ((i2 | 0) == 31) return i1 | 0;
 return 0;
}

function _af_latin_metrics_scale_dim(i10, i1, i6) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i5 = (i6 | 0) == 0;
 i3 = i1 + 8 | 0;
 i4 = HEAP32[(i5 ? i1 + 4 | 0 : i3) >> 2] | 0;
 i9 = HEAP32[(i5 ? i1 + 12 | 0 : i1 + 16 | 0) >> 2] | 0;
 i2 = i10 + 44 + (i6 * 1572 | 0) + 1564 | 0;
 i1 = i10 + 44 + (i6 * 1572 | 0) + 1568 | 0;
 if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) return;
 HEAP32[i2 >> 2] = i4;
 HEAP32[i1 >> 2] = i9;
 i8 = i10 + 1832 | 0;
 i2 = HEAP32[i8 >> 2] | 0;
 L5 : do if (!i2) i7 = i4; else {
  i1 = 0;
  while (1) {
   if (HEAP32[i10 + 1836 + (i1 * 28 | 0) + 24 >> 2] & 8 | 0) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i2 >>> 0) {
    i7 = i4;
    break L5;
   }
  }
  i1 = _FT_MulFix(HEAP32[i10 + 1836 + (i1 * 28 | 0) + 12 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
  i7 = HEAP16[(HEAP32[(HEAP32[i10 + 4 >> 2] | 0) + 88 >> 2] | 0) + 12 >> 1] | 0;
  i2 = HEAP32[(HEAP32[i10 + 36 >> 2] | 0) + 12 >> 2] | 0;
  i2 = ((i2 | 0) == 0 ? 40 : (i7 & 65535) > 5 & (i7 & 65535) >>> 0 <= i2 >>> 0 ? 52 : 40) + i1 & -64;
  if ((i6 | 0) == 1 & (i1 | 0) != (i2 | 0)) i7 = _FT_MulDiv(i4, i2, i1) | 0; else i7 = i4;
 } while (0);
 HEAP32[i10 + 44 + (i6 * 1572 | 0) >> 2] = i7;
 HEAP32[i10 + 44 + (i6 * 1572 | 0) + 4 >> 2] = i9;
 if (i5) {
  HEAP32[i10 + 8 >> 2] = i7;
  i1 = i10 + 16 | 0;
 } else {
  HEAP32[i10 + 12 >> 2] = i7;
  i1 = i10 + 20 | 0;
 }
 HEAP32[i1 >> 2] = i9;
 i2 = i10 + 44 + (i6 * 1572 | 0) + 8 | 0;
 if (HEAP32[i2 >> 2] | 0) {
  i1 = 0;
  do {
   i5 = _FT_MulFix(HEAP32[i10 + 44 + (i6 * 1572 | 0) + 12 + (i1 * 12 | 0) >> 2] | 0, i7) | 0;
   HEAP32[i10 + 44 + (i6 * 1572 | 0) + 12 + (i1 * 12 | 0) + 4 >> 2] = i5;
   HEAP32[i10 + 44 + (i6 * 1572 | 0) + 12 + (i1 * 12 | 0) + 8 >> 2] = i5;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < (HEAP32[i2 >> 2] | 0) >>> 0);
 }
 i5 = (_FT_MulFix(HEAP32[i10 + 44 + (i6 * 1572 | 0) + 208 >> 2] | 0, i7) | 0) < 40 & 1;
 HEAP8[i10 + 44 + (i6 * 1572 | 0) + 212 >> 0] = i5;
 if ((i6 | 0) != 1) return;
 if (!(HEAP32[i8 >> 2] | 0)) return; else i1 = 0;
 do {
  i11 = i10 + 1836 + (i1 * 28 | 0) | 0;
  i6 = (_FT_MulFix(HEAP32[i11 >> 2] | 0, i7) | 0) + i9 | 0;
  i2 = i10 + 1836 + (i1 * 28 | 0) + 4 | 0;
  HEAP32[i2 >> 2] = i6;
  i3 = i10 + 1836 + (i1 * 28 | 0) + 8 | 0;
  HEAP32[i3 >> 2] = i6;
  i6 = i10 + 1836 + (i1 * 28 | 0) + 12 | 0;
  i5 = (_FT_MulFix(HEAP32[i6 >> 2] | 0, i7) | 0) + i9 | 0;
  HEAP32[i10 + 1836 + (i1 * 28 | 0) + 16 >> 2] = i5;
  i4 = i10 + 1836 + (i1 * 28 | 0) + 20 | 0;
  HEAP32[i4 >> 2] = i5;
  i5 = i10 + 1836 + (i1 * 28 | 0) + 24 | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -2;
  i6 = _FT_MulFix((HEAP32[i11 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0, i7) | 0;
  if ((i6 + 48 | 0) >>> 0 < 97) {
   i12 = (i6 | 0) < 0;
   i11 = i12 ? 0 - i6 | 0 : i6;
   i11 = (i11 | 0) < 32 ? 0 : (i11 | 0) < 48 ? 32 : 64;
   i6 = (HEAP32[i2 >> 2] | 0) + 32 & -64;
   HEAP32[i3 >> 2] = i6;
   HEAP32[i4 >> 2] = i6 - (i12 ? 0 - i11 | 0 : i11);
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 1;
  }
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0);
 return;
}

function _cff_index_access_element(i12, i2, i13, i11) {
 i12 = i12 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i15;
 if (!i12) {
  i14 = 6;
  STACKTOP = i15;
  return i14 | 0;
 }
 i9 = i12 + 8 | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 if (i5 >>> 0 <= i2 >>> 0) {
  i14 = 6;
  STACKTOP = i15;
  return i14 | 0;
 }
 i14 = HEAP32[i12 >> 2] | 0;
 i4 = HEAP32[i12 + 24 >> 2] | 0;
 L7 : do if (!i4) {
  i7 = i12 + 12 | 0;
  i1 = Math_imul(HEAPU8[i7 >> 0] | 0, i2) | 0;
  i1 = _FT_Stream_Seek(i14, (HEAP32[i12 + 4 >> 2] | 0) + 3 + i1 | 0) | 0;
  if (i1 | 0) {
   i14 = i1;
   STACKTOP = i15;
   return i14 | 0;
  }
  i1 = _FT_Stream_Read(HEAP32[i12 >> 2] | 0, i8, HEAPU8[i7 >> 0] | 0) | 0;
  if (i1 | 0) {
   i14 = i1;
   STACKTOP = i15;
   return i14 | 0;
  }
  i3 = HEAP8[i7 >> 0] | 0;
  if (!(i3 << 24 >> 24)) {
   i1 = 0;
   i2 = 0;
   i10 = 24;
   break;
  }
  i5 = i3 & 255;
  i1 = 0;
  i4 = 0;
  do {
   i1 = HEAPU8[i8 + i4 >> 0] | 0 | i1 << 8;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i5 | 0));
  if (!i1) {
   i1 = 0;
   i2 = 0;
   i10 = 24;
  } else while (1) {
   i6 = i2 + 1 | 0;
   i2 = _FT_Stream_Read(HEAP32[i12 >> 2] | 0, i8, i3 & 255) | 0;
   if (!i2) {
    i3 = HEAP8[i7 >> 0] | 0;
    if (!(i3 << 24 >> 24)) i10 = 16; else {
     i5 = i3 & 255;
     i3 = 0;
     i4 = 0;
     do {
      i3 = HEAPU8[i8 + i4 >> 0] | 0 | i3 << 8;
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i5 | 0));
     if (i3 | 0) {
      i10 = 22;
      break L7;
     }
    }
   } else i10 = 16;
   if ((i10 | 0) == 16) i10 = 0;
   if (i6 >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) {
    i10 = 24;
    break L7;
   }
   i2 = i6;
   i3 = HEAP8[i7 >> 0] | 0;
  }
 } else {
  i1 = HEAP32[i4 + (i2 << 2) >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i2 = 0;
   i10 = 24;
  } else {
   do {
    i2 = i2 + 1 | 0;
    i3 = HEAP32[i4 + (i2 << 2) >> 2] | 0;
   } while ((i3 | 0) == 0 & i2 >>> 0 < i5 >>> 0);
   i10 = 22;
  }
 } while (0);
 if ((i10 | 0) == 22) {
  i4 = HEAP32[i14 + 4 >> 2] | 0;
  if (i3 >>> 0 > (i4 + 1 | 0) >>> 0) {
   i2 = 0;
   i3 = HEAP32[i12 + 16 >> 2] | 0;
   i10 = 26;
  } else {
   i2 = 0;
   i10 = 25;
  }
 } else if ((i10 | 0) == 24) {
  i3 = 0;
  i4 = HEAP32[i14 + 4 >> 2] | 0;
  i10 = 25;
 }
 if ((i10 | 0) == 25) {
  i5 = HEAP32[i12 + 16 >> 2] | 0;
  if (i5 >>> 0 > (i4 + 1 - i3 | 0) >>> 0) {
   i3 = i5;
   i10 = 26;
  } else {
   i5 = i1;
   i1 = i3;
  }
 }
 if ((i10 | 0) == 26) {
  i5 = i1;
  i1 = i4 + 1 - i3 | 0;
 }
 if (!((i5 | 0) != 0 & i1 >>> 0 > i5 >>> 0)) {
  HEAP32[i13 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
  i14 = i2;
  STACKTOP = i15;
  return i14 | 0;
 }
 i3 = i1 - i5 | 0;
 HEAP32[i11 >> 2] = i3;
 i1 = HEAP32[i12 + 28 >> 2] | 0;
 if (i1 | 0) {
  HEAP32[i13 >> 2] = i1 + i5 + -1;
  i14 = i2;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = _FT_Stream_Seek(i14, i5 + -1 + (HEAP32[i12 + 16 >> 2] | 0) | 0) | 0;
 if (i1 | 0) {
  i14 = i1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i14 = _FT_Stream_ExtractFrame(i14, i3, i13) | 0;
 STACKTOP = i15;
 return i14 | 0;
}

function _FcOpPrint(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 do switch ((i1 & 65535) << 16 >> 16) {
 case 0:
  {
   _printf(348950, i2) | 0;
   break;
  }
 case 1:
  {
   _printf(348958, i2 + 8 | 0) | 0;
   break;
  }
 case 2:
  {
   _printf(348965, i2 + 16 | 0) | 0;
   break;
  }
 case 3:
  {
   _printf(348972, i2 + 24 | 0) | 0;
   break;
  }
 case 4:
  {
   _printf(348979, i2 + 32 | 0) | 0;
   break;
  }
 case 5:
  {
   _printf(348985, i2 + 40 | 0) | 0;
   break;
  }
 case 6:
  {
   _printf(348990, i2 + 48 | 0) | 0;
   break;
  }
 case 7:
  {
   _printf(348998, i2 + 56 | 0) | 0;
   break;
  }
 case 9:
  {
   _printf(349006, i2 + 64 | 0) | 0;
   break;
  }
 case 10:
  {
   _printf(349012, i2 + 72 | 0) | 0;
   break;
  }
 case 11:
  {
   _printf(348723, i2 + 80 | 0) | 0;
   break;
  }
 case 12:
  {
   _printf(348730, i2 + 88 | 0) | 0;
   break;
  }
 case 14:
  {
   _printf(348757, i2 + 96 | 0) | 0;
   break;
  }
 case 13:
  {
   _printf(348744, i2 + 104 | 0) | 0;
   break;
  }
 case 15:
  {
   _printf(348765, i2 + 112 | 0) | 0;
   break;
  }
 case 16:
  {
   _printf(348772, i2 + 120 | 0) | 0;
   break;
  }
 case 17:
  {
   _printf(349018, i2 + 128 | 0) | 0;
   break;
  }
 case 18:
  {
   _printf(349025, i2 + 136 | 0) | 0;
   break;
  }
 case 19:
  {
   _printf(349035, i2 + 144 | 0) | 0;
   break;
  }
 case 20:
  {
   _printf(348783, i2 + 152 | 0) | 0;
   break;
  }
 case 21:
  {
   _printf(348786, i2 + 160 | 0) | 0;
   break;
  }
 case 22:
  {
   _printf(348790, i2 + 168 | 0) | 0;
   if (i1 & 65536 | 0) _printf(348796, i2 + 176 | 0) | 0;
   break;
  }
 case 23:
  {
   _printf(348812, i2 + 184 | 0) | 0;
   if (i1 & 65536 | 0) _printf(348796, i2 + 192 | 0) | 0;
   break;
  }
 case 27:
  {
   _printf(348821, i2 + 200 | 0) | 0;
   break;
  }
 case 28:
  {
   _printf(348826, i2 + 208 | 0) | 0;
   break;
  }
 case 29:
  {
   _printf(348836, i2 + 216 | 0) | 0;
   break;
  }
 case 30:
  {
   _printf(348841, i2 + 224 | 0) | 0;
   break;
  }
 case 24:
  {
   _printf(348851, i2 + 232 | 0) | 0;
   break;
  }
 case 26:
  {
   _printf(348868, i2 + 240 | 0) | 0;
   break;
  }
 case 31:
  {
   _printf(348880, i2 + 248 | 0) | 0;
   break;
  }
 case 32:
  {
   _printf(348885, i2 + 256 | 0) | 0;
   break;
  }
 case 33:
  {
   _printf(348891, i2 + 264 | 0) | 0;
   break;
  }
 case 34:
  {
   _printf(348897, i2 + 272 | 0) | 0;
   break;
  }
 case 35:
  {
   _printf(349041, i2 + 280 | 0) | 0;
   break;
  }
 case 8:
  {
   _printf(349045, i2 + 288 | 0) | 0;
   break;
  }
 case 36:
  {
   _printf(348904, i2 + 296 | 0) | 0;
   break;
  }
 case 37:
  {
   _printf(349049, i2 + 304 | 0) | 0;
   break;
  }
 case 38:
  {
   _printf(349055, i2 + 312 | 0) | 0;
   break;
  }
 case 39:
  {
   _printf(349060, i2 + 320 | 0) | 0;
   break;
  }
 case 40:
  {
   _printf(349066, i2 + 328 | 0) | 0;
   break;
  }
 case 25:
  {
   _printf(348860, i2 + 336 | 0) | 0;
   if (i1 & 65536 | 0) _printf(348796, i2 + 344 | 0) | 0;
   break;
  }
 case 41:
  {
   _printf(348942, i2 + 352 | 0) | 0;
   break;
  }
 default:
  {}
 } while (0);
 STACKTOP = i2;
 return;
}

function _tt_cmap14_char_variants(i1, i2, i14) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i14 = i14 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i16;
 i7 = HEAP32[i1 + 24 >> 2] | 0;
 i15 = i1 + 16 | 0;
 i8 = HEAP32[i15 >> 2] | 0;
 i5 = i7 + 1 | 0;
 i6 = i1 + 28 | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 do if (i3 >>> 0 < i5 >>> 0) {
  HEAP32[i1 + 36 >> 2] = i2;
  i13 = i1 + 32 | 0;
  i1 = _ft_mem_realloc(i2, 4, i3, i5, HEAP32[i13 >> 2] | 0, i4) | 0;
  HEAP32[i13 >> 2] = i1;
  if (!(HEAP32[i4 >> 2] | 0)) {
   HEAP32[i6 >> 2] = i5;
   i13 = i1;
   break;
  }
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 } else i13 = HEAP32[i1 + 32 >> 2] | 0; while (0);
 if (!i7) i1 = i13; else {
  i12 = i8 + 10 | 0;
  i1 = i13;
  do {
   i11 = (HEAPU8[i12 + 1 >> 0] | 0) << 8 | (HEAPU8[i12 >> 0] | 0) << 16 | (HEAPU8[i12 + 2 >> 0] | 0);
   i2 = (HEAPU8[i12 + 4 >> 0] | 0) << 16 | (HEAPU8[i12 + 3 >> 0] | 0) << 24 | (HEAPU8[i12 + 5 >> 0] | 0) << 8 | (HEAPU8[i12 + 6 >> 0] | 0);
   i9 = (HEAPU8[i12 + 8 >> 0] | 0) << 16 | (HEAPU8[i12 + 7 >> 0] | 0) << 24 | (HEAPU8[i12 + 9 >> 0] | 0) << 8 | (HEAPU8[i12 + 10 >> 0] | 0);
   i12 = i12 + 11 | 0;
   L13 : do if (!i2) i10 = 14; else {
    i2 = (HEAP32[i15 >> 2] | 0) + i2 | 0;
    i6 = i2 + 4 | 0;
    i2 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
    i5 = 0;
    while (1) {
     while (1) {
      if (i5 >>> 0 >= i2 >>> 0) {
       i10 = 14;
       break L13;
      }
      i8 = (i2 + i5 | 0) >>> 1;
      i4 = i6 + (i8 << 2) + 3 | 0;
      i3 = i4 + -3 | 0;
      i3 = (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0) << 16 | (HEAPU8[i3 + 2 >> 0] | 0);
      if (i3 >>> 0 > i14 >>> 0) i2 = i8; else break;
     }
     if (((HEAPU8[i4 >> 0] | 0) + i3 | 0) >>> 0 < i14 >>> 0) i5 = i8 + 1 | 0; else {
      i10 = 22;
      break;
     }
    }
   } while (0);
   L21 : do if ((i10 | 0) == 14) {
    i10 = 0;
    if (i9) {
     i8 = (HEAP32[i15 >> 2] | 0) + i9 | 0;
     i2 = (HEAPU8[i8 + 1 >> 0] | 0) << 16 | (HEAPU8[i8 >> 0] | 0) << 24 | (HEAPU8[i8 + 2 >> 0] | 0) << 8 | (HEAPU8[i8 + 3 >> 0] | 0);
     i8 = i8 + 4 | 0;
     if (i2) {
      i3 = 0;
      L24 : while (1) {
       while (1) {
        i6 = (i3 + i2 | 0) >>> 1;
        i4 = i8 + (i6 * 5 | 0) + 3 | 0;
        i5 = i4 + -3 | 0;
        i5 = (HEAPU8[i5 + 1 >> 0] | 0) << 8 | (HEAPU8[i5 >> 0] | 0) << 16 | (HEAPU8[i5 + 2 >> 0] | 0);
        if (i5 >>> 0 > i14 >>> 0) break;
        if (i5 >>> 0 >= i14 >>> 0) break L24;
        i3 = i6 + 1 | 0;
        if (i3 >>> 0 >= i2 >>> 0) break L21;
       }
       if (i3 >>> 0 < i6 >>> 0) i2 = i6; else break L21;
      }
      if ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0)) i10 = 22;
     }
    }
   } while (0);
   if ((i10 | 0) == 22) {
    HEAP32[i1 >> 2] = i11;
    i1 = i1 + 4 | 0;
   }
   i7 = i7 + -1 | 0;
  } while ((i7 | 0) != 0);
 }
 HEAP32[i1 >> 2] = 0;
 i15 = i13;
 STACKTOP = i16;
 return i15 | 0;
}

function _cff_parse_private_dict(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i1 + 412 >> 2] | 0;
 i8 = i1 + 24 | 0;
 if ((HEAP32[i1 + 404 >> 2] | 0) >>> 0 < i8 >>> 0) {
  i10 = 161;
  return i10 | 0;
 }
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = i1 + 20 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i6 = HEAP8[i3 >> 0] | 0;
 L4 : do if (i6 << 24 >> 24 == 30) {
  i1 = (_cff_parse_real(i3, i2, 0, 0) | 0) >> 16;
  i10 = 16;
 } else {
  i4 = i3 + 1 | 0;
  i5 = i6 & 255;
  switch (i6 << 24 >> 24) {
  case 28:
   {
    if ((i3 + 3 | 0) >>> 0 > i2 >>> 0) {
     i5 = i2;
     i1 = 0;
     break L4;
    }
    i1 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i3 + 2 >> 0] | 0)) << 16 >> 16;
    i10 = 16;
    break L4;
   }
  case 29:
   {
    if ((i3 + 5 | 0) >>> 0 > i2 >>> 0) {
     i5 = i2;
     i1 = 0;
     break L4;
    }
    i1 = (HEAPU8[i3 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i3 + 3 >> 0] | 0) << 8 | (HEAPU8[i3 + 4 >> 0] | 0);
    i10 = 16;
    break L4;
   }
  default:
   {
    if ((i6 & 255) < 247) {
     i1 = i5 + -139 | 0;
     i10 = 16;
     break L4;
    }
    i1 = (i3 + 2 | 0) >>> 0 > i2 >>> 0;
    if ((i6 & 255) < 251) {
     if (i1) {
      i5 = i2;
      i1 = 0;
      break L4;
     }
     i1 = (HEAPU8[i4 >> 0] | 0 | (i5 << 8) + -63232) + 108 | 0;
     i10 = 16;
     break L4;
    } else {
     if (i1) {
      i5 = i2;
      i1 = 0;
      break L4;
     }
     i1 = (251 - i5 << 8) + -108 - (HEAPU8[i4 >> 0] | 0) | 0;
     i10 = 16;
     break L4;
    }
   }
  }
 } while (0);
 do if ((i10 | 0) == 16) if ((i1 | 0) < 0) {
  i10 = 3;
  return i10 | 0;
 } else {
  i5 = HEAP32[i7 >> 2] | 0;
  break;
 } while (0);
 HEAP32[i9 + 120 >> 2] = i1;
 i1 = HEAP32[i8 >> 2] | 0;
 i2 = HEAP8[i5 >> 0] | 0;
 L27 : do if (i2 << 24 >> 24 == 30) {
  i1 = (_cff_parse_real(i5, i1, 0, 0) | 0) >> 16;
  i10 = 32;
 } else {
  i3 = i5 + 1 | 0;
  i4 = i2 & 255;
  switch (i2 << 24 >> 24) {
  case 28:
   {
    if ((i5 + 3 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     break L27;
    }
    i1 = ((HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i5 + 2 >> 0] | 0)) << 16 >> 16;
    i10 = 32;
    break L27;
   }
  case 29:
   {
    if ((i5 + 5 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     break L27;
    }
    i1 = (HEAPU8[i5 + 2 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i5 + 3 >> 0] | 0) << 8 | (HEAPU8[i5 + 4 >> 0] | 0);
    i10 = 32;
    break L27;
   }
  default:
   {
    if ((i2 & 255) < 247) {
     i1 = i4 + -139 | 0;
     i10 = 32;
     break L27;
    }
    i1 = (i5 + 2 | 0) >>> 0 > i1 >>> 0;
    if ((i2 & 255) < 251) {
     if (i1) {
      i1 = 0;
      break L27;
     }
     i1 = (HEAPU8[i3 >> 0] | 0 | (i4 << 8) + -63232) + 108 | 0;
     i10 = 32;
     break L27;
    } else {
     if (i1) {
      i1 = 0;
      break L27;
     }
     i1 = (251 - i4 << 8) + -108 - (HEAPU8[i3 >> 0] | 0) | 0;
     i10 = 32;
     break L27;
    }
   }
  }
 } while (0);
 if ((i10 | 0) == 32) if ((i1 | 0) < 0) {
  i10 = 3;
  return i10 | 0;
 }
 HEAP32[i9 + 116 >> 2] = i1;
 i10 = 0;
 return i10 | 0;
}

function _ps_parser_to_bytes(i10, i8, i5, i9, i4) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = i10 + 8 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i3 = HEAP32[i10 >> 2] | 0;
 i1 = i3;
 L1 : do if (i1 >>> 0 < i2 >>> 0) while (1) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 0:
  case 12:
  case 9:
  case 10:
  case 13:
  case 32:
   {
    i1 = i3;
    break;
   }
  case 37:
   {
    i3 = 37;
    L5 : while (1) {
     switch (i3 << 24 >> 24) {
     case 10:
     case 13:
      break L5;
     default:
      {}
     }
     i3 = i1 + 1 | 0;
     if (i3 >>> 0 >= i2 >>> 0) {
      i1 = i3;
      break;
     }
     i1 = i3;
     i3 = HEAP8[i3 >> 0] | 0;
    }
    break;
   }
  default:
   {
    i1 = i3;
    break L1;
   }
  }
  i1 = i1 + 1 | 0;
  i3 = i1;
  if (i1 >>> 0 >= i2 >>> 0) {
   i1 = i3;
   break L1;
  }
 } else i1 = i3; while (0);
 HEAP32[i10 >> 2] = i1;
 i6 = i1;
 if (i6 >>> 0 >= i2 >>> 0) {
  i10 = 0;
  return i10 | 0;
 }
 if (!(i4 << 24 >> 24)) {
  i5 = i5 << 1;
  i7 = i2 - i1 | 0;
  i5 = i5 >>> 0 > i7 >>> 0 ? i7 : i5;
  if (!i5) {
   i2 = 0;
   i1 = 0;
  } else {
   i3 = 1;
   i1 = 0;
   i2 = 0;
   L18 : do {
    i4 = HEAP8[i6 + i2 >> 0] | 0;
    switch (i4 << 24 >> 24) {
    case 0:
    case 9:
    case 10:
    case 12:
    case 13:
    case 32:
     break;
    default:
     {
      if (i4 << 24 >> 24 < 0) break L18;
      i4 = HEAP8[284035 + (i4 & 127) >> 0] | 0;
      if ((i4 & 255) > 15) break L18;
      i3 = i4 << 24 >> 24 | i3 << 4;
      if (i3 & 256) {
       HEAP8[i8 + i1 >> 0] = i3;
       i3 = 1;
       i1 = i1 + 1 | 0;
      }
     }
    }
    i2 = i2 + 1 | 0;
   } while (i2 >>> 0 < i5 >>> 0);
   if ((i3 | 0) != 1) {
    HEAP8[i8 + i1 >> 0] = i3 << 4;
    i1 = i1 + 1 | 0;
   }
  }
  HEAP32[i9 >> 2] = i1;
  i1 = i6 + i2 | 0;
 } else {
  if ((HEAP8[i6 >> 0] | 0) != 60) {
   i10 = 3;
   return i10 | 0;
  }
  i6 = i6 + 1 | 0;
  i1 = i6;
  i3 = i5 << 1;
  if (i6 >>> 0 < i2 >>> 0) {
   i5 = i2 - i1 | 0;
   i5 = i3 >>> 0 > i5 >>> 0 ? i5 : i3;
   if (!i5) {
    i2 = 0;
    i1 = 0;
   } else {
    i3 = 1;
    i1 = 0;
    i2 = 0;
    L36 : do {
     i4 = HEAP8[i6 + i2 >> 0] | 0;
     switch (i4 << 24 >> 24) {
     case 0:
     case 9:
     case 10:
     case 12:
     case 13:
     case 32:
      break;
     default:
      {
       if (i4 << 24 >> 24 < 0) break L36;
       i4 = HEAP8[284035 + (i4 & 127) >> 0] | 0;
       if ((i4 & 255) > 15) break L36;
       i3 = i4 << 24 >> 24 | i3 << 4;
       if (i3 & 256) {
        HEAP8[i8 + i1 >> 0] = i3;
        i3 = 1;
        i1 = i1 + 1 | 0;
       }
      }
     }
     i2 = i2 + 1 | 0;
    } while (i2 >>> 0 < i5 >>> 0);
    if ((i3 | 0) != 1) {
     HEAP8[i8 + i1 >> 0] = i3 << 4;
     i1 = i1 + 1 | 0;
    }
   }
   i3 = i1;
   i1 = i6 + i2 | 0;
   i2 = HEAP32[i7 >> 2] | 0;
  } else i3 = 0;
  HEAP32[i9 >> 2] = i3;
  if (i1 >>> 0 < i2 >>> 0) if ((HEAP8[i1 >> 0] | 0) != 62) {
   i10 = 3;
   return i10 | 0;
  }
  i1 = i1 + 1 | 0;
 }
 HEAP32[i10 >> 2] = i1;
 i10 = 0;
 return i10 | 0;
}

function _ass_font_provider_add_font(i12, i11, i14, i15, i16) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0;
 i8 = HEAP32[i12 >> 2] | 0;
 i5 = HEAP32[i11 + 24 >> 2] | 0;
 i6 = HEAP32[i11 + 20 >> 2] | 0;
 i7 = HEAP32[i11 + 28 >> 2] | 0;
 i5 = (i5 + -100 | 0) >>> 0 > 800 ? 400 : i5;
 i6 = i6 >>> 0 > 110 ? 0 : i6;
 i7 = (i7 + -50 | 0) >>> 0 > 150 ? 100 : i7;
 i13 = i8 + 16 | 0;
 i4 = HEAP32[i13 >> 2] | 0;
 i2 = i8 + 20 | 0;
 i10 = HEAP32[i2 >> 2] | 0;
 i1 = (i10 | 0) < 1 ? 1 : i10 << 1;
 i3 = i8 + 24 | 0;
 if ((i4 | 0) < (i10 | 0)) i10 = HEAP32[i3 >> 2] | 0; else {
  HEAP32[i2 >> 2] = i1;
  i10 = _realloc(HEAP32[i3 >> 2] | 0, i1 * 52 | 0) | 0;
  HEAP32[i3 >> 2] = i10;
  i4 = HEAP32[i13 >> 2] | 0;
 }
 i9 = i10 + (i4 * 52 | 0) | 0;
 i1 = i10 + (i4 * 52 | 0) + 4 | 0;
 i2 = i1 + 48 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i1 = HEAP32[i8 >> 2] | 0;
 HEAP32[i8 >> 2] = i1 + 1;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 + (i4 * 52 | 0) + 20 >> 2] = i6;
 HEAP32[i10 + (i4 * 52 | 0) + 24 >> 2] = i5;
 HEAP32[i10 + (i4 * 52 | 0) + 28 >> 2] = i7;
 i1 = HEAP32[i11 + 16 >> 2] | 0;
 i5 = i10 + (i4 * 52 | 0) + 16 | 0;
 HEAP32[i5 >> 2] = i1;
 i8 = HEAP32[i11 + 12 >> 2] | 0;
 i2 = i10 + (i4 * 52 | 0) + 12 | 0;
 HEAP32[i2 >> 2] = i8;
 i8 = _calloc(i8, 4) | 0;
 i3 = i10 + (i4 * 52 | 0) + 4 | 0;
 HEAP32[i3 >> 2] = i8;
 L5 : do if (i8 | 0) {
  if (i1 | 0) {
   i8 = _calloc(i1, 4) | 0;
   HEAP32[i10 + (i4 * 52 | 0) + 8 >> 2] = i8;
   if (!i8) break;
  }
  if ((HEAP32[i2 >> 2] | 0) > 0) {
   i1 = 0;
   do {
    i8 = ___strdup(HEAP32[(HEAP32[i11 >> 2] | 0) + (i1 << 2) >> 2] | 0) | 0;
    HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 << 2) >> 2] = i8;
    if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 << 2) >> 2] | 0)) break L5;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[i2 >> 2] | 0));
  }
  if ((HEAP32[i5 >> 2] | 0) > 0) {
   i2 = i11 + 4 | 0;
   i3 = i10 + (i4 * 52 | 0) + 8 | 0;
   i1 = 0;
   do {
    i8 = ___strdup(HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] | 0) | 0;
    HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 << 2) >> 2] = i8;
    if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 << 2) >> 2] | 0)) break L5;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[i5 >> 2] | 0));
  }
  i1 = HEAP32[i11 + 8 >> 2] | 0;
  if (i1 | 0) {
   i11 = ___strdup(i1) | 0;
   HEAP32[i10 + (i4 * 52 | 0) + 40 >> 2] = i11;
   if (!i11) break;
  }
  if (i14 | 0) {
   i14 = ___strdup(i14) | 0;
   HEAP32[i10 + (i4 * 52 | 0) + 32 >> 2] = i14;
   if (!i14) break;
  }
  HEAP32[i10 + (i4 * 52 | 0) + 36 >> 2] = i15;
  HEAP32[i10 + (i4 * 52 | 0) + 48 >> 2] = i16;
  HEAP32[i10 + (i4 * 52 | 0) + 44 >> 2] = i12;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  i16 = 1;
  return i16 | 0;
 } while (0);
 _ass_font_provider_free_fontinfo(i9);
 i1 = HEAP32[i12 + 16 >> 2] | 0;
 if (!i1) {
  i16 = 0;
  return i16 | 0;
 }
 FUNCTION_TABLE_vi[i1 & 127](i16);
 i16 = 0;
 return i16 | 0;
}

function _cff_subfont_load(i15, i3, i1, i14, i13, i10) {
 i15 = i15 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 i12 = i16 + 8 | 0;
 i5 = i16 + 4 | 0;
 i2 = i16;
 HEAP32[i5 >> 2] = 0;
 i11 = i12 + 4 | 0;
 _memset(i11 | 0, 0, 400) | 0;
 i6 = i12 + 16 | 0;
 i7 = i12 + 404 | 0;
 HEAP32[i7 >> 2] = i6;
 i8 = i12 + 408 | 0;
 HEAP32[i8 >> 2] = 4096;
 i9 = i12 + 412 | 0;
 HEAP32[i9 >> 2] = i15;
 HEAP32[i12 >> 2] = i10;
 _memset(i15 + 24 | 0, 0, 148) | 0;
 HEAP32[i15 + 32 >> 2] = -6553600;
 HEAP32[i15 + 36 >> 2] = 3276800;
 HEAP32[i15 + 44 >> 2] = 2;
 HEAP32[i15 + 48 >> 2] = 65536;
 HEAP32[i15 + 60 >> 2] = 65536;
 HEAP32[i15 + 156 >> 2] = 8720;
 HEAP32[i15 >> 2] = 65535;
 HEAP32[i15 + 4 >> 2] = 65535;
 HEAP32[i15 + 8 >> 2] = 65535;
 HEAP32[i15 + 12 >> 2] = 65535;
 HEAP32[i15 + 16 >> 2] = 65535;
 HEAP32[i15 + 20 >> 2] = 65535;
 HEAP32[i15 + 128 >> 2] = 65535;
 i4 = i15 + 132 | 0;
 HEAP32[i4 >> 2] = 65535;
 HEAP32[i15 + 136 >> 2] = 65535;
 HEAP32[i15 + 172 >> 2] = 65535;
 i1 = _cff_index_access_element(i3, i1, i5, i2) | 0;
 if (!i1) {
  i1 = HEAP32[i5 >> 2] | 0;
  i1 = _cff_parser_run(i12, i1, i1 + (HEAP32[i2 >> 2] | 0) | 0) | 0;
 }
 if (!(HEAP32[i3 + 28 >> 2] | 0)) _FT_Stream_ReleaseFrame(HEAP32[i3 >> 2] | 0, i5);
 if (i1 | 0) {
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 }
 if ((HEAP32[i4 >> 2] | 0) != 65535) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i4 = i15 + 116 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 do if (i1 | 0) {
  i2 = i15 + 120 | 0;
  if (HEAP32[i2 >> 2] | 0) {
   i3 = i15 + 176 | 0;
   _memset(i3 | 0, 0, 360) | 0;
   HEAP32[i15 + 376 >> 2] = 7;
   HEAP32[i15 + 380 >> 2] = 1;
   HEAP32[i15 + 508 >> 2] = -1;
   HEAP32[i15 + 516 >> 2] = 3932;
   HEAP32[i15 + 372 >> 2] = 2596864;
   _memset(i11 | 0, 0, 400) | 0;
   HEAP32[i7 >> 2] = i6;
   HEAP32[i8 >> 2] = 8192;
   HEAP32[i9 >> 2] = i3;
   HEAP32[i12 >> 2] = i10;
   i1 = _FT_Stream_Seek(i14, i1 + i13 | 0) | 0;
   if (i1 | 0) {
    i15 = i1;
    STACKTOP = i16;
    return i15 | 0;
   }
   i1 = _FT_Stream_EnterFrame(i14, HEAP32[i2 >> 2] | 0) | 0;
   if (i1 | 0) {
    i15 = i1;
    STACKTOP = i16;
    return i15 | 0;
   }
   i1 = _cff_parser_run(i12, HEAP32[i14 + 32 >> 2] | 0, HEAP32[i14 + 36 >> 2] | 0) | 0;
   _FT_Stream_ExitFrame(i14);
   if (!i1) {
    HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & -2;
    break;
   } else {
    i15 = i1;
    STACKTOP = i16;
    return i15 | 0;
   }
  }
 } while (0);
 i1 = HEAP32[i15 + 524 >> 2] | 0;
 if (!i1) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i1 = _FT_Stream_Seek(i14, i1 + i13 + (HEAP32[i4 >> 2] | 0) | 0) | 0;
 if (i1 | 0) {
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 }
 i2 = i15 + 536 | 0;
 i1 = _cff_index_init(i2, i14, 1) | 0;
 if (i1 | 0) {
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 }
 i15 = _cff_index_get_pointers(i2, i15 + 568 | 0, 0) | 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _initScan(i4, i5, i6, i7, i8, i9) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i10 = 0;
 if ((i7 | 0) == (i8 | 0)) {
  i10 = -4;
  return i10 | 0;
 }
 i10 = HEAP32[i5 + 76 >> 2] | 0;
 i1 = i7 + 1 | 0;
 L4 : do if ((i1 | 0) == (i8 | 0)) {
  i1 = HEAP8[i5 + 73 >> 0] | 0;
  if (((i1 << 24 >> 24) + -3 | 0) >>> 0 < 3) {
   i10 = -1;
   return i10 | 0;
  }
  switch (HEAP8[i7 >> 0] | 0) {
  case -17:
  case -1:
  case -2:
   break;
  case 60:
  case 0:
   {
    i10 = -1;
    return i10 | 0;
   }
  default:
   break L4;
  }
  if (!((i6 | 0) == 1 & i1 << 24 >> 24 == 0)) {
   i10 = -1;
   return i10 | 0;
  }
 } else {
  i3 = HEAP8[i7 >> 0] | 0;
  i2 = HEAP8[i1 >> 0] | 0;
  i1 = ((i3 & 255) << 8 | i2 & 255) & 65535;
  L14 : do if (i1 << 16 >> 16 < -2) {
   if (i1 << 16 >> 16 >= -257) {
    switch (i1 << 16 >> 16) {
    case -257:
     break;
    default:
     break L14;
    }
    if ((i6 | 0) == 1 & (HEAP8[i5 + 73 >> 0] | 0) == 0) break L4;
    HEAP32[i9 >> 2] = i7 + 2;
    HEAP32[i10 >> 2] = HEAP32[i4 + 16 >> 2];
    i10 = 14;
    return i10 | 0;
   }
   switch (i1 << 16 >> 16) {
   case -4165:
    break;
   default:
    break L14;
   }
   if ((i6 | 0) == 1) switch (HEAP8[i5 + 73 >> 0] | 0) {
   case 0:
   case 3:
   case 4:
   case 5:
    break L4;
   default:
    {}
   }
   i1 = i7 + 2 | 0;
   if ((i1 | 0) == (i8 | 0)) {
    i10 = -1;
    return i10 | 0;
   }
   if ((HEAP8[i1 >> 0] | 0) != -65) break L4;
   HEAP32[i9 >> 2] = i7 + 3;
   HEAP32[i10 >> 2] = HEAP32[i4 + 8 >> 2];
   i10 = 14;
   return i10 | 0;
  } else {
   if (i1 << 16 >> 16 < 15360) {
    switch (i1 << 16 >> 16) {
    case -2:
     break;
    default:
     break L14;
    }
    if ((i6 | 0) == 1 & (HEAP8[i5 + 73 >> 0] | 0) == 0) break L4;
    HEAP32[i9 >> 2] = i7 + 2;
    HEAP32[i10 >> 2] = HEAP32[i4 + 20 >> 2];
    i10 = 14;
    return i10 | 0;
   }
   switch (i1 << 16 >> 16) {
   case 15360:
    break;
   default:
    break L14;
   }
   i2 = HEAP8[i5 + 73 >> 0] | 0;
   i1 = (i6 | 0) == 1;
   if (i2 << 24 >> 24 == 4) {
    if (i1) break L4;
   } else if (i1 & i2 << 24 >> 24 == 3) break L4;
   i5 = HEAP32[i4 + 20 >> 2] | 0;
   HEAP32[i10 >> 2] = i5;
   i10 = FUNCTION_TABLE_iiiii[HEAP32[i5 + (i6 << 2) >> 2] & 127](i5, i7, i8, i9) | 0;
   return i10 | 0;
  } while (0);
  i1 = (i6 | 0) == 1;
  if (i3 << 24 >> 24) {
   if (i1 | i2 << 24 >> 24 != 0) break;
   i5 = HEAP32[i4 + 20 >> 2] | 0;
   HEAP32[i10 >> 2] = i5;
   i10 = FUNCTION_TABLE_iiiii[HEAP32[i5 + (i6 << 2) >> 2] & 127](i5, i7, i8, i9) | 0;
   return i10 | 0;
  }
  if (i1) if ((HEAP8[i5 + 73 >> 0] | 0) == 5) break;
  i5 = HEAP32[i4 + 16 >> 2] | 0;
  HEAP32[i10 >> 2] = i5;
  i10 = FUNCTION_TABLE_iiiii[HEAP32[i5 + (i6 << 2) >> 2] & 127](i5, i7, i8, i9) | 0;
  return i10 | 0;
 } while (0);
 i5 = HEAP32[i4 + (HEAP8[i5 + 73 >> 0] << 2) >> 2] | 0;
 HEAP32[i10 >> 2] = i5;
 i10 = FUNCTION_TABLE_iiiii[HEAP32[i5 + (i6 << 2) >> 2] & 127](i5, i7, i8, i9) | 0;
 return i10 | 0;
}

function _inflateInit2_(i13, i3) {
 i13 = i13 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 if (!i13) {
  i13 = -2;
  return i13 | 0;
 }
 i10 = i13 + 24 | 0;
 HEAP32[i10 >> 2] = 0;
 i9 = i13 + 32 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (!i1) {
  HEAP32[i9 >> 2] = 83;
  HEAP32[i13 + 40 >> 2] = 0;
  i1 = 83;
 }
 i12 = i13 + 36 | 0;
 if (!(HEAP32[i12 >> 2] | 0)) HEAP32[i12 >> 2] = 32;
 i11 = i13 + 40 | 0;
 i2 = FUNCTION_TABLE_iiii[i1 & 127](HEAP32[i11 >> 2] | 0, 1, 24) | 0;
 i7 = i13 + 28 | 0;
 HEAP32[i7 >> 2] = i2;
 if (!i2) {
  i13 = -4;
  return i13 | 0;
 }
 HEAP32[i2 + 20 >> 2] = 0;
 i1 = i3 >>> 31;
 HEAP32[i2 + 12 >> 2] = i1;
 i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
 if ((i3 & -8 | 0) != 8) {
  _inflateEnd(i13) | 0;
  i13 = -2;
  return i13 | 0;
 }
 HEAP32[i2 + 16 >> 2] = i3;
 i5 = (i1 | 0) != 0;
 i6 = i5 ? 0 : 84;
 i3 = 1 << i3;
 i8 = FUNCTION_TABLE_iiii[HEAP32[i9 >> 2] & 127](HEAP32[i11 >> 2] | 0, 1, 64) | 0;
 if (!i8) HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = 0; else {
  i2 = FUNCTION_TABLE_iiii[HEAP32[i9 >> 2] & 127](HEAP32[i11 >> 2] | 0, 8, 1440) | 0;
  i4 = i8 + 36 | 0;
  HEAP32[i4 >> 2] = i2;
  i1 = HEAP32[i11 >> 2] | 0;
  do if (!i2) FUNCTION_TABLE_vii[HEAP32[i12 >> 2] & 63](i1, i8); else {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i9 >> 2] & 127](i1, 1, i3) | 0;
   HEAP32[i8 + 40 >> 2] = i1;
   i2 = i1;
   if (!i1) {
    FUNCTION_TABLE_vii[HEAP32[i12 >> 2] & 63](HEAP32[i11 >> 2] | 0, HEAP32[i4 >> 2] | 0);
    FUNCTION_TABLE_vii[HEAP32[i12 >> 2] & 63](HEAP32[i11 >> 2] | 0, i8);
    break;
   }
   HEAP32[i8 + 44 >> 2] = i1 + i3;
   HEAP32[i8 + 56 >> 2] = i6;
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 28 >> 2] = 0;
   HEAP32[i8 + 32 >> 2] = 0;
   HEAP32[i8 + 52 >> 2] = i2;
   HEAP32[i8 + 48 >> 2] = i2;
   if (!i5) {
    i9 = FUNCTION_TABLE_iiii[i6 & 127](0, 0, 0) | 0;
    HEAP32[i8 + 60 >> 2] = i9;
    HEAP32[i13 + 48 >> 2] = i9;
   }
   i1 = HEAP32[i7 >> 2] | 0;
   HEAP32[i1 + 20 >> 2] = i8;
   if (!i1) {
    i13 = 0;
    return i13 | 0;
   }
   HEAP32[i13 + 20 >> 2] = 0;
   HEAP32[i13 + 8 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   HEAP32[i1 >> 2] = HEAP32[i1 + 12 >> 2] | 0 ? 7 : 0;
   i1 = HEAP32[i8 >> 2] | 0;
   if ((i1 & -2 | 0) == 4) {
    FUNCTION_TABLE_vii[HEAP32[i12 >> 2] & 63](HEAP32[i11 >> 2] | 0, HEAP32[i8 + 12 >> 2] | 0);
    i1 = HEAP32[i8 >> 2] | 0;
   }
   if ((i1 | 0) == 6) FUNCTION_TABLE_vii[HEAP32[i12 >> 2] & 63](HEAP32[i11 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0);
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 28 >> 2] = 0;
   HEAP32[i8 + 32 >> 2] = 0;
   i1 = HEAP32[i8 + 40 >> 2] | 0;
   HEAP32[i8 + 52 >> 2] = i1;
   HEAP32[i8 + 48 >> 2] = i1;
   i1 = HEAP32[i8 + 56 >> 2] | 0;
   if (!i1) {
    i13 = 0;
    return i13 | 0;
   }
   i12 = FUNCTION_TABLE_iiii[i1 & 127](0, 0, 0) | 0;
   HEAP32[i8 + 60 >> 2] = i12;
   HEAP32[i13 + 48 >> 2] = i12;
   i13 = 0;
   return i13 | 0;
  } while (0);
  HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = 0;
 }
 _inflateEnd(i13) | 0;
 i13 = -4;
 return i13 | 0;
}

function _T1_Set_MM_Design(i1, i3, i14) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i14 = i14 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i16 = i17;
 i12 = i1 + 528 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if (!i1) {
  i16 = 6;
  STACKTOP = i17;
  return i16 | 0;
 }
 i13 = i1 + 4 | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 i10 = i2 >>> 0 < i3 >>> 0 ? i2 : i3;
 if (!i2) i2 = 0; else {
  i11 = 0;
  do {
   i3 = i1 + 88 + (i11 * 12 | 0) | 0;
   i8 = HEAP32[i1 + 88 + (i11 * 12 | 0) + 4 >> 2] | 0;
   i9 = HEAP32[i1 + 88 + (i11 * 12 | 0) + 8 >> 2] | 0;
   if (i11 >>> 0 < i10 >>> 0) {
    i6 = HEAP32[i14 + (i11 << 2) >> 2] | 0;
    i7 = i3;
    i3 = HEAP8[i3 >> 0] | 0;
   } else {
    i5 = HEAP8[i3 >> 0] | 0;
    i6 = ((HEAP32[i8 + ((i5 & 255) + -1 << 2) >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) / 2 | 0;
    i7 = i3;
    i3 = i5;
   }
   do if (!(i3 << 24 >> 24)) i15 = 12; else {
    i3 = -1;
    i5 = 0;
    while (1) {
     i4 = HEAP32[i8 + (i5 << 2) >> 2] | 0;
     if ((i6 | 0) == (i4 | 0)) {
      i15 = 8;
      break;
     }
     if ((i6 | 0) < (i4 | 0)) {
      i4 = i5;
      break;
     }
     i3 = i5 + 1 | 0;
     if (i3 >>> 0 < (HEAPU8[i7 >> 0] | 0) >>> 0) {
      i4 = i5;
      i5 = i3;
      i3 = i4;
     } else {
      i4 = -1;
      i3 = i5;
      break;
     }
    }
    if ((i15 | 0) == 8) {
     i15 = 0;
     i3 = HEAP32[i9 + (i5 << 2) >> 2] | 0;
     break;
    }
    if ((i3 | 0) < 0) i15 = 12; else if ((i4 | 0) < 0) {
     i3 = HEAP32[i9 + ((HEAPU8[i7 >> 0] | 0) + -1 << 2) >> 2] | 0;
     break;
    } else {
     i2 = HEAP32[i8 + (i3 << 2) >> 2] | 0;
     i3 = _FT_MulDiv(i6 - i2 | 0, (HEAP32[i9 + (i4 << 2) >> 2] | 0) - (HEAP32[i9 + (i3 << 2) >> 2] | 0) | 0, (HEAP32[i8 + (i4 << 2) >> 2] | 0) - i2 | 0) | 0;
     i2 = HEAP32[i13 >> 2] | 0;
     break;
    }
   } while (0);
   if ((i15 | 0) == 12) {
    i15 = 0;
    i3 = HEAP32[i9 >> 2] | 0;
   }
   HEAP32[i16 + (i11 << 2) >> 2] = i3;
   i11 = i11 + 1 | 0;
  } while (i11 >>> 0 < i2 >>> 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if (!i1) {
   i16 = 6;
   STACKTOP = i17;
   return i16 | 0;
  }
 }
 i9 = i1 + 4 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i7 = i3 >>> 0 < i2 >>> 0 ? i3 : i2;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i8 = i1 + 136 | 0;
 i6 = 0;
 do {
  if (!i3) {
   i4 = 65536;
   i3 = 0;
  } else {
   i4 = 65536;
   i5 = 0;
   do {
    if (i5 >>> 0 < i7 >>> 0) i2 = HEAP32[i16 + (i5 << 2) >> 2] | 0; else i2 = 32768;
    i3 = (i2 | 0) > 0 ? i2 : 0;
    i3 = (i3 | 0) < 65536 ? i3 : 65536;
    i4 = _FT_MulFix(i4, (1 << i5 & i6 | 0) == 0 ? 65536 - i3 | 0 : i3) | 0;
    i5 = i5 + 1 | 0;
    i3 = HEAP32[i9 >> 2] | 0;
   } while (i5 >>> 0 < i3 >>> 0);
   i2 = HEAP32[i1 >> 2] | 0;
  }
  HEAP32[(HEAP32[i8 >> 2] | 0) + (i6 << 2) >> 2] = i4;
  i6 = i6 + 1 | 0;
 } while (i6 >>> 0 < i2 >>> 0);
 i1 = 0;
 STACKTOP = i17;
 return i1 | 0;
}

function _little2_ignoreSectionTok(i2, i3, i1, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i6 = i1 - i3 | 0;
 i6 = (i6 & 1 | 0) == 0 ? i1 : i3 + (i6 & -2) | 0;
 if ((i6 | 0) == (i3 | 0)) {
  i8 = -1;
  return i8 | 0;
 }
 i4 = i2 + 76 | 0;
 i5 = i6;
 i1 = i3;
 i3 = 0;
 L4 : while (1) {
  i2 = HEAP8[i1 >> 0] | 0;
  L6 : do switch (HEAP8[i1 + 1 >> 0] | 0) {
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i8 = 12;
    break L4;
   }
  case 0:
   switch (HEAP8[i4 + (i2 & 255) >> 0] | 0) {
   case 8:
   case 1:
   case 0:
    {
     i8 = 12;
     break L4;
    }
   case 7:
    {
     i8 = 10;
     break L6;
    }
   case 5:
    {
     if ((i5 - i1 | 0) < 2) {
      i1 = -2;
      i8 = 30;
      break L4;
     }
     i1 = i1 + 2 | 0;
     break L6;
    }
   case 6:
    {
     if ((i5 - i1 | 0) < 3) {
      i1 = -2;
      i8 = 30;
      break L4;
     }
     i1 = i1 + 3 | 0;
     break L6;
    }
   case 2:
    {
     i2 = i1 + 2 | 0;
     if ((i2 | 0) == (i6 | 0)) {
      i1 = -1;
      i8 = 30;
      break L4;
     }
     if (HEAP8[i1 + 3 >> 0] | 0) {
      i1 = i2;
      break L6;
     }
     if ((HEAP8[i2 >> 0] | 0) != 33) {
      i1 = i2;
      break L6;
     }
     i2 = i1 + 4 | 0;
     if ((i2 | 0) == (i6 | 0)) {
      i1 = -1;
      i8 = 30;
      break L4;
     }
     if (HEAP8[i1 + 5 >> 0] | 0) {
      i1 = i2;
      break L6;
     }
     i9 = (HEAP8[i2 >> 0] | 0) == 91;
     i3 = (i9 & 1) + i3 | 0;
     i1 = i9 ? i1 + 6 | 0 : i2;
     break L6;
    }
   case 4:
    {
     i2 = i1 + 2 | 0;
     if ((i2 | 0) == (i6 | 0)) {
      i1 = -1;
      i8 = 30;
      break L4;
     }
     if (HEAP8[i1 + 3 >> 0] | 0) {
      i1 = i2;
      break L6;
     }
     if ((HEAP8[i2 >> 0] | 0) != 93) {
      i1 = i2;
      break L6;
     }
     i2 = i1 + 4 | 0;
     if ((i2 | 0) == (i6 | 0)) {
      i1 = -1;
      i8 = 30;
      break L4;
     }
     if (HEAP8[i1 + 5 >> 0] | 0) {
      i1 = i2;
      break L6;
     }
     if ((HEAP8[i2 >> 0] | 0) != 62) {
      i1 = i2;
      break L6;
     }
     i1 = i1 + 6 | 0;
     if (!i3) {
      i8 = 27;
      break L4;
     }
     i3 = i3 + -1 | 0;
     break L6;
    }
   default:
    {
     i8 = 29;
     break L6;
    }
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i8 = 10;
    break;
   }
  case -1:
   {
    if ((i2 & 255) > 253) {
     i8 = 12;
     break L4;
    } else i8 = 29;
    break;
   }
  default:
   i8 = 29;
  } while (0);
  if ((i8 | 0) == 10) {
   i8 = 0;
   if ((i5 - i1 | 0) < 4) {
    i1 = -2;
    i8 = 30;
    break;
   }
   i1 = i1 + 4 | 0;
  } else if ((i8 | 0) == 29) {
   i8 = 0;
   i1 = i1 + 2 | 0;
  }
  if ((i1 | 0) == (i6 | 0)) {
   i1 = -1;
   i8 = 30;
   break;
  }
 }
 if ((i8 | 0) == 12) {
  HEAP32[i7 >> 2] = i1;
  i9 = 0;
  return i9 | 0;
 } else if ((i8 | 0) == 27) {
  HEAP32[i7 >> 2] = i1;
  i9 = 42;
  return i9 | 0;
 } else if ((i8 | 0) == 30) return i1 | 0;
 return 0;
}

function _big2_ignoreSectionTok(i2, i3, i1, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i6 = i1 - i3 | 0;
 i6 = (i6 & 1 | 0) == 0 ? i1 : i3 + (i6 & -2) | 0;
 if ((i6 | 0) == (i3 | 0)) {
  i8 = -1;
  return i8 | 0;
 }
 i4 = i2 + 76 | 0;
 i5 = i6;
 i1 = i3;
 i3 = 0;
 L4 : while (1) {
  i2 = HEAP8[i1 + 1 >> 0] | 0;
  L6 : do switch (HEAP8[i1 >> 0] | 0) {
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i8 = 12;
    break L4;
   }
  case 0:
   switch (HEAP8[i4 + (i2 & 255) >> 0] | 0) {
   case 8:
   case 1:
   case 0:
    {
     i8 = 12;
     break L4;
    }
   case 7:
    {
     i8 = 10;
     break L6;
    }
   case 5:
    {
     if ((i5 - i1 | 0) < 2) {
      i1 = -2;
      i8 = 30;
      break L4;
     }
     i1 = i1 + 2 | 0;
     break L6;
    }
   case 6:
    {
     if ((i5 - i1 | 0) < 3) {
      i1 = -2;
      i8 = 30;
      break L4;
     }
     i1 = i1 + 3 | 0;
     break L6;
    }
   case 2:
    {
     i2 = i1 + 2 | 0;
     if ((i2 | 0) == (i6 | 0)) {
      i1 = -1;
      i8 = 30;
      break L4;
     }
     if (HEAP8[i2 >> 0] | 0) {
      i1 = i2;
      break L6;
     }
     if ((HEAP8[i1 + 3 >> 0] | 0) != 33) {
      i1 = i2;
      break L6;
     }
     i2 = i1 + 4 | 0;
     if ((i2 | 0) == (i6 | 0)) {
      i1 = -1;
      i8 = 30;
      break L4;
     }
     if (HEAP8[i2 >> 0] | 0) {
      i1 = i2;
      break L6;
     }
     i9 = (HEAP8[i1 + 5 >> 0] | 0) == 91;
     i3 = (i9 & 1) + i3 | 0;
     i1 = i9 ? i1 + 6 | 0 : i2;
     break L6;
    }
   case 4:
    {
     i2 = i1 + 2 | 0;
     if ((i2 | 0) == (i6 | 0)) {
      i1 = -1;
      i8 = 30;
      break L4;
     }
     if (HEAP8[i2 >> 0] | 0) {
      i1 = i2;
      break L6;
     }
     if ((HEAP8[i1 + 3 >> 0] | 0) != 93) {
      i1 = i2;
      break L6;
     }
     i2 = i1 + 4 | 0;
     if ((i2 | 0) == (i6 | 0)) {
      i1 = -1;
      i8 = 30;
      break L4;
     }
     if (HEAP8[i2 >> 0] | 0) {
      i1 = i2;
      break L6;
     }
     if ((HEAP8[i1 + 5 >> 0] | 0) != 62) {
      i1 = i2;
      break L6;
     }
     i1 = i1 + 6 | 0;
     if (!i3) {
      i8 = 27;
      break L4;
     }
     i3 = i3 + -1 | 0;
     break L6;
    }
   default:
    {
     i8 = 29;
     break L6;
    }
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i8 = 10;
    break;
   }
  case -1:
   {
    if ((i2 & 255) > 253) {
     i8 = 12;
     break L4;
    } else i8 = 29;
    break;
   }
  default:
   i8 = 29;
  } while (0);
  if ((i8 | 0) == 10) {
   i8 = 0;
   if ((i5 - i1 | 0) < 4) {
    i1 = -2;
    i8 = 30;
    break;
   }
   i1 = i1 + 4 | 0;
  } else if ((i8 | 0) == 29) {
   i8 = 0;
   i1 = i1 + 2 | 0;
  }
  if ((i1 | 0) == (i6 | 0)) {
   i1 = -1;
   i8 = 30;
   break;
  }
 }
 if ((i8 | 0) == 12) {
  HEAP32[i7 >> 2] = i1;
  i9 = 0;
  return i9 | 0;
 } else if ((i8 | 0) == 27) {
  HEAP32[i7 >> 2] = i1;
  i9 = 42;
  return i9 | 0;
 } else if ((i8 | 0) == 30) return i1 | 0;
 return 0;
}

function _FcCacheObjectDereference(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i9 = i10;
 i1 = HEAP32[91921] | 0;
 L1 : do if (!i1) {
  while (1) {
   i1 = _malloc(28) | 0;
   _pthread_mutex_init(i1 | 0, 0) | 0;
   i2 = HEAP32[91921] | 0;
   if (!i2) HEAP32[91921] = i1;
   if (!i2) break;
   _pthread_mutex_destroy(i1 | 0) | 0;
   i1 = HEAP32[91921] | 0;
   if (i1 | 0) {
    i3 = 5;
    break L1;
   }
  }
  _pthread_mutex_lock(i1 | 0) | 0;
  _FcRandom() | 0;
 } else i3 = 5; while (0);
 if ((i3 | 0) == 5) _pthread_mutex_lock(i1 | 0) | 0;
 if (!i6) {
  i9 = HEAP32[91921] | 0;
  _pthread_mutex_unlock(i9 | 0) | 0;
  STACKTOP = i10;
  return;
 }
 i2 = HEAP32[91922] | 0;
 if ((i2 | 0) > 0) {
  i1 = 367692;
  do {
   i5 = i2;
   i2 = i2 + -1 | 0;
   i3 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
   L15 : do if (i3) while (1) {
    i4 = i3 + 24 | 0;
    if (((HEAP32[i3 >> 2] | 0) + (HEAP32[i3 + 8 >> 2] | 0) | 0) >>> 0 > i6 >>> 0) break L15;
    i3 = HEAP32[i3 + 24 + (i2 << 2) >> 2] | 0;
    if (!i3) {
     i1 = i4;
     break;
    } else i1 = i4;
   } while (0);
  } while ((i5 | 0) > 1);
 } else i1 = 367692;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i9 = HEAP32[91921] | 0;
  _pthread_mutex_unlock(i9 | 0) | 0;
  STACKTOP = i10;
  return;
 }
 if (((HEAP32[i1 >> 2] | 0) + (HEAP32[i1 + 8 >> 2] | 0) | 0) >>> 0 <= i6 >>> 0) {
  i9 = HEAP32[91921] | 0;
  _pthread_mutex_unlock(i9 | 0) | 0;
  STACKTOP = i10;
  return;
 }
 i7 = i1 + 4 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = i8 + -1;
 if ((i8 | 0) != 1) {
  i9 = HEAP32[91921] | 0;
  _pthread_mutex_unlock(i9 | 0) | 0;
  STACKTOP = i10;
  return;
 }
 i8 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[91922] | 0;
 L30 : do if ((i2 | 0) > 0) {
  i3 = 367692;
  i6 = i2;
  do {
   i7 = i6;
   i6 = i6 + -1 | 0;
   i1 = i3 + (i6 << 2) | 0;
   i4 = HEAP32[i1 >> 2] | 0;
   L33 : do if (i4) while (1) {
    i5 = i4 + 24 | 0;
    if ((HEAP32[i4 >> 2] | 0) >>> 0 >= i8 >>> 0) break L33;
    i1 = i4 + 24 + (i6 << 2) | 0;
    i4 = HEAP32[i1 >> 2] | 0;
    if (!i4) {
     i3 = i5;
     break;
    } else i3 = i5;
   } while (0);
   HEAP32[i9 + (i6 << 2) >> 2] = i1;
  } while ((i7 | 0) > 1);
  i1 = HEAP32[i3 >> 2] | 0;
  i4 = 0;
  do {
   i3 = HEAP32[i9 + (i4 << 2) >> 2] | 0;
   if ((HEAP32[i3 >> 2] | 0) != (i1 | 0)) break;
   HEAP32[i3 >> 2] = HEAP32[i1 + 24 + (i4 << 2) >> 2];
   i4 = i4 + 1 | 0;
   i2 = HEAP32[91922] | 0;
  } while ((i4 | 0) < (i2 | 0));
  if ((i2 | 0) > 0) do {
   i3 = i2;
   i2 = i2 + -1 | 0;
   if (HEAP32[367692 + (i2 << 2) >> 2] | 0) break L30;
   HEAP32[91922] = i2;
  } while ((i3 | 0) > 1);
 } else i1 = HEAP32[91923] | 0; while (0);
 _free(i1);
 if ((HEAP32[i8 >> 2] | 0) != -66913275) {
  i9 = HEAP32[91921] | 0;
  _pthread_mutex_unlock(i9 | 0) | 0;
  STACKTOP = i10;
  return;
 }
 _free(i8);
 i9 = HEAP32[91921] | 0;
 _pthread_mutex_unlock(i9 | 0) | 0;
 STACKTOP = i10;
 return;
}

function _parse_blend_design_map(i2, i16) {
 i2 = i2 | 0;
 i16 = i16 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i15 = i20 + 304 | 0;
 i9 = i20 + 256 | 0;
 i10 = i20 + 248 | 0;
 i11 = i20 + 8 | 0;
 i12 = i20;
 HEAP32[i15 >> 2] = 0;
 i13 = HEAP32[i2 + 100 >> 2] | 0;
 i14 = i16 + 60 | 0;
 FUNCTION_TABLE_viiii[HEAP32[i14 >> 2] & 31](i16, i9, 4, i10);
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) < 0) {
  HEAP32[i15 >> 2] = 162;
  i18 = 162;
  i19 = i16 + 12 | 0;
  HEAP32[i19 >> 2] = i18;
  STACKTOP = i20;
  return;
 }
 if ((i1 | 0) == 0 | (i1 | 0) > 4) {
  HEAP32[i15 >> 2] = 3;
  i18 = 3;
  i19 = i16 + 12 | 0;
  HEAP32[i19 >> 2] = i18;
  STACKTOP = i20;
  return;
 }
 i17 = HEAP32[i16 >> 2] | 0;
 i18 = i16 + 8 | 0;
 i19 = HEAP32[i18 >> 2] | 0;
 i1 = _t1_allocate_blend(i2, 0, i1) | 0;
 HEAP32[i15 >> 2] = i1;
 if (i1 | 0) {
  i18 = i1;
  i19 = i16 + 12 | 0;
  HEAP32[i19 >> 2] = i18;
  STACKTOP = i20;
  return;
 }
 i6 = HEAP32[i2 + 528 >> 2] | 0;
 do if ((HEAP32[i10 >> 2] | 0) > 0) {
  i7 = i16 + 36 | 0;
  i8 = i16 + 40 | 0;
  i5 = 0;
  while (1) {
   HEAP32[i16 >> 2] = HEAP32[i9 + (i5 * 12 | 0) >> 2];
   HEAP32[i18 >> 2] = HEAP32[i9 + (i5 * 12 | 0) + 4 >> 2];
   FUNCTION_TABLE_viiii[HEAP32[i14 >> 2] & 31](i16, i11, 20, i12);
   i1 = HEAP32[i12 >> 2] | 0;
   if ((i1 + -1 | 0) >>> 0 > 19) {
    i2 = 9;
    break;
   }
   i1 = _ft_mem_realloc(i13, 4, 0, i1 << 1, 0, i15) | 0;
   i4 = i6 + 88 + (i5 * 12 | 0) + 4 | 0;
   HEAP32[i4 >> 2] = i1;
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 | 0) {
    i2 = 16;
    break;
   }
   i3 = HEAP32[i12 >> 2] | 0;
   i2 = i6 + 88 + (i5 * 12 | 0) + 8 | 0;
   HEAP32[i2 >> 2] = i1 + (i3 << 2);
   HEAP8[i6 + 88 + (i5 * 12 | 0) >> 0] = i3;
   if ((i3 | 0) > 0) {
    i1 = 0;
    do {
     HEAP32[i16 >> 2] = (HEAP32[i11 + (i1 * 12 | 0) >> 2] | 0) + 1;
     HEAP32[i18 >> 2] = (HEAP32[i11 + (i1 * 12 | 0) + 4 >> 2] | 0) + -1;
     i3 = FUNCTION_TABLE_ii[HEAP32[i7 >> 2] & 63](i16) | 0;
     HEAP32[(HEAP32[i4 >> 2] | 0) + (i1 << 2) >> 2] = i3;
     i3 = FUNCTION_TABLE_iii[HEAP32[i8 >> 2] & 255](i16, 0) | 0;
     HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] = i3;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < (HEAP32[i12 >> 2] | 0));
   }
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (HEAP32[i10 >> 2] | 0)) {
    i2 = 14;
    break;
   }
  }
  if ((i2 | 0) == 9) {
   HEAP32[i15 >> 2] = 3;
   i18 = 3;
   i19 = i16 + 12 | 0;
   HEAP32[i19 >> 2] = i18;
   STACKTOP = i20;
   return;
  } else if ((i2 | 0) == 14) {
   i1 = HEAP32[i15 >> 2] | 0;
   break;
  } else if ((i2 | 0) == 16) {
   i18 = i3;
   i19 = i16 + 12 | 0;
   HEAP32[i19 >> 2] = i18;
   STACKTOP = i20;
   return;
  }
 } else i1 = 0; while (0);
 HEAP32[i16 >> 2] = i17;
 HEAP32[i18 >> 2] = i19;
 i18 = i1;
 i19 = i16 + 12 | 0;
 HEAP32[i19 >> 2] = i18;
 STACKTOP = i20;
 return;
}

function _ps_dimension_add_t1stem(i12, i2, i1, i14, i17) {
 i12 = i12 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0, i16 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i15 = i18;
 i16 = (i1 | 0) < 0;
 i10 = (i1 | 0) == -21;
 i11 = i16 ? 0 : i1;
 i9 = (i10 ? -21 : 0) + i2 | 0;
 i10 = i16 ? (i10 ? 3 : 1) : 0;
 i16 = (i17 | 0) != 0;
 if (i16) HEAP32[i17 >> 2] = -1;
 i4 = HEAP32[i12 >> 2] | 0;
 i8 = i12 + 8 | 0;
 i2 = HEAP32[i8 >> 2] | 0;
 i7 = i2;
 i1 = i2;
 L4 : do if (!i4) {
  i3 = 0;
  i13 = 7;
 } else {
  i3 = 0;
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) if ((HEAP32[i2 + 4 >> 2] | 0) == (i11 | 0)) {
    i7 = i3;
    break L4;
   }
   i3 = i3 + 1 | 0;
   if (i3 >>> 0 < i4 >>> 0) i2 = i2 + 12 | 0; else {
    i13 = 7;
    break;
   }
  }
 } while (0);
 if ((i13 | 0) == 7) {
  i6 = i4 + 1 | 0;
  i5 = i12 + 4 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  if (i6 >>> 0 >= i2 >>> 0) {
   HEAP32[i15 >> 2] = 0;
   do if (i2 >>> 0 < i6 >>> 0) {
    i4 = i4 + 8 & -8;
    i1 = _ft_mem_realloc(i14, 12, i2, i4, i7, i15) | 0;
    HEAP32[i8 >> 2] = i1;
    i2 = HEAP32[i15 >> 2] | 0;
    if (!i2) {
     HEAP32[i5 >> 2] = i4;
     break;
    }
    i17 = i2;
    STACKTOP = i18;
    return i17 | 0;
   } while (0);
  }
  i7 = i1 + (i6 * 12 | 0) + -12 | 0;
  HEAP32[i12 >> 2] = i6;
  HEAP32[i7 >> 2] = i9;
  HEAP32[i7 + 4 >> 2] = i11;
  HEAP32[i7 + 8 >> 2] = i10;
  i7 = i3;
 }
 i4 = i12 + 12 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) {
  i3 = i12 + 16 | 0;
  do if (!(HEAP32[i3 >> 2] | 0)) {
   HEAP32[i15 >> 2] = 0;
   i2 = i12 + 20 | 0;
   i1 = _ft_mem_realloc(i14, 16, 0, 8, HEAP32[i2 >> 2] | 0, i15) | 0;
   HEAP32[i2 >> 2] = i1;
   i2 = HEAP32[i15 >> 2] | 0;
   if (!i2) {
    HEAP32[i3 >> 2] = 8;
    break;
   }
   i17 = i2;
   STACKTOP = i18;
   return i17 | 0;
  } else i1 = HEAP32[i12 + 20 >> 2] | 0; while (0);
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i4 >> 2] = 1;
  i13 = 22;
 } else {
  i1 = (HEAP32[i12 + 20 >> 2] | 0) + (i1 << 4) + -16 | 0;
  if ((HEAP32[i1 >> 2] | 0) >>> 0 <= i7 >>> 0) i13 = 22;
 }
 if ((i13 | 0) == 22) {
  i5 = i7 + 1 | 0;
  i6 = i1 + 4 | 0;
  i3 = ((HEAP32[i6 >> 2] | 0) + 7 | 0) >>> 3;
  i2 = (i7 + 8 | 0) >>> 3;
  HEAP32[i15 >> 2] = 0;
  do if (i2 >>> 0 > i3 >>> 0) {
   i4 = i2 + 7 & 1073741816;
   i2 = i1 + 8 | 0;
   i14 = _ft_mem_realloc(i14, 1, i3, i4, HEAP32[i2 >> 2] | 0, i15) | 0;
   HEAP32[i2 >> 2] = i14;
   i2 = HEAP32[i15 >> 2] | 0;
   if (!i2) {
    HEAP32[i6 >> 2] = i4 << 3;
    break;
   }
   i17 = i2;
   STACKTOP = i18;
   return i17 | 0;
  } while (0);
  HEAP32[i1 >> 2] = i5;
 }
 i15 = (HEAP32[i1 + 8 >> 2] | 0) + (i7 >>> 3) | 0;
 HEAP8[i15 >> 0] = HEAPU8[i15 >> 0] | 0 | 128 >>> (i7 & 7);
 if (!i16) {
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 HEAP32[i17 >> 2] = i7;
 i17 = 0;
 STACKTOP = i18;
 return i17 | 0;
}

function _add_quadratic(i7, i8) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i9 = i11;
 i10 = i8 + 16 | 0;
 i16 = HEAP32[i7 >> 2] | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i4 = HEAP32[i8 + 4 >> 2] | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i8 + 20 >> 2] | 0;
 i21 = i2 - i1 | 0;
 i23 = i5 - i4 | 0;
 i3 = (i21 | 0) < 0 ? 0 - i21 | 0 : i21;
 i20 = (i23 | 0) < 0 ? 0 - i23 | 0 : i23;
 i22 = ((i21 | 0) < 0) << 31 >> 31;
 i12 = ___muldi3(i21 | 0, i22 | 0, i21 | 0, i22 | 0) | 0;
 i14 = tempRet0;
 i17 = ((i23 | 0) < 0) << 31 >> 31;
 i6 = ___muldi3(i23 | 0, i17 | 0, i23 | 0, i17 | 0) | 0;
 i14 = _i64Add(i6 | 0, tempRet0 | 0, i12 | 0, i14 | 0) | 0;
 i12 = tempRet0;
 i20 = (i3 | 0) > (i20 | 0) ? i3 : i20;
 i16 = ___muldi3(i20 | 0, ((i20 | 0) < 0) << 31 >> 31 | 0, i16 | 0, ((i16 | 0) < 0) << 31 >> 31 | 0) | 0;
 i20 = tempRet0;
 i3 = HEAP32[i8 + 8 >> 2] | 0;
 i6 = HEAP32[i8 + 12 >> 2] | 0;
 i18 = i3 - i1 | 0;
 i25 = i6 - i4 | 0;
 i19 = ((i18 | 0) < 0) << 31 >> 31;
 i15 = ___muldi3(i18 | 0, i19 | 0, i21 | 0, i22 | 0) | 0;
 i13 = tempRet0;
 i24 = ((i25 | 0) < 0) << 31 >> 31;
 i26 = ___muldi3(i25 | 0, i24 | 0, i23 | 0, i17 | 0) | 0;
 i13 = _i64Add(i26 | 0, tempRet0 | 0, i15 | 0, i13 | 0) | 0;
 i15 = tempRet0;
 i22 = ___muldi3(i25 | 0, i24 | 0, i21 | 0, i22 | 0) | 0;
 i21 = tempRet0;
 i17 = ___muldi3(i18 | 0, i19 | 0, i23 | 0, i17 | 0) | 0;
 i17 = _i64Subtract(i22 | 0, i21 | 0, i17 | 0, tempRet0 | 0) | 0;
 i21 = tempRet0;
 i22 = _i64Subtract(0, 0, i16 | 0, i20 | 0) | 0;
 i23 = tempRet0;
 i12 = _i64Add(i14 | 0, i12 | 0, i16 | 0, i20 | 0) | 0;
 i14 = tempRet0;
 i19 = (i21 | 0) < 0;
 i18 = _i64Subtract(0, 0, i17 | 0, i21 | 0) | 0;
 i21 = i19 ? tempRet0 : i21;
 if (!((i15 | 0) < (i23 | 0) | (i15 | 0) == (i23 | 0) & i13 >>> 0 < i22 >>> 0 | ((i21 | 0) > (i20 | 0) | (i21 | 0) == (i20 | 0) & (i19 ? i18 : i17) >>> 0 > i16 >>> 0 | ((i15 | 0) > (i14 | 0) | (i15 | 0) == (i14 | 0) & i13 >>> 0 > i12 >>> 0)))) {
  i26 = _add_line_311(i7, i1, i4, i2, i5) | 0;
  STACKTOP = i11;
  return i26 | 0;
 }
 i23 = i3 + i1 | 0;
 i24 = i6 + i4 | 0;
 i25 = i2 + i3 | 0;
 i26 = i5 + i6 | 0;
 HEAP32[i9 + 16 >> 2] = i23 + 2 + i25 >> 2;
 HEAP32[i9 + 20 >> 2] = i24 + 2 + i26 >> 2;
 HEAP32[i9 + 8 >> 2] = i23 >> 1;
 HEAP32[i9 + 12 >> 2] = i24 >> 1;
 HEAP32[i9 + 24 >> 2] = i25 >> 1;
 HEAP32[i9 + 28 >> 2] = i26 >> 1;
 i26 = i8;
 i25 = HEAP32[i26 + 4 >> 2] | 0;
 i24 = i9;
 HEAP32[i24 >> 2] = HEAP32[i26 >> 2];
 HEAP32[i24 + 4 >> 2] = i25;
 i24 = i10;
 i25 = HEAP32[i24 + 4 >> 2] | 0;
 i26 = i9 + 32 | 0;
 HEAP32[i26 >> 2] = HEAP32[i24 >> 2];
 HEAP32[i26 + 4 >> 2] = i25;
 if (_add_quadratic(i7, i9) | 0) i1 = _add_quadratic(i7, i9 + 16 | 0) | 0; else i1 = 0;
 i26 = i1;
 STACKTOP = i11;
 return i26 | 0;
}

function _gray_convert_glyph_inner(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = 4;
 i9 = _malloc(40) | 0;
 HEAP32[i9 >> 2] = 0;
 i10 = i13;
 HEAP32[i10 >> 2] = 0;
 i11 = _saveSetjmp(i8, 1, i9 | 0, i11 | 0) | 0;
 i9 = tempRet0;
 __THREW__ = 0;
 i1 = __THREW__;
 __THREW__ = 0;
 if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
  i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i11 | 0, i9 | 0) | 0;
  if (!i2) _longjmp(i1 | 0, threwValue | 0);
  tempRet0 = threwValue;
 } else i2 = -1;
 if ((i2 | 0) == 1) i1 = tempRet0; else i1 = 0;
 L3 : while (1) {
  if (i1 | 0) {
   i12 = 15;
   break;
  }
  __THREW__ = 0;
  i1 = invoke_iiii(86, i8 + 1136 | 0, 23924, i8 | 0) | 0;
  i2 = __THREW__;
  __THREW__ = 0;
  if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
   i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i11 | 0, i9 | 0) | 0;
   if (!i3) _longjmp(i2 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i3 = -1;
  if ((i3 | 0) == 1) {
   i1 = tempRet0;
   continue;
  }
  HEAP32[i10 >> 2] = i1;
  if (HEAP32[i8 + 196 >> 2] | 0) {
   i12 = 16;
   break;
  }
  i6 = HEAP32[i8 + 188 >> 2] | 0;
  i7 = HEAP32[i8 + 192 >> 2] | 0;
  if (!(i7 | i6)) {
   i12 = 16;
   break;
  }
  i5 = HEAP32[i8 + 156 >> 2] | 0;
  i2 = HEAP32[i8 + 180 >> 2] | 0;
  i5 = (i5 | 0) > (i2 | 0) ? i2 : i5;
  i2 = (HEAP32[i8 + 1420 >> 2] | 0) + (HEAP32[i8 + 160 >> 2] << 2) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  L9 : do if (!i1) i1 = 0; else while (1) {
   i3 = HEAP32[i1 >> 2] | 0;
   if ((i3 | 0) > (i5 | 0)) break L9;
   if ((i3 | 0) == (i5 | 0)) break L3;
   i2 = i1 + 12 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = 0;
    break;
   }
  } while (0);
  i3 = i8 + 208 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) < (HEAP32[i8 + 204 >> 2] | 0)) {
   i12 = 13;
   break;
  }
  __THREW__ = 0;
  invoke_vii(34, i8 | 0, 1);
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i7 = _testSetjmp(HEAP32[i1 >> 2] | 0, i11 | 0, i9 | 0) | 0;
   if (!i7) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  };
  i1 = tempRet0;
 }
 if ((i12 | 0) == 13) {
  i9 = HEAP32[i8 + 200 >> 2] | 0;
  HEAP32[i3 >> 2] = i4 + 1;
  i12 = i9 + (i4 << 4) | 0;
  HEAP32[i12 >> 2] = i5;
  HEAP32[i9 + (i4 << 4) + 8 >> 2] = 0;
  HEAP32[i9 + (i4 << 4) + 4 >> 2] = 0;
  HEAP32[i9 + (i4 << 4) + 12 >> 2] = i1;
  HEAP32[i2 >> 2] = i12;
  i1 = i12;
 } else if ((i12 | 0) == 15) {
  HEAP32[i10 >> 2] = 64;
  i12 = HEAP32[i10 >> 2] | 0;
  _free(i11 | 0);
  STACKTOP = i13;
  return i12 | 0;
 } else if ((i12 | 0) == 16) {
  i12 = HEAP32[i10 >> 2] | 0;
  _free(i11 | 0);
  STACKTOP = i13;
  return i12 | 0;
 }
 i12 = i1 + 8 | 0;
 HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i6;
 i12 = i1 + 4 | 0;
 HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i7;
 i12 = HEAP32[i10 >> 2] | 0;
 _free(i11 | 0);
 STACKTOP = i13;
 return i12 | 0;
}

function _FNT_Load_Glyph(i14, i2, i3, i1) {
 i14 = i14 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i13;
 i1 = HEAP32[i2 >> 2] | 0;
 HEAP32[i12 >> 2] = 0;
 if (!i1) {
  HEAP32[i12 >> 2] = 35;
  i14 = 35;
  STACKTOP = i13;
  return i14 | 0;
 }
 i11 = HEAP32[i1 + 132 >> 2] | 0;
 if (i11 | 0) if ((HEAP32[i1 + 16 >> 2] | 0) >>> 0 > i3 >>> 0) {
  if (!i3) i1 = HEAPU8[i11 + 106 >> 0] | 0; else i1 = i3 + -1 | 0;
  i2 = (HEAP16[i11 + 4 >> 1] | 0) == 768;
  i1 = (Math_imul(i2 ? 6 : 4, i1) | 0) + (i2 ? 148 : 118) | 0;
  i4 = HEAP32[i11 + 8 >> 2] | 0;
  if (i1 >>> 0 >= (i4 + -2 + (i2 ? -4 : -2) | 0) >>> 0) {
   HEAP32[i12 >> 2] = 3;
   i14 = 3;
   STACKTOP = i13;
   return i14 | 0;
  }
  i7 = HEAP32[i11 + 160 >> 2] | 0;
  i1 = i7 + i1 + 2 | 0;
  i3 = i1 + -2 | 0;
  i3 = HEAPU8[i3 + 1 >> 0] << 8 | HEAPU8[i3 >> 0];
  i10 = i14 + 80 | 0;
  HEAP32[i10 >> 2] = i3;
  if (i2) {
   i2 = i1 + 4 + -4 | 0;
   i1 = HEAPU8[i2 + 2 >> 0] << 16 | HEAPU8[i2 + 3 >> 0] << 24 | HEAPU8[i2 + 1 >> 0] << 8;
  } else {
   i2 = i1 + 2 + -2 | 0;
   i1 = HEAPU8[i2 + 1 >> 0] << 8;
  }
  i6 = HEAPU8[i2 >> 0] | i1;
  if (i6 >>> 0 >= i4 >>> 0) {
   HEAP32[i12 >> 2] = 3;
   i14 = 3;
   STACKTOP = i13;
   return i14 | 0;
  }
  i2 = HEAP32[(HEAP32[i14 + 4 >> 2] | 0) + 100 >> 2] | 0;
  i3 = (i3 + 7 | 0) >>> 3;
  i8 = i14 + 84 | 0;
  HEAP32[i8 >> 2] = i3;
  i1 = HEAPU16[i11 + 96 >> 1] | 0;
  i9 = i14 + 76 | 0;
  HEAP32[i9 >> 2] = i1;
  HEAP8[i14 + 94 >> 0] = 1;
  if (((Math_imul(i1, i3) | 0) + i6 | 0) >>> 0 > i4 >>> 0) {
   HEAP32[i12 >> 2] = 3;
   i14 = 3;
   STACKTOP = i13;
   return i14 | 0;
  }
  i1 = _ft_mem_realloc(i2, i1, 0, i3, 0, i12) | 0;
  HEAP32[i14 + 88 >> 2] = i1;
  i2 = HEAP32[i12 >> 2] | 0;
  if (i2 | 0) {
   i14 = i2;
   STACKTOP = i13;
   return i14 | 0;
  }
  if (i3 | 0) {
   i5 = i1;
   i4 = i3;
   i1 = i7 + i6 | 0;
   while (1) {
    i7 = HEAP32[i9 >> 2] | 0;
    i3 = i1 + i7 | 0;
    if ((i7 | 0) > 0) {
     i2 = i5;
     while (1) {
      HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 < i3 >>> 0) i2 = i2 + (HEAP32[i8 >> 2] | 0) | 0; else break;
     }
    }
    i4 = i4 + -1 | 0;
    if (!i4) break; else i5 = i5 + 1 | 0;
   }
  }
  HEAP32[(HEAP32[i14 + 156 >> 2] | 0) + 4 >> 2] = 1;
  HEAP32[i14 + 100 >> 2] = 0;
  i8 = HEAPU16[i11 + 80 >> 1] | 0;
  HEAP32[i14 + 104 >> 2] = i8;
  HEAP32[i14 + 72 >> 2] = 1651078259;
  i7 = HEAP32[i10 >> 2] << 6;
  i10 = i14 + 24 | 0;
  HEAP32[i10 >> 2] = i7;
  i11 = HEAP32[i9 >> 2] << 6;
  HEAP32[i14 + 28 >> 2] = i11;
  HEAP32[i14 + 40 >> 2] = i7;
  HEAP32[i14 + 32 >> 2] = 0;
  HEAP32[i14 + 36 >> 2] = i8 << 6;
  _ft_synthesize_vertical_metrics(i10, i11);
  i14 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i13;
  return i14 | 0;
 }
 HEAP32[i12 >> 2] = 6;
 i14 = 6;
 STACKTOP = i13;
 return i14 | 0;
}

function _tt_cmap14_char_var_index(i1, i12, i14, i8) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0;
 i11 = HEAP32[i1 + 16 >> 2] | 0;
 i4 = i11 + 10 | 0;
 i1 = 0;
 i2 = 0;
 i3 = (HEAPU8[i11 + 7 >> 0] | 0) << 16 | (HEAPU8[i11 + 6 >> 0] | 0) << 24 | (HEAPU8[i11 + 8 >> 0] | 0) << 8 | (HEAPU8[i11 + 9 >> 0] | 0);
 while (1) {
  if (i2 >>> 0 >= i3 >>> 0) {
   i13 = 0;
   i10 = 20;
   break;
  }
  i5 = (i2 + i3 | 0) >>> 1;
  i9 = i4 + (i5 * 11 | 0) + 3 | 0;
  i15 = i9 + -3 | 0;
  i15 = (HEAPU8[i15 + 1 >> 0] | 0) << 8 | (HEAPU8[i15 >> 0] | 0) << 16 | (HEAPU8[i15 + 2 >> 0] | 0);
  i6 = i15 >>> 0 > i8 >>> 0;
  i7 = i15 >>> 0 < i8 >>> 0;
  i9 = i7 ? i1 : i9;
  if ((i15 | 0) == (i8 | 0)) break; else {
   i1 = i6 ? i1 : i9;
   i2 = i6 ? i2 : i7 ? i5 + 1 | 0 : i2;
   i3 = i6 ? i5 : i3;
  }
 }
 if ((i10 | 0) == 20) return i13 | 0;
 if (!i9) {
  i15 = 0;
  return i15 | 0;
 }
 i1 = (HEAPU8[i9 + 1 >> 0] | 0) << 16 | (HEAPU8[i9 >> 0] | 0) << 24 | (HEAPU8[i9 + 2 >> 0] | 0) << 8 | (HEAPU8[i9 + 3 >> 0] | 0);
 i7 = (HEAPU8[i9 + 5 >> 0] | 0) << 16 | (HEAPU8[i9 + 4 >> 0] | 0) << 24 | (HEAPU8[i9 + 6 >> 0] | 0) << 8 | (HEAPU8[i9 + 7 >> 0] | 0);
 L10 : do if (i1 | 0) {
  i1 = i11 + i1 | 0;
  i5 = i1 + 4 | 0;
  i1 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
  i4 = 0;
  while (1) {
   while (1) {
    if (i4 >>> 0 >= i1 >>> 0) break L10;
    i6 = (i1 + i4 | 0) >>> 1;
    i2 = i5 + (i6 << 2) + 3 | 0;
    i3 = i2 + -3 | 0;
    i3 = (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0) << 16 | (HEAPU8[i3 + 2 >> 0] | 0);
    if (i3 >>> 0 > i14 >>> 0) i1 = i6; else break;
   }
   if (((HEAPU8[i2 >> 0] | 0) + i3 | 0) >>> 0 < i14 >>> 0) i4 = i6 + 1 | 0; else break;
  }
  i15 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 + 12 >> 2] | 0) + 12 >> 2] & 255](i12, i14) | 0;
  return i15 | 0;
 } while (0);
 if (!i7) {
  i15 = 0;
  return i15 | 0;
 }
 i6 = i11 + i7 | 0;
 i1 = (HEAPU8[i6 + 1 >> 0] | 0) << 16 | (HEAPU8[i6 >> 0] | 0) << 24 | (HEAPU8[i6 + 2 >> 0] | 0) << 8 | (HEAPU8[i6 + 3 >> 0] | 0);
 i6 = i6 + 4 | 0;
 if (!i1) {
  i15 = 0;
  return i15 | 0;
 } else i2 = 0;
 L26 : while (1) {
  while (1) {
   i4 = (i2 + i1 | 0) >>> 1;
   i5 = i6 + (i4 * 5 | 0) + 3 | 0;
   i3 = i5 + -3 | 0;
   i3 = (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0) << 16 | (HEAPU8[i3 + 2 >> 0] | 0);
   if (i3 >>> 0 > i14 >>> 0) break;
   if (i3 >>> 0 >= i14 >>> 0) {
    i10 = 19;
    break L26;
   }
   i2 = i4 + 1 | 0;
   if (i2 >>> 0 >= i1 >>> 0) {
    i13 = 0;
    i10 = 20;
    break L26;
   }
  }
  if (i2 >>> 0 < i4 >>> 0) i1 = i4; else {
   i13 = 0;
   i10 = 20;
   break;
  }
 }
 if ((i10 | 0) == 19) {
  i15 = (HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i5 + 1 >> 0] | 0);
  return i15 | 0;
 } else if ((i10 | 0) == 20) return i13 | 0;
 return 0;
}

function _psh_hint_table_find_strong_points(i9, i10, i2, i1, i12, i13) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 if (!i1) return;
 i14 = 0 - i13 | 0;
 i15 = (i9 | 0) == 0;
 i11 = (i13 | 0) == 2;
 i8 = i11 ? 128 : 256;
 i11 = i11 ? 256 : 128;
 while (1) {
  i7 = HEAP32[i2 + 28 >> 2] | 0;
  i5 = i2 + 16 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  L6 : do if (!(i6 & 16)) {
   i3 = HEAP8[i2 + 20 >> 0] | 0;
   if ((i3 | 0) == (i13 | 0) | (i3 | 0) == (i14 | 0)) i16 = 6; else {
    i3 = HEAP8[i2 + 21 >> 0] | 0;
    if ((i3 | 0) == (i13 | 0) | (i3 | 0) == (i14 | 0)) i16 = 6;
   }
   if ((i16 | 0) == 6) {
    i16 = 0;
    if (i3 | 0) if ((i3 | 0) == (i13 | 0)) {
     if (i15) break; else i3 = 0;
     while (1) {
      i4 = HEAP32[i10 + (i3 << 2) >> 2] | 0;
      i17 = i7 - (HEAP32[i4 >> 2] | 0) | 0;
      i3 = i3 + 1 | 0;
      if ((i17 | 0) < (i12 | 0) & (0 - i17 | 0) < (i12 | 0)) break;
      if (i3 >>> 0 >= i9 >>> 0) break L6;
     }
     HEAP32[i5 >> 2] = i6 | 528;
     HEAP32[i2 + 24 >> 2] = i4;
     break;
    } else {
     if ((i3 | 0) != (i14 | 0) | i15) break; else i3 = 0;
     while (1) {
      i4 = HEAP32[i10 + (i3 << 2) >> 2] | 0;
      i17 = i7 - (HEAP32[i4 >> 2] | 0) - (HEAP32[i4 + 4 >> 2] | 0) | 0;
      i3 = i3 + 1 | 0;
      if ((i17 | 0) < (i12 | 0) & (0 - i17 | 0) < (i12 | 0)) break;
      if (i3 >>> 0 >= i9 >>> 0) break L6;
     }
     HEAP32[i5 >> 2] = i6 | 1040;
     HEAP32[i2 + 24 >> 2] = i4;
     break;
    }
   }
   if (i6 & 64 | 0) {
    L26 : do if (!(i6 & i8)) {
     if (!((i6 & i11 | 0) == 0 | i15)) {
      i3 = 0;
      while (1) {
       i4 = HEAP32[i10 + (i3 << 2) >> 2] | 0;
       i17 = i7 - (HEAP32[i4 >> 2] | 0) - (HEAP32[i4 + 4 >> 2] | 0) | 0;
       i3 = i3 + 1 | 0;
       if ((i17 | 0) < (i12 | 0) & (0 - i17 | 0) < (i12 | 0)) break;
       if (i3 >>> 0 >= i9 >>> 0) break L26;
      }
      HEAP32[i2 + 24 >> 2] = i4;
      HEAP32[i5 >> 2] = i6 | 1040;
     }
    } else {
     if (i15) break L6; else i3 = 0;
     while (1) {
      i4 = HEAP32[i10 + (i3 << 2) >> 2] | 0;
      i17 = i7 - (HEAP32[i4 >> 2] | 0) | 0;
      i3 = i3 + 1 | 0;
      if ((i17 | 0) < (i12 | 0) & (0 - i17 | 0) < (i12 | 0)) break;
      if (i3 >>> 0 >= i9 >>> 0) break L26;
     }
     HEAP32[i2 + 24 >> 2] = i4;
     HEAP32[i5 >> 2] = i6 | 528;
    } while (0);
    i4 = i2 + 24 | 0;
    if (!((HEAP32[i4 >> 2] | 0) != 0 | i15)) {
     i3 = 0;
     while (1) {
      i5 = HEAP32[i10 + (i3 << 2) >> 2] | 0;
      i6 = HEAP32[i5 >> 2] | 0;
      if ((i7 | 0) >= (i6 | 0)) if ((i7 | 0) <= ((HEAP32[i5 + 4 >> 2] | 0) + i6 | 0)) break;
      i3 = i3 + 1 | 0;
      if (i3 >>> 0 >= i9 >>> 0) break L6;
     }
     HEAP32[i4 >> 2] = i5;
    }
   }
  } while (0);
  i1 = i1 + -1 | 0;
  if (!i1) break; else i2 = i2 + 40 | 0;
 }
 return;
}

function _tt_cmap8_validate(i1, i13) {
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 i3 = i1 + 8208 | 0;
 i2 = i13 + 160 | 0;
 if (i3 >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) _ft_validator_error(i13, 8);
 i12 = (HEAPU8[i1 + 5 >> 0] | 0) << 16 | (HEAPU8[i1 + 4 >> 0] | 0) << 24 | (HEAPU8[i1 + 6 >> 0] | 0) << 8 | (HEAPU8[i1 + 7 >> 0] | 0);
 if (i12 >>> 0 < 8208 ? 1 : i12 >>> 0 > ((HEAP32[i2 >> 2] | 0) - i1 | 0) >>> 0) _ft_validator_error(i13, 8);
 i12 = i1 + 12 | 0;
 i11 = (HEAPU8[i1 + 8205 >> 0] | 0) << 16 | (HEAPU8[i1 + 8204 >> 0] | 0) << 24 | (HEAPU8[i1 + 8206 >> 0] | 0) << 8 | (HEAPU8[i1 + 8207 >> 0] | 0);
 if (i11 >>> 0 > ((((HEAP32[i2 >> 2] | 0) - i3 | 0) >>> 0) / 12 | 0) >>> 0) _ft_validator_error(i13, 8);
 if (!i11) return 0;
 i9 = i13 + 164 | 0;
 i10 = i13 + 172 | 0;
 i7 = 0;
 i8 = 0;
 L13 : while (1) {
  i5 = (HEAPU8[i3 + 1 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24;
  i1 = i5 | (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i3 + 3 >> 0] | 0);
  i6 = (HEAPU8[i3 + 5 >> 0] | 0) << 16 | (HEAPU8[i3 + 4 >> 0] | 0) << 24;
  i2 = i8;
  i8 = i6 | (HEAPU8[i3 + 6 >> 0] | 0) << 8 | (HEAPU8[i3 + 7 >> 0] | 0);
  i4 = i3;
  i3 = i3 + 12 | 0;
  if (i8 >>> 0 < i1 >>> 0) {
   i1 = 10;
   break;
  }
  if (!((i7 | 0) == 0 | i1 >>> 0 > i2 >>> 0)) {
   i1 = 12;
   break;
  }
  do if (HEAP32[i9 >> 2] | 0) {
   i2 = i8 - i1 | 0;
   i14 = HEAP32[i10 >> 2] | 0;
   if (!(i14 >>> 0 >= i2 >>> 0 ? ((HEAPU8[i4 + 9 >> 0] | 0) << 16 | (HEAPU8[i4 + 8 >> 0] | 0) << 24 | (HEAPU8[i4 + 10 >> 0] | 0) << 8 | (HEAPU8[i4 + 11 >> 0] | 0)) >>> 0 < (i14 - i2 | 0) >>> 0 : 0)) {
    i1 = 15;
    break L13;
   }
   i2 = i2 + 1 | 0;
   if (!i5) {
    if (i6 | 0) {
     i1 = 24;
     break L13;
    }
    if (!i2) break;
    while (1) {
     if ((HEAPU8[i12 + (i1 >>> 3 & 8191) >> 0] | 0) & 128 >>> (i1 & 7) | 0) {
      i1 = 27;
      break L13;
     }
     i2 = i2 + -1 | 0;
     if (!i2) break; else i1 = i1 + 1 | 0;
    }
   } else {
    if (!i2) break;
    while (1) {
     if (!((HEAPU8[i12 + (i1 >>> 19) >> 0] | 0) & 128 >>> (i1 >>> 16 & 7))) {
      i1 = 19;
      break L13;
     }
     if (!((HEAPU8[i12 + (i1 >>> 3 & 8191) >> 0] | 0) & 128 >>> (i1 & 7))) {
      i1 = 21;
      break L13;
     }
     i2 = i2 + -1 | 0;
     if (!i2) break; else i1 = i1 + 1 | 0;
    }
   }
  } while (0);
  i7 = i7 + 1 | 0;
  if ((i7 | 0) == (i11 | 0)) {
   i1 = 30;
   break;
  }
 }
 if ((i1 | 0) == 10) _ft_validator_error(i13, 8); else if ((i1 | 0) == 12) _ft_validator_error(i13, 8); else if ((i1 | 0) == 15) _ft_validator_error(i13, 16); else if ((i1 | 0) == 19) _ft_validator_error(i13, 8); else if ((i1 | 0) == 21) _ft_validator_error(i13, 8); else if ((i1 | 0) == 24) _ft_validator_error(i13, 8); else if ((i1 | 0) == 27) _ft_validator_error(i13, 8); else if ((i1 | 0) == 30) return 0;
 return 0;
}

function _FT_Stream_OpenGzip(i7, i5) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i10 + 4 | 0;
 i8 = i10;
 if (!((i7 | 0) != 0 & (i5 | 0) != 0)) {
  HEAP32[i8 >> 2] = 40;
  i9 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i3 = i5 + 28 | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i6 = _ft_gzip_check_header(i5) | 0;
 HEAP32[i8 >> 2] = i6;
 if (i6 | 0) {
  i9 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i1 = i7;
 i2 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i1 = i7 + 28 | 0;
 HEAP32[i1 >> 2] = i9;
 i6 = _ft_mem_qalloc(i9, 8276, i8) | 0;
 do if (!(HEAP32[i8 >> 2] | 0)) {
  i2 = i6 + 12 | 0;
  HEAP32[i6 + 4 >> 2] = i7;
  HEAP32[i6 >> 2] = i5;
  HEAP32[i6 + 8 >> 2] = HEAP32[i1 >> 2];
  i1 = i6 + 8264 | 0;
  HEAP32[i6 + 8272 >> 2] = i1;
  HEAP32[i6 + 8268 >> 2] = i1;
  HEAP32[i1 >> 2] = 0;
  i1 = _ft_gzip_check_header(i5) | 0;
  if (!i1) {
   i1 = _FT_Stream_Pos(i5) | 0;
   HEAP32[i6 + 68 >> 2] = i1;
   HEAP32[i6 + 44 >> 2] = 82;
   HEAP32[i6 + 48 >> 2] = 31;
   HEAP32[i6 + 52 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i6 + 16 >> 2] = 0;
   HEAP32[i2 >> 2] = i6 + 4168;
   if (!(_inflateInit2_(i2, -15) | 0)) if (!(HEAP32[i2 >> 2] | 0)) i1 = 3; else {
    HEAP32[i8 >> 2] = 0;
    HEAP32[i7 + 12 >> 2] = i6;
    break;
   } else i1 = 3;
  }
  HEAP32[i8 >> 2] = i1;
  _ft_mem_free(i9, i6);
  i9 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i10;
  return i9 | 0;
 } while (0);
 i1 = HEAP32[i5 + 8 >> 2] | 0;
 if (!(_FT_Stream_Seek(i5, (HEAP32[i5 + 4 >> 2] | 0) + -4 | 0) | 0)) {
  i2 = _FT_Stream_ReadULong(i5, i4) | 0;
  i2 = HEAP32[i4 >> 2] | 0 ? 0 : i2;
  _FT_Stream_Seek(i5, i1) | 0;
  if ((i2 + -1 | 0) >>> 0 < 40959) {
   i1 = _ft_mem_alloc(i9, i2, i8) | 0;
   do if (!(HEAP32[i8 >> 2] | 0)) {
    if ((_ft_gzip_file_io(i6, 0, i1, i2) | 0) != (i2 | 0)) {
     _ft_gzip_file_io(i6, 0, 0, 0) | 0;
     _ft_mem_free(i9, i1);
     break;
    }
    _inflateEnd(i6 + 12 | 0) | 0;
    HEAP32[i6 + 44 >> 2] = 0;
    HEAP32[i6 + 48 >> 2] = 0;
    HEAP32[i6 + 52 >> 2] = 0;
    HEAP32[i6 + 24 >> 2] = 0;
    HEAP32[i6 + 28 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
    HEAP32[i6 + 4 >> 2] = 0;
    HEAP32[i6 + 8 >> 2] = 0;
    HEAP32[i6 + 12 >> 2] = 0;
    HEAP32[i6 + 16 >> 2] = 0;
    _ft_mem_free(i9, i6);
    HEAP32[i7 + 12 >> 2] = 0;
    HEAP32[i7 + 4 >> 2] = i2;
    HEAP32[i7 + 8 >> 2] = 0;
    HEAP32[i7 >> 2] = i1;
    HEAP32[i7 + 20 >> 2] = 0;
    HEAP32[i7 + 24 >> 2] = 59;
    i9 = HEAP32[i8 >> 2] | 0;
    STACKTOP = i10;
    return i9 | 0;
   } while (0);
   HEAP32[i8 >> 2] = 0;
  }
 }
 HEAP32[i7 + 4 >> 2] = 2147483647;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 20 >> 2] = 64;
 HEAP32[i7 + 24 >> 2] = 59;
 i9 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i10;
 return i9 | 0;
}

function _ass_shaper_find_runs(i1, i2, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!i9) return;
 i7 = i2 + 8 | 0;
 i6 = 0;
 i1 = 0;
 do {
  i4 = i8 + (i6 * 344 | 0) | 0;
  i5 = i4 + -344 | 0;
  i4 = HEAP32[i4 >> 2] | 0;
  if ((i4 | 0) != 65532) {
   i2 = i8 + (i6 * 344 | 0) + 8 | 0;
   i3 = i8 + (i6 * 344 | 0) + 12 | 0;
   _ass_font_get_index(HEAP32[i7 >> 2] | 0, HEAP32[i2 >> 2] | 0, i4, i3, i8 + (i6 * 344 | 0) + 16 | 0) | 0;
   L8 : do if ((i6 | 0) > 0) {
    do if ((HEAP32[i5 + 8 >> 2] | 0) == (HEAP32[i2 >> 2] | 0)) if ((HEAP32[i5 + 12 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) if ((HEAP32[i5 + 20 >> 2] | 0) == (HEAP32[i8 + (i6 * 344 | 0) + 20 >> 2] | 0)) if (!(+HEAPF64[i5 + 24 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 24 >> 3])) {
     i2 = i5 + 84 | 0;
     if ((HEAP32[i2 >> 2] | 0) == (HEAP32[i8 + (i6 * 344 | 0) + 84 >> 2] | 0)) if ((HEAP32[i2 + 4 >> 2] | 0) == (HEAP32[i8 + (i6 * 344 | 0) + 88 >> 2] | 0)) if ((HEAP32[i2 + 8 >> 2] | 0) == (HEAP32[i8 + (i6 * 344 | 0) + 92 >> 2] | 0)) if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i8 + (i6 * 344 | 0) + 96 >> 2] | 0)) if ((HEAP32[i5 + 140 >> 2] | 0) == (HEAP32[i8 + (i6 * 344 | 0) + 140 >> 2] | 0)) if (!(+HEAPF64[i5 + 144 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 144 >> 3])) if (!(+HEAPF64[i5 + 152 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 152 >> 3])) if (!(+HEAPF64[i5 + 160 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 160 >> 3])) if (!(+HEAPF64[i5 + 168 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 168 >> 3])) {
      if (+HEAPF64[i5 + 176 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 176 >> 3]) break;
      if (+HEAPF64[i5 + 184 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 184 >> 3]) break;
      if (+HEAPF64[i5 + 192 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 192 >> 3]) break;
      if (+HEAPF64[i5 + 200 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 200 >> 3]) break;
      if (+HEAPF64[i5 + 208 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 208 >> 3]) break;
      if (+HEAPF64[i5 + 216 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 216 >> 3]) break;
      if ((HEAP32[i5 + 240 >> 2] | 0) != (HEAP32[i8 + (i6 * 344 | 0) + 240 >> 2] | 0)) break;
      if (+HEAPF64[i5 + 248 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 248 >> 3]) break;
      if (+HEAPF64[i5 + 256 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 256 >> 3]) break;
      if (+HEAPF64[i5 + 264 >> 3] != +HEAPF64[i8 + (i6 * 344 | 0) + 264 >> 3]) break;
      if ((HEAP32[i5 + 272 >> 2] | 0) != (HEAP32[i8 + (i6 * 344 | 0) + 272 >> 2] | 0)) break;
      if ((HEAP32[i5 + 276 >> 2] | 0) != (HEAP32[i8 + (i6 * 344 | 0) + 276 >> 2] | 0)) break;
      if ((HEAP32[i5 + 280 >> 2] | 0) == (HEAP32[i8 + (i6 * 344 | 0) + 280 >> 2] | 0)) break L8;
     }
    } while (0);
    i1 = i1 + 1 | 0;
   } while (0);
   HEAP32[i8 + (i6 * 344 | 0) + 284 >> 2] = i1;
  }
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != (i9 | 0));
 return;
}

function _af_glyph_hints_align_strong_points(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 i19 = HEAP32[i1 + 24 >> 2] | 0;
 i20 = i3 + (i19 * 40 | 0) | 0;
 i21 = HEAP32[i1 + 44 + (i2 * 1468 | 0) + 20 >> 2] | 0;
 i1 = HEAP32[i1 + 44 + (i2 * 1468 | 0) + 12 >> 2] | 0;
 i18 = (i2 | 0) == 0;
 i17 = i18 ? 4 : 8;
 if (!((i1 | 0) > 0 & (i19 | 0) > 0)) return;
 i19 = i17 | 16;
 i15 = (i2 | 0) == 1;
 i16 = i21 + (i1 * 48 | 0) + -48 | 0;
 i14 = i1 * 48 | 0;
 i8 = (i14 | 0) / 48 | 0;
 i9 = (i14 | 0) < 432;
 i10 = i16 + 8 | 0;
 i11 = i16 + 4 | 0;
 i12 = i21 + 8 | 0;
 i13 = i21 + 4 | 0;
 i14 = (i14 | 0) > 0;
 do {
  i1 = HEAP16[i3 >> 1] | 0;
  if (!(i1 & 65535 & i19)) {
   if (i15) {
    i7 = HEAP16[i3 + 14 >> 1] | 0;
    i2 = i3 + 8 | 0;
   } else {
    i7 = HEAP16[i3 + 12 >> 1] | 0;
    i2 = i3 + 4 | 0;
   }
   i2 = HEAP32[i2 >> 2] | 0;
   i4 = HEAP16[i21 >> 1] | 0;
   L12 : do if ((i4 << 16 >> 16 | 0) < (i7 | 0)) {
    if ((i7 | 0) >= (HEAP16[i16 >> 1] | 0)) {
     i2 = (HEAP32[i10 >> 2] | 0) + i2 - (HEAP32[i11 >> 2] | 0) | 0;
     break;
    }
    L17 : do if (i9) {
     i2 = i4 << 16 >> 16;
     if (i14 & (i2 | 0) < (i7 | 0)) {
      i4 = 1;
      while (1) {
       i2 = HEAP16[i21 + (i4 * 48 | 0) >> 1] | 0;
       if ((i4 | 0) < (i8 | 0) & (i2 | 0) < (i7 | 0)) i4 = i4 + 1 | 0; else break;
      }
     } else i4 = 0;
     if ((i2 | 0) == (i7 | 0)) {
      i2 = HEAP32[i21 + (i4 * 48 | 0) + 8 >> 2] | 0;
      break L12;
     }
    } else {
     i2 = i8;
     i4 = 0;
     while (1) {
      while (1) {
       if ((i4 | 0) >= (i2 | 0)) break L17;
       i6 = i2 + i4 >> 1;
       i5 = HEAP16[i21 + (i6 * 48 | 0) >> 1] | 0;
       if ((i7 | 0) < (i5 | 0)) i2 = i6; else break;
      }
      if ((i7 | 0) <= (i5 | 0)) break;
      i4 = i6 + 1 | 0;
     }
     i2 = HEAP32[i21 + (i6 * 48 | 0) + 8 >> 2] | 0;
     break L12;
    } while (0);
    i2 = i21 + (i4 * 48 | 0) | 0;
    i6 = i2 + -48 | 0;
    i5 = i6 + 16 | 0;
    i1 = HEAP32[i5 >> 2] | 0;
    if (!i1) {
     i22 = i6 + 8 | 0;
     i1 = _FT_DivFix((HEAP32[i21 + (i4 * 48 | 0) + 8 >> 2] | 0) - (HEAP32[i22 >> 2] | 0) | 0, (HEAP16[i2 >> 1] | 0) - (HEAP16[i6 >> 1] | 0) | 0) | 0;
     HEAP32[i5 >> 2] = i1;
     i4 = i6;
     i2 = i22;
    } else {
     i4 = i6;
     i2 = i6 + 8 | 0;
    }
    i2 = HEAP32[i2 >> 2] | 0;
    i2 = (_FT_MulFix(i7 - (HEAP16[i4 >> 1] | 0) | 0, i1) | 0) + i2 | 0;
    i1 = HEAP16[i3 >> 1] | 0;
   } else i2 = (HEAP32[i12 >> 2] | 0) + i2 - (HEAP32[i13 >> 2] | 0) | 0; while (0);
   HEAP32[(i18 ? i3 + 16 | 0 : i3 + 20 | 0) >> 2] = i2;
   HEAP16[i3 >> 1] = i1 & 65535 | i17;
  }
  i3 = i3 + 40 | 0;
 } while (i3 >>> 0 < i20 >>> 0);
 return;
}

function _ass_fontconfig_add_provider(i3, i4, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 i5 = i21 + 8 | 0;
 i14 = i21 + 832 | 0;
 i15 = i21 + 828 | 0;
 i16 = i21 + 824 | 0;
 i17 = i21 + 820 | 0;
 i18 = i21 + 816 | 0;
 i19 = i21 + 416 | 0;
 i20 = i21 + 16 | 0;
 i6 = _calloc(1, 12) | 0;
 if (!i6) {
  i20 = 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 i2 = _FcConfigCreate() | 0;
 HEAP32[i6 >> 2] = i2;
 i1 = _FcConfigParseAndLoad(i2, i1, 1) | 0;
 if (!i1) {
  _ass_msg(i3, 2, 354835, i21);
  _FcConfigDestroy(HEAP32[i6 >> 2] | 0);
  i2 = _FcInitLoadConfig() | 0;
  HEAP32[i6 >> 2] = i2;
 }
 if (i2) i1 = _FcConfigBuildFonts(i2) | 0;
 if (i1 | 0) if (HEAP32[i6 >> 2] | 0) {
  i13 = _ass_font_provider_new(i4, 90496, i6) | 0;
  i3 = _FcConfigGetFonts(HEAP32[i6 >> 2] | 0, 0) | 0;
  if ((HEAP32[i3 >> 2] | 0) > 0) {
   i4 = i3 + 8 | 0;
   i5 = i14 + 20 | 0;
   i6 = i14 + 28 | 0;
   i7 = i14 + 24 | 0;
   i8 = i14 + 12 | 0;
   i9 = i14 + 16 | 0;
   i10 = i14 + 4 | 0;
   i11 = i14 + 8 | 0;
   i2 = 0;
   do {
    i12 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i2 << 2) >> 2] | 0;
    i1 = (_FcPatternGetBool(i12, 354939, 0, i15) | 0) != 0;
    if (!(i1 | (HEAP32[i15 >> 2] | 0) != 1)) {
     i1 = _FcPatternGetInteger(i12, 354947, 0, i5) | 0;
     i1 = _FcPatternGetInteger(i12, 354953, 0, i6) | 0 | i1;
     i1 = i1 | (_FcPatternGetInteger(i12, 354959, 0, i17) | 0);
     if (!(i1 | (_FcPatternGetInteger(i12, 354966, 0, i16) | 0))) {
      i1 = HEAP32[i17 >> 2] | 0;
      HEAP32[i7 >> 2] = (i1 | 0) < 51 ? 300 : (i1 | 0) < 101 ? 400 : 700;
      if (!(_FcPatternGetString(i12, 354972, 0, i18) | 0)) {
       i1 = 0;
       while (1) {
        HEAP32[i8 >> 2] = i1;
        i22 = (_FcPatternGetString(i12, 354977, i1, i20 + (i1 << 2) | 0) | 0) == 0;
        i1 = HEAP32[i8 >> 2] | 0;
        if (i22 & (i1 | 0) < 100) i1 = i1 + 1 | 0; else break;
       }
       HEAP32[i14 >> 2] = i20;
       i1 = 0;
       while (1) {
        HEAP32[i9 >> 2] = i1;
        i22 = (_FcPatternGetString(i12, 354984, i1, i19 + (i1 << 2) | 0) | 0) == 0;
        i1 = HEAP32[i9 >> 2] | 0;
        if (i22 & (i1 | 0) < 100) i1 = i1 + 1 | 0; else break;
       }
       HEAP32[i10 >> 2] = i19;
       if (_FcPatternGetString(i12, 354993, 0, i11) | 0) HEAP32[i11 >> 2] = 0;
       _ass_font_provider_add_font(i13, i14, HEAP32[i18 >> 2] | 0, HEAP32[i16 >> 2] | 0, i12) | 0;
      }
     }
    }
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
  }
  i22 = i13;
  STACKTOP = i21;
  return i22 | 0;
 }
 _ass_msg(i3, 0, 354898, i5);
 _FcConfigDestroy(HEAP32[i6 >> 2] | 0);
 _free(i6);
 i22 = 0;
 STACKTOP = i21;
 return i22 | 0;
}

function _fribidi_shape_arabic(i9, i10, i13, i14, i15) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i16;
 if (!((i13 | 0) != 0 & (i15 | 0) != 0)) {
  STACKTOP = i16;
  return;
 }
 i11 = (i13 | 0) > 0;
 if ((i9 & 256 | 0) != 0 & i11) {
  i1 = 0;
  do {
   i2 = HEAPU8[i14 + i1 >> 0] | 0;
   if (i2 & 4 | 0) {
    i8 = i15 + (i1 << 2) | 0;
    i7 = (HEAP32[i8 >> 2] | 0) + -1569 | 0;
    HEAP32[i8 >> 2] = HEAP32[(i7 >>> 0 > 178 ? i8 : 2036 + (i7 << 4) + ((i2 & 3) << 2) | 0) >> 2];
   }
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i13 | 0));
 }
 if (i9 & 512 | 0) {
  i6 = i13 + -1 | 0;
  if ((i13 | 0) > 1) {
   i7 = i12 + 4 | 0;
   i8 = i12 + 8 | 0;
   i4 = 0;
   do {
    i1 = HEAP8[i10 + i4 >> 0] | 0;
    i5 = i4;
    i4 = i4 + 1 | 0;
    do if (i1 & 1) if (i1 << 24 >> 24 == (HEAP8[i10 + i4 >> 0] | 0)) {
     i2 = i15 + (i5 << 2) | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if ((i1 + -65247 | 0) >>> 0 <= 1) {
      i3 = i15 + (i4 << 2) | 0;
      i17 = HEAP32[i3 >> 2] | 0;
      HEAP32[i12 >> 2] = i1;
      HEAP32[i7 >> 2] = i17;
      HEAP32[i8 >> 2] = 0;
      i1 = _bsearch(i12, 1280, 8, 12, 177) | 0;
      if (!i1) break;
      i1 = HEAP32[i1 + 8 >> 2] | 0;
      if (i1 | 0) {
       HEAP32[i2 >> 2] = 65279;
       i17 = i14 + i5 | 0;
       HEAP8[i17 >> 0] = HEAP8[i17 >> 0] | 32;
       HEAP32[i3 >> 2] = i1;
      }
     }
    } while (0);
   } while ((i4 | 0) != (i6 | 0));
  }
 }
 if (!(i9 & 1024)) {
  STACKTOP = i16;
  return;
 }
 i6 = i13 + -1 | 0;
 if ((i13 | 0) > 1) {
  i7 = i12 + 4 | 0;
  i8 = i12 + 8 | 0;
  i4 = 0;
  do {
   i1 = HEAP8[i10 + i4 >> 0] | 0;
   i5 = i4;
   i4 = i4 + 1 | 0;
   do if (i1 & 1) if (i1 << 24 >> 24 == (HEAP8[i10 + i4 >> 0] | 0)) {
    i2 = i15 + (i5 << 2) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if ((i1 + -1600 | 0) >>> 0 <= 63676) {
     i3 = i15 + (i4 << 2) | 0;
     i17 = HEAP32[i3 >> 2] | 0;
     HEAP32[i12 >> 2] = i1;
     HEAP32[i7 >> 2] = i17;
     HEAP32[i8 >> 2] = 0;
     i1 = _bsearch(i12, 1376, 55, 12, 177) | 0;
     if (!i1) break;
     i1 = HEAP32[i1 + 8 >> 2] | 0;
     if (i1 | 0) {
      HEAP32[i2 >> 2] = 65279;
      i17 = i14 + i5 | 0;
      HEAP8[i17 >> 0] = HEAP8[i17 >> 0] | 32;
      HEAP32[i3 >> 2] = i1;
     }
    }
   } while (0);
  } while ((i4 | 0) != (i6 | 0));
 }
 if (i11) i1 = 0; else {
  STACKTOP = i16;
  return;
 }
 do {
  i2 = HEAPU8[i14 + i1 >> 0] | 0;
  if (i2 & 4 | 0) {
   i17 = i15 + (i1 << 2) | 0;
   i12 = (HEAP32[i17 >> 2] | 0) + -1611 | 0;
   HEAP32[i17 >> 2] = HEAP32[(i12 >>> 0 > 7 ? i17 : 4900 + (i12 << 4) + ((i2 & 3) << 2) | 0) >> 2];
  }
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i13 | 0));
 STACKTOP = i16;
 return;
}

function _bitmap_hash(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 switch (HEAP32[i1 >> 2] | 0) {
 case 0:
  {
   i3 = Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((Math_imul((HEAPU8[i1 + 4 >> 0] | 0) ^ -2128831035, 16777619) | 0) ^ (HEAPU8[i1 + 5 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 6 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 7 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 8 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 9 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 10 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 11 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 12 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 13 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 14 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 15 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 16 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 17 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 18 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 19 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 20 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 21 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 22 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 23 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 24 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 25 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 26 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 27 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 28 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 29 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 30 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 31 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 32 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 33 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 34 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 35 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 36 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 37 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 38 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 39 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 40 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 41 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 42 >> 0] | 0), 16777619) | 0) ^ (HEAPU8[i1 + 43 >> 0] | 0), 16777619) | 0;
   return i3 | 0;
  }
 case 1:
  {
   i2 = HEAP32[i1 + 4 >> 2] | 0;
   i3 = HEAP8[i2 >> 0] | 0;
   if (!(i3 << 24 >> 24)) {
    i3 = -2128831035;
    return i3 | 0;
   } else i1 = -2128831035;
   do {
    i2 = i2 + 1 | 0;
    i1 = Math_imul(i1 ^ i3 & 255, 16777619) | 0;
    i3 = HEAP8[i2 >> 0] | 0;
   } while (i3 << 24 >> 24 != 0);
   return i1 | 0;
  }
 default:
  {
   i3 = 0;
   return i3 | 0;
  }
 }
 return 0;
}

function _tt_face_load_sbit(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i10;
 i7 = i1 + 724 | 0;
 i8 = i1 + 728 | 0;
 i9 = i1 + 732 | 0;
 i5 = i1 + 736 | 0;
 i2 = i1 + 508 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 if (!(FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i1, 1128418371, i6, i4) | 0)) {
  i2 = 2;
  i3 = 5;
 } else if (!(FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i1, 1161972803, i6, i4) | 0)) {
  i2 = 1;
  i3 = 5;
 } else if (!(FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i1, 1651273571, i6, i4) | 0)) {
  i2 = 1;
  i3 = 5;
 } else {
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i1, 1935829368, i6, i4) | 0;
  if (!i1) {
   i2 = 3;
   i3 = 5;
  }
 }
 L5 : do if ((i3 | 0) == 5) {
  HEAP32[i9 >> 2] = i2;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i1 >>> 0 < 8) i1 = 3; else switch (i2 & 3) {
  case 2:
  case 1:
   {
    i1 = _FT_Stream_ExtractFrame(i6, i1, i7) | 0;
    if (i1 | 0) break L5;
    i1 = HEAP32[i4 >> 2] | 0;
    HEAP32[i8 >> 2] = i1;
    i4 = HEAP32[i7 >> 2] | 0;
    i2 = (HEAPU8[i4 + 5 >> 0] | 0) << 16 | (HEAPU8[i4 + 4 >> 0] | 0) << 24 | (HEAPU8[i4 + 6 >> 0] | 0) << 8 | (HEAPU8[i4 + 7 >> 0] | 0);
    if (((HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | 0) != 131072) {
     i1 = 2;
     break L5;
    }
    if (i2 >>> 0 > 65535) {
     i1 = 3;
     break L5;
    }
    HEAP32[i5 >> 2] = (i2 * 48 | 8) >>> 0 > i1 >>> 0 ? ((i1 + -8 | 0) >>> 0) / 48 | 0 : i2;
    i9 = 0;
    STACKTOP = i10;
    return i9 | 0;
   }
  case 3:
   {
    i1 = _FT_Stream_EnterFrame(i6, 8) | 0;
    if (i1 | 0) break L5;
    i1 = _FT_Stream_GetUShort(i6) | 0;
    i2 = _FT_Stream_GetUShort(i6) | 0;
    i3 = _FT_Stream_GetULong(i6) | 0;
    _FT_Stream_ExitFrame(i6);
    if (!(i1 << 16 >> 16)) {
     i1 = 2;
     break L5;
    }
    i1 = i3 >>> 0 > 65535;
    if (i2 << 16 >> 16 == 1) {
     if (i1) {
      i1 = 3;
      break L5;
     }
    } else if (i2 << 16 >> 16 != 3 | i1) {
     i1 = 3;
     break L5;
    }
    i2 = HEAP32[i4 >> 2] | 0;
    i2 = ((i3 << 2) + 8 | 0) >>> 0 > i2 >>> 0 ? (i2 + -8 | 0) >>> 2 : i3;
    i1 = _FT_Stream_Seek(i6, (_FT_Stream_Pos(i6) | 0) + -8 | 0) | 0;
    if (i1 | 0) break L5;
    i1 = (i2 << 2) + 8 | 0;
    HEAP32[i8 >> 2] = i1;
    i1 = _FT_Stream_ExtractFrame(i6, i1, i7) | 0;
    if (i1 | 0) break L5;
    HEAP32[i5 >> 2] = i2;
    i9 = 0;
    STACKTOP = i10;
    return i9 | 0;
   }
  default:
   {
    i9 = 0;
    STACKTOP = i10;
    return i9 | 0;
   }
  }
 } while (0);
 if (HEAP32[i7 >> 2] | 0) _FT_Stream_ReleaseFrame(i6, i7);
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 i9 = i1;
 STACKTOP = i10;
 return i9 | 0;
}

function _FcConfigFilename(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!i1) i6 = 3; else {
  i2 = HEAP8[i1 >> 0] | 0;
  if (!(i2 << 24 >> 24)) i6 = 3; else {
   i8 = i1;
   i1 = i2;
  }
 }
 if ((i6 | 0) == 3) {
  i1 = _getenv(354466) | 0;
  i1 = i1 | 0 ? i1 : 354482;
  i8 = i1;
  i1 = HEAP8[i1 >> 0] | 0;
 }
 switch (i1 << 24 >> 24) {
 case 126:
  {
   if (!1) {
    i8 = 0;
    return i8 | 0;
   }
   i1 = _getenv(347408) | 0;
   if (!i1) {
    i8 = 0;
    return i8 | 0;
   }
   i8 = _FcConfigFileExists(i1, i8 + 1 | 0) | 0;
   return i8 | 0;
  }
 case 47:
  {
   i8 = _FcConfigFileExists(0, i8) | 0;
   return i8 | 0;
  }
 default:
  {
   i5 = _getenv(354493) | 0;
   i4 = (i5 | 0) != 0;
   if (i4) {
    i2 = HEAP8[i5 >> 0] | 0;
    if (!(i2 << 24 >> 24)) i1 = 3; else {
     i1 = 3;
     i3 = i5;
     do {
      i3 = i3 + 1 | 0;
      i1 = (i2 << 24 >> 24 == 58 & 1) + i1 | 0;
      i2 = HEAP8[i3 >> 0] | 0;
     } while (i2 << 24 >> 24 != 0);
    }
   } else i1 = 2;
   i7 = _calloc(i1, 4) | 0;
   if (!i7) {
    i8 = 0;
    return i8 | 0;
   }
   L16 : do if (i4) if (!(HEAP8[i5 >> 0] | 0)) {
    i2 = 0;
    i6 = 19;
   } else {
    i2 = 0;
    while (1) {
     i1 = _strchr(i5, 58) | 0;
     if (!i1) i1 = i5 + (_strlen(i5) | 0) | 0;
     i3 = i1 - i5 | 0;
     i4 = _malloc(i3 + 1 | 0) | 0;
     HEAP32[i7 + (i2 << 2) >> 2] = i4;
     if (!i4) break L16;
     _strncpy(i4, i5, i3) | 0;
     HEAP8[i4 + i3 >> 0] = 0;
     i5 = (HEAP8[i1 >> 0] | 0) == 0 ? i1 : i1 + 1 | 0;
     i2 = i2 + 1 | 0;
     if (!(HEAP8[i5 >> 0] | 0)) {
      i6 = 19;
      break;
     }
    }
   } else {
    i2 = 0;
    i6 = 19;
   } while (0);
   if ((i6 | 0) == 19) {
    i1 = _malloc(63) | 0;
    HEAP32[i7 + (i2 << 2) >> 2] = i1;
    if (i1 | 0) {
     i2 = 354509;
     i3 = i1 + 63 | 0;
     do {
      HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
      i1 = i1 + 1 | 0;
      i2 = i2 + 1 | 0;
     } while ((i1 | 0) < (i3 | 0));
     i2 = HEAP32[i7 >> 2] | 0;
     i4 = (i2 | 0) == 0;
     if (i4) i1 = 0; else {
      i3 = i7;
      i1 = i2;
      while (1) {
       i1 = _FcConfigFileExists(i1, i8) | 0;
       i3 = i3 + 4 | 0;
       if (i1 | 0) break;
       i1 = HEAP32[i3 >> 2] | 0;
       if (!i1) {
        i1 = 0;
        break;
       }
      }
      if (!i4) {
       i3 = i7;
       do {
        _free(i2);
        i3 = i3 + 4 | 0;
        i2 = HEAP32[i3 >> 2] | 0;
       } while ((i2 | 0) != 0);
      }
     }
     _free(i7);
     i8 = i1;
     return i8 | 0;
    }
   }
   i1 = HEAP32[i7 >> 2] | 0;
   if (i1 | 0) {
    i2 = 0;
    do {
     _free(i1);
     i2 = i2 + 1 | 0;
     i1 = HEAP32[i7 + (i2 << 2) >> 2] | 0;
    } while ((i1 | 0) != 0);
   }
   _free(i7);
   i8 = 0;
   return i8 | 0;
  }
 }
 return 0;
}

function _af_sort_and_quantize_widths(i11, i10, i9) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i12;
 i1 = HEAP32[i11 >> 2] | 0;
 switch (i1 | 0) {
 case 0:
  {
   i1 = 1;
   break;
  }
 case 1:
  {
   STACKTOP = i12;
   return;
  }
 default:
  {
   i4 = 1;
   i2 = 2;
  }
 }
 if ((i2 | 0) == 2) {
  while (1) {
   if (!i4) i3 = i1; else {
    i1 = i4;
    do {
     i2 = i10 + (i1 * 12 | 0) | 0;
     i1 = i1 + -1 | 0;
     i3 = i10 + (i1 * 12 | 0) | 0;
     if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[i3 >> 2] | 0)) break;
     HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i5 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
     HEAP32[i5 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
     HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
     HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
     HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
     HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
    } while ((i1 | 0) != 0);
    i3 = HEAP32[i11 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
   if (i4 >>> 0 >= i3 >>> 0) break; else {
    i1 = i3;
    i2 = 2;
   }
  }
  i7 = i3 >>> 0 > 1;
  if (i7) {
   i8 = i3 + -1 | 0;
   i5 = HEAP32[i10 >> 2] | 0;
   i6 = 0;
   i1 = 1;
   while (1) {
    i2 = (HEAP32[i10 + (i1 * 12 | 0) >> 2] | 0) - i5 | 0;
    i4 = (i1 | 0) == (i8 | 0);
    if (i4 | (i2 | 0) > (i9 | 0)) {
     i1 = (i4 & (i2 | 0) <= (i9 | 0) & 1) + i1 | 0;
     if (i6 >>> 0 < i1 >>> 0) {
      i2 = 0;
      i4 = i6;
      do {
       i13 = i10 + (i4 * 12 | 0) | 0;
       i2 = (HEAP32[i13 >> 2] | 0) + i2 | 0;
       HEAP32[i13 >> 2] = 0;
       i4 = i4 + 1 | 0;
      } while ((i4 | 0) != (i1 | 0));
      i4 = i1;
     } else {
      i2 = 0;
      i4 = i6;
     }
     HEAP32[i10 + (i6 * 12 | 0) >> 2] = (i2 | 0) / (i4 | 0) | 0;
     i2 = i1 + 1 | 0;
     if (i1 >>> 0 < i8 >>> 0) i4 = HEAP32[i10 + (i2 * 12 | 0) >> 2] | 0; else {
      i4 = i5;
      i2 = i6;
     }
    } else {
     i4 = i5;
     i2 = i6;
    }
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i3 >>> 0) break; else {
     i5 = i4;
     i6 = i2;
    }
   }
   if (i7) {
    i1 = 1;
    i4 = 1;
    while (1) {
     i2 = i10 + (i4 * 12 | 0) | 0;
     if (!(HEAP32[i2 >> 2] | 0)) i2 = i3; else {
      i13 = i10 + (i1 * 12 | 0) | 0;
      HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
      HEAP32[i13 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
      HEAP32[i13 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
      i1 = i1 + 1 | 0;
      i2 = HEAP32[i11 >> 2] | 0;
     }
     i4 = i4 + 1 | 0;
     if (i4 >>> 0 >= i2 >>> 0) break; else i3 = i2;
    }
   } else i1 = 1;
  } else i1 = 1;
 }
 HEAP32[i11 >> 2] = i1;
 STACKTOP = i12;
 return;
}

function _t1_allocate_blend(i4, i7, i8) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i12;
 i10 = HEAP32[i4 + 100 >> 2] | 0;
 HEAP32[i11 >> 2] = 0;
 i2 = i4 + 528 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  i1 = _ft_mem_alloc(i10, 420, i11) | 0;
  if (!(HEAP32[i11 >> 2] | 0)) {
   HEAP32[i1 + 416 >> 2] = 0;
   HEAP32[i2 >> 2] = i1;
   i9 = i1;
   i3 = 4;
  }
 } else {
  i9 = i1;
  i3 = 4;
 }
 L4 : do if ((i3 | 0) == 4) {
  do if (!i7) i3 = 15; else {
   i1 = HEAP32[i9 >> 2] | 0;
   if (i1 | 0) if ((i1 | 0) == (i7 | 0)) {
    i3 = 15;
    break;
   } else break;
   i6 = _ft_mem_realloc(i10, 32, 0, i7, 0, i11) | 0;
   i2 = i9 + 148 | 0;
   HEAP32[i2 >> 2] = i6;
   if (HEAP32[i11 >> 2] | 0) break L4;
   i6 = _ft_mem_realloc(i10, 196, 0, i7, 0, i11) | 0;
   i5 = i9 + 216 | 0;
   HEAP32[i5 >> 2] = i6;
   if (HEAP32[i11 >> 2] | 0) break L4;
   i3 = _ft_mem_realloc(i10, 16, 0, i7, 0, i11) | 0;
   i6 = i9 + 288 | 0;
   HEAP32[i6 >> 2] = i3;
   if (HEAP32[i11 >> 2] | 0) break L4;
   i1 = _ft_mem_realloc(i10, 4, 0, i7 << 1, 0, i11) | 0;
   HEAP32[i9 + 136 >> 2] = i1;
   if (HEAP32[i11 >> 2] | 0) break L4;
   HEAP32[i9 + 140 >> 2] = i1 + (i7 << 2);
   HEAP32[i9 + 144 >> 2] = i4 + 132;
   HEAP32[i9 + 212 >> 2] = i4 + 168;
   HEAP32[i9 + 284 >> 2] = i4 + 460;
   if (i7 >>> 0 >= 2) {
    i4 = 2;
    i3 = HEAP32[i2 >> 2] | 0;
    i2 = HEAP32[i5 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
    do {
     i3 = i3 + 32 | 0;
     HEAP32[i9 + 144 + (i4 << 2) >> 2] = i3;
     i2 = i2 + 196 | 0;
     HEAP32[i9 + 212 + (i4 << 2) >> 2] = i2;
     i1 = i1 + 16 | 0;
     HEAP32[i9 + 284 + (i4 << 2) >> 2] = i1;
     i4 = i4 + 1 | 0;
    } while (i4 >>> 0 <= i7 >>> 0);
   }
   HEAP32[i9 >> 2] = i7;
   i3 = 15;
  } while (0);
  do if ((i3 | 0) == 15) {
   i1 = i9 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i8) {
    if (!((i2 | 0) == 0 | (i2 | 0) == (i8 | 0))) break;
    HEAP32[i1 >> 2] = i8;
    i2 = i8;
   }
   i3 = HEAP32[i9 >> 2] | 0;
   if (!((i3 | 0) != 0 & (i2 | 0) != 0)) break L4;
   i4 = i9 + 24 | 0;
   if (HEAP32[i4 >> 2] | 0) break L4;
   i1 = _ft_mem_realloc(i10, 4, 0, Math_imul(i2, i3) | 0, 0, i11) | 0;
   HEAP32[i4 >> 2] = i1;
   if (!((HEAP32[i11 >> 2] | 0) == 0 & i3 >>> 0 > 1)) break L4;
   HEAP32[i9 + 28 >> 2] = i1 + (i2 << 2);
   if ((i3 | 0) == 2) break L4; else i1 = 2;
   while (1) {
    i10 = (HEAP32[i4 >> 2] | 0) + ((Math_imul(i1, i2) | 0) << 2) | 0;
    HEAP32[i9 + 24 + (i1 << 2) >> 2] = i10;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) == (i3 | 0)) break L4;
   }
  } while (0);
  HEAP32[i11 >> 2] = 3;
 } while (0);
 STACKTOP = i12;
 return HEAP32[i11 >> 2] | 0;
}

function _FcStatChecksum(i19, i1) {
 i19 = i19 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 4192 | 0;
 i3 = i24;
 i20 = i24 + 4 | 0;
 i21 = i24 + 80 | 0;
 if ((_stat(i19, i1) | 0) == -1) {
  i23 = -1;
  STACKTOP = i24;
  return i23 | 0;
 }
 i2 = _FcOpen(i19, 0, i3) | 0;
 if ((i2 | 0) == -1) {
  i23 = 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 _close(i2) | 0;
 i22 = i1 + 56 | 0;
 i18 = _strlen(i19) | 0;
 i1 = _FcScandir(i19, i3, 52, 198) | 0;
 switch (i1 | 0) {
 case -1:
  {
   i23 = 17;
   break;
  }
 case 0:
  {
   _free(HEAP32[i3 >> 2] | 0);
   i2 = 1;
   i1 = 0;
   i23 = 18;
   break;
  }
 default:
  {
   i14 = i21 + i18 | 0;
   i15 = i18 + 1 | 0;
   i16 = i21 + i15 | 0;
   i17 = i20 + 12 | 0;
   i13 = HEAP32[i3 >> 2] | 0;
   i3 = 0;
   i12 = i1;
   i2 = 1;
   i1 = 0;
   do {
    i12 = i12 + -1 | 0;
    i7 = i13 + (i12 << 2) | 0;
    i4 = HEAP32[i7 >> 2] | 0;
    i5 = i4 + 11 | 0;
    i8 = _strlen(i5) | 0;
    i6 = HEAP8[i4 + 10 >> 0] | 0;
    do if (!(i6 << 24 >> 24)) {
     _memcpy(i21 | 0, i19 | 0, i18 | 0) | 0;
     HEAP8[i14 >> 0] = 47;
     _memcpy(i16 | 0, i5 | 0, i8 | 0) | 0;
     HEAP8[i21 + (i8 + i15) >> 0] = 0;
     if ((_lstat(i21, i20) | 0) < 0) i3 = -1; else {
      i5 = HEAP32[i17 >> 2] | 0;
      if ((i5 & 61440 | 0) != 16384) {
       i4 = HEAP32[i7 >> 2] | 0;
       i6 = i5 & 255;
       i10 = i5 >>> 8;
       i11 = i5 >>> 16;
       i9 = i5 & -16777216;
       i23 = 11;
       break;
      }
     }
     i4 = HEAP32[i7 >> 2] | 0;
    } else {
     i10 = 0;
     i11 = 0;
     i9 = 0;
     i23 = 11;
    } while (0);
    if ((i23 | 0) == 11) {
     i23 = 0;
     i5 = i8 + 1 | 0;
     if (i5) {
      i7 = i4 + 11 | 0;
      while (1) {
       i5 = i5 + -1 | 0;
       i2 = ((HEAP8[i7 >> 0] | 0) + i2 | 0) % 65521 | 0;
       i1 = (i2 + i1 | 0) % 65521 | 0;
       if (!i5) break; else i7 = i7 + 1 | 0;
      }
     }
     i8 = (i2 + (i6 << 24 >> 24) | 0) % 65521 | 0;
     i10 = (i8 + (i10 << 24 >> 24) | 0) % 65521 | 0;
     i11 = (i10 + (i11 << 24 >> 24) | 0) % 65521 | 0;
     i9 = (i11 + (i9 >> 24) | 0) % 65521 | 0;
     i2 = i9;
     i1 = (i9 + ((i11 + ((i10 + ((i8 + i1 | 0) % 65521 | 0) | 0) % 65521 | 0) | 0) % 65521 | 0) | 0) % 65521 | 0;
    }
    _free(i4);
   } while ((i12 | 0) != 0);
   _free(i13);
   if ((i3 | 0) == -1) i23 = 17; else i23 = 18;
  }
 }
 if ((i23 | 0) == 17) {
  i23 = -1;
  STACKTOP = i24;
  return i23 | 0;
 } else if ((i23 | 0) == 18) {
  HEAP32[i22 >> 2] = (i1 << 16) + i2;
  i23 = 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 return 0;
}

function _ass_be_blur_c(i17, i18, i15, i16, i19) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i20 = 0, i21 = 0, i22 = 0;
 i20 = i19 + (i18 << 1) | 0;
 _memset(i19 | 0, 0, i18 << 2 | 0) | 0;
 i2 = HEAPU8[i17 >> 0] | 0;
 i5 = i18 >>> 0 > 1;
 if (i5) {
  i1 = i2;
  i4 = 1;
  i3 = i2;
  i2 = 0;
  while (1) {
   i13 = i1;
   i1 = HEAPU8[i17 + i4 >> 0] | 0;
   i14 = i3;
   i3 = i1 + i13 | 0;
   i14 = i3 + i14 & 65535;
   HEAP16[i19 + (i2 << 1) >> 1] = i14;
   HEAP16[i20 + (i2 << 1) >> 1] = i14;
   i2 = i4 + 1 | 0;
   if ((i2 | 0) == (i18 | 0)) break; else {
    i14 = i4;
    i4 = i2;
    i2 = i14;
   }
  }
  i2 = i18 + -1 | 0;
 } else {
  i3 = i2;
  i1 = i2;
  i2 = 0;
 }
 i14 = i3 + i1 & 65535;
 HEAP16[i19 + (i2 << 1) >> 1] = i14;
 HEAP16[i20 + (i2 << 1) >> 1] = i14;
 do if (i15 >>> 0 > 1) {
  if (!i5) {
   i2 = i15 + -1 | 0;
   i1 = 1;
   i3 = 0;
   do {
    i13 = i3;
    i3 = Math_imul(i1, i16) | 0;
    i12 = (HEAPU8[i17 + i3 >> 0] | 0) << 1;
    i14 = (HEAPU16[i19 >> 1] | 0) + i12 | 0;
    HEAP16[i19 >> 1] = i12;
    HEAP8[i17 + i13 >> 0] = ((HEAPU16[i20 >> 1] | 0) + i14 | 0) >>> 4;
    HEAP16[i20 >> 1] = i14;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i15 | 0));
   i1 = Math_imul(i2, i16) | 0;
   break;
  }
  i6 = i18 + -1 | 0;
  i14 = i19 + (i6 << 1) | 0;
  i7 = i15 + -1 | 0;
  i8 = i20 + (i6 << 1) | 0;
  i2 = 1;
  i11 = 0;
  do {
   i10 = i11;
   i11 = Math_imul(i2, i16) | 0;
   i9 = i17 + i11 | 0;
   i10 = i17 + i10 | 0;
   i5 = HEAPU8[i9 >> 0] | 0;
   i3 = i5;
   i4 = 1;
   i12 = HEAPU16[i19 >> 1] | 0;
   i13 = i19;
   i1 = 0;
   while (1) {
    i22 = i3;
    i3 = HEAPU8[i9 + i4 >> 0] | 0;
    i21 = i5;
    i5 = i3 + i22 | 0;
    i21 = i5 + i21 | 0;
    i22 = i21 + i12 | 0;
    HEAP16[i13 >> 1] = i21;
    i21 = i20 + (i1 << 1) | 0;
    HEAP8[i10 + i1 >> 0] = (i22 + (HEAPU16[i21 >> 1] | 0) | 0) >>> 4;
    HEAP16[i21 >> 1] = i22;
    i1 = i4 + 1 | 0;
    i13 = i19 + (i4 << 1) | 0;
    i12 = HEAPU16[i13 >> 1] | 0;
    if ((i1 | 0) == (i18 | 0)) break; else {
     i22 = i4;
     i4 = i1;
     i1 = i22;
    }
   }
   i21 = i5 + i3 | 0;
   i22 = i12 + i21 | 0;
   HEAP16[i14 >> 1] = i21;
   HEAP8[i10 + i6 >> 0] = ((HEAPU16[i8 >> 1] | 0) + i22 | 0) >>> 4;
   HEAP16[i8 >> 1] = i22;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i15 | 0));
  i1 = Math_imul(i7, i16) | 0;
 } else i1 = 0; while (0);
 i2 = i17 + i1 | 0;
 if (!i18) return; else i1 = 0;
 do {
  HEAP8[i2 + i1 >> 0] = ((HEAPU16[i19 + (i1 << 1) >> 1] | 0) + (HEAPU16[i20 + (i1 << 1) >> 1] | 0) | 0) >>> 4;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i18 | 0));
 return;
}

function _FT_Remove_Module(i1, i10) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if (!i1) {
  i10 = 33;
  return i10 | 0;
 }
 if (!i10) {
  i10 = 34;
  return i10 | 0;
 }
 i2 = i1 + 16 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = i1 + 20 + (i3 << 2) | 0;
 if ((i3 | 0) <= 0) {
  i10 = 34;
  return i10 | 0;
 }
 i1 = i1 + 20 | 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) == (i10 | 0)) break;
  i1 = i1 + 4 | 0;
  if (i1 >>> 0 >= i4 >>> 0) {
   i1 = 34;
   i5 = 33;
   break;
  }
 }
 if ((i5 | 0) == 33) return i1 | 0;
 HEAP32[i2 >> 2] = i3 + -1;
 i2 = i4 + -4 | 0;
 if (i1 >>> 0 < i2 >>> 0) do {
  i9 = i1;
  i1 = i1 + 4 | 0;
  HEAP32[i9 >> 2] = HEAP32[i1 >> 2];
 } while (i1 >>> 0 < i2 >>> 0);
 HEAP32[i2 >> 2] = 0;
 i7 = i10 + 8 | 0;
 i9 = HEAP32[i7 >> 2] | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 i6 = HEAP32[i10 + 4 >> 2] | 0;
 L20 : do if (!i6) i1 = HEAP32[i8 >> 2] | 0; else {
  i1 = i6 + 160 | 0;
  if ((HEAP32[i1 >> 2] | 0) == (i10 | 0)) HEAP32[i1 >> 2] = 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if (i1 & 2) {
   i4 = HEAP32[i6 >> 2] | 0;
   i5 = i6 + 148 | 0;
   i2 = HEAP32[i5 >> 2] | 0;
   if (i2) {
    while (1) {
     if ((HEAP32[i2 + 8 >> 2] | 0) == (i10 | 0)) break;
     i2 = HEAP32[i2 + 4 >> 2] | 0;
     if (!i2) break L20;
    }
    i1 = HEAP32[i10 + 12 >> 2] | 0;
    if ((HEAP32[i1 + 36 >> 2] | 0) == 1869968492) {
     i3 = HEAP32[i10 + 52 >> 2] | 0;
     if (i3 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 + 56 >> 2] | 0) + 20 >> 2] & 127](i3);
    }
    i3 = HEAP32[i2 >> 2] | 0;
    i1 = HEAP32[i2 + 4 >> 2] | 0;
    HEAP32[(i3 | 0 ? i3 + 4 | 0 : i5) >> 2] = i1;
    HEAP32[(i1 | 0 ? i1 : i6 + 152 | 0) >> 2] = i3;
    FUNCTION_TABLE_vii[HEAP32[i4 + 8 >> 2] & 63](i4, i2);
    i1 = HEAP32[i5 >> 2] | 0;
    L35 : do if (!i1) i1 = 0; else {
     i2 = i1;
     while (1) {
      i1 = HEAP32[i2 + 8 >> 2] | 0;
      if ((HEAP32[i1 + 16 >> 2] | 0) == 1869968492) break L35;
      i2 = HEAP32[i2 + 4 >> 2] | 0;
      if (!i2) {
       i1 = 0;
       break;
      }
     }
    } while (0);
    HEAP32[i6 + 156 >> 2] = i1;
    i1 = HEAP32[HEAP32[i10 >> 2] >> 2] | 0;
   }
  }
 } while (0);
 if (i1 & 1 | 0) {
  i2 = HEAP32[i7 >> 2] | 0;
  if (i2 | 0) {
   i3 = i10 + 16 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   if (i1 | 0) {
    i4 = i2 + 8 | 0;
    do {
     i7 = i1;
     i1 = HEAP32[i1 + 4 >> 2] | 0;
     _destroy_face(i2, HEAP32[i7 + 8 >> 2] | 0, i10);
     FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i2, i7);
    } while ((i1 | 0) != 0);
   }
   HEAP32[i3 >> 2] = 0;
   HEAP32[i10 + 20 >> 2] = 0;
  }
 }
 i1 = HEAP32[i8 + 28 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i10);
 FUNCTION_TABLE_vii[HEAP32[i9 + 8 >> 2] & 63](i9, i10);
 i10 = 0;
 return i10 | 0;
}

function _gray_move_to(i10, i11) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = i11 + 196 | 0;
 i13 = i11 + 188 | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  i8 = HEAP32[i13 >> 2] | 0;
  i6 = i11 + 192 | 0;
  i9 = HEAP32[i6 >> 2] | 0;
  if (i9 | i8) {
   i5 = HEAP32[i11 + 156 >> 2] | 0;
   i1 = HEAP32[i11 + 180 >> 2] | 0;
   i5 = (i5 | 0) > (i1 | 0) ? i1 : i5;
   i1 = (HEAP32[i11 + 1420 >> 2] | 0) + (HEAP32[i11 + 160 >> 2] << 2) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   L4 : do if (!i2) {
    i2 = 0;
    i4 = 8;
   } else while (1) {
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) > (i5 | 0)) {
     i4 = 8;
     break L4;
    }
    if ((i3 | 0) == (i5 | 0)) {
     i7 = i2;
     break L4;
    }
    i1 = i2 + 12 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i2 = 0;
     i4 = 8;
     break;
    }
   } while (0);
   do if ((i4 | 0) == 8) {
    i3 = i11 + 208 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) < (HEAP32[i11 + 204 >> 2] | 0)) {
     i14 = HEAP32[i11 + 200 >> 2] | 0;
     HEAP32[i3 >> 2] = i4 + 1;
     i7 = i14 + (i4 << 4) | 0;
     HEAP32[i7 >> 2] = i5;
     HEAP32[i14 + (i4 << 4) + 8 >> 2] = 0;
     HEAP32[i14 + (i4 << 4) + 4 >> 2] = 0;
     HEAP32[i14 + (i4 << 4) + 12 >> 2] = i2;
     HEAP32[i1 >> 2] = i7;
     break;
    } else _longjmp(i11 | 0, 1);
   } while (0);
   i14 = i7 + 8 | 0;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + i8;
   i14 = i7 + 4 | 0;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + i9;
  }
 } else i6 = i11 + 192 | 0;
 i7 = HEAP32[i10 >> 2] << 2;
 i2 = HEAP32[i10 + 4 >> 2] << 2;
 i10 = i7 >> 8;
 i8 = i2 >> 8;
 i9 = HEAP32[i11 + 168 >> 2] | 0;
 i10 = (i9 | 0) < (i10 | 0) ? i9 : i10;
 i1 = HEAP32[i11 + 164 >> 2] | 0;
 i10 = (i10 | 0) < (i1 | 0) ? i1 + -1 | 0 : i10;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 i14 = i10 - i1 | 0;
 i3 = i11 + 156 | 0;
 HEAP32[i3 >> 2] = i14;
 i4 = i8 - (HEAP32[i11 + 172 >> 2] | 0) | 0;
 i5 = i11 + 160 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i11 + 228 >> 2] = i8 << 8;
 HEAP32[i12 >> 2] = 0;
 i1 = ((i9 | 0) < (i10 | 0) ? i9 : i10) - i1 | 0;
 i1 = (i1 | 0) > -1 ? i1 : -1;
 if ((i1 | 0) != (i14 | 0)) {
  HEAP32[i13 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i5 >> 2] = i4;
 }
 if (i4 >>> 0 >= (HEAP32[i11 + 184 >> 2] | 0) >>> 0) {
  i14 = 1;
  i14 = i14 & 1;
  HEAP32[i12 >> 2] = i14;
  i14 = i11 + 220 | 0;
  HEAP32[i14 >> 2] = i7;
  i14 = i11 + 224 | 0;
  HEAP32[i14 >> 2] = i2;
  return 0;
 }
 i14 = (i1 | 0) >= (HEAP32[i11 + 180 >> 2] | 0);
 i14 = i14 & 1;
 HEAP32[i12 >> 2] = i14;
 i14 = i11 + 220 | 0;
 HEAP32[i14 >> 2] = i7;
 i14 = i11 + 224 | 0;
 HEAP32[i14 >> 2] = i2;
 return 0;
}

function _tt_cmap14_char_var_isdefault(i1, i12, i9) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i13 = 0;
 i11 = HEAP32[i1 + 16 >> 2] | 0;
 i4 = i11 + 10 | 0;
 i1 = 0;
 i2 = 0;
 i3 = (HEAPU8[i11 + 7 >> 0] | 0) << 16 | (HEAPU8[i11 + 6 >> 0] | 0) << 24 | (HEAPU8[i11 + 8 >> 0] | 0) << 8 | (HEAPU8[i11 + 9 >> 0] | 0);
 while (1) {
  if (i2 >>> 0 >= i3 >>> 0) {
   i1 = -1;
   i10 = 20;
   break;
  }
  i5 = (i2 + i3 | 0) >>> 1;
  i8 = i4 + (i5 * 11 | 0) + 3 | 0;
  i13 = i8 + -3 | 0;
  i13 = (HEAPU8[i13 + 1 >> 0] | 0) << 8 | (HEAPU8[i13 >> 0] | 0) << 16 | (HEAPU8[i13 + 2 >> 0] | 0);
  i6 = i13 >>> 0 > i9 >>> 0;
  i7 = i13 >>> 0 < i9 >>> 0;
  i8 = i7 ? i1 : i8;
  if ((i13 | 0) == (i9 | 0)) break; else {
   i1 = i6 ? i1 : i8;
   i2 = i6 ? i2 : i7 ? i5 + 1 | 0 : i2;
   i3 = i6 ? i5 : i3;
  }
 }
 if ((i10 | 0) == 20) return i1 | 0;
 if (!i8) {
  i13 = -1;
  return i13 | 0;
 }
 i1 = (HEAPU8[i8 + 1 >> 0] | 0) << 16 | (HEAPU8[i8 >> 0] | 0) << 24 | (HEAPU8[i8 + 2 >> 0] | 0) << 8 | (HEAPU8[i8 + 3 >> 0] | 0);
 i7 = (HEAPU8[i8 + 5 >> 0] | 0) << 16 | (HEAPU8[i8 + 4 >> 0] | 0) << 24 | (HEAPU8[i8 + 6 >> 0] | 0) << 8 | (HEAPU8[i8 + 7 >> 0] | 0);
 L10 : do if (i1 | 0) {
  i1 = i11 + i1 | 0;
  i5 = i1 + 4 | 0;
  i1 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
  i4 = 0;
  while (1) {
   while (1) {
    if (i4 >>> 0 >= i1 >>> 0) break L10;
    i6 = (i1 + i4 | 0) >>> 1;
    i2 = i5 + (i6 << 2) + 3 | 0;
    i3 = i2 + -3 | 0;
    i3 = (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0) << 16 | (HEAPU8[i3 + 2 >> 0] | 0);
    if (i3 >>> 0 > i12 >>> 0) i1 = i6; else break;
   }
   if (((HEAPU8[i2 >> 0] | 0) + i3 | 0) >>> 0 < i12 >>> 0) i4 = i6 + 1 | 0; else {
    i1 = 1;
    break;
   }
  }
  return i1 | 0;
 } while (0);
 L20 : do if (i7 | 0) {
  i6 = i11 + i7 | 0;
  i1 = (HEAPU8[i6 + 1 >> 0] | 0) << 16 | (HEAPU8[i6 >> 0] | 0) << 24 | (HEAPU8[i6 + 2 >> 0] | 0) << 8 | (HEAPU8[i6 + 3 >> 0] | 0);
  i6 = i6 + 4 | 0;
  if (i1 | 0) {
   i2 = 0;
   L22 : while (1) {
    while (1) {
     i5 = (i2 + i1 | 0) >>> 1;
     i3 = i6 + (i5 * 5 | 0) + 3 | 0;
     i4 = i3 + -3 | 0;
     i4 = (HEAPU8[i4 + 1 >> 0] | 0) << 8 | (HEAPU8[i4 >> 0] | 0) << 16 | (HEAPU8[i4 + 2 >> 0] | 0);
     if (i4 >>> 0 > i12 >>> 0) break;
     if (i4 >>> 0 >= i12 >>> 0) break L22;
     i2 = i5 + 1 | 0;
     if (i2 >>> 0 >= i1 >>> 0) break L20;
    }
    if (i2 >>> 0 < i5 >>> 0) i1 = i5; else break L20;
   }
   if ((HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i3 + 1 >> 0] | 0) | 0) {
    i13 = 0;
    return i13 | 0;
   }
  }
 } while (0);
 i13 = -1;
 return i13 | 0;
}

function _add_line_311(i5, i7, i9, i8, i10) {
 i5 = i5 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i16 + 8 | 0;
 HEAP32[i11 >> 2] = i8;
 HEAP32[i11 + 4 >> 2] = i10;
 i12 = i16;
 HEAP32[i12 >> 2] = i7;
 HEAP32[i12 + 4 >> 2] = i9;
 i13 = i8 - i7 | 0;
 i14 = i10 - i9 | 0;
 if (!(i14 | i13)) {
  i15 = 1;
  STACKTOP = i16;
  return i15 | 0;
 }
 i15 = i5 + 28 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i4 = i2 + 1 | 0;
 i6 = i5 + 36 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 do if (i1 >>> 0 < i4 >>> 0) {
  i3 = i1 << 1;
  i3 = i3 >>> 0 > 64 ? i3 : 64;
  while (1) if (i3 >>> 0 < i4 >>> 0) i3 = i3 << 1; else break;
  i2 = i5 + 20 | 0;
  i1 = _realloc(HEAP32[i2 >> 2] | 0, i3 * 40 | 0) | 0;
  if (!i1) {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  } else {
   HEAP32[i2 >> 2] = i1;
   HEAP32[i6 >> 2] = i3;
   i2 = HEAP32[i15 >> 2] | 0;
   break;
  }
 } else i1 = HEAP32[i5 + 20 >> 2] | 0; while (0);
 HEAP32[i15 >> 2] = i2 + 1;
 i15 = i13 >> 31 & 2;
 HEAP32[i1 + (i2 * 40 | 0) + 20 >> 2] = (i14 | 0) > -1 ? i15 ^ 63 : i15 | 60;
 i15 = (i8 | 0) < (i7 | 0);
 HEAP32[i1 + (i2 * 40 | 0) + 24 >> 2] = HEAP32[(i15 ? i11 : i12) >> 2];
 HEAP32[i1 + (i2 * 40 | 0) + 28 >> 2] = HEAP32[(i15 ? i12 : i11) >> 2];
 i10 = (i10 | 0) < (i9 | 0);
 HEAP32[i1 + (i2 * 40 | 0) + 32 >> 2] = HEAP32[(i10 ? i11 : i12) + 4 >> 2];
 HEAP32[i1 + (i2 * 40 | 0) + 36 >> 2] = HEAP32[(i10 ? i12 : i11) + 4 >> 2];
 i10 = 0 - i13 | 0;
 i15 = ___muldi3(i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0, i14 | 0, ((i14 | 0) < 0) << 31 >> 31 | 0) | 0;
 i11 = tempRet0;
 i12 = ___muldi3(i9 | 0, ((i9 | 0) < 0) << 31 >> 31 | 0, i13 | 0, ((i13 | 0) < 0) << 31 >> 31 | 0) | 0;
 i12 = _i64Subtract(i15 | 0, i11 | 0, i12 | 0, tempRet0 | 0) | 0;
 i11 = (i13 | 0) < 0 ? i10 : i13;
 i13 = (i14 | 0) < 0 ? 0 - i14 | 0 : i14;
 i13 = (i11 | 0) > (i13 | 0) ? i11 : i13;
 i11 = 30 - ((Math_clz32(i13 | 0) | 0) ^ 31) | 0;
 i13 = i13 << i11 + 1;
 i15 = 1 << i11;
 HEAP32[i1 + (i2 * 40 | 0) + 8 >> 2] = i14 << i11;
 HEAP32[i1 + (i2 * 40 | 0) + 12 >> 2] = i10 << i11;
 i14 = ___muldi3(i12 | 0, tempRet0 | 0, i15 | 0, ((i15 | 0) < 0) << 31 >> 31 | 0) | 0;
 i15 = i1 + (i2 * 40 | 0) | 0;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i15 + 4 >> 2] = tempRet0;
 ___muldi3(i13 | 0, 0, i13 | 0, 0) | 0;
 ___muldi3(tempRet0 | 0, 0, 1395864371, 0) | 0;
 i15 = tempRet0;
 ___muldi3(i13 | 0, 0, -1144608785, 0) | 0;
 i14 = _i64Subtract(-2012192179, 0, tempRet0 | 0, 0) | 0;
 i15 = _i64Add(i14 | 0, tempRet0 | 0, i15 | 0, 0) | 0;
 HEAP32[i1 + (i2 * 40 | 0) + 16 >> 2] = i15;
 i15 = 1;
 STACKTOP = i16;
 return i15 | 0;
}

function _composite_hash(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i1 = Math_imul((HEAPU8[i2 >> 0] | 0) ^ -2128831035, 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 1 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 2 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 3 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 4 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 5 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 6 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 7 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 8 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 9 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 10 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 11 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 12 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 13 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 14 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 15 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 16 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 17 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 18 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 19 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 20 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 21 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 22 >> 0] | 0), 16777619) | 0;
 i1 = Math_imul(i1 ^ (HEAPU8[i2 + 23 >> 0] | 0), 16777619) | 0;
 i4 = HEAP32[i2 + 24 >> 2] | 0;
 if (!i4) {
  i4 = i1;
  return i4 | 0;
 }
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i2 = 0;
 do {
  i5 = i3 + (i2 * 12 | 0) | 0;
  i1 = Math_imul((HEAPU8[i5 >> 0] | 0) ^ i1, 16777619) | 0;
  i1 = Math_imul(i1 ^ (HEAPU8[i5 + 1 >> 0] | 0), 16777619) | 0;
  i1 = Math_imul(i1 ^ (HEAPU8[i5 + 2 >> 0] | 0), 16777619) | 0;
  i1 = Math_imul(i1 ^ (HEAPU8[i5 + 3 >> 0] | 0), 16777619) | 0;
  i5 = i3 + (i2 * 12 | 0) + 4 | 0;
  i1 = Math_imul((HEAPU8[i5 >> 0] | 0) ^ i1, 16777619) | 0;
  i1 = Math_imul(i1 ^ (HEAPU8[i5 + 1 >> 0] | 0), 16777619) | 0;
  i1 = Math_imul(i1 ^ (HEAPU8[i5 + 2 >> 0] | 0), 16777619) | 0;
  i5 = Math_imul(i1 ^ (HEAPU8[i5 + 3 >> 0] | 0), 16777619) | 0;
  i1 = i3 + (i2 * 12 | 0) + 8 | 0;
  i5 = Math_imul((HEAPU8[i1 >> 0] | 0) ^ i5, 16777619) | 0;
  i5 = Math_imul(i5 ^ (HEAPU8[i1 + 1 >> 0] | 0), 16777619) | 0;
  i5 = Math_imul(i5 ^ (HEAPU8[i1 + 2 >> 0] | 0), 16777619) | 0;
  i1 = Math_imul(i5 ^ (HEAPU8[i1 + 3 >> 0] | 0), 16777619) | 0;
  i2 = i2 + 1 | 0;
 } while (i2 >>> 0 < i4 >>> 0);
 return i1 | 0;
}

function _ignoreSectionProcessor(i12, i4, i14, i17) {
 i12 = i12 | 0;
 i4 = i4 | 0;
 i14 = i14 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i15 = i18 + 8 | 0;
 i9 = i18 + 4 | 0;
 i10 = i18;
 i3 = i4;
 i16 = i12 + 144 | 0;
 i11 = HEAP32[i16 >> 2] | 0;
 i13 = i12 + 484 | 0;
 i2 = (HEAP8[i13 >> 0] | 0) == 0;
 i5 = i12 + 288 | 0;
 i6 = i12 + 292 | 0;
 HEAP32[i5 >> 2] = i4;
 i7 = FUNCTION_TABLE_iiiii[HEAP32[i11 + 12 >> 2] & 127](i11, i4, i14, i10) | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 HEAP32[i6 >> 2] = i1;
 i8 = i1;
 switch (i7 | 0) {
 case 42:
  {
   i7 = i12 + 80 | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   if (i2) {
    HEAP32[i15 >> 2] = i4;
    if (!(HEAP8[i11 + 72 >> 0] | 0)) {
     if ((HEAP32[i16 >> 2] | 0) == (i11 | 0)) i1 = i5; else {
      i1 = HEAP32[i12 + 300 >> 2] | 0;
      i6 = i1 + 4 | 0;
     }
     i2 = i12 + 44 | 0;
     i3 = i11 + 60 | 0;
     i4 = i12 + 48 | 0;
     i5 = i12 + 4 | 0;
     do {
      HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
      FUNCTION_TABLE_viiiii[HEAP32[i3 >> 2] & 31](i11, i15, i8, i9, HEAP32[i4 >> 2] | 0);
      HEAP32[i6 >> 2] = HEAP32[i15 >> 2];
      i19 = HEAP32[i2 >> 2] | 0;
      FUNCTION_TABLE_viii[HEAP32[i7 >> 2] & 31](HEAP32[i5 >> 2] | 0, i19, (HEAP32[i9 >> 2] | 0) - i19 | 0);
      HEAP32[i1 >> 2] = HEAP32[i15 >> 2];
     } while ((HEAP32[i15 >> 2] | 0) != (i8 | 0));
    } else FUNCTION_TABLE_viii[i2 & 31](HEAP32[i12 + 4 >> 2] | 0, i4, i1 - i3 | 0);
    i1 = HEAP32[i10 >> 2] | 0;
   }
   HEAP32[i17 >> 2] = i1;
   if ((HEAP32[i12 + 480 >> 2] | 0) == 2) {
    i1 = 35;
    i2 = 15;
   } else {
    i2 = i1;
    if (!i1) {
     i19 = 0;
     STACKTOP = i18;
     return i19 | 0;
    }
    HEAP32[i12 + 280 >> 2] = 72;
    HEAP32[i15 >> 2] = i2;
    i19 = HEAP32[i16 >> 2] | 0;
    i19 = FUNCTION_TABLE_iiiii[HEAP32[i19 >> 2] & 127](i19, i2, i14, i15) | 0;
    i19 = _doProlog(i12, HEAP32[i16 >> 2] | 0, i2, i14, i19, HEAP32[i15 >> 2] | 0, i17, (HEAP8[i13 >> 0] | 0) == 0 & 1) | 0;
    STACKTOP = i18;
    return i19 | 0;
   }
   break;
  }
 case 0:
  {
   HEAP32[i5 >> 2] = i1;
   i1 = 4;
   i2 = 15;
   break;
  }
 case -2:
  {
   if (i2) i2 = 16; else {
    i1 = 6;
    i2 = 15;
   }
   break;
  }
 case -4:
 case -1:
  {
   if (i2) i2 = 16; else {
    i1 = 2;
    i2 = 15;
   }
   break;
  }
 default:
  {
   HEAP32[i5 >> 2] = i1;
   i1 = 23;
   i2 = 15;
  }
 }
 if ((i2 | 0) == 15) {
  i19 = i1;
  STACKTOP = i18;
  return i19 | 0;
 } else if ((i2 | 0) == 16) {
  HEAP32[i17 >> 2] = i4;
  i19 = 0;
  STACKTOP = i18;
  return i19 | 0;
 }
 return 0;
}

function _af_cjk_metrics_check_digits(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i5 = i8 + 36 | 0;
 L1 : do if (!i8) {
  i3 = (_FT_Get_Advance(i6, 0, 2051, i7) | 0) == 0;
  i1 = i3 & 1;
  i2 = i3 ? HEAP32[i7 >> 2] | 0 : 0;
  if (!(_FT_Get_Advance(i6, 0, 2051, i7) | 0)) {
   i1 = HEAP32[i7 >> 2] | 0;
   if (i3) if ((i1 | 0) == (i2 | 0)) i1 = 1; else {
    i1 = 0;
    break;
   } else {
    i2 = i1;
    i1 = 1;
   }
  }
  if (!(_FT_Get_Advance(i6, 0, 2051, i7) | 0)) {
   i3 = HEAP32[i7 >> 2] | 0;
   if (!(i1 << 24 >> 24)) {
    i2 = i3;
    i1 = 1;
   } else if ((i3 | 0) == (i2 | 0)) i1 = 1; else {
    i1 = 0;
    break;
   }
  }
  if (!(_FT_Get_Advance(i6, 0, 2051, i7) | 0)) {
   i3 = HEAP32[i7 >> 2] | 0;
   if (!(i1 << 24 >> 24)) {
    i2 = i3;
    i1 = 1;
   } else if ((i3 | 0) == (i2 | 0)) i1 = 1; else {
    i1 = 0;
    break;
   }
  }
  if (!(_FT_Get_Advance(i6, 0, 2051, i7) | 0)) {
   i3 = HEAP32[i7 >> 2] | 0;
   if (!(i1 << 24 >> 24)) {
    i2 = i3;
    i1 = 1;
   } else if ((i3 | 0) == (i2 | 0)) i1 = 1; else {
    i1 = 0;
    break;
   }
  }
  if (!(_FT_Get_Advance(i6, 0, 2051, i7) | 0)) {
   i3 = HEAP32[i7 >> 2] | 0;
   if (!(i1 << 24 >> 24)) {
    i2 = i3;
    i1 = 1;
   } else if ((i3 | 0) == (i2 | 0)) i1 = 1; else {
    i1 = 0;
    break;
   }
  }
  if (!(_FT_Get_Advance(i6, 0, 2051, i7) | 0)) {
   i3 = HEAP32[i7 >> 2] | 0;
   if (!(i1 << 24 >> 24)) {
    i2 = i3;
    i1 = 1;
   } else if ((i3 | 0) == (i2 | 0)) i1 = 1; else {
    i1 = 0;
    break;
   }
  }
  if (!(_FT_Get_Advance(i6, 0, 2051, i7) | 0)) {
   i3 = HEAP32[i7 >> 2] | 0;
   if (!(i1 << 24 >> 24)) {
    i2 = i3;
    i1 = 1;
   } else if ((i3 | 0) == (i2 | 0)) i1 = 1; else {
    i1 = 0;
    break;
   }
  }
  if (!(_FT_Get_Advance(i6, 0, 2051, i7) | 0)) {
   i3 = HEAP32[i7 >> 2] | 0;
   if (!(i1 << 24 >> 24)) {
    i2 = i3;
    i1 = 1;
   } else if ((i3 | 0) == (i2 | 0)) i1 = 1; else {
    i1 = 0;
    break;
   }
  }
  i1 = (_FT_Get_Advance(i6, 0, 2051, i7) | 0) != 0 | i1 << 24 >> 24 == 0;
  i1 = (i1 | (HEAP32[i7 >> 2] | 0) == (i2 | 0)) & 1;
 } else {
  i1 = 0;
  i2 = 0;
  i4 = 48;
  while (1) {
   i3 = _FT_Get_Char_Index(HEAP32[HEAP32[i5 >> 2] >> 2] | 0, i4) | 0;
   if (i3) if (!(_FT_Get_Advance(i6, i3, 2051, i7) | 0)) {
    i3 = HEAP32[i7 >> 2] | 0;
    if (!(i2 << 24 >> 24)) {
     i1 = i3;
     i2 = 1;
    } else if ((i3 | 0) != (i1 | 0)) {
     i1 = 0;
     break L1;
    }
   }
   i4 = i4 + 1 | 0;
   if (i4 >>> 0 >= 58) {
    i1 = 1;
    break;
   }
  }
 } while (0);
 HEAP8[i8 + 32 >> 0] = i1;
 STACKTOP = i9;
 return;
}

function _little2_sameName(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = i1 + 76 | 0;
 i1 = i3;
 L1 : while (1) {
  i4 = i1 + 1 | 0;
  i5 = HEAP8[i4 >> 0] | 0;
  switch (i5 << 24 >> 24) {
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i6 = 15;
    break L1;
   }
  case 0:
   {
    i3 = HEAP8[i1 >> 0] | 0;
    switch (HEAP8[i7 + (i3 & 255) >> 0] | 0) {
    case 7:
     {
      i6 = 6;
      break;
     }
    case 6:
     {
      i6 = 8;
      break;
     }
    case 5:
     {
      i6 = 10;
      break;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 23:
    case 22:
    case 29:
     {
      i6 = 12;
      break;
     }
    default:
     {
      i6 = 15;
      break L1;
     }
    }
    break;
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i6 = 6;
    break;
   }
  case -1:
   {
    i3 = HEAP8[i1 >> 0] | 0;
    if ((i3 & 255) > 253) {
     i6 = 15;
     break L1;
    } else i6 = 12;
    break;
   }
  default:
   {
    i3 = HEAP8[i1 >> 0] | 0;
    i6 = 12;
   }
  }
  if ((i6 | 0) == 6) {
   if ((HEAP8[i1 >> 0] | 0) != (HEAP8[i2 >> 0] | 0)) {
    i1 = 0;
    i6 = 19;
    break;
   }
   i2 = i2 + 1 | 0;
   i1 = i4;
   i3 = i5;
   i6 = 8;
  } else if ((i6 | 0) == 12) {
   i6 = 0;
   if ((HEAP8[i2 >> 0] | 0) != i3 << 24 >> 24) {
    i1 = 0;
    i6 = 19;
    break;
   }
   if ((HEAP8[i2 + 1 >> 0] | 0) != i5 << 24 >> 24) {
    i1 = 0;
    i6 = 19;
    break;
   }
  }
  if ((i6 | 0) == 8) {
   i4 = i1 + 1 | 0;
   if (i3 << 24 >> 24 != (HEAP8[i2 >> 0] | 0)) {
    i1 = 0;
    i6 = 19;
    break;
   }
   i2 = i2 + 1 | 0;
   i1 = i4;
   i3 = HEAP8[i4 >> 0] | 0;
   i6 = 10;
  }
  if ((i6 | 0) == 10) {
   if (i3 << 24 >> 24 != (HEAP8[i2 >> 0] | 0)) {
    i1 = 0;
    i6 = 19;
    break;
   }
   if ((HEAP8[i1 + 1 >> 0] | 0) != (HEAP8[i2 + 1 >> 0] | 0)) {
    i1 = 0;
    i6 = 19;
    break;
   }
  }
  i2 = i2 + 2 | 0;
  i1 = i1 + 2 | 0;
 }
 if ((i6 | 0) == 15) {
  i1 = HEAP8[i2 >> 0] | 0;
  L21 : do switch (HEAP8[i2 + 1 >> 0] | 0) {
  case 0:
   {
    switch (HEAP8[i7 + (i1 & 255) >> 0] | 0) {
    case 27:
    case 26:
    case 25:
    case 24:
    case 23:
    case 22:
    case 29:
    case 7:
    case 6:
    case 5:
     {
      i1 = 0;
      break;
     }
    default:
     break L21;
    }
    return i1 | 0;
   }
  case -1:
   {
    if ((i1 & 255) <= 253) {
     i7 = 0;
     return i7 | 0;
    }
    break;
   }
  case -36:
  case -35:
  case -34:
  case -33:
   break;
  default:
   {
    i7 = 0;
    return i7 | 0;
   }
  } while (0);
  i7 = 1;
  return i7 | 0;
 } else if ((i6 | 0) == 19) return i1 | 0;
 return 0;
}

function _ft_recompute_scaled_metrics(i7, i8) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 i2 = HEAP16[i7 + 70 >> 1] | 0;
 i1 = i2 << 16 >> 16;
 i6 = HEAP32[i8 + 8 >> 2] | 0;
 i5 = (i6 | 0) == 65536;
 if (!(i2 << 16 >> 16 == 0 | i5)) {
  i4 = i1 >> 31;
  i2 = i2 << 16 >> 16 < 0 ? 0 - i1 | 0 : i1;
  i3 = (i6 | 0) < 0;
  i1 = i3 ? 0 - i6 | 0 : i6;
  if (((i1 >>> 8) + i2 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else {
   i9 = i2 & 65535;
   i1 = (Math_imul(i1 >>> 16, i9) | 0) + (Math_imul(i2 >>> 16, i1) | 0) + (((Math_imul(i1 & 65535, i9) | 0) + 32768 | 0) >>> 16) | 0;
  }
  i1 = ((i3 ? 0 - (i4 | 1) | 0 : i4) | 0) < 0 ? 0 - i1 | 0 : i1;
 }
 HEAP32[i8 + 12 >> 2] = i1 + 63 & -64;
 i2 = HEAP16[i7 + 72 >> 1] | 0;
 i1 = i2 << 16 >> 16;
 if (!(i2 << 16 >> 16 == 0 | i5)) {
  i4 = i1 >> 31;
  i2 = i2 << 16 >> 16 < 0 ? 0 - i1 | 0 : i1;
  i3 = (i6 | 0) < 0;
  i1 = i3 ? 0 - i6 | 0 : i6;
  if (((i1 >>> 8) + i2 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else {
   i9 = i2 & 65535;
   i1 = (Math_imul(i1 >>> 16, i9) | 0) + (Math_imul(i2 >>> 16, i1) | 0) + (((Math_imul(i1 & 65535, i9) | 0) + 32768 | 0) >>> 16) | 0;
  }
  i1 = ((i3 ? 0 - (i4 | 1) | 0 : i4) | 0) < 0 ? 0 - i1 | 0 : i1;
 }
 HEAP32[i8 + 16 >> 2] = i1 & -64;
 i2 = HEAP16[i7 + 74 >> 1] | 0;
 i1 = i2 << 16 >> 16;
 if (!(i2 << 16 >> 16 == 0 | i5)) {
  i4 = i1 >> 31;
  i2 = i2 << 16 >> 16 < 0 ? 0 - i1 | 0 : i1;
  i3 = (i6 | 0) < 0;
  i1 = i3 ? 0 - i6 | 0 : i6;
  if (((i1 >>> 8) + i2 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else {
   i9 = i2 & 65535;
   i1 = (Math_imul(i1 >>> 16, i9) | 0) + (Math_imul(i2 >>> 16, i1) | 0) + (((Math_imul(i1 & 65535, i9) | 0) + 32768 | 0) >>> 16) | 0;
  }
  i1 = ((i3 ? 0 - (i4 | 1) | 0 : i4) | 0) < 0 ? 0 - i1 | 0 : i1;
 }
 HEAP32[i8 + 20 >> 2] = i1 + 32 & -64;
 i1 = HEAP16[i7 + 76 >> 1] | 0;
 i2 = i1 << 16 >> 16;
 i3 = HEAP32[i8 + 4 >> 2] | 0;
 if (i1 << 16 >> 16 == 0 | (i3 | 0) == 65536) {
  i7 = i2;
  i7 = i7 + 32 | 0;
  i7 = i7 & -64;
  i9 = i8 + 24 | 0;
  HEAP32[i9 >> 2] = i7;
  return;
 }
 i5 = i2 >> 31;
 i2 = i1 << 16 >> 16 < 0 ? 0 - i2 | 0 : i2;
 i4 = (i3 | 0) < 0;
 i1 = i4 ? 0 - i3 | 0 : i3;
 if (((i1 >>> 8) + i2 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else {
  i9 = i2 & 65535;
  i1 = (Math_imul(i1 >>> 16, i9) | 0) + (Math_imul(i2 >>> 16, i1) | 0) + (((Math_imul(i1 & 65535, i9) | 0) + 32768 | 0) >>> 16) | 0;
 }
 i7 = ((i4 ? 0 - (i5 | 1) | 0 : i5) | 0) < 0 ? 0 - i1 | 0 : i1;
 i7 = i7 + 32 | 0;
 i7 = i7 & -64;
 i9 = i8 + 24 | 0;
 HEAP32[i9 >> 2] = i7;
 return;
}

function _cf2_builder_lineTo(i10, i9) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 i11 = HEAP32[i10 + 28 >> 2] | 0;
 i1 = i11 + 64 | 0;
 L1 : do if (!(HEAP8[i1 >> 0] | 0)) {
  i7 = HEAP32[i9 >> 2] | 0;
  i8 = HEAP32[i9 + 4 >> 2] | 0;
  HEAP8[i1 >> 0] = 1;
  i5 = i11 + 20 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i11 + 65 | 0;
  do if (!(HEAP8[i6 >> 0] | 0)) {
   i2 = i11 + 12 | 0;
   i4 = 8;
  } else {
   i3 = i11 + 12 | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   if (((HEAP16[i2 + 20 >> 1] | 0) + 1 + (HEAP16[i2 + 56 >> 1] | 0) | 0) >>> 0 > (HEAP32[i2 + 8 >> 2] | 0) >>> 0) {
    i2 = _FT_GlyphLoader_CheckPoints(i2, 0, 1) | 0;
    if (i2 | 0) break;
   }
   i2 = HEAP16[i1 >> 1] | 0;
   if (i2 << 16 >> 16 > 0) {
    HEAP16[(HEAP32[i1 + 12 >> 2] | 0) + ((i2 << 16 >> 16) + -1 << 1) >> 1] = (HEAPU16[i1 + 2 >> 1] | 0) + 65535;
    i2 = i3;
    i4 = 8;
   } else {
    i2 = i3;
    i4 = 8;
   }
  } while (0);
  do if ((i4 | 0) == 8) {
   HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
   i1 = HEAP32[i2 >> 2] | 0;
   if (((HEAP16[i1 + 22 >> 1] | 0) + 1 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
    i2 = _FT_GlyphLoader_CheckPoints(i1, 1, 0) | 0;
    if (i2 | 0) break;
   }
   i1 = HEAP32[i5 >> 2] | 0;
   if (!(HEAP8[i6 >> 0] | 0)) i1 = i1 + 2 | 0; else {
    i4 = HEAP32[i1 + 4 >> 2] | 0;
    i6 = i1 + 2 | 0;
    i5 = HEAP16[i6 >> 1] | 0;
    i1 = (HEAP32[i1 + 8 >> 2] | 0) + i5 | 0;
    HEAP32[i4 + (i5 << 3) >> 2] = i7 >> 10;
    HEAP32[i4 + (i5 << 3) + 4 >> 2] = i8 >> 10;
    HEAP8[i1 >> 0] = 1;
    i1 = i6;
   }
   HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
   break L1;
  } while (0);
  i1 = HEAP32[i10 + 24 >> 2] | 0;
  if (HEAP32[i1 >> 2] | 0) return;
  HEAP32[i1 >> 2] = i2;
  return;
 } while (0);
 i4 = HEAP32[i9 + 8 >> 2] | 0;
 i3 = HEAP32[i9 + 12 >> 2] | 0;
 i1 = HEAP32[i11 + 12 >> 2] | 0;
 if (((HEAP16[i1 + 22 >> 1] | 0) + 1 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
  i2 = _FT_GlyphLoader_CheckPoints(i1, 1, 0) | 0;
  if (i2 | 0) {
   i1 = HEAP32[i10 + 24 >> 2] | 0;
   if (HEAP32[i1 >> 2] | 0) return;
   HEAP32[i1 >> 2] = i2;
   return;
  }
 }
 i1 = HEAP32[i11 + 20 >> 2] | 0;
 if (!(HEAP8[i11 + 65 >> 0] | 0)) i1 = i1 + 2 | 0; else {
  i9 = HEAP32[i1 + 4 >> 2] | 0;
  i11 = i1 + 2 | 0;
  i10 = HEAP16[i11 >> 1] | 0;
  i1 = (HEAP32[i1 + 8 >> 2] | 0) + i10 | 0;
  HEAP32[i9 + (i10 << 3) >> 2] = i4 >> 10;
  HEAP32[i9 + (i10 << 3) + 4 >> 2] = i3 >> 10;
  HEAP8[i1 >> 0] = 1;
  i1 = i11;
 }
 HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
 return;
}

function _apply_transition_effects(i11, i1) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i12 + 16 | 0;
 i8 = i12 + 8 | 0;
 i7 = i12;
 i6 = HEAP32[i1 + 44 >> 2] | 0;
 if (!i6) {
  STACKTOP = i12;
  return;
 }
 if (!(HEAP8[i6 >> 0] | 0)) {
  STACKTOP = i12;
  return;
 }
 i1 = _strchr(i6, 59) | 0;
 if (!i1) {
  i4 = 0;
  i5 = 0;
  i3 = 0;
  i2 = 0;
 } else {
  i1 = i1 + 1 | 0;
  i3 = _atoi(i1) | 0;
  i1 = _strchr(i1, 59) | 0;
  if (!i1) {
   i4 = 1;
   i5 = 0;
   i2 = 0;
  } else {
   i1 = i1 + 1 | 0;
   i2 = _atoi(i1) | 0;
   i1 = _strchr(i1, 59) | 0;
   if (!i1) {
    i4 = 2;
    i5 = i2;
    i2 = 0;
   } else {
    i4 = i1 + 1 | 0;
    i1 = _atoi(i4) | 0;
    i4 = (_strchr(i4, 59) | 0) == 0;
    i4 = i4 ? 3 : 4;
    i5 = i2;
    i2 = i1;
   }
  }
 }
 if (!(_strncmp(i6, 360424, 7) | 0)) {
  switch (i4 & 7) {
  case 0:
   {
    i11 = HEAP32[i11 >> 2] | 0;
    HEAP32[i7 >> 2] = i6;
    _ass_msg(i11, 6, 360432, i7);
    STACKTOP = i12;
    return;
   }
  case 1:
   {
    i10 = 9;
    break;
   }
  default:
   if (!i5) i1 = 1; else i10 = 9;
  }
  if ((i10 | 0) == 9) i1 = 0;
  HEAP32[i11 + 492 >> 2] = i1;
  i10 = (i3 | 0) == 0;
  i8 = i11 + 168 | 0;
  i9 = HEAP32[i11 + 208 >> 2] | 0;
  i9 = _i64Subtract(HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0) | 0;
  i10 = ___divdi3(i9 | 0, tempRet0 | 0, (i10 ? 1 : i3) | 0, (i10 ? 0 : ((i3 | 0) < 0) << 31 >> 31) | 0) | 0;
  HEAP32[i11 + 496 >> 2] = i10;
  HEAP32[i11 + 288 >> 2] = 2;
  STACKTOP = i12;
  return;
 }
 if (!(_strncmp(i6, 360459, 10) | 0)) i1 = 3; else if (!(_strncmp(i6, 360470, 12) | 0)) i1 = 2; else {
  i11 = HEAP32[i11 >> 2] | 0;
  HEAP32[i8 >> 2] = i6;
  _ass_msg(i11, 7, 360483, i8);
  STACKTOP = i12;
  return;
 }
 HEAP32[i11 + 492 >> 2] = i1;
 if (i4 >>> 0 < 3) {
  i11 = HEAP32[i11 >> 2] | 0;
  HEAP32[i9 >> 2] = i6;
  _ass_msg(i11, 6, 360432, i9);
  STACKTOP = i12;
  return;
 }
 i1 = (i2 | 0) == 0;
 i9 = i11 + 168 | 0;
 i10 = HEAP32[i11 + 208 >> 2] | 0;
 i10 = _i64Subtract(HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0) | 0;
 i2 = ___divdi3(i10 | 0, tempRet0 | 0, (i1 ? 1 : i2) | 0, (i1 ? 0 : ((i2 | 0) < 0) << 31 >> 31) | 0) | 0;
 HEAP32[i11 + 496 >> 2] = i2;
 i2 = (i3 | 0) < (i5 | 0);
 i1 = i2 ? i5 : i3;
 if (!i1) i1 = HEAP32[(HEAP32[i11 + 160 >> 2] | 0) + 40 >> 2] | 0;
 HEAP32[i11 + 404 >> 2] = i2 ? i3 : i5;
 HEAP32[i11 + 412 >> 2] = i1;
 HEAP32[i11 + 288 >> 2] = 3;
 HEAP8[i11 + 417 >> 0] = 0;
 STACKTOP = i12;
 return;
}

function _normal_ignoreSectionTok(i4, i1, i5, i11) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 if ((i1 | 0) == (i5 | 0)) {
  i11 = -1;
  return i11 | 0;
 }
 i6 = i4 + 76 | 0;
 i7 = i5;
 i8 = i4 + 356 | 0;
 i9 = i4 + 360 | 0;
 i10 = i4 + 364 | 0;
 i3 = 0;
 L4 : while (1) {
  switch (HEAP8[i6 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
  case 8:
  case 1:
  case 0:
   {
    i2 = 16;
    break L4;
   }
  case 5:
   {
    if ((i7 - i1 | 0) < 2) {
     i1 = -2;
     i2 = 30;
     break L4;
    }
    if (FUNCTION_TABLE_iii[HEAP32[i8 >> 2] & 255](i4, i1) | 0) {
     i2 = 6;
     break L4;
    }
    i1 = i1 + 2 | 0;
    break;
   }
  case 6:
   {
    if ((i7 - i1 | 0) < 3) {
     i1 = -2;
     i2 = 30;
     break L4;
    }
    if (FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 255](i4, i1) | 0) {
     i2 = 10;
     break L4;
    }
    i1 = i1 + 3 | 0;
    break;
   }
  case 7:
   {
    if ((i7 - i1 | 0) < 4) {
     i1 = -2;
     i2 = 30;
     break L4;
    }
    if (FUNCTION_TABLE_iii[HEAP32[i10 >> 2] & 255](i4, i1) | 0) {
     i2 = 14;
     break L4;
    }
    i1 = i1 + 4 | 0;
    break;
   }
  case 2:
   {
    i2 = i1 + 1 | 0;
    if ((i2 | 0) == (i5 | 0)) {
     i1 = -1;
     i2 = 30;
     break L4;
    }
    if ((HEAP8[i2 >> 0] | 0) == 33) {
     i2 = i1 + 2 | 0;
     if ((i2 | 0) == (i5 | 0)) {
      i1 = -1;
      i2 = 30;
      break L4;
     }
     i12 = (HEAP8[i2 >> 0] | 0) == 91;
     i3 = (i12 & 1) + i3 | 0;
     i1 = i12 ? i1 + 3 | 0 : i2;
    } else i1 = i2;
    break;
   }
  case 4:
   {
    i2 = i1 + 1 | 0;
    if ((i2 | 0) == (i5 | 0)) {
     i1 = -1;
     i2 = 30;
     break L4;
    }
    if ((HEAP8[i2 >> 0] | 0) == 93) {
     i2 = i1 + 2 | 0;
     if ((i2 | 0) == (i5 | 0)) {
      i1 = -1;
      i2 = 30;
      break L4;
     }
     if ((HEAP8[i2 >> 0] | 0) == 62) {
      i1 = i1 + 3 | 0;
      if (!i3) {
       i2 = 27;
       break L4;
      }
      i3 = i3 + -1 | 0;
     } else i1 = i2;
    } else i1 = i2;
    break;
   }
  default:
   i1 = i1 + 1 | 0;
  }
  if ((i1 | 0) == (i5 | 0)) {
   i1 = -1;
   i2 = 30;
   break;
  }
 }
 if ((i2 | 0) == 6) {
  HEAP32[i11 >> 2] = i1;
  i12 = 0;
  return i12 | 0;
 } else if ((i2 | 0) == 10) {
  HEAP32[i11 >> 2] = i1;
  i12 = 0;
  return i12 | 0;
 } else if ((i2 | 0) == 14) {
  HEAP32[i11 >> 2] = i1;
  i12 = 0;
  return i12 | 0;
 } else if ((i2 | 0) == 16) {
  HEAP32[i11 >> 2] = i1;
  i12 = 0;
  return i12 | 0;
 } else if ((i2 | 0) == 27) {
  HEAP32[i11 >> 2] = i1;
  i12 = 42;
  return i12 | 0;
 } else if ((i2 | 0) == 30) return i1 | 0;
 return 0;
}

function _big2_sameName(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i6 = i1 + 76 | 0;
 i1 = i3;
 L1 : while (1) {
  i4 = HEAP8[i1 >> 0] | 0;
  switch (i4 << 24 >> 24) {
  case -33:
  case -34:
  case -35:
  case -36:
   {
    i5 = 14;
    break L1;
   }
  case 0:
   {
    switch (HEAP8[i6 + (HEAPU8[i1 + 1 >> 0] | 0) >> 0] | 0) {
    case 7:
     {
      i5 = 5;
      break;
     }
    case 6:
     {
      i4 = 0;
      i5 = 7;
      break;
     }
    case 5:
     {
      i3 = 0;
      i5 = 9;
      break;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 23:
    case 22:
    case 29:
     {
      i5 = 11;
      break;
     }
    default:
     {
      i5 = 14;
      break L1;
     }
    }
    break;
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i5 = 5;
    break;
   }
  case -1:
   {
    if ((HEAPU8[i1 + 1 >> 0] | 0) > 253) {
     i5 = 14;
     break L1;
    } else i5 = 11;
    break;
   }
  default:
   i5 = 11;
  }
  if ((i5 | 0) == 5) {
   i3 = i1 + 1 | 0;
   if (i4 << 24 >> 24 != (HEAP8[i2 >> 0] | 0)) {
    i1 = 0;
    i5 = 18;
    break;
   }
   i2 = i2 + 1 | 0;
   i1 = i3;
   i4 = HEAP8[i3 >> 0] | 0;
   i5 = 7;
  } else if ((i5 | 0) == 11) {
   i5 = 0;
   if ((HEAP8[i2 >> 0] | 0) != i4 << 24 >> 24) {
    i1 = 0;
    i5 = 18;
    break;
   }
   if ((HEAP8[i2 + 1 >> 0] | 0) != (HEAP8[i1 + 1 >> 0] | 0)) {
    i1 = 0;
    i5 = 18;
    break;
   }
  }
  if ((i5 | 0) == 7) {
   i3 = i1 + 1 | 0;
   if (i4 << 24 >> 24 != (HEAP8[i2 >> 0] | 0)) {
    i1 = 0;
    i5 = 18;
    break;
   }
   i2 = i2 + 1 | 0;
   i1 = i3;
   i3 = HEAP8[i3 >> 0] | 0;
   i5 = 9;
  }
  if ((i5 | 0) == 9) {
   if (i3 << 24 >> 24 != (HEAP8[i2 >> 0] | 0)) {
    i1 = 0;
    i5 = 18;
    break;
   }
   if ((HEAP8[i1 + 1 >> 0] | 0) != (HEAP8[i2 + 1 >> 0] | 0)) {
    i1 = 0;
    i5 = 18;
    break;
   }
  }
  i2 = i2 + 2 | 0;
  i1 = i1 + 2 | 0;
 }
 if ((i5 | 0) == 14) {
  i1 = HEAP8[i2 + 1 >> 0] | 0;
  L20 : do switch (HEAP8[i2 >> 0] | 0) {
  case 0:
   {
    switch (HEAP8[i6 + (i1 & 255) >> 0] | 0) {
    case 27:
    case 26:
    case 25:
    case 24:
    case 23:
    case 22:
    case 29:
    case 7:
    case 6:
    case 5:
     {
      i1 = 0;
      break;
     }
    default:
     break L20;
    }
    return i1 | 0;
   }
  case -1:
   {
    if ((i1 & 255) <= 253) {
     i6 = 0;
     return i6 | 0;
    }
    break;
   }
  case -36:
  case -35:
  case -34:
  case -33:
   break;
  default:
   {
    i6 = 0;
    return i6 | 0;
   }
  } while (0);
  i6 = 1;
  return i6 | 0;
 } else if ((i5 | 0) == 18) return i1 | 0;
 return 0;
}

function _outline_to_bitmap(i11, i1, i2, i12) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i14 = i15 + 24 | 0;
 i7 = i15 + 16 | 0;
 i5 = i15 + 8 | 0;
 i4 = i15;
 i13 = i11 + 760 | 0;
 i3 = (i1 | 0) != 0;
 if (i3) if (!(_rasterizer_set_outline(i13, i1, 0) | 0)) {
  _ass_msg(HEAP32[i11 >> 2] | 0, 2, 359241, i4);
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (i2 | 0) if (!(_rasterizer_set_outline(i13, i2, i3) | 0)) {
  _ass_msg(HEAP32[i11 >> 2] | 0, 2, 359241, i5);
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (i12 >>> 0 > 1073741823) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[i11 + 772 >> 2] | 0;
 if ((i1 | 0) > 2147483584) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i2 = HEAP32[i11 + 776 >> 2] | 0;
 if ((i2 | 0) > 2147483584) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i9 = HEAP32[i11 + 764 >> 2] >> 6;
 i10 = HEAP32[i11 + 768 >> 2] >> 6;
 i3 = (i1 + 63 >> 6) - i9 | 0;
 i2 = (i2 + 63 >> 6) - i10 | 0;
 i8 = i11 + 756 | 0;
 i6 = HEAP32[i8 >> 2] | 0;
 i1 = 1 << HEAP32[i6 + 4 >> 2];
 i4 = i1 + -1 | 0;
 if ((i2 | i3 | 0) >= 0) {
  i5 = i12 << 1;
  i16 = 2147483647 - i5 + (1 - i1) | 0;
  if (!((i3 | 0) > (i16 | 0) | (i2 | 0) > (i16 | 0))) {
   i16 = 0 - i1 | 0;
   i7 = i3 + i5 + i4 & i16;
   i3 = i2 + i5 + i4 & i16;
   i4 = _malloc(24) | 0;
   if (!i4) {
    i16 = 0;
    STACKTOP = i15;
    return i16 | 0;
   }
   i1 = 1 << HEAP32[i6 >> 2];
   i2 = 0 - i1 | 0;
   i2 = i7 >>> 0 > i2 >>> 0 ? i7 : i7 + -1 + i1 & i2;
   if (i2 >>> 0 <= (2147483615 / (((i3 | 0) > 1 ? i3 : 1) >>> 0) | 0) >>> 0) {
    i1 = _ass_aligned_alloc(i1, (Math_imul(i2, i3) | 0) + 32 | 0, 0) | 0;
    if (i1 | 0) {
     HEAP32[i4 + 8 >> 2] = i7;
     HEAP32[i4 + 12 >> 2] = i3;
     HEAP32[i4 + 16 >> 2] = i2;
     HEAP32[i4 + 20 >> 2] = i1;
     i9 = i9 - i12 | 0;
     HEAP32[i4 >> 2] = i9;
     i16 = i10 - i12 | 0;
     HEAP32[i4 + 4 >> 2] = i16;
     if (_rasterizer_fill(HEAP32[i8 >> 2] | 0, i13, i1, i9, i16, i2, i3, i2) | 0) {
      i16 = i4;
      STACKTOP = i15;
      return i16 | 0;
     }
     _ass_msg(HEAP32[i11 >> 2] | 0, 2, 359313, i14);
     _ass_aligned_free(i1);
     _free(i4);
     i16 = 0;
     STACKTOP = i15;
     return i16 | 0;
    }
   }
   _free(i4);
   i16 = 0;
   STACKTOP = i15;
   return i16 | 0;
  }
 }
 i16 = HEAP32[i11 >> 2] | 0;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i7 + 4 >> 2] = i2;
 _ass_msg(i16, 2, 359275, i7);
 i16 = 0;
 STACKTOP = i15;
 return i16 | 0;
}

function _Bezier_Up(i8, i14, i12, i5, i3) {
 i8 = i8 | 0;
 i14 = i14 | 0;
 i12 = i12 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = i8 + 52 | 0;
 i13 = HEAP32[i16 >> 2] | 0;
 i6 = HEAP32[i13 + (i14 << 3) + 4 >> 2] | 0;
 i2 = HEAP32[i13 + 4 >> 2] | 0;
 i15 = i8 + 40 | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 L1 : do if (!((i6 | 0) > (i3 | 0) | (i2 | 0) < (i5 | 0))) {
  i11 = i8 + 4 | 0;
  i7 = HEAP32[i11 >> 2] | 0;
  i4 = 0 - i7 | 0;
  i10 = i2 & i4;
  i10 = (i10 | 0) > (i3 | 0) ? i3 : i10;
  if ((i6 | 0) < (i5 | 0)) i4 = i5; else {
   i3 = i6 + -1 + i7 & i4;
   if (!(i6 & 65535 & i7 + 65535)) {
    i2 = i8 + 87 | 0;
    if (HEAP8[i2 >> 0] | 0) {
     HEAP8[i2 >> 0] = 0;
     i1 = i1 + -4 | 0;
    }
    HEAP32[i1 >> 2] = HEAP32[i13 + (i14 << 3) >> 2];
    i4 = i3;
    i5 = i3 + i7 | 0;
    i1 = i1 + 4 | 0;
   } else {
    i4 = i3;
    i5 = i3;
   }
  }
  i2 = i8 + 86 | 0;
  if (HEAP8[i2 >> 0] | 0) {
   HEAP32[(HEAP32[i8 + 88 >> 2] | 0) + 20 >> 2] = i4 >> HEAP32[i8 >> 2];
   HEAP8[i2 >> 0] = 0;
  }
  if ((i10 | 0) >= (i5 | 0)) {
   if ((i1 + (i10 - i5 >> HEAP32[i8 >> 2] << 2) + 4 | 0) >>> 0 >= (HEAP32[i8 + 36 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i1;
    HEAP32[i8 + 44 >> 2] = 98;
    i16 = 1;
    return i16 | 0;
   }
   i9 = i8 + 87 | 0;
   i7 = i8 + 16 | 0;
   i8 = 0 - i14 | 0;
   i3 = i13;
   while (1) {
    while (1) {
     HEAP8[i9 >> 0] = 0;
     i2 = HEAP32[i3 + 4 >> 2] | 0;
     if ((i2 | 0) <= (i5 | 0)) {
      i4 = 20;
      break;
     }
     i4 = i3 + (i14 << 3) | 0;
     i6 = HEAP32[i3 + (i14 << 3) + 4 >> 2] | 0;
     i2 = i2 - i6 | 0;
     if ((i2 | 0) < (HEAP32[i7 >> 2] | 0)) {
      i4 = 16;
      break;
     }
     FUNCTION_TABLE_vi[i12 & 127](i3);
     if (i4 >>> 0 < i13 >>> 0) break L1; else i3 = i4;
    }
    if ((i4 | 0) == 16) {
     i17 = HEAP32[i3 + (i14 << 3) >> 2] | 0;
     i2 = ((Math_imul((HEAP32[i3 >> 2] | 0) - i17 | 0, i5 - i6 | 0) | 0) / (i2 | 0) | 0) + i17 | 0;
     i4 = 17;
    } else if ((i4 | 0) == 20) {
     i4 = 0;
     if ((i2 | 0) == (i5 | 0)) {
      HEAP8[i9 >> 0] = 1;
      i2 = HEAP32[i3 >> 2] | 0;
      i4 = 17;
     } else i2 = i5;
    }
    if ((i4 | 0) == 17) {
     HEAP32[i1 >> 2] = i2;
     i2 = (HEAP32[i11 >> 2] | 0) + i5 | 0;
     i1 = i1 + 4 | 0;
    }
    i3 = i3 + (i8 << 3) | 0;
    if ((i2 | 0) > (i10 | 0) | i3 >>> 0 < i13 >>> 0) break; else i5 = i2;
   }
  }
 } while (0);
 HEAP32[i15 >> 2] = i1;
 HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (0 - i14 << 3);
 i17 = 0;
 return i17 | 0;
}

function _pcf_get_accel(i6, i7, i2) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 i4 = HEAP32[i7 + 192 >> 2] | 0;
 i3 = HEAP32[i7 + 188 >> 2] | 0;
 L1 : do if (!i3) i1 = 3; else {
  i1 = 0;
  while (1) {
   if ((HEAP32[i4 + (i1 << 4) >> 2] | 0) == (i2 | 0)) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i3 >>> 0) {
    i1 = 3;
    break L1;
   }
  }
  i2 = HEAP32[i6 + 8 >> 2] | 0;
  i1 = HEAP32[i4 + (i1 << 4) + 12 >> 2] | 0;
  if (i1 >>> 0 < i2 >>> 0) i1 = 83; else if (!(_FT_Stream_Skip(i6, i1 - i2 | 0) | 0)) {
   HEAP32[i8 >> 2] = 0;
   i2 = _FT_Stream_ReadULongLE(i6, i8) | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   if (i1 | 0) {
    i8 = i1;
    STACKTOP = i9;
    return i8 | 0;
   }
   i5 = i2 & -256;
   switch (i5 | 0) {
   case 256:
   case 0:
    break;
   default:
    {
     i8 = 0;
     STACKTOP = i9;
     return i8 | 0;
    }
   }
   i2 = i2 & 4;
   i1 = i7 + 196 | 0;
   if (!i2) {
    i1 = _FT_Stream_ReadFields(i6, 117352, i1) | 0;
    HEAP32[i8 >> 2] = i1;
    if (i1 | 0) {
     i8 = i1;
     STACKTOP = i9;
     return i8 | 0;
    }
   } else {
    i1 = _FT_Stream_ReadFields(i6, 117300, i1) | 0;
    HEAP32[i8 >> 2] = i1;
    if (i1 | 0) {
     i8 = i1;
     STACKTOP = i9;
     return i8 | 0;
    }
   }
   i3 = i7 + 216 | 0;
   i4 = i2 | 0 ? 117208 : 117240;
   i1 = _FT_Stream_ReadFields(i6, i4, i3) | 0;
   HEAP32[i8 >> 2] = i1;
   if (i1 | 0) {
    i8 = i1;
    STACKTOP = i9;
    return i8 | 0;
   }
   i2 = i7 + 232 | 0;
   i1 = _FT_Stream_ReadFields(i6, i4, i2) | 0;
   HEAP32[i8 >> 2] = i1;
   if (i1 | 0) {
    i8 = i1;
    STACKTOP = i9;
    return i8 | 0;
   }
   i1 = i7 + 248 | 0;
   if ((i5 | 0) != 256) {
    HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
    HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
    i8 = i7 + 264 | 0;
    HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i8 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i8 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i8 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
    i8 = 0;
    STACKTOP = i9;
    return i8 | 0;
   }
   i1 = _FT_Stream_ReadFields(i6, i4, i1) | 0;
   HEAP32[i8 >> 2] = i1;
   if (i1 | 0) {
    i8 = i1;
    STACKTOP = i9;
    return i8 | 0;
   }
   i7 = _FT_Stream_ReadFields(i6, i4, i7 + 264 | 0) | 0;
   HEAP32[i8 >> 2] = i7;
   i8 = i7;
   STACKTOP = i9;
   return i8 | 0;
  } else i1 = 83;
 } while (0);
 HEAP32[i8 >> 2] = i1;
 i8 = i1;
 STACKTOP = i9;
 return i8 | 0;
}

function _ft_gzip_check_header(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i11;
 i2 = i11 + 4 | 0;
 i1 = _FT_Stream_Seek(i7, 0) | 0;
 HEAP32[i8 >> 2] = i1;
 if (i1 | 0) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 i1 = _FT_Stream_Read(i7, i2, 4) | 0;
 HEAP32[i8 >> 2] = i1;
 if (i1 | 0) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 if ((HEAP8[i2 >> 0] | 0) == 31) if ((HEAP8[i2 + 1 >> 0] | 0) == -117) if ((HEAP8[i2 + 2 >> 0] | 0) == 8) {
  i3 = i2 + 3 | 0;
  if ((HEAPU8[i3 >> 0] | 0) <= 31) {
   i2 = _FT_Stream_Skip(i7, 6) | 0;
   HEAP32[i8 >> 2] = i2;
   i1 = HEAP8[i3 >> 0] | 0;
   do if (i1 & 4) {
    i1 = _FT_Stream_ReadUShortLE(i7, i8) | 0;
    i2 = HEAP32[i8 >> 2] | 0;
    if (i2 | 0) {
     i10 = i2;
     STACKTOP = i11;
     return i10 | 0;
    }
    i1 = _FT_Stream_Skip(i7, i1 & 65535) | 0;
    HEAP32[i8 >> 2] = i1;
    if (!i1) {
     i1 = HEAP8[i3 >> 0] | 0;
     i2 = 0;
     break;
    } else {
     i10 = i1;
     STACKTOP = i11;
     return i10 | 0;
    }
   } while (0);
   do if (!(i1 & 8)) {
    i4 = i1;
    i5 = i2;
   } else {
    L22 : while (1) {
     i2 = _FT_Stream_ReadChar(i7, i8) | 0;
     i1 = HEAP32[i8 >> 2] | 0;
     switch (((i1 | 0) == 0 ? (i2 << 24 >> 24 == 0) << 31 >> 31 : 2) & 3) {
     case 0:
      break;
     case 3:
      {
       i2 = 14;
       break L22;
      }
     default:
      {
       i6 = i1;
       i2 = 20;
       break L22;
      }
     }
    }
    if ((i2 | 0) == 14) {
     i4 = HEAP8[i3 >> 0] | 0;
     i5 = i1;
     break;
    } else if ((i2 | 0) == 20) {
     STACKTOP = i11;
     return i6 | 0;
    }
   } while (0);
   do if (!(i4 & 16)) {
    i9 = i4;
    i10 = i5;
   } else {
    L29 : while (1) {
     i5 = _FT_Stream_ReadChar(i7, i8) | 0;
     i1 = HEAP32[i8 >> 2] | 0;
     switch (((i1 | 0) == 0 ? (i5 << 24 >> 24 == 0 ? 5 : 0) : 2) & 7) {
     case 0:
      break;
     case 5:
      {
       i2 = 17;
       break L29;
      }
     default:
      {
       i6 = i1;
       i2 = 20;
       break L29;
      }
     }
    }
    if ((i2 | 0) == 17) {
     i9 = HEAP8[i3 >> 0] | 0;
     i10 = i1;
     break;
    } else if ((i2 | 0) == 20) {
     STACKTOP = i11;
     return i6 | 0;
    }
   } while (0);
   if (!(i9 & 2)) {
    STACKTOP = i11;
    return i10 | 0;
   }
   i10 = _FT_Stream_Skip(i7, 2) | 0;
   HEAP32[i8 >> 2] = i10;
   STACKTOP = i11;
   return i10 | 0;
  }
 }
 HEAP32[i8 >> 2] = 3;
 i10 = 3;
 STACKTOP = i11;
 return i10 | 0;
}

function _gray_conic_to(i2, i1, i8) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i6 = i8 + 1008 | 0;
 i7 = i8 + 232 | 0;
 i5 = HEAP32[i1 >> 2] << 2;
 HEAP32[i7 >> 2] = i5;
 i4 = i4 << 2;
 HEAP32[i8 + 236 >> 2] = i4;
 i10 = HEAP32[i2 >> 2] | 0;
 HEAP32[i8 + 240 >> 2] = i10 << 2;
 i9 = HEAP32[i2 + 4 >> 2] | 0;
 i2 = i9 << 2;
 HEAP32[i8 + 244 >> 2] = i2;
 i1 = HEAP32[i8 + 220 >> 2] | 0;
 HEAP32[i8 + 248 >> 2] = i1;
 i3 = HEAP32[i8 + 224 >> 2] | 0;
 HEAP32[i8 + 252 >> 2] = i3;
 i1 = i5 - (i10 << 3) + i1 | 0;
 i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 i9 = i4 - (i9 << 3) + i3 | 0;
 i9 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
 i1 = (i1 | 0) < (i9 | 0) ? i9 : i1;
 if ((i1 | 0) < 64) {
  i2 = i7;
  i3 = 0;
  i1 = i5;
  i4 = 9;
 } else {
  i10 = (i2 | 0) < (i4 | 0) ? i2 : i4;
  i2 = (i2 | 0) > (i4 | 0) ? i2 : i4;
  if ((((i3 | 0) < (i10 | 0) ? i3 : i10) >> 8 | 0) < (HEAP32[i8 + 176 >> 2] | 0)) if ((((i3 | 0) > (i2 | 0) ? i3 : i2) >> 8 | 0) < (HEAP32[i8 + 172 >> 2] | 0)) {
   i2 = i7;
   i3 = 0;
   i1 = i5;
   i4 = 9;
  } else {
   i2 = 0;
   do {
    i1 = i1 >> 2;
    i2 = i2 + 1 | 0;
   } while ((i1 | 0) > 64);
   HEAP32[i6 >> 2] = i2;
   i1 = i7;
   i3 = 0;
   i4 = 6;
  } else {
   i2 = i7;
   i3 = 0;
   i1 = i5;
   i4 = 9;
  }
 }
 L7 : while (1) {
  do if ((i4 | 0) == 6) if ((i2 | 0) > 0) {
   i10 = i1 + 16 | 0;
   i9 = HEAP32[i10 >> 2] | 0;
   HEAP32[i1 + 32 >> 2] = i9;
   i7 = i1 + 8 | 0;
   i6 = HEAP32[i7 >> 2] | 0;
   i9 = (i6 + i9 | 0) / 2 | 0;
   HEAP32[i1 + 24 >> 2] = i9;
   i6 = ((HEAP32[i1 >> 2] | 0) + i6 | 0) / 2 | 0;
   HEAP32[i7 >> 2] = i6;
   HEAP32[i10 >> 2] = (i6 + i9 | 0) / 2 | 0;
   i10 = i1 + 20 | 0;
   i9 = HEAP32[i10 >> 2] | 0;
   HEAP32[i1 + 36 >> 2] = i9;
   i6 = i1 + 12 | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   i9 = (i7 + i9 | 0) / 2 | 0;
   HEAP32[i1 + 28 >> 2] = i9;
   i7 = ((HEAP32[i1 + 4 >> 2] | 0) + i7 | 0) / 2 | 0;
   HEAP32[i6 >> 2] = i7;
   HEAP32[i10 >> 2] = (i7 + i9 | 0) / 2 | 0;
   i10 = i3 + 1 | 0;
   i2 = i2 + -1 | 0;
   HEAP32[i8 + 1008 + (i3 << 2) >> 2] = i2;
   HEAP32[i8 + 1008 + (i10 << 2) >> 2] = i2;
   i1 = i1 + 16 | 0;
   i2 = i10;
   break;
  } else {
   i2 = i1;
   i1 = HEAP32[i1 >> 2] | 0;
   i4 = 9;
   continue L7;
  } else if ((i4 | 0) == 9) {
   _gray_render_line(i8, i1, HEAP32[i2 + 4 >> 2] | 0);
   i1 = i2 + -16 | 0;
   i2 = i3 + -1 | 0;
  } while (0);
  if ((i2 | 0) <= -1) break;
  i3 = i2;
  i2 = HEAP32[i8 + 1008 + (i2 << 2) >> 2] | 0;
  i4 = 6;
 }
 return 0;
}

function _FcPatternAppend(i13, i14) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i18 + 16 | 0;
 i15 = i18;
 i1 = HEAP32[i14 >> 2] | 0;
 if ((i1 | 0) <= 0) {
  i17 = 1;
  STACKTOP = i18;
  return i17 | 0;
 }
 i16 = i14;
 i17 = i14 + 8 | 0;
 i11 = i15 + 4 | 0;
 i12 = i15 + 8 | 0;
 i10 = i15 + 12 | 0;
 i8 = 0;
 L4 : while (1) {
  i6 = (HEAP32[i17 >> 2] | 0) + i16 | 0;
  i7 = i6 + (i8 << 3) | 0;
  i6 = HEAP32[i6 + (i8 << 3) + 4 >> 2] | 0;
  i2 = i6;
  i2 = (i2 & 1 | 0) == 0 ? i6 : i7 + (i2 & -2) | 0;
  if (i2) {
   do {
    i6 = HEAP32[i7 >> 2] | 0;
    i3 = i2 + 8 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    switch (i1 | 0) {
    case 3:
     {
      i20 = HEAP32[i2 + 16 >> 2] | 0;
      i19 = i20;
      i1 = 3;
      i4 = 0;
      i5 = 0;
      i3 = (i19 & 1 | 0) == 0 ? i20 : (i19 & -2) + i3 | 0;
      break;
     }
    case 6:
     {
      i19 = HEAP32[i2 + 16 >> 2] | 0;
      i20 = i19;
      i1 = 6;
      i4 = 0;
      i5 = 0;
      i3 = (i20 & 1 | 0) == 0 ? i19 : (i20 & -2) + i3 | 0;
      break;
     }
    case 8:
     {
      i19 = HEAP32[i2 + 16 >> 2] | 0;
      i20 = i19;
      i1 = 8;
      i4 = 0;
      i5 = 0;
      i3 = (i20 & 1 | 0) == 0 ? i19 : (i20 & -2) + i3 | 0;
      break;
     }
    case 9:
     {
      i19 = HEAP32[i2 + 16 >> 2] | 0;
      i20 = i19;
      i1 = 9;
      i4 = 0;
      i5 = 0;
      i3 = (i20 & 1 | 0) == 0 ? i19 : (i20 & -2) + i3 | 0;
      break;
     }
    default:
     {
      i4 = HEAP32[i3 + 12 >> 2] | 0;
      i5 = HEAP32[i3 + 4 >> 2] | 0;
      i3 = HEAP32[i2 + 16 >> 2] | 0;
     }
    }
    HEAP32[i15 >> 2] = i1;
    HEAP32[i11 >> 2] = i5;
    HEAP32[i12 >> 2] = i3;
    HEAP32[i10 >> 2] = i4;
    i20 = HEAP32[i2 + 24 >> 2] | 0;
    HEAP32[i9 >> 2] = HEAP32[i15 >> 2];
    HEAP32[i9 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
    HEAP32[i9 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
    HEAP32[i9 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
    if (!(_FcPatternObjectAddWithBinding(i13, i6, i9, i20, 1) | 0)) {
     i1 = 0;
     i2 = 15;
     break L4;
    }
    i19 = HEAP32[i2 >> 2] | 0;
    i20 = i19;
    i2 = (i20 & 1 | 0) == 0 ? i19 : (i20 & -2) + i2 | 0;
   } while ((i2 | 0) != 0);
   i1 = HEAP32[i14 >> 2] | 0;
  }
  i8 = i8 + 1 | 0;
  if ((i8 | 0) >= (i1 | 0)) {
   i1 = 1;
   i2 = 15;
   break;
  }
 }
 if ((i2 | 0) == 15) {
  STACKTOP = i18;
  return i1 | 0;
 }
 return 0;
}

function _FcValueListPrintWithPosition(i1, i12) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i11 = i17 + 112 | 0;
 i16 = i17 + 104 | 0;
 i6 = i17 + 96 | 0;
 i5 = i17 + 88 | 0;
 i4 = i17 + 80 | 0;
 i10 = i17 + 72 | 0;
 i9 = i17 + 64 | 0;
 i8 = i17 + 56 | 0;
 i7 = i17 + 48 | 0;
 i3 = i17 + 40 | 0;
 i2 = i17 + 32 | 0;
 i13 = i17;
 i14 = i17 + 16 | 0;
 L1 : do if (i1 | 0) {
  i15 = HEAP32[22843] | 0;
  if (!i12) while (1) {
   _FcValueCanonicalize(i14, i1 + 8 | 0);
   HEAP32[i13 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i13 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
   _putchar(32) | 0;
   HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   __FcValuePrintFile(i15, i11);
   switch (HEAP32[i1 + 24 >> 2] | 0) {
   case 0:
    {
     _printf(347068, i10) | 0;
     break;
    }
   case 1:
    {
     _printf(347072, i4) | 0;
     break;
    }
   case 2:
    {
     _printf(347076, i5) | 0;
     break;
    }
   default:
    _printf(347080, i6) | 0;
   }
   i8 = HEAP32[i1 >> 2] | 0;
   i9 = i8;
   i1 = (i9 & 1 | 0) == 0 ? i8 : (i9 & -2) + i1 | 0;
   if (!i1) break L1;
  }
  while (1) {
   _FcValueCanonicalize(i14, i1 + 8 | 0);
   HEAP32[i13 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i13 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
   if ((i1 | 0) == (i12 | 0)) _printf(348612, i2) | 0; else _putchar(32) | 0;
   HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
   __FcValuePrintFile(i15, i11);
   switch (HEAP32[i1 + 24 >> 2] | 0) {
   case 0:
    {
     _printf(347068, i8) | 0;
     break;
    }
   case 1:
    {
     _printf(347072, i7) | 0;
     break;
    }
   case 2:
    {
     _printf(347076, i3) | 0;
     break;
    }
   default:
    _printf(347080, i9) | 0;
   }
   i6 = HEAP32[i1 >> 2] | 0;
   i10 = i6;
   i1 = (i10 & 1 | 0) == 0 ? i6 : (i10 & -2) + i1 | 0;
   if (!i1) break L1;
  }
 } while (0);
 if (i12 | 0) {
  STACKTOP = i17;
  return;
 }
 _printf(348623, i16) | 0;
 STACKTOP = i17;
 return;
}

function _ass_blur1246_vert_c(i2, i3, i23, i1, i24) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i1 = i1 | 0;
 i24 = i24 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i25 = i1 + 12 | 0;
 i20 = i1 << 4;
 if (!i23) return;
 i21 = (i25 | 0) == 0;
 i22 = i24 + 2 | 0;
 i17 = i24 + 4 | 0;
 i18 = i24 + 6 | 0;
 i19 = i20 + 192 | 0;
 i1 = i2;
 i16 = 0;
 while (1) {
  if (!i21) {
   i2 = 0;
   i4 = 0;
   i6 = i1;
   while (1) {
    i7 = i2 + -192 | 0;
    i7 = i7 >>> 0 < i20 >>> 0 ? i3 + (i7 << 1) | 0 : 368376;
    i8 = i2 + -160 | 0;
    i8 = i8 >>> 0 < i20 >>> 0 ? i3 + (i8 << 1) | 0 : 368376;
    i9 = i2 + -128 | 0;
    i9 = i9 >>> 0 < i20 >>> 0 ? i3 + (i9 << 1) | 0 : 368376;
    i10 = i2 + -112 | 0;
    i10 = i10 >>> 0 < i20 >>> 0 ? i3 + (i10 << 1) | 0 : 368376;
    i11 = i2 + -96 | 0;
    i11 = i11 >>> 0 < i20 >>> 0 ? i3 + (i11 << 1) | 0 : 368376;
    i12 = i2 + -80 | 0;
    i12 = i12 >>> 0 < i20 >>> 0 ? i3 + (i12 << 1) | 0 : 368376;
    i13 = i2 + -64 | 0;
    i13 = i13 >>> 0 < i20 >>> 0 ? i3 + (i13 << 1) | 0 : 368376;
    i14 = i2 + -32 | 0;
    i14 = i14 >>> 0 < i20 >>> 0 ? i3 + (i14 << 1) | 0 : 368376;
    i15 = i2 >>> 0 < i20 >>> 0 ? i3 + (i2 << 1) | 0 : 368376;
    i5 = 0;
    do {
     i26 = HEAP16[i11 + (i5 << 1) >> 1] | 0;
     i29 = Math_imul(HEAP16[i24 >> 1] | 0, ((HEAPU16[i12 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i10 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0;
     i28 = Math_imul(HEAP16[i22 >> 1] | 0, ((HEAPU16[i13 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i9 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0;
     i27 = Math_imul(HEAP16[i17 >> 1] | 0, ((HEAPU16[i14 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i8 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0;
     i26 = ((i29 + 32768 + i28 + i27 + (Math_imul(HEAP16[i18 >> 1] | 0, ((HEAPU16[i15 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i7 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0) | 0) >>> 16) + i26 & 65535;
     HEAP16[i6 + (i5 << 1) >> 1] = i26;
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != 16);
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i25 | 0)) break; else {
     i2 = i2 + 16 | 0;
     i6 = i6 + 32 | 0;
    }
   }
   i1 = i1 + (i19 << 1) | 0;
  }
  i16 = i16 + 16 | 0;
  if (i16 >>> 0 >= i23 >>> 0) break; else i3 = i3 + (i20 << 1) | 0;
 }
 return;
}

function _ass_blur1235_vert_c(i2, i3, i23, i1, i24) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i1 = i1 | 0;
 i24 = i24 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i25 = i1 + 10 | 0;
 i20 = i1 << 4;
 if (!i23) return;
 i21 = (i25 | 0) == 0;
 i22 = i24 + 2 | 0;
 i17 = i24 + 4 | 0;
 i18 = i24 + 6 | 0;
 i19 = i20 + 160 | 0;
 i1 = i2;
 i16 = 0;
 while (1) {
  if (!i21) {
   i2 = 0;
   i4 = 0;
   i6 = i1;
   while (1) {
    i7 = i2 + -160 | 0;
    i7 = i7 >>> 0 < i20 >>> 0 ? i3 + (i7 << 1) | 0 : 368376;
    i8 = i2 + -128 | 0;
    i8 = i8 >>> 0 < i20 >>> 0 ? i3 + (i8 << 1) | 0 : 368376;
    i9 = i2 + -112 | 0;
    i9 = i9 >>> 0 < i20 >>> 0 ? i3 + (i9 << 1) | 0 : 368376;
    i10 = i2 + -96 | 0;
    i10 = i10 >>> 0 < i20 >>> 0 ? i3 + (i10 << 1) | 0 : 368376;
    i11 = i2 + -80 | 0;
    i11 = i11 >>> 0 < i20 >>> 0 ? i3 + (i11 << 1) | 0 : 368376;
    i12 = i2 + -64 | 0;
    i12 = i12 >>> 0 < i20 >>> 0 ? i3 + (i12 << 1) | 0 : 368376;
    i13 = i2 + -48 | 0;
    i13 = i13 >>> 0 < i20 >>> 0 ? i3 + (i13 << 1) | 0 : 368376;
    i14 = i2 + -32 | 0;
    i14 = i14 >>> 0 < i20 >>> 0 ? i3 + (i14 << 1) | 0 : 368376;
    i15 = i2 >>> 0 < i20 >>> 0 ? i3 + (i2 << 1) | 0 : 368376;
    i5 = 0;
    do {
     i26 = HEAP16[i11 + (i5 << 1) >> 1] | 0;
     i29 = Math_imul(HEAP16[i24 >> 1] | 0, ((HEAPU16[i12 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i10 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0;
     i28 = Math_imul(HEAP16[i22 >> 1] | 0, ((HEAPU16[i13 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i9 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0;
     i27 = Math_imul(HEAP16[i17 >> 1] | 0, ((HEAPU16[i14 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i8 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0;
     i26 = ((i29 + 32768 + i28 + i27 + (Math_imul(HEAP16[i18 >> 1] | 0, ((HEAPU16[i15 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i7 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0) | 0) >>> 16) + i26 & 65535;
     HEAP16[i6 + (i5 << 1) >> 1] = i26;
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != 16);
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i25 | 0)) break; else {
     i2 = i2 + 16 | 0;
     i6 = i6 + 32 | 0;
    }
   }
   i1 = i1 + (i19 << 1) | 0;
  }
  i16 = i16 + 16 | 0;
  if (i16 >>> 0 >= i23 >>> 0) break; else i3 = i3 + (i20 << 1) | 0;
 }
 return;
}

function _FT_Bitmap_Copy(i1, i7, i11) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i14;
 HEAP32[i13 >> 2] = 0;
 if (!i1) {
  i13 = 33;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (!((i7 | 0) != 0 & (i11 | 0) != 0)) {
  i13 = 6;
  STACKTOP = i14;
  return i13 | 0;
 }
 if ((i7 | 0) == (i11 | 0)) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i3 = HEAP32[i7 + 8 >> 2] | 0;
 i9 = i3 >> 31 | 1;
 i2 = i11 + 8 | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 i10 = i5 >> 31 | 1;
 i8 = i7 + 12 | 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  HEAP32[i11 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
  HEAP32[i11 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
  if ((i9 | 0) == (i10 | 0)) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  HEAP32[i2 >> 2] = 0 - (HEAP32[i2 >> 2] | 0);
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i4 = HEAP32[i1 >> 2] | 0;
 i12 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
 i6 = Math_imul(HEAP32[i7 >> 2] | 0, i12) | 0;
 i3 = i11 + 12 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if (!i2) {
  i1 = _ft_mem_qalloc(i4, i6, i13) | 0;
  i2 = 11;
 } else {
  i1 = Math_imul(HEAP32[i11 >> 2] | 0, (i5 | 0) < 0 ? 0 - i5 | 0 : i5) | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i5 = i2;
   i2 = 12;
  } else {
   i1 = _ft_mem_qrealloc(i4, 1, i1, i6, i2, i13) | 0;
   i2 = 11;
  }
 }
 if ((i2 | 0) == 11) {
  HEAP32[i3 >> 2] = i1;
  if (!(HEAP32[i13 >> 2] | 0)) {
   i5 = i1;
   i2 = 12;
  }
 }
 do if ((i2 | 0) == 12) {
  HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  HEAP32[i11 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
  HEAP32[i11 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
  HEAP32[i3 >> 2] = i5;
  i2 = HEAP32[i8 >> 2] | 0;
  if ((i9 | 0) == (i10 | 0)) {
   _memcpy(i5 | 0, i2 | 0, i6 | 0) | 0;
   break;
  }
  i1 = HEAP32[i11 >> 2] | 0;
  if (i1 | 0) {
   i4 = 0 - i12 | 0;
   i3 = i1;
   i1 = i5 + (Math_imul(i1 + -1 | 0, i12) | 0) | 0;
   while (1) {
    _memcpy(i1 | 0, i2 | 0, i12 | 0) | 0;
    i3 = i3 + -1 | 0;
    if (!i3) break; else {
     i2 = i2 + i12 | 0;
     i1 = i1 + i4 | 0;
    }
   }
  }
 } while (0);
 i13 = HEAP32[i13 >> 2] | 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _ass_blur1234_vert_c(i2, i3, i23, i1, i24) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i1 = i1 | 0;
 i24 = i24 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i25 = i1 + 8 | 0;
 i20 = i1 << 4;
 if (!i23) return;
 i21 = (i25 | 0) == 0;
 i22 = i24 + 2 | 0;
 i17 = i24 + 4 | 0;
 i18 = i24 + 6 | 0;
 i19 = i20 + 128 | 0;
 i1 = i2;
 i16 = 0;
 while (1) {
  if (!i21) {
   i2 = 0;
   i4 = 0;
   i6 = i1;
   while (1) {
    i7 = i2 + -128 | 0;
    i7 = i7 >>> 0 < i20 >>> 0 ? i3 + (i7 << 1) | 0 : 368376;
    i8 = i2 + -112 | 0;
    i8 = i8 >>> 0 < i20 >>> 0 ? i3 + (i8 << 1) | 0 : 368376;
    i9 = i2 + -96 | 0;
    i9 = i9 >>> 0 < i20 >>> 0 ? i3 + (i9 << 1) | 0 : 368376;
    i10 = i2 + -80 | 0;
    i10 = i10 >>> 0 < i20 >>> 0 ? i3 + (i10 << 1) | 0 : 368376;
    i11 = i2 + -64 | 0;
    i11 = i11 >>> 0 < i20 >>> 0 ? i3 + (i11 << 1) | 0 : 368376;
    i12 = i2 + -48 | 0;
    i12 = i12 >>> 0 < i20 >>> 0 ? i3 + (i12 << 1) | 0 : 368376;
    i13 = i2 + -32 | 0;
    i13 = i13 >>> 0 < i20 >>> 0 ? i3 + (i13 << 1) | 0 : 368376;
    i14 = i2 + -16 | 0;
    i14 = i14 >>> 0 < i20 >>> 0 ? i3 + (i14 << 1) | 0 : 368376;
    i15 = i2 >>> 0 < i20 >>> 0 ? i3 + (i2 << 1) | 0 : 368376;
    i5 = 0;
    do {
     i26 = HEAP16[i11 + (i5 << 1) >> 1] | 0;
     i29 = Math_imul(HEAP16[i24 >> 1] | 0, ((HEAPU16[i12 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i10 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0;
     i28 = Math_imul(HEAP16[i22 >> 1] | 0, ((HEAPU16[i13 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i9 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0;
     i27 = Math_imul(HEAP16[i17 >> 1] | 0, ((HEAPU16[i14 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i8 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0;
     i26 = ((i29 + 32768 + i28 + i27 + (Math_imul(HEAP16[i18 >> 1] | 0, ((HEAPU16[i15 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) + ((HEAPU16[i7 + (i5 << 1) >> 1] | 0) - i26 << 16 >> 16) | 0) | 0) | 0) >>> 16) + i26 & 65535;
     HEAP16[i6 + (i5 << 1) >> 1] = i26;
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != 16);
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i25 | 0)) break; else {
     i2 = i2 + 16 | 0;
     i6 = i6 + 32 | 0;
    }
   }
   i1 = i1 + (i19 << 1) | 0;
  }
  i16 = i16 + 16 | 0;
  if (i16 >>> 0 >= i23 >>> 0) break; else i3 = i3 + (i20 << 1) | 0;
 }
 return;
}

function _poolGrow(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i1 = i10 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 if (!i4) {
  i2 = i10 + 8 | 0;
  i11 = i2;
  i2 = HEAP32[i2 >> 2] | 0;
 } else {
  i5 = i10 + 16 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if (!i6) {
   HEAP32[i10 >> 2] = i4;
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i4 >> 2] = 0;
   i11 = i4 + 8 | 0;
   HEAP32[i5 >> 2] = i11;
   HEAP32[i10 + 8 >> 2] = (HEAP32[i4 + 4 >> 2] | 0) + (i4 + 8);
   HEAP32[i10 + 12 >> 2] = i11;
   i11 = 1;
   return i11 | 0;
  }
  i2 = i10 + 8 | 0;
  i7 = HEAP32[i2 >> 2] | 0;
  i3 = i7 - i6 | 0;
  if ((i3 | 0) < (HEAP32[i4 + 4 >> 2] | 0)) {
   i11 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i10 >> 2] = i4;
   HEAP32[i1 >> 2] = i11;
   _memcpy(i4 + 8 | 0, i6 | 0, i3 | 0) | 0;
   i11 = HEAP32[i10 >> 2] | 0;
   i10 = i10 + 12 | 0;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) + (i11 + 8);
   HEAP32[i5 >> 2] = i11 + 8;
   HEAP32[i2 >> 2] = (HEAP32[i11 + 4 >> 2] | 0) + (i11 + 8);
   i11 = 1;
   return i11 | 0;
  } else {
   i11 = i2;
   i2 = i7;
  }
 }
 i3 = HEAP32[i10 >> 2] | 0;
 i9 = i10 + 16 | 0;
 do if (!i3) {
  i8 = i9;
  i1 = HEAP32[i9 >> 2] | 0;
 } else {
  i8 = HEAP32[i9 >> 2] | 0;
  i1 = i8;
  if ((i8 | 0) != (i3 + 8 | 0)) {
   i8 = i9;
   break;
  }
  i2 = i2 - i1 << 1;
  i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 + 20 >> 2] | 0) + 4 >> 2] & 255](i3, i2 + 8 | 0) | 0;
  if (!i1) {
   i11 = 0;
   return i11 | 0;
  }
  HEAP32[i10 >> 2] = i1;
  HEAP32[i1 + 4 >> 2] = i2;
  i10 = i10 + 12 | 0;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) + (i1 + 8);
  HEAP32[i9 >> 2] = i1 + 8;
  HEAP32[i11 >> 2] = i1 + 8 + i2;
  i11 = 1;
  return i11 | 0;
 } while (0);
 i6 = i2 - i1 | 0;
 i6 = (i6 | 0) < 1024 ? 1024 : i6 << 1;
 i7 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i10 + 20 >> 2] >> 2] & 63](i6 + 8 | 0) | 0;
 if (!i7) {
  i11 = 0;
  return i11 | 0;
 }
 HEAP32[i7 + 4 >> 2] = i6;
 HEAP32[i7 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i10 >> 2] = i7;
 i5 = i10 + 12 | 0;
 i10 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 i1 = i10;
 i3 = i2;
 if ((i10 | 0) == (i2 | 0)) {
  i4 = i7 + 8 | 0;
  i2 = i3;
 } else {
  i4 = i7 + 8 | 0;
  _memcpy(i4 | 0, i2 | 0, i1 - i3 | 0) | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i5 >> 2] = i7 + 8 + (i1 - i2);
 HEAP32[i9 >> 2] = i4;
 HEAP32[i11 >> 2] = i7 + 8 + i6;
 i11 = 1;
 return i11 | 0;
}

function _ps_dimension_set_mask_bits(i8, i13, i14, i5, i1, i11) {
 i8 = i8 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i15;
 i10 = i8 + 12 | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if (i2 | 0) HEAP32[(HEAP32[i8 + 20 >> 2] | 0) + (i2 << 4) + -16 + 12 >> 2] = i1;
 i7 = i2 + 1 | 0;
 i9 = i8 + 16 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 do if (i7 >>> 0 > i3 >>> 0) {
  HEAP32[i12 >> 2] = 0;
  i2 = i2 + 8 & -8;
  i1 = i8 + 20 | 0;
  i4 = _ft_mem_realloc(i11, 16, i3, i2, HEAP32[i1 >> 2] | 0, i12) | 0;
  HEAP32[i1 >> 2] = i4;
  i1 = HEAP32[i12 >> 2] | 0;
  if (!i1) {
   HEAP32[i9 >> 2] = i2;
   i1 = i4;
   i6 = i4;
   i3 = i2;
   i2 = i4;
   break;
  }
  i14 = i1;
  STACKTOP = i15;
  return i14 | 0;
 } else {
  i2 = HEAP32[i8 + 20 >> 2] | 0;
  i1 = i2;
  i6 = i2;
 } while (0);
 i6 = i6 + (i7 << 4) + -16 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i10 >> 2] = i7;
 if (!i7) {
  do if (!i3) {
   HEAP32[i12 >> 2] = 0;
   i1 = _ft_mem_realloc(i11, 16, 0, 8, i2, i12) | 0;
   HEAP32[i8 + 20 >> 2] = i1;
   i2 = HEAP32[i12 >> 2] | 0;
   if (!i2) {
    HEAP32[i9 >> 2] = 8;
    break;
   }
   i14 = i2;
   STACKTOP = i15;
   return i14 | 0;
  } while (0);
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i10 >> 2] = 1;
  i6 = i1;
 } else i6 = i1 + (i7 << 4) + -16 | 0;
 i4 = i6 + 4 | 0;
 i2 = ((HEAP32[i4 >> 2] | 0) + 7 | 0) >>> 3;
 i1 = (i5 + 7 | 0) >>> 3;
 HEAP32[i12 >> 2] = 0;
 do if (i1 >>> 0 > i2 >>> 0) {
  i3 = i1 + 7 & 1073741816;
  i10 = i6 + 8 | 0;
  i1 = _ft_mem_realloc(i11, 1, i2, i3, HEAP32[i10 >> 2] | 0, i12) | 0;
  HEAP32[i10 >> 2] = i1;
  i2 = HEAP32[i12 >> 2] | 0;
  if (!i2) {
   HEAP32[i4 >> 2] = i3 << 3;
   break;
  }
  i14 = i2;
  STACKTOP = i15;
  return i14 | 0;
 } else i1 = HEAP32[i6 + 8 >> 2] | 0; while (0);
 HEAP32[i6 >> 2] = i5;
 if (!i5) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i8 = 128;
 i2 = 128 >>> (i14 & 7);
 i7 = i13 + (i14 >>> 3) | 0;
 while (1) {
  HEAP8[i1 >> 0] = (((HEAPU8[i7 >> 0] | 0) & i2 | 0) == 0 ? 0 : i8) | (HEAPU8[i1 >> 0] | 0) & (i8 ^ 255);
  i3 = i2 >> 1;
  i6 = (i3 | 0) == 0;
  i2 = i8 >> 1;
  i4 = (i2 | 0) == 0;
  i5 = i5 + -1 | 0;
  if (!i5) {
   i1 = 0;
   break;
  } else {
   i8 = i4 ? 128 : i2;
   i1 = i4 ? i1 + 1 | 0 : i1;
   i2 = i6 ? 128 : i3;
   i7 = i6 ? i7 + 1 | 0 : i7;
  }
 }
 STACKTOP = i15;
 return i1 | 0;
}

function _process_karaoke_effects(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i18 = i20;
 i16 = i14 + 168 | 0;
 i15 = HEAP32[i14 + 208 >> 2] | 0;
 i15 = _i64Subtract(HEAP32[i16 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0) | 0;
 i16 = i14 + 684 | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 if ((i1 | 0) < 0) {
  STACKTOP = i20;
  return;
 }
 i17 = i14 + 680 | 0;
 i12 = 0;
 i2 = 0;
 i13 = 0;
 while (1) {
  i3 = HEAP32[i17 >> 2] | 0;
  i11 = i3 + (i13 * 344 | 0) | 0;
  if ((i13 | 0) == (i1 | 0)) i19 = 5; else if (!(HEAP32[i3 + (i13 * 344 | 0) + 120 >> 2] | 0)) i3 = i12; else i19 = 5;
  L8 : do if ((i19 | 0) == 5) {
   i19 = 0;
   if (!i12) i3 = i11; else {
    i10 = i11 + -344 | 0;
    i6 = (HEAP32[i12 + 128 >> 2] | 0) + i2 | 0;
    i8 = HEAP32[i12 + 124 >> 2] | 0;
    i2 = i6 + i8 | 0;
    i9 = i12 >>> 0 > i10 >>> 0;
    if (i9) {
     i4 = -1e6;
     i3 = 1e6;
    } else {
     i3 = 1e6;
     i5 = i12;
     i4 = -1e6;
     do {
      i7 = HEAP32[i5 + 64 >> 2] | 0;
      i21 = (HEAP32[i5 + 48 >> 2] | 0) + 32 + i7 >> 6;
      i3 = (i3 | 0) > (i21 | 0) ? i21 : i3;
      i7 = (HEAP32[i5 + 56 >> 2] | 0) + 32 + i7 >> 6;
      i4 = (i4 | 0) > (i7 | 0) ? i4 : i7;
      i5 = i5 + 344 | 0;
     } while (i5 >>> 0 <= i10 >>> 0);
    }
    i5 = i15 - i6 | 0;
    i7 = i12 + 120 | 0;
    i6 = HEAP32[i7 >> 2] | 0;
    switch (i6 | 0) {
    case 3:
    case 1:
     {
      i4 = (i5 | 0) > -1 ? i4 + 1 | 0 : i3;
      break;
     }
    case 2:
     {
      i4 = ~~(+(i3 | 0) + +(i5 | 0) / +(i8 | 0) * +(i4 - i3 | 0));
      break;
     }
    default:
     {
      _ass_msg(HEAP32[i14 >> 2] | 0, 1, 359923, i18);
      i3 = i11;
      i1 = HEAP32[i16 >> 2] | 0;
      break L8;
     }
    }
    if (!i9) {
     HEAP32[i12 + 120 >> 2] = i6;
     HEAP32[i12 + 124 >> 2] = i4 - ((HEAP32[i12 + 64 >> 2] | 0) + 32 >> 6);
     i3 = i12 + 344 | 0;
     if (i3 >>> 0 <= i10 >>> 0) do {
      HEAP32[i3 + 120 >> 2] = HEAP32[i7 >> 2];
      HEAP32[i3 + 124 >> 2] = i4 - ((HEAP32[i3 + 64 >> 2] | 0) + 32 >> 6);
      i3 = i3 + 344 | 0;
     } while (i3 >>> 0 <= i10 >>> 0);
    }
    HEAP8[i12 + 116 >> 0] = 1;
    i3 = i11;
   }
  } while (0);
  if ((i13 | 0) < (i1 | 0)) {
   i12 = i3;
   i13 = i13 + 1 | 0;
  } else break;
 }
 STACKTOP = i20;
 return;
}

function _ass_cache_get(i10, i11, i12) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0;
 i13 = HEAP32[i10 + 16 >> 2] | 0;
 i7 = (HEAP32[i13 + 20 >> 2] | 0) + 39 & -8;
 i9 = i13 + 16 | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 255](i11, HEAP32[i9 >> 2] | 0) | 0;
 i3 = (i3 >>> 0) % ((HEAP32[i10 >> 2] | 0) >>> 0) | 0;
 i6 = i10 + 4 | 0;
 i1 = HEAP32[(HEAP32[i6 >> 2] | 0) + (i3 << 2) >> 2] | 0;
 L1 : do if (i1 | 0) {
  i2 = i13 + 4 | 0;
  i5 = i1;
  while (1) {
   if (FUNCTION_TABLE_iiii[HEAP32[i2 >> 2] & 127](i11, i5 + i7 | 0, HEAP32[i9 >> 2] | 0) | 0) break;
   i1 = HEAP32[i5 + 8 >> 2] | 0;
   if (!i1) break L1; else i5 = i1;
  }
  if (!(HEAP32[i5 + 24 >> 2] | 0)) ___assert_fail(357627, 354776, 372, 357638);
  i4 = i5 + 20 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) {
   i1 = i5 + 28 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
   i1 = i5 + 16 | 0;
   i8 = 10;
  } else {
   i1 = i5 + 16 | 0;
   i3 = HEAP32[i1 >> 2] | 0;
   if (i3 | 0) {
    HEAP32[i3 + 20 >> 2] = i2;
    HEAP32[HEAP32[i4 >> 2] >> 2] = i3;
    i8 = 10;
   }
  }
  if ((i8 | 0) == 10) {
   i8 = i10 + 12 | 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = i5;
   HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i8 >> 2] = i1;
   HEAP32[i1 >> 2] = 0;
  }
  i10 = i10 + 24 | 0;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  FUNCTION_TABLE_iiii[HEAP32[i13 + 8 >> 2] & 127](0, i11, HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[i12 >> 2] = i5 + 32;
  i13 = i5 + 28 | 0;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  i13 = 1;
  return i13 | 0;
 } while (0);
 i4 = i10 + 28 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 i4 = _malloc((HEAP32[i9 >> 2] | 0) + i7 | 0) | 0;
 i2 = HEAP32[i13 + 8 >> 2] | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (!i4) {
  FUNCTION_TABLE_iiii[i2 & 127](0, i11, i1) | 0;
  HEAP32[i12 >> 2] = 0;
  i13 = 0;
  return i13 | 0;
 }
 HEAP32[i4 + 24 >> 2] = 0;
 HEAP32[i4 >> 2] = i10;
 HEAP32[i4 + 4 >> 2] = i13;
 if (!(FUNCTION_TABLE_iiii[i2 & 127](i4 + i7 | 0, i11, i1) | 0)) {
  _free(i4);
  HEAP32[i12 >> 2] = 0;
  i13 = 0;
  return i13 | 0;
 }
 HEAP32[i12 >> 2] = i4 + 32;
 i2 = (HEAP32[i6 >> 2] | 0) + (i3 << 2) | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i1 = i4 + 8 | 0;
 if (i3 | 0) HEAP32[i3 + 12 >> 2] = i1;
 HEAP32[i4 + 12 >> 2] = i2;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i2 >> 2] = i4;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 1;
 i13 = 0;
 return i13 | 0;
}

function _FT_Outline_New_Internal(i9, i5, i7, i10) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0;
 if (!((i9 | 0) != 0 & (i10 | 0) != 0)) {
  i10 = 6;
  return i10 | 0;
 };
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 if ((i7 | 0) < 0 | i7 >>> 0 > i5 >>> 0) {
  i10 = 6;
  return i10 | 0;
 }
 if (i5 >>> 0 > 32767) {
  i10 = 10;
  return i10 | 0;
 }
 do if (!i5) {
  i2 = i10 + 4 | 0;
  HEAP32[i2 >> 2] = 0;
  i1 = 0;
  i6 = i2;
  i8 = 11;
 } else {
  i1 = i5 << 3;
  i2 = FUNCTION_TABLE_iii[HEAP32[i9 + 4 >> 2] & 255](i9, i1) | 0;
  if (!i2) {
   i2 = i10 + 4 | 0;
   i5 = 64;
   i3 = i2;
   i1 = i2;
   break;
  }
  _memset(i2 | 0, 0, i1 | 0) | 0;
  _memset(i2 | 0, 0, i1 | 0) | 0;
  i4 = i10 + 4 | 0;
  HEAP32[i4 >> 2] = i2;
  i1 = FUNCTION_TABLE_iii[HEAP32[i9 + 4 >> 2] & 255](i9, i5) | 0;
  if (!i1) {
   i5 = 64;
   i3 = i10 + 8 | 0;
   i1 = i4;
   i2 = i4;
   break;
  } else {
   _memset(i1 | 0, 0, i5 | 0) | 0;
   _memset(i1 | 0, 0, i5 | 0) | 0;
   i6 = i4;
   i2 = i4;
   i8 = 11;
   break;
  }
 } while (0);
 L19 : do if ((i8 | 0) == 11) {
  HEAP32[i10 + 8 >> 2] = i1;
  do if (!i7) i1 = 0; else {
   if ((i7 | 0) > 1073741823) i1 = 10; else {
    i3 = i7 << 1;
    i4 = (i7 | 0) > 0;
    if (i4) {
     i1 = FUNCTION_TABLE_iii[HEAP32[i9 + 4 >> 2] & 255](i9, i3) | 0;
     if (!i1) i1 = 64; else {
      _memset(i1 | 0, 0, i3 | 0) | 0;
      if (!i4) break;
      _memset(i1 | 0, 0, i3 | 0) | 0;
      break;
     }
    } else i1 = 6;
   }
   i5 = i1;
   i3 = i10 + 12 | 0;
   i1 = i6;
   break L19;
  } while (0);
  HEAP32[i10 + 12 >> 2] = i1;
  HEAP16[i10 + 2 >> 1] = i5;
  HEAP16[i10 >> 1] = i7;
  i10 = i10 + 16 | 0;
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1;
  i10 = 0;
  return i10 | 0;
 } while (0);
 HEAP32[i3 >> 2] = 0;
 i8 = i10 + 16 | 0;
 HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 1;
 i1 = HEAP32[i1 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vii[HEAP32[i9 + 8 >> 2] & 63](i9, i1);
 HEAP32[i2 >> 2] = 0;
 i1 = i10 + 8 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i9 + 8 >> 2] & 63](i9, i2);
 HEAP32[i1 >> 2] = 0;
 i1 = HEAP32[i10 + 12 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vii[HEAP32[i9 + 8 >> 2] & 63](i9, i1);
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 i10 = i5;
 return i10 | 0;
}

function _decode_font(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i12;
 i9 = i1 + 84 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i11 = i1 + 88 | 0;
 HEAP32[i2 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2];
 _ass_msg(i3, 6, 356877, i2);
 i2 = HEAP32[i11 >> 2] | 0;
 i3 = HEAP32[i2 + 16 >> 2] | 0;
 i7 = (i3 | 0) % 4 | 0;
 if ((i7 | 0) == 1) {
  _ass_msg(HEAP32[i9 >> 2] | 0, 1, 356905, i12 + 8 | 0);
  i1 = 0;
 } else {
  i6 = (i3 | 0) / 4 | 0;
  i10 = ((i7 | 0) > 1 ? i7 + -1 | 0 : 0) + (i6 * 3 | 0) | 0;
  i1 = _malloc(i10) | 0;
  if (!i1) i1 = 0; else {
   i2 = HEAP32[i2 + 8 >> 2] | 0;
   if ((i3 | 0) > 3) {
    i3 = i2;
    i4 = i1;
    i5 = 0;
    while (1) {
     i2 = ((HEAPU8[i3 + 1 >> 0] | 0) << 12) + 126976 | 0;
     i14 = ((HEAPU8[i3 + 2 >> 0] | 0) << 6) + 1984 | 0;
     i13 = (HEAPU8[i3 + 3 >> 0] | 0) + 31 & 63 | i14;
     HEAP8[i4 >> 0] = (i2 & 196608 | ((HEAPU8[i3 >> 0] | 0) << 18) + 8126464) >>> 16;
     HEAP8[i4 + 1 >> 0] = (i14 & 3840 | i2) >>> 8;
     i2 = i4 + 3 | 0;
     HEAP8[i4 + 2 >> 0] = i13;
     i5 = i5 + 1 | 0;
     i3 = i3 + 4 | 0;
     if ((i5 | 0) >= (i6 | 0)) {
      i4 = i3;
      break;
     } else i4 = i2;
    }
   } else {
    i4 = i2;
    i2 = i1;
   }
   switch (i7 | 0) {
   case 2:
    {
     i6 = 2;
     i8 = 8;
     break;
    }
   case 3:
    {
     i6 = 3;
     i8 = 8;
     break;
    }
   default:
    {}
   }
   if ((i8 | 0) == 8) {
    i5 = 0;
    i3 = 0;
    do {
     i5 = ((HEAPU8[i4 + i3 >> 0] | 0) + 31 & 63) << (3 - i3 | 0) * 6 | i5;
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) != (i6 | 0));
    i3 = i2 + 1 | 0;
    HEAP8[i2 >> 0] = i5 >>> 16;
    i4 = i2 + 2 | 0;
    if ((i6 | 0) == 2) i2 = i3; else {
     HEAP8[i3 >> 0] = i5 >>> 8;
     if ((i6 | 0) == 3) i2 = i4; else {
      HEAP8[i4 >> 0] = i5;
      i2 = i2 + 3 | 0;
     }
    }
   }
   if ((i2 - i1 | 0) != (i10 | 0)) ___assert_fail(356927, 355285, 707, 356974);
   i2 = HEAP32[i9 >> 2] | 0;
   if (HEAP32[i2 + 4 >> 2] | 0) _ass_add_font(i2, HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0, i1, i10);
  }
 }
 _free(i1);
 _free(HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0);
 _free(HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] | 0);
 i14 = (HEAP32[i11 >> 2] | 0) + 4 | 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i14 + 12 >> 2] = 0;
 STACKTOP = i12;
 return;
}

function _tt_delta_interpolate(i14, i15, i1, i2, i9, i12) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i13 = 0;
 if ((i14 | 0) > (i15 | 0)) return;
 i11 = (HEAP32[i9 + (i1 << 3) >> 2] | 0) > (HEAP32[i9 + (i2 << 3) >> 2] | 0);
 i13 = i11 ? i1 : i2;
 i11 = i11 ? i2 : i1;
 i4 = HEAP32[i9 + (i11 << 3) >> 2] | 0;
 i5 = HEAP32[i9 + (i13 << 3) >> 2] | 0;
 i6 = HEAP32[i12 + (i11 << 3) >> 2] | 0;
 i1 = HEAP32[i12 + (i13 << 3) >> 2] | 0;
 i7 = i6 - i4 | 0;
 i8 = i1 - i5 | 0;
 if ((i5 | 0) == (i4 | 0) | (i1 | 0) == (i6 | 0)) {
  i2 = i14;
  while (1) {
   i1 = HEAP32[i9 + (i2 << 3) >> 2] | 0;
   if ((i1 | 0) > (i4 | 0)) i1 = (i1 | 0) < (i5 | 0) ? i6 : i1 + i8 | 0; else i1 = i1 + i7 | 0;
   HEAP32[i12 + (i2 << 3) >> 2] = i1;
   if ((i2 | 0) < (i15 | 0)) i2 = i2 + 1 | 0; else break;
  }
 } else {
  i3 = _FT_DivFix(i1 - i6 | 0, i5 - i4 | 0) | 0;
  i2 = i14;
  while (1) {
   i1 = HEAP32[i9 + (i2 << 3) >> 2] | 0;
   do if ((i1 | 0) > (i4 | 0)) if ((i1 | 0) < (i5 | 0)) {
    i1 = (_FT_MulFix(i1 - i4 | 0, i3) | 0) + i6 | 0;
    break;
   } else {
    i1 = i1 + i8 | 0;
    break;
   } else i1 = i1 + i7 | 0; while (0);
   HEAP32[i12 + (i2 << 3) >> 2] = i1;
   if ((i2 | 0) < (i15 | 0)) i2 = i2 + 1 | 0; else break;
  }
 }
 i10 = i9 + 4 | 0;
 i9 = i12 + 4 | 0;
 i6 = (HEAP32[i10 + (i11 << 3) >> 2] | 0) > (HEAP32[i10 + (i13 << 3) >> 2] | 0);
 i1 = i6 ? i11 : i13;
 i6 = i6 ? i13 : i11;
 i4 = HEAP32[i10 + (i6 << 3) >> 2] | 0;
 i5 = HEAP32[i10 + (i1 << 3) >> 2] | 0;
 i6 = HEAP32[i9 + (i6 << 3) >> 2] | 0;
 i1 = HEAP32[i9 + (i1 << 3) >> 2] | 0;
 i7 = i6 - i4 | 0;
 i8 = i1 - i5 | 0;
 if ((i5 | 0) == (i4 | 0) | (i1 | 0) == (i6 | 0)) {
  i2 = i14;
  while (1) {
   i1 = HEAP32[i10 + (i2 << 3) >> 2] | 0;
   if ((i1 | 0) > (i4 | 0)) i1 = (i1 | 0) < (i5 | 0) ? i6 : i1 + i8 | 0; else i1 = i1 + i7 | 0;
   HEAP32[i9 + (i2 << 3) >> 2] = i1;
   if ((i2 | 0) < (i15 | 0)) i2 = i2 + 1 | 0; else break;
  }
  return;
 }
 i3 = _FT_DivFix(i1 - i6 | 0, i5 - i4 | 0) | 0;
 i2 = i14;
 while (1) {
  i1 = HEAP32[i10 + (i2 << 3) >> 2] | 0;
  do if ((i1 | 0) > (i4 | 0)) if ((i1 | 0) < (i5 | 0)) {
   i1 = (_FT_MulFix(i1 - i4 | 0, i3) | 0) + i6 | 0;
   break;
  } else {
   i1 = i1 + i8 | 0;
   break;
  } else i1 = i1 + i7 | 0; while (0);
  HEAP32[i9 + (i2 << 3) >> 2] = i1;
  if ((i2 | 0) < (i15 | 0)) i2 = i2 + 1 | 0; else break;
 }
 return;
}

function _FT_Vector_Transform(i12, i10) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0;
 if (!((i12 | 0) != 0 & (i10 | 0) != 0)) return;
 i6 = HEAP32[i12 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i8 = (i6 | 0) == 0;
 if (i8 | (i1 | 0) == 65536) i7 = i6; else {
  i3 = i6 >> 31;
  i2 = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
  i4 = (i1 | 0) < 0;
  i1 = i4 ? 0 - i1 | 0 : i1;
  if (((i1 >>> 8) + i2 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else {
   i11 = i2 & 65535;
   i1 = (Math_imul(i1 >>> 16, i11) | 0) + (Math_imul(i2 >>> 16, i1) | 0) + (((Math_imul(i1 & 65535, i11) | 0) + 32768 | 0) >>> 16) | 0;
  }
  i7 = ((i4 ? 0 - (i3 | 1) | 0 : i3) | 0) < 0 ? 0 - i1 | 0 : i1;
 }
 i11 = i12 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = HEAP32[i10 + 4 >> 2] | 0;
 i9 = (i1 | 0) == 0;
 if (i9 | (i2 | 0) == 65536) i2 = i1; else {
  i4 = i1 >> 31;
  i3 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i5 = (i2 | 0) < 0;
  i2 = i5 ? 0 - i2 | 0 : i2;
  if (((i2 >>> 8) + i3 | 0) >>> 0 < 8191) i2 = ((Math_imul(i2, i3) | 0) + 32768 | 0) >>> 16; else {
   i13 = i3 & 65535;
   i2 = (Math_imul(i2 >>> 16, i13) | 0) + (Math_imul(i3 >>> 16, i2) | 0) + (((Math_imul(i2 & 65535, i13) | 0) + 32768 | 0) >>> 16) | 0;
  }
  i2 = ((i5 ? 0 - (i4 | 1) | 0 : i4) | 0) < 0 ? 0 - i2 | 0 : i2;
 }
 i7 = i2 + i7 | 0;
 i2 = HEAP32[i10 + 8 >> 2] | 0;
 if (!(i8 | (i2 | 0) == 65536)) {
  i5 = i6 >> 31;
  i3 = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
  i4 = (i2 | 0) < 0;
  i2 = i4 ? 0 - i2 | 0 : i2;
  if (((i2 >>> 8) + i3 | 0) >>> 0 < 8191) i2 = ((Math_imul(i2, i3) | 0) + 32768 | 0) >>> 16; else {
   i13 = i3 & 65535;
   i2 = (Math_imul(i2 >>> 16, i13) | 0) + (Math_imul(i3 >>> 16, i2) | 0) + (((Math_imul(i2 & 65535, i13) | 0) + 32768 | 0) >>> 16) | 0;
  }
  i6 = ((i4 ? 0 - (i5 | 1) | 0 : i5) | 0) < 0 ? 0 - i2 | 0 : i2;
 }
 i3 = HEAP32[i10 + 12 >> 2] | 0;
 if (!(i9 | (i3 | 0) == 65536)) {
  i5 = i1 >> 31;
  i2 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i4 = (i3 | 0) < 0;
  i1 = i4 ? 0 - i3 | 0 : i3;
  if (((i1 >>> 8) + i2 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else {
   i13 = i2 & 65535;
   i1 = (Math_imul(i1 >>> 16, i13) | 0) + (Math_imul(i2 >>> 16, i1) | 0) + (((Math_imul(i1 & 65535, i13) | 0) + 32768 | 0) >>> 16) | 0;
  }
  i1 = ((i4 ? 0 - (i5 | 1) | 0 : i5) | 0) < 0 ? 0 - i1 | 0 : i1;
 }
 HEAP32[i12 >> 2] = i7;
 HEAP32[i11 >> 2] = i1 + i6;
 return;
}

function _FcDirCacheMapFd(i8, i7, i9, i10) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i12;
 i11 = i9 + 36 | 0;
 if ((HEAP32[i11 >> 2] | 0) < 32) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 };
 i1 = HEAP32[91921] | 0;
 L4 : do if (!i1) {
  while (1) {
   i1 = _malloc(28) | 0;
   _pthread_mutex_init(i1 | 0, 0) | 0;
   i2 = HEAP32[91921] | 0;
   if (!i2) HEAP32[91921] = i1;
   if (!i2) break;
   _pthread_mutex_destroy(i1 | 0) | 0;
   i1 = HEAP32[91921] | 0;
   if (i1 | 0) {
    i5 = 6;
    break L4;
   }
  }
  _pthread_mutex_lock(i1 | 0) | 0;
  _FcRandom() | 0;
 } else i5 = 6; while (0);
 if ((i5 | 0) == 6) _pthread_mutex_lock(i1 | 0) | 0;
 i1 = HEAP32[91923] | 0;
 L12 : do if (!i1) i5 = 13; else {
  i2 = HEAP32[i9 >> 2] | 0;
  i3 = i9 + 72 | 0;
  i4 = i9 + 56 | 0;
  while (1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (i2 | 0)) if ((HEAP32[i1 + 16 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) if ((HEAP32[i1 + 20 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) break;
   i1 = HEAP32[i1 + 24 >> 2] | 0;
   if (!i1) {
    i5 = 13;
    break L12;
   }
  }
  i4 = i1 + 4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  _pthread_mutex_unlock(HEAP32[91921] | 0) | 0;
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) {
   if (_FcCacheTimeValid(i8, i1, i10) | 0) if (_FcCacheDirsValid(i8, i1) | 0) {
    i11 = i1;
    STACKTOP = i12;
    return i11 | 0;
   }
   _FcCacheObjectDereference(i1);
  }
 } while (0);
 if ((i5 | 0) == 13) _pthread_mutex_unlock(HEAP32[91921] | 0) | 0;
 i1 = HEAP32[91941] | 0;
 if (!i1) {
  i1 = _getenv(351975) | 0;
  if (!i1) i1 = 3; else if (!(_FcNameBool(i1, i6) | 0)) i1 = 3; else i1 = HEAP32[i6 >> 2] | 0 ? 1 : 2;
  if (!(HEAP32[91941] | 0)) HEAP32[91941] = i1;
 }
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = _malloc(i1) | 0;
 if (!i2) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = _read(i7, i2, i1) | 0;
 if ((i1 | 0) != (HEAP32[i11 >> 2] | 0)) {
  _free(i2);
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 if ((HEAP32[i2 >> 2] | 0) == -66913276) if ((HEAP32[i2 + 4 >> 2] | 0) >= 6) if ((HEAP32[i2 + 8 >> 2] | 0) == (i1 | 0)) if (_FcCacheTimeValid(i8, i2, i10) | 0) if (_FcCacheDirsValid(i8, i2) | 0) if (_FcCacheInsert(i2, i9) | 0) {
  HEAP32[i2 >> 2] = -66913275;
  i11 = i2;
  STACKTOP = i12;
  return i11 | 0;
 }
 _free(i2);
 i11 = 0;
 STACKTOP = i12;
 return i11 | 0;
}

function _cf2_glyphpath_computeOffset(i8, i4, i5, i1, i2, i9, i10) {
 i8 = i8 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i3 = 0, i6 = 0, i7 = 0;
 i3 = i1 - i4 | 0;
 i1 = i2 - i5 | 0;
 i6 = (HEAP8[(HEAP32[i8 >> 2] | 0) + 192 >> 0] | 0) == 0;
 i7 = i6 ? i3 : 0 - i3 | 0;
 i6 = i6 ? i1 : 0 - i1 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 if (!(HEAP8[i8 + 11666 >> 0] | 0)) return;
 i5 = (Math_imul(i1 >> 16, i4 >> 16) | 0) - (Math_imul(i3 >> 16, i5 >> 16) | 0) | 0;
 i1 = (HEAP32[i8 + 4 >> 2] | 0) + 16 | 0;
 HEAP32[i1 >> 2] = i5 + (HEAP32[i1 >> 2] | 0);
 i1 = (i6 | 0) > -1;
 do if ((i7 | 0) > -1) if (i1) {
  if ((i7 | 0) > (i6 << 1 | 0)) {
   HEAP32[i9 >> 2] = 0;
   i1 = 0;
   break;
  }
  i1 = HEAP32[i8 + 11688 >> 2] | 0;
  if ((i6 | 0) > (i7 << 1 | 0)) {
   HEAP32[i9 >> 2] = i1;
   i1 = HEAP32[i8 + 11692 >> 2] | 0;
   break;
  } else {
   i1 = _FT_MulFix(45875, i1) | 0;
   HEAP32[i9 >> 2] = i1;
   i1 = _FT_MulFix(19661, HEAP32[i8 + 11692 >> 2] | 0) | 0;
   break;
  }
 } else {
  if ((i7 | 0) > (Math_imul(i6, -2) | 0)) {
   HEAP32[i9 >> 2] = 0;
   i1 = 0;
   break;
  }
  i1 = HEAP32[i8 + 11688 >> 2] | 0;
  if ((i7 << 1 | 0) < (0 - i6 | 0)) {
   HEAP32[i9 >> 2] = 0 - i1;
   i1 = HEAP32[i8 + 11692 >> 2] | 0;
   break;
  } else {
   i1 = _FT_MulFix(-45874, i1) | 0;
   HEAP32[i9 >> 2] = i1;
   i1 = _FT_MulFix(19661, HEAP32[i8 + 11692 >> 2] | 0) | 0;
   break;
  }
 } else {
  i2 = 0 - i7 | 0;
  if (i1) {
   if ((i6 << 1 | 0) < (i2 | 0)) {
    HEAP32[i9 >> 2] = 0;
    i1 = HEAP32[i8 + 11692 >> 2] << 1;
    break;
   }
   i7 = (i6 | 0) > (Math_imul(i7, -2) | 0);
   i1 = HEAP32[i8 + 11688 >> 2] | 0;
   if (i7) {
    HEAP32[i9 >> 2] = i1;
    i1 = HEAP32[i8 + 11692 >> 2] | 0;
    break;
   } else {
    i1 = _FT_MulFix(45875, i1) | 0;
    HEAP32[i9 >> 2] = i1;
    i1 = _FT_MulFix(111411, HEAP32[i8 + 11692 >> 2] | 0) | 0;
    break;
   }
  } else {
   if ((Math_imul(i6, -2) | 0) < (i2 | 0)) {
    HEAP32[i9 >> 2] = 0;
    i1 = HEAP32[i8 + 11692 >> 2] << 1;
    break;
   }
   i7 = (Math_imul(i7, -2) | 0) < (0 - i6 | 0);
   i1 = HEAP32[i8 + 11688 >> 2] | 0;
   if (i7) {
    HEAP32[i9 >> 2] = 0 - i1;
    i1 = HEAP32[i8 + 11692 >> 2] | 0;
    break;
   } else {
    i1 = _FT_MulFix(-45874, i1) | 0;
    HEAP32[i9 >> 2] = i1;
    i1 = _FT_MulFix(111411, HEAP32[i8 + 11692 >> 2] | 0) | 0;
    break;
   }
  }
 } while (0);
 HEAP32[i10 >> 2] = i1;
 return;
}

function _ft_raster1_render(i11, i14, i1, i2) {
 i11 = i11 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i12 = i16 + 64 | 0;
 i3 = i16 + 48 | 0;
 i13 = i16;
 i15 = i14 + 72 | 0;
 if ((HEAP32[i15 >> 2] | 0) != (HEAP32[i11 + 16 >> 2] | 0)) {
  HEAP32[i12 >> 2] = 6;
  i15 = 6;
  STACKTOP = i16;
  return i15 | 0;
 }
 if ((i1 | 0) != 2) {
  i15 = 19;
  STACKTOP = i16;
  return i15 | 0;
 }
 i10 = i14 + 108 | 0;
 if (i2 | 0) _FT_Outline_Translate(i10, HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0);
 _FT_Outline_Get_CBox(i10, i3);
 i2 = HEAP32[i3 >> 2] | 0;
 i9 = i2 + 32 & -64;
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 i5 = i4 + 32 & -64;
 i7 = HEAP32[i3 + 8 >> 2] | 0;
 i1 = HEAP32[i3 + 12 >> 2] | 0;
 i3 = i1 + 32 & -64;
 i8 = (i7 + 32 & -64) - i9 >> 6;
 i6 = (i8 | 0) == 0;
 i2 = i2 & -64;
 i9 = i6 ? i2 : i9;
 i8 = i6 ? (i7 + 63 & -64) - i2 >> 6 : i8;
 i2 = i3 - i5 >> 6;
 if (!i2) {
  i5 = i4 & -64;
  i3 = i1 + 63 & -64;
  i2 = i3 - i5 >> 6;
 }
 if ((i2 | i8) >>> 0 > 65535) {
  HEAP32[i12 >> 2] = 6;
  i15 = 6;
  STACKTOP = i16;
  return i15 | 0;
 }
 i6 = i14 + 76 | 0;
 i4 = HEAP32[i11 + 8 >> 2] | 0;
 i7 = i14 + 156 | 0;
 i1 = i14 + 88 | 0;
 if (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] & 1 | 0) {
  _ft_mem_free(i4, HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  i17 = (HEAP32[i7 >> 2] | 0) + 4 | 0;
  HEAP32[i17 >> 2] = HEAP32[i17 >> 2] & -2;
 }
 i17 = (i8 + 15 | 0) >>> 4 << 1;
 HEAP8[i14 + 94 >> 0] = 1;
 HEAP32[i14 + 80 >> 2] = i8;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i14 + 84 >> 2] = i17;
 i17 = _ft_mem_realloc(i4, i2, 0, i17, 0, i12) | 0;
 HEAP32[i1 >> 2] = i17;
 i1 = HEAP32[i12 >> 2] | 0;
 if (i1 | 0) {
  i17 = i1;
  STACKTOP = i16;
  return i17 | 0;
 }
 i1 = (HEAP32[i7 >> 2] | 0) + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 _FT_Outline_Translate(i10, 0 - i9 | 0, 0 - i5 | 0);
 HEAP32[i13 >> 2] = i6;
 HEAP32[i13 + 4 >> 2] = i10;
 HEAP32[i13 + 8 >> 2] = 0;
 i1 = FUNCTION_TABLE_iii[HEAP32[i11 + 56 >> 2] & 255](HEAP32[i11 + 52 >> 2] | 0, i13) | 0;
 HEAP32[i12 >> 2] = i1;
 _FT_Outline_Translate(i10, i9, i5);
 i1 = HEAP32[i12 >> 2] | 0;
 if (i1 | 0) {
  i17 = i1;
  STACKTOP = i16;
  return i17 | 0;
 }
 HEAP32[i15 >> 2] = 1651078259;
 HEAP32[i14 + 100 >> 2] = i9 >> 6;
 HEAP32[i14 + 104 >> 2] = i3 >> 6;
 i17 = 0;
 STACKTOP = i16;
 return i17 | 0;
}

function _FT_Stream_OpenLZW(i8, i5) {
 i8 = i8 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i11 + 4 | 0;
 i10 = i11;
 if (!((i8 | 0) != 0 & (i5 | 0) != 0)) {
  HEAP32[i10 >> 2] = 40;
  i10 = 40;
  STACKTOP = i11;
  return i10 | 0;
 }
 i7 = i5 + 28 | 0;
 i9 = HEAP32[i7 >> 2] | 0;
 i1 = _FT_Stream_Seek(i5, 0) | 0;
 if (!i1) {
  i1 = _FT_Stream_Read(i5, i6, 2) | 0;
  if (!i1) if ((HEAP8[i6 >> 0] | 0) == 31) {
   i4 = i6 + 1 | 0;
   if ((HEAP8[i4 >> 0] | 0) == -99) {
    HEAP32[i10 >> 2] = 0;
    i1 = i8;
    i2 = i1 + 40 | 0;
    do {
     HEAP32[i1 >> 2] = 0;
     i1 = i1 + 4 | 0;
    } while ((i1 | 0) < (i2 | 0));
    i2 = i8 + 28 | 0;
    HEAP32[i2 >> 2] = i9;
    i3 = _ft_mem_alloc(i9, 4292, i10) | 0;
    i1 = HEAP32[i10 >> 2] | 0;
    do if (!i1) {
     HEAP32[i3 + 4 >> 2] = i8;
     HEAP32[i3 >> 2] = i5;
     HEAP32[i3 + 8 >> 2] = HEAP32[i2 >> 2];
     i1 = i3 + 4280 | 0;
     HEAP32[i3 + 4288 >> 2] = i1;
     HEAP32[i3 + 4284 >> 2] = i1;
     HEAP32[i1 >> 2] = 0;
     i1 = _FT_Stream_Seek(i5, 0) | 0;
     if (!i1) {
      i1 = _FT_Stream_Read(i5, i6, 2) | 0;
      if (!i1) if ((HEAP8[i6 >> 0] | 0) == 31 & (HEAP8[i4 >> 0] | 0) == -99) {
       _memset(i3 + 20 | 0, 0, 156) | 0;
       HEAP32[i3 + 176 >> 2] = i5;
       HEAP32[i3 + 180 >> 2] = HEAP32[i7 >> 2];
       HEAP32[i3 + 88 >> 2] = 0;
       HEAP32[i3 + 92 >> 2] = 0;
       HEAP32[i3 + 96 >> 2] = 0;
       HEAP32[i3 + 100 >> 2] = i3 + 112;
       HEAP32[i3 + 108 >> 2] = 64;
       HEAP32[i3 + 16 >> 2] = 0;
       HEAP32[i3 + 36 >> 2] = 0;
       HEAP32[i3 + 40 >> 2] = 0;
       HEAP8[i3 + 44 >> 0] = 0;
       HEAP32[i3 + 48 >> 2] = 0;
       HEAP32[i3 + 104 >> 2] = 0;
       HEAP32[i3 + 64 >> 2] = 9;
       HEAP32[i3 + 12 >> 2] = 0;
       HEAP32[i10 >> 2] = 0;
       HEAP32[i8 + 12 >> 2] = i3;
       i1 = 0;
       break;
      } else i1 = 3;
     }
     HEAP32[i10 >> 2] = i1;
     _ft_mem_free(i9, i3);
     i10 = HEAP32[i10 >> 2] | 0;
     STACKTOP = i11;
     return i10 | 0;
    } while (0);
    HEAP32[i8 + 4 >> 2] = 2147483647;
    HEAP32[i8 + 8 >> 2] = 0;
    HEAP32[i8 >> 2] = 0;
    HEAP32[i8 + 20 >> 2] = 65;
    HEAP32[i8 + 24 >> 2] = 60;
    i10 = i1;
    STACKTOP = i11;
    return i10 | 0;
   } else i1 = 3;
  } else i1 = 3;
 }
 HEAP32[i10 >> 2] = i1;
 i10 = i1;
 STACKTOP = i11;
 return i10 | 0;
}

function _ps_parser_load_field_table(i16, i7, i13, i14, i1) {
 i16 = i16 | 0;
 i7 = i7 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 i4 = i15 + 436 | 0;
 i6 = i15 + 424 | 0;
 i11 = i15 + 40 | 0;
 i12 = i15;
 i1 = i12;
 i2 = i7;
 i3 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 i1 = i12 + 8 | 0;
 HEAP32[i1 >> 2] = 2;
 i5 = i7 + 8 | 0;
 switch (HEAP32[i5 >> 2] | 0) {
 case 7:
 case 10:
  {
   HEAP32[i1 >> 2] = 3;
   break;
  }
 default:
  {}
 }
 _ps_parser_to_token(i16, i4);
 if ((HEAP32[i4 + 8 >> 2] | 0) != 3) {
  i16 = 162;
  STACKTOP = i15;
  return i16 | 0;
 }
 i8 = HEAP32[i16 >> 2] | 0;
 i9 = i16 + 8 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 i3 = i11 + 384 | 0;
 i2 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
 HEAP32[i16 >> 2] = i2;
 i4 = (HEAP32[i4 + 4 >> 2] | 0) + -1 | 0;
 HEAP32[i9 >> 2] = i4;
 L8 : do if (i2 >>> 0 < i4 >>> 0) {
  i2 = i6 + 8 | 0;
  i1 = i11;
  while (1) {
   _ps_parser_to_token(i16, i6);
   if (!(HEAP32[i2 >> 2] | 0)) break;
   if (i1 >>> 0 < i3 >>> 0) {
    HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   }
   i1 = i1 + 12 | 0;
   if ((HEAP32[i16 >> 2] | 0) >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) break L8;
  }
 } else i1 = i11; while (0);
 i6 = i1 - i11 | 0;
 i1 = (i6 | 0) / 12 | 0;
 HEAP32[i16 >> 2] = i8;
 HEAP32[i9 >> 2] = i10;
 if ((i6 | 0) < 0) {
  i16 = 162;
  STACKTOP = i15;
  return i16 | 0;
 }
 i2 = HEAP32[i7 + 24 >> 2] | 0;
 i2 = i1 >>> 0 > i2 >>> 0 ? i2 : i1;
 if ((HEAP32[i5 >> 2] | 0) != 7) {
  i1 = HEAP32[i7 + 28 >> 2] | 0;
  if (i1 | 0) HEAP8[(HEAP32[i13 >> 2] | 0) + i1 >> 0] = i2;
 }
 L25 : do if ((i2 | 0) > 0) {
  i4 = i12 + 20 | 0;
  i5 = i12 + 16 | 0;
  i3 = i11;
  while (1) {
   HEAP32[i16 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i9 >> 2] = HEAP32[i3 + 4 >> 2];
   i1 = _ps_parser_load_field(i16, i12, i13, i14, 0) | 0;
   if (i1 | 0) break L25;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAPU8[i4 >> 0] | 0);
   if ((i2 | 0) > 1) {
    i3 = i3 + 12 | 0;
    i2 = i2 + -1 | 0;
   } else {
    i1 = 0;
    break;
   }
  }
 } else i1 = 0; while (0);
 HEAP32[i16 >> 2] = i8;
 HEAP32[i9 >> 2] = i10;
 i16 = i1;
 STACKTOP = i15;
 return i16 | 0;
}

function _FcConfigAdd(i9, i3, i6, i10, i4) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i12 + 16 | 0;
 i11 = i12 + 8 | 0;
 i8 = i12;
 i7 = (i10 | 0) == 0;
 L1 : do if (!i7) {
  i1 = i10;
  while (1) {
   i5 = i1 + 8 | 0;
   if (!(_FcObjectValidType(i4, HEAP32[i5 >> 2] | 0) | 0)) break;
   i13 = HEAP32[i1 >> 2] | 0;
   i5 = i13;
   i1 = (i5 & 1 | 0) == 0 ? i13 : (i5 & -2) + i1 | 0;
   if (!i1) break L1;
  }
  i13 = HEAP32[22811] | 0;
  i11 = _FcObjectName(i4) | 0;
  HEAP32[i2 >> 2] = i11;
  _fprintf(i13, 349351, i2) | 0;
  HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  _FcValuePrintFile(i13, i2);
  _fputc(10, i13) | 0;
  if (!(HEAP32[91917] & 4)) {
   STACKTOP = i12;
   return;
  }
  _puts(348549) | 0;
  STACKTOP = i12;
  return;
 } while (0);
 i5 = (i3 | 0) != 0;
 if (i5) i1 = HEAP32[i3 + 24 >> 2] | 0; else i1 = 0;
 if (!i7) {
  i2 = i10;
  do {
   i4 = i2 + 24 | 0;
   if ((HEAP32[i4 >> 2] | 0) == 2) HEAP32[i4 >> 2] = i1;
   i4 = HEAP32[i2 >> 2] | 0;
   i13 = i4;
   i2 = (i13 & 1 | 0) == 0 ? i4 : (i13 & -2) + i2 | 0;
  } while ((i2 | 0) != 0);
 }
 i4 = (i6 | 0) != 0;
 do if (i4) if (i5) break; else {
  i1 = i9;
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) {
    i3 = i1;
    break;
   } else i1 = i2;
  }
 } else {
  if (i5) {
   i1 = i9;
   while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if ((i2 | 0) == 0 | (i2 | 0) == (i3 | 0)) break; else i1 = i2;
   }
  } else i1 = i9;
  if (!(HEAP32[91917] & 4)) i3 = i1; else if (!(HEAP32[i1 >> 2] | 0)) {
   _puts(348560) | 0;
   i3 = i1;
  } else i3 = i1;
 } while (0);
 if (HEAP32[91917] & 4 | 0) {
  HEAP32[i8 >> 2] = i4 ? 348765 : 348757;
  _printf(348581, i8) | 0;
  _FcValueListPrintWithPosition(HEAP32[i9 >> 2] | 0, HEAP32[i3 >> 2] | 0);
  _putchar(10) | 0;
 }
 if (!i7) {
  i1 = i10;
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) break; else i1 = i2;
  }
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i3 >> 2] = i10;
 }
 if (!(HEAP32[91917] & 4)) {
  STACKTOP = i12;
  return;
 }
 HEAP32[i11 >> 2] = i4 ? 348765 : 348757;
 _printf(348597, i11) | 0;
 _FcValueListPrint(HEAP32[i9 >> 2] | 0);
 _putchar(10) | 0;
 STACKTOP = i12;
 return;
}

function _FT_Raccess_Guess(i2, i3, i4, i5, i8, i9) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = i3 + 20 | 0;
 i11 = i3 + 8 | 0;
 if (!i3) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  i12 = _raccess_guess_apple_double(i2, 0, i4, i5, i8) | 0;
  HEAP32[i9 >> 2] = i12;
  i12 = i5 + 4 | 0;
  HEAP32[i12 >> 2] = 0;
  i11 = i9 + 4 | 0;
  HEAP32[i11 >> 2] = 0;
  i12 = _raccess_guess_apple_single(i2, 0, i4, i12, i8 + 4 | 0) | 0;
  HEAP32[i11 >> 2] = i12;
  i11 = i5 + 8 | 0;
  HEAP32[i11 >> 2] = 0;
  i12 = i9 + 8 | 0;
  HEAP32[i12 >> 2] = 0;
  i11 = _raccess_guess_darwin_ufs_export(i2, 0, i4, i11, i8 + 8 | 0) | 0;
  HEAP32[i12 >> 2] = i11;
  i12 = i5 + 12 | 0;
  HEAP32[i12 >> 2] = 0;
  i11 = i9 + 12 | 0;
  HEAP32[i11 >> 2] = 0;
  i12 = _raccess_guess_darwin_newvfs(i2, 0, i4, i12, i8 + 12 | 0) | 0;
  HEAP32[i11 >> 2] = i12;
  i11 = i5 + 16 | 0;
  HEAP32[i11 >> 2] = 0;
  i12 = i9 + 16 | 0;
  HEAP32[i12 >> 2] = 0;
  i11 = _raccess_guess_darwin_hfsplus(i2, 0, i4, i11, i8 + 16 | 0) | 0;
  HEAP32[i12 >> 2] = i11;
  i12 = i5 + 20 | 0;
  HEAP32[i12 >> 2] = 0;
  i11 = i9 + 20 | 0;
  HEAP32[i11 >> 2] = 0;
  i12 = _raccess_guess_vfat(i2, 0, i4, i12, i8 + 20 | 0) | 0;
  HEAP32[i11 >> 2] = i12;
  i11 = i5 + 24 | 0;
  HEAP32[i11 >> 2] = 0;
  i12 = i9 + 24 | 0;
  HEAP32[i12 >> 2] = 0;
  i11 = _raccess_guess_linux_cap(i2, 0, i4, i11, i8 + 24 | 0) | 0;
  HEAP32[i12 >> 2] = i11;
  i12 = i5 + 28 | 0;
  HEAP32[i12 >> 2] = 0;
  i11 = i9 + 28 | 0;
  HEAP32[i11 >> 2] = 0;
  i12 = _raccess_guess_linux_double(i2, 0, i4, i12, i8 + 28 | 0) | 0;
  HEAP32[i11 >> 2] = i12;
  i11 = i5 + 32 | 0;
  HEAP32[i11 >> 2] = 0;
  i12 = i9 + 32 | 0;
  HEAP32[i12 >> 2] = 0;
  i11 = _raccess_guess_linux_netatalk(i2, 0, i4, i11, i8 + 32 | 0) | 0;
  HEAP32[i12 >> 2] = i11;
  return;
 } else i1 = 0;
 do {
  i6 = i5 + (i1 << 2) | 0;
  HEAP32[i6 >> 2] = 0;
  i7 = HEAP32[i10 >> 2] | 0;
  if (!i7) i12 = 5; else if (!(FUNCTION_TABLE_iiiii[i7 & 127](i3, 0, 0, 0) | 0)) i12 = 5; else HEAP32[i9 + (i1 << 2) >> 2] = 85;
  if ((i12 | 0) == 5) {
   i12 = 0;
   HEAP32[i11 >> 2] = 0;
   i7 = i9 + (i1 << 2) | 0;
   HEAP32[i7 >> 2] = 0;
   i6 = FUNCTION_TABLE_iiiiii[HEAP32[12512 + (i1 << 3) >> 2] & 127](i2, i3, i4, i6, i8 + (i1 << 2) | 0) | 0;
   HEAP32[i7 >> 2] = i6;
  }
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 9);
 return;
}

function _cff_make_private_dict(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 _memset(i4 | 0, 0, 196) | 0;
 i1 = HEAP8[i3 + 176 >> 0] | 0;
 HEAP8[i4 + 8 >> 0] = i1;
 i2 = i1 & 255;
 if (i1 << 24 >> 24) {
  i1 = 0;
  do {
   HEAP16[i4 + 12 + (i1 << 1) >> 1] = HEAP32[i3 + 180 + (i1 << 2) >> 2];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i2 | 0));
 }
 i1 = HEAP8[i3 + 177 >> 0] | 0;
 HEAP8[i4 + 9 >> 0] = i1;
 i2 = i1 & 255;
 if (i1 << 24 >> 24) {
  i1 = 0;
  do {
   HEAP16[i4 + 40 + (i1 << 1) >> 1] = HEAP32[i3 + 236 + (i1 << 2) >> 2];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i2 | 0));
 }
 i1 = HEAP8[i3 + 178 >> 0] | 0;
 HEAP8[i4 + 10 >> 0] = i1;
 i2 = i1 & 255;
 if (i1 << 24 >> 24) {
  i1 = 0;
  do {
   HEAP16[i4 + 60 + (i1 << 1) >> 1] = HEAP32[i3 + 276 + (i1 << 2) >> 2];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i2 | 0));
 }
 i1 = HEAP8[i3 + 179 >> 0] | 0;
 HEAP8[i4 + 11 >> 0] = i1;
 i2 = i1 & 255;
 if (i1 << 24 >> 24) {
  i1 = 0;
  do {
   HEAP16[i4 + 88 + (i1 << 1) >> 1] = HEAP32[i3 + 332 + (i1 << 2) >> 2];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i2 | 0));
 }
 HEAP32[i4 + 108 >> 2] = HEAP32[i3 + 372 >> 2];
 HEAP32[i4 + 112 >> 2] = HEAP32[i3 + 376 >> 2];
 HEAP32[i4 + 116 >> 2] = HEAP32[i3 + 380 >> 2];
 HEAP16[i4 + 120 >> 1] = HEAP32[i3 + 384 >> 2];
 HEAP16[i4 + 122 >> 1] = HEAP32[i3 + 388 >> 2];
 i1 = HEAP8[i3 + 392 >> 0] | 0;
 HEAP8[i4 + 124 >> 0] = i1;
 i2 = i1 & 255;
 if (i1 << 24 >> 24) {
  i1 = 0;
  do {
   HEAP16[i4 + 128 + (i1 << 1) >> 1] = HEAP32[i3 + 396 + (i1 << 2) >> 2];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i2 | 0));
 }
 i1 = HEAP8[i3 + 393 >> 0] | 0;
 HEAP8[i4 + 125 >> 0] = i1;
 i2 = i1 & 255;
 if (!(i1 << 24 >> 24)) {
  i2 = i3 + 500 | 0;
  i2 = HEAP8[i2 >> 0] | 0;
  i1 = i4 + 126 | 0;
  HEAP8[i1 >> 0] = i2;
  i1 = i3 + 512 | 0;
  i1 = HEAP32[i1 >> 2] | 0;
  i2 = i4 + 184 | 0;
  HEAP32[i2 >> 2] = i1;
  i3 = i3 + 508 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i4 = i4 + 4 | 0;
  HEAP32[i4 >> 2] = i3;
  return;
 } else i1 = 0;
 do {
  HEAP16[i4 + 154 + (i1 << 1) >> 1] = HEAP32[i3 + 448 + (i1 << 2) >> 2];
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i2 | 0));
 i2 = i3 + 500 | 0;
 i2 = HEAP8[i2 >> 0] | 0;
 i1 = i4 + 126 | 0;
 HEAP8[i1 >> 0] = i2;
 i1 = i3 + 512 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i2 = i4 + 184 | 0;
 HEAP32[i2 >> 2] = i1;
 i3 = i3 + 508 | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 i4 = i4 + 4 | 0;
 HEAP32[i4 >> 2] = i3;
 return;
}

function _FcCharSetIsSubset(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 if ((i1 | 0) == (i2 | 0)) {
  i18 = 1;
  return i18 | 0;
 }
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i18 = 0;
  return i18 | 0;
 }
 i17 = HEAP32[i1 + 4 >> 2] | 0;
 L7 : do if ((i17 | 0) > 0) {
  i16 = HEAP32[i2 + 4 >> 2] | 0;
  i11 = i1;
  i12 = i1 + 12 | 0;
  i13 = i2;
  i14 = i2 + 12 | 0;
  i15 = i16 + -1 | 0;
  i10 = i1 + 8 | 0;
  i9 = i2 + 8 | 0;
  i1 = 0;
  i2 = 0;
  L9 : while (1) {
   i8 = (i1 | 0) < (i17 | 0);
   while (1) {
    if ((i2 | 0) >= (i16 | 0)) break L7;
    i6 = HEAP16[(HEAP32[i12 >> 2] | 0) + i11 + (i1 << 1) >> 1] | 0;
    i3 = (HEAP32[i14 >> 2] | 0) + i13 | 0;
    i7 = i3;
    i4 = HEAP16[i7 + (i2 << 1) >> 1] | 0;
    if (i6 << 16 >> 16 == i4 << 16 >> 16) break;
    if ((i6 & 65535) < (i4 & 65535)) {
     i1 = 0;
     i18 = 25;
     break L9;
    }
    L16 : do if (!i3) i2 = -1; else {
     i5 = i15;
     i3 = i2 + 1 | 0;
     while (1) {
      if ((i3 | 0) > (i5 | 0)) break;
      i2 = i5 + i3 >> 1;
      i19 = HEAP16[i7 + (i2 << 1) >> 1] | 0;
      i4 = (i19 & 65535) < (i6 & 65535);
      if (i19 << 16 >> 16 == i6 << 16 >> 16) break L16; else {
       i5 = i4 ? i5 : i2 + -1 | 0;
       i3 = i4 ? i2 + 1 | 0 : i3;
      }
     }
     if ((i5 | 0) < 0) i18 = 21; else if ((i5 | 0) < (i16 | 0)) if ((HEAPU16[i7 + (i5 << 1) >> 1] | 0) < (i6 & 65535)) i18 = 21; else i2 = i5; else i2 = i5;
     if ((i18 | 0) == 21) {
      i18 = 0;
      i2 = i5 + 1 | 0;
     }
     i2 = ~i2;
    } while (0);
    if (i8) i2 = i2 >> 31 ^ i2; else break L7;
   }
   i3 = (HEAP32[i10 >> 2] | 0) + i11 | 0;
   i3 = i3 + (HEAP32[i3 + (i1 << 2) >> 2] | 0) | 0;
   i4 = (HEAP32[i9 >> 2] | 0) + i13 | 0;
   i4 = i4 + (HEAP32[i4 + (i2 << 2) >> 2] | 0) | 0;
   L30 : do if ((i3 | 0) != (i4 | 0)) {
    i5 = 8;
    while (1) {
     if (!i5) break L30;
     if (!(HEAP32[i3 >> 2] & ~HEAP32[i4 >> 2])) {
      i5 = i5 + -1 | 0;
      i4 = i4 + 4 | 0;
      i3 = i3 + 4 | 0;
     } else {
      i1 = 0;
      i18 = 25;
      break L9;
     }
    }
   } while (0);
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i17 | 0)) i2 = i2 + 1 | 0; else break L7;
  }
  if ((i18 | 0) == 25) return i1 | 0;
 } else i1 = 0; while (0);
 i19 = (i1 | 0) >= (i17 | 0) & 1;
 return i19 | 0;
}

function _FT_CMap_New(i4, i5, i3, i10) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if ((i4 | 0) == 0 | (i3 | 0) == 0) {
  i10 = 6;
  return i10 | 0;
 }
 i7 = HEAP32[i3 >> 2] | 0;
 if (!i7) {
  i10 = 6;
  return i10 | 0;
 }
 i8 = HEAP32[i7 + 100 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i2 = FUNCTION_TABLE_iii[HEAP32[i8 + 4 >> 2] & 255](i8, i1) | 0;
  if (!i2) {
   i2 = 0;
   i1 = 64;
  } else {
   _memset(i2 | 0, 0, i1 | 0) | 0;
   i6 = 7;
  }
 } else if (!i1) {
  i2 = 0;
  i6 = 7;
 } else {
  i2 = 0;
  i1 = 6;
 }
 L11 : do if ((i6 | 0) == 7) {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  i9 = i2 + 12 | 0;
  HEAP32[i9 >> 2] = i4;
  i1 = HEAP32[i4 + 4 >> 2] | 0;
  if (!i1) i6 = 9; else {
   i1 = FUNCTION_TABLE_iii[i1 & 255](i2, i5) | 0;
   if (!i1) i6 = 9;
  }
  if ((i6 | 0) == 9) {
   i5 = i7 + 36 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   i1 = i6 + 1 | 0;
   i7 = i7 + 40 | 0;
   i3 = HEAP32[i7 >> 2] | 0;
   L17 : do if ((i1 | i6 | 0) < 0) i1 = 6; else {
    do if (!i1) if (!i3) i1 = 0; else {
     FUNCTION_TABLE_vii[HEAP32[i8 + 8 >> 2] & 63](i8, i3);
     i1 = 0;
    } else {
     if ((i6 | 0) > 536870910) {
      i1 = 10;
      break L17;
     }
     i4 = i1 << 2;
     if (i6 | 0) {
      i1 = FUNCTION_TABLE_iiiii[HEAP32[i8 + 12 >> 2] & 127](i8, i6 << 2, i4, i3) | 0;
      if (!i1) {
       i1 = 64;
       break L17;
      } else break;
     }
     i1 = FUNCTION_TABLE_iii[HEAP32[i8 + 4 >> 2] & 255](i8, i4) | 0;
     if (!i1) {
      i1 = 64;
      i3 = 0;
      break L17;
     }
     _memset(i1 | 0, 0, i4 | 0) | 0;
    } while (0);
    i9 = i1 + (i6 << 2) | 0;
    HEAP8[i9 >> 0] = 0;
    HEAP8[i9 + 1 >> 0] = 0;
    HEAP8[i9 + 2 >> 0] = 0;
    HEAP8[i9 + 3 >> 0] = 0;
    HEAP32[i7 >> 2] = i1;
    i9 = HEAP32[i5 >> 2] | 0;
    HEAP32[i5 >> 2] = i9 + 1;
    HEAP32[i1 + (i9 << 2) >> 2] = i2;
    i1 = 0;
    break L11;
   } while (0);
   HEAP32[i7 >> 2] = i3;
  }
  i4 = HEAP32[(HEAP32[i2 >> 2] | 0) + 100 >> 2] | 0;
  i3 = HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0;
  if (i3 | 0) FUNCTION_TABLE_vi[i3 & 127](i2);
  FUNCTION_TABLE_vii[HEAP32[i4 + 8 >> 2] & 63](i4, i2);
  i2 = 0;
 } while (0);
 if (!i10) {
  i10 = i1;
  return i10 | 0;
 }
 HEAP32[i10 >> 2] = i2;
 i10 = i1;
 return i10 | 0;
}

function _FcDirScanConfig(i10, i12, i3, i4, i1, i14, i2) {
 i10 = i10 | 0;
 i12 = i12 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i5 = i15;
 i11 = i15 + 4 | 0;
 if (!i1) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (!((i10 | 0) != 0 | (i12 | 0) != 0)) {
  i14 = 1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i6 = (i2 | 0) != 0;
 if (!((i3 | 0) != 0 | i6)) i3 = _FcConfigGetBlanks(i14) | 0;
 i13 = _malloc((_strlen(i4) | 0) + 4098 | 0) | 0;
 if (!i13) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 _strcpy(i13, i4) | 0;
 i2 = i13 + (_strlen(i13) | 0) | 0;
 HEAP8[i2 >> 0] = 47;
 HEAP8[i2 + 1 >> 0] = 0;
 i2 = i13 + (_strlen(i13) | 0) | 0;
 if (HEAP32[91917] & 128 | 0) {
  HEAP32[i5 >> 2] = i4;
  _printf(348369, i5) | 0;
 }
 i9 = _opendir(i4) | 0;
 if (!i9) {
  i1 = ___errno_location() | 0;
  i1 = (HEAP32[i1 >> 2] | 0) == 2 & 1;
 } else {
  i7 = _FcStrSetCreate() | 0;
  if (!i7) i1 = 0; else {
   i1 = _readdir(i9) | 0;
   L21 : do if (!i1) i8 = 16; else while (1) {
    i1 = i1 + 11 | 0;
    if ((HEAP8[i1 >> 0] | 0) != 46) if ((_strlen(i1) | 0) >>> 0 < 4096) {
     _strcpy(i2, i1) | 0;
     if (!(_FcStrSetAdd(i7, i13) | 0)) {
      i1 = 0;
      break L21;
     }
    }
    i1 = _readdir(i9) | 0;
    if (!i1) {
     i8 = 16;
     break;
    }
   } while (0);
   L28 : do if ((i8 | 0) == 16) {
    i4 = i7 + 12 | 0;
    i5 = i7 + 4 | 0;
    _qsort(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 4, 199);
    if ((HEAP32[i5 >> 2] | 0) > 0) {
     i2 = i11 + 12 | 0;
     if (i6) i1 = 0; else {
      i1 = 0;
      while (1) {
       _FcFileScanConfig(i10, i12, i3, HEAP32[(HEAP32[i4 >> 2] | 0) + (i1 << 2) >> 2] | 0, i14) | 0;
       i1 = i1 + 1 | 0;
       if ((i1 | 0) >= (HEAP32[i5 >> 2] | 0)) {
        i1 = 1;
        break L28;
       }
      }
     }
     do {
      if (!(_FcStat(HEAP32[(HEAP32[i4 >> 2] | 0) + (i1 << 2) >> 2] | 0, i11) | 0)) if ((HEAP32[i2 >> 2] & 61440 | 0) == 16384) _FcFileScanConfig(0, i12, 0, HEAP32[(HEAP32[i4 >> 2] | 0) + (i1 << 2) >> 2] | 0, i14) | 0;
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) < (HEAP32[i5 >> 2] | 0));
     i1 = 1;
    } else i1 = 1;
   } while (0);
   _FcStrSetDestroy(i7);
  }
  _closedir(i9) | 0;
 }
 _free(i13);
 i14 = i1;
 STACKTOP = i15;
 return i14 | 0;
}

function _little2_toUtf8(i1, i9, i6, i7, i8) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) {
  i10 = i6;
  HEAP32[i9 >> 2] = i10;
  return;
 }
 i5 = i8;
 L4 : while (1) {
  i4 = HEAP8[i1 >> 0] | 0;
  i2 = HEAP8[i1 + 1 >> 0] | 0;
  i3 = i2 & 255;
  switch (i2 << 24 >> 24) {
  case 0:
   {
    if (i4 << 24 >> 24 > -1) {
     i2 = HEAP32[i7 >> 2] | 0;
     if ((i2 | 0) == (i8 | 0)) {
      i10 = 14;
      break L4;
     }
     HEAP32[i7 >> 2] = i2 + 1;
     HEAP8[i2 >> 0] = i4;
    } else i10 = 7;
    break;
   }
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i10 = 7;
    break;
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i2 = HEAP32[i7 >> 2] | 0;
    if ((i5 - i2 | 0) < 4) {
     i10 = 14;
     break L4;
    }
    i11 = i4 & 255;
    i3 = (i3 << 2 & 12 | i11 >>> 6) + 1 | 0;
    HEAP32[i7 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i3 >>> 2 | 240;
    i4 = HEAP32[i7 >> 2] | 0;
    HEAP32[i7 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i11 >>> 2 & 15 | i3 << 4 & 48 | 128;
    i4 = i1 + 2 | 0;
    i3 = HEAPU8[i4 >> 0] | 0;
    i2 = (i11 << 4 & 48 | i3 >>> 6 | HEAP8[i1 + 3 >> 0] << 2 & 12 | 128) & 255;
    i1 = HEAP32[i7 >> 2] | 0;
    HEAP32[i7 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i2;
    i1 = HEAP32[i7 >> 2] | 0;
    HEAP32[i7 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3 & 63 | 128;
    i1 = i4;
    break;
   }
  default:
   {
    i2 = HEAP32[i7 >> 2] | 0;
    if ((i5 - i2 | 0) < 3) {
     i10 = 14;
     break L4;
    }
    HEAP32[i7 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i3 >>> 4 | 224;
    i4 = i4 & 255;
    i11 = HEAP32[i7 >> 2] | 0;
    HEAP32[i7 >> 2] = i11 + 1;
    HEAP8[i11 >> 0] = i4 >>> 6 | i3 << 2 & 60 | 128;
    i11 = HEAP32[i7 >> 2] | 0;
    HEAP32[i7 >> 2] = i11 + 1;
    HEAP8[i11 >> 0] = i4 & 63 | 128;
   }
  }
  if ((i10 | 0) == 7) {
   i10 = 0;
   i2 = HEAP32[i7 >> 2] | 0;
   if ((i5 - i2 | 0) < 2) {
    i10 = 14;
    break;
   }
   i4 = i4 & 255;
   HEAP32[i7 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = i4 >>> 6 | i3 << 2 | 192;
   i11 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i11 + 1;
   HEAP8[i11 >> 0] = i4 & 63 | 128;
  }
  i1 = i1 + 2 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i1 = i6;
   i10 = 14;
   break;
  }
 }
 if ((i10 | 0) == 14) {
  HEAP32[i9 >> 2] = i1;
  return;
 }
}

function _big2_toUtf8(i1, i9, i6, i7, i8) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) {
  i10 = i6;
  HEAP32[i9 >> 2] = i10;
  return;
 }
 i5 = i8;
 L4 : while (1) {
  i4 = HEAP8[i1 + 1 >> 0] | 0;
  i2 = HEAP8[i1 >> 0] | 0;
  i3 = i2 & 255;
  switch (i2 << 24 >> 24) {
  case 0:
   {
    if (i4 << 24 >> 24 > -1) {
     i2 = HEAP32[i7 >> 2] | 0;
     if ((i2 | 0) == (i8 | 0)) {
      i10 = 14;
      break L4;
     }
     HEAP32[i7 >> 2] = i2 + 1;
     HEAP8[i2 >> 0] = i4;
    } else i10 = 7;
    break;
   }
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i10 = 7;
    break;
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i2 = HEAP32[i7 >> 2] | 0;
    if ((i5 - i2 | 0) < 4) {
     i10 = 14;
     break L4;
    }
    i11 = i4 & 255;
    i3 = (i3 << 2 & 12 | i11 >>> 6) + 1 | 0;
    HEAP32[i7 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i3 >>> 2 | 240;
    i4 = HEAP32[i7 >> 2] | 0;
    HEAP32[i7 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i11 >>> 2 & 15 | i3 << 4 & 48 | 128;
    i4 = i1 + 2 | 0;
    i3 = HEAPU8[i1 + 3 >> 0] | 0;
    i2 = (i11 << 4 & 48 | i3 >>> 6 | HEAP8[i4 >> 0] << 2 & 12 | 128) & 255;
    i1 = HEAP32[i7 >> 2] | 0;
    HEAP32[i7 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i2;
    i1 = HEAP32[i7 >> 2] | 0;
    HEAP32[i7 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3 & 63 | 128;
    i1 = i4;
    break;
   }
  default:
   {
    i2 = HEAP32[i7 >> 2] | 0;
    if ((i5 - i2 | 0) < 3) {
     i10 = 14;
     break L4;
    }
    HEAP32[i7 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i3 >>> 4 | 224;
    i4 = i4 & 255;
    i11 = HEAP32[i7 >> 2] | 0;
    HEAP32[i7 >> 2] = i11 + 1;
    HEAP8[i11 >> 0] = i4 >>> 6 | i3 << 2 & 60 | 128;
    i11 = HEAP32[i7 >> 2] | 0;
    HEAP32[i7 >> 2] = i11 + 1;
    HEAP8[i11 >> 0] = i4 & 63 | 128;
   }
  }
  if ((i10 | 0) == 7) {
   i10 = 0;
   i2 = HEAP32[i7 >> 2] | 0;
   if ((i5 - i2 | 0) < 2) {
    i10 = 14;
    break;
   }
   i4 = i4 & 255;
   HEAP32[i7 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = i4 >>> 6 | i3 << 2 | 192;
   i11 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i11 + 1;
   HEAP8[i11 >> 0] = i4 & 63 | 128;
  }
  i1 = i1 + 2 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i1 = i6;
   i10 = 14;
   break;
  }
 }
 if ((i10 | 0) == 14) {
  HEAP32[i9 >> 2] = i1;
  return;
 }
}

function _ft_lzw_stream_io(i1, i5, i11, i9) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i10 = i6 + 4280 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if (i1 >>> 0 > i5 >>> 0) {
  i3 = i1 - i5 | 0;
  i4 = i6 + 4284 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  do if (i3 >>> 0 > (i2 - (i6 + 184) | 0) >>> 0) if (!(_FT_Stream_Seek(HEAP32[i6 >> 2] | 0, 0) | 0)) {
   HEAP32[i6 + 16 >> 2] = 0;
   HEAP32[i6 + 36 >> 2] = 0;
   HEAP32[i6 + 40 >> 2] = 0;
   HEAP8[i6 + 44 >> 0] = 0;
   HEAP32[i6 + 48 >> 2] = 0;
   HEAP32[i6 + 104 >> 2] = 0;
   HEAP32[i6 + 64 >> 2] = 9;
   HEAP32[i6 + 12 >> 2] = 0;
   i2 = i6 + 4280 | 0;
   HEAP32[i6 + 4288 >> 2] = i2;
   i1 = 0;
   break;
  } else {
   i11 = 0;
   return i11 | 0;
  } else {
   i1 = i5;
   i2 = i2 + (0 - i3) | 0;
  } while (0);
  HEAP32[i4 >> 2] = i2;
  HEAP32[i10 >> 2] = i1;
 }
 do if (i1 >>> 0 < i5 >>> 0) {
  i7 = i5 - i1 | 0;
  i4 = i6 + 4288 | 0;
  i5 = i6 + 4284 | 0;
  i3 = HEAP32[i5 >> 2] | 0;
  i8 = (HEAP32[i4 >> 2] | 0) - i3 | 0;
  i8 = i8 >>> 0 < i7 >>> 0 ? i8 : i7;
  HEAP32[i5 >> 2] = i3 + i8;
  HEAP32[i10 >> 2] = i8 + i1;
  i1 = i7 - i8 | 0;
  L13 : do if (i1 | 0) {
   i3 = i6 + 12 | 0;
   while (1) {
    i2 = i1 >>> 0 < 4096 ? i1 : 4096;
    i1 = i1 - i2 | 0;
    if ((_ft_lzwstate_io(i3, 0, i2) | 0) >>> 0 < i2 >>> 0) {
     i1 = 0;
     break;
    }
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i2;
    if (!i1) break L13;
   }
   return i1 | 0;
  } while (0);
  if (!i9) {
   i11 = 0;
   return i11 | 0;
  } else {
   i8 = i4;
   i2 = i4;
  }
 } else if (!i9) {
  i11 = 0;
  return i11 | 0;
 } else {
  i2 = i6 + 4288 | 0;
  i8 = i2;
  i5 = i6 + 4284 | 0;
  break;
 } while (0);
 i7 = i6 + 12 | 0;
 i6 = i6 + 184 | 0;
 i1 = 0;
 i3 = i9;
 i4 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 while (1) {
  i9 = i2 - i4 | 0;
  i9 = i9 >>> 0 < i3 >>> 0 ? i9 : i3;
  _memcpy(i11 + i1 | 0, i4 | 0, i9 | 0) | 0;
  i1 = i9 + i1 | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i9;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i9;
  i3 = i3 - i9 | 0;
  if (!i3) {
   i2 = 18;
   break;
  }
  HEAP32[i5 >> 2] = i6;
  i9 = _ft_lzwstate_io(i7, i6, 4096) | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i2 = i4 + i9 | 0;
  HEAP32[i8 >> 2] = i2;
  if (!i9) {
   i2 = 18;
   break;
  }
 }
 if ((i2 | 0) == 18) return i1 | 0;
 return 0;
}

function _FcDirCacheBasename(i4, i14) {
 i4 = i4 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i15 = i16 + 88 | 0;
 i12 = i16;
 HEAP32[i12 >> 2] = 1732584193;
 HEAP32[i12 + 4 >> 2] = -271733879;
 HEAP32[i12 + 8 >> 2] = -1732584194;
 HEAP32[i12 + 12 >> 2] = 271733878;
 i11 = i12 + 16 | 0;
 i13 = i12 + 20 | 0;
 i3 = _strlen(i4) | 0;
 i1 = i3 << 3;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i13 >> 2] = i3 >>> 29;
 i2 = i12 + 24 | 0;
 if (i3 >>> 0 > 63) {
  i9 = i3 + -64 | 0;
  i10 = i9 & -64;
  i8 = i10 + 64 | 0;
  i1 = i4;
  while (1) {
   i5 = i2;
   i6 = i1;
   i7 = i5 + 64 | 0;
   do {
    HEAP8[i5 >> 0] = HEAP8[i6 >> 0] | 0;
    i5 = i5 + 1 | 0;
    i6 = i6 + 1 | 0;
   } while ((i5 | 0) < (i7 | 0));
   _MD5Transform(i12, i2);
   i3 = i3 + -64 | 0;
   if (i3 >>> 0 <= 63) break; else i1 = i1 + 64 | 0;
  }
  i4 = i4 + i8 | 0;
  i3 = i9 - i10 | 0;
  i1 = HEAP32[i11 >> 2] | 0;
 }
 _memcpy(i2 | 0, i4 | 0, i3 | 0) | 0;
 i4 = i1 >>> 3 & 63;
 i10 = i12 + 24 + i4 | 0;
 i3 = i10 + 1 | 0;
 HEAP8[i10 >> 0] = -128;
 i4 = i4 ^ 63;
 if (i4 >>> 0 < 8) {
  _memset(i3 | 0, 0, i4 | 0) | 0;
  _MD5Transform(i12, i2);
  i5 = i2;
  i7 = i5 + 56 | 0;
  do {
   HEAP32[i5 >> 2] = 0;
   i5 = i5 + 4 | 0;
  } while ((i5 | 0) < (i7 | 0));
  i1 = HEAP32[i11 >> 2] | 0;
 } else _memset(i3 | 0, 0, i4 + -8 | 0) | 0;
 HEAP32[i12 + 80 >> 2] = i1;
 HEAP32[i12 + 84 >> 2] = HEAP32[i13 >> 2];
 _MD5Transform(i12, i2);
 i5 = i15;
 i6 = i12;
 i7 = i5 + 16 | 0;
 do {
  HEAP8[i5 >> 0] = HEAP8[i6 >> 0] | 0;
  i5 = i5 + 1 | 0;
  i6 = i6 + 1 | 0;
 } while ((i5 | 0) < (i7 | 0));
 i5 = i12;
 i7 = i5 + 88 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i7 | 0));
 HEAP8[i14 >> 0] = 47;
 i3 = i14 + 1 | 0;
 i2 = 0;
 i1 = 0;
 while (1) {
  i13 = HEAPU8[i15 + i2 >> 0] | 0;
  HEAP8[i3 + i1 >> 0] = HEAP8[346969 + (i13 >>> 4) >> 0] | 0;
  HEAP8[i3 + (i1 | 1) >> 0] = HEAP8[346969 + (i13 & 15) >> 0] | 0;
  i1 = i2 + 1 | 0;
  if ((i1 | 0) == 16) break; else {
   i2 = i1;
   i1 = i1 << 1;
  }
 }
 HEAP8[i14 + 33 >> 0] = 0;
 i5 = i14 + (_strlen(i14) | 0) | 0;
 i6 = 346985;
 i7 = i5 + 16 | 0;
 do {
  HEAP8[i5 >> 0] = HEAP8[i6 >> 0] | 0;
  i5 = i5 + 1 | 0;
  i6 = i6 + 1 | 0;
 } while ((i5 | 0) < (i7 | 0));
 STACKTOP = i16;
 return;
}

function _ass_font_select(i9, i12, i1, i14, i15, i5, i6, i7) {
 i9 = i9 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i8 = 0, i10 = 0, i11 = 0, i13 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i17 = i18 + 48 | 0;
 i11 = i18 + 24 | 0;
 i2 = i18;
 i16 = HEAP32[i1 >> 2] | 0;
 i13 = HEAP32[i1 + 4 >> 2] | 0;
 i10 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = HEAP32[i9 + 28 >> 2] | 0;
 i3 = (i16 | 0) != 0;
 if (i3) if (!(HEAP8[i16 >> 0] | 0)) i8 = 4; else {
  i1 = _select_font(i9, i12, i16, i13, i10, i14, i15, i5, i6, i7) | 0;
  if (!i1) i8 = 4;
 } else i8 = 4;
 do if ((i8 | 0) == 4) {
  i1 = HEAP32[i9 + 4 >> 2] | 0;
  if (i1 | 0) {
   i1 = _select_font(i9, i12, i1, i13, i10, i14, i15, i5, i6, i7) | 0;
   if (i1 | 0) {
    i9 = HEAP32[i14 >> 2] | 0;
    i11 = HEAP32[i15 >> 2] | 0;
    HEAP32[i2 >> 2] = i16;
    HEAP32[i2 + 4 >> 2] = i13;
    HEAP32[i2 + 8 >> 2] = i10;
    HEAP32[i2 + 12 >> 2] = i1;
    HEAP32[i2 + 16 >> 2] = i9;
    HEAP32[i2 + 20 >> 2] = (i11 | 0) == 0 ? 357943 : i11;
    _ass_msg(i12, 2, 357950, i2);
    break;
   }
  }
  if (i4 | 0) {
   i2 = HEAP32[i4 + 32 >> 2] | 0;
   if (i2 | 0) {
    if (i3) if (!(HEAP8[i16 >> 0] | 0)) i8 = 11; else i1 = i16; else i8 = 11;
    if ((i8 | 0) == 11) i1 = 358016;
    i2 = FUNCTION_TABLE_iiii[i2 & 127](HEAP32[i4 + 40 >> 2] | 0, i1, i7) | 0;
    if (i2 | 0) {
     i1 = _select_font(i9, i12, i2, i13, i10, i14, i15, i5, i6, i7) | 0;
     _free(i2);
     if (i1 | 0) break;
    }
   }
  }
  i1 = HEAP32[i9 + 8 >> 2] | 0;
  if (!i1) {
   i17 = 0;
   STACKTOP = i18;
   return i17 | 0;
  } else {
   i8 = HEAP32[i9 + 12 >> 2] | 0;
   HEAP32[i14 >> 2] = i8;
   i9 = HEAP32[i15 >> 2] | 0;
   HEAP32[i11 >> 2] = i16;
   HEAP32[i11 + 4 >> 2] = i13;
   HEAP32[i11 + 8 >> 2] = i10;
   HEAP32[i11 + 12 >> 2] = i1;
   HEAP32[i11 + 16 >> 2] = i8;
   HEAP32[i11 + 20 >> 2] = (i9 | 0) == 0 ? 357943 : i9;
   _ass_msg(i12, 2, 358022, i11);
   break;
  }
 } while (0);
 i14 = HEAP32[i14 >> 2] | 0;
 i15 = HEAP32[i15 >> 2] | 0;
 HEAP32[i17 >> 2] = i16;
 HEAP32[i17 + 4 >> 2] = i13;
 HEAP32[i17 + 8 >> 2] = i10;
 HEAP32[i17 + 12 >> 2] = i1;
 HEAP32[i17 + 16 >> 2] = i14;
 HEAP32[i17 + 20 >> 2] = (i15 | 0) == 0 ? 357943 : i15;
 _ass_msg(i12, 4, 358081, i17);
 i17 = i1;
 STACKTOP = i18;
 return i17 | 0;
}

function _tt_cmap4_char_map_linear(i11, i12, i17) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0;
 i1 = HEAP32[i11 + 16 >> 2] | 0;
 i13 = HEAP8[i1 + 7 >> 0] & -2 & 255 | (HEAPU8[i1 + 6 >> 0] | 0) << 8;
 i14 = i13 >>> 1;
 if (!i14) {
  i18 = 0;
  return i18 | 0;
 }
 i15 = i17 << 24 >> 24 == 0;
 i2 = (HEAP32[i12 >> 2] | 0) + ((i15 ^ 1) & 1) | 0;
 if (i2 >>> 0 >= 65536) {
  i18 = 0;
  return i18 | 0;
 }
 i16 = i1 + 14 | 0;
 i9 = i1 + 16 + i13 | 0;
 i10 = i14 + -1 | 0;
 i1 = i2;
 while (1) {
  i2 = i16;
  i7 = 0;
  i8 = i9;
  L9 : while (1) {
   i4 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
   i6 = (HEAPU8[i8 >> 0] | 0) << 8 | (HEAPU8[i8 + 1 >> 0] | 0);
   if (i1 >>> 0 > i4 >>> 0 | i1 >>> 0 < i6 >>> 0) i2 = i2 + 2 | 0; else {
    i5 = i8 + i13 | 0;
    i2 = ((HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i5 + 1 >> 0] | 0)) << 16 >> 16;
    i5 = i5 + i13 | 0;
    i3 = (HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i5 + 1 >> 0] | 0);
    if ((i4 | 0) == 65535 & (i7 >>> 0 >= i10 >>> 0 & (i6 | 0) == 65535)) {
     i4 = HEAP32[i11 >> 2] | 0;
     if (!i3) {
      i18 = 11;
      break;
     }
     i4 = (i5 + i3 + 2 | 0) >>> 0 > ((HEAP32[i4 + 500 >> 2] | 0) + (HEAP32[i4 + 504 >> 2] | 0) | 0) >>> 0;
     i3 = i4 ? 0 : i3;
     i2 = i4 ? 1 : i2;
    }
    if ((i3 | 0) < 65535) {
     i18 = 18;
     break;
    }
    switch (i3 | 0) {
    case 65535:
     {
      i2 = i5;
      break;
     }
    default:
     {
      i18 = 10;
      break L9;
     }
    }
   }
   i8 = i8 + 2 | 0;
   i7 = i7 + 1 | 0;
   if (i7 >>> 0 >= i14 >>> 0) {
    i2 = 0;
    break;
   }
  }
  if ((i18 | 0) == 18) switch (i3 | 0) {
  case 0:
   {
    i18 = 11;
    break;
   }
  default:
   i18 = 10;
  }
  if ((i18 | 0) == 10) {
   i18 = 0;
   i8 = i5 + (i3 + (i1 - i6 << 1)) | 0;
   i8 = (HEAPU8[i8 >> 0] | 0) << 8 | (HEAPU8[i8 + 1 >> 0] | 0);
   i2 = (i8 | 0) == 0 ? 0 : i8 + i2 & 65535;
  } else if ((i18 | 0) == 11) {
   i18 = 0;
   i2 = i2 + i1 & 65535;
  }
  if (i15 | (i2 | 0) != 0) break;
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= 65536) {
   i1 = 0;
   i18 = 17;
   break;
  }
 }
 if ((i18 | 0) == 17) return i1 | 0;
 if (!(i17 << 24 >> 24 != 0 & (i2 | 0) != 0)) {
  i18 = i2;
  return i18 | 0;
 }
 HEAP32[i12 >> 2] = i1;
 i18 = i2;
 return i18 | 0;
}

function _af_latin_compute_stem_width(i1, i8, i13, i2, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 i9 = HEAP32[i1 + 2988 >> 2] | 0;
 i11 = (i8 | 0) == 1;
 i10 = HEAP32[i1 + 2984 >> 2] | 0;
 if (!(i10 & 4)) return i13 | 0;
 if (HEAP8[i9 + 44 + (i8 * 1572 | 0) + 212 >> 0] | 0) return i13 | 0;
 i1 = (i13 | 0) < 0 ? 0 - i13 | 0 : i13;
 if (i11) if (!(i10 & 2)) {
  if (!((i1 | 0) < 192 & (i3 & 2 | 0) != 0)) i12 = 7;
 } else i12 = 16; else if (!(i10 & 1)) i12 = 7; else i12 = 16;
 do if ((i12 | 0) == 7) {
  i12 = i2 & 1;
  i1 = (i1 | 0) < (((i12 | 0) == 0 ? 56 : 80) | 0) ? (i12 << 3) + 56 | 0 : i1;
  if (HEAP32[i9 + 44 + (i8 * 1572 | 0) + 8 >> 2] | 0) {
   i2 = HEAP32[i9 + 44 + (i8 * 1572 | 0) + 16 >> 2] | 0;
   i12 = i1 - i2 | 0;
   if ((((i12 | 0) < 0 ? 0 - i12 | 0 : i12) | 0) < 40) {
    i1 = (i2 | 0) > 48 ? i2 : 48;
    break;
   }
   if ((i1 | 0) >= 192) {
    i1 = i1 + 32 & -64;
    break;
   }
   i2 = i1 & 63;
   i3 = i1 & -64;
   if (i2 >>> 0 >= 10) if (i2 >>> 0 < 32) {
    i1 = i3 | 10;
    break;
   } else {
    i1 = i2 >>> 0 < 54 ? i3 | 54 : i1;
    break;
   }
  }
 } else if ((i12 | 0) == 16) {
  i6 = HEAP32[i9 + 44 + (i8 * 1572 | 0) + 8 >> 2] | 0;
  if (!i6) {
   i3 = i1;
   i2 = i1 + 32 & -64;
   i12 = 20;
  } else {
   i4 = 0;
   i3 = i1;
   i5 = 98;
   while (1) {
    i14 = HEAP32[i9 + 44 + (i8 * 1572 | 0) + 12 + (i4 * 12 | 0) + 4 >> 2] | 0;
    i2 = i1 - i14 | 0;
    i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
    i7 = (i2 | 0) < (i5 | 0);
    i3 = i7 ? i14 : i3;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i6 | 0)) break; else i5 = i7 ? i2 : i5;
   }
   i2 = i3 + 32 & -64;
   if ((i3 | 0) > (i1 | 0)) i2 = (i2 + -48 | 0) < (i1 | 0) ? i3 : i1; else i12 = 20;
  }
  if ((i12 | 0) == 20) i2 = (i2 | 48 | 0) > (i1 | 0) ? i3 : i1;
  if (i11) {
   i1 = (i2 | 0) > 63 ? i2 + 16 & -64 : 64;
   break;
  }
  if (i10 & 8 | 0) {
   i1 = (i2 | 0) < 64 ? 64 : i2 + 32 & -64;
   break;
  }
  if ((i2 | 0) < 48) {
   i1 = i2 + 64 >> 1;
   break;
  }
  if ((i2 | 0) >= 128) {
   i1 = i2 + 32 & -64;
   break;
  }
  i2 = i2 + 22 & -64;
  i14 = i2 - i1 | 0;
  if ((((i14 | 0) < 0 ? 0 - i14 | 0 : i14) | 0) > 15) i1 = (i1 | 0) < 48 ? i1 + 64 >> 1 : i1; else i1 = i2;
 } while (0);
 i14 = (i13 | 0) > -1 ? i1 : 0 - i1 | 0;
 return i14 | 0;
}

function _tt_cmap2_validate(i3, i12) {
 i3 = i3 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i6 = i12 + 160 | 0;
 if ((i3 + 4 | 0) >>> 0 > (HEAP32[i6 >> 2] | 0) >>> 0) _ft_validator_error(i12, 8);
 i14 = (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i3 + 3 >> 0] | 0);
 i13 = i3 + i14 | 0;
 if (i14 >>> 0 < 518 ? 1 : i13 >>> 0 > (HEAP32[i6 >> 2] | 0) >>> 0) _ft_validator_error(i12, 8);
 i14 = i12 + 164 | 0;
 i1 = 0;
 i11 = 0;
 i2 = i3 + 6 | 0;
 while (1) {
  i4 = HEAPU8[i2 + 1 >> 0] | 0;
  if (!((HEAP32[i14 >> 2] | 0) >>> 0 < 2 | (i4 & 7 | 0) == 0)) {
   i5 = 7;
   break;
  }
  i10 = ((HEAPU8[i2 >> 0] | 0) << 8 | i4) >>> 3;
  i11 = i10 >>> 0 > i11 >>> 0 ? i10 : i11;
  i1 = i1 + 1 | 0;
  if ((i1 | 0) == 256) break; else i2 = i2 + 2 | 0;
 }
 if ((i5 | 0) == 7) _ft_validator_error(i12, 8);
 i1 = i3 + 518 | 0;
 i10 = i1 + ((i11 << 3) + 8) | 0;
 if (i10 >>> 0 > (HEAP32[i6 >> 2] | 0) >>> 0) _ft_validator_error(i12, 8);
 i9 = i12 + 172 | 0;
 i8 = 0;
 L16 : while (1) {
  i3 = (HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0);
  i6 = (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
  i7 = (HEAPU8[i1 + 4 >> 0] | 0) << 8 | (HEAPU8[i1 + 5 >> 0] | 0);
  i2 = i1 + 8 | 0;
  i4 = i1 + 6 | 0;
  i5 = (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i1 + 7 >> 0] | 0);
  if (!i6) i1 = i2; else {
   if ((HEAP32[i14 >> 2] | 0) >>> 0 > 1) if (i3 >>> 0 > 255 | (i6 + i3 | 0) >>> 0 > 256) {
    i5 = 15;
    break;
   }
   if (!i5) i1 = i2; else {
    i3 = i4 + i5 | 0;
    if (i3 >>> 0 < i10 >>> 0) {
     i5 = 19;
     break;
    }
    if ((i3 + (i6 << 1) | 0) >>> 0 > i13 >>> 0) {
     i5 = 19;
     break;
    }
    if (!(HEAP32[i14 >> 2] | 0)) i1 = i2; else {
     i3 = i1 + ((i6 << 1) + 8) | 0;
     while (1) {
      i1 = i2 + 2 | 0;
      i2 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
      if (i2 | 0) if ((i2 + i7 & 65535) >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) {
       i5 = 24;
       break L16;
      }
      if (i1 >>> 0 < i3 >>> 0) i2 = i1; else break;
     }
    }
   }
  }
  i8 = i8 + 1 | 0;
  if (i8 >>> 0 > i11 >>> 0) {
   i5 = 27;
   break;
  }
 }
 if ((i5 | 0) == 15) _ft_validator_error(i12, 8); else if ((i5 | 0) == 19) _ft_validator_error(i12, 9); else if ((i5 | 0) == 24) _ft_validator_error(i12, 16); else if ((i5 | 0) == 27) return 0;
 return 0;
}

function _ft_glyphslot_done(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = i4 + 4 | 0;
 i6 = HEAP32[(HEAP32[i2 >> 2] | 0) + 96 >> 2] | 0;
 i9 = HEAP32[i6 + 8 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i6 + 12 >> 2] | 0) + 68 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i4);
 i8 = i4 + 156 | 0;
 i5 = HEAP32[i8 >> 2] | 0;
 if (!i5) i7 = 8; else {
  i3 = HEAP32[i5 + 4 >> 2] | 0;
  if (!(i3 & 1)) i7 = 8; else {
   i2 = HEAP32[(HEAP32[i2 >> 2] | 0) + 100 >> 2] | 0;
   i4 = i4 + 88 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   if (!i1) {
    i2 = i5;
    i1 = i5;
   } else {
    FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i1);
    i1 = HEAP32[i8 >> 2] | 0;
    i2 = i1;
    i3 = HEAP32[i1 + 4 >> 2] | 0;
   }
   HEAP32[i4 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = i3 & -2;
  }
 }
 if ((i7 | 0) == 8) {
  HEAP32[i4 + 88 >> 2] = 0;
  i2 = i5;
  i1 = i5;
 }
 if (!i2) return;
 if (!(HEAP32[HEAP32[i6 >> 2] >> 2] & 512)) {
  i6 = HEAP32[i2 >> 2] | 0;
  if (i6) {
   i5 = HEAP32[i6 >> 2] | 0;
   i1 = i6 + 24 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i5 + 8 >> 2] & 63](i5, i2);
   HEAP32[i1 >> 2] = 0;
   i1 = i6 + 28 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i5 + 8 >> 2] & 63](i5, i2);
   HEAP32[i1 >> 2] = 0;
   i1 = i6 + 32 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i5 + 8 >> 2] & 63](i5, i2);
   HEAP32[i1 >> 2] = 0;
   i1 = i6 + 40 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i5 + 8 >> 2] & 63](i5, i2);
   HEAP32[i1 >> 2] = 0;
   i1 = i6 + 52 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   i4 = i5 + 8 | 0;
   if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i5, i2);
   HEAP32[i1 >> 2] = 0;
   HEAP32[i6 + 44 >> 2] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
   HEAP32[i6 + 8 >> 2] = 0;
   HEAP32[i6 + 12 >> 2] = 0;
   i2 = i6 + 20 | 0;
   HEAP16[i6 + 22 >> 1] = 0;
   HEAP16[i2 >> 1] = 0;
   HEAP32[i6 + 48 >> 2] = 0;
   i1 = i6 + 56 | 0;
   i3 = i1 + 36 | 0;
   do {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
   } while ((i1 | 0) < (i3 | 0));
   FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 63](i5, i6);
   i1 = HEAP32[i8 >> 2] | 0;
   i2 = i1;
  }
  HEAP32[i2 >> 2] = 0;
 }
 if (i1 | 0) FUNCTION_TABLE_vii[HEAP32[i9 + 8 >> 2] & 63](i9, i1);
 HEAP32[i8 >> 2] = 0;
 return;
}

function _af_axis_hints_new_edge(i9, i10, i11, i4, i12) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i14;
 HEAP32[i6 >> 2] = 0;
 i13 = i9 + 12 | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 do if ((i2 | 0) < 12) {
  i1 = i9 + 20 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) {
   HEAP32[i1 >> 2] = i9 + 892;
   HEAP32[i9 + 16 >> 2] = 12;
   i4 = 13;
  } else i4 = 13;
 } else {
  i8 = i9 + 16 | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  if ((i2 | 0) < (i3 | 0)) {
   i1 = HEAP32[i9 + 20 >> 2] | 0;
   i3 = i1;
   i1 = i1 + (i2 * 48 | 0) | 0;
   i4 = 14;
   break;
  }
  if ((i3 | 0) > 44739241) {
   HEAP32[i6 >> 2] = 64;
   i11 = 0;
   i13 = 64;
   HEAP32[i12 >> 2] = i11;
   STACKTOP = i14;
   return i13 | 0;
  }
  i1 = i3 >> 2;
  i7 = i3 + 4 + i1 | 0;
  i7 = (i1 | 0) < -4 | (i7 | 0) > 44739242 ? 44739242 : i7;
  i1 = i9 + 20 | 0;
  i5 = HEAP32[i1 >> 2] | 0;
  do if ((i5 | 0) == (i9 + 892 | 0)) {
   i3 = _ft_mem_realloc(i4, 48, 0, i7, 0, i6) | 0;
   HEAP32[i1 >> 2] = i3;
   i2 = HEAP32[i6 >> 2] | 0;
   if (!i2) {
    _memcpy(i3 | 0, i5 | 0, 576) | 0;
    break;
   } else {
    i11 = 0;
    i13 = i2;
    HEAP32[i12 >> 2] = i11;
    STACKTOP = i14;
    return i13 | 0;
   }
  } else {
   i2 = _ft_mem_realloc(i4, 48, i3, i7, i5, i6) | 0;
   HEAP32[i1 >> 2] = i2;
   i2 = HEAP32[i6 >> 2] | 0;
   if (i2 | 0) {
    i11 = 0;
    i13 = i2;
    HEAP32[i12 >> 2] = i11;
    STACKTOP = i14;
    return i13 | 0;
   }
  } while (0);
  HEAP32[i8 >> 2] = i7;
  i2 = HEAP32[i13 >> 2] | 0;
  i4 = 13;
 } while (0);
 if ((i4 | 0) == 13) {
  i3 = HEAP32[i1 >> 2] | 0;
  i1 = i3 + (i2 * 48 | 0) | 0;
  if ((i2 | 0) > 0) i4 = 14;
 }
 if ((i4 | 0) == 14) {
  i6 = i9 + 24 | 0;
  while (1) {
   i5 = i1 + -48 | 0;
   i2 = HEAP16[i5 >> 1] | 0;
   if ((i2 | 0) < (i10 | 0)) break;
   if ((i2 | 0) == (i10 | 0)) if ((HEAP32[i6 >> 2] | 0) == (i11 | 0)) break;
   i2 = i5;
   i4 = i1 + 48 | 0;
   do {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
   } while ((i1 | 0) < (i4 | 0));
   if (i5 >>> 0 > i3 >>> 0) i1 = i5; else {
    i1 = i5;
    break;
   }
  }
  i2 = HEAP32[i13 >> 2] | 0;
 }
 HEAP32[i13 >> 2] = i2 + 1;
 i11 = i1;
 i13 = 0;
 HEAP32[i12 >> 2] = i11;
 STACKTOP = i14;
 return i13 | 0;
}

function _scanexp(i7, i3) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = i7 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i8 = i7 + 100 | 0;
 if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
  HEAP32[i9 >> 2] = i1 + 1;
  i1 = HEAPU8[i1 >> 0] | 0;
 } else i1 = ___shgetc(i7) | 0;
 switch (i1 | 0) {
 case 43:
 case 45:
  {
   i2 = (i1 | 0) == 45 & 1;
   i1 = HEAP32[i9 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
    HEAP32[i9 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i7) | 0;
   if ((i3 | 0) != 0 & (i1 + -48 | 0) >>> 0 > 9) if (HEAP32[i8 >> 2] | 0) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
   break;
  }
 default:
  i2 = 0;
 }
 if ((i1 + -48 | 0) >>> 0 > 9) if (!(HEAP32[i8 >> 2] | 0)) {
  i2 = -2147483648;
  i1 = 0;
 } else {
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
  i2 = -2147483648;
  i1 = 0;
 } else {
  i4 = 0;
  do {
   i4 = i1 + -48 + (i4 * 10 | 0) | 0;
   i1 = HEAP32[i9 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
    HEAP32[i9 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i7) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10 & (i4 | 0) < 214748364);
  i3 = ((i4 | 0) < 0) << 31 >> 31;
  if ((i1 + -48 | 0) >>> 0 < 10) {
   do {
    i3 = ___muldi3(i4 | 0, i3 | 0, 10, 0) | 0;
    i4 = tempRet0;
    i1 = _i64Add(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    i4 = _i64Add(i1 | 0, tempRet0 | 0, i3 | 0, i4 | 0) | 0;
    i3 = tempRet0;
    i1 = HEAP32[i9 >> 2] | 0;
    if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
     HEAP32[i9 >> 2] = i1 + 1;
     i1 = HEAPU8[i1 >> 0] | 0;
    } else i1 = ___shgetc(i7) | 0;
   } while ((i1 + -48 | 0) >>> 0 < 10 & ((i3 | 0) < 21474836 | (i3 | 0) == 21474836 & i4 >>> 0 < 2061584302));
   i5 = i1;
   i6 = i4;
  } else {
   i5 = i1;
   i6 = i4;
  }
  i1 = HEAP32[i8 >> 2] | 0;
  if ((i5 + -48 | 0) >>> 0 < 10) do {
   i4 = HEAP32[i9 >> 2] | 0;
   if (i4 >>> 0 < i1 >>> 0) {
    HEAP32[i9 >> 2] = i4 + 1;
    i4 = HEAPU8[i4 >> 0] | 0;
   } else {
    i4 = ___shgetc(i7) | 0;
    i1 = HEAP32[i8 >> 2] | 0;
   }
  } while ((i4 + -48 | 0) >>> 0 < 10);
  if (i1 | 0) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
  i9 = (i2 | 0) != 0;
  i1 = _i64Subtract(0, 0, i6 | 0, i3 | 0) | 0;
  i2 = i9 ? tempRet0 : i3;
  i1 = i9 ? i1 : i6;
 }
 tempRet0 = i2;
 return i1 | 0;
}

function _pop_arg(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0;
 L1 : do if (i2 >>> 0 <= 20) do switch (i2 | 0) {
 case 9:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   HEAP32[i1 >> 2] = i2;
   break L1;
  }
 case 10:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   i4 = i1;
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = ((i2 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 11:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   i4 = i1;
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = 0;
   break L1;
  }
 case 12:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   i2 = i4;
   i5 = HEAP32[i2 >> 2] | 0;
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 8;
   i4 = i1;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i4 + 4 >> 2] = i2;
   break L1;
  }
 case 13:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i4 = (i4 & 65535) << 16 >> 16;
   i5 = i1;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 14:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i5 = i1;
   HEAP32[i5 >> 2] = i4 & 65535;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 15:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i4 = (i4 & 255) << 24 >> 24;
   i5 = i1;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 16:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i5 = i1;
   HEAP32[i5 >> 2] = i4 & 255;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 17:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i3 >> 2] = i5 + 8;
   HEAPF64[i1 >> 3] = d6;
   break L1;
  }
 case 18:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i3 >> 2] = i5 + 8;
   HEAPF64[i1 >> 3] = d6;
   break L1;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function __FcValuePrintFile(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 1200 | 0;
 i8 = i12 + 72 | 0;
 i7 = i12 + 64 | 0;
 i6 = i12 + 56 | 0;
 i10 = i12 + 24 | 0;
 i9 = i12 + 16 | 0;
 i5 = i12 + 8 | 0;
 i4 = i12;
 i3 = i12 + 88 | 0;
 do switch (HEAP32[i2 >> 2] | 0) {
 case -1:
  {
   _fwrite(347084, 9, 1, i1) | 0;
   STACKTOP = i12;
   return;
  }
 case 0:
  {
   _fwrite(347094, 6, 1, i1) | 0;
   STACKTOP = i12;
   return;
  }
 case 1:
  {
   HEAP32[i4 >> 2] = HEAP32[i2 + 8 >> 2];
   _fprintf(i1, 347101, i4) | 0;
   STACKTOP = i12;
   return;
  }
 case 2:
  {
   HEAPF64[i5 >> 3] = +HEAPF64[i2 + 8 >> 3];
   _fprintf(i1, 347107, i5) | 0;
   STACKTOP = i12;
   return;
  }
 case 3:
  {
   HEAP32[i9 >> 2] = HEAP32[i2 + 8 >> 2];
   _fprintf(i1, 347113, i9) | 0;
   STACKTOP = i12;
   return;
  }
 case 4:
  {
   _fputs(HEAP32[i2 + 8 >> 2] | 0 ? 347118 : 347123, i1) | 0;
   STACKTOP = i12;
   return;
  }
 case 5:
  {
   i11 = HEAP32[i2 + 8 >> 2] | 0;
   d15 = +HEAPF64[i11 + 8 >> 3];
   d14 = +HEAPF64[i11 + 16 >> 3];
   d13 = +HEAPF64[i11 + 24 >> 3];
   HEAPF64[i10 >> 3] = +HEAPF64[i11 >> 3];
   HEAPF64[i10 + 8 >> 3] = d15;
   HEAPF64[i10 + 16 >> 3] = d14;
   HEAPF64[i10 + 24 >> 3] = d13;
   _fprintf(i1, 347129, i10) | 0;
   STACKTOP = i12;
   return;
  }
 case 6:
  {
   if ((HEAP32[22843] | 0) != (i1 | 0)) {
    STACKTOP = i12;
    return;
   }
   _FcCharSetPrint(HEAP32[i2 + 8 >> 2] | 0);
   STACKTOP = i12;
   return;
  }
 case 8:
  {
   i10 = HEAP32[i2 + 8 >> 2] | 0;
   _FcStrBufInit(i3, i12 + 176 | 0, 1024);
   if (!(_FcNameUnparseLangSet(i3, i10) | 0)) i11 = 14; else if (!(_FcStrBufChar(i3, 0) | 0)) i11 = 14; else {
    HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
    _printf(352569, i6) | 0;
   }
   if ((i11 | 0) == 14) _printf(347144, i7) | 0;
   _FcStrBufDestroy(i3);
   STACKTOP = i12;
   return;
  }
 case 7:
  {
   _fwrite(347166, 4, 1, i1) | 0;
   STACKTOP = i12;
   return;
  }
 case 9:
  {
   i11 = HEAP32[i2 + 8 >> 2] | 0;
   d15 = +HEAPF64[i11 + 8 >> 3];
   HEAPF64[i8 >> 3] = +HEAPF64[i11 >> 3];
   HEAPF64[i8 + 8 >> 3] = d15;
   _fprintf(i1, 347171, i8) | 0;
   STACKTOP = i12;
   return;
  }
 default:
  {
   STACKTOP = i12;
   return;
  }
 } while (0);
}

function _FT_Select_Metrics(i10, i1) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i11 = HEAP32[i10 + 88 >> 2] | 0;
 i12 = i11 + 12 | 0;
 i2 = HEAP32[i10 + 32 >> 2] | 0;
 i3 = HEAP32[i2 + (i1 << 4) + 8 >> 2] | 0;
 HEAP16[i12 >> 1] = (i3 + 32 | 0) >>> 6;
 i8 = HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0;
 HEAP16[i11 + 14 >> 1] = (i8 + 32 | 0) >>> 6;
 if (!(HEAP32[i10 + 8 >> 2] & 1)) {
  HEAP32[i11 + 16 >> 2] = 65536;
  HEAP32[i11 + 20 >> 2] = 65536;
  HEAP32[i11 + 24 >> 2] = i8;
  HEAP32[i11 + 28 >> 2] = 0;
  HEAP32[i11 + 32 >> 2] = HEAP16[i2 + (i1 << 4) >> 1] << 6;
  HEAP32[i11 + 36 >> 2] = i3;
  return;
 }
 i7 = HEAP16[i10 + 68 >> 1] | 0;
 i9 = i7 & 65535;
 i6 = (i3 | 0) < 0;
 i1 = i6 ? 0 - i3 | 0 : i3;
 i7 = i7 << 16 >> 16 == 0;
 do if (i7) i1 = 2147483647; else {
  if (i1 >>> 0 <= 65535) {
   i1 = ((i9 >>> 1 | i1 << 16) >>> 0) / (i9 >>> 0) | 0;
   break;
  }
  i2 = i1 >>> 16;
  i3 = i9 >>> 1 | i1 << 16;
  if (i2 >>> 0 < i9 >>> 0) {
   i4 = Math_clz32(i2 | 0) | 0;
   i5 = 32 - i4 | 0;
   i13 = i3 >>> i5 | i2 << i4;
   i2 = (i13 >>> 0) / (i9 >>> 0) | 0;
   i1 = i2;
   i2 = i13 - (Math_imul(i2, i9) | 0) | 0;
   i4 = i3 << i4;
   while (1) {
    i2 = i2 << 1 | i4 >>> 31;
    i3 = i2 >>> 0 < i9 >>> 0;
    i1 = (i3 ^ 1) & 1 | i1 << 1;
    i5 = i5 + -1 | 0;
    if (!i5) break; else {
     i2 = i2 - (i3 ? 0 : i9) | 0;
     i4 = i4 << 1;
    }
   }
  } else i1 = 2147483647;
 } while (0);
 HEAP32[i11 + 16 >> 2] = i6 ? 0 - i1 | 0 : i1;
 i6 = (i8 | 0) < 0;
 i1 = i6 ? 0 - i8 | 0 : i8;
 do if (i7) i1 = 2147483647; else {
  if (i1 >>> 0 <= 65535) {
   i1 = ((i9 >>> 1 | i1 << 16) >>> 0) / (i9 >>> 0) | 0;
   break;
  }
  i2 = i1 >>> 16;
  i3 = i9 >>> 1 | i1 << 16;
  if (i2 >>> 0 < i9 >>> 0) {
   i4 = Math_clz32(i2 | 0) | 0;
   i5 = 32 - i4 | 0;
   i13 = i3 >>> i5 | i2 << i4;
   i2 = (i13 >>> 0) / (i9 >>> 0) | 0;
   i1 = i2;
   i2 = i13 - (Math_imul(i2, i9) | 0) | 0;
   i4 = i3 << i4;
   while (1) {
    i2 = i2 << 1 | i4 >>> 31;
    i3 = i2 >>> 0 < i9 >>> 0;
    i1 = (i3 ^ 1) & 1 | i1 << 1;
    i5 = i5 + -1 | 0;
    if (!i5) break; else {
     i2 = i2 - (i3 ? 0 : i9) | 0;
     i4 = i4 << 1;
    }
   }
  } else i1 = 2147483647;
 } while (0);
 HEAP32[i11 + 20 >> 2] = i6 ? 0 - i1 | 0 : i1;
 _ft_recompute_scaled_metrics(i10, i12);
 return;
}

function _FT_Get_Sfnt_Name(i2, i12, i14) {
 i2 = i2 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 if (!((i2 | 0) != 0 & (i14 | 0) != 0)) {
  i14 = 6;
  return i14 | 0;
 }
 if (!(HEAP32[i2 + 8 >> 2] & 8)) {
  i14 = 6;
  return i14 | 0;
 }
 if ((HEAPU16[i2 + 340 >> 1] | 0) >>> 0 <= i12 >>> 0) {
  i14 = 6;
  return i14 | 0;
 }
 i13 = HEAP32[i2 + 344 + 12 >> 2] | 0;
 i10 = i13 + (i12 * 20 | 0) + 8 | 0;
 i1 = HEAP16[i10 >> 1] | 0;
 i3 = i1 & 65535;
 i11 = i13 + (i12 * 20 | 0) + 16 | 0;
 do if (!(i1 << 16 >> 16)) i1 = 0; else if (!(HEAP32[i11 >> 2] | 0)) {
  i9 = HEAP32[i2 + 100 >> 2] | 0;
  i7 = HEAP32[i2 + 104 >> 2] | 0;
  i2 = FUNCTION_TABLE_iii[HEAP32[i9 + 4 >> 2] & 255](i9, i3) | 0;
  if (!i2) HEAP32[i11 >> 2] = 0; else {
   _memset(i2 | 0, 0, i3 | 0) | 0;
   _memset(i2 | 0, 0, i3 | 0) | 0;
   HEAP32[i11 >> 2] = i2;
   i8 = HEAP32[i13 + (i12 * 20 | 0) + 12 >> 2] | 0;
   i6 = i7 + 20 | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i7 + 4 >> 2] | 0;
    if (i1 >>> 0 >= i8 >>> 0) {
     i5 = i2;
     i4 = 12;
    }
   } else if (!(FUNCTION_TABLE_iiiii[i1 & 127](i7, i8, 0, 0) | 0)) {
    i1 = HEAP32[i7 + 4 >> 2] | 0;
    i5 = HEAP32[i11 >> 2] | 0;
    i4 = 12;
   }
   if ((i4 | 0) == 12) {
    i3 = i7 + 8 | 0;
    HEAP32[i3 >> 2] = i8;
    i4 = HEAPU16[i10 >> 1] | 0;
    if (i1 >>> 0 > i8 >>> 0) {
     i2 = HEAP32[i6 >> 2] | 0;
     if (!i2) {
      i1 = i1 - i8 | 0;
      i1 = i1 >>> 0 > i4 >>> 0 ? i4 : i1;
      _memcpy(i5 | 0, (HEAP32[i7 >> 2] | 0) + i8 | 0, i1 | 0) | 0;
     } else i1 = FUNCTION_TABLE_iiiii[i2 & 127](i7, i8, i5, i4) | 0;
     HEAP32[i3 >> 2] = i1 + i8;
     if (i1 >>> 0 >= i4 >>> 0) {
      i1 = HEAP16[i10 >> 1] | 0;
      break;
     }
    }
   }
   i1 = HEAP32[i11 >> 2] | 0;
   if (i1 | 0) FUNCTION_TABLE_vii[HEAP32[i9 + 8 >> 2] & 63](i9, i1);
  }
  HEAP32[i11 >> 2] = 0;
  HEAP16[i10 >> 1] = 0;
  i1 = 0;
 } while (0);
 HEAP16[i14 >> 1] = HEAP16[i13 + (i12 * 20 | 0) >> 1] | 0;
 HEAP16[i14 + 2 >> 1] = HEAP16[i13 + (i12 * 20 | 0) + 2 >> 1] | 0;
 HEAP16[i14 + 4 >> 1] = HEAP16[i13 + (i12 * 20 | 0) + 4 >> 1] | 0;
 HEAP16[i14 + 6 >> 1] = HEAP16[i13 + (i12 * 20 | 0) + 6 >> 1] | 0;
 HEAP32[i14 + 8 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i14 + 12 >> 2] = i1 & 65535;
 i14 = 0;
 return i14 | 0;
}

function _Compute_Point_Displacement(i8, i9, i10, i11, i14) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i15;
 if (!(HEAP8[i8 + 368 >> 0] & 1)) {
  i13 = i8 + 72 | 0;
  i12 = HEAP32[i13 >> 2] | 0;
  i13 = HEAP32[i13 + 4 >> 2] | 0;
  i4 = HEAP16[i8 + 80 >> 1] | 0;
  i5 = HEAP16[i8 + 82 >> 1] | 0;
  i6 = HEAP32[i8 + 84 >> 2] | 0;
  i7 = HEAP32[i8 + 88 >> 2] | 0;
  i1 = i8 + 92 | 0;
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  i1 = i8 + 288 | 0;
 } else {
  i13 = i8 + 36 | 0;
  i12 = HEAP32[i13 >> 2] | 0;
  i13 = HEAP32[i13 + 4 >> 2] | 0;
  i4 = HEAP16[i8 + 44 >> 1] | 0;
  i5 = HEAP16[i8 + 46 >> 1] | 0;
  i6 = HEAP32[i8 + 48 >> 2] | 0;
  i7 = HEAP32[i8 + 52 >> 2] | 0;
  i1 = i8 + 56 | 0;
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  i1 = i8 + 286 | 0;
 }
 i1 = HEAP16[i1 >> 1] | 0;
 i2 = i1 & 65535;
 if ((i1 & 65535) < (i4 & 65535)) {
  i16 = i11;
  HEAP32[i16 >> 2] = i12;
  HEAP32[i16 + 4 >> 2] = i13;
  HEAP16[i11 + 8 >> 1] = i4;
  HEAP16[i11 + 10 >> 1] = i5;
  HEAP32[i11 + 12 >> 2] = i6;
  HEAP32[i11 + 16 >> 2] = i7;
  i13 = i11 + 20 | 0;
  HEAP32[i13 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP16[i14 >> 1] = i1;
  i13 = FUNCTION_TABLE_iiii[HEAP32[i8 + 572 >> 2] & 127](i8, (HEAP32[i7 + (i2 << 3) >> 2] | 0) - (HEAP32[i6 + (i2 << 3) >> 2] | 0) | 0, (HEAP32[i7 + (i2 << 3) + 4 >> 2] | 0) - (HEAP32[i6 + (i2 << 3) + 4 >> 2] | 0) | 0) | 0;
  i14 = i8 + 564 | 0;
  i12 = _FT_MulDiv(i13, HEAP16[i8 + 298 >> 1] | 0, HEAP32[i14 >> 2] | 0) | 0;
  HEAP32[i9 >> 2] = i12;
  i14 = _FT_MulDiv(i13, HEAP16[i8 + 300 >> 1] | 0, HEAP32[i14 >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = i14;
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (HEAP8[i8 + 561 >> 0] | 0) HEAP32[i8 + 12 >> 2] = 134;
 HEAP16[i14 >> 1] = 0;
 i16 = 1;
 STACKTOP = i15;
 return i16 | 0;
}

function _normal_scanComment(i8, i1, i9, i10) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if ((i1 | 0) == (i9 | 0)) {
  i10 = -1;
  return i10 | 0;
 }
 if ((HEAP8[i1 >> 0] | 0) != 45) {
  HEAP32[i10 >> 2] = i1;
  i10 = 0;
  return i10 | 0;
 }
 i1 = i1 + 1 | 0;
 if ((i1 | 0) == (i9 | 0)) {
  i10 = -1;
  return i10 | 0;
 }
 i7 = i8 + 76 | 0;
 i2 = i9;
 i4 = i8 + 356 | 0;
 i5 = i8 + 360 | 0;
 i6 = i8 + 364 | 0;
 i3 = i1;
 L11 : while (1) {
  switch (HEAP8[i7 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0) {
  case 8:
  case 1:
  case 0:
   {
    i2 = 19;
    break L11;
   }
  case 5:
   {
    if ((i2 - i3 | 0) < 2) {
     i1 = -2;
     i2 = 28;
     break L11;
    }
    if (FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i8, i3) | 0) {
     i2 = 9;
     break L11;
    }
    i1 = i3 + 2 | 0;
    break;
   }
  case 6:
   {
    if ((i2 - i3 | 0) < 3) {
     i1 = -2;
     i2 = 28;
     break L11;
    }
    if (FUNCTION_TABLE_iii[HEAP32[i5 >> 2] & 255](i8, i3) | 0) {
     i2 = 13;
     break L11;
    }
    i1 = i3 + 3 | 0;
    break;
   }
  case 7:
   {
    if ((i2 - i3 | 0) < 4) {
     i1 = -2;
     i2 = 28;
     break L11;
    }
    if (FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i8, i3) | 0) {
     i2 = 17;
     break L11;
    }
    i1 = i3 + 4 | 0;
    break;
   }
  case 27:
   {
    i1 = i3 + 1 | 0;
    if ((i1 | 0) == (i9 | 0)) {
     i1 = -1;
     i2 = 28;
     break L11;
    }
    if ((HEAP8[i1 >> 0] | 0) == 45) {
     i2 = 23;
     break L11;
    }
    break;
   }
  default:
   i1 = i3 + 1 | 0;
  }
  if ((i1 | 0) == (i9 | 0)) {
   i1 = -1;
   i2 = 28;
   break;
  } else i3 = i1;
 }
 if ((i2 | 0) == 9) {
  HEAP32[i10 >> 2] = i3;
  i10 = 0;
  return i10 | 0;
 } else if ((i2 | 0) == 13) {
  HEAP32[i10 >> 2] = i3;
  i10 = 0;
  return i10 | 0;
 } else if ((i2 | 0) == 17) {
  HEAP32[i10 >> 2] = i3;
  i10 = 0;
  return i10 | 0;
 } else if ((i2 | 0) == 19) {
  HEAP32[i10 >> 2] = i3;
  i10 = 0;
  return i10 | 0;
 } else if ((i2 | 0) == 23) {
  i1 = i3 + 2 | 0;
  if ((i1 | 0) == (i9 | 0)) {
   i10 = -1;
   return i10 | 0;
  }
  if ((HEAP8[i1 >> 0] | 0) == 62) {
   HEAP32[i10 >> 2] = i3 + 3;
   i10 = 13;
   return i10 | 0;
  } else {
   HEAP32[i10 >> 2] = i1;
   i10 = 0;
   return i10 | 0;
  }
 } else if ((i2 | 0) == 28) return i1 | 0;
 return 0;
}

function _FcFileScanConfig(i12, i4, i13, i1, i14) {
 i12 = i12 | 0;
 i4 = i4 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i17 = i19;
 i15 = i19 + 8 | 0;
 i16 = i19 + 4 | 0;
 if (!(_FcStat(i1, i15) | 0)) if ((HEAP32[i15 + 12 >> 2] & 61440 | 0) == 16384) {
  i2 = _FcConfigGetSysRoot(i14) | 0;
  if (i2) {
   i3 = _strlen(i2) | 0;
   if (!(_strncmp(i1, i2, i3) | 0)) {
    if ((HEAP8[i1 + i3 >> 0] | 0) == 47) {
     i2 = i3 + 1 | 0;
     i2 = (HEAP8[i1 + i2 >> 0] | 0) == 47 ? i2 : i3;
    } else i2 = i3 + -1 | 0;
    i1 = i1 + i2 | 0;
   }
  }
  i18 = _FcStrSetAdd(i4, i1) | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 if (!i12) {
  i18 = 1;
  STACKTOP = i19;
  return i18 | 0;
 }
 HEAP32[i15 >> 2] = 0;
 i8 = _FcConfigGetSysRoot(i14) | 0;
 i9 = (i8 | 0) == 0;
 i10 = (i14 | 0) != 0;
 i11 = HEAP32[22843] | 0;
 i2 = 1;
 i7 = 0;
 do {
  if (HEAP32[91917] & 128 | 0) {
   HEAP32[i17 >> 2] = i1;
   _printf(348387, i17) | 0;
   _fflush(i11) | 0;
  }
  i3 = _FcFreeTypeQuery(i1, i7, i13, i15) | 0;
  if (HEAP32[91917] & 128 | 0) _puts(348408) | 0;
  if (!i9) {
   i5 = _strlen(i8) | 0;
   HEAP32[i16 >> 2] = 0;
   if (!(_FcPatternObjectGetString(i3, 21, 0, i16) | 0)) {
    i4 = HEAP32[i16 >> 2] | 0;
    if (!(_strncmp(i4, i8, i5) | 0)) {
     i6 = ___strdup(i4) | 0;
     _FcPatternObjectDel(i3, 21) | 0;
     if ((HEAP8[i6 + i5 >> 0] | 0) == 47) {
      i4 = i5 + 1 | 0;
      i4 = (HEAP8[i6 + i4 >> 0] | 0) == 47 ? i4 : i5;
     } else i4 = i5 + -1 | 0;
     _FcPatternObjectAddString(i3, 21, i6 + i4 | 0) | 0;
     _FcStrFree(i6);
    }
   }
  }
  if (i10 & (i3 | 0) != 0) if (!(_FcConfigSubstitute(i14, i3, 2) | 0)) {
   _FcPatternDestroy(i3);
   i3 = 0;
   i2 = 0;
  } else i18 = 29; else if (!i3) {
   i3 = 0;
   i2 = 0;
  } else i18 = 29;
  if ((i18 | 0) == 29) {
   i18 = 0;
   if (HEAP32[91917] & 256 | 0) {
    _puts(348413) | 0;
    _FcPatternPrint(i3);
   }
   if (!(_FcFontSetAdd(i12, i3) | 0)) {
    _FcPatternDestroy(i3);
    i3 = 0;
    i2 = 0;
   }
  }
  i7 = i7 + 1 | 0;
 } while ((i2 | 0) != 0 & (i3 | 0) != 0 & (i7 | 0) < (HEAP32[i15 >> 2] | 0));
 i18 = i2;
 STACKTOP = i19;
 return i18 | 0;
}

function _outline_compare(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 L1 : do if ((i1 | 0) == (HEAP32[i3 >> 2] | 0)) {
  switch (i1 | 0) {
  case 0:
   break;
  case 1:
   {
    if ((HEAP32[i2 + 8 >> 2] | 0) != (HEAP32[i3 + 8 >> 2] | 0)) {
     i1 = 0;
     break L1;
    }
    if ((HEAP32[i2 + 12 >> 2] | 0) != (HEAP32[i3 + 12 >> 2] | 0)) {
     i1 = 0;
     break L1;
    }
    if ((HEAP32[i2 + 16 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) {
     i1 = 0;
     break L1;
    }
    if ((HEAP32[i2 + 20 >> 2] | 0) != (HEAP32[i3 + 20 >> 2] | 0)) {
     i1 = 0;
     break L1;
    }
    if ((HEAP32[i2 + 24 >> 2] | 0) != (HEAP32[i3 + 24 >> 2] | 0)) {
     i1 = 0;
     break L1;
    }
    if ((HEAP32[i2 + 28 >> 2] | 0) != (HEAP32[i3 + 28 >> 2] | 0)) {
     i1 = 0;
     break L1;
    }
    if ((HEAP32[i2 + 32 >> 2] | 0) != (HEAP32[i3 + 32 >> 2] | 0)) {
     i1 = 0;
     break L1;
    }
    if ((HEAP32[i2 + 36 >> 2] | 0) != (HEAP32[i3 + 36 >> 2] | 0)) {
     i1 = 0;
     break L1;
    }
    if ((HEAP32[i2 + 40 >> 2] | 0) != (HEAP32[i3 + 40 >> 2] | 0)) {
     i1 = 0;
     break L1;
    }
    i1 = (_strcmp(HEAP32[i2 + 44 >> 2] | 0, HEAP32[i3 + 44 >> 2] | 0) | 0) == 0;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
  if ((HEAP32[i2 + 8 >> 2] | 0) == (HEAP32[i3 + 8 >> 2] | 0)) if (+HEAPF64[i2 + 16 >> 3] == +HEAPF64[i3 + 16 >> 3]) if ((HEAP32[i2 + 24 >> 2] | 0) == (HEAP32[i3 + 24 >> 2] | 0)) if ((HEAP32[i2 + 28 >> 2] | 0) == (HEAP32[i3 + 28 >> 2] | 0)) if ((HEAP32[i2 + 32 >> 2] | 0) == (HEAP32[i3 + 32 >> 2] | 0)) if ((HEAP32[i2 + 36 >> 2] | 0) == (HEAP32[i3 + 36 >> 2] | 0)) if ((HEAP32[i2 + 40 >> 2] | 0) == (HEAP32[i3 + 40 >> 2] | 0)) if ((HEAP32[i2 + 44 >> 2] | 0) == (HEAP32[i3 + 44 >> 2] | 0)) if ((HEAP32[i2 + 48 >> 2] | 0) == (HEAP32[i3 + 48 >> 2] | 0)) if ((HEAP32[i2 + 52 >> 2] | 0) == (HEAP32[i3 + 52 >> 2] | 0)) if ((HEAP32[i2 + 56 >> 2] | 0) == (HEAP32[i3 + 56 >> 2] | 0)) if ((HEAP32[i2 + 60 >> 2] | 0) == (HEAP32[i3 + 60 >> 2] | 0)) i1 = (HEAP32[i2 + 64 >> 2] | 0) == (HEAP32[i3 + 64 >> 2] | 0); else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0;
 } else i1 = 0; while (0);
 return i1 & 1 | 0;
}

function _tt_face_load_strike_metrics(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7;
 if ((HEAP32[i4 + 736 >> 2] | 0) >>> 0 <= i1 >>> 0) {
  i6 = 6;
  STACKTOP = i7;
  return i6 | 0;
 }
 switch (HEAP32[i4 + 732 >> 2] | 0) {
 case 2:
 case 1:
  {
   i6 = (HEAP32[i4 + 724 >> 2] | 0) + 8 + (i1 * 48 | 0) | 0;
   HEAP16[i5 >> 1] = HEAPU8[i6 + 44 >> 0] | 0;
   HEAP16[i5 + 2 >> 1] = HEAPU8[i6 + 45 >> 0] | 0;
   i3 = HEAP8[i6 + 16 >> 0] << 6;
   HEAP32[i5 + 12 >> 2] = i3;
   i4 = HEAP8[i6 + 17 >> 0] << 6;
   HEAP32[i5 + 16 >> 2] = i4;
   HEAP32[i5 + 20 >> 2] = i3 - i4;
   HEAP32[i5 + 24 >> 2] = (HEAPU8[i6 + 18 >> 0] | 0) + (HEAP8[i6 + 22 >> 0] | 0) + (HEAP8[i6 + 23 >> 0] | 0) << 6;
   i6 = 0;
   STACKTOP = i7;
   return i6 | 0;
  }
 case 3:
  {
   i6 = HEAP32[i4 + 104 >> 2] | 0;
   i2 = (HEAP32[i4 + 724 >> 2] | 0) + 8 + (i1 << 2) + 4 + -4 | 0;
   i2 = HEAPU8[i2 + 1 >> 0] << 16 | HEAPU8[i2 >> 0] << 24 | HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0];
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i4 + 508 >> 2] & 127](i4, 1935829368, i6, i3) | 0;
   if (!i1) if ((i2 + 4 | 0) >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) i1 = 3; else {
    i1 = _FT_Stream_Seek(i6, (_FT_Stream_Pos(i6) | 0) + i2 | 0) | 0;
    if (!i1) {
     i1 = _FT_Stream_EnterFrame(i6, 4) | 0;
     if (!i1) {
      i3 = _FT_Stream_GetUShort(i6) | 0;
      _FT_Stream_GetUShort(i6) | 0;
      _FT_Stream_ExitFrame(i6);
      i1 = HEAPU16[i4 + 178 >> 1] | 0;
      HEAP16[i5 >> 1] = i3;
      HEAP16[i5 + 2 >> 1] = i3;
      i2 = HEAP16[i4 + 220 >> 1] | 0;
      i6 = (i3 & 65535) << 6;
      i3 = (Math_imul(i6, i2) | 0) / (i1 | 0) | 0;
      HEAP32[i5 + 12 >> 2] = i3;
      i3 = HEAP16[i4 + 222 >> 1] | 0;
      i8 = (Math_imul(i6, i3) | 0) / (i1 | 0) | 0;
      HEAP32[i5 + 16 >> 2] = i8;
      i3 = (Math_imul(i6, i2 - i3 + (HEAP16[i4 + 224 >> 1] | 0) | 0) | 0) / (i1 | 0) | 0;
      HEAP32[i5 + 20 >> 2] = i3;
      i1 = ((Math_imul(i6, HEAPU16[i4 + 226 >> 1] | 0) | 0) >>> 0) / (i1 >>> 0) | 0;
      HEAP32[i5 + 24 >> 2] = i1;
      i1 = 0;
     }
    }
   }
   i8 = i1;
   STACKTOP = i7;
   return i8 | 0;
  }
 default:
  {
   i8 = 2;
   STACKTOP = i7;
   return i8 | 0;
  }
 }
 return 0;
}

function _FcDirCacheProcess(i9, i2, i11, i12, i16) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i16 = i16 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i5 = i17 + 40 | 0;
 i8 = i17 + 32 | 0;
 i7 = i17 + 24 | 0;
 i6 = i17 + 8 | 0;
 i1 = i17;
 i13 = i17 + 196 | 0;
 i14 = i17 + 120 | 0;
 i15 = i17 + 44 | 0;
 i4 = _FcConfigGetSysRoot(i9) | 0;
 i3 = (i4 | 0) != 0;
 if (i3) {
  HEAP32[i1 >> 2] = i2;
  HEAP32[i1 + 4 >> 2] = 0;
  i1 = _FcStrBuildFilename(i4, i1) | 0;
 } else i1 = ___strdup(i2) | 0;
 i10 = (_FcStatChecksum(i1, i15) | 0) < 0;
 _FcStrFree(i1);
 if (i10) {
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 _FcDirCacheBasename(i2, i13);
 i10 = _FcStrListCreate(HEAP32[i9 + 12 >> 2] | 0) | 0;
 if (!i10) {
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i1 = _FcStrListNext(i10) | 0;
 L11 : do if (!i1) i1 = 0; else {
  L13 : do if (i3) while (1) {
   HEAP32[i6 >> 2] = i1;
   HEAP32[i6 + 4 >> 2] = i13;
   HEAP32[i6 + 8 >> 2] = 0;
   i2 = _FcStrBuildFilename(i4, i6) | 0;
   if (!i2) {
    i1 = 0;
    break L11;
   }
   i3 = _FcOpen(i2, 0, i7) | 0;
   do if ((i3 | 0) >= 0) if ((_fstat(i3, i14) | 0) < 0) {
    _close(i3) | 0;
    break;
   } else {
    i1 = FUNCTION_TABLE_iiiiii[i11 & 127](i9, i3, i14, i15, i12) | 0;
    _close(i3) | 0;
    if (!i1) break; else break L13;
   } while (0);
   _FcStrFree(i2);
   i1 = _FcStrListNext(i10) | 0;
   if (!i1) {
    i1 = 0;
    break L11;
   }
  } else while (1) {
   HEAP32[i8 >> 2] = i13;
   HEAP32[i8 + 4 >> 2] = 0;
   i2 = _FcStrBuildFilename(i1, i8) | 0;
   if (!i2) {
    i1 = 0;
    break L11;
   }
   i3 = _FcOpen(i2, 0, i5) | 0;
   do if ((i3 | 0) >= 0) if ((_fstat(i3, i14) | 0) < 0) {
    _close(i3) | 0;
    break;
   } else {
    i1 = FUNCTION_TABLE_iiiiii[i11 & 127](i9, i3, i14, i15, i12) | 0;
    _close(i3) | 0;
    if (!i1) break; else break L13;
   } while (0);
   _FcStrFree(i2);
   i1 = _FcStrListNext(i10) | 0;
   if (!i1) {
    i1 = 0;
    break L11;
   }
  } while (0);
  if (!i16) {
   _FcStrFree(i2);
   break;
  } else {
   HEAP32[i16 >> 2] = i2;
   break;
  }
 } while (0);
 _FcStrListDone(i10);
 i16 = i1;
 STACKTOP = i17;
 return i16 | 0;
}

function _FcScandir(i1, i12, i11, i13) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0, i15 = 0;
 i15 = _opendir(i1) | 0;
 if (!i15) {
  i15 = -1;
  return i15 | 0;
 }
 i7 = _malloc(512) | 0;
 if (!i7) {
  _closedir(i15) | 0;
  i15 = ___errno_location() | 0;
  HEAP32[i15 >> 2] = 12;
  i15 = -1;
  return i15 | 0;
 }
 L8 : do if (!i11) {
  HEAP32[i7 >> 2] = 0;
  i3 = _readdir(i15) | 0;
  if (!i3) {
   i2 = 0;
   i1 = i7;
   i14 = 20;
  } else {
   i9 = 0;
   i5 = 128;
   i2 = i7;
   i1 = i7;
   i6 = i7;
   i4 = i3;
   i3 = i7;
   while (1) {
    i8 = (_strlen(i4 + 11 | 0) | 0) + 15 & -4;
    i7 = _malloc(i8) | 0;
    _memcpy(i7 | 0, i4 | 0, i8 | 0) | 0;
    i8 = i9 + 1 | 0;
    if (i8 >>> 0 >= i5 >>> 0) {
     i1 = i5 + 128 | 0;
     i4 = _realloc(i6, i1 << 2) | 0;
     if (!i4) break L8;
     i5 = i1;
     i2 = i4;
     i1 = i4;
     i6 = i4;
     i3 = i4;
    }
    HEAP32[i2 + (i9 << 2) >> 2] = i7;
    HEAP32[i2 + (i8 << 2) >> 2] = 0;
    i4 = _readdir(i15) | 0;
    if (!i4) {
     i2 = i8;
     i14 = 20;
     break;
    } else i9 = i8;
   }
  }
 } else {
  i10 = 0;
  i5 = 128;
  i2 = i7;
  i1 = i7;
  i6 = i7;
  i4 = i7;
  i3 = i7;
  while (1) {
   HEAP32[i4 >> 2] = 0;
   do {
    i4 = _readdir(i15) | 0;
    if (!i4) {
     i2 = i10;
     i14 = 20;
     break L8;
    }
   } while (!(FUNCTION_TABLE_ii[i11 & 63](i4) | 0));
   i8 = (_strlen(i4 + 11 | 0) | 0) + 15 & -4;
   i9 = _malloc(i8) | 0;
   _memcpy(i9 | 0, i4 | 0, i8 | 0) | 0;
   i8 = i10 + 1 | 0;
   if (i8 >>> 0 < i5 >>> 0) i7 = i2; else {
    i1 = i5 + 128 | 0;
    i4 = _realloc(i6, i1 << 2) | 0;
    if (!i4) break L8;
    i5 = i1;
    i7 = i4;
    i1 = i4;
    i6 = i4;
    i3 = i4;
   }
   HEAP32[i7 + (i10 << 2) >> 2] = i9;
   i10 = i8;
   i2 = i7;
   i4 = i7 + (i8 << 2) | 0;
  }
 } while (0);
 if ((i14 | 0) == 20) {
  _closedir(i15) | 0;
  _qsort(i1, i2, 4, i13);
  HEAP32[i12 >> 2] = i1;
  i15 = i2;
  return i15 | 0;
 }
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) do {
  _free(i1);
  i2 = i2 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
 } while ((i1 | 0) != 0);
 _free(i3);
 _closedir(i15) | 0;
 i15 = ___errno_location() | 0;
 HEAP32[i15 >> 2] = 12;
 i15 = -1;
 return i15 | 0;
}

function _FcPatternObjectAddWithBinding(i3, i4, i7, i5, i8) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i2 = i10 + 24 | 0;
 i6 = i10;
 i1 = i10 + 8 | 0;
 if ((HEAP32[i3 + 12 >> 2] | 0) == -1) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i9 = _calloc(1, 32) | 0;
 if (!i9) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 };
 HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 _FcValueSave(i1, i2);
 HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i1 = HEAP32[i7 >> 2] | 0;
 L7 : do if (i1 | 0) {
  if (!(_FcObjectValidType(i4, i1) | 0)) {
   i8 = HEAP32[22811] | 0;
   i5 = _FcObjectName(i4) | 0;
   HEAP32[i6 >> 2] = i5;
   _fprintf(i8, 349351, i6) | 0;
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   _FcValuePrintFile(i8, i2);
   _fputc(10, i8) | 0;
   break;
  }
  i1 = i9 + 8 | 0;
  HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
  HEAP32[i9 + 24 >> 2] = i5;
  HEAP32[i9 >> 2] = 0;
  i1 = _FcPatternObjectInsertElt(i3, i4) | 0;
  if (i1 | 0) {
   i1 = i1 + 4 | 0;
   if (!i8) HEAP32[i9 >> 2] = HEAP32[i1 >> 2]; else while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) break; else i1 = i2;
   }
   HEAP32[i1 >> 2] = i9;
   i9 = 1;
   STACKTOP = i10;
   return i9 | 0;
  }
  i1 = HEAP32[i7 + 8 >> 2] | 0;
  switch (HEAP32[i7 >> 2] | 0) {
  case 3:
   {
    _free(i1);
    break L7;
   }
  case 5:
   {
    _FcMatrixFree(i1);
    break L7;
   }
  case 6:
   {
    _FcCharSetDestroy(i1);
    break L7;
   }
  case 8:
   {
    _FcLangSetDestroy(i1);
    break L7;
   }
  case 9:
   {
    _FcRangeDestroy(i1);
    break L7;
   }
  default:
   break L7;
  }
 } while (0);
 _free(i9);
 i9 = 0;
 STACKTOP = i10;
 return i9 | 0;
}

function _FcPatternObjectGet(i1, i6, i2, i9) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 if (!i1) {
  i9 = 1;
  return i9 | 0;
 }
 i7 = (HEAP32[i1 + 8 >> 2] | 0) + i1 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 L4 : do if ((i1 | 0) < 1) {
  i3 = 1;
  i1 = 0;
  i8 = 9;
 } else {
  i3 = i1 + -1 | 0;
  i5 = 0;
  while (1) {
   i4 = i3;
   while (1) {
    i1 = i4 + i5 >> 1;
    i3 = (HEAP32[i7 + (i1 << 3) >> 2] | 0) - i6 | 0;
    if (!i3) break L4;
    if ((i3 | 0) < 0) break;
    if ((i5 | 0) < (i1 | 0)) i4 = i1 + -1 | 0; else {
     i8 = 9;
     break L4;
    }
   }
   if ((i1 | 0) < (i4 | 0)) {
    i3 = i4;
    i5 = i1 + 1 | 0;
   } else {
    i8 = 9;
    break;
   }
  }
 } while (0);
 if ((i8 | 0) == 9) i1 = ~((i3 >>> 31) + i1);
 i3 = i7 + (i1 << 3) | 0;
 if ((i1 | 0) < 0 | (i3 | 0) == 0) {
  i9 = 1;
  return i9 | 0;
 }
 i7 = HEAP32[i7 + (i1 << 3) + 4 >> 2] | 0;
 i1 = i7;
 i1 = (i1 & 1 | 0) == 0 ? i7 : (i1 & -2) + i3 | 0;
 if (!i1) {
  i9 = 3;
  return i9 | 0;
 } else i5 = i1;
 while (1) {
  if (!i2) break;
  i7 = HEAP32[i5 >> 2] | 0;
  i1 = i7;
  i1 = (i1 & 1 | 0) == 0 ? i7 : (i1 & -2) + i5 | 0;
  if (!i1) {
   i1 = 3;
   i8 = 21;
   break;
  } else {
   i2 = i2 + -1 | 0;
   i5 = i1;
  }
 }
 if ((i8 | 0) == 21) return i1 | 0;
 i2 = i5 + 8 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 switch (i1 | 0) {
 case 3:
  {
   i7 = HEAP32[i5 + 16 >> 2] | 0;
   i8 = i7;
   i1 = 3;
   i3 = 0;
   i4 = 0;
   i2 = (i8 & 1 | 0) == 0 ? i7 : (i8 & -2) + i2 | 0;
   break;
  }
 case 6:
  {
   i7 = HEAP32[i5 + 16 >> 2] | 0;
   i8 = i7;
   i1 = 6;
   i3 = 0;
   i4 = 0;
   i2 = (i8 & 1 | 0) == 0 ? i7 : (i8 & -2) + i2 | 0;
   break;
  }
 case 8:
  {
   i7 = HEAP32[i5 + 16 >> 2] | 0;
   i8 = i7;
   i1 = 8;
   i3 = 0;
   i4 = 0;
   i2 = (i8 & 1 | 0) == 0 ? i7 : (i8 & -2) + i2 | 0;
   break;
  }
 case 9:
  {
   i7 = HEAP32[i5 + 16 >> 2] | 0;
   i8 = i7;
   i1 = 9;
   i3 = 0;
   i4 = 0;
   i2 = (i8 & 1 | 0) == 0 ? i7 : (i8 & -2) + i2 | 0;
   break;
  }
 default:
  {
   i3 = HEAP32[i2 + 12 >> 2] | 0;
   i4 = HEAP32[i2 + 4 >> 2] | 0;
   i2 = HEAP32[i5 + 16 >> 2] | 0;
  }
 }
 HEAP32[i9 >> 2] = i1;
 HEAP32[i9 + 4 >> 2] = i4;
 HEAP32[i9 + 8 >> 2] = i2;
 HEAP32[i9 + 12 >> 2] = i3;
 i9 = 0;
 return i9 | 0;
}

function _little2_attributeValueTok(i3, i5, i6, i8) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0;
 if ((i5 | 0) == (i6 | 0)) {
  i8 = -4;
  return i8 | 0;
 }
 i7 = i3 + 76 | 0;
 i1 = i5;
 L4 : while (1) {
  L6 : do switch (HEAP8[i1 + 1 >> 0] | 0) {
  case 0:
   {
    switch (HEAP8[i7 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
    case 3:
     {
      i4 = 7;
      break L4;
     }
    case 2:
     {
      i4 = 10;
      break L4;
     }
    case 10:
     {
      i4 = 11;
      break L4;
     }
    case 9:
     {
      i4 = 14;
      break L4;
     }
    case 21:
     {
      i4 = 20;
      break L4;
     }
    case 6:
     {
      i2 = 3;
      break L6;
     }
    case 7:
     {
      i4 = 6;
      break L6;
     }
    case 5:
     break;
    default:
     {
      i4 = 23;
      break L6;
     }
    }
    i2 = 2;
    break;
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i4 = 6;
    break;
   }
  default:
   i4 = 23;
  } while (0);
  if ((i4 | 0) == 6) {
   i4 = 0;
   i2 = 4;
  } else if ((i4 | 0) == 23) {
   i4 = 0;
   i2 = 2;
  }
  i1 = i1 + i2 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i4 = 25;
   break;
  }
 }
 if ((i4 | 0) == 7) if ((i1 | 0) == (i5 | 0)) {
  i8 = _little2_scanRef(i3, i5 + 2 | 0, i6, i8) | 0;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 10) {
  HEAP32[i8 >> 2] = i1;
  i8 = 0;
  return i8 | 0;
 } else if ((i4 | 0) == 11) if ((i1 | 0) == (i5 | 0)) {
  HEAP32[i8 >> 2] = i5 + 2;
  i8 = 7;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 14) {
  if ((i1 | 0) != (i5 | 0)) {
   HEAP32[i8 >> 2] = i1;
   i8 = 6;
   return i8 | 0;
  }
  i1 = i5 + 2 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i8 = -3;
   return i8 | 0;
  }
  if (!(HEAP8[i5 + 3 >> 0] | 0)) i1 = (HEAP8[i7 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) == 10 ? i5 + 4 | 0 : i1;
  HEAP32[i8 >> 2] = i1;
  i8 = 7;
  return i8 | 0;
 } else if ((i4 | 0) == 20) if ((i1 | 0) == (i5 | 0)) {
  HEAP32[i8 >> 2] = i5 + 2;
  i8 = 39;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 25) {
  HEAP32[i8 >> 2] = i6;
  i8 = 6;
  return i8 | 0;
 }
 return 0;
}

function _Line_Up(i11, i4, i2, i1, i6, i3, i7) {
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i5 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i12 = i1 - i4 | 0;
 i13 = i6 - i2 | 0;
 if ((i13 | 0) < 1 | (i6 | 0) < (i3 | 0) | (i2 | 0) > (i7 | 0)) {
  i13 = 0;
  return i13 | 0;
 }
 if ((i3 | 0) > (i2 | 0)) {
  i4 = (_FT_MulDiv(i12, i3 - i2 | 0, i13) | 0) + i4 | 0;
  i2 = HEAP32[i11 >> 2] | 0;
  i9 = 0;
  i5 = i3 >> i2;
 } else {
  i10 = HEAP32[i11 >> 2] | 0;
  i9 = (HEAP32[i11 + 4 >> 2] | 0) + -1 & i2;
  i5 = i2 >> i10;
  i2 = i10;
 }
 if ((i6 | 0) > (i7 | 0)) {
  i8 = 0;
  i1 = i7;
 } else {
  i8 = (HEAP32[i11 + 4 >> 2] | 0) + -1 & i6;
  i1 = i6;
 }
 i3 = i1 >> i2;
 do if ((i9 | 0) > 0) if ((i5 | 0) == (i3 | 0)) {
  i13 = 0;
  return i13 | 0;
 } else {
  i2 = i5 + 1 | 0;
  i4 = (_FT_MulDiv(i12, (HEAP32[i11 + 4 >> 2] | 0) - i9 | 0, i13) | 0) + i4 | 0;
  i1 = i11 + 87 | 0;
  break;
 } else {
  i1 = i11 + 87 | 0;
  if (!(HEAP8[i1 >> 0] | 0)) i2 = i5; else {
   i2 = i11 + 40 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -4;
   HEAP8[i1 >> 0] = 0;
   i2 = i5;
  }
 } while (0);
 HEAP8[i1 >> 0] = (i8 | 0) == 0 & 1;
 i1 = i11 + 86 | 0;
 if (HEAP8[i1 >> 0] | 0) {
  HEAP32[(HEAP32[i11 + 88 >> 2] | 0) + 20 >> 2] = i2;
  HEAP8[i1 >> 0] = 0;
 }
 i3 = i3 - i2 | 0;
 i6 = i3 + 1 | 0;
 i10 = i11 + 40 | 0;
 if (((HEAP32[i10 >> 2] | 0) + (i6 << 2) | 0) >>> 0 >= (HEAP32[i11 + 36 >> 2] | 0) >>> 0) {
  HEAP32[i11 + 44 >> 2] = 98;
  i13 = 1;
  return i13 | 0;
 }
 i2 = i11 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i12 | 0) > 0) {
  i8 = _FT_MulDiv_No_Round(i1, i12, i13) | 0;
  i9 = 1;
  i1 = i12;
 } else {
  i12 = 0 - i12 | 0;
  i8 = 0 - (_FT_MulDiv_No_Round(i1, i12, i13) | 0) | 0;
  i9 = -1;
  i1 = i12;
 }
 i7 = (Math_imul(HEAP32[i2 >> 2] | 0, i1) | 0) % (i13 | 0) | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i3 | 0) > -1) {
  i5 = 0 - i13 | 0;
  while (1) {
   i2 = i1 + 4 | 0;
   HEAP32[i1 >> 2] = i4;
   i1 = i5 + i7 | 0;
   i3 = (i1 | 0) > -1;
   if ((i6 | 0) > 1) {
    i5 = i1 - (i3 ? i13 : 0) | 0;
    i6 = i6 + -1 | 0;
    i1 = i2;
    i4 = i4 + i8 + (i3 ? i9 : 0) | 0;
   } else {
    i1 = i2;
    break;
   }
  }
 }
 HEAP32[i10 >> 2] = i1;
 i13 = 0;
 return i13 | 0;
}

function _tt_face_load_kern(i13, i2) {
 i13 = i13 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i14;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 508 >> 2] & 127](i13, 1801810542, i2, i4) | 0;
 if (i1 | 0) {
  i13 = i1;
  STACKTOP = i14;
  return i13 | 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1 >>> 0 < 4) {
  i13 = 142;
  STACKTOP = i14;
  return i13 | 0;
 }
 i3 = i13 + 740 | 0;
 i1 = _FT_Stream_ExtractFrame(i2, i1, i3) | 0;
 if (i1 | 0) {
  i13 = i1;
  STACKTOP = i14;
  return i13 | 0;
 }
 i12 = HEAP32[i4 >> 2] | 0;
 HEAP32[i13 + 744 >> 2] = i12;
 i1 = HEAP32[i3 >> 2] | 0;
 i12 = i1 + i12 | 0;
 i11 = (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
 i11 = i11 >>> 0 < 32 ? i11 : 32;
 L10 : do if (!i11) {
  i3 = 0;
  i2 = 0;
  i1 = 0;
 } else {
  i10 = i1 + 4 | 0;
  i3 = 0;
  i2 = 0;
  i1 = 0;
  do {
   i9 = 1 << i3;
   i5 = i10 + 6 | 0;
   if (i5 >>> 0 > i12 >>> 0) break L10;
   i4 = (HEAPU8[i10 + 2 >> 0] | 0) << 8 | (HEAPU8[i10 + 3 >> 0] | 0);
   if (i4 >>> 0 < 15) break L10;
   i4 = i10 + i4 | 0;
   i8 = i10;
   i10 = i4 >>> 0 > i12 >>> 0 ? i12 : i4;
   i4 = i8 + 14 | 0;
   L16 : do if (!(i4 >>> 0 > i12 >>> 0 ? 1 : ((HEAPU8[i8 + 4 >> 0] | 0) << 8 | HEAP8[i8 + 5 >> 0] & -9 & 255 | 0) != 1)) {
    i6 = (HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i8 + 7 >> 0] | 0);
    i7 = i10 - i4 | 0;
    i6 = (i7 | 0) < (i6 * 6 | 0) ? (i7 | 0) / 6 | 0 : i6;
    i1 = i9 | i1;
    if (i6) {
     i7 = (HEAPU8[i8 + 15 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i8 + 16 >> 0] | 0) << 8 | (HEAPU8[i8 + 17 >> 0] | 0);
     i4 = i8 + 20 | 0;
     while (1) {
      i6 = i6 + -1 | 0;
      if (!i6) break;
      i5 = i7;
      i7 = (HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0);
      i5 = i7 >>> 0 > i5 >>> 0;
      if (!i5) break L16; else i4 = i4 + (i5 ? 6 : 4) | 0;
     }
     i2 = i9 | i2;
    }
   } while (0);
   i3 = i3 + 1 | 0;
  } while (i3 >>> 0 < i11 >>> 0);
 } while (0);
 HEAP32[i13 + 748 >> 2] = i3;
 HEAP32[i13 + 752 >> 2] = i1;
 HEAP32[i13 + 756 >> 2] = i2;
 i13 = 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _big2_attributeValueTok(i3, i5, i6, i8) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0;
 if ((i5 | 0) == (i6 | 0)) {
  i8 = -4;
  return i8 | 0;
 }
 i7 = i3 + 76 | 0;
 i1 = i5;
 L4 : while (1) {
  L6 : do switch (HEAP8[i1 >> 0] | 0) {
  case 0:
   {
    switch (HEAP8[i7 + (HEAPU8[i1 + 1 >> 0] | 0) >> 0] | 0) {
    case 3:
     {
      i4 = 7;
      break L4;
     }
    case 2:
     {
      i4 = 10;
      break L4;
     }
    case 10:
     {
      i4 = 11;
      break L4;
     }
    case 9:
     {
      i4 = 14;
      break L4;
     }
    case 21:
     {
      i4 = 20;
      break L4;
     }
    case 6:
     {
      i2 = 3;
      break L6;
     }
    case 7:
     {
      i4 = 6;
      break L6;
     }
    case 5:
     break;
    default:
     {
      i4 = 23;
      break L6;
     }
    }
    i2 = 2;
    break;
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i4 = 6;
    break;
   }
  default:
   i4 = 23;
  } while (0);
  if ((i4 | 0) == 6) {
   i4 = 0;
   i2 = 4;
  } else if ((i4 | 0) == 23) {
   i4 = 0;
   i2 = 2;
  }
  i1 = i1 + i2 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i4 = 25;
   break;
  }
 }
 if ((i4 | 0) == 7) if ((i1 | 0) == (i5 | 0)) {
  i8 = _big2_scanRef(i3, i5 + 2 | 0, i6, i8) | 0;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 10) {
  HEAP32[i8 >> 2] = i1;
  i8 = 0;
  return i8 | 0;
 } else if ((i4 | 0) == 11) if ((i1 | 0) == (i5 | 0)) {
  HEAP32[i8 >> 2] = i5 + 2;
  i8 = 7;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 14) {
  if ((i1 | 0) != (i5 | 0)) {
   HEAP32[i8 >> 2] = i1;
   i8 = 6;
   return i8 | 0;
  }
  i1 = i5 + 2 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i8 = -3;
   return i8 | 0;
  }
  if (!(HEAP8[i1 >> 0] | 0)) i1 = (HEAP8[i7 + (HEAPU8[i5 + 3 >> 0] | 0) >> 0] | 0) == 10 ? i5 + 4 | 0 : i1;
  HEAP32[i8 >> 2] = i1;
  i8 = 7;
  return i8 | 0;
 } else if ((i4 | 0) == 20) if ((i1 | 0) == (i5 | 0)) {
  HEAP32[i8 >> 2] = i5 + 2;
  i8 = 39;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 25) {
  HEAP32[i8 >> 2] = i6;
  i8 = 6;
  return i8 | 0;
 }
 return 0;
}

function _XML_GetBuffer(i15, i3) {
 i15 = i15 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 switch (HEAP32[i15 + 480 >> 2] | 0) {
 case 3:
  {
   HEAP32[i15 + 284 >> 2] = 33;
   i15 = 0;
   return i15 | 0;
  }
 case 2:
  {
   HEAP32[i15 + 284 >> 2] = 36;
   i15 = 0;
   return i15 | 0;
  }
 default:
  {
   i10 = i15 + 32 | 0;
   i9 = HEAP32[i10 >> 2] | 0;
   i13 = i15 + 28 | 0;
   i2 = HEAP32[i13 >> 2] | 0;
   i1 = i2;
   if ((i9 - i2 | 0) >= (i3 | 0)) {
    i15 = i1;
    return i15 | 0;
   }
   i14 = i15 + 24 | 0;
   i8 = HEAP32[i14 >> 2] | 0;
   i4 = i2 - i8 | 0;
   i12 = i15 + 8 | 0;
   i5 = HEAP32[i12 >> 2] | 0;
   i16 = i5;
   i6 = i8 - i16 | 0;
   i7 = (i6 | 0) > 1024;
   i2 = i7 ? 1024 : i6;
   i3 = i4 + i3 + i2 | 0;
   do if ((i3 | 0) > (i9 - i16 | 0)) {
    i1 = i9 - i8 | 0;
    i1 = (i1 | 0) == 0 ? 1024 : i1;
    do i1 = i1 << 1; while ((i1 | 0) < (i3 | 0));
    i2 = FUNCTION_TABLE_ii[HEAP32[i15 + 12 >> 2] & 63](i1) | 0;
    if (!i2) {
     HEAP32[i15 + 284 >> 2] = 1;
     i16 = 0;
     return i16 | 0;
    }
    HEAP32[i10 >> 2] = i2 + i1;
    i1 = HEAP32[i14 >> 2] | 0;
    i3 = i1;
    i4 = (HEAP32[i13 >> 2] | 0) - i3 | 0;
    if (!i1) {
     i1 = i2 + i4 | 0;
     HEAP32[i13 >> 2] = i1;
     HEAP32[i12 >> 2] = i2;
     i11 = 14;
     break;
    } else {
     i11 = i3 - (HEAP32[i12 >> 2] | 0) | 0;
     i11 = (i11 | 0) < 1024 ? i11 : 1024;
     _memcpy(i2 | 0, i1 + (0 - i11) | 0, i11 + i4 | 0) | 0;
     FUNCTION_TABLE_vi[HEAP32[i15 + 20 >> 2] & 127](HEAP32[i12 >> 2] | 0);
     HEAP32[i12 >> 2] = i2;
     i1 = i2 + ((HEAP32[i13 >> 2] | 0) - (HEAP32[i14 >> 2] | 0)) + i11 | 0;
     HEAP32[i13 >> 2] = i1;
     i2 = i2 + i11 | 0;
     i11 = 14;
     break;
    }
   } else if (i7) {
    i1 = i6 - i2 | 0;
    _memmove(i5 | 0, i5 + i1 | 0, i2 + i4 | 0) | 0;
    i2 = 0 - i1 | 0;
    i1 = (HEAP32[i13 >> 2] | 0) + i2 | 0;
    HEAP32[i13 >> 2] = i1;
    i2 = (HEAP32[i14 >> 2] | 0) + i2 | 0;
    i11 = 14;
   } while (0);
   if ((i11 | 0) == 14) HEAP32[i14 >> 2] = i2;
   HEAP32[i15 + 292 >> 2] = 0;
   HEAP32[i15 + 288 >> 2] = 0;
   HEAP32[i15 + 296 >> 2] = 0;
   i16 = i1;
   return i16 | 0;
  }
 }
 return 0;
}

function _Horizontal_Sweep_Drop(i13, i14, i5, i6, i7, i8) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i9 = HEAP32[i13 + 4 >> 2] | 0;
 i10 = i5 + -1 | 0;
 i1 = 0 - i9 | 0;
 i11 = i10 + i9 & i1;
 i12 = i1 & i6;
 if ((i11 | 0) > (i12 | 0)) {
  i2 = HEAP16[i7 + 12 >> 1] | 0;
  i3 = i2 & 65535;
  i4 = i3 & 7;
  if ((i11 | 0) != (i12 + i9 | 0)) return;
  switch (i2 & 7) {
  case 0:
   {
    i2 = i12;
    break;
   }
  case 4:
   {
    i2 = (HEAP32[i13 + 8 >> 2] | 0) + ((i10 + i6 | 0) / 2 | 0) & i1;
    break;
   }
  case 5:
  case 1:
   {
    if ((HEAP32[i7 + 28 >> 2] | 0) == (i8 | 0)) if ((HEAP32[i7 + 16 >> 2] | 0) < 1) {
     if (!(i3 & 16)) return;
     if ((i6 - i5 | 0) < (HEAP32[i13 + 8 >> 2] | 0)) return;
    }
    if ((HEAP32[i8 + 28 >> 2] | 0) == (i7 | 0)) if ((HEAP32[i7 + 20 >> 2] | 0) == (i14 << 16 >> 16 | 0)) {
     if (!(i2 & 32)) return;
     if ((i6 - i5 | 0) < (HEAP32[i13 + 8 >> 2] | 0)) return;
    }
    if ((i4 | 0) == 1) i2 = i12; else i2 = (HEAP32[i13 + 8 >> 2] | 0) + ((i10 + i6 | 0) / 2 | 0) & i1;
    break;
   }
  default:
   return;
  }
  i1 = HEAP32[i13 >> 2] | 0;
  if ((i2 | 0) < 0) i2 = i11; else i2 = i2 >> i1 >>> 0 < (HEAP32[i13 + 104 >> 2] | 0) >>> 0 ? i2 : i12;
  i5 = ((i2 | 0) == (i11 | 0) ? i12 : i11) >> i1;
  i3 = i14 << 16 >> 16;
  i6 = 128 >>> (i3 & 7);
  i7 = i13 + 104 | 0;
  i4 = HEAP32[i13 + 112 >> 2] | 0;
  i3 = (HEAP32[i13 + 60 >> 2] | 0) + (i3 >> 3) + (Math_imul(i5, 0 - i4 | 0) | 0) | 0;
  if ((i4 | 0) > 0) i3 = i3 + (Math_imul((HEAP32[i7 >> 2] | 0) + -1 | 0, i4) | 0) | 0;
  if ((i5 | 0) > -1) if (i5 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) if ((HEAPU8[i3 >> 0] | 0) & i6) return;
 } else {
  i2 = i11;
  i1 = HEAP32[i13 >> 2] | 0;
 }
 i1 = i2 >> i1;
 if ((i1 | 0) <= -1) return;
 i2 = HEAP32[i13 + 104 >> 2] | 0;
 if (i1 >>> 0 >= i2 >>> 0) return;
 i12 = i14 << 16 >> 16;
 i11 = HEAP32[i13 + 112 >> 2] | 0;
 i14 = (HEAP32[i13 + 60 >> 2] | 0) + (i12 >> 3) + (Math_imul(i11, 0 - i1 | 0) | 0) | 0;
 i13 = i14 + (Math_imul(i11, i2 + -1 | 0) | 0) | 0;
 i14 = (i11 | 0) > 0 ? i13 : i14;
 HEAP8[i14 >> 0] = HEAPU8[i14 >> 0] | 0 | 128 >>> (i12 & 7);
 return;
}

function _FcInitLoadOwnConfig(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i8;
 if (!i1) {
  i1 = _FcConfigCreate() | 0;
  if (!i1) {
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  } else i7 = i1;
 } else i7 = i1;
 _FcInitDebug();
 if (!(_FcConfigParseAndLoad(i7, 0, 1) | 0)) {
  i2 = _FcConfigGetSysRoot(i7) | 0;
  i1 = _FcConfigCreate() | 0;
  do if (!i1) i1 = 0; else {
   _FcConfigSetSysRoot(i1, i2);
   if (_FcConfigAddDir(i1, 352079) | 0) if (_FcConfigAddCacheDir(i1, 352096) | 0) break;
   _FcConfigDestroy(i1);
   i1 = 0;
  } while (0);
  _FcConfigDestroy(i7);
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = HEAP32[i7 + 12 >> 2] | 0;
 if (!i1) {
  STACKTOP = i8;
  return i7 | 0;
 }
 if (HEAP32[i1 + 4 >> 2] | 0) {
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = _getenv(354466) | 0;
 i2 = _getenv(354493) | 0;
 if (!i1) i4 = 13; else if (!(HEAP8[i1 >> 0] | 0)) i4 = 13; else i6 = 1;
 do if ((i4 | 0) == 13) {
  if (i2 | 0) if (HEAP8[i2 >> 0] | 0) {
   i6 = 1;
   break;
  }
  i6 = HEAP32[22811] | 0;
  _fwrite(352170, 71, 1, i6) | 0;
  HEAP32[i3 >> 2] = 352096;
  _fprintf(i6, 352242, i3) | 0;
  i6 = 0;
 } while (0);
 i1 = _FcConfigXdgCacheHome() | 0;
 if (!i1) i1 = 0; else {
  i4 = _strlen(i1) | 0;
  i5 = _realloc(i1, i4 + 12 | 0) | 0;
  if (i5) {
   i1 = i5 + i4 | 0;
   i2 = 352294;
   i3 = i1 + 11 | 0;
   do {
    HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + 1 | 0;
   } while ((i1 | 0) < (i3 | 0));
   HEAP8[i5 + (i4 + 11) >> 0] = 0;
   if (!i6) _fwrite(352306, 72, 1, HEAP32[22811] | 0) | 0;
   if (!(_FcConfigAddCacheDir(i7, 352096) | 0)) i1 = i5; else if (!(_FcConfigAddCacheDir(i7, i5) | 0)) i1 = i5; else {
    _FcStrFree(i5);
    STACKTOP = i8;
    return i7 | 0;
   }
  }
 }
 i2 = _FcConfigGetSysRoot(i7) | 0;
 _fwrite(352379, 31, 1, HEAP32[22811] | 0) | 0;
 if (i1 | 0) _FcStrFree(i1);
 i1 = _FcConfigCreate() | 0;
 do if (!i1) i1 = 0; else {
  _FcConfigSetSysRoot(i1, i2);
  if (_FcConfigAddDir(i1, 352079) | 0) if (_FcConfigAddCacheDir(i1, 352096) | 0) break;
  _FcConfigDestroy(i1);
  i1 = 0;
 } while (0);
 _FcConfigDestroy(i7);
 i7 = i1;
 STACKTOP = i8;
 return i7 | 0;
}

function _parse_blend_design_positions(i7, i17) {
 i7 = i7 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i12 = i18 + 64 | 0;
 i13 = i18 + 56 | 0;
 i14 = i18 + 8 | 0;
 i15 = i18;
 i16 = i17 + 60 | 0;
 FUNCTION_TABLE_viiii[HEAP32[i16 >> 2] & 31](i17, i12, 16, i13);
 i1 = HEAP32[i13 >> 2] | 0;
 if ((i1 | 0) < 0) {
  i16 = 162;
  i17 = i17 + 12 | 0;
  HEAP32[i17 >> 2] = i16;
  STACKTOP = i18;
  return;
 }
 if ((i1 | 0) == 0 | (i1 | 0) > 16) {
  i16 = 3;
  i17 = i17 + 12 | 0;
  HEAP32[i17 >> 2] = i16;
  STACKTOP = i18;
  return;
 }
 i8 = HEAP32[i17 >> 2] | 0;
 i9 = i17 + 8 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 i11 = i7 + 528 | 0;
 L7 : do if ((i1 | 0) > 0) {
  i6 = i17 + 40 | 0;
  i3 = 0;
  i5 = 0;
  i1 = HEAP32[i11 >> 2] | 0;
  while (1) {
   HEAP32[i17 >> 2] = HEAP32[i12 + (i5 * 12 | 0) >> 2];
   HEAP32[i9 >> 2] = HEAP32[i12 + (i5 * 12 | 0) + 4 >> 2];
   FUNCTION_TABLE_viiii[HEAP32[i16 >> 2] & 31](i17, i14, 4, i15);
   i2 = HEAP32[i15 >> 2] | 0;
   if (!i5) {
    if ((i2 + -1 | 0) >>> 0 > 3) {
     i1 = 3;
     break;
    }
    i1 = _t1_allocate_blend(i7, HEAP32[i13 >> 2] | 0, i2) | 0;
    if (i1 | 0) break;
    i4 = HEAP32[i11 >> 2] | 0;
    i1 = HEAP32[i15 >> 2] | 0;
   } else if ((i2 | 0) == (i3 | 0)) {
    i2 = i3;
    i4 = i1;
    i1 = i3;
   } else {
    i1 = 3;
    break;
   }
   if ((i1 | 0) > 0) {
    i3 = i4 + 24 + (i5 << 2) | 0;
    i1 = 0;
    do {
     HEAP32[i17 >> 2] = HEAP32[i14 + (i1 * 12 | 0) >> 2];
     HEAP32[i9 >> 2] = HEAP32[i14 + (i1 * 12 | 0) + 4 >> 2];
     i19 = FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 255](i17, 0) | 0;
     HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 << 2) >> 2] = i19;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < (HEAP32[i15 >> 2] | 0));
   }
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (HEAP32[i13 >> 2] | 0)) break L7; else {
    i3 = i2;
    i1 = i4;
   }
  }
  i16 = i1;
  i19 = i17 + 12 | 0;
  HEAP32[i19 >> 2] = i16;
  STACKTOP = i18;
  return;
 } while (0);
 HEAP32[i17 >> 2] = i8;
 HEAP32[i9 >> 2] = i10;
 i16 = 0;
 i19 = i17 + 12 | 0;
 HEAP32[i19 >> 2] = i16;
 STACKTOP = i18;
 return;
}

function _FcCacheInsert(i7, i8) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i9 = i10;
 i1 = HEAP32[91921] | 0;
 L1 : do if (!i1) {
  while (1) {
   i1 = _malloc(28) | 0;
   _pthread_mutex_init(i1 | 0, 0) | 0;
   i2 = HEAP32[91921] | 0;
   if (!i2) HEAP32[91921] = i1;
   if (!i2) break;
   _pthread_mutex_destroy(i1 | 0) | 0;
   i1 = HEAP32[91921] | 0;
   if (i1 | 0) {
    i3 = 5;
    break L1;
   }
  }
  _pthread_mutex_lock(i1 | 0) | 0;
  _FcRandom() | 0;
 } else i3 = 5; while (0);
 if ((i3 | 0) == 5) _pthread_mutex_lock(i1 | 0) | 0;
 i1 = HEAP32[91922] | 0;
 if ((i1 | 0) > 0) {
  i3 = 367692;
  do {
   i6 = i1;
   i1 = i1 + -1 | 0;
   i2 = i3 + (i1 << 2) | 0;
   i4 = HEAP32[i2 >> 2] | 0;
   L12 : do if (i4) while (1) {
    i5 = i4 + 24 | 0;
    if ((HEAP32[i4 >> 2] | 0) >>> 0 > i7 >>> 0) break L12;
    i2 = i4 + 24 + (i1 << 2) | 0;
    i4 = HEAP32[i2 >> 2] | 0;
    if (!i4) {
     i3 = i5;
     break;
    } else i3 = i5;
   } while (0);
   HEAP32[i9 + (i1 << 2) >> 2] = i2;
  } while ((i6 | 0) > 1);
 }
 i1 = _FcRandom() | 0;
 i4 = 0;
 i1 = _FcRandom() | 0 | i1;
 while (1) {
  i3 = i4 + 1 | 0;
  if ((i1 & 1 | 0) == 0 & (i3 | 0) < 16) {
   i4 = i3;
   i1 = i1 >> 1;
  } else break;
 }
 i1 = HEAP32[91922] | 0;
 i2 = i1 + 1 | 0;
 if ((i4 | 0) >= (i1 | 0)) {
  HEAP32[i9 + (i1 << 2) >> 2] = 367692 + (i1 << 2);
  HEAP32[91922] = i2;
  i3 = i2;
 }
 i4 = _malloc((i3 << 2) + 24 | 0) | 0;
 if (!i4) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 HEAP32[i4 >> 2] = i7;
 HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i4 + 4 >> 2] = 1;
 if (!i8) {
  HEAP32[i4 + 12 >> 2] = 0;
  HEAP32[i4 + 16 >> 2] = 0;
  i1 = 0;
 } else {
  HEAP32[i4 + 12 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i4 + 16 >> 2] = HEAP32[i8 + 72 >> 2];
  i1 = HEAP32[i8 + 56 >> 2] | 0;
 }
 HEAP32[i4 + 20 >> 2] = i1;
 if ((i3 | 0) > 0) {
  i2 = i4 + 24 | 0;
  i1 = 0;
  do {
   i8 = HEAP32[i9 + (i1 << 2) >> 2] | 0;
   HEAP32[i2 + (i1 << 2) >> 2] = HEAP32[i8 >> 2];
   HEAP32[i8 >> 2] = i4;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i3 | 0));
 }
 _pthread_mutex_unlock(HEAP32[91921] | 0) | 0;
 i9 = 1;
 STACKTOP = i10;
 return i9 | 0;
}

function _FcAtomicLock(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i9;
 i6 = i9 + 4 | 0;
 i5 = i8 + 12 | 0;
 _strcpy(HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i1 = i1 + (_strlen(i1) | 0) | 0;
 i2 = 346904;
 i3 = i1 + 12 | 0;
 do {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 } while ((i1 | 0) < (i3 | 0));
 i1 = _FcMakeTempfile(HEAP32[i5 >> 2] | 0) | 0;
 if ((i1 | 0) < 0) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 i2 = ___fdopen(i1, 346916) | 0;
 if (!i2) {
  _close(i1) | 0;
  _unlink(HEAP32[i5 >> 2] | 0) | 0;
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 i1 = _getpid() | 0;
 HEAP32[i4 >> 2] = i1;
 i4 = (_fprintf(i2, 346918, i4) | 0) < 1;
 i1 = _fclose(i2) | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if (i4) {
  _unlink(i2) | 0;
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 if ((i1 | 0) == -1) {
  _unlink(i2) | 0;
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 i1 = i8 + 8 | 0;
 do if ((_link(i2, HEAP32[i1 >> 2] | 0) | 0) < 0) {
  i4 = ___errno_location() | 0;
  if ((HEAP32[i4 >> 2] | 0) == 1) i7 = 13; else {
   i4 = ___errno_location() | 0;
   if ((HEAP32[i4 >> 2] | 0) == 95) i7 = 13; else {
    _unlink(HEAP32[i5 >> 2] | 0) | 0;
    i2 = 0;
   }
  }
  if ((i7 | 0) == 13) {
   i7 = _mkdir(HEAP32[i1 >> 2] | 0, 384) | 0;
   _unlink(HEAP32[i5 >> 2] | 0) | 0;
   if ((i7 | 0) < 0) i2 = 1; else break;
  }
  if ((_FcStat(HEAP32[i1 >> 2] | 0, i6) | 0) <= -1) {
   i8 = 0;
   STACKTOP = i9;
   return i8 | 0;
  }
  i7 = _time(0) | 0;
  if ((i7 - (HEAP32[i6 + 56 >> 2] | 0) | 0) <= 600) {
   i8 = 0;
   STACKTOP = i9;
   return i8 | 0;
  }
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i2) {
   if (_unlink(i1) | 0) {
    i8 = 0;
    STACKTOP = i9;
    return i8 | 0;
   }
   i8 = _FcAtomicLock(i8) | 0;
   STACKTOP = i9;
   return i8 | 0;
  } else {
   if (_rmdir(i1) | 0) {
    i8 = 0;
    STACKTOP = i9;
    return i8 | 0;
   }
   i8 = _FcAtomicLock(i8) | 0;
   STACKTOP = i9;
   return i8 | 0;
  }
 } else _unlink(HEAP32[i5 >> 2] | 0) | 0; while (0);
 _unlink(HEAP32[i8 + 4 >> 2] | 0) | 0;
 i8 = 1;
 STACKTOP = i9;
 return i8 | 0;
}

function _cff_index_init(i10, i8, i9) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i13 + 4 | 0;
 i11 = i13;
 i12 = HEAP32[i8 + 28 >> 2] | 0;
 i1 = i10 + 4 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i10 >> 2] = i8;
 i1 = _FT_Stream_Pos(i8) | 0;
 i4 = i10 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = _FT_Stream_ReadUShort(i8, i11) | 0;
 do if (!(HEAP32[i11 >> 2] | 0)) {
  i3 = i1 & 65535;
  if (!(i1 << 16 >> 16)) {
   i12 = 0;
   STACKTOP = i13;
   return i12 | 0;
  }
  i1 = _FT_Stream_ReadChar(i8, i11) | 0;
  if (!(HEAP32[i11 >> 2] | 0)) {
   i2 = i1 & 255;
   if ((i1 + -1 & 255) > 3) {
    HEAP32[i11 >> 2] = 8;
    break;
   }
   HEAP32[i10 + 8 >> 2] = i3;
   i5 = i10 + 12 | 0;
   HEAP8[i5 >> 0] = i1;
   i6 = Math_imul(i2, i3 + 1 | 0) | 0;
   HEAP32[i10 + 16 >> 2] = i6 + 3 + (HEAP32[i4 >> 2] | 0);
   i6 = _FT_Stream_Skip(i8, Math_imul(i2, i3) | 0) | 0;
   HEAP32[i11 >> 2] = i6;
   if (!i6) {
    i4 = _FT_Stream_Read(HEAP32[i10 >> 2] | 0, i7, HEAPU8[i5 >> 0] | 0) | 0;
    i6 = (i4 | 0) == 0;
    if (!i6) {
     HEAP32[i11 >> 2] = i4;
     break;
    }
    i1 = HEAP8[i5 >> 0] | 0;
    if (!(i1 << 24 >> 24)) HEAP32[i11 >> 2] = i4; else {
     i3 = i1 & 255;
     i1 = 0;
     i2 = 0;
     do {
      i1 = HEAPU8[i7 + i2 >> 0] | 0 | i1 << 8;
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i3 | 0));
     HEAP32[i11 >> 2] = i4;
     if (!i6) break;
     if (i1 | 0) {
      i1 = i1 + -1 | 0;
      HEAP32[i10 + 20 >> 2] = i1;
      if (!(i9 << 24 >> 24)) i1 = _FT_Stream_Skip(i8, i1) | 0; else i1 = _FT_Stream_ExtractFrame(i8, i1, i10 + 28 | 0) | 0;
      HEAP32[i11 >> 2] = i1;
      if (!i1) i1 = 0; else break;
      STACKTOP = i13;
      return i1 | 0;
     }
    }
    HEAP32[i11 >> 2] = 8;
   }
  }
 } while (0);
 i10 = i10 + 24 | 0;
 _ft_mem_free(i12, HEAP32[i10 >> 2] | 0);
 HEAP32[i10 >> 2] = 0;
 i12 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i13;
 return i12 | 0;
}

function _FcCharSetSerialize(i12, i1) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 if ((HEAP32[i1 >> 2] | 0) != -1) {
  i2 = HEAP32[i12 + 4 >> 2] | 0;
  if (i2) {
   i2 = HEAP32[i2 + 1304 + ((i1 & 67) << 2) >> 2] | 0;
   if (!i2) {
    i12 = 0;
    return i12 | 0;
   }
   while (1) {
    if ((HEAP32[i2 + 4 >> 2] | 0) == (i1 | 0)) break;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) {
     i4 = 0;
     i5 = 15;
     break;
    } else i2 = i3;
   }
   if ((i5 | 0) == 15) return i4 | 0;
   i1 = HEAP32[i2 + 8 >> 2] | 0;
   if (!i1) {
    i12 = 0;
    return i12 | 0;
   }
  }
 }
 i4 = _FcSerializePtr(i12, i1) | 0;
 if (!i4) {
  i12 = 0;
  return i12 | 0;
 }
 HEAP32[i4 >> 2] = -1;
 i7 = i1 + 4 | 0;
 HEAP32[i4 + 4 >> 2] = HEAP32[i7 >> 2];
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i4 + 12 >> 2] = 0;
  i12 = i4;
  return i12 | 0;
 }
 i8 = i1;
 i9 = i1 + 8 | 0;
 i10 = _FcSerializePtr(i12, (HEAP32[i9 >> 2] | 0) + i8 | 0) | 0;
 if (!i10) {
  i12 = 0;
  return i12 | 0;
 }
 i11 = i10;
 i2 = i4;
 HEAP32[i4 + 8 >> 2] = i11 - i2;
 i3 = (HEAP32[i1 + 12 >> 2] | 0) + i8 | 0;
 i5 = i3;
 i6 = _FcSerializePtr(i12, i3) | 0;
 if (!i3) {
  i12 = 0;
  return i12 | 0;
 }
 HEAP32[i4 + 12 >> 2] = i6 - i2;
 if ((HEAP32[i7 >> 2] | 0) > 0) i1 = 0; else {
  i12 = i4;
  return i12 | 0;
 }
 while (1) {
  i2 = (HEAP32[i9 >> 2] | 0) + i8 | 0;
  i2 = i2 + (HEAP32[i2 + (i1 << 2) >> 2] | 0) | 0;
  i3 = _FcSerializePtr(i12, i2) | 0;
  if (!i3) {
   i4 = 0;
   i5 = 15;
   break;
  };
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
  HEAP32[i3 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
  HEAP32[i3 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
  HEAP32[i3 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
  HEAP32[i10 + (i1 << 2) >> 2] = i3 - i11;
  HEAP16[i6 + (i1 << 1) >> 1] = HEAP16[i5 + (i1 << 1) >> 1] | 0;
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (HEAP32[i7 >> 2] | 0)) {
   i5 = 15;
   break;
  }
 }
 if ((i5 | 0) == 15) return i4 | 0;
 return 0;
}

function _big2_charRefNumber(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i1 = i3 + 4 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 L1 : do if (!(i2 << 24 >> 24)) if ((HEAP8[i3 + 5 >> 0] | 0) == 120) {
  i2 = i3 + 6 | 0;
  i1 = 0;
  while (1) {
   L6 : while (1) {
    if (!(HEAP8[i2 >> 0] | 0)) {
     i3 = HEAP8[i2 + 1 >> 0] | 0;
     if (i3 << 24 >> 24 == 59) break L1;
     i3 = i3 << 24 >> 24;
     switch (i3 | 0) {
     case 57:
     case 56:
     case 55:
     case 54:
     case 53:
     case 52:
     case 51:
     case 50:
     case 49:
     case 48:
      {
       i4 = 8;
       break L6;
      }
     case 70:
     case 69:
     case 68:
     case 67:
     case 66:
     case 65:
      {
       i4 = 9;
       break L6;
      }
     case 102:
     case 101:
     case 100:
     case 99:
     case 98:
     case 97:
      {
       i4 = 10;
       break L6;
      }
     default:
      {}
     }
    }
    i2 = i2 + 2 | 0;
   }
   if ((i4 | 0) == 8) {
    i4 = 0;
    i1 = i3 + -48 | i1 << 4;
   } else if ((i4 | 0) == 9) {
    i4 = 0;
    i1 = (i1 << 4) + -55 + i3 | 0;
   } else if ((i4 | 0) == 10) {
    i4 = 0;
    i1 = (i1 << 4) + -87 + i3 | 0;
   }
   if ((i1 | 0) < 1114112) i2 = i2 + 2 | 0; else {
    i1 = -1;
    break;
   }
  }
  return i1 | 0;
 } else {
  i3 = i1;
  i1 = 0;
  i2 = 0;
  i4 = 13;
 } else {
  i3 = i1;
  i1 = 0;
  i4 = 13;
 } while (0);
 L18 : do if ((i4 | 0) == 13) {
  while (1) {
   if (!(i2 << 24 >> 24)) {
    i2 = HEAP8[i3 + 1 >> 0] | 0;
    if (i2 << 24 >> 24 == 59) break L18;
    i2 = i2 << 24 >> 24;
   } else i2 = -1;
   i1 = (i1 * 10 | 0) + -48 + i2 | 0;
   i2 = i3 + 2 | 0;
   if ((i1 | 0) >= 1114112) {
    i1 = -1;
    break;
   }
   i3 = i2;
   i2 = HEAP8[i2 >> 0] | 0;
   i4 = 13;
  }
  return i1 | 0;
 } while (0);
 switch (i1 >> 8 | 0) {
 case 0:
  {
   if (!(HEAP8[26712 + i1 >> 0] | 0)) {
    i4 = -1;
    return i4 | 0;
   }
   break;
  }
 case 255:
  {
   if ((i1 | 1 | 0) == 65535) {
    i4 = -1;
    return i4 | 0;
   }
   break;
  }
 case 223:
 case 222:
 case 221:
 case 220:
 case 219:
 case 218:
 case 217:
 case 216:
  {
   i4 = -1;
   return i4 | 0;
  }
 default:
  {}
 }
 i4 = i1;
 return i4 | 0;
}

function _FT_Render_Glyph_Internal(i8, i13, i14) {
 i8 = i8 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0;
 i15 = i13 + 72 | 0;
 i10 = HEAP32[i15 >> 2] | 0;
 L1 : do if ((i10 | 0) < 1869968492) {
  switch (i10 | 0) {
  case 1651078259:
   {
    i2 = 0;
    break;
   }
  default:
   {
    i11 = 3;
    break L1;
   }
  }
  return i2 | 0;
 } else {
  switch (i10 | 0) {
  case 1869968492:
   break;
  default:
   {
    i11 = 3;
    break L1;
   }
  }
  i1 = i8 + 148 | 0;
  i3 = HEAP32[i8 + 156 >> 2] | 0;
  i12 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 do if ((i11 | 0) == 3) {
  if (!i8) {
   i2 = 7;
   i4 = 0;
  } else {
   i9 = i8 + 148 | 0;
   i2 = HEAP32[i9 >> 2] | 0;
   if (!i2) {
    i3 = 0;
    i12 = i9;
    i1 = 0;
    break;
   }
   while (1) {
    i5 = HEAP32[i2 + 8 >> 2] | 0;
    if ((HEAP32[i5 + 16 >> 2] | 0) == (i10 | 0)) {
     i11 = 6;
     break;
    }
    i6 = HEAP32[i2 + 4 >> 2] | 0;
    if (!i6) {
     i4 = 0;
     i7 = 0;
     break;
    } else i2 = i6;
   }
   if ((i11 | 0) == 6) {
    i4 = i5;
    i7 = i2;
   }
   if (!i8) i2 = 7; else {
    i3 = i4;
    i12 = i9;
    i1 = i7;
    break;
   }
  }
  while (1) {
   if (!i4) {
    i11 = 18;
    break;
   }
   i2 = FUNCTION_TABLE_iiiii[HEAP32[i4 + 60 >> 2] & 127](i4, i13, i14, 0) | 0;
   if ((i2 | 0) != 0 & (i2 & 255 | 0) == 19) i4 = 0; else {
    i11 = 18;
    break;
   }
  }
  if ((i11 | 0) == 18) return i2 | 0;
 } while (0);
 if (!i3) {
  i15 = 7;
  return i15 | 0;
 }
 while (1) {
  i2 = FUNCTION_TABLE_iiiii[HEAP32[i3 + 60 >> 2] & 127](i3, i13, i14, 0) | 0;
  if (!((i2 | 0) != 0 & (i2 & 255 | 0) == 19)) {
   i11 = 18;
   break;
  }
  i4 = HEAP32[i15 >> 2] | 0;
  i1 = HEAP32[((i1 | 0) == 0 ? i12 : i1 + 4 | 0) >> 2] | 0;
  L28 : do if (!i1) {
   i3 = 0;
   i1 = 0;
  } else while (1) {
   i3 = HEAP32[i1 + 8 >> 2] | 0;
   if ((HEAP32[i3 + 16 >> 2] | 0) == (i4 | 0)) break;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i1) {
    i3 = 0;
    i1 = 0;
    break L28;
   }
  } while (0);
  if (!i3) {
   i11 = 18;
   break;
  }
 }
 if ((i11 | 0) == 18) return i2 | 0;
 return 0;
}

function _cf2_glyphpath_curveTo(i11, i1, i2, i9, i10, i14, i15) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i16 + 20 | 0;
 i17 = i16 + 16 | 0;
 i3 = i16 + 12 | 0;
 i4 = i16 + 8 | 0;
 i8 = i16;
 i12 = i11 + 11720 | 0;
 i13 = i11 + 11724 | 0;
 _cf2_glyphpath_computeOffset(i11, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, i1, i2, i7, i17);
 _cf2_glyphpath_computeOffset(i11, i9, i10, i14, i15, i3, i4);
 i6 = (Math_imul(i10 - i2 >> 16, i1 >> 16) | 0) - (Math_imul(i9 - i1 >> 16, i2 >> 16) | 0) | 0;
 i5 = (HEAP32[i11 + 4 >> 2] | 0) + 16 | 0;
 HEAP32[i5 >> 2] = i6 + (HEAP32[i5 >> 2] | 0);
 i7 = HEAP32[i7 >> 2] | 0;
 i5 = i7 + (HEAP32[i12 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i5;
 i17 = HEAP32[i17 >> 2] | 0;
 i6 = i17 + (HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i8 + 4 >> 2] = i6;
 i7 = i7 + i1 | 0;
 i2 = i17 + i2 | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 i1 = i11 + 11667 | 0;
 if (HEAP8[i1 >> 0] | 0) {
  _cf2_glyphpath_pushMove(i11, i5, i6);
  HEAP8[i1 >> 0] = 0;
  HEAP8[i11 + 11664 >> 0] = 1;
  i17 = i11 + 11712 | 0;
  HEAP32[i17 >> 2] = i7;
  HEAP32[i17 + 4 >> 2] = i2;
 }
 i1 = i11 + 11744 | 0;
 if (HEAP8[i1 >> 0] | 0) _cf2_glyphpath_pushPrevElem(i11, i11 + 8 | 0, i8, i7, i2, 0);
 HEAP8[i1 >> 0] = 1;
 HEAP32[i11 + 11748 >> 2] = 4;
 i17 = HEAP32[i8 + 4 >> 2] | 0;
 i1 = i11 + 11752 | 0;
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i1 + 4 >> 2] = i17;
 i1 = i11 + 11760 | 0;
 HEAP32[i1 >> 2] = i7;
 HEAP32[i1 + 4 >> 2] = i2;
 HEAP32[i11 + 11768 >> 2] = i3 + i9;
 HEAP32[i11 + 11772 >> 2] = i4 + i10;
 HEAP32[i11 + 11776 >> 2] = i3 + i14;
 HEAP32[i11 + 11780 >> 2] = i4 + i15;
 i1 = HEAP32[i11 + 11676 >> 2] | 0;
 if (!(HEAP8[i1 + 5 >> 0] | 0)) {
  HEAP32[i12 >> 2] = i14;
  HEAP32[i13 >> 2] = i15;
  STACKTOP = i16;
  return;
 }
 _cf2_hintmap_build(i11 + 8 | 0, HEAP32[i11 + 11668 >> 2] | 0, HEAP32[i11 + 11672 >> 2] | 0, i1, HEAP32[i11 + 11680 >> 2] | 0, 0);
 HEAP32[i12 >> 2] = i14;
 HEAP32[i13 >> 2] = i15;
 STACKTOP = i16;
 return;
}

function _little2_entityValueTok(i3, i5, i6, i8) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0;
 if ((i5 | 0) == (i6 | 0)) {
  i8 = -4;
  return i8 | 0;
 }
 i7 = i3 + 76 | 0;
 i1 = i5;
 L4 : while (1) {
  L6 : do switch (HEAP8[i1 + 1 >> 0] | 0) {
  case 0:
   {
    switch (HEAP8[i7 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
    case 3:
     {
      i4 = 7;
      break L4;
     }
    case 30:
     {
      i4 = 10;
      break L4;
     }
    case 10:
     {
      i4 = 13;
      break L4;
     }
    case 9:
     {
      i4 = 16;
      break L4;
     }
    case 6:
     {
      i2 = 3;
      break L6;
     }
    case 7:
     {
      i4 = 6;
      break L6;
     }
    case 5:
     break;
    default:
     {
      i4 = 22;
      break L6;
     }
    }
    i2 = 2;
    break;
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i4 = 6;
    break;
   }
  default:
   i4 = 22;
  } while (0);
  if ((i4 | 0) == 6) {
   i4 = 0;
   i2 = 4;
  } else if ((i4 | 0) == 22) {
   i4 = 0;
   i2 = 2;
  }
  i1 = i1 + i2 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i4 = 24;
   break;
  }
 }
 if ((i4 | 0) == 7) if ((i1 | 0) == (i5 | 0)) {
  i8 = _little2_scanRef(i3, i5 + 2 | 0, i6, i8) | 0;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 10) if ((i1 | 0) == (i5 | 0)) {
  i8 = _little2_scanPercent(i3, i5 + 2 | 0, i6, i8) | 0;
  i8 = (i8 | 0) == 22 ? 0 : i8;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 13) if ((i1 | 0) == (i5 | 0)) {
  HEAP32[i8 >> 2] = i5 + 2;
  i8 = 7;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 16) {
  if ((i1 | 0) != (i5 | 0)) {
   HEAP32[i8 >> 2] = i1;
   i8 = 6;
   return i8 | 0;
  }
  i1 = i5 + 2 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i8 = -3;
   return i8 | 0;
  }
  if (!(HEAP8[i5 + 3 >> 0] | 0)) i1 = (HEAP8[i7 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) == 10 ? i5 + 4 | 0 : i1;
  HEAP32[i8 >> 2] = i1;
  i8 = 7;
  return i8 | 0;
 } else if ((i4 | 0) == 24) {
  HEAP32[i8 >> 2] = i6;
  i8 = 6;
  return i8 | 0;
 }
 return 0;
}

function _normal_charRefNumber(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i1 = i3 + 2 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 L1 : do switch (i2 << 24 >> 24) {
 case 120:
  {
   i1 = i3 + 3 | 0;
   i2 = HEAP8[i1 >> 0] | 0;
   if (i2 << 24 >> 24 == 59) {
    i1 = 0;
    i4 = 13;
   } else {
    i3 = i1;
    i1 = 0;
    i2 = i2 << 24 >> 24;
    while (1) {
     switch (i2 | 0) {
     case 57:
     case 56:
     case 55:
     case 54:
     case 53:
     case 52:
     case 51:
     case 50:
     case 49:
     case 48:
      {
       i1 = i2 + -48 | i1 << 4;
       i4 = 9;
       break;
      }
     case 70:
     case 69:
     case 68:
     case 67:
     case 66:
     case 65:
      {
       i1 = (i1 << 4) + -55 + i2 | 0;
       i4 = 9;
       break;
      }
     case 102:
     case 101:
     case 100:
     case 99:
     case 98:
     case 97:
      {
       i1 = (i1 << 4) + -87 + i2 | 0;
       i4 = 9;
       break;
      }
     default:
      {}
     }
     if ((i4 | 0) == 9) {
      i4 = 0;
      if ((i1 | 0) >= 1114112) {
       i1 = -1;
       break;
      }
     }
     i3 = i3 + 1 | 0;
     i2 = HEAP8[i3 >> 0] | 0;
     if (i2 << 24 >> 24 == 59) {
      i4 = 12;
      break L1;
     } else i2 = i2 << 24 >> 24;
    }
    return i1 | 0;
   }
   break;
  }
 case 59:
  {
   i1 = 0;
   i4 = 13;
   break;
  }
 default:
  {
   i3 = i1;
   i1 = 0;
   while (1) {
    i1 = (i1 * 10 | 0) + -48 + (i2 << 24 >> 24) | 0;
    i3 = i3 + 1 | 0;
    if ((i1 | 0) >= 1114112) {
     i1 = -1;
     break;
    }
    i2 = HEAP8[i3 >> 0] | 0;
    if (i2 << 24 >> 24 == 59) {
     i4 = 12;
     break L1;
    }
   }
   return i1 | 0;
  }
 } while (0);
 L18 : do if ((i4 | 0) == 12) {
  switch (i1 >> 8 | 0) {
  case 0:
   {
    i4 = 13;
    break L18;
   }
  case 255:
   break;
  case 223:
  case 222:
  case 221:
  case 220:
  case 219:
  case 218:
  case 217:
  case 216:
   {
    i4 = -1;
    return i4 | 0;
   }
  default:
   break L18;
  }
  if ((i1 | 1 | 0) == 65535) {
   i4 = -1;
   return i4 | 0;
  }
 } while (0);
 if ((i4 | 0) == 13) if (!(HEAP8[26712 + i1 >> 0] | 0)) {
  i4 = -1;
  return i4 | 0;
 }
 i4 = i1;
 return i4 | 0;
}

function _FT_New_GlyphSlot(i9, i10) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 if (!i9) {
  i11 = 35;
  return i11 | 0;
 }
 i3 = i9 + 96 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  i11 = 6;
  return i11 | 0;
 }
 i4 = HEAP32[i1 + 12 >> 2] | 0;
 i11 = HEAP32[i1 + 8 >> 2] | 0;
 i2 = HEAP32[i4 + 44 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i11 + 4 >> 2] & 255](i11, i2) | 0;
  if (!i1) {
   i1 = 64;
   i5 = 19;
  } else {
   _memset(i1 | 0, 0, i2 | 0) | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   i8 = i1;
   i1 = i4;
   i7 = HEAP32[i4 + 8 >> 2] | 0;
   i4 = HEAP32[i4 + 12 >> 2] | 0;
  }
 } else if (!i2) {
  i8 = 0;
  i7 = i11;
 } else {
  i1 = 6;
  i5 = 19;
 }
 if ((i5 | 0) == 19) {
  if (!i10) {
   i11 = i1;
   return i11 | 0;
  }
  HEAP32[i10 >> 2] = 0;
  i11 = i1;
  return i11 | 0;
 }
 HEAP32[i8 + 4 >> 2] = i9;
 HEAP32[i8 >> 2] = HEAP32[i1 + 4 >> 2];
 i2 = i7 + 4 | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 255](i7, 40) | 0;
 L18 : do if (!i3) {
  _ft_glyphslot_done(i8);
  if (!i8) {
   i11 = 64;
   return i11 | 0;
  } else i1 = 64;
 } else {
  i5 = i3;
  i6 = i5 + 40 | 0;
  do {
   HEAP8[i5 >> 0] = 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (i6 | 0));
  HEAP32[i8 + 156 >> 2] = i3;
  do if (!(HEAP32[HEAP32[i1 >> 2] >> 2] & 512)) {
   i1 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 255](i7, 96) | 0;
   if (!i1) {
    _ft_glyphslot_done(i8);
    i1 = 64;
    break L18;
   } else {
    i5 = i1 + 4 | 0;
    i6 = i5 + 92 | 0;
    do {
     HEAP8[i5 >> 0] = 0;
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) < (i6 | 0));
    HEAP32[i1 >> 2] = i7;
    HEAP32[i3 >> 2] = i1;
    break;
   }
  } while (0);
  i1 = HEAP32[i4 + 64 >> 2] | 0;
  if (i1 | 0) {
   i1 = FUNCTION_TABLE_ii[i1 & 63](i8) | 0;
   if (i1 | 0) {
    _ft_glyphslot_done(i8);
    break;
   }
  }
  i11 = i9 + 84 | 0;
  HEAP32[i8 + 8 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i11 >> 2] = i8;
  if (!i10) {
   i11 = 0;
   return i11 | 0;
  }
  HEAP32[i10 >> 2] = i8;
  i11 = 0;
  return i11 | 0;
 } while (0);
 FUNCTION_TABLE_vii[HEAP32[i11 + 8 >> 2] & 63](i11, i8);
 i11 = i1;
 return i11 | 0;
}

function _tt_face_load_name(i12, i13) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i14 = i15 + 4 | 0;
 i2 = i15;
 i4 = HEAP32[i13 + 28 >> 2] | 0;
 HEAP32[i12 + 360 >> 2] = i13;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i12 + 508 >> 2] & 127](i12, 1851878757, i13, i2) | 0;
 HEAP32[i14 >> 2] = i1;
 if (i1 | 0) {
  i14 = i1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i10 = _FT_Stream_Pos(i13) | 0;
 i1 = _FT_Stream_ReadFields(i13, 117604, i12 + 344 | 0) | 0;
 HEAP32[i14 >> 2] = i1;
 if (i1 | 0) {
  i14 = i1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i11 = i12 + 348 | 0;
 i5 = HEAP32[i11 >> 2] | 0;
 i3 = i5 * 12 | 0;
 i9 = i10 + 6 + i3 | 0;
 i7 = (HEAP32[i2 >> 2] | 0) + i10 | 0;
 if (i9 >>> 0 > i7 >>> 0) {
  HEAP32[i14 >> 2] = 145;
  i14 = 145;
  STACKTOP = i15;
  return i14 | 0;
 }
 HEAP32[i11 >> 2] = 0;
 i1 = _ft_mem_realloc(i4, 20, 0, i5, 0, i14) | 0;
 i8 = i12 + 356 | 0;
 HEAP32[i8 >> 2] = i1;
 i1 = HEAP32[i14 >> 2] | 0;
 if (i1 | 0) {
  i14 = i1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i13, i3) | 0;
 HEAP32[i14 >> 2] = i1;
 if (i1 | 0) {
  i14 = i1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[i8 >> 2] | 0;
 if (!i5) i2 = i1; else {
  i6 = i12 + 352 | 0;
  i2 = i1;
  do {
   i4 = _FT_Stream_ReadFields(i13, 117624, i2) | 0;
   HEAP32[i14 >> 2] = i4;
   do if (!i4) {
    i1 = i2 + 8 | 0;
    i3 = HEAP16[i1 >> 1] | 0;
    if (i3 << 16 >> 16) {
     i4 = i2 + 12 | 0;
     i16 = (HEAP32[i6 >> 2] | 0) + i10 + (HEAP32[i4 >> 2] | 0) | 0;
     HEAP32[i4 >> 2] = i16;
     if (i16 >>> 0 < i9 >>> 0 | (i16 + (i3 & 65535) | 0) >>> 0 > i7 >>> 0) {
      HEAP32[i4 >> 2] = 0;
      HEAP16[i1 >> 1] = 0;
      break;
     } else {
      i2 = i2 + 20 | 0;
      break;
     }
    }
   } while (0);
   i5 = i5 + -1 | 0;
  } while ((i5 | 0) != 0);
  i1 = HEAP32[i8 >> 2] | 0;
 }
 HEAP32[i11 >> 2] = (i2 - i1 | 0) / 20 | 0;
 _FT_Stream_ExitFrame(i13);
 HEAP16[i12 + 340 >> 1] = HEAP32[i11 >> 2];
 i16 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i15;
 return i16 | 0;
}

function _big2_entityValueTok(i3, i5, i6, i8) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0;
 if ((i5 | 0) == (i6 | 0)) {
  i8 = -4;
  return i8 | 0;
 }
 i7 = i3 + 76 | 0;
 i1 = i5;
 L4 : while (1) {
  L6 : do switch (HEAP8[i1 >> 0] | 0) {
  case 0:
   {
    switch (HEAP8[i7 + (HEAPU8[i1 + 1 >> 0] | 0) >> 0] | 0) {
    case 3:
     {
      i4 = 7;
      break L4;
     }
    case 30:
     {
      i4 = 10;
      break L4;
     }
    case 10:
     {
      i4 = 13;
      break L4;
     }
    case 9:
     {
      i4 = 16;
      break L4;
     }
    case 6:
     {
      i2 = 3;
      break L6;
     }
    case 7:
     {
      i4 = 6;
      break L6;
     }
    case 5:
     break;
    default:
     {
      i4 = 22;
      break L6;
     }
    }
    i2 = 2;
    break;
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i4 = 6;
    break;
   }
  default:
   i4 = 22;
  } while (0);
  if ((i4 | 0) == 6) {
   i4 = 0;
   i2 = 4;
  } else if ((i4 | 0) == 22) {
   i4 = 0;
   i2 = 2;
  }
  i1 = i1 + i2 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i4 = 24;
   break;
  }
 }
 if ((i4 | 0) == 7) if ((i1 | 0) == (i5 | 0)) {
  i8 = _big2_scanRef(i3, i5 + 2 | 0, i6, i8) | 0;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 10) if ((i1 | 0) == (i5 | 0)) {
  i8 = _big2_scanPercent(i3, i5 + 2 | 0, i6, i8) | 0;
  i8 = (i8 | 0) == 22 ? 0 : i8;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 13) if ((i1 | 0) == (i5 | 0)) {
  HEAP32[i8 >> 2] = i5 + 2;
  i8 = 7;
  return i8 | 0;
 } else {
  HEAP32[i8 >> 2] = i1;
  i8 = 6;
  return i8 | 0;
 } else if ((i4 | 0) == 16) {
  if ((i1 | 0) != (i5 | 0)) {
   HEAP32[i8 >> 2] = i1;
   i8 = 6;
   return i8 | 0;
  }
  i1 = i5 + 2 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i8 = -3;
   return i8 | 0;
  }
  if (!(HEAP8[i1 >> 0] | 0)) i1 = (HEAP8[i7 + (HEAPU8[i5 + 3 >> 0] | 0) >> 0] | 0) == 10 ? i5 + 4 | 0 : i1;
  HEAP32[i8 >> 2] = i1;
  i8 = 7;
  return i8 | 0;
 } else if ((i4 | 0) == 24) {
  HEAP32[i8 >> 2] = i6;
  i8 = 6;
  return i8 | 0;
 }
 return 0;
}

function _T42_GlyphSlot_Load(i8, i1, i3, i4) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i5 = HEAP32[(HEAP32[(HEAP32[i8 + 4 >> 2] | 0) + 96 >> 2] | 0) + 28 >> 2] | 0;
 i9 = i8 + 160 | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 _ft_glyphslot_free_bitmap(i6);
 HEAP32[i6 + 152 >> 2] = 0;
 i2 = i6 + 72 | 0;
 i6 = i6 + 24 | 0;
 i7 = i6 + 40 | 0;
 do {
  HEAP32[i6 >> 2] = 0;
  i6 = i6 + 4 | 0;
 } while ((i6 | 0) < (i7 | 0));
 i6 = i2;
 i7 = i6 + 72 | 0;
 do {
  HEAP32[i6 >> 2] = 0;
  i6 = i6 + 4 | 0;
 } while ((i6 | 0) < (i7 | 0));
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i5 + 72 >> 2] & 127](HEAP32[i9 >> 2] | 0, HEAP32[i1 + 44 >> 2] | 0, i3, i4 | 8) | 0;
 if (i1 | 0) return i1 | 0;
 i7 = i8 + 24 | 0;
 i9 = HEAP32[i9 >> 2] | 0;
 i6 = i9 + 24 | 0;
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i7 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
 HEAP32[i7 + 20 >> 2] = HEAP32[i6 + 20 >> 2];
 HEAP32[i7 + 24 >> 2] = HEAP32[i6 + 24 >> 2];
 HEAP32[i7 + 28 >> 2] = HEAP32[i6 + 28 >> 2];
 HEAP32[i8 + 56 >> 2] = HEAP32[i9 + 56 >> 2];
 HEAP32[i8 + 60 >> 2] = HEAP32[i9 + 60 >> 2];
 HEAP32[i8 + 72 >> 2] = HEAP32[i9 + 72 >> 2];
 i7 = i8 + 108 | 0;
 i6 = i9 + 108 | 0;
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i7 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
 i7 = i8 + 76 | 0;
 i6 = i9 + 76 | 0;
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i7 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
 HEAP32[i7 + 20 >> 2] = HEAP32[i6 + 20 >> 2];
 HEAP32[i8 + 100 >> 2] = HEAP32[i9 + 100 >> 2];
 HEAP32[i8 + 104 >> 2] = HEAP32[i9 + 104 >> 2];
 HEAP32[i8 + 128 >> 2] = HEAP32[i9 + 128 >> 2];
 HEAP32[i8 + 132 >> 2] = HEAP32[i9 + 132 >> 2];
 HEAP32[i8 + 136 >> 2] = HEAP32[i9 + 136 >> 2];
 HEAP32[i8 + 140 >> 2] = HEAP32[i9 + 140 >> 2];
 return i1 | 0;
}

function _unknown_toUtf8(i2, i9, i11, i12, i1) {
 i2 = i2 | 0;
 i9 = i9 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i16;
 i3 = HEAP32[i9 >> 2] | 0;
 if ((i3 | 0) == (i11 | 0)) {
  STACKTOP = i16;
  return;
 }
 i14 = i2 + 888 | 0;
 i15 = i2 + 368 | 0;
 i10 = i2 + 372 | 0;
 i5 = i2 + 76 | 0;
 i6 = i13 + 1 | 0;
 i7 = i13 + 2 | 0;
 i8 = i13 + 3 | 0;
 i4 = i3;
 while (1) {
  i17 = HEAPU8[i4 >> 0] | 0;
  i3 = i14 + (i17 << 2) + 1 | 0;
  i17 = HEAP8[i14 + (i17 << 2) >> 0] | 0;
  i2 = i17 << 24 >> 24;
  if (!(i17 << 24 >> 24)) {
   i2 = FUNCTION_TABLE_iii[HEAP32[i15 >> 2] & 255](HEAP32[i10 >> 2] | 0, i4) | 0;
   do if ((i2 | 0) < 0) i2 = 0; else {
    if ((i2 | 0) < 128) {
     HEAP8[i13 >> 0] = i2;
     i2 = 1;
     break;
    }
    if ((i2 | 0) < 2048) {
     HEAP8[i13 >> 0] = i2 >>> 6 | 192;
     HEAP8[i6 >> 0] = i2 & 63 | 128;
     i2 = 2;
     break;
    }
    if ((i2 | 0) < 65536) {
     HEAP8[i13 >> 0] = i2 >>> 12 | 224;
     HEAP8[i6 >> 0] = i2 >>> 6 & 63 | 128;
     HEAP8[i7 >> 0] = i2 & 63 | 128;
     i2 = 3;
     break;
    }
    if ((i2 | 0) < 1114112) {
     HEAP8[i13 >> 0] = i2 >>> 18 | 240;
     HEAP8[i6 >> 0] = i2 >>> 12 & 63 | 128;
     HEAP8[i7 >> 0] = i2 >>> 6 & 63 | 128;
     HEAP8[i8 >> 0] = i2 & 63 | 128;
     i2 = 4;
    } else i2 = 0;
   } while (0);
   if ((i2 | 0) > (i1 - (HEAP32[i12 >> 2] | 0) | 0)) {
    i1 = 20;
    break;
   }
   i4 = HEAP32[i9 >> 2] | 0;
   i3 = i13;
   i4 = i4 + ((HEAPU8[i5 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0) + -3) | 0;
  } else {
   if ((i2 | 0) > (i1 - (HEAP32[i12 >> 2] | 0) | 0)) {
    i1 = 20;
    break;
   }
   i4 = i4 + 1 | 0;
  }
  HEAP32[i9 >> 2] = i4;
  while (1) {
   i4 = HEAP8[i3 >> 0] | 0;
   i17 = HEAP32[i12 >> 2] | 0;
   HEAP32[i12 >> 2] = i17 + 1;
   HEAP8[i17 >> 0] = i4;
   i2 = i2 + -1 | 0;
   if (!i2) break; else i3 = i3 + 1 | 0;
  }
  i4 = HEAP32[i9 >> 2] | 0;
  if ((i4 | 0) == (i11 | 0)) {
   i1 = 20;
   break;
  }
 }
 if ((i1 | 0) == 20) {
  STACKTOP = i16;
  return;
 }
}

function _little2_charRefNumber(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i1 = i2 + 4 | 0;
 L1 : do if (!(HEAP8[i2 + 5 >> 0] | 0)) if ((HEAP8[i1 >> 0] | 0) == 120) {
  i2 = i2 + 6 | 0;
  i1 = 0;
  while (1) {
   L6 : while (1) {
    if (!(HEAP8[i2 + 1 >> 0] | 0)) {
     i3 = HEAP8[i2 >> 0] | 0;
     if (i3 << 24 >> 24 == 59) break L1;
     i3 = i3 << 24 >> 24;
     switch (i3 | 0) {
     case 57:
     case 56:
     case 55:
     case 54:
     case 53:
     case 52:
     case 51:
     case 50:
     case 49:
     case 48:
      {
       i4 = 8;
       break L6;
      }
     case 70:
     case 69:
     case 68:
     case 67:
     case 66:
     case 65:
      {
       i4 = 9;
       break L6;
      }
     case 102:
     case 101:
     case 100:
     case 99:
     case 98:
     case 97:
      {
       i4 = 10;
       break L6;
      }
     default:
      {}
     }
    }
    i2 = i2 + 2 | 0;
   }
   if ((i4 | 0) == 8) {
    i4 = 0;
    i1 = i3 + -48 | i1 << 4;
   } else if ((i4 | 0) == 9) {
    i4 = 0;
    i1 = (i1 << 4) + -55 + i3 | 0;
   } else if ((i4 | 0) == 10) {
    i4 = 0;
    i1 = (i1 << 4) + -87 + i3 | 0;
   }
   if ((i1 | 0) < 1114112) i2 = i2 + 2 | 0; else {
    i1 = -1;
    break;
   }
  }
  return i1 | 0;
 } else {
  i3 = i1;
  i1 = 0;
  i4 = 13;
 } else {
  i3 = i1;
  i1 = 0;
  i4 = 13;
 } while (0);
 L18 : do if ((i4 | 0) == 13) {
  while (1) {
   if (!(HEAP8[i3 + 1 >> 0] | 0)) {
    i2 = HEAP8[i3 >> 0] | 0;
    if (i2 << 24 >> 24 == 59) break L18;
    i2 = i2 << 24 >> 24;
   } else i2 = -1;
   i1 = (i1 * 10 | 0) + -48 + i2 | 0;
   if ((i1 | 0) >= 1114112) {
    i1 = -1;
    break;
   } else {
    i3 = i3 + 2 | 0;
    i4 = 13;
   }
  }
  return i1 | 0;
 } while (0);
 switch (i1 >> 8 | 0) {
 case 0:
  {
   if (!(HEAP8[26712 + i1 >> 0] | 0)) {
    i4 = -1;
    return i4 | 0;
   }
   break;
  }
 case 255:
  {
   if ((i1 | 1 | 0) == 65535) {
    i4 = -1;
    return i4 | 0;
   }
   break;
  }
 case 223:
 case 222:
 case 221:
 case 220:
 case 219:
 case 218:
 case 217:
 case 216:
  {
   i4 = -1;
   return i4 | 0;
  }
 default:
  {}
 }
 i4 = i1;
 return i4 | 0;
}

function _FT_Outline_Get_Orientation(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 if (!i9) {
  i12 = 0;
  return i12 | 0;
 }
 i1 = HEAP16[i9 + 2 >> 1] | 0;
 if (i1 << 16 >> 16 < 1) {
  i12 = 0;
  return i12 | 0;
 }
 i12 = HEAP32[i9 + 4 >> 2] | 0;
 i8 = i12 + (i1 << 16 >> 16 << 3) | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i2 = HEAP32[i12 + 4 >> 2] | 0;
 if (i1 << 16 >> 16 == 1) {
  i12 = 2;
  return i12 | 0;
 }
 i7 = i2;
 i4 = i3;
 i5 = i12 + 8 | 0;
 i6 = i2;
 i2 = i3;
 i1 = i12;
 while (1) {
  i11 = HEAP32[i5 >> 2] | 0;
  i2 = (i11 | 0) < (i2 | 0) ? i11 : i2;
  i4 = (i11 | 0) > (i4 | 0) ? i11 : i4;
  i1 = HEAP32[i1 + 12 >> 2] | 0;
  i7 = (i1 | 0) < (i7 | 0) ? i1 : i7;
  i6 = (i1 | 0) > (i6 | 0) ? i1 : i6;
  i1 = i5 + 8 | 0;
  if (i1 >>> 0 >= i8 >>> 0) break; else {
   i11 = i5;
   i5 = i1;
   i1 = i11;
  }
 }
 if ((i2 | 0) == (i4 | 0) | (i6 | 0) == (i7 | 0)) {
  i12 = 2;
  return i12 | 0;
 }
 i11 = 31 - (Math_clz32(((i4 | 0) < 0 ? 0 - i4 | 0 : i4) | ((i2 | 0) < 0 ? 0 - i2 | 0 : i2) | 0) | 0) + -14 | 0;
 i11 = (i11 | 0) > 0 ? i11 : 0;
 i10 = 31 - (Math_clz32(i6 - i7 | 0) | 0) + -14 | 0;
 i10 = (i10 | 0) > 0 ? i10 : 0;
 i1 = HEAP16[i9 >> 1] | 0;
 if (i1 << 16 >> 16 <= 0) {
  i12 = 0;
  i11 = (i12 | 0) > 0;
  i12 = i12 >> 31;
  i12 = i12 + 2 | 0;
  i12 = i12 & -2;
  i12 = i11 ? 1 : i12;
  return i12 | 0;
 }
 i8 = HEAP32[i9 + 12 >> 2] | 0;
 i6 = i1 << 16 >> 16;
 i1 = 0;
 i2 = 0;
 i5 = 0;
 while (1) {
  i7 = HEAP16[i8 + (i5 << 1) >> 1] | 0;
  if ((i2 | 0) <= (i7 | 0)) {
   i3 = HEAP32[i12 + (i7 << 3) >> 2] | 0;
   i4 = HEAP32[i12 + (i7 << 3) + 4 >> 2] | 0;
   while (1) {
    i9 = i3;
    i3 = HEAP32[i12 + (i2 << 3) >> 2] | 0;
    i13 = i4;
    i4 = HEAP32[i12 + (i2 << 3) + 4 >> 2] | 0;
    i1 = (Math_imul(i4 - i13 >> i10, i3 + i9 >> i11) | 0) + i1 | 0;
    if ((i2 | 0) >= (i7 | 0)) break; else i2 = i2 + 1 | 0;
   }
  }
  i5 = i5 + 1 | 0;
  if ((i5 | 0) >= (i6 | 0)) break; else i2 = i7 + 1 | 0;
 }
 i12 = (i1 | 0) > 0;
 i13 = i1 >> 31;
 i13 = i13 + 2 | 0;
 i13 = i13 & -2;
 i13 = i12 ? 1 : i13;
 return i13 | 0;
}

function _parserInit(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 HEAP32[i6 + 280 >> 2] = 69;
 _XmlPrologStateInit(i6 + 256 | 0);
 L1 : do if (!i1) i1 = 0; else {
  i3 = i6 + 416 | 0;
  i4 = i6 + 428 | 0;
  i5 = i6 + 424 | 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i5 >> 2] | 0)) {
    if (!((_poolGrow(i3) | 0) << 24 >> 24)) {
     i1 = 0;
     break L1;
    }
    i2 = HEAP32[i4 >> 2] | 0;
   }
   i7 = HEAP8[i1 >> 0] | 0;
   HEAP32[i4 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = i7;
   if (!(HEAP8[i1 >> 0] | 0)) break; else i1 = i1 + 1 | 0;
  }
  i7 = i6 + 432 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
 } while (0);
 HEAP32[i6 + 232 >> 2] = i1;
 HEAP32[i6 + 360 >> 2] = 0;
 _XmlInitEncoding(i6 + 148 | 0, i6 + 144 | 0, 0) | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i1 = i6 + 116 | 0;
 i3 = i6 + 52 | 0;
 i4 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP32[i1 >> 2] = i6;
 HEAP32[i6 + 120 >> 2] = 0;
 i1 = i6 + 128 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 i1 = HEAP32[i6 + 8 >> 2] | 0;
 HEAP32[i6 + 24 >> 2] = i1;
 HEAP32[i6 + 28 >> 2] = i1;
 HEAP32[i6 + 36 >> 2] = 0;
 HEAP32[i6 + 40 >> 2] = 0;
 i1 = i6 + 316 | 0;
 i3 = i6 + 408 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 i3 = i6 + 284 | 0;
 i2 = i6 + 308 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 i3 = i1;
 i4 = i3 + 36 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP16[i1 + 36 >> 1] = 0;
 HEAP8[i2 >> 0] = 1;
 HEAP32[i6 + 312 >> 2] = 0;
 HEAP32[i6 + 364 >> 2] = 0;
 HEAP32[i6 + 372 >> 2] = 0;
 HEAP32[i6 + 384 >> 2] = 0;
 HEAP32[i6 + 240 >> 2] = 0;
 HEAP32[i6 + 252 >> 2] = 0;
 HEAP32[i6 + 244 >> 2] = 0;
 HEAP32[i6 + 476 >> 2] = 0;
 HEAP32[i6 + 480 >> 2] = 0;
 HEAP8[i6 + 488 >> 0] = 0;
 HEAP8[i6 + 489 >> 0] = 0;
 HEAP32[i6 + 492 >> 2] = 0;
 HEAP32[i6 + 496 >> 2] = 0;
 return;
}

function _sfnt_done_face(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!i2) return;
 i3 = HEAP32[i2 + 100 >> 2] | 0;
 i4 = i2 + 532 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = (i5 | 0) != 0;
 if (i6) {
  i1 = HEAP32[i5 + 80 >> 2] | 0;
  if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i2);
  i1 = HEAP32[i5 + 100 >> 2] | 0;
  if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i2);
 }
 if (HEAP8[i2 + 780 >> 0] | 0) {
  i1 = i2 + 760 | 0;
  if (HEAP32[i1 >> 2] | 0) _FT_Stream_ReleaseFrame(HEAP32[i2 + 104 >> 2] | 0, i1);
  HEAP32[i2 + 764 >> 2] = 0;
  HEAP32[i2 + 768 >> 2] = 0;
  HEAP32[i2 + 772 >> 2] = 0;
 }
 i1 = i2 + 104 | 0;
 _FT_Stream_ReleaseFrame(HEAP32[i1 >> 2] | 0, i2 + 740 | 0);
 i7 = i2 + 744 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 i7 = i2 + 144 | 0;
 _ft_mem_free(i3, HEAP32[i7 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 HEAP32[i2 + 140 >> 2] = 0;
 i7 = i2 + 156 | 0;
 _ft_mem_free(i3, HEAP32[i7 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 HEAP16[i2 + 152 >> 1] = 0;
 _FT_Stream_ReleaseFrame(HEAP32[i1 >> 2] | 0, i2 + 500 | 0);
 HEAP32[i2 + 504 >> 2] = 0;
 i1 = HEAP32[i1 >> 2] | 0;
 _FT_Stream_ReleaseFrame(i1, i2 + 680 | 0);
 _FT_Stream_ReleaseFrame(i1, i2 + 688 | 0);
 HEAP32[i2 + 684 >> 2] = 0;
 HEAP32[i2 + 692 >> 2] = 0;
 i1 = i2 + 292 | 0;
 if (HEAP8[i1 >> 0] | 0) {
  i7 = i2 + 332 | 0;
  _ft_mem_free(i3, HEAP32[i7 >> 2] | 0);
  HEAP32[i7 >> 2] = 0;
  i7 = i2 + 336 | 0;
  _ft_mem_free(i3, HEAP32[i7 >> 2] | 0);
  HEAP32[i7 >> 2] = 0;
  HEAP8[i1 >> 0] = 0;
 }
 i7 = i2 + 544 | 0;
 _ft_mem_free(i3, HEAP32[i7 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 HEAP16[i2 + 542 >> 1] = 0;
 if (i6) FUNCTION_TABLE_vi[HEAP32[i5 + 52 >> 2] & 127](i2);
 i7 = i2 + 20 | 0;
 _ft_mem_free(i3, HEAP32[i7 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 i7 = i2 + 24 | 0;
 _ft_mem_free(i3, HEAP32[i7 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 i7 = i2 + 32 | 0;
 _ft_mem_free(i3, HEAP32[i7 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 i7 = i2 + 664 | 0;
 _ft_mem_free(i3, HEAP32[i7 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 return;
}

function _ass_fill_halfplane_tile16_c(i8, i9, i1, i2, i3, i4, i5) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i10 = i12 + 32 | 0;
 i11 = i12;
 i6 = ((i5 | 0) < 0) << 31 >> 31;
 i14 = ___muldi3(i5 | 0, i6 | 0, i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0) | 0;
 i14 = _i64Add(i14 | 0, tempRet0 | 0, 0, 131072) | 0;
 i14 = _bitshift64Ashr(i14 | 0, tempRet0 | 0, 50) | 0;
 i13 = tempRet0;
 i7 = ___muldi3(i5 | 0, i6 | 0, i2 | 0, ((i2 | 0) < 0) << 31 >> 31 | 0) | 0;
 i7 = _i64Add(i7 | 0, tempRet0 | 0, 0, 131072) | 0;
 i7 = _bitshift64Ashr(i7 | 0, tempRet0 | 0, 50) | 0;
 i1 = tempRet0;
 i3 = _bitshift64Shl(i3 | 0, i4 | 0, 21) | 0;
 i3 = _bitshift64Ashr(i3 | 0, tempRet0 | 0, 32) | 0;
 i6 = ___muldi3(i3 | 0, tempRet0 | 0, i5 | 0, i6 | 0) | 0;
 i6 = _i64Add(i6 | 0, tempRet0 | 0, 0, 4096) | 0;
 i6 = _bitshift64Lshr(i6 | 0, tempRet0 | 0, 45) | 0;
 i3 = _bitshift64Shl(i14 | 0, i13 | 0, 16) | 0;
 i2 = i3 >> 16;
 i1 = _bitshift64Shl(i7 | 0, i1 | 0, 16) | 0;
 i7 = i1 >> 16;
 i5 = i2 + i7 | 0;
 i6 = (i6 & 65535) + 512 | 0;
 i3 = (i3 | 0) < 0 ? 0 - i2 | 0 : i2;
 i1 = (i1 | 0) < 0 ? 0 - i7 | 0 : i7;
 i3 = (((i3 << 16 | 0) > (i1 << 16 | 0) ? i1 : i3) << 16 >> 16) + 2 >> 2;
 i1 = 0;
 do {
  i14 = Math_imul(i1, i2) | 0;
  HEAP16[i10 + (i1 << 1) >> 1] = i14 - i3;
  HEAP16[i11 + (i1 << 1) >> 1] = i14 + i3;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 16);
 i4 = 0;
 i3 = i8;
 i1 = i6 - (i5 >>> 1) | 0;
 while (1) {
  i2 = i1 << 16 >> 16;
  i1 = 0;
  do {
   i14 = i2 - (HEAPU16[i10 + (i1 << 1) >> 1] | 0) << 16 >> 16;
   i14 = (i14 | 0) > 0 ? i14 : 0;
   i13 = i2 - (HEAPU16[i11 + (i1 << 1) >> 1] | 0) << 16 >> 16;
   i13 = (i13 | 0) > 0 ? i13 : 0;
   HEAP8[i3 + i1 >> 0] = (((i13 | 0) < 1023 ? i13 : 1023) + ((i14 | 0) < 1023 ? i14 : 1023) | 0) >>> 3;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 16);
  i4 = i4 + 1 | 0;
  if ((i4 | 0) == 16) break; else {
   i3 = i3 + i9 | 0;
   i1 = i2 - i7 | 0;
  }
 }
 STACKTOP = i12;
 return;
}

function _qsort(i2, i1, i7, i8) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i9 = i11 + 8 | 0;
 i10 = i11;
 i5 = Math_imul(i7, i1) | 0;
 i6 = i10;
 HEAP32[i6 >> 2] = 1;
 HEAP32[i6 + 4 >> 2] = 0;
 L1 : do if (i5 | 0) {
  i6 = 0 - i7 | 0;
  HEAP32[i9 + 4 >> 2] = i7;
  HEAP32[i9 >> 2] = i7;
  i3 = 2;
  i1 = i7;
  i4 = i7;
  while (1) {
   i1 = i1 + i7 + i4 | 0;
   HEAP32[i9 + (i3 << 2) >> 2] = i1;
   if (i1 >>> 0 < i5 >>> 0) {
    i12 = i4;
    i3 = i3 + 1 | 0;
    i4 = i1;
    i1 = i12;
   } else break;
  }
  i4 = i2 + i5 + i6 | 0;
  if (i4 >>> 0 > i2 >>> 0) {
   i5 = i4;
   i3 = 1;
   i1 = 1;
   do {
    do if ((i1 & 3 | 0) == 3) {
     _sift(i2, i7, i8, i3, i9);
     _shr(i10, 2);
     i3 = i3 + 2 | 0;
    } else {
     i1 = i3 + -1 | 0;
     if ((HEAP32[i9 + (i1 << 2) >> 2] | 0) >>> 0 < (i5 - i2 | 0) >>> 0) _sift(i2, i7, i8, i3, i9); else _trinkle(i2, i7, i8, i10, i3, 0, i9);
     if ((i3 | 0) == 1) {
      _shl(i10, 1);
      i3 = 0;
      break;
     } else {
      _shl(i10, i1);
      i3 = 1;
      break;
     }
    } while (0);
    i1 = HEAP32[i10 >> 2] | 1;
    HEAP32[i10 >> 2] = i1;
    i2 = i2 + i7 | 0;
   } while (i2 >>> 0 < i4 >>> 0);
  } else {
   i3 = 1;
   i1 = 1;
  }
  _trinkle(i2, i7, i8, i10, i3, 0, i9);
  i4 = i10 + 4 | 0;
  while (1) {
   if ((i3 | 0) == 1 & (i1 | 0) == 1) {
    if (!(HEAP32[i4 >> 2] | 0)) break L1;
   } else if ((i3 | 0) >= 2) {
    _shl(i10, 2);
    i12 = i3 + -2 | 0;
    HEAP32[i10 >> 2] = HEAP32[i10 >> 2] ^ 7;
    _shr(i10, 1);
    _trinkle(i2 + (0 - (HEAP32[i9 + (i12 << 2) >> 2] | 0)) + i6 | 0, i7, i8, i10, i3 + -1 | 0, 1, i9);
    _shl(i10, 1);
    i1 = HEAP32[i10 >> 2] | 1;
    HEAP32[i10 >> 2] = i1;
    i5 = i2 + i6 | 0;
    _trinkle(i5, i7, i8, i10, i12, 1, i9);
    i2 = i5;
    i3 = i12;
    continue;
   }
   i1 = _pntz(i10) | 0;
   _shr(i10, i1);
   i2 = i2 + i6 | 0;
   i3 = i1 + i3 | 0;
   i1 = HEAP32[i10 >> 2] | 0;
  }
 } while (0);
 STACKTOP = i11;
 return;
}

function _adler32(i2, i4, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = i2 & 65535;
 i2 = i2 >>> 16;
 if (!i4) {
  i10 = 1;
  return i10 | 0;
 }
 if (i3) {
  i9 = i3;
  do {
   i8 = i9 >>> 0 < 5552 ? i9 : 5552;
   if ((i8 | 0) > 15) {
    i5 = ~i9;
    i5 = -17 - (i5 >>> 0 > 4294961743 ? i5 : -5553) | 0;
    i7 = i5 & -16;
    i6 = i4 + 16 + i7 | 0;
    i3 = i8;
    while (1) {
     i25 = (HEAPU8[i4 >> 0] | 0) + i1 | 0;
     i24 = i25 + (HEAPU8[i4 + 1 >> 0] | 0) | 0;
     i23 = i24 + (HEAPU8[i4 + 2 >> 0] | 0) | 0;
     i22 = i23 + (HEAPU8[i4 + 3 >> 0] | 0) | 0;
     i21 = i22 + (HEAPU8[i4 + 4 >> 0] | 0) | 0;
     i20 = i21 + (HEAPU8[i4 + 5 >> 0] | 0) | 0;
     i19 = i20 + (HEAPU8[i4 + 6 >> 0] | 0) | 0;
     i18 = i19 + (HEAPU8[i4 + 7 >> 0] | 0) | 0;
     i17 = i18 + (HEAPU8[i4 + 8 >> 0] | 0) | 0;
     i16 = i17 + (HEAPU8[i4 + 9 >> 0] | 0) | 0;
     i15 = i16 + (HEAPU8[i4 + 10 >> 0] | 0) | 0;
     i14 = i15 + (HEAPU8[i4 + 11 >> 0] | 0) | 0;
     i13 = i14 + (HEAPU8[i4 + 12 >> 0] | 0) | 0;
     i12 = i13 + (HEAPU8[i4 + 13 >> 0] | 0) | 0;
     i11 = i12 + (HEAPU8[i4 + 14 >> 0] | 0) | 0;
     i1 = i11 + (HEAPU8[i4 + 15 >> 0] | 0) | 0;
     i2 = i25 + i2 + i24 + i23 + i22 + i21 + i20 + i19 + i18 + i17 + i16 + i15 + i14 + i13 + i12 + i11 + i1 | 0;
     i3 = i3 + -16 | 0;
     if ((i3 | 0) <= 15) break; else i4 = i4 + 16 | 0;
    }
    i3 = i5 - i7 | 0;
    if (!i3) i4 = i6; else i10 = 7;
   } else {
    i3 = i9;
    i6 = i4;
    i10 = 7;
   }
   i9 = i9 - i8 | 0;
   if ((i10 | 0) == 7) {
    i10 = 0;
    i5 = i3;
    i4 = i6;
    while (1) {
     i1 = (HEAPU8[i4 >> 0] | 0) + i1 | 0;
     i2 = i1 + i2 | 0;
     i5 = i5 + -1 | 0;
     if (!i5) break; else i4 = i4 + 1 | 0;
    }
    i4 = i6 + i3 | 0;
   }
   i1 = (i1 >>> 0) % 65521 | 0;
   i2 = (i2 >>> 0) % 65521 | 0;
  } while ((i9 | 0) != 0);
 }
 i25 = i2 << 16 | i1;
 return i25 | 0;
}

function _af_cjk_compute_stem_width(i1, i8, i13) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 i9 = HEAP32[i1 + 2988 >> 2] | 0;
 i11 = (i8 | 0) == 1;
 i10 = HEAP32[i1 + 2984 >> 2] | 0;
 if (!(i10 & 4)) return i13 | 0;
 i1 = (i13 | 0) < 0 ? 0 - i13 | 0 : i13;
 do if (i11 & (i10 & 2 | 0) == 0) i12 = 4; else if ((i10 & 1 | 0) == 0 & (i11 ^ 1)) i12 = 4; else {
  i6 = HEAP32[i9 + 44 + (i8 * 1572 | 0) + 8 >> 2] | 0;
  if (!i6) {
   i3 = i1;
   i2 = i1 + 32 & -64;
   i12 = 18;
  } else {
   i4 = 0;
   i3 = i1;
   i5 = 98;
   while (1) {
    i14 = HEAP32[i9 + 44 + (i8 * 1572 | 0) + 12 + (i4 * 12 | 0) + 4 >> 2] | 0;
    i2 = i1 - i14 | 0;
    i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
    i7 = (i2 | 0) < (i5 | 0);
    i3 = i7 ? i14 : i3;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i6 | 0)) break; else i5 = i7 ? i2 : i5;
   }
   i2 = i3 + 32 & -64;
   if ((i3 | 0) > (i1 | 0)) i1 = (i2 + -48 | 0) < (i1 | 0) ? i3 : i1; else i12 = 18;
  }
  if ((i12 | 0) == 18) i1 = (i2 | 48 | 0) > (i1 | 0) ? i3 : i1;
  if (i11) {
   i1 = (i1 | 0) > 63 ? i1 + 16 & -64 : 64;
   break;
  }
  if (i10 & 8 | 0) {
   i1 = (i1 | 0) < 64 ? 64 : i1 + 32 & -64;
   break;
  }
  if ((i1 | 0) < 48) {
   i1 = i1 + 64 >> 1;
   break;
  }
  if ((i1 | 0) < 128) {
   i1 = i1 + 22 & -64;
   break;
  } else {
   i1 = i1 + 32 & -64;
   break;
  }
 } while (0);
 do if ((i12 | 0) == 4) {
  if (HEAP32[i9 + 44 + (i8 * 1572 | 0) + 8 >> 2] | 0) {
   i2 = HEAP32[i9 + 44 + (i8 * 1572 | 0) + 16 >> 2] | 0;
   i14 = i1 - i2 | 0;
   if ((((i14 | 0) < 0 ? 0 - i14 | 0 : i14) | 0) < 40) {
    i1 = (i2 | 0) > 48 ? i2 : 48;
    break;
   }
  }
  if ((i1 | 0) < 54) {
   i1 = ((54 - i1 | 0) / 2 | 0) + i1 | 0;
   break;
  }
  if ((i1 | 0) < 192) {
   i2 = i1 & 63;
   i3 = i1 & -64;
   if (i2 >>> 0 >= 10) if (i2 >>> 0 < 22) {
    i1 = i3 | 10;
    break;
   } else {
    i1 = (i2 + -42 | 0) >>> 0 < 12 ? i3 | 54 : i1;
    break;
   }
  }
 } while (0);
 i14 = (i13 | 0) > -1 ? i1 : 0 - i1 | 0;
 return i14 | 0;
}

function _pfr_extra_item_load_kerning_pairs(i8, i3, i10) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i12;
 HEAP32[i5 >> 2] = 0;
 i6 = HEAP32[i10 >> 2] | 0;
 i11 = _ft_mem_alloc(i6, 24, i5) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1 | 0) {
  i11 = i1;
  STACKTOP = i12;
  return i11 | 0;
 }
 i7 = i8 + 4 | 0;
 if (i7 >>> 0 <= i3 >>> 0) {
  i2 = HEAP8[i8 >> 0] | 0;
  HEAP8[i11 + 4 >> 0] = i2;
  HEAP16[i11 + 6 >> 1] = (HEAPU8[i8 + 1 >> 0] | 0) << 8 | (HEAPU8[i8 + 2 >> 0] | 0);
  i4 = HEAP8[i8 + 3 >> 0] | 0;
  HEAP8[i11 + 5 >> 0] = i4;
  HEAP32[i11 + 12 >> 2] = (HEAP32[i10 + 4 >> 2] | 0) + i7 - (HEAP32[i10 + 148 >> 2] | 0);
  i9 = i4 & 255;
  i1 = i9 << 1 & 2;
  i1 = (i9 & 2 | 0) == 0 ? i1 + 3 | 0 : i1 | 4;
  HEAP32[i11 + 8 >> 2] = i1;
  i9 = i2 & 255;
  if ((i7 + (Math_imul(i1, i9) | 0) | 0) >>> 0 <= i3 >>> 0) {
   if (!(i2 << 24 >> 24)) {
    _ft_mem_free(i6, i11);
    i11 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i12;
    return i11 | 0;
   }
   i1 = Math_imul(i1, i9 + -1 | 0) | 0;
   if (!(i4 & 1)) {
    HEAP32[i11 + 16 >> 2] = (HEAPU8[i7 >> 0] | 0) << 16 | (HEAPU8[i8 + 5 >> 0] | 0);
    i1 = i7 + i1 | 0;
    i1 = (HEAPU8[i1 >> 0] | 0) << 16 | (HEAPU8[i1 + 1 >> 0] | 0);
   } else {
    HEAP32[i11 + 16 >> 2] = (HEAPU8[i8 + 6 >> 0] | 0) << 8 | (HEAPU8[i8 + 7 >> 0] | 0) | ((HEAPU8[i7 >> 0] | 0) << 8 | (HEAPU8[i8 + 5 >> 0] | 0)) << 16;
    i8 = i7 + i1 + 2 | 0;
    i1 = i8 + -2 | 0;
    i8 = i8 + 2 + -2 | 0;
    i1 = (HEAPU8[i8 >> 0] | 0) << 8 | (HEAPU8[i8 + 1 >> 0] | 0) | ((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) << 16;
   }
   HEAP32[i11 + 20 >> 2] = i1;
   HEAP32[i11 >> 2] = 0;
   i8 = i10 + 140 | 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = i11;
   HEAP32[i8 >> 2] = i11;
   i11 = i10 + 132 | 0;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i9;
   i11 = 0;
   STACKTOP = i12;
   return i11 | 0;
  }
 }
 _ft_mem_free(i6, i11);
 HEAP32[i5 >> 2] = 8;
 i11 = 8;
 STACKTOP = i12;
 return i11 | 0;
}

function _tt_face_get_kerning(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i5 = HEAP32[i3 + 740 >> 2] | 0;
 i14 = HEAP32[i3 + 744 >> 2] | 0;
 i15 = i5 + i14 | 0;
 i4 = HEAP32[i3 + 748 >> 2] | 0;
 if ((i14 | 0) < 10 | (i4 | 0) == 0) {
  i15 = 0;
  return i15 | 0;
 }
 i14 = HEAP32[i3 + 752 >> 2] | 0;
 i13 = i1 << 16 | i2;
 i12 = i3 + 756 | 0;
 i10 = 1;
 i11 = i5 + 4 | 0;
 i1 = 0;
 i2 = i5 + 10 | 0;
 while (1) {
  i9 = HEAP8[i11 + 5 >> 0] | 0;
  i3 = i11 + (HEAPU8[i11 + 2 >> 0] << 8 | HEAPU8[i11 + 3 >> 0]) | 0;
  i5 = i11;
  i11 = i3 >>> 0 > i15 >>> 0 ? i15 : i3;
  i3 = i5 + 14 | 0;
  L6 : do if (!((i14 & i10 | 0) == 0 | i3 >>> 0 > i11 >>> 0)) {
   i2 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i5 + 7 >> 0];
   i8 = i11 - i3 | 0;
   i2 = (i8 | 0) < (i2 * 6 | 0) ? (i8 | 0) / 6 | 0 : i2;
   if (!(HEAP8[i5 + 4 >> 0] | 0)) {
    i5 = (i2 | 0) == 0;
    if (!(HEAP32[i12 >> 2] & i10)) {
     if (i5) break;
     while (1) {
      if ((HEAPU8[i3 + 1 >> 0] << 16 | HEAPU8[i3 >> 0] << 24 | HEAPU8[i3 + 2 >> 0] << 8 | HEAPU8[i3 + 3 >> 0] | 0) == (i13 | 0)) break;
      i2 = i2 + -1 | 0;
      if (!i2) break L6; else i3 = i3 + 6 | 0;
     }
     i5 = HEAPU8[i3 + 4 >> 0] | 0;
     i2 = i3 + 5 | 0;
    } else {
     if (i5) break; else i5 = 0;
     while (1) {
      i6 = (i2 + i5 | 0) >>> 1;
      i8 = i3 + (i6 * 6 | 0) + 4 | 0;
      i7 = i8 + -4 | 0;
      i7 = HEAPU8[i7 + 1 >> 0] << 16 | HEAPU8[i7 >> 0] << 24 | HEAPU8[i7 + 2 >> 0] << 8 | HEAPU8[i7 + 3 >> 0];
      if ((i7 | 0) == (i13 | 0)) break;
      i8 = i7 >>> 0 < i13 >>> 0;
      i5 = i8 ? i6 + 1 | 0 : i5;
      i2 = i8 ? i2 : i6;
      if (i5 >>> 0 >= i2 >>> 0) break L6;
     }
     i5 = HEAPU8[i8 >> 0] | 0;
     i2 = i8 + 1 | 0;
    }
    i1 = ((HEAPU8[i2 >> 0] | i5 << 8) << 16 >> 16) + ((i9 & 8) == 0 ? i1 : 0) | 0;
   }
  } while (0);
  i4 = i4 + -1 | 0;
  i2 = i11 + 6 | 0;
  if (i2 >>> 0 > i15 >>> 0 | (i4 | 0) == 0) break; else i10 = i10 << 1;
 }
 return i1 | 0;
}

function _cf2_computeDarkening(i15, i14, i3, i16, i17, i1, i2) {
 i15 = i15 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 HEAP32[i16 >> 2] = 0;
 i1 = i1 << 24 >> 24 != 0;
 if ((i15 | 0) < 655 | ((i17 | 0) != 0 | i1) ^ 1) return;
 if (i1) {
  i4 = HEAP32[i2 >> 2] | 0;
  i5 = HEAP32[i2 + 4 >> 2] | 0;
  i6 = HEAP32[i2 + 8 >> 2] | 0;
  i8 = HEAP32[i2 + 12 >> 2] | 0;
  i9 = HEAP32[i2 + 16 >> 2] | 0;
  i13 = HEAP32[i2 + 20 >> 2] | 0;
  i10 = HEAP32[i2 + 24 >> 2] | 0;
  i12 = HEAP32[i2 + 28 >> 2] | 0;
  i11 = _FT_MulFix(i17 + i3 | 0, i15) | 0;
  if ((62 - (Math_clz32(i14 | 0) | 0) - (Math_clz32(i11 | 0) | 0) | 0) > 45) i2 = i10 << 16; else i2 = _FT_MulFix(i11, i14) | 0;
  i1 = i4 << 16;
  L10 : do if ((i2 | 0) < (i1 | 0)) i1 = _FT_DivFix(i5 << 16, i14) | 0; else {
   i3 = i6 << 16;
   if ((i2 | 0) < (i3 | 0)) {
    i2 = i6 - i4 | 0;
    i1 = _FT_DivFix(i1, i14) | 0;
    if (!i2) i7 = 12; else {
     i1 = _FT_MulDiv(i11 - i1 | 0, i8 - i5 | 0, i2) | 0;
     i1 = (_FT_DivFix(i5 << 16, i14) | 0) + i1 | 0;
     break;
    }
   } else {
    i1 = i9 << 16;
    if ((i2 | 0) < (i1 | 0)) i7 = 12; else if ((i2 | 0) < (i10 << 16 | 0)) i7 = 16;
   }
   do if ((i7 | 0) == 12) {
    i2 = i9 - i6 | 0;
    i1 = _FT_DivFix(i3, i14) | 0;
    if (!i2) {
     i1 = i9 << 16;
     i7 = 16;
     break;
    } else {
     i1 = _FT_MulDiv(i11 - i1 | 0, i13 - i8 | 0, i2) | 0;
     i1 = (_FT_DivFix(i8 << 16, i14) | 0) + i1 | 0;
     break L10;
    }
   } while (0);
   if ((i7 | 0) == 16) {
    i2 = i10 - i9 | 0;
    i1 = _FT_DivFix(i1, i14) | 0;
    if (i2 | 0) {
     i1 = _FT_MulDiv(i11 - i1 | 0, i12 - i13 | 0, i2) | 0;
     i1 = (_FT_DivFix(i13 << 16, i14) | 0) + i1 | 0;
     break;
    }
   }
   i1 = _FT_DivFix(i12 << 16, i14) | 0;
  } while (0);
  HEAP32[i16 >> 2] = i1;
  i1 = _FT_DivFix(i1, i15 << 1) | 0;
  HEAP32[i16 >> 2] = i1;
 } else i1 = 0;
 HEAP32[i16 >> 2] = i1 + ((i17 | 0) / 2 | 0);
 return;
}

function _T1_Parse_Glyph_And_Get_Char_String(i4, i5, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 i8 = HEAP32[(HEAP32[i1 + 128 >> 2] | 0) + 48 >> 2] | 0;
 i10 = i4 + 1376 | 0;
 i2 = i1 + 436 | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i10 = i1 + 452 | 0;
 i2 = HEAP32[i10 + 4 >> 2] | 0;
 i6 = i4 + 1392 | 0;
 HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i6 + 4 >> 2] = i2;
 i6 = (i8 | 0) != 0;
 do if (i6) {
  i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i8 >> 2] >> 2] & 127](HEAP32[i8 + 4 >> 2] | 0, i5, i3) | 0;
  if (!i1) {
   i2 = HEAP32[i3 >> 2] | 0;
   i1 = HEAP32[i3 + 4 >> 2] | 0;
   break;
  } else {
   i10 = i1;
   STACKTOP = i9;
   return i10 | 0;
  }
 } else {
  i2 = HEAP32[(HEAP32[i1 + 424 >> 2] | 0) + (i5 << 2) >> 2] | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = HEAP32[(HEAP32[i1 + 428 >> 2] | 0) + (i5 << 2) >> 2] | 0;
  HEAP32[i3 + 4 >> 2] = i1;
 } while (0);
 i1 = FUNCTION_TABLE_iiii[HEAP32[i4 + 1484 >> 2] & 127](i4, i2, i1) | 0;
 if (!(i6 & (i1 | 0) == 0)) {
  i10 = i1;
  STACKTOP = i9;
  return i10 | 0;
 }
 if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0)) {
  i10 = 0;
  STACKTOP = i9;
  return i10 | 0;
 }
 i1 = i4 + 32 | 0;
 i3 = (_FT_RoundFix(HEAP32[i1 >> 2] | 0) | 0) >> 16;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i7 + 4 >> 2] = 0;
 i3 = i4 + 40 | 0;
 i6 = (_FT_RoundFix(HEAP32[i3 >> 2] | 0) | 0) >> 16;
 i2 = i7 + 8 | 0;
 HEAP32[i2 >> 2] = i6;
 i6 = i4 + 44 | 0;
 i10 = (_FT_RoundFix(HEAP32[i6 >> 2] | 0) | 0) >> 16;
 i4 = i7 + 12 | 0;
 HEAP32[i4 >> 2] = i10;
 i10 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 127](HEAP32[i8 + 4 >> 2] | 0, i5, 0, i7) | 0;
 HEAP32[i1 >> 2] = HEAP32[i7 >> 2] << 16;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2] << 16;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2] << 16;
 STACKTOP = i9;
 return i10 | 0;
}

function _ass_renderer_init(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i9 = i10 + 32 | 0;
 i8 = i10 + 24 | 0;
 i5 = i10 + 8 | 0;
 i4 = i10;
 i7 = i10 + 48 | 0;
 i1 = i10 + 44 | 0;
 i2 = i10 + 40 | 0;
 i3 = i10 + 36 | 0;
 do if (!(_FT_Init_FreeType(i7) | 0)) {
  _FT_Library_Version(HEAP32[i7 >> 2] | 0, i1, i2, i3);
  i2 = HEAP32[i2 >> 2] | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i5 + 4 >> 2] = i2;
  HEAP32[i5 + 8 >> 2] = i4;
  _ass_msg(i6, 6, 358708, i5);
  i1 = _calloc(1, 960) | 0;
  if (!i1) {
   _FT_Done_FreeType(HEAP32[i7 >> 2] | 0) | 0;
   break;
  }
  HEAP32[i1 >> 2] = i6;
  HEAP32[i1 + 4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i1 + 756 >> 2] = 90532;
  if (_rasterizer_init(i1 + 760 | 0, HEAP32[22634] | 0, 16) | 0) {
   i9 = _ass_font_cache_create() | 0;
   HEAP32[i1 + 728 >> 2] = i9;
   i9 = _ass_bitmap_cache_create() | 0;
   HEAP32[i1 + 736 >> 2] = i9;
   i9 = _ass_composite_cache_create() | 0;
   HEAP32[i1 + 740 >> 2] = i9;
   i9 = _ass_outline_cache_create() | 0;
   HEAP32[i1 + 732 >> 2] = i9;
   HEAP32[i1 + 744 >> 2] = 1e4;
   HEAP32[i1 + 748 >> 2] = 134217728;
   HEAP32[i1 + 752 >> 2] = 67108864;
   HEAP32[i1 + 720 >> 2] = 16;
   HEAP32[i1 + 712 >> 2] = 1024;
   HEAP32[i1 + 716 >> 2] = 64;
   HEAP32[i1 + 700 >> 2] = 0;
   i9 = _calloc(16, 128) | 0;
   HEAP32[i1 + 696 >> 2] = i9;
   i9 = _calloc(1024, 344) | 0;
   HEAP32[i1 + 680 >> 2] = i9;
   i9 = _calloc(64, 24) | 0;
   HEAP32[i1 + 688 >> 2] = i9;
   HEAPF64[i1 + 32 >> 3] = 1.0;
   HEAP32[i1 + 96 >> 2] = 2;
   i9 = _ass_shaper_new(0) | 0;
   HEAP32[i1 + 116 >> 2] = i9;
   _ass_shaper_info(i6);
   HEAP32[i1 + 92 >> 2] = 0;
  } else _FT_Done_FreeType(HEAP32[i7 >> 2] | 0) | 0;
  _ass_msg(i6, 6, 358734, i8);
  i9 = i1;
  STACKTOP = i10;
  return i9 | 0;
 } else {
  HEAP32[i4 >> 2] = 358691;
  _ass_msg(i6, 0, 358681, i4);
 } while (0);
 _ass_msg(i6, 1, 358746, i9);
 i9 = 0;
 STACKTOP = i10;
 return i9 | 0;
}

function _T1_Face_Done(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 if (!i4) return;
 i5 = HEAP32[i4 + 100 >> 2] | 0;
 i1 = i4 + 132 | 0;
 i2 = i4 + 544 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 | 0) {
  _ft_mem_free(i5, i3);
  HEAP32[i2 >> 2] = 0;
  HEAP32[i4 + 540 >> 2] = 0;
 }
 _T1_Done_Blend(i4);
 HEAP32[i4 + 528 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 136 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 140 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 144 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 148 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 428 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 424 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 420 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 408 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 412 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 392 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 396 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 400 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 372 | 0;
 i3 = i1 + 12 | 0;
 _ft_mem_free(i5, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 i1 = i1 + 16 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 364 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = HEAP32[i4 + 492 >> 2] | 0;
 if (i1 | 0) {
  i3 = i1 + 36 | 0;
  _ft_mem_free(i5, HEAP32[i3 >> 2] | 0);
  HEAP32[i3 >> 2] = 0;
  HEAP32[i1 + 40 >> 2] = 0;
  i3 = i1 + 28 | 0;
  _ft_mem_free(i5, HEAP32[i3 >> 2] | 0);
  HEAP32[i3 >> 2] = 0;
  HEAP32[i1 + 32 >> 2] = 0;
  _ft_mem_free(i5, i1);
 }
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 24 >> 2] = 0;
 return;
}

function _af_cjk_metrics_scale_dim(i10, i1, i11) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i8 = (i11 | 0) == 0;
 i9 = HEAP32[(i8 ? i1 + 4 | 0 : i1 + 8 | 0) >> 2] | 0;
 i8 = HEAP32[(i8 ? i1 + 12 | 0 : i1 + 16 | 0) >> 2] | 0;
 i2 = i10 + 44 + (i11 * 1572 | 0) + 1564 | 0;
 i1 = i10 + 44 + (i11 * 1572 | 0) + 1568 | 0;
 if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) if ((HEAP32[i1 >> 2] | 0) == (i8 | 0)) return;
 HEAP32[i2 >> 2] = i9;
 HEAP32[i1 >> 2] = i8;
 HEAP32[i10 + 44 + (i11 * 1572 | 0) >> 2] = i9;
 HEAP32[i10 + 44 + (i11 * 1572 | 0) + 4 >> 2] = i8;
 i2 = i10 + 44 + (i11 * 1572 | 0) + 216 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) return; else i1 = 0;
 do {
  i12 = i10 + 44 + (i11 * 1572 | 0) + 220 + (i1 * 28 | 0) | 0;
  i5 = (_FT_MulFix(HEAP32[i12 >> 2] | 0, i9) | 0) + i8 | 0;
  i3 = i10 + 44 + (i11 * 1572 | 0) + 220 + (i1 * 28 | 0) + 4 | 0;
  HEAP32[i3 >> 2] = i5;
  i4 = i10 + 44 + (i11 * 1572 | 0) + 220 + (i1 * 28 | 0) + 8 | 0;
  HEAP32[i4 >> 2] = i5;
  i5 = i10 + 44 + (i11 * 1572 | 0) + 220 + (i1 * 28 | 0) + 12 | 0;
  i7 = (_FT_MulFix(HEAP32[i5 >> 2] | 0, i9) | 0) + i8 | 0;
  HEAP32[i10 + 44 + (i11 * 1572 | 0) + 220 + (i1 * 28 | 0) + 16 >> 2] = i7;
  i6 = i10 + 44 + (i11 * 1572 | 0) + 220 + (i1 * 28 | 0) + 20 | 0;
  HEAP32[i6 >> 2] = i7;
  i7 = i10 + 44 + (i11 * 1572 | 0) + 220 + (i1 * 28 | 0) + 24 | 0;
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & -2;
  if (((_FT_MulFix((HEAP32[i12 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0, i9) | 0) + 48 | 0) >>> 0 < 97) {
   i12 = (HEAP32[i3 >> 2] | 0) + 32 & -64;
   HEAP32[i4 >> 2] = i12;
   i12 = _FT_DivFix(i12, i9) | 0;
   i12 = i12 - (HEAP32[i5 >> 2] | 0) | 0;
   i5 = (i12 | 0) < 0;
   i12 = _FT_MulFix(i5 ? 0 - i12 | 0 : i12, i9) | 0;
   i12 = (i12 | 0) < 32 ? 0 : i12 + 32 & -64;
   HEAP32[i6 >> 2] = (HEAP32[i4 >> 2] | 0) - (i5 ? 0 - i12 | 0 : i12);
   HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 1;
  }
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < (HEAP32[i2 >> 2] | 0) >>> 0);
 return;
}

function _GetScriptTags(i1, i2, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = HEAP32[i1 + 104 >> 2] | 0;
 if (!i7) {
  i7 = 0;
  return i7 | 0;
 }
 if (_ftglue_face_goto_table(i1, i2, i7) | 0) {
  i7 = 0;
  return i7 | 0;
 }
 i1 = _ftglue_stream_pos(i7) | 0;
 if (_ftglue_stream_seek(i7, i1 + 4 | 0) | 0) {
  i7 = 0;
  return i7 | 0;
 }
 if (_ftglue_stream_frame_enter(i7, 2) | 0) {
  i7 = 0;
  return i7 | 0;
 }
 i5 = i7 + 32 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = i4 + 2;
 i4 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0)) + i1 | 0;
 _ftglue_stream_frame_exit(i7);
 if (_ftglue_stream_seek(i7, i4) | 0) {
  i7 = 0;
  return i7 | 0;
 }
 i3 = _ftglue_stream_pos(i7) | 0;
 if (_ftglue_stream_frame_enter(i7, 2) | 0) {
  i7 = 0;
  return i7 | 0;
 }
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = i4 + 2;
 i4 = (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0);
 _ftglue_stream_frame_exit(i7);
 i2 = _malloc(i4 << 2) | 0;
 HEAP32[i6 >> 2] = i2;
 if (!i6) {
  i7 = 0;
  return i7 | 0;
 }
 L22 : do if (i4 | 0) {
  i1 = 0;
  i2 = 0;
  do {
   if (_ftglue_stream_frame_enter(i7, 6) | 0) break L22;
   i9 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i9 + 4;
   HEAP32[(HEAP32[i6 >> 2] | 0) + ((i1 & 65535) << 2) >> 2] = (HEAPU8[i9 + 1 >> 0] | 0) << 16 | (HEAPU8[i9 >> 0] | 0) << 24 | (HEAPU8[i9 + 2 >> 0] | 0) << 8 | (HEAPU8[i9 + 3 >> 0] | 0);
   i9 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i9 + 2;
   i9 = ((HEAPU8[i9 >> 0] | 0) << 8 | (HEAPU8[i9 + 1 >> 0] | 0)) + i3 | 0;
   _ftglue_stream_frame_exit(i7);
   i8 = _ftglue_stream_pos(i7) | 0;
   i1 = ((_ftglue_stream_seek(i7, i9) | 0) == 0 & 1) + i1 << 16 >> 16;
   _ftglue_stream_seek(i7, i8) | 0;
   i2 = i2 + 1 << 16 >> 16;
  } while ((i2 & 65535) >>> 0 < i4 >>> 0);
  if (i1 << 16 >> 16) {
   _qsort(HEAP32[i6 >> 2] | 0, i4, 4, 200);
   i9 = i4;
   return i9 | 0;
  }
 } while (0);
 _free(HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 i9 = 0;
 return i9 | 0;
}

function _FcCharSetNextPage(i10, i11, i15) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 if (!i10) {
  i15 = -1;
  return i15 | 0;
 }
 i2 = HEAP32[i15 >> 2] | 0;
 i6 = i2 >>> 8 & 65535;
 i13 = i10;
 i14 = i10 + 12 | 0;
 i5 = (HEAP32[i14 >> 2] | 0) + i13 | 0;
 i8 = i5;
 i12 = i10 + 4 | 0;
 i7 = HEAP32[i12 >> 2] | 0;
 if (!i5) {
  i1 = -1;
  i9 = 12;
 } else {
  i3 = i7 + -1 | 0;
  i4 = 0;
  while (1) {
   if ((i4 | 0) > (i3 | 0)) {
    i9 = 6;
    break;
   }
   i1 = i3 + i4 >> 1;
   i16 = HEAP16[i8 + (i1 << 1) >> 1] | 0;
   i5 = (i16 & 65535) < (i6 & 65535);
   if (i16 << 16 >> 16 == i6 << 16 >> 16) break; else {
    i3 = i5 ? i3 : i1 + -1 | 0;
    i4 = i5 ? i1 + 1 | 0 : i4;
   }
  }
  if ((i9 | 0) == 6) {
   if ((i3 | 0) < 0) i9 = 9; else if ((i3 | 0) < (i7 | 0)) if ((HEAPU16[i8 + (i3 << 1) >> 1] | 0) < (i6 & 65535)) i9 = 9; else i1 = i3; else i1 = i3;
   if ((i9 | 0) == 9) i1 = i3 + 1 | 0;
   i1 = ~i1;
  }
  if ((i1 | 0) < 0) i9 = 12; else i3 = i1;
 }
 do if ((i9 | 0) == 12) {
  i1 = ~i1;
  if ((i7 | 0) == (i1 | 0)) {
   i16 = -1;
   return i16 | 0;
  } else {
   i3 = i1;
   i2 = (HEAPU16[i8 + (i1 << 1) >> 1] | 0) << 8;
   break;
  }
 } while (0);
 i1 = (HEAP32[i10 + 8 >> 2] | 0) + i13 | 0;
 i1 = i1 + (HEAP32[i1 + (i3 << 2) >> 2] | 0) | 0;
 if (!i1) {
  i16 = -1;
  return i16 | 0;
 }
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i11 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i11 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i11 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i11 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i11 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i11 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
 i1 = i3 + 1 | 0;
 if ((i1 | 0) < (HEAP32[i12 >> 2] | 0)) i1 = (HEAPU16[(HEAP32[i14 >> 2] | 0) + i13 + (i1 << 1) >> 1] | 0) << 8; else i1 = -1;
 HEAP32[i15 >> 2] = i1;
 i16 = i2;
 return i16 | 0;
}

function _tt_size_reset(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i6 = i7 + 72 | 0;
 i8 = i7 + 108 | 0;
 HEAP8[i8 >> 0] = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i2 = i7 + 44 | 0;
 i4 = i7 + 12 | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i4 + 24 >> 2];
 i4 = HEAP16[i2 >> 1] | 0;
 if (!(i4 << 16 >> 16)) {
  i8 = 151;
  return i8 | 0;
 }
 i5 = i7 + 46 | 0;
 i3 = HEAP16[i5 >> 1] | 0;
 if (!(i3 << 16 >> 16)) {
  i8 = 151;
  return i8 | 0;
 }
 if (HEAP16[i1 + 176 >> 1] & 8) {
  i9 = i1 + 68 | 0;
  i3 = _FT_DivFix((i4 & 65535) << 6, HEAPU16[i9 >> 1] | 0) | 0;
  i4 = i7 + 48 | 0;
  HEAP32[i4 >> 2] = i3;
  i9 = _FT_DivFix(HEAPU16[i5 >> 1] << 6, HEAPU16[i9 >> 1] | 0) | 0;
  i3 = i7 + 52 | 0;
  HEAP32[i3 >> 2] = i9;
  i9 = (_FT_MulFix(HEAP16[i1 + 70 >> 1] | 0, i9) | 0) + 32 & -64;
  HEAP32[i7 + 56 >> 2] = i9;
  i9 = (_FT_MulFix(HEAP16[i1 + 72 >> 1] | 0, HEAP32[i3 >> 2] | 0) | 0) + 32 & -64;
  HEAP32[i7 + 60 >> 2] = i9;
  i3 = (_FT_MulFix(HEAP16[i1 + 74 >> 1] | 0, HEAP32[i3 >> 2] | 0) | 0) + 32 & -64;
  HEAP32[i7 + 64 >> 2] = i3;
  i4 = (_FT_MulFix(HEAP16[i1 + 76 >> 1] | 0, HEAP32[i4 >> 2] | 0) | 0) + 32 & -64;
  HEAP32[i7 + 68 >> 2] = i4;
  i4 = HEAP16[i2 >> 1] | 0;
  i3 = HEAP16[i5 >> 1] | 0;
 }
 i1 = i4 & 65535;
 i2 = i3 & 65535;
 if ((i4 & 65535) < (i3 & 65535)) {
  HEAP32[i7 + 88 >> 2] = HEAP32[i7 + 52 >> 2];
  HEAP16[i7 + 80 >> 1] = i3;
  i1 = _FT_DivFix(i1, i2) | 0;
  HEAP32[i6 >> 2] = i1;
  i1 = 65536;
 } else {
  HEAP32[i7 + 88 >> 2] = HEAP32[i7 + 48 >> 2];
  HEAP16[i7 + 80 >> 1] = i4;
  HEAP32[i6 >> 2] = 65536;
  i1 = _FT_DivFix(i2, i1) | 0;
 }
 HEAP32[i7 + 76 >> 2] = i1;
 HEAP32[i7 + 300 >> 2] = -1;
 HEAP8[i8 >> 0] = 1;
 i9 = 0;
 return i9 | 0;
}

function _ass_utf16be_to_utf8(i1, i3, i4, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = i4 + i2 | 0;
 if (!i3) return;
 L4 : do if ((i2 | 0) > 0) {
  i9 = i10;
  i8 = i1;
  while (1) {
   i2 = i9 - i4 | 0;
   do if (i2 >>> 0 < 2) i6 = 10; else {
    i7 = (HEAPU8[i4 >> 0] | 0) << 8;
    i1 = i7 | (HEAPU8[i4 + 1 >> 0] | 0);
    i5 = i4 + 2 | 0;
    i2 = i2 + -2 | 0;
    if ((i7 & 64512 | 0) == 55296) {
     if (i2 >>> 0 < 2) {
      i4 = i5;
      i6 = 10;
      break;
     }
     i2 = (HEAPU8[i5 >> 0] | 0) << 8;
     if ((i2 & 64512 | 0) != 56320) {
      i1 = 65533;
      i4 = i5;
      break;
     }
     i5 = i4 + 4 | 0;
     i1 = (i1 << 10) + -56613888 + (HEAPU8[i4 + 3 >> 0] | 0 | i2) | 0;
    }
    i1 = (i1 & -1024 | 0) == 56320 ? 65533 : i1;
    i4 = i5;
   } while (0);
   if ((i6 | 0) == 10) {
    i6 = 0;
    i1 = 65533;
    i4 = i4 + i2 | 0;
   }
   if (i3 >>> 0 < 5) {
    i1 = i8;
    break L4;
   }
   L19 : do if (i1 >>> 0 < 128) {
    i5 = i8;
    i2 = 1;
    i6 = 20;
   } else {
    do if (i1 >>> 0 < 2048) {
     i2 = 2;
     i5 = i8;
     i6 = 1;
     i7 = i1 >>> 6 | 192;
    } else {
     if (i1 >>> 0 < 65536) {
      HEAP8[i8 >> 0] = i1 >>> 12 | 224;
      i2 = 3;
      i5 = i8 + 1 | 0;
      i6 = 2;
      i7 = i1 >>> 6 & 63 | 128;
      break;
     }
     if (i1 >>> 0 >= 1114112) {
      i1 = i8;
      break L19;
     }
     HEAP8[i8 >> 0] = i1 >>> 18 | 240;
     HEAP8[i8 + 1 >> 0] = i1 >>> 12 & 63 | 128;
     i2 = 4;
     i5 = i8 + 2 | 0;
     i6 = 3;
     i7 = i1 >>> 6 & 63 | 128;
    } while (0);
    HEAP8[i5 >> 0] = i7;
    i5 = i8 + i6 | 0;
    i1 = i1 & 63 | 128;
    i6 = 20;
   } while (0);
   if ((i6 | 0) == 20) {
    i6 = 0;
    HEAP8[i5 >> 0] = i1;
    i1 = i8 + i2 | 0;
   }
   HEAP8[i1 >> 0] = 0;
   if (i4 >>> 0 < i10 >>> 0) {
    i3 = i8 + i3 - i1 | 0;
    i8 = i1;
   } else break;
  }
 } while (0);
 HEAP8[i1 >> 0] = 0;
 return;
}

function _af_hint_normal_stem(i2, i10, i11, i4, i3) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0;
 i12 = (HEAP32[i2 + 2984 >> 2] & 4 | 0) == 0;
 do if (i12) {
  i1 = (i3 | 0) == 1;
  if (HEAP8[i10 + 12 >> 0] & 1) if (HEAP8[i11 + 12 >> 0] & 1) {
   i7 = i1 ? 55 : 49;
   break;
  }
  i7 = i1 ? 61 : 59;
 } else i7 = 64; while (0);
 i8 = HEAP32[i11 + 4 >> 2] | 0;
 i9 = HEAP32[i10 + 4 >> 2] | 0;
 i6 = _af_cjk_compute_stem_width(i2, i3, i8 - i9 | 0) | 0;
 i5 = ((i9 + i8 | 0) / 2 | 0) + i4 + ((i6 | 0) / -2 | 0) | 0;
 i1 = i5 & 63;
 i3 = i5 + i6 & 63;
 i4 = 64 - i1 | 0;
 i2 = 64 - i3 | 0;
 do if ((i1 | 0) == 0 | (i3 | 0) == 0) i1 = 0; else {
  if ((i6 | 0) <= (i7 | 0)) {
   i1 = (i3 | 0) < (i6 | 0) ? (i4 >>> 0 > i3 >>> 0 ? 0 - i3 | 0 : i4) : 0;
   break;
  }
  if (i7 >>> 0 < 64) if (!(i2 >>> 0 < i7 >>> 0 & (i7 >>> 0 > i3 >>> 0 & (i1 >>> 0 < i7 >>> 0 & i7 >>> 0 > i4 >>> 0)))) {
   i1 = 0;
   break;
  }
  i1 = i6 & 63;
  if (i1 >>> 0 < 32) {
   if (!(i4 >>> 0 > i1 >>> 0 & i3 >>> 0 > i1 >>> 0)) {
    i1 = 0;
    break;
   }
  } else i1 = 64 - i7 | 0;
  i2 = i7 - i4 | 0;
  i13 = i4 - i1 | 0;
  i4 = i7 - i3 | 0;
  i7 = i3 - i1 | 0;
  i1 = (i2 | 0) > (i13 | 0) ? i13 : 0 - i2 | 0;
  i7 = (i7 | 0) > (i4 | 0) ? i4 : 0 - i7 | 0;
  i1 = (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0) > (((i7 | 0) < 0 ? 0 - i7 | 0 : i7) | 0) ? i7 : i1;
 } while (0);
 if (!i12) {
  i13 = i1;
  i7 = i13 + i5 | 0;
  i5 = (i8 | 0) > (i9 | 0);
  i8 = i7 + i6 | 0;
  i12 = i10 + 8 | 0;
  i9 = i5 ? i7 : i8;
  i10 = i5 ? i8 : i7;
  HEAP32[i12 >> 2] = i9;
  i12 = i11 + 8 | 0;
  HEAP32[i12 >> 2] = i10;
  return i13 | 0;
 }
 i13 = (i1 | 0) > 14 ? 14 : (i1 | 0) > -14 ? i1 : -14;
 i7 = i13 + i5 | 0;
 i5 = (i8 | 0) > (i9 | 0);
 i8 = i7 + i6 | 0;
 i12 = i10 + 8 | 0;
 i9 = i5 ? i7 : i8;
 i10 = i5 ? i8 : i7;
 HEAP32[i12 >> 2] = i9;
 i12 = i11 + 8 | 0;
 HEAP32[i12 >> 2] = i10;
 return i13 | 0;
}

function _FcDirCacheBuild(i9, i3, i4, i6) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i11 = _FcSerializeCreate() | 0;
 if (!i11) {
  i11 = 0;
  return i11 | 0;
 }
 _FcSerializeReserve(i11, 32) | 0;
 L4 : do if (_FcStrSerializeAlloc(i11, i3) | 0) {
  i10 = i6 + 4 | 0;
  _FcSerializeAlloc(i11, i6, HEAP32[i10 >> 2] << 2) | 0;
  if ((HEAP32[i10 >> 2] | 0) > 0) {
   i2 = i6 + 12 | 0;
   i1 = 0;
   do {
    if (!(_FcStrSerializeAlloc(i11, HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] | 0) | 0)) break L4;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[i10 >> 2] | 0));
  }
  if (_FcFontSetSerializeAlloc(i11, i9) | 0) {
   i8 = _malloc(HEAP32[i11 >> 2] | 0) | 0;
   if (i8 | 0) {
    _memset(i8 | 0, 0, HEAP32[i11 >> 2] | 0) | 0;
    HEAP32[i11 + 8 >> 2] = i8;
    HEAP32[i8 >> 2] = -66913275;
    HEAP32[i8 + 4 >> 2] = 6;
    HEAP32[i8 + 8 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i8 + 28 >> 2] = HEAP32[i4 + 56 >> 2];
    i1 = _FcStrSerialize(i11, i3) | 0;
    L14 : do if (i1 | 0) {
     i7 = i8;
     HEAP32[i8 + 12 >> 2] = i1 - i7;
     i4 = _FcSerializePtr(i11, i6) | 0;
     if (i4 | 0) {
      i5 = i4;
      HEAP32[i8 + 16 >> 2] = i5 - i7;
      i3 = HEAP32[i10 >> 2] | 0;
      HEAP32[i8 + 20 >> 2] = i3;
      if ((i3 | 0) > 0) {
       i2 = i6 + 12 | 0;
       i1 = 0;
       do {
        i3 = _FcStrSerialize(i11, HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] | 0) | 0;
        if (!i3) break L14;
        HEAP32[i4 + (i1 << 2) >> 2] = i3 - i5;
        i1 = i1 + 1 | 0;
       } while ((i1 | 0) < (HEAP32[i10 >> 2] | 0));
      }
      i1 = _FcFontSetSerialize(i11, i9) | 0;
      if (i1 | 0) {
       HEAP32[i8 + 24 >> 2] = i1 - i7;
       _FcSerializeDestroy(i11);
       _FcCacheInsert(i8, 0) | 0;
       i11 = i8;
       return i11 | 0;
      }
     }
    } while (0);
    _free(i8);
   }
  }
 } while (0);
 _FcSerializeDestroy(i11);
 i11 = 0;
 return i11 | 0;
}

function _tt_size_run_prep(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i3 = HEAP32[i6 >> 2] | 0;
 i7 = HEAP32[i6 + 292 >> 2] | 0;
 i2 = _TT_Load_Context(i7, i3, i6) | 0;
 if (i2 | 0) {
  i7 = i2;
  return i7 | 0;
 }
 HEAP32[i7 + 428 >> 2] = 0;
 HEAP32[i7 + 16 >> 2] = 0;
 HEAP8[i7 + 488 >> 0] = 0;
 HEAP8[i7 + 561 >> 0] = i1;
 i1 = HEAP32[i3 + 640 >> 2] | 0;
 i2 = HEAP32[i3 + 636 >> 2] | 0;
 HEAP32[i7 + 452 >> 2] = i1;
 HEAP32[i7 + 456 >> 2] = i2;
 HEAP32[i7 + 460 >> 2] = 0;
 HEAP32[i7 + 464 >> 2] = 0;
 if (!i2) i1 = 0; else {
  HEAP32[i7 + 356 >> 2] = i1;
  HEAP32[i7 + 364 >> 2] = i2;
  HEAP32[i7 + 360 >> 2] = 0;
  HEAP32[i7 + 352 >> 2] = 2;
  i1 = FUNCTION_TABLE_ii[HEAP32[i3 + 652 >> 2] & 63](i7) | 0;
 }
 i2 = i7 + 452 | 0;
 HEAP32[i6 + 300 >> 2] = i1;
 i4 = i7 + 284 | 0;
 HEAP16[i7 + 290 >> 1] = 16384;
 HEAP16[i7 + 292 >> 1] = 0;
 HEAP16[i7 + 294 >> 1] = 16384;
 HEAP16[i7 + 296 >> 1] = 0;
 HEAP16[i7 + 298 >> 1] = 16384;
 HEAP16[i7 + 300 >> 1] = 0;
 HEAP16[i4 >> 1] = 0;
 HEAP16[i7 + 286 >> 1] = 0;
 HEAP16[i7 + 288 >> 1] = 0;
 HEAP16[i7 + 344 >> 1] = 1;
 HEAP16[i7 + 346 >> 1] = 1;
 HEAP16[i7 + 348 >> 1] = 1;
 HEAP32[i7 + 304 >> 2] = 1;
 i3 = i6 + 172 | 0;
 i5 = i3 + 68 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i3 = i3 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i3 | 0) < (i5 | 0));
 HEAP32[i6 + 116 >> 2] = HEAP32[i7 + 396 >> 2];
 HEAP32[i6 + 128 >> 2] = HEAP32[i7 + 408 >> 2];
 HEAP32[i6 + 140 >> 2] = HEAP32[i7 + 420 >> 2];
 HEAP32[i6 + 144 >> 2] = HEAP32[i7 + 424 >> 2];
 i4 = i7 + 444 | 0;
 i5 = HEAP32[i4 + 4 >> 2] | 0;
 i3 = i6 + 148 | 0;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = i5;
 i3 = i2;
 i5 = HEAP32[i3 + 4 >> 2] | 0;
 i4 = i6 + 156 | 0;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 4 >> 2] = i5;
 i4 = i7 + 460 | 0;
 i5 = HEAP32[i4 + 4 >> 2] | 0;
 i7 = i6 + 164 | 0;
 HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 + 4 >> 2] = i5;
 i7 = i1;
 return i7 | 0;
}

function _tt_size_done_bytecode(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = HEAP32[(HEAP32[i3 >> 2] | 0) + 100 >> 2] | 0;
 i1 = i3 + 292 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  i5 = HEAP32[i2 + 8 >> 2] | 0;
  HEAP16[i2 + 440 >> 1] = 0;
  HEAP16[i2 + 442 >> 1] = 0;
  i6 = i2 + 24 | 0;
  _ft_mem_free(i5, HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  HEAP32[i2 + 20 >> 2] = 0;
  i6 = i2 + 436 | 0;
  _ft_mem_free(i5, HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  HEAP32[i2 + 432 >> 2] = 0;
  HEAP32[i2 + 428 >> 2] = 0;
  i6 = i2 + 392 | 0;
  _ft_mem_free(i5, HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  HEAP32[i2 + 388 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  _ft_mem_free(i5, i2);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = i3 + 244 | 0;
 _ft_mem_free(i4, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 HEAP32[i3 + 240 >> 2] = 0;
 i1 = i3 + 252 | 0;
 _ft_mem_free(i4, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 HEAP16[i3 + 248 >> 1] = 0;
 i1 = i3 + 256 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  i6 = i1 + 28 | 0;
  _ft_mem_free(i2, HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  i6 = i1 + 24 | 0;
  _ft_mem_free(i2, HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  i6 = i1 + 16 | 0;
  _ft_mem_free(i2, HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  i6 = i1 + 12 | 0;
  _ft_mem_free(i2, HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  i6 = i1 + 20 | 0;
  _ft_mem_free(i2, HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
 }
 i6 = i3 + 124 | 0;
 _ft_mem_free(i4, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 _ft_mem_free(i4, HEAP32[i3 + 136 >> 2] | 0);
 HEAP32[i3 + 116 >> 2] = 0;
 HEAP32[i3 + 120 >> 2] = 0;
 i6 = i3 + 128 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i3 + 296 >> 2] = -1;
 HEAP32[i3 + 300 >> 2] = -1;
 return;
}

function _FT_Get_Advances(i5, i6, i7, i2, i8) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 if (!i5) {
  i8 = 35;
  return i8 | 0;
 }
 if (!i8) {
  i8 = 6;
  return i8 | 0;
 }
 i4 = HEAP32[i5 + 16 >> 2] | 0;
 i3 = i7 + i6 | 0;
 if (i3 >>> 0 > i4 >>> 0 | (i3 >>> 0 < i6 >>> 0 | i4 >>> 0 <= i6 >>> 0)) {
  i8 = 16;
  return i8 | 0;
 }
 if (!i7) {
  i8 = 0;
  return i8 | 0;
 }
 i1 = HEAP32[(HEAP32[(HEAP32[i5 + 96 >> 2] | 0) + 12 >> 2] | 0) + 84 >> 2] | 0;
 do if (i1 | 0) if ((i2 & 3 | 0) != 0 | (i2 & 983040 | 0) == 65536) {
  i1 = FUNCTION_TABLE_iiiiii[i1 & 127](i5, i6, i7, i2, i8) | 0;
  if (i1 | 0) {
   if ((i1 & 255 | 0) == 7) break;
   return i1 | 0;
  }
  if (i2 & 1 | 0) {
   i8 = 0;
   return i8 | 0;
  }
  i1 = HEAP32[i5 + 88 >> 2] | 0;
  if (!i1) {
   i8 = 36;
   return i8 | 0;
  }
  i1 = HEAP32[((i2 & 16 | 0) == 0 ? i1 + 16 | 0 : i1 + 20 | 0) >> 2] | 0;
  i2 = 0;
  do {
   i6 = i8 + (i2 << 2) | 0;
   i5 = _FT_MulDiv(HEAP32[i6 >> 2] | 0, i1, 64) | 0;
   HEAP32[i6 >> 2] = i5;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i7 | 0));
  i1 = 0;
  return i1 | 0;
 } while (0);
 if (i2 & 536870912 | 0) {
  i8 = 7;
  return i8 | 0;
 }
 i3 = i2 | 256;
 i4 = i5 + 84 | 0;
 if (!(i2 & 16)) {
  i2 = 0;
  while (1) {
   i1 = _FT_Load_Glyph(i5, i2 + i6 | 0, i3) | 0;
   if (i1 | 0) {
    i2 = 19;
    break;
   }
   HEAP32[i8 + (i2 << 2) >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 64 >> 2] << 10;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i7 >>> 0) {
    i1 = 0;
    i2 = 19;
    break;
   }
  }
  if ((i2 | 0) == 19) return i1 | 0;
 } else {
  i2 = 0;
  while (1) {
   i1 = _FT_Load_Glyph(i5, i2 + i6 | 0, i3) | 0;
   if (i1 | 0) {
    i2 = 19;
    break;
   }
   HEAP32[i8 + (i2 << 2) >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] << 10;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i7 >>> 0) {
    i1 = 0;
    i2 = 19;
    break;
   }
  }
  if ((i2 | 0) == 19) return i1 | 0;
 }
 return 0;
}

function _FT_Request_Size(i8, i2) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 if (!i8) {
  i9 = 35;
  return i9 | 0;
 }
 if (!i2) {
  i9 = 6;
  return i9 | 0;
 }
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 if ((i4 | 0) < 0) {
  i9 = 6;
  return i9 | 0;
 }
 i5 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i5 | 0) < 0) {
  i9 = 6;
  return i9 | 0;
 }
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 > 4) {
  i9 = 6;
  return i9 | 0;
 }
 i7 = HEAP32[(HEAP32[i8 + 96 >> 2] | 0) + 12 >> 2] | 0;
 i1 = HEAP32[i7 + 88 >> 2] | 0;
 if (i1 | 0) {
  i9 = FUNCTION_TABLE_iii[i1 & 255](HEAP32[i8 + 88 >> 2] | 0, i2) | 0;
  return i9 | 0;
 }
 i1 = HEAP32[i8 + 8 >> 2] | 0;
 if ((i1 & 3 | 0) != 2) {
  _FT_Request_Metrics(i8, i2);
  i9 = 0;
  return i9 | 0;
 }
 if (!(i1 & 2)) {
  i9 = 35;
  return i9 | 0;
 }
 if (i3 | 0) {
  i9 = 7;
  return i9 | 0;
 }
 i3 = HEAP32[i2 + 12 >> 2] | 0;
 i1 = ((Math_imul(i3, i4) | 0) + 36 | 0) / 72 | 0;
 i1 = (i3 | 0) == 0 ? i4 : i1;
 i3 = HEAP32[i2 + 16 >> 2] | 0;
 i6 = ((Math_imul(i3, i5) | 0) + 36 | 0) / 72 | 0;
 i6 = (i3 | 0) == 0 ? i5 : i6;
 i3 = (i5 | 0) == 0;
 i5 = (i4 | 0) != 0 & i3;
 i3 = (i5 ? i1 : (i4 | 0) == 0 ? (i3 ? i1 : i6) : i1) + 32 | 0;
 i4 = (i5 ? i1 : i6) + 32 | 0;
 i5 = HEAP32[i8 + 28 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  i9 = 23;
  return i9 | 0;
 }
 i6 = HEAP32[i8 + 32 >> 2] | 0;
 i2 = 0;
 while (1) {
  if (((HEAP32[i6 + (i2 << 4) + 12 >> 2] | 0) + 32 ^ i4) >>> 0 <= 63) if (((HEAP32[i6 + (i2 << 4) + 8 >> 2] | 0) + 32 ^ i3) >>> 0 <= 63) break;
  i1 = i2 + 1 | 0;
  if ((i1 | 0) < (i5 | 0)) i2 = i1; else {
   i1 = 23;
   i9 = 21;
   break;
  }
 }
 if ((i9 | 0) == 21) return i1 | 0;
 if (!((i2 | 0) > -1 & (i5 | 0) > (i2 | 0))) {
  i9 = 6;
  return i9 | 0;
 }
 i1 = HEAP32[i7 + 92 >> 2] | 0;
 if (!i1) {
  _FT_Select_Metrics(i8, i2);
  i9 = 0;
  return i9 | 0;
 } else {
  i9 = FUNCTION_TABLE_iii[i1 & 255](HEAP32[i8 + 88 >> 2] | 0, i2) | 0;
  return i9 | 0;
 }
 return 0;
}

function _ft_get_adobe_glyph_index(i1, i13) {
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 if (!((i1 | 0) != 0 & i1 >>> 0 < i13 >>> 0)) {
  i13 = 0;
  return i13 | 0;
 }
 i10 = i1 + 1 | 0;
 i5 = HEAP8[i1 >> 0] | 0;
 i1 = 52;
 i3 = 0;
 while (1) {
  if ((i3 | 0) >= (i1 | 0)) {
   i7 = 0;
   i9 = 16;
   break;
  }
  i6 = i1 + i3 >> 1;
  i2 = 288671 + (i6 << 1) | 0;
  i2 = 288669 + (HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0]) | 0;
  i8 = HEAP8[i2 >> 0] | 0;
  i14 = i8 & 127;
  i4 = (i14 | 0) < (i5 | 0);
  if ((i14 | 0) == (i5 | 0)) break; else {
   i1 = i4 ? i1 : i6;
   i3 = i4 ? i6 + 1 | 0 : i3;
  }
 }
 if ((i9 | 0) == 16) return i7 | 0;
 i1 = i8 & -128;
 L10 : do if (i10 >>> 0 < i13 >>> 0) {
  i3 = i1;
  L11 : while (1) {
   i7 = HEAP8[i10 >> 0] | 0;
   i10 = i10 + 1 | 0;
   i5 = i2 + 1 | 0;
   i1 = HEAP8[i5 >> 0] | 0;
   i6 = i1 & 255;
   i4 = i6 & 127;
   L13 : do if (!(i3 << 24 >> 24)) {
    if (!i4) {
     i7 = 0;
     i9 = 16;
     break L11;
    }
    i3 = i2 + (i6 >>> 6 | 1) + 1 | 0;
    while (1) {
     i2 = 288669 + (HEAPU8[i3 >> 0] << 8 | HEAPU8[i3 + 1 >> 0]) | 0;
     i1 = HEAP8[i2 >> 0] | 0;
     if ((i7 | 0) == (i1 & 127 | 0)) break L13;
     if ((i4 | 0) > 1) {
      i4 = i4 + -1 | 0;
      i3 = i3 + 2 | 0;
     } else {
      i7 = 0;
      i9 = 16;
      break L11;
     }
    }
   } else if ((i7 | 0) == (i4 | 0)) i2 = i5; else {
    i7 = 0;
    i9 = 16;
    break L11;
   } while (0);
   i1 = i1 & -128;
   if (i10 >>> 0 >= i13 >>> 0) {
    i11 = i2;
    i12 = i1;
    break L10;
   } else i3 = i1;
  }
  if ((i9 | 0) == 16) return i7 | 0;
 } else {
  i11 = i2;
  i12 = i1;
 } while (0);
 if (i12 << 24 >> 24) {
  i14 = 0;
  return i14 | 0;
 }
 if ((HEAP8[i11 + 1 >> 0] | 0) >= 0) {
  i14 = 0;
  return i14 | 0;
 }
 i14 = HEAPU8[i11 + 2 >> 0] << 8 | HEAPU8[i11 + 3 >> 0];
 return i14 | 0;
}

function _FcParseFamilies(i8, i9) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = i12 + 16 | 0;
 i7 = i12 + 8 | 0;
 i6 = i12;
 i10 = i8 + 4 | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if (!i2) {
  STACKTOP = i12;
  return;
 }
 i5 = i8 + 16 | 0;
 i1 = 0;
 L4 : while (1) {
  while (1) {
   if ((HEAP32[i2 + 4 >> 2] | 0) != (HEAP32[i8 >> 2] | 0)) {
    i5 = 12;
    break L4;
   }
   i3 = i2 + 8 | 0;
   if ((HEAP32[i3 >> 2] | 0) == 2) break;
   _FcConfigMessage(i8, 1, 354137, i6);
   _FcVStackPopAndDestroy(i8);
   i2 = HEAP32[i10 >> 2] | 0;
   if (!i2) {
    i5 = 12;
    break L4;
   }
  }
  i4 = HEAP32[i2 + 16 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  _FcVStackPopAndDestroy(i8);
  if (!i1) i1 = i4; else {
   i2 = _FcConfigAllocExpr(HEAP32[i5 >> 2] | 0) | 0;
   if (!i2) {
    i5 = 11;
    break;
   }
   HEAP32[i2 >> 2] = 36;
   i3 = i2 + 8 | 0;
   HEAP32[i3 >> 2] = i4;
   HEAP32[i3 + 4 >> 2] = i1;
   i1 = i2;
  }
  i2 = HEAP32[i10 >> 2] | 0;
  if (!i2) {
   i5 = 12;
   break;
  }
 }
 if ((i5 | 0) == 11) {
  _FcConfigMessage(i8, 2, 352676, i7);
  _FcExprDestroy(i4);
  _FcExprDestroy(i1);
 } else if ((i5 | 0) == 12) if (!i1) {
  STACKTOP = i12;
  return;
 }
 i2 = i8 + 1308 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < 64) {
  HEAP32[i2 >> 2] = i3 + 1;
  i2 = i8 + 1312 + (i3 * 24 | 0) | 0;
  i5 = 16;
 } else {
  i2 = _malloc(24) | 0;
  if (i2 | 0) i5 = 16;
 }
 if ((i5 | 0) == 16) {
  i4 = i2 + 8 | 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
  i3 = HEAP32[i8 >> 2] | 0;
  if (!i3) i3 = 0; else i3 = HEAP32[i3 >> 2] | 0;
  HEAP32[i2 + 4 >> 2] = i3;
  HEAP32[i10 >> 2] = i2;
  if (i2 | 0) {
   HEAP32[i2 + 16 >> 2] = i1;
   HEAP32[i4 >> 2] = i9;
   STACKTOP = i12;
   return;
  }
 }
 _FcConfigMessage(i8, 2, 352676, i11);
 _FcExprDestroy(i1);
 STACKTOP = i12;
 return;
}

function _prologInitProcessor(i6, i7, i9, i11) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 i12 = i13;
 i1 = i6 + 232 | 0;
 i5 = i6 + 236 | 0;
 i8 = i6 + 144 | 0;
 L1 : do if (!(FUNCTION_TABLE_iiii[(HEAP8[i5 >> 0] << 24 >> 24 ? 88 : 87) & 127](i6 + 148 | 0, i8, HEAP32[i1 >> 2] | 0) | 0)) {
  i2 = HEAP32[i6 + 124 >> 2] | 0;
  if (!i2) {
   i12 = 18;
   STACKTOP = i13;
   return i12 | 0;
  }
  i1 = HEAP32[i1 >> 2] | 0;
  _memset(i12 | 0, -1, 1024) | 0;
  i3 = i12 + 1028 | 0;
  HEAP32[i3 >> 2] = 0;
  i10 = i12 + 1024 | 0;
  HEAP32[i10 >> 2] = 0;
  i4 = i12 + 1032 | 0;
  HEAP32[i4 >> 2] = 0;
  do if (FUNCTION_TABLE_iiii[i2 & 127](HEAP32[i6 + 248 >> 2] | 0, i1, i12) | 0) {
   i2 = HEAP32[i6 + 12 >> 2] | 0;
   i1 = _XmlSizeOfUnknownEncoding() | 0;
   i1 = FUNCTION_TABLE_ii[i2 & 63](i1) | 0;
   HEAP32[i6 + 240 >> 2] = i1;
   if (i1 | 0) {
    i1 = FUNCTION_TABLE_iiiii[(HEAP8[i5 >> 0] << 24 >> 24 ? 71 : 70) & 127](i1, i12, HEAP32[i3 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
    if (!i1) break;
    HEAP32[i6 + 244 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i6 + 252 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i8 >> 2] = i1;
    break L1;
   }
   i1 = HEAP32[i4 >> 2] | 0;
   if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](HEAP32[i10 >> 2] | 0);
   i12 = 1;
   STACKTOP = i13;
   return i12 | 0;
  } while (0);
  i1 = HEAP32[i4 >> 2] | 0;
  if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](HEAP32[i10 >> 2] | 0);
  i12 = 18;
  STACKTOP = i13;
  return i12 | 0;
 } else i1 = HEAP32[i8 >> 2] | 0; while (0);
 HEAP32[i6 + 280 >> 2] = 72;
 HEAP32[i12 >> 2] = i7;
 i10 = FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i1, i7, i9, i12) | 0;
 i12 = _doProlog(i6, HEAP32[i8 >> 2] | 0, i7, i9, i10, HEAP32[i12 >> 2] | 0, i11, (HEAP8[i6 + 484 >> 0] | 0) == 0 & 1) | 0;
 STACKTOP = i13;
 return i12 | 0;
}

function _internalEntityProcessor(i10, i11, i13, i14) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i15 = i16;
 i7 = i10 + 300 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (!i8) {
  i15 = 23;
  STACKTOP = i16;
  return i15 | 0;
 }
 i9 = HEAP32[i8 + 12 >> 2] | 0;
 i4 = i9 + 4 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i5 = i9 + 12 | 0;
 i1 = i6 + (HEAP32[i5 >> 2] | 0) | 0;
 i6 = i6 + (HEAP32[i9 + 8 >> 2] | 0) | 0;
 i12 = i9 + 33 | 0;
 i2 = i10 + 228 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(HEAP8[i12 >> 0] | 0)) i1 = _doContent(i10, HEAP32[i8 + 16 >> 2] | 0, i3, i1, i6, i15, 0) | 0; else {
  i3 = FUNCTION_TABLE_iiiii[HEAP32[i3 >> 2] & 127](i3, i1, i6, i15) | 0;
  i1 = _doProlog(i10, HEAP32[i2 >> 2] | 0, i1, i6, i3, HEAP32[i15 >> 2] | 0, i15, 0) | 0;
 }
 if (i1 | 0) {
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 }
 i1 = HEAP32[i15 >> 2] | 0;
 if ((i6 | 0) != (i1 | 0)) if ((HEAP32[i10 + 480 >> 2] | 0) == 3) {
  HEAP32[i5 >> 2] = i1 - (HEAP32[i4 >> 2] | 0);
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP8[i9 + 32 >> 0] = 0;
 i2 = i8 + 8 | 0;
 HEAP32[i7 >> 2] = HEAP32[i2 >> 2];
 i1 = i10 + 304 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i1 >> 2] = i8;
 i1 = i10 + 144 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = i10 + 280 | 0;
 if (!(HEAP8[i12 >> 0] | 0)) {
  HEAP32[i3 >> 2] = 77;
  i15 = _doContent(i10, (HEAP32[i10 + 476 >> 2] | 0) != 0 & 1, i2, i11, i13, i14, (HEAP8[i10 + 484 >> 0] | 0) == 0 & 1) | 0;
  STACKTOP = i16;
  return i15 | 0;
 } else {
  HEAP32[i3 >> 2] = 72;
  i12 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 127](i2, i11, i13, i15) | 0;
  i15 = _doProlog(i10, HEAP32[i1 >> 2] | 0, i11, i13, i12, HEAP32[i15 >> 2] | 0, i14, (HEAP8[i10 + 484 >> 0] | 0) == 0 & 1) | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 return 0;
}

function _open_face_from_buffer(i6, i4, i3, i7, i5, i10) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i12;
 i11 = HEAP32[i6 >> 2] | 0;
 i1 = (i4 | 0) == 0;
 if (!i6) if (i1) {
  i11 = 33;
  STACKTOP = i12;
  return i11 | 0;
 } else i1 = 33; else {
  if (i1) {
   i11 = 6;
   STACKTOP = i12;
   return i11 | 0;
  }
  i9 = FUNCTION_TABLE_iii[HEAP32[i11 + 4 >> 2] & 255](i11, 40) | 0;
  if (!i9) i1 = 64; else {
   i1 = i9 + 12 | 0;
   i2 = i1 + 28 | 0;
   do {
    HEAP8[i1 >> 0] = 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i2 | 0));
   HEAP32[i9 >> 2] = i4;
   HEAP32[i9 + 4 >> 2] = i3;
   HEAP32[i9 + 8 >> 2] = 0;
   HEAP32[i9 + 32 >> 2] = 0;
   HEAP32[i9 + 20 >> 2] = 0;
   i4 = i9 + 24 | 0;
   HEAP32[i4 >> 2] = 58;
   HEAP32[i8 >> 2] = 2;
   HEAP32[i8 + 16 >> 2] = i9;
   if (i5 | 0) {
    HEAP32[i8 >> 2] = 10;
    i2 = HEAP32[i6 + 16 >> 2] | 0;
    i3 = i6 + 20 + (i2 << 2) | 0;
    L11 : do if ((i2 | 0) > 0) {
     i2 = i6 + 20 | 0;
     while (1) {
      i1 = HEAP32[i2 >> 2] | 0;
      i2 = i2 + 4 | 0;
      if (!(_strcmp(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0, i5) | 0)) break L11;
      if (i2 >>> 0 >= i3 >>> 0) {
       i1 = 0;
       break;
      }
     }
    } else i1 = 0; while (0);
    HEAP32[i8 + 20 >> 2] = i1;
   }
   i2 = _FT_Open_Face(i6, i8, i7, i10) | 0;
   if (!i2) {
    i11 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
    HEAP32[i11 >> 2] = HEAP32[i11 >> 2] & -1025;
    i11 = 0;
    STACKTOP = i12;
    return i11 | 0;
   }
   i1 = HEAP32[i4 >> 2] | 0;
   if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i9);
   FUNCTION_TABLE_vii[HEAP32[i11 + 8 >> 2] & 63](i11, i9);
   i11 = i2;
   STACKTOP = i12;
   return i11 | 0;
  }
 }
 FUNCTION_TABLE_vii[HEAP32[i11 + 8 >> 2] & 63](i11, i4);
 i11 = i1;
 STACKTOP = i12;
 return i11 | 0;
}

function _FcPatternObjectInsertElt(i10, i11) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0;
 i13 = i10;
 i12 = i10 + 8 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i9 = i1 + i13 | 0;
 i6 = i9;
 i8 = HEAP32[i10 >> 2] | 0;
 L1 : do if ((i8 | 0) < 1) {
  i3 = 1;
  i2 = 0;
  i7 = 8;
 } else {
  i3 = i8 + -1 | 0;
  i5 = 0;
  while (1) {
   i4 = i3;
   while (1) {
    i2 = i4 + i5 >> 1;
    i3 = (HEAP32[i6 + (i2 << 3) >> 2] | 0) - i11 | 0;
    if (!i3) break L1;
    if ((i3 | 0) < 0) break;
    if ((i5 | 0) < (i2 | 0)) i4 = i2 + -1 | 0; else {
     i7 = 8;
     break L1;
    }
   }
   if ((i2 | 0) < (i4 | 0)) {
    i3 = i4;
    i5 = i2 + 1 | 0;
   } else {
    i7 = 8;
    break;
   }
  }
 } while (0);
 if ((i7 | 0) == 8) i2 = ~((i3 >>> 31) + i2);
 if ((i2 | 0) < 0) {
  i2 = ~i2;
  i6 = i10 + 4 | 0;
  i3 = HEAP32[i6 >> 2] | 0;
  if ((i8 + 1 | 0) >= (i3 | 0)) {
   i5 = i3 + 16 | 0;
   i4 = i5 << 3;
   if (!i3) i4 = _malloc(i4) | 0; else {
    i3 = i9;
    i1 = _realloc(i3, i4) | 0;
    if (!i1) {
     i1 = _malloc(i4) | 0;
     if (!i1) i4 = i1; else {
      _memcpy(i1 | 0, i3 | 0, HEAP32[i10 >> 2] << 3 | 0) | 0;
      i4 = i1;
     }
    } else i4 = i1;
   }
   if (!i4) {
    i13 = 0;
    return i13 | 0;
   }
   i1 = i4 - i13 | 0;
   HEAP32[i12 >> 2] = i1;
   i3 = HEAP32[i6 >> 2] | 0;
   if ((i3 | 0) < (i5 | 0)) {
    do {
     HEAP32[i4 + (i3 << 3) >> 2] = 0;
     HEAP32[i4 + (i3 << 3) + 4 >> 2] = 0;
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) < (i5 | 0));
    HEAP32[i6 >> 2] = i3;
   }
  }
  i1 = i1 + i13 | 0;
  i9 = i1 + (i2 << 3) | 0;
  _memmove(i9 + 8 | 0, i9 | 0, (HEAP32[i10 >> 2] | 0) - i2 << 3 | 0) | 0;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  HEAP32[i9 >> 2] = i11;
  HEAP32[i1 + (i2 << 3) + 4 >> 2] = 0;
  i1 = HEAP32[i12 >> 2] | 0;
 }
 i13 = i1 + i13 + (i2 << 3) | 0;
 return i13 | 0;
}

function _Vertical_Sweep_Drop(i14, i1, i6, i7, i8, i9) {
 i14 = i14 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = HEAP32[i14 + 4 >> 2] | 0;
 i11 = i6 + -1 | 0;
 i2 = 0 - i10 | 0;
 i12 = i11 + i10 & i2;
 i13 = i2 & i7;
 if ((i12 | 0) > (i13 | 0)) {
  i3 = HEAP16[i8 + 12 >> 1] | 0;
  i4 = i3 & 65535;
  i5 = i4 & 7;
  if ((i12 | 0) != (i13 + i10 | 0)) return;
  switch (i3 & 7) {
  case 0:
   {
    i2 = i13;
    break;
   }
  case 4:
   {
    i2 = (HEAP32[i14 + 8 >> 2] | 0) + ((i11 + i7 | 0) / 2 | 0) & i2;
    break;
   }
  case 5:
  case 1:
   {
    if ((HEAP32[i8 + 28 >> 2] | 0) == (i9 | 0)) if ((HEAP32[i8 + 16 >> 2] | 0) < 1) {
     if (!(i4 & 16)) return;
     if ((i7 - i6 | 0) < (HEAP32[i14 + 8 >> 2] | 0)) return;
    }
    if ((HEAP32[i9 + 28 >> 2] | 0) == (i8 | 0)) if ((HEAP32[i8 + 20 >> 2] | 0) == (i1 << 16 >> 16 | 0)) {
     if (!(i3 & 32)) return;
     if ((i7 - i6 | 0) < (HEAP32[i14 + 8 >> 2] | 0)) return;
    }
    if ((i5 | 0) == 1) i2 = i13; else i2 = (HEAP32[i14 + 8 >> 2] | 0) + ((i11 + i7 | 0) / 2 | 0) & i2;
    break;
   }
  default:
   return;
  }
  i1 = HEAP32[i14 >> 2] | 0;
  if ((i2 | 0) < 0) i2 = i12; else i2 = (i2 >> i1 | 0) < (HEAPU16[i14 + 56 >> 1] | 0 | 0) ? i2 : i13;
  i3 = ((i2 | 0) == (i12 | 0) ? i13 : i12) >> i1;
  i4 = i3 & 7;
  if ((i3 | 0) > -1) if ((i3 | 0) < (HEAPU16[i14 + 56 >> 1] | 0 | 0)) if ((HEAPU8[(HEAP32[i14 + 60 >> 2] | 0) + ((HEAP32[i14 + 148 >> 2] | 0) + (i3 << 13 >> 16)) >> 0] | 0) & 128 >>> i4) return;
 } else {
  i2 = i12;
  i1 = HEAP32[i14 >> 2] | 0;
 }
 i1 = i2 >> i1;
 if ((i1 | 0) <= -1) return;
 if ((i1 | 0) >= (HEAPU16[i14 + 56 >> 1] | 0 | 0)) return;
 i14 = (HEAP32[i14 + 60 >> 2] | 0) + ((HEAP32[i14 + 148 >> 2] | 0) + (i1 << 13 >> 16)) | 0;
 HEAP8[i14 >> 0] = HEAPU8[i14 >> 0] | 0 | 128 >>> (i1 & 7);
 return;
}

function _get_fallback(i2, i1, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i8 + 4 | 0;
 i4 = i8;
 i5 = i2 + 4 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (!i1) {
  i1 = _FcPatternCreate() | 0;
  _FcPatternAddString(i1, 354977, 355008) | 0;
  _FcPatternAddBool(i1, 354939, 1) | 0;
  _FcConfigSubstitute(HEAP32[i2 >> 2] | 0, i1, 0) | 0;
  _FcDefaultSubstitute(i1);
  _FcPatternDel(i1, 355019) | 0;
  i9 = _FcFontSort(HEAP32[i2 >> 2] | 0, i1, 1, i2 + 8 | 0, i3) | 0;
  HEAP32[i5 >> 2] = i9;
  if (HEAP32[i3 >> 2] | 0) {
   i9 = _FcFontSetCreate() | 0;
   HEAP32[i5 >> 2] = i9;
  }
  _FcPatternDestroy(i1);
  i1 = HEAP32[i5 >> 2] | 0;
  if (!i1) {
   i9 = 0;
   STACKTOP = i8;
   return i9 | 0;
  }
 }
 if (!(HEAP32[i1 >> 2] | 0)) {
  i9 = 0;
  STACKTOP = i8;
  return i9 | 0;
 }
 if (!i6) {
  HEAP32[i3 >> 2] = 0;
  if (!(_FcPatternGetString(HEAP32[HEAP32[i1 + 8 >> 2] >> 2] | 0, 354977, 0, i3) | 0)) i1 = ___strdup(HEAP32[i3 >> 2] | 0) | 0; else i1 = 0;
  i9 = i1;
  STACKTOP = i8;
  return i9 | 0;
 }
 if (!(_FcCharSetHasChar(HEAP32[i2 + 8 >> 2] | 0, i6) | 0)) {
  i9 = 0;
  STACKTOP = i8;
  return i9 | 0;
 }
 i1 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[i1 >> 2] | 0) <= 0) {
  i9 = 0;
  STACKTOP = i8;
  return i9 | 0;
 }
 i2 = 0;
 while (1) {
  i1 = HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + (i2 << 2) >> 2] | 0;
  if (!(_FcPatternGetCharSet(i1, 355024, 0, i3) | 0)) if (_FcCharSetHasChar(HEAP32[i3 >> 2] | 0, i6) | 0) break;
  i2 = i2 + 1 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) >= (HEAP32[i1 >> 2] | 0)) {
   i1 = 0;
   i7 = 20;
   break;
  }
 }
 if ((i7 | 0) == 20) {
  STACKTOP = i8;
  return i1 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 if (!(_FcPatternGetString(i1, 354977, 0, i4) | 0)) i1 = ___strdup(HEAP32[i4 >> 2] | 0) | 0; else i1 = 0;
 i9 = i1;
 STACKTOP = i8;
 return i9 | 0;
}

function _tt_cmap12_char_map_binary(i12, i13, i1) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = HEAP32[i12 + 16 >> 2] | 0;
 i11 = HEAPU8[i3 + 13 >> 0] << 16 | HEAPU8[i3 + 12 >> 0] << 24 | HEAPU8[i3 + 14 >> 0] << 8 | HEAPU8[i3 + 15 >> 0];
 if (!i11) {
  i13 = 0;
  return i13 | 0;
 }
 i9 = i1 << 24 >> 24 != 0;
 i2 = (HEAP32[i13 >> 2] | 0) + (i9 & 1) | 0;
 i7 = i3 + 16 | 0;
 i1 = 0;
 i6 = i11;
 L4 : while (1) {
  while (1) {
   i3 = (i1 + i6 | 0) >>> 1;
   i5 = i7 + (i3 * 12 | 0) + 4 | 0;
   i4 = i5 + -4 | 0;
   i4 = HEAPU8[i4 + 1 >> 0] << 16 | HEAPU8[i4 >> 0] << 24 | HEAPU8[i4 + 2 >> 0] << 8 | HEAPU8[i4 + 3 >> 0];
   i5 = i5 + 4 | 0;
   i8 = i5 + -4 | 0;
   i8 = HEAPU8[i8 + 1 >> 0] << 16 | HEAPU8[i8 >> 0] << 24 | HEAPU8[i8 + 2 >> 0] << 8 | HEAPU8[i8 + 3 >> 0];
   if (i2 >>> 0 < i4 >>> 0) break;
   if (i2 >>> 0 <= i8 >>> 0) {
    i10 = 8;
    break L4;
   }
   i1 = i3 + 1 | 0;
   if (i1 >>> 0 >= i6 >>> 0) {
    i1 = 0;
    break L4;
   }
  }
  if (i1 >>> 0 < i3 >>> 0) i6 = i3; else {
   i1 = 0;
   break;
  }
 }
 if ((i10 | 0) == 8) i1 = i2 - i4 + (HEAPU8[i5 + 1 >> 0] << 16 | HEAPU8[i5 >> 0] << 24 | HEAPU8[i5 + 2 >> 0] << 8 | HEAPU8[i5 + 3 >> 0]) | 0;
 if (!i9) {
  i13 = i1;
  return i13 | 0;
 }
 if (i2 >>> 0 > i8 >>> 0) {
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i11 | 0)) {
   i13 = 0;
   return i13 | 0;
  }
 }
 i4 = i12 + 24 | 0;
 HEAP8[i4 >> 0] = 1;
 i5 = i12 + 28 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i12 + 36 >> 2] = i3;
 do if (!i1) {
  _tt_cmap12_next(i12);
  if (!(HEAP8[i4 >> 0] | 0)) {
   i13 = 0;
   return i13 | 0;
  }
  i1 = HEAP32[i12 + 32 >> 2] | 0;
  if (!i1) {
   i13 = 0;
   return i13 | 0;
  } else {
   i2 = HEAP32[i5 >> 2] | 0;
   break;
  }
 } else HEAP32[i12 + 32 >> 2] = i1; while (0);
 HEAP32[i13 >> 2] = i2;
 i13 = i1;
 return i13 | 0;
}

function _FcConfigCreate() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = _malloc(80) | 0;
 if (!i1) {
  i7 = 0;
  return i7 | 0;
 }
 i7 = _FcStrSetCreate() | 0;
 HEAP32[i1 >> 2] = i7;
 if (i7 | 0) {
  i7 = _FcStrSetCreate() | 0;
  i6 = i1 + 16 | 0;
  HEAP32[i6 >> 2] = i7;
  if (i7 | 0) {
   i5 = _FcStrSetCreate() | 0;
   i7 = i1 + 8 | 0;
   HEAP32[i7 >> 2] = i5;
   if (i5 | 0) {
    i5 = _FcStrSetCreate() | 0;
    i2 = i1 + 36 | 0;
    HEAP32[i2 >> 2] = i5;
    if (i5 | 0) {
     i5 = _FcStrSetCreate() | 0;
     i3 = i1 + 40 | 0;
     HEAP32[i3 >> 2] = i5;
     if (i5 | 0) {
      i5 = _FcFontSetCreate() | 0;
      i4 = i1 + 44 | 0;
      HEAP32[i4 >> 2] = i5;
      if (i5 | 0) {
       i8 = _FcFontSetCreate() | 0;
       i5 = i1 + 48 | 0;
       HEAP32[i5 >> 2] = i8;
       do if (i8 | 0) {
        i8 = _FcStrSetCreate() | 0;
        HEAP32[i1 + 12 >> 2] = i8;
        if (!i8) {
         _FcFontSetDestroy(HEAP32[i5 >> 2] | 0);
         break;
        }
        HEAP32[i1 + 4 >> 2] = 72528;
        i8 = i1 + 20 | 0;
        i7 = i1 + 52 | 0;
        HEAP32[i7 >> 2] = 0;
        HEAP32[i7 + 4 >> 2] = 0;
        HEAP32[i8 >> 2] = 0;
        HEAP32[i8 + 4 >> 2] = 0;
        HEAP32[i8 + 8 >> 2] = 0;
        HEAP32[i8 + 12 >> 2] = 0;
        i8 = _time(0) | 0;
        HEAP32[i1 + 60 >> 2] = i8;
        HEAP32[i1 + 64 >> 2] = 30;
        HEAP32[i1 + 72 >> 2] = 0;
        HEAP32[i1 + 76 >> 2] = 0;
        HEAP32[i1 + 68 >> 2] = 1;
        i8 = i1;
        return i8 | 0;
       } while (0);
       _FcFontSetDestroy(HEAP32[i4 >> 2] | 0);
      }
      _FcStrSetDestroy(HEAP32[i3 >> 2] | 0);
     }
     _FcStrSetDestroy(HEAP32[i2 >> 2] | 0);
    }
    _FcStrSetDestroy(HEAP32[i7 >> 2] | 0);
   }
   _FcStrSetDestroy(HEAP32[i6 >> 2] | 0);
  }
  _FcStrSetDestroy(HEAP32[i1 >> 2] | 0);
 }
 _free(i1);
 i8 = 0;
 return i8 | 0;
}

function _little2_updatePosition(i2, i1, i5, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 if (i1 >>> 0 >= i5 >>> 0) return;
 i7 = i6 + 4 | 0;
 i4 = i2 + 76 | 0;
 do {
  L6 : do switch (HEAP8[i1 + 1 >> 0] | 0) {
  case 0:
   switch (HEAP8[i4 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
   case 7:
    {
     i8 = 7;
     break L6;
    }
   case 5:
    {
     i1 = i1 + 2 | 0;
     break L6;
    }
   case 6:
    {
     i1 = i1 + 3 | 0;
     break L6;
    }
   case 10:
    {
     HEAP32[i7 >> 2] = -1;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
     i1 = i1 + 2 | 0;
     break L6;
    }
   case 9:
    {
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
     i3 = i1 + 2 | 0;
     if ((i3 | 0) == (i5 | 0)) i1 = i5; else {
      i2 = HEAP8[i3 >> 0] | 0;
      switch (HEAP8[i1 + 3 >> 0] | 0) {
      case 0:
       {
        i2 = HEAPU8[i4 + (i2 & 255) >> 0] | 0;
        break;
       }
      case -37:
      case -38:
      case -39:
      case -40:
       {
        i2 = 7;
        break;
       }
      case -33:
      case -34:
      case -35:
      case -36:
       {
        i2 = 8;
        break;
       }
      case -1:
       {
        if ((i2 & 255) > 253) i2 = 0; else i8 = 14;
        break;
       }
      default:
       i8 = 14;
      }
      if ((i8 | 0) == 14) {
       i8 = 0;
       i2 = 29;
      }
      i1 = (i2 | 0) == 10 ? i1 + 4 | 0 : i3;
     }
     HEAP32[i7 >> 2] = -1;
     break L6;
    }
   default:
    {
     i8 = 17;
     break L6;
    }
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i8 = 7;
    break;
   }
  default:
   i8 = 17;
  } while (0);
  if ((i8 | 0) == 7) {
   i8 = 0;
   i1 = i1 + 4 | 0;
  } else if ((i8 | 0) == 17) {
   i8 = 0;
   i1 = i1 + 2 | 0;
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } while (i1 >>> 0 < i5 >>> 0);
 return;
}

function _big2_updatePosition(i2, i1, i5, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 if (i1 >>> 0 >= i5 >>> 0) return;
 i7 = i6 + 4 | 0;
 i4 = i2 + 76 | 0;
 do {
  L6 : do switch (HEAP8[i1 >> 0] | 0) {
  case 0:
   switch (HEAP8[i4 + (HEAPU8[i1 + 1 >> 0] | 0) >> 0] | 0) {
   case 7:
    {
     i8 = 7;
     break L6;
    }
   case 5:
    {
     i1 = i1 + 2 | 0;
     break L6;
    }
   case 6:
    {
     i1 = i1 + 3 | 0;
     break L6;
    }
   case 10:
    {
     HEAP32[i7 >> 2] = -1;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
     i1 = i1 + 2 | 0;
     break L6;
    }
   case 9:
    {
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
     i3 = i1 + 2 | 0;
     if ((i3 | 0) == (i5 | 0)) i1 = i5; else {
      i2 = HEAP8[i1 + 3 >> 0] | 0;
      switch (HEAP8[i3 >> 0] | 0) {
      case 0:
       {
        i2 = HEAPU8[i4 + (i2 & 255) >> 0] | 0;
        break;
       }
      case -37:
      case -38:
      case -39:
      case -40:
       {
        i2 = 7;
        break;
       }
      case -33:
      case -34:
      case -35:
      case -36:
       {
        i2 = 8;
        break;
       }
      case -1:
       {
        if ((i2 & 255) > 253) i2 = 0; else i8 = 14;
        break;
       }
      default:
       i8 = 14;
      }
      if ((i8 | 0) == 14) {
       i8 = 0;
       i2 = 29;
      }
      i1 = (i2 | 0) == 10 ? i1 + 4 | 0 : i3;
     }
     HEAP32[i7 >> 2] = -1;
     break L6;
    }
   default:
    {
     i8 = 17;
     break L6;
    }
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i8 = 7;
    break;
   }
  default:
   i8 = 17;
  } while (0);
  if ((i8 | 0) == 7) {
   i8 = 0;
   i1 = i1 + 4 | 0;
  } else if ((i8 | 0) == 17) {
   i8 = 0;
   i1 = i1 + 2 | 0;
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } while (i1 >>> 0 < i5 >>> 0);
 return;
}

function _tt_face_get_ps_name(i5, i2, i6) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 if (!i5) {
  i6 = 35;
  return i6 | 0;
 }
 if ((HEAPU16[i5 + 264 >> 1] | 0) >>> 0 <= i2 >>> 0) {
  i6 = 16;
  return i6 | 0;
 }
 i1 = HEAP32[i5 + 536 >> 2] | 0;
 if (!i1) {
  i6 = 7;
  return i6 | 0;
 }
 i3 = i5 + 612 | 0;
 i4 = i1 + 16 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[i4 >> 2] & 63](0) | 0;
 HEAP32[i6 >> 2] = i1;
 i1 = HEAP32[i5 + 468 >> 2] | 0;
 if ((i1 | 0) < 131072) {
  switch (i1 | 0) {
  case 65536:
   break;
  default:
   {
    i6 = 0;
    return i6 | 0;
   }
  }
  if (i2 >>> 0 >= 258) {
   i6 = 0;
   return i6 | 0;
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[i4 >> 2] & 63](i2) | 0;
  HEAP32[i6 >> 2] = i5;
  i6 = 0;
  return i6 | 0;
 }
 if ((i1 | 0) >= 163840) {
  switch (i1 | 0) {
  case 163840:
   break;
  default:
   {
    i6 = 0;
    return i6 | 0;
   }
  }
  if (!(HEAP8[i3 >> 0] | 0)) if (_load_post_names(i5) | 0) {
   i6 = 0;
   return i6 | 0;
  }
  if ((HEAPU16[i5 + 616 >> 1] | 0) >>> 0 <= i2 >>> 0) {
   i6 = 0;
   return i6 | 0;
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[i4 >> 2] & 63]((HEAP8[(HEAP32[i5 + 620 >> 2] | 0) + i2 >> 0] | 0) + i2 | 0) | 0;
  HEAP32[i6 >> 2] = i5;
  i6 = 0;
  return i6 | 0;
 }
 switch (i1 | 0) {
 case 131072:
  break;
 default:
  {
   i6 = 0;
   return i6 | 0;
  }
 }
 if (!(HEAP8[i3 >> 0] | 0)) if (_load_post_names(i5) | 0) {
  i6 = 0;
  return i6 | 0;
 }
 if ((HEAPU16[i5 + 616 >> 1] | 0) >>> 0 <= i2 >>> 0) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = HEAP16[(HEAP32[i5 + 620 >> 2] | 0) + (i2 << 1) >> 1] | 0;
 i1 = i3 & 65535;
 if ((i3 & 65535) < 258) {
  i5 = FUNCTION_TABLE_ii[HEAP32[i4 >> 2] & 63](i1) | 0;
  HEAP32[i6 >> 2] = i5;
  i6 = 0;
  return i6 | 0;
 } else {
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i5 + 624 >> 2] | 0) + (i1 + -258 << 2) >> 2];
  i6 = 0;
  return i6 | 0;
 }
 return 0;
}

function _tt_cmap13_char_map_binary(i11, i12, i1) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0;
 i3 = HEAP32[i11 + 16 >> 2] | 0;
 i10 = HEAPU8[i3 + 13 >> 0] << 16 | HEAPU8[i3 + 12 >> 0] << 24 | HEAPU8[i3 + 14 >> 0] << 8 | HEAPU8[i3 + 15 >> 0];
 if (!i10) {
  i12 = 0;
  return i12 | 0;
 }
 i8 = i1 << 24 >> 24 != 0;
 i2 = (HEAP32[i12 >> 2] | 0) + (i8 & 1) | 0;
 i6 = i3 + 16 | 0;
 i1 = 0;
 i5 = i10;
 L4 : while (1) {
  while (1) {
   i3 = (i1 + i5 | 0) >>> 1;
   i4 = i6 + (i3 * 12 | 0) + 4 | 0;
   i13 = i4 + -4 | 0;
   i4 = i4 + 4 | 0;
   i7 = i4 + -4 | 0;
   i7 = HEAPU8[i7 + 1 >> 0] << 16 | HEAPU8[i7 >> 0] << 24 | HEAPU8[i7 + 2 >> 0] << 8 | HEAPU8[i7 + 3 >> 0];
   if (i2 >>> 0 < (HEAPU8[i13 + 1 >> 0] << 16 | HEAPU8[i13 >> 0] << 24 | HEAPU8[i13 + 2 >> 0] << 8 | HEAPU8[i13 + 3 >> 0]) >>> 0) break;
   if (i2 >>> 0 <= i7 >>> 0) {
    i9 = 8;
    break L4;
   }
   i1 = i3 + 1 | 0;
   if (i1 >>> 0 >= i5 >>> 0) {
    i1 = 0;
    break L4;
   }
  }
  if (i1 >>> 0 < i3 >>> 0) i5 = i3; else {
   i1 = 0;
   break;
  }
 }
 if ((i9 | 0) == 8) i1 = HEAPU8[i4 + 1 >> 0] << 16 | HEAPU8[i4 >> 0] << 24 | HEAPU8[i4 + 2 >> 0] << 8 | HEAPU8[i4 + 3 >> 0];
 if (!i8) {
  i13 = i1;
  return i13 | 0;
 }
 if (i2 >>> 0 > i7 >>> 0) {
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i10 | 0)) {
   i13 = 0;
   return i13 | 0;
  }
 }
 i4 = i11 + 24 | 0;
 HEAP8[i4 >> 0] = 1;
 i5 = i11 + 28 | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i11 + 36 >> 2] = i3;
 do if (!i1) {
  _tt_cmap13_next(i11);
  if (!(HEAP8[i4 >> 0] | 0)) {
   i13 = 0;
   return i13 | 0;
  }
  i1 = HEAP32[i11 + 32 >> 2] | 0;
  if (!i1) {
   i13 = 0;
   return i13 | 0;
  } else {
   i2 = HEAP32[i5 >> 2] | 0;
   break;
  }
 } else HEAP32[i11 + 32 >> 2] = i1; while (0);
 HEAP32[i12 >> 2] = i2;
 i13 = i1;
 return i13 | 0;
}

function _tt_cmap12_validate(i1, i10) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = i1 + 16 | 0;
 i3 = i10 + 160 | 0;
 if (i4 >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) _ft_validator_error(i10, 8);
 i2 = (HEAPU8[i1 + 5 >> 0] | 0) << 16 | (HEAPU8[i1 + 4 >> 0] | 0) << 24 | (HEAPU8[i1 + 6 >> 0] | 0) << 8 | (HEAPU8[i1 + 7 >> 0] | 0);
 i9 = (HEAPU8[i1 + 13 >> 0] | 0) << 16 | (HEAPU8[i1 + 12 >> 0] | 0) << 24 | (HEAPU8[i1 + 14 >> 0] | 0) << 8 | (HEAPU8[i1 + 15 >> 0] | 0);
 if (i2 >>> 0 < 16 ? 1 : i2 >>> 0 > ((HEAP32[i3 >> 2] | 0) - i1 | 0) >>> 0) _ft_validator_error(i10, 8);
 if ((((i2 + -16 | 0) >>> 0) / 12 | 0) >>> 0 < i9 >>> 0) _ft_validator_error(i10, 8);
 if (!i9) return 0;
 i7 = i10 + 164 | 0;
 i8 = i10 + 172 | 0;
 i5 = 0;
 i6 = 0;
 i2 = i4;
 while (1) {
  i4 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
  i1 = i5;
  i5 = (HEAPU8[i2 + 5 >> 0] | 0) << 16 | (HEAPU8[i2 + 4 >> 0] | 0) << 24 | (HEAPU8[i2 + 6 >> 0] | 0) << 8 | (HEAPU8[i2 + 7 >> 0] | 0);
  i3 = i2;
  i2 = i2 + 12 | 0;
  if (i5 >>> 0 < i4 >>> 0) {
   i1 = 9;
   break;
  }
  if (!((i6 | 0) == 0 | i4 >>> 0 > i1 >>> 0)) {
   i1 = 11;
   break;
  }
  if (HEAP32[i7 >> 2] | 0) {
   i4 = i5 - i4 | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   if (!(i1 >>> 0 >= i4 >>> 0 ? ((HEAPU8[i3 + 9 >> 0] | 0) << 16 | (HEAPU8[i3 + 8 >> 0] | 0) << 24 | (HEAPU8[i3 + 10 >> 0] | 0) << 8 | (HEAPU8[i3 + 11 >> 0] | 0)) >>> 0 < (i1 - i4 | 0) >>> 0 : 0)) {
    i1 = 14;
    break;
   }
  }
  i6 = i6 + 1 | 0;
  if ((i6 | 0) == (i9 | 0)) {
   i1 = 16;
   break;
  }
 }
 if ((i1 | 0) == 9) _ft_validator_error(i10, 8); else if ((i1 | 0) == 11) _ft_validator_error(i10, 8); else if ((i1 | 0) == 14) _ft_validator_error(i10, 16); else if ((i1 | 0) == 16) return 0;
 return 0;
}

function _FcStartElement(i9, i2, i8) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i10 + 16 | 0;
 i7 = i10 + 8 | 0;
 i3 = i10;
 i1 = 0;
 while (1) {
  if (!(_strcmp(i2, 71488 + (i1 * 20 | 0) | 0) | 0)) {
   i4 = 4;
   break;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= 52) {
   i4 = 5;
   break;
  }
 }
 if ((i4 | 0) == 4) i3 = HEAP32[71488 + (i1 * 20 | 0) + 16 >> 2] | 0; else if ((i4 | 0) == 5) {
  HEAP32[i3 >> 2] = i2;
  _FcConfigMessage(i9, 1, 354333, i3);
  i3 = 53;
 }
 i1 = i9 + 24 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 >>> 0 < 8) {
  HEAP32[i1 >> 2] = i2 + 1;
  i6 = i9 + 28 + (i2 * 160 | 0) | 0;
 } else {
  i1 = _malloc(160) | 0;
  if (!i1) {
   _FcConfigMessage(i9, 2, 352676, i5);
   STACKTOP = i10;
   return;
  } else i6 = i1;
 }
 HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i6 + 4 >> 2] = i3;
 i1 = i6 + 96 | 0;
 do if (!i8) i1 = 0; else {
  i2 = HEAP32[i8 >> 2] | 0;
  if (!i2) i1 = 0; else {
   i4 = 0;
   i5 = 0;
   while (1) {
    i5 = i5 + 1 + (_strlen(i2) | 0) | 0;
    i3 = i4 + 1 | 0;
    i2 = HEAP32[i8 + (i3 << 2) >> 2] | 0;
    if (!i2) break; else i4 = i3;
   }
   i3 = i4 + 2 | 0;
   i2 = i5 + (i3 << 2) | 0;
   if ((i2 | 0) >= 65) {
    i1 = _malloc(i2) | 0;
    if (!i1) {
     _FcConfigMessage(0, 2, 352676, i7);
     i1 = 0;
     break;
    }
   }
   i2 = i1 + (i3 << 2) | 0;
   i3 = 0;
   i4 = i1;
   i5 = i8;
   do {
    HEAP32[i4 >> 2] = i2;
    _strcpy(i2, HEAP32[i5 >> 2] | 0) | 0;
    i2 = i2 + ((_strlen(i2) | 0) + 1) | 0;
    i3 = i3 + 1 | 0;
    i5 = i8 + (i3 << 2) | 0;
    i4 = i1 + (i3 << 2) | 0;
   } while ((HEAP32[i5 >> 2] | 0) != 0);
   HEAP32[i4 >> 2] = 0;
  }
 } while (0);
 HEAP32[i6 + 8 >> 2] = i1;
 _FcStrBufInit(i6 + 12 | 0, 0, 0);
 HEAP32[i9 >> 2] = i6;
 STACKTOP = i10;
 return;
}

function __iup_worker_interpolate(i11, i4, i18, i1, i2) {
 i11 = i11 | 0;
 i4 = i4 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 if (i4 >>> 0 > i18 >>> 0) return;
 i17 = HEAP32[i11 + 12 >> 2] | 0;
 if (!(i17 >>> 0 > i1 >>> 0 & i17 >>> 0 > i2 >>> 0)) return;
 i12 = i11 + 8 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i10 = HEAP32[i16 + (i1 << 3) >> 2] | 0;
 i16 = HEAP32[i16 + (i2 << 3) >> 2] | 0;
 i15 = (i10 | 0) > (i16 | 0);
 i3 = i15 ? i10 : i16;
 i10 = i15 ? i16 : i10;
 i16 = i15 ? i1 : i2;
 i15 = i15 ? i2 : i1;
 i6 = HEAP32[i11 >> 2] | 0;
 i13 = HEAP32[i6 + (i15 << 3) >> 2] | 0;
 i14 = HEAP32[i6 + (i16 << 3) >> 2] | 0;
 i9 = i11 + 4 | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i15 = HEAP32[i5 + (i15 << 3) >> 2] | 0;
 i1 = HEAP32[i5 + (i16 << 3) >> 2] | 0;
 i16 = i15 - i13 | 0;
 i17 = i1 - i14 | 0;
 if ((i3 | 0) == (i10 | 0) | (i1 | 0) == (i15 | 0)) {
  i2 = i4;
  do {
   i1 = HEAP32[i6 + (i2 << 3) >> 2] | 0;
   if ((i1 | 0) > (i13 | 0)) i1 = (i1 | 0) < (i14 | 0) ? i15 : i1 + i17 | 0; else i1 = i1 + i16 | 0;
   HEAP32[i5 + (i2 << 3) >> 2] = i1;
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 <= i18 >>> 0);
  return;
 }
 i8 = i3 - i10 | 0;
 i7 = i1 - i15 | 0;
 i1 = 0;
 i2 = 0;
 i3 = i6;
 while (1) {
  i3 = HEAP32[i3 + (i4 << 3) >> 2] | 0;
  do if ((i3 | 0) > (i13 | 0)) {
   if ((i3 | 0) >= (i14 | 0)) {
    i3 = i3 + i17 | 0;
    break;
   }
   if (!(i1 << 24 >> 24)) {
    i1 = 1;
    i2 = _FT_DivFix(i7, i8) | 0;
   }
   i3 = (_FT_MulFix((HEAP32[(HEAP32[i12 >> 2] | 0) + (i4 << 3) >> 2] | 0) - i10 | 0, i2) | 0) + i15 | 0;
   i5 = HEAP32[i9 >> 2] | 0;
  } else i3 = i3 + i16 | 0; while (0);
  HEAP32[i5 + (i4 << 3) >> 2] = i3;
  i3 = i4 + 1 | 0;
  if (i3 >>> 0 > i18 >>> 0) break;
  i4 = i3;
  i3 = HEAP32[i11 >> 2] | 0;
 }
 return;
}

function _ft_var_apply_tuple(i9, i3, i10, i11, i12) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i13 = 0;
 i13 = i9 + 4 | 0;
 i4 = HEAP32[i9 >> 2] | 0;
 if (!i4) {
  i13 = 65536;
  return i13 | 0;
 }
 if (!(i3 & 16384)) {
  i7 = 0;
  i3 = 65536;
  while (1) {
   i6 = HEAP32[i10 + (i7 << 2) >> 2] | 0;
   if (i6) {
    i4 = HEAP32[(HEAP32[i13 >> 2] | 0) + (i7 << 2) >> 2] | 0;
    if (!i4) {
     i3 = 0;
     i4 = 17;
     break;
    }
    if ((i6 | 0) > 0 & (i4 | 0) < 0) {
     i3 = 0;
     i4 = 17;
     break;
    }
    i5 = (i4 | 0) > 0;
    if ((i6 | 0) < 0 & i5) {
     i3 = 0;
     i4 = 17;
     break;
    }
    i3 = _FT_MulFix(i3, i5 ? i4 : 0 - i4 | 0) | 0;
    i4 = HEAP32[i9 >> 2] | 0;
   }
   i7 = i7 + 1 | 0;
   if (i7 >>> 0 >= i4 >>> 0) {
    i4 = 17;
    break;
   }
  }
  if ((i4 | 0) == 17) return i3 | 0;
 } else {
  i8 = 0;
  i1 = 65536;
  i2 = i4;
 }
 while (1) {
  i5 = HEAP32[i10 + (i8 << 2) >> 2] | 0;
  if (i5) {
   i2 = HEAP32[(HEAP32[i13 >> 2] | 0) + (i8 << 2) >> 2] | 0;
   if (!i2) {
    i3 = 0;
    i4 = 17;
    break;
   }
   if ((i5 | 0) > 0 & (i2 | 0) < 0) {
    i3 = 0;
    i4 = 17;
    break;
   }
   if ((i5 | 0) < 0 & (i2 | 0) > 0) {
    i3 = 0;
    i4 = 17;
    break;
   }
   i3 = HEAP32[i11 + (i8 << 2) >> 2] | 0;
   if ((i2 | 0) < (i3 | 0)) {
    i3 = 0;
    i4 = 17;
    break;
   }
   i4 = HEAP32[i12 + (i8 << 2) >> 2] | 0;
   if ((i4 | 0) < (i2 | 0)) {
    i3 = 0;
    i4 = 17;
    break;
   }
   i7 = (i2 | 0) < (i5 | 0);
   i1 = _FT_MulDiv(i1, i7 ? i2 - i3 | 0 : i4 - i2 | 0, i7 ? i5 - i3 | 0 : i4 - i5 | 0) | 0;
   i2 = HEAP32[i9 >> 2] | 0;
  }
  i8 = i8 + 1 | 0;
  if (i8 >>> 0 >= i2 >>> 0) {
   i3 = i1;
   i4 = 17;
   break;
  }
 }
 if ((i4 | 0) == 17) return i3 | 0;
 return 0;
}

function _trinkle(i1, i10, i11, i3, i6, i2, i12) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i9 = i14 + 232 | 0;
 i13 = i14;
 i5 = HEAP32[i3 >> 2] | 0;
 HEAP32[i9 >> 2] = i5;
 i8 = HEAP32[i3 + 4 >> 2] | 0;
 i7 = i9 + 4 | 0;
 HEAP32[i7 >> 2] = i8;
 HEAP32[i13 >> 2] = i1;
 L1 : do if ((i5 | 0) != 1 | (i8 | 0) != 0) {
  i8 = 0 - i10 | 0;
  i5 = i1 + (0 - (HEAP32[i12 + (i6 << 2) >> 2] | 0)) | 0;
  if ((FUNCTION_TABLE_iii[i11 & 255](i5, i1) | 0) < 1) {
   i4 = 1;
   i3 = i6;
   i5 = 9;
  } else {
   i4 = 1;
   i3 = i6;
   i2 = (i2 | 0) == 0;
   i6 = i5;
   while (1) {
    if (i2 & (i3 | 0) > 1) {
     i2 = i1 + i8 | 0;
     i5 = HEAP32[i12 + (i3 + -2 << 2) >> 2] | 0;
     if ((FUNCTION_TABLE_iii[i11 & 255](i2, i6) | 0) > -1) {
      i5 = 10;
      break L1;
     }
     if ((FUNCTION_TABLE_iii[i11 & 255](i2 + (0 - i5) | 0, i6) | 0) > -1) {
      i5 = 10;
      break L1;
     }
    }
    i2 = i4 + 1 | 0;
    HEAP32[i13 + (i4 << 2) >> 2] = i6;
    i5 = _pntz(i9) | 0;
    _shr(i9, i5);
    i3 = i5 + i3 | 0;
    if (!((HEAP32[i9 >> 2] | 0) != 1 | (HEAP32[i7 >> 2] | 0) != 0)) {
     i4 = i2;
     i1 = i6;
     i5 = 10;
     break L1;
    }
    i1 = i6 + (0 - (HEAP32[i12 + (i3 << 2) >> 2] | 0)) | 0;
    if ((FUNCTION_TABLE_iii[i11 & 255](i1, HEAP32[i13 >> 2] | 0) | 0) < 1) {
     i1 = i6;
     i4 = i2;
     i2 = 0;
     i5 = 9;
     break;
    } else {
     i5 = i6;
     i4 = i2;
     i2 = 1;
     i6 = i1;
     i1 = i5;
    }
   }
  }
 } else {
  i4 = 1;
  i3 = i6;
  i5 = 9;
 } while (0);
 if ((i5 | 0) == 9) if (!i2) i5 = 10;
 if ((i5 | 0) == 10) {
  _cycle(i10, i13, i4);
  _sift(i1, i10, i11, i3, i12);
 }
 STACKTOP = i14;
 return;
}

function ___fdopen(i9, i3) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i11 = i12 + 40 | 0;
 i8 = i12 + 24 | 0;
 i7 = i12 + 16 | 0;
 i4 = i12;
 i10 = i12 + 56 | 0;
 i2 = HEAP8[i3 >> 0] | 0;
 if (!(_memchr(367596, i2 << 24 >> 24, 4) | 0)) {
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 22;
  i1 = 0;
 } else {
  i1 = _malloc(1156) | 0;
  if (!i1) i1 = 0; else {
   i5 = i1;
   i6 = i5 + 124 | 0;
   do {
    HEAP32[i5 >> 2] = 0;
    i5 = i5 + 4 | 0;
   } while ((i5 | 0) < (i6 | 0));
   if (!(_strchr(i3, 43) | 0)) HEAP32[i1 >> 2] = i2 << 24 >> 24 == 114 ? 8 : 4;
   if (_strchr(i3, 101) | 0) {
    HEAP32[i4 >> 2] = i9;
    HEAP32[i4 + 4 >> 2] = 2;
    HEAP32[i4 + 8 >> 2] = 1;
    ___syscall221(221, i4 | 0) | 0;
    i2 = HEAP8[i3 >> 0] | 0;
   }
   if (i2 << 24 >> 24 == 97) {
    HEAP32[i7 >> 2] = i9;
    HEAP32[i7 + 4 >> 2] = 3;
    i2 = ___syscall221(221, i7 | 0) | 0;
    if (!(i2 & 1024)) {
     HEAP32[i8 >> 2] = i9;
     HEAP32[i8 + 4 >> 2] = 4;
     HEAP32[i8 + 8 >> 2] = i2 | 1024;
     ___syscall221(221, i8 | 0) | 0;
    }
    i3 = HEAP32[i1 >> 2] | 128;
    HEAP32[i1 >> 2] = i3;
   } else i3 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 + 60 >> 2] = i9;
   HEAP32[i1 + 44 >> 2] = i1 + 132;
   HEAP32[i1 + 48 >> 2] = 1024;
   i2 = i1 + 75 | 0;
   HEAP8[i2 >> 0] = -1;
   if (!(i3 & 8)) {
    HEAP32[i11 >> 2] = i9;
    HEAP32[i11 + 4 >> 2] = 21523;
    HEAP32[i11 + 8 >> 2] = i10;
    if (!(___syscall54(54, i11 | 0) | 0)) HEAP8[i2 >> 0] = 10;
   }
   HEAP32[i1 + 32 >> 2] = 93;
   HEAP32[i1 + 36 >> 2] = 61;
   HEAP32[i1 + 40 >> 2] = 62;
   HEAP32[i1 + 12 >> 2] = 44;
   if (!(HEAP32[92072] | 0)) HEAP32[i1 + 76 >> 2] = -1;
   ___ofl_add(i1) | 0;
  }
 }
 STACKTOP = i12;
 return i1 | 0;
}

function _ps_table_add(i12, i13, i1, i14) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i16;
 if ((i13 | 0) < 0) {
  i15 = 6;
  STACKTOP = i16;
  return i15 | 0;
 }
 i7 = i12 + 16 | 0;
 if ((HEAP32[i7 >> 2] | 0) <= (i13 | 0)) {
  i15 = 6;
  STACKTOP = i16;
  return i15 | 0;
 }
 i15 = i12 + 4 | 0;
 i3 = (HEAP32[i15 >> 2] | 0) + i14 | 0;
 i10 = i12 + 8 | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if (i3 >>> 0 > i2 >>> 0) {
  i6 = HEAP32[i12 >> 2] | 0;
  i9 = i1 - i6 | 0;
  i9 = (i9 | 0) > -1 & i9 >>> 0 < i2 >>> 0 ? i9 : -1;
  i11 = i6;
  do i2 = i2 + 1024 + (i2 >>> 2) & -1024; while (i2 >>> 0 < i3 >>> 0);
  i8 = HEAP32[i12 + 32 >> 2] | 0;
  i4 = _ft_mem_alloc(i8, i2, i5) | 0;
  HEAP32[i12 >> 2] = i4;
  i3 = HEAP32[i5 >> 2] | 0;
  if (i3 | 0) {
   HEAP32[i12 >> 2] = i11;
   i15 = i3;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (i6 | 0) {
   _memcpy(i4 | 0, i11 | 0, HEAP32[i10 >> 2] | 0) | 0;
   i6 = (HEAP32[i12 >> 2] | 0) - i6 | 0;
   i3 = HEAP32[i12 + 24 >> 2] | 0;
   i7 = HEAP32[i7 >> 2] | 0;
   i5 = i3 + (i7 << 2) | 0;
   if ((i7 | 0) > 0) do {
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4 | 0) HEAP32[i3 >> 2] = i4 + i6;
    i3 = i3 + 4 | 0;
   } while (i3 >>> 0 < i5 >>> 0);
   _ft_mem_free(i8, i11);
  }
  HEAP32[i10 >> 2] = i2;
  if ((i9 | 0) > -1) i1 = (HEAP32[i12 >> 2] | 0) + i9 | 0;
 }
 HEAP32[(HEAP32[i12 + 24 >> 2] | 0) + (i13 << 2) >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
 HEAP32[(HEAP32[i12 + 28 >> 2] | 0) + (i13 << 2) >> 2] = i14;
 _memcpy((HEAP32[i12 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0, i1 | 0, i14 | 0) | 0;
 HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + i14;
 i15 = 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _measure_text(i13) {
 i13 = i13 | 0;
 var d1 = 0.0, d2 = 0.0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, d15 = 0.0, i16 = 0;
 i14 = i13 + 704 | 0;
 HEAPF64[i14 >> 3] = 0.0;
 i9 = HEAP32[i13 + 684 >> 2] | 0;
 if ((i9 | 0) < 0) {
  d2 = 0.0;
  i12 = i13 + 692 | 0;
  i12 = HEAP32[i12 >> 2] | 0;
  i12 = i12 + -1 | 0;
  d3 = +(i12 | 0);
  i13 = i13 + 40 | 0;
  d1 = +HEAPF64[i13 >> 3];
  d3 = d1 * d3;
  d3 = d2 + d3;
  HEAPF64[i14 >> 3] = d3;
  return;
 }
 i10 = i13 + 688 | 0;
 i11 = i13 + 680 | 0;
 i4 = 1;
 i8 = 0;
 i5 = 0;
 d3 = 0.0;
 d2 = 0.0;
 i6 = 0;
 d1 = 0.0;
 while (1) {
  if ((i8 | 0) == (i9 | 0)) i12 = 5; else if (HEAP8[(HEAP32[i11 >> 2] | 0) + (i8 * 344 | 0) + 80 >> 0] | 0) i12 = 5;
  if ((i12 | 0) == 5) {
   i12 = 0;
   if ((i5 | 0) != 0 & ((i4 | 0) != 0 & (i6 | 0) > 0)) {
    d3 = +(HEAP32[i5 + 136 >> 2] | 0) * .015625 * .5;
    d2 = +(HEAP32[i5 + 132 >> 2] | 0) * .015625 * .5;
   }
   i4 = HEAP32[i10 >> 2] | 0;
   HEAPF64[i4 + (i6 * 24 | 0) >> 3] = d2;
   HEAPF64[i4 + (i6 * 24 | 0) + 8 >> 3] = d3;
   d1 = d2 + d3 + d1;
   HEAPF64[i14 >> 3] = d1;
   i6 = i6 + 1 | 0;
   i4 = 1;
   d3 = 0.0;
   d2 = 0.0;
  }
  if ((i8 | 0) >= (i9 | 0)) break;
  i16 = HEAP32[i11 >> 2] | 0;
  i7 = i16 + (i8 * 344 | 0) | 0;
  d15 = +(HEAP32[i16 + (i8 * 344 | 0) + 132 >> 2] | 0) * .015625;
  d2 = d15 > d2 ? d15 : d2;
  d15 = +(HEAP32[i16 + (i8 * 344 | 0) + 136 >> 2] | 0) * .015625;
  d3 = d15 > d3 ? d15 : d3;
  switch (HEAP32[i7 >> 2] | 0) {
  case 0:
  case 10:
   break;
  default:
   {
    i5 = i7;
    i4 = 0;
   }
  }
  i8 = i8 + 1 | 0;
 }
 i16 = i13 + 692 | 0;
 i16 = HEAP32[i16 >> 2] | 0;
 i16 = i16 + -1 | 0;
 d15 = +(i16 | 0);
 i16 = i13 + 40 | 0;
 d3 = +HEAPF64[i16 >> 3];
 d15 = d3 * d15;
 d15 = d1 + d15;
 HEAPF64[i14 >> 3] = d15;
 return;
}

function _FT_Select_Charmap(i7, i4) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0;
 if (!i7) {
  i8 = 35;
  return i8 | 0;
 }
 L4 : do if ((i4 | 0) < 1970170211) {
  switch (i4 | 0) {
  case 0:
   {
    i6 = 6;
    break;
   }
  default:
   break L4;
  }
  return i6 | 0;
 } else {
  switch (i4 | 0) {
  case 1970170211:
   break;
  default:
   break L4;
  }
  i4 = HEAP32[i7 + 40 >> 2] | 0;
  if (!i4) {
   i8 = 38;
   return i8 | 0;
  }
  i1 = i4 + (HEAP32[i7 + 36 >> 2] << 2) | 0;
  i2 = i1 + -4 | 0;
  L12 : do if (i2 >>> 0 >= i4 >>> 0) {
   L13 : while (1) {
    i3 = HEAP32[i2 >> 2] | 0;
    L15 : do if ((HEAP32[i3 + 4 >> 2] | 0) == 1970170211) switch (HEAP16[i3 + 8 >> 1] | 0) {
    case 3:
     if ((HEAP16[i3 + 10 >> 1] | 0) == 10) break L13; else break L15;
    case 0:
     if ((HEAP16[i3 + 10 >> 1] | 0) == 4) break L13; else break L15;
    default:
     break L15;
    } while (0);
    i2 = i2 + -4 | 0;
    if (i2 >>> 0 < i4 >>> 0) break L12;
   }
   HEAP32[i7 + 92 >> 2] = i3;
   i8 = 0;
   return i8 | 0;
  } while (0);
  do {
   i1 = i1 + -4 | 0;
   if (i1 >>> 0 < i4 >>> 0) {
    i6 = 38;
    i8 = 19;
    break;
   }
   i5 = HEAP32[i1 >> 2] | 0;
  } while ((HEAP32[i5 + 4 >> 2] | 0) != 1970170211);
  if ((i8 | 0) == 19) return i6 | 0;
  HEAP32[i7 + 92 >> 2] = i5;
  i8 = 0;
  return i8 | 0;
 } while (0);
 i1 = HEAP32[i7 + 40 >> 2] | 0;
 if (!i1) {
  i8 = 38;
  return i8 | 0;
 }
 i5 = HEAP32[i7 + 36 >> 2] | 0;
 i3 = i1 + (i5 << 2) | 0;
 if ((i5 | 0) <= 0) {
  i8 = 6;
  return i8 | 0;
 }
 while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  i1 = i1 + 4 | 0;
  if ((HEAP32[i2 + 4 >> 2] | 0) == (i4 | 0)) break;
  if (i1 >>> 0 >= i3 >>> 0) {
   i6 = 6;
   i8 = 19;
   break;
  }
 }
 if ((i8 | 0) == 19) return i6 | 0;
 HEAP32[i7 + 92 >> 2] = i2;
 i8 = 0;
 return i8 | 0;
}

function _ps_hints_t1reset(i8, i7) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i12;
 i11 = i8 + 4 | 0;
 if (HEAP32[i11 >> 2] | 0) {
  STACKTOP = i12;
  return;
 }
 i9 = HEAP32[i8 >> 2] | 0;
 L4 : do if ((HEAP32[i8 + 12 >> 2] | 0) == 1) {
  i5 = i8 + 28 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  if (i1 | 0) HEAP32[(HEAP32[i8 + 36 >> 2] | 0) + (i1 << 4) + -16 + 12 >> 2] = i7;
  i6 = i1 + 1 | 0;
  i4 = i8 + 32 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  do if (i6 >>> 0 > i2 >>> 0) {
   HEAP32[i10 >> 2] = 0;
   i3 = i1 + 8 & -8;
   i1 = i8 + 36 | 0;
   i2 = _ft_mem_realloc(i9, 16, i2, i3, HEAP32[i1 >> 2] | 0, i10) | 0;
   HEAP32[i1 >> 2] = i2;
   i1 = HEAP32[i10 >> 2] | 0;
   if (!i1) {
    HEAP32[i4 >> 2] = i3;
    i1 = i2;
    break;
   } else break L4;
  } else i1 = HEAP32[i8 + 36 >> 2] | 0; while (0);
  i1 = i1 + (i6 << 4) + -16 | 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i5 >> 2] = i6;
  i6 = i8 + 64 | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (i1 | 0) HEAP32[(HEAP32[i8 + 72 >> 2] | 0) + (i1 << 4) + -16 + 12 >> 2] = i7;
  i5 = i1 + 1 | 0;
  i4 = i8 + 68 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  do if (i5 >>> 0 > i2 >>> 0) {
   HEAP32[i10 >> 2] = 0;
   i3 = i1 + 8 & -8;
   i1 = i8 + 72 | 0;
   i2 = _ft_mem_realloc(i9, 16, i2, i3, HEAP32[i1 >> 2] | 0, i10) | 0;
   HEAP32[i1 >> 2] = i2;
   i1 = HEAP32[i10 >> 2] | 0;
   if (!i1) {
    HEAP32[i4 >> 2] = i3;
    i1 = i2;
    break;
   } else break L4;
  } else i1 = HEAP32[i8 + 72 >> 2] | 0; while (0);
  i11 = i1 + (i5 << 4) + -16 | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 12 >> 2] = 0;
  HEAP32[i6 >> 2] = i5;
  STACKTOP = i12;
  return;
 } else i1 = 6; while (0);
 HEAP32[i11 >> 2] = i1;
 STACKTOP = i12;
 return;
}

function _FcLangSetCompare(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[((HEAP32[i7 + 4 >> 2] | 0) >>> 0 < (HEAP32[i6 + 4 >> 2] | 0) >>> 0 ? i7 : i6) + 4 >> 2] | 0;
 i5 = (i2 | 0) < 8 ? i2 : 8;
 i2 = (i2 | 0) > 0;
 if (i2) {
  i1 = 0;
  do {
   if (HEAP32[i6 + 8 + (i1 << 2) >> 2] & HEAP32[i7 + 8 + (i1 << 2) >> 2] | 0) {
    i1 = 0;
    i3 = 23;
    break;
   }
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i5 | 0));
  if ((i3 | 0) == 23) return i1 | 0;
  if (i2) {
   i4 = 0;
   i1 = 2;
   do {
    i2 = 0;
    do {
     i3 = HEAP32[89304 + (i4 << 5) + (i2 << 2) >> 2] | 0;
     if (i3 & HEAP32[i7 + 8 + (i2 << 2) >> 2] | 0) if (HEAP32[i6 + 8 + (i2 << 2) >> 2] & i3 | 0) {
      i1 = 1;
      break;
     }
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) < (i5 | 0));
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != 9);
   i4 = i1;
  } else i4 = 2;
 } else i4 = 2;
 i1 = HEAP32[i7 >> 2] | 0;
 if (i1) {
  i3 = _FcStrListCreate(i1) | 0;
  if (!i3) i1 = 2; else {
   i1 = 2;
   while (1) {
    i2 = _FcStrListNext(i3) | 0;
    if (!i2) break;
    i5 = _FcLangSetHasLang(i6, i2) | 0;
    i1 = i5 >>> 0 < i1 >>> 0 ? i5 : i1;
    if (!i1) {
     i1 = 0;
     break;
    }
   }
   _FcStrListDone(i3);
  }
  i4 = i1 >>> 0 < i4 >>> 0 ? i1 : i4;
 }
 if (!i4) {
  i7 = 0;
  return i7 | 0;
 }
 i1 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  i7 = i4;
  return i7 | 0;
 }
 i3 = _FcStrListCreate(i1) | 0;
 if (!i3) {
  i7 = 2;
  i6 = i7 >>> 0 < i4 >>> 0;
  i7 = i6 ? i7 : i4;
  return i7 | 0;
 } else i1 = 2;
 while (1) {
  i2 = _FcStrListNext(i3) | 0;
  if (!i2) break;
  i6 = _FcLangSetHasLang(i7, i2) | 0;
  i1 = i6 >>> 0 < i1 >>> 0 ? i6 : i1;
  if (!i1) {
   i1 = 0;
   break;
  }
 }
 _FcStrListDone(i3);
 i7 = i1;
 i6 = i7 >>> 0 < i4 >>> 0;
 i7 = i6 ? i7 : i4;
 return i7 | 0;
}

function _FcCompare(i11, i12, i13, i14) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 _memset(i13 | 0, 0, 192) | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if ((i1 | 0) <= 0) {
  i18 = 1;
  return i18 | 0;
 }
 i15 = i11;
 i16 = i11 + 8 | 0;
 i17 = i12;
 i18 = i12 + 8 | 0;
 i3 = 0;
 i2 = 0;
 L4 : while (1) {
  if ((i2 | 0) >= (HEAP32[i12 >> 2] | 0)) {
   i1 = 1;
   i4 = 16;
   break;
  }
  i8 = (HEAP32[i16 >> 2] | 0) + i15 | 0;
  i9 = (HEAP32[i18 >> 2] | 0) + i17 | 0;
  i10 = i9 + (i2 << 3) | 0;
  i7 = HEAP32[i10 >> 2] | 0;
  while (1) {
   i5 = i8 + (i3 << 3) | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   i4 = i6 - i7 | 0;
   if ((i4 | 0) > 0) {
    i4 = 4;
    break;
   }
   if ((i4 | 0) >= 0) {
    i4 = 10;
    break;
   }
   i3 = i3 + 1 | 0;
   if ((i3 | 0) >= (i1 | 0)) {
    i1 = 1;
    i4 = 16;
    break L4;
   }
  }
  if ((i4 | 0) == 4) i2 = i2 + 1 | 0; else if ((i4 | 0) == 10) {
   if ((i6 | 0) > 48) i1 = 0; else if (!(HEAP32[89592 + (i6 << 4) + 4 >> 2] | 0)) i1 = 0; else if ((HEAP32[89592 + (i6 << 4) + 8 >> 2] | 0) == -1) i1 = 0; else i1 = (HEAP32[89592 + (i6 << 4) + 12 >> 2] | 0) == -1 ? 0 : 89592 + (i6 << 4) | 0;
   i4 = HEAP32[i8 + (i3 << 3) + 4 >> 2] | 0;
   i7 = i4;
   i8 = HEAP32[i9 + (i2 << 3) + 4 >> 2] | 0;
   i9 = i8;
   i10 = (_FcCompareValueList(i6, i1, (i7 & 1 | 0) == 0 ? i4 : (i7 & -2) + i5 | 0, (i9 & 1 | 0) == 0 ? i8 : (i9 & -2) + i10 | 0, 0, i13, 0, i14) | 0) == 0;
   i1 = (i10 ^ 1) & 1;
   if (i10) {
    i1 = 0;
    i4 = 16;
    break;
   }
   i3 = i1 + i3 | 0;
   i2 = i1 + i2 | 0;
   i1 = HEAP32[i11 >> 2] | 0;
  }
  if ((i3 | 0) >= (i1 | 0)) {
   i1 = 1;
   i4 = 16;
   break;
  }
 }
 if ((i4 | 0) == 16) return i1 | 0;
 return 0;
}

function _normal_attributeValueTok(i3, i4, i5, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i7 = 0;
 do if ((i4 | 0) == (i5 | 0)) i1 = -4; else {
  i7 = i3 + 76 | 0;
  i1 = i4;
  L3 : while (1) {
   switch (HEAP8[i7 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
   case 3:
    {
     i2 = 6;
     break L3;
    }
   case 2:
    {
     i2 = 9;
     break L3;
    }
   case 10:
    {
     i2 = 10;
     break L3;
    }
   case 9:
    {
     i2 = 13;
     break L3;
    }
   case 21:
    {
     i2 = 17;
     break L3;
    }
   case 5:
    {
     i2 = 2;
     break;
    }
   case 6:
    {
     i2 = 3;
     break;
    }
   case 7:
    {
     i2 = 4;
     break;
    }
   default:
    i2 = 1;
   }
   i1 = i1 + i2 | 0;
   if ((i1 | 0) == (i5 | 0)) {
    i2 = 22;
    break;
   }
  }
  if ((i2 | 0) == 6) if ((i1 | 0) == (i4 | 0)) {
   i1 = _normal_scanRef(i3, i4 + 1 | 0, i5, i6) | 0;
   break;
  } else {
   HEAP32[i6 >> 2] = i1;
   i1 = 6;
   break;
  } else if ((i2 | 0) == 9) {
   HEAP32[i6 >> 2] = i1;
   i1 = 0;
   break;
  } else if ((i2 | 0) == 10) if ((i1 | 0) == (i4 | 0)) {
   HEAP32[i6 >> 2] = i4 + 1;
   i1 = 7;
   break;
  } else {
   HEAP32[i6 >> 2] = i1;
   i1 = 6;
   break;
  } else if ((i2 | 0) == 13) {
   if ((i1 | 0) != (i4 | 0)) {
    HEAP32[i6 >> 2] = i1;
    i1 = 6;
    break;
   }
   i1 = i4 + 1 | 0;
   if ((i1 | 0) == (i5 | 0)) {
    i1 = -3;
    break;
   }
   HEAP32[i6 >> 2] = (HEAP8[i7 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) == 10 ? i4 + 2 | 0 : i1;
   i1 = 7;
   break;
  } else if ((i2 | 0) == 17) if ((i1 | 0) == (i4 | 0)) {
   HEAP32[i6 >> 2] = i4 + 1;
   i1 = 39;
   break;
  } else {
   HEAP32[i6 >> 2] = i1;
   i1 = 6;
   break;
  } else if ((i2 | 0) == 22) {
   HEAP32[i6 >> 2] = i5;
   i1 = 6;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _memcpy(i3, i6, i1) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 if ((i1 | 0) >= 8192) return _emscripten_memcpy_big(i3 | 0, i6 | 0, i1 | 0) | 0;
 i5 = i3 | 0;
 i4 = i3 + i1 | 0;
 if ((i3 & 3) == (i6 & 3)) {
  while (i3 & 3) {
   if (!i1) return i5 | 0;
   HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
   i3 = i3 + 1 | 0;
   i6 = i6 + 1 | 0;
   i1 = i1 - 1 | 0;
  }
  i1 = i4 & -4 | 0;
  i2 = i1 - 64 | 0;
  while ((i3 | 0) <= (i2 | 0)) {
   HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   HEAP32[i3 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
   HEAP32[i3 + 20 >> 2] = HEAP32[i6 + 20 >> 2];
   HEAP32[i3 + 24 >> 2] = HEAP32[i6 + 24 >> 2];
   HEAP32[i3 + 28 >> 2] = HEAP32[i6 + 28 >> 2];
   HEAP32[i3 + 32 >> 2] = HEAP32[i6 + 32 >> 2];
   HEAP32[i3 + 36 >> 2] = HEAP32[i6 + 36 >> 2];
   HEAP32[i3 + 40 >> 2] = HEAP32[i6 + 40 >> 2];
   HEAP32[i3 + 44 >> 2] = HEAP32[i6 + 44 >> 2];
   HEAP32[i3 + 48 >> 2] = HEAP32[i6 + 48 >> 2];
   HEAP32[i3 + 52 >> 2] = HEAP32[i6 + 52 >> 2];
   HEAP32[i3 + 56 >> 2] = HEAP32[i6 + 56 >> 2];
   HEAP32[i3 + 60 >> 2] = HEAP32[i6 + 60 >> 2];
   i3 = i3 + 64 | 0;
   i6 = i6 + 64 | 0;
  }
  while ((i3 | 0) < (i1 | 0)) {
   HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
   i3 = i3 + 4 | 0;
   i6 = i6 + 4 | 0;
  }
 } else {
  i1 = i4 - 4 | 0;
  while ((i3 | 0) < (i1 | 0)) {
   HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
   HEAP8[i3 + 1 >> 0] = HEAP8[i6 + 1 >> 0] | 0;
   HEAP8[i3 + 2 >> 0] = HEAP8[i6 + 2 >> 0] | 0;
   HEAP8[i3 + 3 >> 0] = HEAP8[i6 + 3 >> 0] | 0;
   i3 = i3 + 4 | 0;
   i6 = i6 + 4 | 0;
  }
 }
 while ((i3 | 0) < (i4 | 0)) {
  HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i6 = i6 + 1 | 0;
 }
 return i5 | 0;
}

function _inflate_flush(i12, i13, i1) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0;
 i14 = i13 + 12 | 0;
 i2 = HEAP32[i14 >> 2] | 0;
 i15 = i12 + 48 | 0;
 i4 = HEAP32[i15 >> 2] | 0;
 i6 = i12 + 52 | 0;
 i5 = i12 + 44 | 0;
 i3 = (HEAP32[(i4 >>> 0 <= (HEAP32[i6 >> 2] | 0) >>> 0 ? i6 : i5) >> 2] | 0) - i4 | 0;
 i11 = i13 + 16 | 0;
 i8 = HEAP32[i11 >> 2] | 0;
 i3 = i3 >>> 0 > i8 >>> 0 ? i8 : i3;
 i10 = (i1 | 0) == -5 & (i3 | 0) != 0 ? 0 : i1;
 HEAP32[i11 >> 2] = i8 - i3;
 i8 = i13 + 20 | 0;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i3;
 i9 = i12 + 56 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (i1 | 0) {
  i16 = i12 + 60 | 0;
  i7 = FUNCTION_TABLE_iiii[i1 & 127](HEAP32[i16 >> 2] | 0, i4, i3) | 0;
  HEAP32[i16 >> 2] = i7;
  HEAP32[i13 + 48 >> 2] = i7;
 }
 _memcpy(i2 | 0, i4 | 0, i3 | 0) | 0;
 i7 = i2 + i3 | 0;
 i2 = i4 + i3 | 0;
 if ((i2 | 0) != (HEAP32[i5 >> 2] | 0)) {
  i13 = i2;
  i12 = i7;
  i16 = i10;
  HEAP32[i14 >> 2] = i12;
  HEAP32[i15 >> 2] = i13;
  return i16 | 0;
 }
 i3 = HEAP32[i12 + 40 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i6 >> 2] = i3;
  i1 = i3;
  i2 = i1;
 } else i2 = i3;
 i2 = i1 - i2 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i2 >>> 0 > i1 >>> 0 ? i1 : i2;
 HEAP32[i11 >> 2] = i1 - i2;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i2;
 i1 = HEAP32[i9 >> 2] | 0;
 if (i1 | 0) {
  i12 = i12 + 60 | 0;
  i16 = FUNCTION_TABLE_iiii[i1 & 127](HEAP32[i12 >> 2] | 0, i3, i2) | 0;
  HEAP32[i12 >> 2] = i16;
  HEAP32[i13 + 48 >> 2] = i16;
 }
 _memcpy(i7 | 0, i3 | 0, i2 | 0) | 0;
 i13 = i3 + i2 | 0;
 i12 = i7 + i2 | 0;
 i16 = (i10 | 0) == -5 & (i2 | 0) != 0 ? 0 : i10;
 HEAP32[i14 >> 2] = i12;
 HEAP32[i15 >> 2] = i13;
 return i16 | 0;
}

function _ft_var_readpackedpoints(i8, i3) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i9;
 i2 = HEAP32[i8 + 28 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 i7 = _FT_Stream_GetChar(i8) | 0;
 i1 = i7 & 255;
 if (!(i7 << 24 >> 24)) {
  i8 = -1;
  STACKTOP = i9;
  return i8 | 0;
 }
 if (!(i1 & 128)) i7 = i1; else i7 = (_FT_Stream_GetChar(i8) | 0) & 255 | i1 << 8 & 32512;
 i1 = _ft_mem_realloc(i2, 2, 0, i7, 0, i4) | 0;
 if (HEAP32[i4 >> 2] | 0) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP32[i3 >> 2] = i7;
 if (!i7) {
  i8 = i1;
  STACKTOP = i9;
  return i8 | 0;
 } else i2 = 0;
 while (1) {
  i5 = _FT_Stream_GetChar(i8) | 0;
  i6 = i5 & 255;
  if (!(i6 & 128)) {
   i4 = (_FT_Stream_GetChar(i8) | 0) & 255;
   i3 = i2 + 1 | 0;
   HEAP16[i1 + (i2 << 1) >> 1] = i4;
   i2 = i6 + i3 | 0;
   if (i5 << 24 >> 24 == 0 | i2 >>> 0 > i7 >>> 0) {
    i2 = 12;
    break;
   } else i5 = 0;
   while (1) {
    i4 = ((_FT_Stream_GetChar(i8) | 0) & 255) + (i4 & 65535) & 65535;
    HEAP16[i1 + (i3 << 1) >> 1] = i4;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i6 | 0)) break; else i3 = i3 + 1 | 0;
   }
  } else {
   i6 = i6 & 127;
   i4 = _FT_Stream_GetUShort(i8) | 0;
   i3 = i2 + 1 | 0;
   HEAP16[i1 + (i2 << 1) >> 1] = i4;
   i2 = i6 + i3 | 0;
   if ((i6 | 0) == 0 | i2 >>> 0 > i7 >>> 0) {
    i2 = 12;
    break;
   } else i5 = 0;
   while (1) {
    i4 = ((_FT_Stream_GetUShort(i8) | 0) & 65535) + (i4 & 65535) & 65535;
    HEAP16[i1 + (i3 << 1) >> 1] = i4;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i6 | 0)) break; else i3 = i3 + 1 | 0;
   }
  }
  if (i2 >>> 0 >= i7 >>> 0) {
   i2 = 12;
   break;
  }
 }
 if ((i2 | 0) == 12) {
  STACKTOP = i9;
  return i1 | 0;
 }
 return 0;
}

function _FcLangSetContains(i9, i3) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i10 = i12 + 24 | 0;
 i8 = i12 + 16 | 0;
 if (HEAP32[91917] & 2 | 0) {
  _printf(347413, i12) | 0;
  _FcLangSetPrint(i9);
  _printf(347424, i12 + 8 | 0) | 0;
  _FcLangSetPrint(i3);
  _putchar(10) | 0;
 }
 i7 = HEAP32[((HEAP32[i9 + 4 >> 2] | 0) >>> 0 < (HEAP32[i3 + 4 >> 2] | 0) >>> 0 ? i9 : i3) + 4 >> 2] | 0;
 i4 = (i7 | 0) < 8 ? i7 : 8;
 L4 : do if ((i7 | 0) > 0) {
  i1 = 0;
  L5 : while (1) {
   i5 = HEAP32[i3 + 8 + (i1 << 2) >> 2] & ~HEAP32[i9 + 8 + (i1 << 2) >> 2];
   if (i5 | 0) {
    i6 = i1 << 5;
    i2 = 0;
    do {
     if (1 << i2 & i5 | 0) {
      i7 = 30904 + ((HEAPU8[63998 + (i2 + i6) >> 0] | 0) * 24 | 0) | 0;
      if (!(_FcLangSetContainsLang(i9, i7) | 0)) break L5;
     }
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) < 32);
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i4 | 0)) break L4;
  }
  if (!(HEAP32[91917] & 2)) {
   i11 = 0;
   STACKTOP = i12;
   return i11 | 0;
  }
  HEAP32[i8 >> 2] = i7;
  _printf(347435, i8) | 0;
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 } while (0);
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  i11 = 1;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = _FcStrListCreate(i1) | 0;
 if (!i1) {
  i11 = 1;
  STACKTOP = i12;
  return i11 | 0;
 }
 do {
  i2 = _FcStrListNext(i1) | 0;
  if (!i2) {
   i11 = 19;
   break;
  }
 } while ((_FcLangSetContainsLang(i9, i2) | 0) != 0);
 if ((i11 | 0) == 19) {
  _FcStrListDone(i1);
  i11 = 1;
  STACKTOP = i12;
  return i11 | 0;
 }
 if (HEAP32[91917] & 2 | 0) {
  HEAP32[i10 >> 2] = i2;
  _printf(347455, i10) | 0;
 }
 _FcStrListDone(i1);
 i11 = 0;
 STACKTOP = i12;
 return i11 | 0;
}

function _BDF_Glyph_Load(i8, i1, i3, i2) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i6 = i1 + 140 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i7 = HEAP16[i2 + 278662 >> 1] | 0;
 if (!i1) {
  i8 = 35;
  return i8 | 0;
 }
 if ((HEAP32[i1 + 16 >> 2] | 0) >>> 0 <= i3 >>> 0) {
  i8 = 6;
  return i8 | 0;
 }
 if (!i3) i1 = HEAP32[i1 + 164 >> 2] | 0; else i1 = i3 + -1 | 0;
 i12 = HEAP32[i2 + 56 >> 2] | 0;
 i2 = HEAP16[i12 + (i1 * 36 | 0) + 10 >> 1] | 0;
 i11 = HEAP16[i12 + (i1 * 36 | 0) + 12 >> 1] | 0;
 i3 = HEAP16[i12 + (i1 * 36 | 0) + 16 >> 1] | 0;
 i4 = HEAP16[i12 + (i1 * 36 | 0) + 20 >> 1] | 0;
 i9 = HEAP32[i12 + (i1 * 36 | 0) + 24 >> 2] | 0;
 i10 = HEAP32[i12 + (i1 * 36 | 0) + 28 >> 2] | 0;
 i5 = i8 + 76 | 0;
 HEAP32[i5 >> 2] = HEAPU16[i12 + (i1 * 36 | 0) + 14 >> 1];
 i1 = i8 + 80 | 0;
 HEAP32[i1 >> 2] = i11 & 65535;
 HEAP32[i8 + 84 >> 2] = i10;
 _ft_glyphslot_set_bitmap(i8, i9);
 switch (i7 << 16 >> 16) {
 case 1:
  {
   HEAP8[i8 + 94 >> 0] = 1;
   break;
  }
 case 2:
  {
   HEAP8[i8 + 94 >> 0] = 3;
   break;
  }
 case 4:
  {
   HEAP8[i8 + 94 >> 0] = 4;
   break;
  }
 case 8:
  {
   HEAP8[i8 + 94 >> 0] = 2;
   HEAP16[i8 + 92 >> 1] = 256;
   break;
  }
 default:
  {}
 }
 HEAP32[i8 + 72 >> 2] = 1651078259;
 i10 = i3 << 16 >> 16;
 HEAP32[i8 + 100 >> 2] = i10;
 i11 = i4 << 16 >> 16;
 HEAP32[i8 + 104 >> 2] = i11;
 i12 = i8 + 24 | 0;
 HEAP32[i8 + 40 >> 2] = (i2 & 65535) << 6;
 HEAP32[i8 + 32 >> 2] = i10 << 6;
 HEAP32[i8 + 36 >> 2] = i11 << 6;
 HEAP32[i12 >> 2] = HEAP32[i1 >> 2] << 6;
 HEAP32[i8 + 28 >> 2] = HEAP32[i5 >> 2] << 6;
 _ft_synthesize_vertical_metrics(i12, (HEAPU16[(HEAP32[i6 >> 2] | 0) + 6 >> 1] | 0) << 6);
 i12 = 0;
 return i12 | 0;
}

function _cid_face_done(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 if (!i7) return;
 i8 = i7 + 140 | 0;
 i9 = i8 + 24 | 0;
 i10 = HEAP32[i7 + 100 >> 2] | 0;
 i11 = i7 + 316 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i6 = i8 + 160 | 0;
 if (i1 | 0) {
  i2 = HEAP32[i6 >> 2] | 0;
  if ((i2 | 0) > 0) {
   i5 = 0;
   do {
    i3 = i1 + (i5 << 3) + 4 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4) {
     _ft_mem_free(i10, HEAP32[i4 >> 2] | 0);
     HEAP32[HEAP32[i3 >> 2] >> 2] = 0;
     _ft_mem_free(i10, HEAP32[i3 >> 2] | 0);
     HEAP32[i3 >> 2] = 0;
     i2 = HEAP32[i6 >> 2] | 0;
     i1 = HEAP32[i11 >> 2] | 0;
    }
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) < (i2 | 0));
  }
  _ft_mem_free(i10, i1);
  HEAP32[i11 >> 2] = 0;
 }
 _ft_mem_free(i10, HEAP32[i9 >> 2] | 0);
 HEAP32[i9 >> 2] = 0;
 i11 = i8 + 28 | 0;
 _ft_mem_free(i10, HEAP32[i11 >> 2] | 0);
 HEAP32[i11 >> 2] = 0;
 i11 = i8 + 32 | 0;
 _ft_mem_free(i10, HEAP32[i11 >> 2] | 0);
 HEAP32[i11 >> 2] = 0;
 i11 = i8 + 36 | 0;
 _ft_mem_free(i10, HEAP32[i11 >> 2] | 0);
 HEAP32[i11 >> 2] = 0;
 i11 = i8 + 40 | 0;
 _ft_mem_free(i10, HEAP32[i11 >> 2] | 0);
 HEAP32[i11 >> 2] = 0;
 i11 = i8 + 164 | 0;
 _ft_mem_free(i10, HEAP32[i11 >> 2] | 0);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 _ft_mem_free(i10, HEAP32[i8 >> 2] | 0);
 HEAP32[i8 >> 2] = 0;
 i11 = i8 + 12 | 0;
 _ft_mem_free(i10, HEAP32[i11 >> 2] | 0);
 HEAP32[i11 >> 2] = 0;
 i11 = i8 + 16 | 0;
 _ft_mem_free(i10, HEAP32[i11 >> 2] | 0);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i7 + 20 >> 2] = 0;
 HEAP32[i7 + 24 >> 2] = 0;
 i11 = i7 + 324 | 0;
 _ft_mem_free(i10, HEAP32[i11 >> 2] | 0);
 HEAP32[i11 >> 2] = 0;
 i11 = i7 + 328 | 0;
 _ft_mem_free(i10, HEAP32[i11 >> 2] | 0);
 HEAP32[i11 >> 2] = 0;
 return;
}

function _PCF_Face_Init(i3, i7, i4, i1, i2) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 L1 : do if (_pcf_load_font(i3, i7) | 0) {
  _PCF_Face_Done(i7);
  i1 = i7 + 132 | 0;
  i2 = _FT_Stream_OpenGzip(i1, i3) | 0;
  do if ((i2 & 255 | 0) != 7) {
   if (i2 | 0) {
    i2 = _FT_Stream_OpenLZW(i1, i3) | 0;
    if (!((i2 | 0) == 0 & (i2 & 255 | 0) != 7)) break;
   }
   HEAP32[i7 + 172 >> 2] = i3;
   HEAP32[i7 + 104 >> 2] = i1;
   if (!(_pcf_load_font(i1, i7) | 0)) break L1;
  } while (0);
  _PCF_Face_Done(i7);
  i8 = 2;
  STACKTOP = i6;
  return i8 | 0;
 } while (0);
 if ((i4 | 0) > 0) {
  _PCF_Face_Done(i7);
  i8 = 6;
  STACKTOP = i6;
  return i8 | 0;
 }
 i1 = HEAP32[i7 + 180 >> 2] | 0;
 i2 = HEAP32[i7 + 176 >> 2] | 0;
 L15 : do if ((i1 | 0) != 0 & (i2 | 0) != 0) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 73:
  case 105:
   break;
  default:
   {
    i8 = 15;
    break L15;
   }
  }
  switch (HEAP8[i1 + 1 >> 0] | 0) {
  case 83:
  case 115:
   break;
  default:
   {
    i8 = 15;
    break L15;
   }
  }
  switch (HEAP8[i1 + 2 >> 0] | 0) {
  case 79:
  case 111:
   break;
  default:
   {
    i8 = 15;
    break L15;
   }
  }
  i1 = i1 + 3 | 0;
  if (_strcmp(i1, 281674) | 0) {
   if (_strcmp(i1, 281680) | 0) {
    i8 = 15;
    break;
   }
   if (_strcmp(i2, 281685) | 0) {
    i8 = 15;
    break;
   }
  }
  HEAP32[i5 >> 2] = i7;
  HEAP32[i5 + 4 >> 2] = 1970170211;
  HEAP16[i5 + 8 >> 1] = 3;
  HEAP16[i5 + 10 >> 1] = 1;
 } else i8 = 15; while (0);
 if ((i8 | 0) == 15) {
  HEAP32[i5 >> 2] = i7;
  i8 = i5 + 4 | 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
 }
 i8 = _FT_CMap_New(12916, 0, i5, 0) | 0;
 STACKTOP = i6;
 return i8 | 0;
}

function _Ins_DELTAP(i16, i1) {
 i16 = i16 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0;
 i17 = FUNCTION_TABLE_ii[HEAP32[i16 + 592 >> 2] & 63](i16) | 0;
 i12 = HEAP32[i1 >> 2] | 0;
 i5 = i16 + 28 | 0;
 if (!i12) {
  i17 = HEAP32[i5 >> 2] | 0;
  i18 = i16 + 32 | 0;
  HEAP32[i18 >> 2] = i17;
  return;
 }
 i13 = i16 + 24 | 0;
 i14 = i16 + 36 | 0;
 i15 = i16 + 44 | 0;
 i6 = i16 + 368 | 0;
 i7 = i16 + 332 | 0;
 i8 = i16 + 334 | 0;
 i9 = i16 + 584 | 0;
 i10 = i16 + 561 | 0;
 i11 = i16 + 12 | 0;
 i4 = 1;
 while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) < 2) break;
  i3 = i1 + -2 | 0;
  HEAP32[i5 >> 2] = i3;
  i19 = HEAP32[i13 >> 2] | 0;
  i1 = HEAP32[i19 + (i1 + -1 << 2) >> 2] | 0;
  i2 = i1 & 65535;
  i3 = HEAP32[i19 + (i3 << 2) >> 2] | 0;
  if ((i1 & 65535) >>> 0 < (HEAPU16[i15 >> 1] | 0) >>> 0) {
   i1 = i3 >>> 4 & 15;
   switch (HEAP8[i6 >> 0] | 0) {
   case 114:
    {
     i1 = i1 | 32;
     break;
    }
   case 113:
    {
     i1 = i1 | 16;
     break;
    }
   default:
    {}
   }
   if ((i17 | 0) == ((HEAPU16[i7 >> 1] | 0) + i1 | 0)) {
    i3 = i3 & 15;
    i19 = i3 + -8 | 0;
    FUNCTION_TABLE_viiii[HEAP32[i9 >> 2] & 31](i16, i14, i2, ((i19 | 0) > -1 ? i3 + -7 | 0 : i19) << 6 - (HEAPU16[i8 >> 1] | 0));
   }
  } else if (HEAP8[i10 >> 0] | 0) HEAP32[i11 >> 2] = 134;
  i4 = i4 + 1 | 0;
  if (i4 >>> 0 > i12 >>> 0) {
   i18 = 16;
   break;
  }
 }
 if ((i18 | 0) == 16) {
  i18 = HEAP32[i5 >> 2] | 0;
  i19 = i16 + 32 | 0;
  HEAP32[i19 >> 2] = i18;
  return;
 }
 if (HEAP8[i10 >> 0] | 0) HEAP32[i11 >> 2] = 129;
 HEAP32[i5 >> 2] = 0;
 i18 = HEAP32[i5 >> 2] | 0;
 i19 = i16 + 32 | 0;
 HEAP32[i19 >> 2] = i18;
 return;
}

function _cf2_getSeacComponent(i2, i1, i9) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i13 + 8 | 0;
 i10 = i13 + 4 | 0;
 i11 = i13;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 i6 = HEAP32[i2 + 4 >> 2] | 0;
 i7 = HEAP32[(HEAP32[i6 + 128 >> 2] | 0) + 48 >> 2] | 0;
 i5 = (i7 | 0) == 0;
 if (i5) {
  i2 = HEAP32[i2 + 76 >> 2] | 0;
  i4 = HEAP32[i2 + 1160 >> 2] | 0;
  if (i1 >>> 0 > 255 | (i4 | 0) == 0) {
   i12 = 18;
   STACKTOP = i13;
   return i12 | 0;
  }
  if (i1 >>> 0 < 256) i3 = HEAP16[114648 + (i1 << 1) >> 1] | 0; else i3 = 0;
  i2 = HEAP32[i2 + 12 >> 2] | 0;
  if (!i2) {
   i12 = 18;
   STACKTOP = i13;
   return i12 | 0;
  } else i1 = 0;
  while (1) {
   if ((HEAP16[i4 + (i1 << 1) >> 1] | 0) == i3 << 16 >> 16) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i2 >>> 0) {
    i1 = 18;
    i12 = 14;
    break;
   }
  }
  if ((i12 | 0) == 14) {
   STACKTOP = i13;
   return i1 | 0;
  }
  if ((i1 | 0) < 0) {
   i12 = 18;
   STACKTOP = i13;
   return i12 | 0;
  }
  if (i5) i1 = _cff_index_access_element((HEAP32[i6 + 656 >> 2] | 0) + 1176 | 0, i1, i10, i11) | 0; else i12 = 10;
 } else i12 = 10;
 if ((i12 | 0) == 10) {
  i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i7 >> 2] >> 2] & 127](HEAP32[i7 + 4 >> 2] | 0, i1, i8) | 0;
  HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i11 >> 2] = HEAP32[i8 + 4 >> 2];
 }
 if (i1 | 0) {
  i12 = i1;
  STACKTOP = i13;
  return i12 | 0;
 }
 i12 = HEAP32[i10 >> 2] | 0;
 HEAP32[i9 + 4 >> 2] = i12;
 HEAP32[i9 + 8 >> 2] = i12 + (HEAP32[i11 >> 2] | 0);
 HEAP32[i9 + 12 >> 2] = i12;
 i12 = 0;
 STACKTOP = i13;
 return i12 | 0;
}

function _tt_face_done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!i1) return;
 i7 = HEAP32[i1 + 100 >> 2] | 0;
 i3 = i1 + 104 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = HEAP32[i1 + 532 >> 2] | 0;
 i6 = i1 + 656 | 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 if (i2 | 0) FUNCTION_TABLE_vi[i2 & 127](HEAP32[i6 >> 2] | 0);
 if (i5 | 0) FUNCTION_TABLE_vi[HEAP32[i5 + 12 >> 2] & 127](i1);
 _FT_Stream_ReleaseFrame(HEAP32[i3 >> 2] | 0, i1 + 700 | 0);
 HEAP32[i1 + 696 >> 2] = 0;
 i3 = HEAP32[i3 >> 2] | 0;
 i6 = i1 + 720 | 0;
 _ft_mem_free(HEAP32[i3 + 28 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 _FT_Stream_ReleaseFrame(i3, i1 + 704 | 0);
 i3 = i1 + 648 | 0;
 _ft_mem_free(i7, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 HEAP32[i1 + 644 >> 2] = 0;
 _FT_Stream_ReleaseFrame(i4, i1 + 632 | 0);
 _FT_Stream_ReleaseFrame(i4, i1 + 640 | 0);
 HEAP32[i1 + 628 >> 2] = 0;
 HEAP32[i1 + 636 >> 2] = 0;
 i3 = i1 + 676 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 | 0) {
  i5 = i4 + 4 | 0;
  _ft_mem_free(i7, HEAP32[i5 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
  i5 = i4 + 8 | 0;
  _ft_mem_free(i7, HEAP32[i5 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
  i5 = i4 + 20 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  if (i1 | 0) {
   if (HEAP32[i4 >> 2] | 0) {
    i2 = 0;
    do {
     _ft_mem_free(i7, HEAP32[i1 + (i2 << 3) + 4 >> 2] | 0);
     i1 = HEAP32[i5 >> 2] | 0;
     HEAP32[i1 + (i2 << 3) + 4 >> 2] = 0;
     i2 = i2 + 1 | 0;
    } while (i2 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0);
   }
   _ft_mem_free(i7, i1);
   HEAP32[i5 >> 2] = 0;
  }
  i6 = i4 + 28 | 0;
  _ft_mem_free(i7, HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  i6 = i4 + 36 | 0;
  _ft_mem_free(i7, HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  _ft_mem_free(i7, i4);
 }
 HEAP32[i3 >> 2] = 0;
 return;
}

function _tt_cmap13_validate(i1, i10) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = i1 + 16 | 0;
 i3 = i10 + 160 | 0;
 if (i4 >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) _ft_validator_error(i10, 8);
 i2 = (HEAPU8[i1 + 5 >> 0] | 0) << 16 | (HEAPU8[i1 + 4 >> 0] | 0) << 24 | (HEAPU8[i1 + 6 >> 0] | 0) << 8 | (HEAPU8[i1 + 7 >> 0] | 0);
 i9 = (HEAPU8[i1 + 13 >> 0] | 0) << 16 | (HEAPU8[i1 + 12 >> 0] | 0) << 24 | (HEAPU8[i1 + 14 >> 0] | 0) << 8 | (HEAPU8[i1 + 15 >> 0] | 0);
 if (i2 >>> 0 < 16 ? 1 : i2 >>> 0 > ((HEAP32[i3 >> 2] | 0) - i1 | 0) >>> 0) _ft_validator_error(i10, 8);
 if ((((i2 + -16 | 0) >>> 0) / 12 | 0) >>> 0 < i9 >>> 0) _ft_validator_error(i10, 8);
 if (!i9) return 0;
 i7 = i10 + 164 | 0;
 i8 = i10 + 172 | 0;
 i2 = 0;
 i3 = 0;
 while (1) {
  i6 = (HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0);
  i5 = i3;
  i3 = (HEAPU8[i4 + 5 >> 0] | 0) << 16 | (HEAPU8[i4 + 4 >> 0] | 0) << 24 | (HEAPU8[i4 + 6 >> 0] | 0) << 8 | (HEAPU8[i4 + 7 >> 0] | 0);
  i1 = i4;
  i4 = i4 + 12 | 0;
  if (i6 >>> 0 > i3 >>> 0) {
   i1 = 9;
   break;
  }
  if (!((i2 | 0) == 0 | i6 >>> 0 > i5 >>> 0)) {
   i1 = 11;
   break;
  }
  if (HEAP32[i7 >> 2] | 0) if (((HEAPU8[i1 + 9 >> 0] | 0) << 16 | (HEAPU8[i1 + 8 >> 0] | 0) << 24 | (HEAPU8[i1 + 10 >> 0] | 0) << 8 | (HEAPU8[i1 + 11 >> 0] | 0)) >>> 0 >= (HEAP32[i8 >> 2] | 0) >>> 0) {
   i1 = 14;
   break;
  }
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i9 | 0)) {
   i1 = 16;
   break;
  }
 }
 if ((i1 | 0) == 9) _ft_validator_error(i10, 8); else if ((i1 | 0) == 11) _ft_validator_error(i10, 8); else if ((i1 | 0) == 14) _ft_validator_error(i10, 16); else if ((i1 | 0) == 16) return 0;
 return 0;
}

function _mbrtowc(i2, i4, i7, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i9;
 i6 = (i1 | 0) == 0 ? 368348 : i1;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (!i4) if (!i1) i1 = 0; else i8 = 17; else {
  i5 = (i2 | 0) == 0 ? i3 : i2;
  if (!i7) i1 = -2; else {
   if (!i1) {
    i1 = HEAP8[i4 >> 0] | 0;
    if (i1 << 24 >> 24 > -1) {
     HEAP32[i5 >> 2] = i1 & 255;
     i1 = i1 << 24 >> 24 != 0 & 1;
     break;
    }
    i3 = (___pthread_self_55() | 0) + 188 | 0;
    i1 = HEAP8[i4 >> 0] | 0;
    if (!(HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) {
     HEAP32[i5 >> 2] = i1 << 24 >> 24 & 57343;
     i1 = 1;
     break;
    }
    i1 = (i1 & 255) + -194 | 0;
    if (i1 >>> 0 > 50) {
     i8 = 17;
     break;
    }
    i1 = HEAP32[90796 + (i1 << 2) >> 2] | 0;
    i3 = i7 + -1 | 0;
    if (i3) {
     i4 = i4 + 1 | 0;
     i8 = 11;
    }
   } else {
    i3 = i7;
    i8 = 11;
   }
   L14 : do if ((i8 | 0) == 11) {
    i2 = HEAP8[i4 >> 0] | 0;
    i10 = (i2 & 255) >>> 3;
    if ((i10 + -16 | i10 + (i1 >> 26)) >>> 0 > 7) {
     i8 = 17;
     break L1;
    }
    while (1) {
     i4 = i4 + 1 | 0;
     i1 = (i2 & 255) + -128 | i1 << 6;
     i3 = i3 + -1 | 0;
     if ((i1 | 0) >= 0) break;
     if (!i3) break L14;
     i2 = HEAP8[i4 >> 0] | 0;
     if ((i2 & -64) << 24 >> 24 != -128) {
      i8 = 17;
      break L1;
     }
    }
    HEAP32[i6 >> 2] = 0;
    HEAP32[i5 >> 2] = i1;
    i1 = i7 - i3 | 0;
    break L1;
   } while (0);
   HEAP32[i6 >> 2] = i1;
   i1 = -2;
  }
 } while (0);
 if ((i8 | 0) == 17) {
  HEAP32[i6 >> 2] = 0;
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 84;
  i1 = -1;
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _cid_parse_font_matrix(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i10;
 i9 = HEAP32[i1 + 96 >> 2] | 0;
 if ((i9 | 0) <= -1) {
  STACKTOP = i10;
  return;
 }
 if ((i9 | 0) >= (HEAP32[i2 + 300 >> 2] | 0)) {
  STACKTOP = i10;
  return;
 }
 i7 = HEAP32[i2 + 304 >> 2] | 0;
 if ((FUNCTION_TABLE_iiiii[HEAP32[i1 + 52 >> 2] & 127](i1, 6, i8, 3) | 0) < 6) {
  STACKTOP = i10;
  return;
 }
 i6 = i8 + 12 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 if (!i1) {
  STACKTOP = i10;
  return;
 }
 i5 = (_FT_DivFix(1e3, i1) | 0) & 65535;
 HEAP16[i2 + 68 >> 1] = i5;
 if ((i1 | 0) == 65536) {
  i3 = i8 + 8 | 0;
  i4 = i8 + 16 | 0;
  i5 = i8 + 4 | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i8 + 20 >> 2] | 0;
 } else {
  i5 = _FT_DivFix(HEAP32[i8 >> 2] | 0, i1) | 0;
  HEAP32[i8 >> 2] = i5;
  i5 = i8 + 4 | 0;
  i3 = _FT_DivFix(HEAP32[i5 >> 2] | 0, i1) | 0;
  HEAP32[i5 >> 2] = i3;
  i3 = i8 + 8 | 0;
  i4 = _FT_DivFix(HEAP32[i3 >> 2] | 0, i1) | 0;
  HEAP32[i3 >> 2] = i4;
  i4 = i8 + 16 | 0;
  i11 = _FT_DivFix(HEAP32[i4 >> 2] | 0, i1) | 0;
  HEAP32[i4 >> 2] = i11;
  i11 = i8 + 20 | 0;
  i2 = _FT_DivFix(HEAP32[i11 >> 2] | 0, i1) | 0;
  HEAP32[i11 >> 2] = i2;
  i1 = HEAP32[i6 >> 2] >> 31 & -131072 | 65536;
  HEAP32[i6 >> 2] = i1;
 }
 HEAP32[i7 + (i9 * 252 | 0) + 216 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + (i9 * 252 | 0) + 224 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 + (i9 * 252 | 0) + 220 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i7 + (i9 * 252 | 0) + 228 >> 2] = i1;
 HEAP32[i7 + (i9 * 252 | 0) + 232 >> 2] = HEAP32[i4 >> 2] >> 16;
 HEAP32[i7 + (i9 * 252 | 0) + 236 >> 2] = i2 >> 16;
 STACKTOP = i10;
 return;
}

function _cff_size_request(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i10;
 i1 = HEAP32[i4 >> 2] | 0;
 do if (HEAP32[i1 + 8 >> 2] & 2) {
  if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 + 532 >> 2] | 0) + 104 >> 2] & 127](i1, i3, i2) | 0) {
   HEAP32[i4 + 44 >> 2] = -1;
   i1 = HEAP32[i4 >> 2] | 0;
   break;
  }
  _cff_size_select(i4, HEAP32[i2 >> 2] | 0) | 0;
  STACKTOP = i10;
  return 0;
 } while (0);
 _FT_Request_Metrics(i1, i3);
 i2 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i2 + 656 >> 2] | 0) + 2952 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  STACKTOP = i10;
  return 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  STACKTOP = i10;
  return 0;
 }
 i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i1) {
  STACKTOP = i10;
  return 0;
 }
 i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + 656 >> 2] | 0;
 i8 = HEAP32[i4 + 40 >> 2] | 0;
 i9 = HEAP32[i7 + 1392 >> 2] | 0;
 i5 = i1 + 4 | 0;
 i6 = i4 + 16 | 0;
 i4 = i4 + 20 | 0;
 FUNCTION_TABLE_viiiii[HEAP32[i5 >> 2] & 31](HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i4 >> 2] | 0, 0, 0);
 i1 = HEAP32[i7 + 1896 >> 2] | 0;
 if (!i1) {
  STACKTOP = i10;
  return 0;
 }
 do {
  i1 = i1 + -1 | 0;
  i3 = HEAP32[(HEAP32[i7 + 1900 + (i1 << 2) >> 2] | 0) + 68 >> 2] | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  if ((i9 | 0) == (i3 | 0)) i3 = HEAP32[i4 >> 2] | 0; else {
   i2 = _FT_MulDiv(i2, i9, i3) | 0;
   i3 = _FT_MulDiv(HEAP32[i4 >> 2] | 0, i9, i3) | 0;
  }
  FUNCTION_TABLE_viiiii[HEAP32[i5 >> 2] & 31](HEAP32[i8 + 4 + (i1 << 2) >> 2] | 0, i2, i3, 0, 0);
 } while ((i1 | 0) != 0);
 STACKTOP = i10;
 return 0;
}

function _tt_cmap2_char_next(i1, i11) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 i2 = (HEAP32[i11 >> 2] | 0) + 1 | 0;
 if (i2 >>> 0 >= 65536) {
  i10 = 0;
  i12 = 0;
  HEAP32[i11 >> 2] = i10;
  return i12 | 0;
 }
 i10 = i1 + 6 | 0;
 i9 = i1 + 518 | 0;
 L4 : while (1) {
  i1 = i2 >>> 8;
  if (!i1) {
   i8 = i10 + (i2 << 1 & 510) | 0;
   if (!((HEAPU8[i8 >> 0] | 0) << 8 | (HEAPU8[i8 + 1 >> 0] | 0))) {
    i1 = i9;
    i12 = 6;
   }
  } else {
   i1 = i10 + (i1 << 1) | 0;
   i1 = HEAP8[i1 + 1 >> 0] & -8 & 255 | (HEAPU8[i1 >> 0] | 0) << 8;
   if (i1) {
    i1 = i9 + i1 | 0;
    i12 = 6;
   }
  }
  if ((i12 | 0) == 6) {
   i12 = 0;
   i4 = (HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0);
   i7 = (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
   i6 = i1 + 6 | 0;
   i8 = (HEAPU8[i1 + 4 >> 0] | 0) << 8 | (HEAPU8[i1 + 5 >> 0] | 0);
   i5 = (HEAPU8[i6 >> 0] | 0) << 8 | (HEAPU8[i1 + 7 >> 0] | 0);
   i1 = i2 & 255;
   if (i5) {
    i13 = i1 >>> 0 < i4 >>> 0;
    i3 = i13 ? 0 : i1 - i4 | 0;
    i2 = (i13 ? i4 : i1) + (i2 & -256) | 0;
    if (i3 >>> 0 < i7 >>> 0) {
     i4 = i6 + (i5 + (i3 << 1)) | 0;
     do {
      i1 = (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0);
      i4 = i4 + 2 | 0;
      if (i1 | 0) {
       i1 = i1 + i8 & 65535;
       if (i1 | 0) {
        i12 = 13;
        break L4;
       }
      }
      i3 = i3 + 1 | 0;
      i2 = i2 + 1 | 0;
     } while (i3 >>> 0 < i7 >>> 0);
    }
   }
  }
  i2 = i2 + 256 & -256;
  if (i2 >>> 0 >= 65536) {
   i2 = 0;
   i1 = 0;
   i12 = 13;
   break;
  }
 }
 if ((i12 | 0) == 13) {
  HEAP32[i11 >> 2] = i2;
  return i1 | 0;
 }
 return 0;
}

function _XML_ParseBuffer(i7, i2, i3) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i6 = i7 + 480 | 0;
 switch (HEAP32[i6 >> 2] | 0) {
 case 3:
  {
   HEAP32[i7 + 284 >> 2] = 33;
   i7 = 0;
   return i7 | 0;
  }
 case 2:
  {
   HEAP32[i7 + 284 >> 2] = 36;
   i7 = 0;
   return i7 | 0;
  }
 case 0:
  {
   if (!(HEAP32[i7 + 476 >> 2] | 0)) {
    i1 = i7 + 496 | 0;
    if (!(HEAP32[i1 >> 2] | 0)) {
     i5 = _time(0) | 0;
     _srand(((i5 | 0) == -1 & 1) + i5 | 0);
     i5 = _rand() | 0;
     HEAP32[i1 >> 2] = i5;
    }
    if (HEAP8[i7 + 236 >> 0] | 0) if (!((_setContext(i7, 345598) | 0) << 24 >> 24)) {
     HEAP32[i7 + 284 >> 2] = 1;
     i7 = 0;
     return i7 | 0;
    }
   }
   break;
  }
 default:
  {}
 }
 HEAP32[i6 >> 2] = 1;
 i4 = i7 + 24 | 0;
 i9 = HEAP32[i4 >> 2] | 0;
 i5 = i7 + 296 | 0;
 HEAP32[i5 >> 2] = i9;
 i1 = i7 + 28 | 0;
 i8 = (HEAP32[i1 >> 2] | 0) + i2 | 0;
 HEAP32[i1 >> 2] = i8;
 HEAP32[i7 + 40 >> 2] = i8;
 i1 = i7 + 36 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i2;
 HEAP8[i7 + 484 >> 0] = i3;
 i1 = i7 + 280 | 0;
 i2 = FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i7, i9, i8, i4) | 0;
 HEAP32[i7 + 284 >> 2] = i2;
 if (i2 | 0) {
  HEAP32[i7 + 292 >> 2] = HEAP32[i7 + 288 >> 2];
  HEAP32[i1 >> 2] = 83;
  i9 = 0;
  return i9 | 0;
 }
 switch (HEAP32[i6 >> 2] | 0) {
 case 3:
  {
   i1 = 2;
   break;
  }
 case 1:
 case 0:
  {
   if (!i3) i1 = 1; else {
    HEAP32[i6 >> 2] = 2;
    i9 = 1;
    return i9 | 0;
   }
   break;
  }
 default:
  i1 = 1;
 }
 i9 = HEAP32[i7 + 144 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[i9 + 52 >> 2] & 31](i9, HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0, i7 + 408 | 0);
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 i9 = i1;
 return i9 | 0;
}

function _tt_cmap4_char_next(i11, i12) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if (i1 >>> 0 > 65534) {
  i13 = 0;
  return i13 | 0;
 }
 if (HEAP32[i11 + 20 >> 2] & 1 | 0) {
  i13 = _tt_cmap4_char_map_linear(i11, i12, 1) | 0;
  return i13 | 0;
 }
 i13 = i11 + 24 | 0;
 if ((i1 | 0) != (HEAP32[i13 >> 2] | 0)) {
  i13 = _tt_cmap4_char_map_binary(i11, i12, 1) | 0;
  return i13 | 0;
 }
 i3 = i1 + 1 | 0;
 i6 = i11 + 40 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i7 = i11 + 52 | 0;
 i8 = i11 + 44 | 0;
 i9 = i11 + 48 | 0;
 i10 = i11 + 36 | 0;
 i3 = i3 >>> 0 < i2 >>> 0 ? i2 : i3;
 L12 : while (1) {
  i1 = HEAP32[i7 >> 2] | 0;
  i4 = HEAP32[i8 >> 2] | 0;
  i5 = HEAP32[i9 >> 2] | 0;
  L14 : do if (i3 >>> 0 <= i4 >>> 0) {
   if (!i1) while (1) {
    i1 = i3 + i5 & 65535;
    if (i1 | 0) {
     i2 = 17;
     break L12;
    }
    i3 = i3 + 1 | 0;
    if (i3 >>> 0 > i4 >>> 0) break L14;
   }
   i2 = i1 + (i3 - i2 << 1) | 0;
   do {
    i1 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
    i2 = i2 + 2 | 0;
    if (i1 | 0) {
     i1 = i1 + i5 & 65535;
     if (i1 | 0) {
      i2 = 17;
      break L12;
     }
    }
    i3 = i3 + 1 | 0;
   } while (i3 >>> 0 <= i4 >>> 0);
  } while (0);
  if ((_tt_cmap4_set_range(i11, (HEAP32[i10 >> 2] | 0) + 1 | 0) | 0) < 0) {
   i2 = 16;
   break;
  }
  i2 = HEAP32[i6 >> 2] | 0;
  i3 = i3 >>> 0 < i2 >>> 0 ? i2 : i3;
 }
 if ((i2 | 0) == 16) {
  HEAP32[i13 >> 2] = -1;
  HEAP32[i11 + 28 >> 2] = 0;
  i13 = 0;
  return i13 | 0;
 } else if ((i2 | 0) == 17) {
  HEAP32[i13 >> 2] = i3;
  HEAP32[i11 + 28 >> 2] = i1;
  HEAP32[i12 >> 2] = i3;
  i13 = i1;
  return i13 | 0;
 }
 return 0;
}

function _af_cjk_hints_compute_blue_edges(i1, i11, i13) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i2 = HEAP32[i1 + 44 + (i13 * 1468 | 0) + 20 >> 2] | 0;
 i12 = HEAP32[i1 + 44 + (i13 * 1468 | 0) + 12 >> 2] | 0;
 i14 = i2 + (i12 * 48 | 0) | 0;
 i15 = HEAP32[i11 + 44 + (i13 * 1572 | 0) >> 2] | 0;
 i10 = _FT_MulFix(((HEAP32[i11 + 40 >> 2] | 0) >>> 0) / 40 | 0, i15) | 0;
 i10 = (i10 | 0) < 32 ? i10 : 32;
 if ((i12 | 0) <= 0) return;
 i12 = i11 + 44 + (i13 * 1572 | 0) + 216 | 0;
 i9 = i1 + 44 + (i13 * 1468 | 0) + 24 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i1 = i3;
 do {
  if (!i1) i1 = 0; else {
   i8 = i2 + 13 | 0;
   i7 = 0;
   i1 = i10;
   i4 = 0;
   do {
    i5 = i11 + 44 + (i13 * 1572 | 0) + 220 + (i7 * 28 | 0) | 0;
    i6 = HEAP32[i11 + 44 + (i13 * 1572 | 0) + 220 + (i7 * 28 | 0) + 24 >> 2] | 0;
    if (i6 & 1) if ((i6 & 2 | 0) != 0 ^ (HEAP8[i8 >> 0] | 0) == (HEAP32[i9 >> 2] | 0)) {
     i6 = HEAP16[i2 >> 1] | 0;
     i17 = i6 - (HEAP32[i5 >> 2] | 0) | 0;
     i3 = i11 + 44 + (i13 * 1572 | 0) + 220 + (i7 * 28 | 0) + 12 | 0;
     i16 = i6 - (HEAP32[i3 >> 2] | 0) | 0;
     i3 = (((i17 | 0) < 0 ? 0 - i17 | 0 : i17) | 0) > (((i16 | 0) < 0 ? 0 - i16 | 0 : i16) | 0) ? i3 : i5;
     i5 = i6 - (HEAP32[i3 >> 2] | 0) | 0;
     i5 = _FT_MulFix((i5 | 0) < 0 ? 0 - i5 | 0 : i5, i15) | 0;
     i6 = (i5 | 0) < (i1 | 0);
     i1 = i6 ? i5 : i1;
     i4 = i6 ? i3 : i4;
     i3 = HEAP32[i12 >> 2] | 0;
    }
    i7 = i7 + 1 | 0;
   } while (i7 >>> 0 < i3 >>> 0);
   if (!i4) i1 = i3; else {
    HEAP32[i2 + 20 >> 2] = i4;
    i1 = i3;
   }
  }
  i2 = i2 + 48 | 0;
 } while (i2 >>> 0 < i14 >>> 0);
 return;
}

function _cf2_glyphpath_lineTo(i6, i7, i11) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i14 + 12 | 0;
 i4 = i14 + 8 | 0;
 i12 = i14;
 i13 = i6 + 11676 | 0;
 if (!(HEAP8[(HEAP32[i13 >> 2] | 0) + 5 >> 0] | 0)) i10 = 0; else i10 = (HEAP8[i6 + 11665 >> 0] | 0) == 0 & 1;
 i8 = i6 + 11720 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i9 = i6 + 11724 | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 if ((i1 | 0) == (i7 | 0)) if (!(i10 << 24 >> 24 != 0 | (i2 | 0) != (i11 | 0))) {
  STACKTOP = i14;
  return;
 }
 _cf2_glyphpath_computeOffset(i6, i1, i2, i7, i11, i3, i4);
 i2 = HEAP32[i3 >> 2] | 0;
 i3 = i2 + (HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i12 >> 2] = i3;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = i5 + (HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i12 + 4 >> 2] = i1;
 i4 = i2 + i7 | 0;
 i5 = i5 + i11 | 0;
 i2 = i6 + 11667 | 0;
 if (HEAP8[i2 >> 0] | 0) {
  _cf2_glyphpath_pushMove(i6, i3, i1);
  HEAP8[i2 >> 0] = 0;
  HEAP8[i6 + 11664 >> 0] = 1;
  i3 = i6 + 11712 | 0;
  HEAP32[i3 >> 2] = i4;
  HEAP32[i3 + 4 >> 2] = i5;
 }
 i1 = i6 + 11744 | 0;
 if (HEAP8[i1 >> 0] | 0) _cf2_glyphpath_pushPrevElem(i6, i6 + 8 | 0, i12, i4, i5, 0);
 HEAP8[i1 >> 0] = 1;
 HEAP32[i6 + 11748 >> 2] = 2;
 i2 = i12;
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 i12 = i6 + 11752 | 0;
 HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i12 + 4 >> 2] = i3;
 i12 = i6 + 11760 | 0;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i12 + 4 >> 2] = i5;
 if (i10 << 24 >> 24) _cf2_hintmap_build(i6 + 8 | 0, HEAP32[i6 + 11668 >> 2] | 0, HEAP32[i6 + 11672 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i6 + 11680 >> 2] | 0, 0);
 HEAP32[i8 >> 2] = i7;
 HEAP32[i9 >> 2] = i11;
 STACKTOP = i14;
 return;
}

function _ass_pre_blur3_vert_c(i2, i3, i18, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = i1 + 6 | 0;
 i15 = i1 << 4;
 if (!i18) return;
 if (!i17) {
  i1 = 0;
  do i1 = i1 + 16 | 0; while (i1 >>> 0 < i18 >>> 0);
  return;
 }
 i16 = i15 + 96 | 0;
 i1 = 0;
 while (1) {
  i4 = 0;
  i5 = 0;
  i7 = i2;
  while (1) {
   i8 = i4 + -96 | 0;
   i8 = i8 >>> 0 < i15 >>> 0 ? i3 + (i8 << 1) | 0 : 368376;
   i9 = i4 + -80 | 0;
   i9 = i9 >>> 0 < i15 >>> 0 ? i3 + (i9 << 1) | 0 : 368376;
   i10 = i4 + -64 | 0;
   i10 = i10 >>> 0 < i15 >>> 0 ? i3 + (i10 << 1) | 0 : 368376;
   i11 = i4 + -48 | 0;
   i11 = i11 >>> 0 < i15 >>> 0 ? i3 + (i11 << 1) | 0 : 368376;
   i12 = i4 + -32 | 0;
   i12 = i12 >>> 0 < i15 >>> 0 ? i3 + (i12 << 1) | 0 : 368376;
   i13 = i4 + -16 | 0;
   i13 = i13 >>> 0 < i15 >>> 0 ? i3 + (i13 << 1) | 0 : 368376;
   i14 = i4 >>> 0 < i15 >>> 0 ? i3 + (i4 << 1) | 0 : 368376;
   i6 = 0;
   do {
    HEAP16[i7 + (i6 << 1) >> 1] = (((HEAPU16[i11 + (i6 << 1) >> 1] | 0) * 20 | 0) + 32 + (((HEAPU16[i12 + (i6 << 1) >> 1] | 0) + (HEAPU16[i10 + (i6 << 1) >> 1] | 0) & 65535) * 15 | 0) + (((HEAPU16[i13 + (i6 << 1) >> 1] | 0) + (HEAPU16[i9 + (i6 << 1) >> 1] | 0) & 65535) * 6 | 0) + ((HEAPU16[i14 + (i6 << 1) >> 1] | 0) + (HEAPU16[i8 + (i6 << 1) >> 1] | 0) & 65535) | 0) >>> 6;
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != 16);
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i17 | 0)) break; else {
    i4 = i4 + 16 | 0;
    i7 = i7 + 32 | 0;
   }
  }
  i1 = i1 + 16 | 0;
  if (i1 >>> 0 >= i18 >>> 0) break; else {
   i2 = i2 + (i16 << 1) | 0;
   i3 = i3 + (i15 << 1) | 0;
  }
 }
 return;
}

function _normal_sameName(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i5 = i1 + 76 | 0;
 L1 : while (1) {
  i4 = HEAP8[i3 >> 0] | 0;
  switch (HEAP8[i5 + (i4 & 255) >> 0] | 0) {
  case 7:
   {
    i6 = 3;
    break;
   }
  case 6:
   {
    i1 = i4;
    i6 = 5;
    break;
   }
  case 5:
   {
    i1 = i4;
    break;
   }
  case 27:
  case 26:
  case 25:
  case 24:
  case 23:
  case 22:
  case 29:
   if ((HEAP8[i2 >> 0] | 0) == i4 << 24 >> 24) {
    i2 = i2 + 1 | 0;
    i3 = i3 + 1 | 0;
    continue L1;
   } else {
    i1 = 0;
    i6 = 13;
    break L1;
   }
  default:
   {
    i6 = 10;
    break L1;
   }
  }
  if ((i6 | 0) == 3) {
   i1 = i3 + 1 | 0;
   if (i4 << 24 >> 24 != (HEAP8[i2 >> 0] | 0)) {
    i1 = 0;
    i6 = 13;
    break;
   }
   i2 = i2 + 1 | 0;
   i3 = i1;
   i1 = HEAP8[i1 >> 0] | 0;
   i6 = 5;
  }
  if ((i6 | 0) == 5) {
   i6 = 0;
   i4 = i3 + 1 | 0;
   if (i1 << 24 >> 24 != (HEAP8[i2 >> 0] | 0)) {
    i1 = 0;
    i6 = 13;
    break;
   }
   i2 = i2 + 1 | 0;
   i3 = i4;
   i1 = HEAP8[i4 >> 0] | 0;
  }
  if (i1 << 24 >> 24 != (HEAP8[i2 >> 0] | 0)) {
   i1 = 0;
   i6 = 13;
   break;
  }
  if ((HEAP8[i3 + 1 >> 0] | 0) == (HEAP8[i2 + 1 >> 0] | 0)) {
   i2 = i2 + 2 | 0;
   i3 = i3 + 2 | 0;
  } else {
   i1 = 0;
   i6 = 13;
   break;
  }
 }
 if ((i6 | 0) == 10) {
  i1 = HEAP8[i2 >> 0] | 0;
  if (i4 << 24 >> 24 == i1 << 24 >> 24) {
   i6 = 1;
   return i6 | 0;
  }
  switch (HEAP8[i5 + (i1 & 255) >> 0] | 0) {
  case 27:
  case 26:
  case 25:
  case 24:
  case 23:
  case 22:
  case 29:
  case 7:
  case 6:
  case 5:
   {
    i6 = 0;
    return i6 | 0;
   }
  default:
   {}
  }
  i6 = 1;
  return i6 | 0;
 } else if ((i6 | 0) == 13) return i1 | 0;
 return 0;
}

function _sub_recode(i13, i2, i7, i1) {
 i13 = i13 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i14 = i15 + 24 | 0;
 i12 = i15 + 16 | 0;
 i10 = i15;
 i11 = i15 + 36 | 0;
 i8 = i15 + 32 | 0;
 i9 = i15 + 28 | 0;
 if (!i1) ___assert_fail(357218, 355285, 983, 357227);
 i6 = _iconv_open(357238, i1) | 0;
 if ((i6 | 0) == (-1 | 0)) {
  _ass_msg(i13, 1, 357268, i15 + 8 | 0);
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 _ass_msg(i13, 6, 357244, i10);
 HEAP32[i10 >> 2] = i7;
 HEAP32[i11 >> 2] = i7 + -1;
 i1 = _malloc(i7) | 0;
 do if (!i1) i1 = 0; else {
  HEAP32[i8 >> 2] = i2;
  HEAP32[i9 >> 2] = i1;
  i2 = 0;
  i5 = i7;
  L10 : while (1) {
   while (1) {
    if (!(HEAP32[i10 >> 2] | 0)) {
     i3 = _iconv(i6, 0, 0, i9, i11) | 0;
     i2 = 1;
    } else i3 = _iconv(i6, i8, i10, i9, i11) | 0;
    if ((i3 | 0) == -1) break;
    if (!i2) i2 = 0; else {
     i2 = 18;
     break L10;
    }
   }
   i4 = ___errno_location() | 0;
   if ((HEAP32[i4 >> 2] | 0) != 7) {
    i2 = 16;
    break;
   }
   i4 = HEAP32[i9 >> 2] | 0;
   i5 = i5 + i7 | 0;
   i3 = _realloc(i1, i5) | 0;
   if (!i3) {
    i2 = 15;
    break;
   }
   HEAP32[i9 >> 2] = i3 + (i4 - i1);
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i7;
   i1 = i3;
  }
  if ((i2 | 0) == 15) {
   _free(i1);
   i1 = 0;
   break;
  } else if ((i2 | 0) == 16) {
   _ass_msg(i13, 2, 357299, i12);
   _free(i1);
   i1 = 0;
   break;
  } else if ((i2 | 0) == 18) {
   HEAP8[i1 + (i5 + -1 - (HEAP32[i11 >> 2] | 0)) >> 0] = 0;
   break;
  }
 } while (0);
 _ass_msg(i13, 6, 357319, i14);
 i14 = i1;
 STACKTOP = i15;
 return i14 | 0;
}

function _t1_decoder_init(i4, i5, i3, i2, i6, i7, i8, i9, i10) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0;
 _memset(i4 | 0, 0, 1500) | 0;
 i1 = _ft_module_get_service(HEAP32[i5 + 96 >> 2] | 0, 284871) | 0;
 if (!i1) {
  i10 = 7;
  return i10 | 0;
 }
 HEAP32[i4 + 1348 >> 2] = i1;
 HEAP32[i4 + 64 >> 2] = 0;
 HEAP8[i4 + 68 >> 0] = 1;
 HEAP32[i4 + 4 >> 2] = i5;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 >> 2] = HEAP32[i5 + 100 >> 2];
 if (i2 | 0) {
  i2 = i2 + 156 | 0;
  i1 = HEAP32[HEAP32[i2 >> 2] >> 2] | 0;
  HEAP32[i4 + 12 >> 2] = i1;
  HEAP32[i4 + 16 >> 2] = i1 + 20;
  HEAP32[i4 + 20 >> 2] = i1 + 56;
  _FT_GlyphLoader_Rewind(i1);
  HEAP32[i4 + 76 >> 2] = HEAP32[i3 + 40 >> 2];
  i1 = i4 + 72 | 0;
  HEAP32[i1 >> 2] = 0;
  if (i8 << 24 >> 24) HEAP32[i1 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2];
 }
 i3 = i4 + 24 | 0;
 i8 = i4 + 80 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i8 >> 2] = HEAP32[6049];
 HEAP32[i8 + 4 >> 2] = HEAP32[6050];
 HEAP32[i8 + 8 >> 2] = HEAP32[6051];
 HEAP32[i8 + 12 >> 2] = HEAP32[6052];
 HEAP32[i8 + 16 >> 2] = HEAP32[6053];
 HEAP32[i8 + 20 >> 2] = HEAP32[6054];
 HEAP32[i8 + 24 >> 2] = HEAP32[6055];
 HEAP32[i8 + 28 >> 2] = HEAP32[6056];
 HEAP32[i4 + 1352 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i4 + 1356 >> 2] = i6;
 HEAP32[i4 + 1468 >> 2] = i9;
 HEAP32[i4 + 1464 >> 2] = i7;
 HEAP32[i4 + 1472 >> 2] = i10;
 i10 = i4 + 1476 | 0;
 HEAP32[i10 >> 2] = HEAP32[6057];
 HEAP32[i10 + 4 >> 2] = HEAP32[6058];
 HEAP32[i10 + 8 >> 2] = HEAP32[6059];
 i10 = 0;
 return i10 | 0;
}

function ___stdio_write(i7, i2, i1) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i10 = i12 + 16 | 0;
 i5 = i12;
 i4 = i12 + 32 | 0;
 i8 = i7 + 28 | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 HEAP32[i4 >> 2] = i3;
 i9 = i7 + 20 | 0;
 i3 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 HEAP32[i4 + 4 >> 2] = i3;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 + 12 >> 2] = i1;
 i3 = i3 + i1 | 0;
 i6 = i7 + 60 | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP32[i5 + 8 >> 2] = 2;
 i5 = ___syscall_ret(___syscall146(146, i5 | 0) | 0) | 0;
 L1 : do if ((i3 | 0) == (i5 | 0)) i11 = 3; else {
  i2 = 2;
  while (1) {
   if ((i5 | 0) < 0) break;
   i3 = i3 - i5 | 0;
   i14 = HEAP32[i4 + 4 >> 2] | 0;
   i13 = i5 >>> 0 > i14 >>> 0;
   i4 = i13 ? i4 + 8 | 0 : i4;
   i2 = (i13 << 31 >> 31) + i2 | 0;
   i14 = i5 - (i13 ? i14 : 0) | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i14;
   i13 = i4 + 4 | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - i14;
   HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i10 + 4 >> 2] = i4;
   HEAP32[i10 + 8 >> 2] = i2;
   i5 = ___syscall_ret(___syscall146(146, i10 | 0) | 0) | 0;
   if ((i3 | 0) == (i5 | 0)) {
    i11 = 3;
    break L1;
   }
  }
  HEAP32[i7 + 16 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 32;
  if ((i2 | 0) == 2) i1 = 0; else i1 = i1 - (HEAP32[i4 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((i11 | 0) == 3) {
  i14 = HEAP32[i7 + 44 >> 2] | 0;
  HEAP32[i7 + 16 >> 2] = i14 + (HEAP32[i7 + 48 >> 2] | 0);
  HEAP32[i8 >> 2] = i14;
  HEAP32[i9 >> 2] = i14;
 }
 STACKTOP = i12;
 return i1 | 0;
}

function _tt_face_get_metrics(i2, i1, i4, i7, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i3 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10;
 i9 = HEAP32[i2 + 104 >> 2] | 0;
 i1 = i1 << 24 >> 24 == 0;
 i3 = HEAP32[(i1 ? i2 + 784 | 0 : i2 + 788 | 0) >> 2] | 0;
 i5 = (HEAP32[(i1 ? i2 + 684 | 0 : i2 + 692 | 0) >> 2] | 0) + i3 | 0;
 i2 = HEAP16[(i1 ? i2 + 216 | 0 : i2 + 296 | 0) + 34 >> 1] | 0;
 i1 = i2 & 65535;
 do if (i2 << 16 >> 16) {
  if (i1 >>> 0 > i4 >>> 0) {
   i1 = i3 + (i4 << 2) | 0;
   if ((i1 + 4 | 0) >>> 0 > i5 >>> 0) break;
   i5 = _FT_Stream_Seek(i9, i1) | 0;
   HEAP32[i8 >> 2] = i5;
   if (i5 | 0) break;
   i5 = _FT_Stream_ReadUShort(i9, i8) | 0;
   HEAP16[i6 >> 1] = i5;
   if (HEAP32[i8 >> 2] | 0) break;
   i9 = _FT_Stream_ReadUShort(i9, i8) | 0;
   HEAP16[i7 >> 1] = i9;
   if (HEAP32[i8 >> 2] | 0) break;
   STACKTOP = i10;
   return;
  }
  i11 = i1 << 2;
  i2 = i3 + -4 + i11 | 0;
  if ((i11 + i3 | 0) >>> 0 <= i5 >>> 0) {
   i11 = _FT_Stream_Seek(i9, i2) | 0;
   HEAP32[i8 >> 2] = i11;
   if (!i11) {
    i11 = _FT_Stream_ReadUShort(i9, i8) | 0;
    HEAP16[i6 >> 1] = i11;
    if (!(HEAP32[i8 >> 2] | 0)) {
     i1 = (i4 - i1 << 1) + 4 + i2 | 0;
     if ((i1 + 2 | 0) >>> 0 > i5 >>> 0) {
      HEAP16[i7 >> 1] = 0;
      STACKTOP = i10;
      return;
     }
     i11 = _FT_Stream_Seek(i9, i1) | 0;
     HEAP32[i8 >> 2] = i11;
     if (i11 | 0) {
      STACKTOP = i10;
      return;
     }
     i11 = _FT_Stream_ReadUShort(i9, i8) | 0;
     HEAP16[i7 >> 1] = i11;
     STACKTOP = i10;
     return;
    }
   }
  }
 } while (0);
 HEAP16[i7 >> 1] = 0;
 HEAP16[i6 >> 1] = 0;
 STACKTOP = i10;
 return;
}

function _FcConfigSetCurrent(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = (i1 | 0) == 0;
 i7 = i1;
 i5 = i1 + 52 | 0;
 i6 = i1 + 8 | 0;
 L1 : do if (i8) {
  while (1) {
   i2 = HEAP32[91920] | 0;
   if (!i2) {
    i1 = 1;
    break;
   }
   i3 = i2;
   i4 = HEAP32[91920] | 0;
   if ((i4 | 0) == (i3 | 0)) HEAP32[91920] = i7;
   if ((i4 | 0) == (i3 | 0)) {
    i3 = i2;
    break L1;
   }
  }
  return i1 | 0;
 } else {
  while (1) {
   i3 = HEAP32[91920] | 0;
   if ((i3 | 0) == (i1 | 0)) {
    i1 = 1;
    i9 = 21;
    break;
   }
   if (!(HEAP32[i5 >> 2] | 0)) {
    i2 = _FcFontSetCreate() | 0;
    if (!i2) {
     i1 = 0;
     i9 = 21;
     break;
    }
    i4 = HEAP32[i5 >> 2] | 0;
    if (i4 | 0) _FcFontSetDestroy(i4);
    HEAP32[i5 >> 2] = i2;
    if (!(_FcConfigAddDirList(i1, 0, HEAP32[i6 >> 2] | 0) | 0)) {
     i1 = 0;
     i9 = 21;
     break;
    }
    if (HEAP32[91917] & 8 | 0) _FcFontSetPrint(i2);
   }
   i2 = i3;
   i4 = HEAP32[91920] | 0;
   if ((i4 | 0) == (i2 | 0)) HEAP32[91920] = i7;
   if ((i4 | 0) == (i2 | 0)) break L1;
  }
  if ((i9 | 0) == 21) return i1 | 0;
 } while (0);
 L23 : do if (i8) {
  i1 = HEAP32[91920] | 0;
  if (!i1) {
   while (1) {
    i1 = _FcInitLoadConfigAndFonts() | 0;
    i2 = HEAP32[91920] | 0;
    if (!i2) HEAP32[91920] = i1;
    if (!i2) break;
    _FcConfigDestroy(i1);
    i1 = HEAP32[91920] | 0;
    if (i1 | 0) {
     i9 = 18;
     break L23;
    }
   }
   if (i1 | 0) i9 = 18;
  } else i9 = 18;
 } else i9 = 18; while (0);
 if ((i9 | 0) == 18) {
  i9 = i1 + 68 | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if (!i3) {
  i9 = 1;
  return i9 | 0;
 }
 _FcConfigDestroy(i3);
 i9 = 1;
 return i9 | 0;
}

function _t1_builder_start_point(i2, i7, i8) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = i2 + 64 | 0;
 if ((HEAP32[i1 >> 2] | 0) == 3) {
  i8 = 0;
  return i8 | 0;
 }
 HEAP32[i1 >> 2] = 3;
 i5 = i2 + 20 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if (!i3) {
  i8 = 3;
  return i8 | 0;
 }
 i6 = i2 + 68 | 0;
 if (!(HEAP8[i6 >> 0] | 0)) {
  i1 = i2 + 12 | 0;
  i2 = i3;
  i4 = 9;
 } else {
  i1 = i2 + 12 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (((HEAP16[i2 + 20 >> 1] | 0) + 1 + (HEAP16[i2 + 56 >> 1] | 0) | 0) >>> 0 > (HEAP32[i2 + 8 >> 2] | 0) >>> 0) {
   i2 = _FT_GlyphLoader_CheckPoints(i2, 0, 1) | 0;
   if (i2 | 0) {
    i8 = i2;
    return i8 | 0;
   }
  }
  i2 = HEAP16[i3 >> 1] | 0;
  if (i2 << 16 >> 16 > 0) {
   HEAP16[(HEAP32[i3 + 12 >> 2] | 0) + ((i2 << 16 >> 16) + -1 << 1) >> 1] = (HEAPU16[i3 + 2 >> 1] | 0) + 65535;
   i2 = i3;
   i4 = 9;
  }
 }
 if ((i4 | 0) == 9) {
  i3 = i2;
  i2 = HEAP16[i2 >> 1] | 0;
 }
 HEAP16[i3 >> 1] = i2 + 1 << 16 >> 16;
 i1 = HEAP32[i1 >> 2] | 0;
 if (((HEAP16[i1 + 22 >> 1] | 0) + 1 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
  i1 = _FT_GlyphLoader_CheckPoints(i1, 1, 0) | 0;
  if (i1 | 0) {
   i8 = i1;
   return i8 | 0;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 if (!(HEAP8[i6 >> 0] | 0)) i1 = i1 + 2 | 0; else {
  i4 = HEAP32[i1 + 4 >> 2] | 0;
  i6 = i1 + 2 | 0;
  i5 = HEAP16[i6 >> 1] | 0;
  i1 = (HEAP32[i1 + 8 >> 2] | 0) + i5 | 0;
  i7 = (_FT_RoundFix(i7) | 0) >> 16;
  HEAP32[i4 + (i5 << 3) >> 2] = i7;
  i8 = (_FT_RoundFix(i8) | 0) >> 16;
  HEAP32[i4 + (i5 << 3) + 4 >> 2] = i8;
  HEAP8[i1 >> 0] = 1;
  i1 = i6;
 }
 HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
 i8 = 0;
 return i8 | 0;
}

function _normal_entityValueTok(i3, i4, i5, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i7 = 0;
 if ((i4 | 0) == (i5 | 0)) {
  i7 = -4;
  return i7 | 0;
 }
 i7 = i3 + 76 | 0;
 i1 = i4;
 L4 : while (1) {
  switch (HEAP8[i7 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
  case 3:
   {
    i2 = 6;
    break L4;
   }
  case 30:
   {
    i2 = 9;
    break L4;
   }
  case 10:
   {
    i2 = 12;
    break L4;
   }
  case 9:
   {
    i2 = 15;
    break L4;
   }
  case 5:
   {
    i2 = 2;
    break;
   }
  case 6:
   {
    i2 = 3;
    break;
   }
  case 7:
   {
    i2 = 4;
    break;
   }
  default:
   i2 = 1;
  }
  i1 = i1 + i2 | 0;
  if ((i1 | 0) == (i5 | 0)) {
   i2 = 21;
   break;
  }
 }
 if ((i2 | 0) == 6) if ((i1 | 0) == (i4 | 0)) {
  i7 = _normal_scanRef(i3, i4 + 1 | 0, i5, i6) | 0;
  return i7 | 0;
 } else {
  HEAP32[i6 >> 2] = i1;
  i7 = 6;
  return i7 | 0;
 } else if ((i2 | 0) == 9) if ((i1 | 0) == (i4 | 0)) {
  i7 = _normal_scanPercent(i3, i4 + 1 | 0, i5, i6) | 0;
  i7 = (i7 | 0) == 22 ? 0 : i7;
  return i7 | 0;
 } else {
  HEAP32[i6 >> 2] = i1;
  i7 = 6;
  return i7 | 0;
 } else if ((i2 | 0) == 12) if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i6 >> 2] = i4 + 1;
  i7 = 7;
  return i7 | 0;
 } else {
  HEAP32[i6 >> 2] = i1;
  i7 = 6;
  return i7 | 0;
 } else if ((i2 | 0) == 15) {
  if ((i1 | 0) != (i4 | 0)) {
   HEAP32[i6 >> 2] = i1;
   i7 = 6;
   return i7 | 0;
  }
  i1 = i4 + 1 | 0;
  if ((i1 | 0) == (i5 | 0)) {
   i7 = -3;
   return i7 | 0;
  }
  HEAP32[i6 >> 2] = (HEAP8[i7 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) == 10 ? i4 + 2 | 0 : i1;
  i7 = 7;
  return i7 | 0;
 } else if ((i2 | 0) == 21) {
  HEAP32[i6 >> 2] = i5;
  i7 = 6;
  return i7 | 0;
 }
 return 0;
}

function _ass_cache_empty(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (!i1) {
  i6 = i8 + 8 | 0;
  HEAP32[i6 >> 2] = 0;
  i7 = i8 + 12 | 0;
  HEAP32[i7 >> 2] = i6;
  i8 = i8 + 20 | 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  return;
 }
 i6 = i8 + 4 | 0;
 i7 = i8 + 16 | 0;
 i5 = 0;
 L4 : while (1) {
  i3 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i3 + (i5 << 2) >> 2] | 0;
  if (!i2) i2 = i3; else {
   do {
    if (!(HEAP32[i2 + 24 >> 2] | 0)) {
     i1 = 6;
     break L4;
    }
    i4 = i2;
    i2 = HEAP32[i2 + 8 >> 2] | 0;
    i3 = i4 + 28 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    if (HEAP32[i4 + 20 >> 2] | 0) {
     i1 = i1 + -1 | 0;
     HEAP32[i3 >> 2] = i1;
    }
    if (!i1) {
     i1 = HEAP32[i7 >> 2] | 0;
     if ((HEAP32[i4 + 4 >> 2] | 0) != (i1 | 0)) {
      i1 = 12;
      break L4;
     }
     i3 = i4 + 32 | 0;
     FUNCTION_TABLE_vii[HEAP32[i1 + 12 >> 2] & 63](i3 + ((HEAP32[i1 + 20 >> 2] | 0) + 7 & -8) | 0, i3);
     _free(i4);
    } else HEAP32[i4 >> 2] = 0;
   } while ((i2 | 0) != 0);
   i2 = HEAP32[i6 >> 2] | 0;
   i1 = HEAP32[i8 >> 2] | 0;
  }
  HEAP32[i2 + (i5 << 2) >> 2] = 0;
  i5 = i5 + 1 | 0;
  if (i5 >>> 0 >= i1 >>> 0) {
   i1 = 3;
   break;
  }
 }
 if ((i1 | 0) == 3) {
  i6 = i8 + 8 | 0;
  HEAP32[i6 >> 2] = 0;
  i7 = i8 + 12 | 0;
  HEAP32[i7 >> 2] = i6;
  i8 = i8 + 20 | 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  return;
 } else if ((i1 | 0) == 6) ___assert_fail(357627, 354776, 531, 357740); else if ((i1 | 0) == 12) ___assert_fail(357708, 354776, 446, 357727);
}

function _fribidi_join_arabic(i14, i15, i16, i17) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i18 = 0;
 if ((i15 | 0) > 0) {
  i13 = 0;
  i1 = -1;
  i3 = 0;
  i2 = 0;
  i4 = 0;
  i18 = 0;
 } else return;
 while (1) {
  i9 = i17 + i18 | 0;
  i7 = HEAPU8[i9 >> 0] | 0;
  i5 = i7 & 24;
  if ((i5 | 0) == 16) i5 = i13; else {
   i11 = i7 & 4;
   if (!(HEAP32[i14 + (i18 << 2) >> 2] & 1052672)) i8 = HEAP8[i16 + i18 >> 0] | 0; else i8 = -1;
   i10 = i8 & 255;
   i6 = (i8 | 0) == -1 | (i1 << 24 >> 24 == -1 | ((i2 | 0) == 0 | (i1 << 24 >> 24 | 0) == (i8 | 0)));
   i12 = i6 ? i2 : 0;
   i2 = (i6 ^ 1) & 1;
   do if (!i5) {
    i5 = i8 & 1;
    if (!i12) {
     if (!i11) break;
     HEAP8[i9 >> 0] = i7 & i5 + 253;
     break;
    }
    i6 = 2 - i5 | 0;
    if (!(i7 & i6)) i2 = 1; else {
     i5 = i13 + 1 | 0;
     if ((i5 | 0) < (i18 | 0)) {
      i6 = i6 | i4 & 255;
      do {
       i7 = i17 + i5 | 0;
       HEAP8[i7 >> 0] = i6 | HEAPU8[i7 >> 0];
       i5 = i5 + 1 | 0;
      } while ((i5 | 0) != (i18 | 0));
     }
    }
   } while (0);
   i5 = i17 + i13 | 0;
   if ((i3 | 0) != 0 & (i2 | 0) != 0) HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & ~i4;
   i9 = HEAPU8[i9 >> 0] | 0;
   i7 = (i9 & 24 | 0) == 0;
   i2 = (i8 & 1) + 1 | 0;
   i5 = i7 ? i18 : i13;
   i1 = i7 ? i10 : i1;
   i3 = i7 ? i11 : i3;
   i4 = i7 ? i2 & 255 : i4;
   i2 = i7 ? (i9 & i2 | 0) != 0 & 1 : i12;
  }
  i18 = i18 + 1 | 0;
  if ((i18 | 0) == (i15 | 0)) break; else i13 = i5;
 }
 i1 = i17 + i5 | 0;
 if (!((i2 | 0) != 0 & (i3 | 0) != 0)) return;
 HEAP8[i1 >> 0] = HEAP8[i1 >> 0] & ~i4;
 return;
}

function _ft_lzwstate_get_code(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i6 = i7 + 52 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i8 = i7 + 24 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i4 = i7 + 32 | 0;
 i5 = (HEAP8[i4 >> 0] | 0) == 0;
 if (i5) if (i1 >>> 0 < (HEAP32[i7 + 28 >> 2] | 0) >>> 0) if ((HEAP32[i7 + 56 >> 2] | 0) >>> 0 < (HEAP32[i7 + 60 >> 2] | 0) >>> 0) i6 = i2; else i3 = 4; else i3 = 4; else i3 = 4;
 if ((i3 | 0) == 4) {
  i3 = i7 + 60 | 0;
  if ((HEAP32[i7 + 56 >> 2] | 0) >>> 0 >= (HEAP32[i3 >> 2] | 0) >>> 0) {
   i2 = i2 + 1 | 0;
   HEAP32[i6 >> 2] = i2;
   if (i2 >>> 0 < (HEAP32[i7 + 40 >> 2] | 0) >>> 0) i1 = (1 << i2) + -256 | 0; else i1 = (HEAP32[i7 + 48 >> 2] | 0) + 1 | 0;
   HEAP32[i3 >> 2] = i1;
  }
  if (!i5) {
   HEAP32[i6 >> 2] = 9;
   HEAP32[i3 >> 2] = 256;
   HEAP8[i4 >> 0] = 0;
   i2 = 9;
  }
  i1 = i7 + 4 | 0;
  if (HEAP32[i1 >> 2] | 0) {
   i8 = -1;
   return i8 | 0;
  }
  i5 = _FT_Stream_TryRead(HEAP32[i7 + 164 >> 2] | 0, i7 + 8 | 0, i2) | 0;
  i4 = i7 + 36 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i5;
  i6 = HEAP32[i6 >> 2] | 0;
  HEAP32[i1 >> 2] = i5 >>> 0 < i6 >>> 0 & 1;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i7 + 28 >> 2] = (i5 << 3 | 1) - i6;
  if (!i5) {
   i8 = -1;
   return i8 | 0;
  } else {
   i1 = 0;
   i6 = i2;
  }
 }
 HEAP32[i8 >> 2] = i1 + i6;
 i5 = (i1 >>> 3) + (i7 + 8) | 0;
 i2 = i1 & 7;
 i3 = i5 + 1 | 0;
 i4 = (HEAPU8[i5 >> 0] | 0) >>> i2;
 i2 = 8 - i2 | 0;
 i1 = i6 - i2 | 0;
 if (i1 >>> 0 > 7) {
  i4 = HEAPU8[i3 >> 0] << i2 | i4;
  i3 = i5 + 2 | 0;
  i2 = i2 + 8 | 0;
  i1 = i1 + -8 | 0;
 }
 if (!i1) {
  i8 = i4;
  return i8 | 0;
 }
 i8 = (HEAPU8[i3 >> 0] & (1 << i1) + -1) << i2 | i4;
 return i8 | 0;
}

function _psh_hint_table_activate_mask(i13, i10, i3) {
 i13 = i13 | 0;
 i10 = i10 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i14 = 0;
 i11 = HEAP32[i13 >> 2] | 0;
 i12 = i13 + 8 | 0;
 if (i11 | 0) {
  i1 = HEAP32[i12 >> 2] | 0;
  i2 = i11;
  while (1) {
   i14 = i1 + 16 | 0;
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] & -5;
   HEAP32[i1 + 24 >> 2] = -1;
   i2 = i2 + -1 | 0;
   if (!i2) break; else i1 = i1 + 28 | 0;
  }
 }
 if (!i10) {
  HEAP32[i13 + 4 >> 2] = 0;
  return;
 }
 i9 = i13 + 12 | 0;
 i1 = 0;
 i2 = 0;
 i8 = 0;
 i5 = 0;
 while (1) {
  if (!i1) {
   i6 = 128;
   i7 = HEAPU8[i3 >> 0] | 0;
   i3 = i3 + 1 | 0;
  } else {
   i6 = i1;
   i7 = i2;
  }
  if (!(i6 & i7)) i14 = i5; else {
   i2 = HEAP32[i12 >> 2] | 0;
   i1 = i2 + (i8 * 28 | 0) | 0;
   i2 = i2 + (i8 * 28 | 0) + 16 | 0;
   i4 = HEAP32[i2 >> 2] | 0;
   if (!(i4 & 4)) {
    HEAP32[i2 >> 2] = i4 | 4;
    if (i5 >>> 0 < i11 >>> 0) {
     HEAP32[(HEAP32[i9 >> 2] | 0) + (i5 << 2) >> 2] = i1;
     i14 = i5 + 1 | 0;
    } else i14 = i5;
   } else i14 = i5;
  }
  i8 = i8 + 1 | 0;
  if ((i8 | 0) == (i10 | 0)) break; else {
   i1 = i6 >> 1;
   i2 = i7;
   i5 = i14;
  }
 }
 HEAP32[i13 + 4 >> 2] = i14;
 i4 = HEAP32[i9 >> 2] | 0;
 if ((i14 | 0) > 1) i3 = 1; else return;
 do {
  i5 = HEAP32[i4 + (i3 << 2) >> 2] | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i1 = i3;
  do {
   i2 = i1;
   i1 = i1 + -1 | 0;
   i7 = i4 + (i1 << 2) | 0;
   i8 = HEAP32[i7 >> 2] | 0;
   if ((HEAP32[i8 >> 2] | 0) < (i6 | 0)) break;
   HEAP32[i4 + (i2 << 2) >> 2] = i8;
   HEAP32[i7 >> 2] = i5;
  } while ((i2 | 0) > 1);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != (i14 | 0));
 return;
}

function _bdf_get_bdf_property(i1, i8, i10) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i7 = HEAP32[i1 + 140 >> 2] | 0;
 if (!i7) {
  i10 = 6;
  return i10 | 0;
 }
 if ((i8 | 0) == 0 | (HEAP32[i7 + 72 >> 2] | 0) == 0) {
  i10 = 6;
  return i10 | 0;
 }
 i5 = HEAP8[i8 >> 0] | 0;
 if (!(i5 << 24 >> 24)) {
  i10 = 6;
  return i10 | 0;
 }
 i2 = HEAP32[i7 + 128 >> 2] | 0;
 i6 = HEAP32[i2 + 12 >> 2] | 0;
 i1 = i8;
 i4 = 0;
 i3 = i5;
 do {
  i1 = i1 + 1 | 0;
  i4 = (i4 * 31 | 0) + (i3 << 24 >> 24) | 0;
  i3 = HEAP8[i1 >> 0] | 0;
 } while (i3 << 24 >> 24 != 0);
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 i3 = i6 + (((i4 >>> 0) % (i2 >>> 0) | 0) << 2) | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  i10 = 6;
  return i10 | 0;
 }
 i4 = i6 + (i2 + -1 << 2) | 0;
 while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP8[i2 >> 0] | 0) == i5 << 24 >> 24) if (!(_strcmp(i2, i8) | 0)) break;
  i1 = i3 + -4 | 0;
  i3 = i1 >>> 0 < i6 >>> 0 ? i4 : i1;
  i1 = HEAP32[i3 >> 2] | 0;
  if (!i1) {
   i1 = 6;
   i9 = 17;
   break;
  }
 }
 if ((i9 | 0) == 17) return i1 | 0;
 i2 = HEAP32[i7 + 80 >> 2] | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 if (!(i2 + (i1 << 4) | 0)) {
  i10 = 6;
  return i10 | 0;
 }
 switch (HEAP32[i2 + (i1 << 4) + 4 >> 2] | 0) {
 case 1:
  {
   HEAP32[i10 >> 2] = 1;
   i1 = HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0;
   break;
  }
 case 2:
  {
   i1 = HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0;
   HEAP32[i10 >> 2] = 2;
   break;
  }
 case 3:
  {
   i1 = HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0;
   HEAP32[i10 >> 2] = 3;
   break;
  }
 default:
  {
   i10 = 6;
   return i10 | 0;
  }
 }
 HEAP32[i10 + 4 >> 2] = i1;
 i10 = 0;
 return i10 | 0;
}

function _af_property_get(i5, i1, i7) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 i2 = HEAP32[i5 + 12 >> 2] | 0;
 i3 = HEAP32[i5 + 16 >> 2] | 0;
 i4 = HEAP8[i5 + 20 >> 0] | 0;
 if (!(_strcmp(i1, 283911) | 0)) {
  i2 = HEAP32[i7 >> 2] | 0;
  do if (!i2) i1 = 35; else {
   i3 = i2 + 116 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   HEAP32[i6 >> 2] = i1;
   if (!i1) {
    i1 = _af_face_globals_new(i2, i6, i5) | 0;
    if (i1 | 0) break;
    i1 = HEAP32[i6 >> 2] | 0;
    HEAP32[i3 >> 2] = i1;
    HEAP32[i2 + 120 >> 2] = 62;
   }
   HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 8 >> 2];
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  } while (0);
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (!(_strcmp(i1, 283931) | 0)) {
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[23492 + (i2 << 2) >> 2] | 0) + 8 >> 2];
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (!(_strcmp(i1, 283947) | 0)) {
  HEAP32[i7 >> 2] = i3;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (_strcmp(i1, 283962) | 0) {
  if (_strcmp(i1, 283980) | 0) {
   i7 = 12;
   STACKTOP = i8;
   return i7 | 0;
  }
  HEAP8[i7 >> 0] = i4;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i2 = HEAP32[i7 >> 2] | 0;
 do if (!i2) i1 = 35; else {
  i3 = i2 + 116 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  if (!i1) {
   i1 = _af_face_globals_new(i2, i6, i5) | 0;
   if (i1 | 0) break;
   i1 = HEAP32[i6 >> 2] | 0;
   HEAP32[i3 >> 2] = i1;
   HEAP32[i2 + 120 >> 2] = 62;
  }
  HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 12 >> 2];
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 i7 = i1;
 STACKTOP = i8;
 return i7 | 0;
}

function _FcLangSetIndex(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i1 = HEAP8[i8 >> 0] | 0;
 i4 = i1 & 255;
 i4 = (i1 + -65 & 255) < 26 ? i4 + 32 | 0 : i4;
 i1 = i4 & 255;
 if (!i1) {
  i1 = 0;
  i3 = 0;
  i2 = 0;
 } else {
  i7 = HEAP8[i8 + 1 >> 0] | 0;
  i2 = i7 & 255;
  i2 = (i7 + -65 & 255) < 26 ? i2 + 32 | 0 : i2;
  if (i1 >>> 0 < 97) {
   i1 = 0;
   i3 = 0;
  } else if (i1 >>> 0 > 122) {
   i1 = 237;
   i3 = 243;
  } else {
   i3 = i1 + -97 | 0;
   i1 = HEAP32[64628 + (i3 << 3) >> 2] | 0;
   i3 = HEAP32[64628 + (i3 << 3) + 4 >> 2] | 0;
   if ((i1 | 0) > (i3 | 0)) {
    i9 = 0 - i1 | 0;
    return i9 | 0;
   }
  }
 }
 i7 = i4 & 255;
 i6 = i2 & 255;
 i5 = i8 + 2 | 0;
 i2 = i1;
 L8 : while (1) {
  i4 = i2;
  while (1) {
   i1 = i4 + i3 >> 1;
   i2 = 30904 + (i1 * 24 | 0) | 0;
   if ((HEAP8[i2 >> 0] | 0) == i7 << 24 >> 24) {
    i2 = (HEAPU8[30904 + (i1 * 24 | 0) + 1 >> 0] | 0) - i6 | 0;
    if (!i2) {
     i2 = 30904 + (i1 * 24 | 0) + 2 | 0;
     if (!(HEAP8[i2 >> 0] | 0)) if (!(HEAP8[i5 >> 0] | 0)) {
      i9 = 19;
      break L8;
     }
     i2 = _FcStrCmpIgnoreCase(i2, i5) | 0;
     i9 = 13;
    }
   } else {
    i2 = _FcStrCmpIgnoreCase(i2, i8) | 0;
    i9 = 13;
   }
   if ((i9 | 0) == 13) {
    i9 = 0;
    if (!i2) {
     i9 = 19;
     break L8;
    }
   }
   if ((i2 | 0) >= 0) break;
   if ((i1 | 0) < (i3 | 0)) i4 = i1 + 1 | 0; else {
    i9 = 18;
    break L8;
   }
  }
  if ((i4 | 0) < (i1 | 0)) {
   i2 = i4;
   i3 = i1 + -1 | 0;
  } else {
   i9 = 18;
   break;
  }
 }
 if ((i9 | 0) == 18) {
  i9 = ~((i2 >>> 31) + i1);
  return i9 | 0;
 } else if ((i9 | 0) == 19) return i1 | 0;
 return 0;
}

function _ass_shrink_vert_c(i2, i3, i17, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i17 = i17 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i16 = (i1 + 5 | 0) >>> 1;
 i14 = i1 << 4;
 if (!i17) return;
 if (!i16) {
  i1 = 0;
  do i1 = i1 + 16 | 0; while (i1 >>> 0 < i17 >>> 0);
  return;
 }
 i15 = i16 << 4;
 i1 = 0;
 while (1) {
  i4 = 0;
  i5 = 0;
  i7 = i2;
  while (1) {
   i8 = i4 + -64 | 0;
   i8 = i8 >>> 0 < i14 >>> 0 ? i3 + (i8 << 1) | 0 : 368376;
   i9 = i4 + -48 | 0;
   i9 = i9 >>> 0 < i14 >>> 0 ? i3 + (i9 << 1) | 0 : 368376;
   i10 = i4 + -32 | 0;
   i10 = i10 >>> 0 < i14 >>> 0 ? i3 + (i10 << 1) | 0 : 368376;
   i11 = i4 + -16 | 0;
   i11 = i11 >>> 0 < i14 >>> 0 ? i3 + (i11 << 1) | 0 : 368376;
   i12 = i4 >>> 0 < i14 >>> 0 ? i3 + (i4 << 1) | 0 : 368376;
   i13 = i4 | 16;
   i13 = i13 >>> 0 < i14 >>> 0 ? i3 + (i13 << 1) | 0 : 368376;
   i6 = 0;
   do {
    i19 = HEAP16[i9 + (i6 << 1) >> 1] | 0;
    i18 = HEAP16[i12 + (i6 << 1) >> 1] | 0;
    i20 = HEAP16[i10 + (i6 << 1) >> 1] | 0;
    i21 = HEAP16[i11 + (i6 << 1) >> 1] | 0;
    HEAP16[i7 + (i6 << 1) >> 1] = (i20 + 2 + i21 + ((i18 + i19 + ((i21 + i20 + (i19 + (HEAP16[i8 + (i6 << 1) >> 1] | 0) + i18 + (HEAP16[i13 + (i6 << 1) >> 1] | 0) >> 1) | 0) >>> 1) | 0) >>> 1) | 0) >>> 2;
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != 16);
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i16 | 0)) break; else {
    i4 = i4 + 32 | 0;
    i7 = i7 + 32 | 0;
   }
  }
  i1 = i1 + 16 | 0;
  if (i1 >>> 0 >= i17 >>> 0) break; else {
   i2 = i2 + (i15 << 1) | 0;
   i3 = i3 + (i14 << 1) | 0;
  }
 }
 return;
}

function _processInternalEntity(i13, i7, i2) {
 i13 = i13 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i15;
 i14 = i13 + 304 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 if (!i1) {
  i1 = FUNCTION_TABLE_ii[HEAP32[i13 + 12 >> 2] & 63](24) | 0;
  if (!i1) {
   i14 = 1;
   STACKTOP = i15;
   return i14 | 0;
  }
 } else HEAP32[i14 >> 2] = HEAP32[i1 + 8 >> 2];
 i8 = i7 + 32 | 0;
 HEAP8[i8 >> 0] = 1;
 i9 = i7 + 12 | 0;
 HEAP32[i9 >> 2] = 0;
 i10 = i13 + 300 | 0;
 i11 = i1 + 8 | 0;
 HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i10 >> 2] = i1;
 HEAP32[i1 + 12 >> 2] = i7;
 i4 = HEAP32[i13 + 312 >> 2] | 0;
 HEAP32[i1 + 16 >> 2] = i4;
 HEAP8[i1 + 20 >> 0] = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 i5 = HEAP32[i7 + 4 >> 2] | 0;
 i6 = i5 + (HEAP32[i7 + 8 >> 2] | 0) | 0;
 i2 = i13 + 228 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(HEAP8[i7 + 33 >> 0] | 0)) i2 = _doContent(i13, i4, i3, i5, i6, i12, 0) | 0; else {
  i7 = FUNCTION_TABLE_iiiii[HEAP32[i3 >> 2] & 127](i3, i5, i6, i12) | 0;
  i2 = _doProlog(i13, HEAP32[i2 >> 2] | 0, i5, i6, i7, HEAP32[i12 >> 2] | 0, i12, 0) | 0;
 }
 if (i2 | 0) {
  i14 = i2;
  STACKTOP = i15;
  return i14 | 0;
 }
 i2 = HEAP32[i12 >> 2] | 0;
 if ((i6 | 0) != (i2 | 0)) if ((HEAP32[i13 + 480 >> 2] | 0) == 3) {
  HEAP32[i9 >> 2] = i2 - i5;
  HEAP32[i13 + 280 >> 2] = 79;
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 HEAP8[i8 >> 0] = 0;
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i14 >> 2] = i1;
 i14 = 0;
 STACKTOP = i15;
 return i14 | 0;
}

function _tt_get_metrics(i11, i1) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i12 + 6 | 0;
 i9 = i12 + 4 | 0;
 i8 = i12 + 2 | 0;
 i10 = i12;
 i4 = HEAP32[i11 >> 2] | 0;
 i5 = HEAP32[i11 + 24 >> 2] | 0;
 HEAP16[i7 >> 1] = 0;
 HEAP16[i9 >> 1] = 0;
 HEAP16[i8 >> 1] = 0;
 HEAP16[i10 >> 1] = 0;
 i6 = _FT_Stream_Pos(i5) | 0;
 i2 = i4 + 532 | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 112 >> 2] & 31](i4, 0, i1, i7, i8);
 i3 = HEAP32[i11 + 48 >> 2] | 0;
 do if (!(HEAP8[i4 + 292 >> 0] | 0)) if ((HEAP16[i4 + 364 >> 1] | 0) == -1) {
  i2 = HEAP16[i4 + 220 >> 1] | 0;
  HEAP16[i9 >> 1] = (i2 & 65535) - i3;
  i4 = (i2 << 16 >> 16) - (HEAP16[i4 + 222 >> 1] | 0) | 0;
  HEAP16[i10 >> 1] = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
  break;
 } else {
  i2 = HEAP16[i4 + 434 >> 1] | 0;
  HEAP16[i9 >> 1] = (i2 & 65535) - i3;
  i4 = (i2 << 16 >> 16) - (HEAP16[i4 + 436 >> 1] | 0) | 0;
  HEAP16[i10 >> 1] = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
  break;
 } else FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 112 >> 2] & 31](i4, 1, i1, i9, i10); while (0);
 i1 = _FT_Stream_Seek(i5, i6) | 0;
 if (i1 | 0) {
  i11 = i1;
  STACKTOP = i12;
  return i11 | 0;
 }
 HEAP32[i11 + 52 >> 2] = HEAP16[i7 >> 1];
 i2 = HEAPU16[i8 >> 1] | 0;
 HEAP32[i11 + 56 >> 2] = i2;
 HEAP32[i11 + 176 >> 2] = HEAP16[i9 >> 1];
 HEAP32[i11 + 180 >> 2] = HEAPU16[i10 >> 1];
 i1 = i11 + 64 | 0;
 if (HEAP8[i1 >> 0] | 0) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 HEAP8[i1 >> 0] = 1;
 HEAP32[i11 + 60 >> 2] = i2;
 i11 = 0;
 STACKTOP = i12;
 return i11 | 0;
}

function _nextScaffoldPart(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = HEAP32[i4 + 356 >> 2] | 0;
 i9 = i8 + 184 | 0;
 do if (!(HEAP32[i9 >> 2] | 0)) {
  i1 = FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 63](HEAP32[i4 + 468 >> 2] << 2) | 0;
  HEAP32[i9 >> 2] = i1;
  if (!i1) {
   i9 = -1;
   return i9 | 0;
  } else {
   HEAP32[i1 >> 2] = 0;
   break;
  }
 } while (0);
 i7 = i8 + 176 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i6 = i8 + 172 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i5 = i8 + 164 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if (i1 >>> 0 < i2 >>> 0) {
  i6 = i1;
  i5 = i3;
 } else {
  do if (!i3) {
   i1 = FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 63](896) | 0;
   if (!i1) {
    i9 = -1;
    return i9 | 0;
   } else i2 = 32;
  } else {
   i1 = FUNCTION_TABLE_iii[HEAP32[i4 + 16 >> 2] & 255](i3, i2 * 56 | 0) | 0;
   if (!i1) {
    i9 = -1;
    return i9 | 0;
   } else {
    i2 = HEAP32[i6 >> 2] << 1;
    break;
   }
  } while (0);
  HEAP32[i6 >> 2] = i2;
  HEAP32[i5 >> 2] = i1;
  i6 = HEAP32[i7 >> 2] | 0;
  i5 = i1;
 }
 HEAP32[i7 >> 2] = i6 + 1;
 i1 = HEAP32[i8 + 180 >> 2] | 0;
 if (i1 | 0) {
  i3 = HEAP32[(HEAP32[i9 >> 2] | 0) + (i1 + -1 << 2) >> 2] | 0;
  i4 = i5 + (i3 * 28 | 0) + 16 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i1 | 0) HEAP32[i5 + (i1 * 28 | 0) + 24 >> 2] = i6;
  i1 = i5 + (i3 * 28 | 0) + 20 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) HEAP32[i5 + (i3 * 28 | 0) + 12 >> 2] = i6;
  HEAP32[i4 >> 2] = i6;
  HEAP32[i1 >> 2] = i2 + 1;
 }
 i9 = i5 + (i6 * 28 | 0) + 12 | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 i9 = i6;
 return i9 | 0;
}

function _cff_size_init(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i8 = i11 + 196 | 0;
 i9 = i11;
 HEAP32[i8 >> 2] = 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i2 + 656 >> 2] | 0) + 2952 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 do if ((i1 | 0) != 0 & (i2 | 0) != 0) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) {
   i4 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
   if (i4 | 0) {
    i6 = HEAP32[i7 >> 2] | 0;
    i5 = HEAP32[i6 + 656 >> 2] | 0;
    i6 = _ft_mem_alloc(HEAP32[i6 + 100 >> 2] | 0, 1028, i8) | 0;
    i1 = HEAP32[i8 >> 2] | 0;
    if (!i1) {
     _cff_make_private_dict(i5 + 1324 | 0, i9);
     i1 = FUNCTION_TABLE_iiii[HEAP32[i4 >> 2] & 127](HEAP32[(HEAP32[i7 >> 2] | 0) + 100 >> 2] | 0, i9, i6) | 0;
     HEAP32[i8 >> 2] = i1;
     if (!i1) {
      i2 = i6 + 4 | 0;
      i1 = HEAP32[i5 + 1896 >> 2] | 0;
      do {
       if (!i1) {
        i10 = 9;
        break;
       }
       i1 = i1 + -1 | 0;
       _cff_make_private_dict(HEAP32[i5 + 1900 + (i1 << 2) >> 2] | 0, i9);
       i3 = FUNCTION_TABLE_iiii[HEAP32[i4 >> 2] & 127](HEAP32[(HEAP32[i7 >> 2] | 0) + 100 >> 2] | 0, i9, i2 + (i1 << 2) | 0) | 0;
       HEAP32[i8 >> 2] = i3;
      } while (!(i3 | 0));
      if ((i10 | 0) == 9) {
       HEAP32[i7 + 40 >> 2] = i6;
       break;
      }
      i10 = i3;
      STACKTOP = i11;
      return i10 | 0;
     }
    }
    i10 = i1;
    STACKTOP = i11;
    return i10 | 0;
   }
  }
 } while (0);
 HEAP32[i7 + 44 >> 2] = -1;
 i10 = 0;
 STACKTOP = i11;
 return i10 | 0;
}

function _ass_free_track(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = i5 + 88 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  _free(HEAP32[i2 + 20 >> 2] | 0);
  _free(HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0);
  _free(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0);
  _free(HEAP32[i1 >> 2] | 0);
 }
 _free(HEAP32[i5 + 24 >> 2] | 0);
 _free(HEAP32[i5 + 28 >> 2] | 0);
 _free(HEAP32[i5 + 68 >> 2] | 0);
 i2 = i5 + 16 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1) if ((HEAP32[i5 >> 2] | 0) > 0) {
  _free(HEAP32[i1 >> 2] | 0);
  _free(HEAP32[i1 + 4 >> 2] | 0);
  if ((HEAP32[i5 >> 2] | 0) > 1) {
   i1 = 1;
   do {
    i4 = HEAP32[i2 >> 2] | 0;
    _free(HEAP32[i4 + (i1 * 144 | 0) >> 2] | 0);
    _free(HEAP32[i4 + (i1 * 144 | 0) + 4 >> 2] | 0);
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[i5 >> 2] | 0));
  }
  i1 = HEAP32[i2 >> 2] | 0;
 }
 _free(i1);
 i3 = i5 + 20 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if (!i2) {
  i4 = i2;
  _free(i4);
  i4 = i5 + 80 | 0;
  i4 = HEAP32[i4 >> 2] | 0;
  _free(i4);
  _free(i5);
  return;
 }
 i4 = i5 + 8 | 0;
 if ((HEAP32[i4 >> 2] | 0) > 0) i1 = 0; else {
  i4 = i2;
  _free(i4);
  i4 = i5 + 80 | 0;
  i4 = HEAP32[i4 >> 2] | 0;
  _free(i4);
  _free(i5);
  return;
 }
 while (1) {
  _free(HEAP32[i2 + (i1 * 56 | 0) + 28 >> 2] | 0);
  _free(HEAP32[i2 + (i1 * 56 | 0) + 44 >> 2] | 0);
  _free(HEAP32[i2 + (i1 * 56 | 0) + 48 >> 2] | 0);
  _free(HEAP32[i2 + (i1 * 56 | 0) + 52 >> 2] | 0);
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (HEAP32[i4 >> 2] | 0)) break;
  i2 = HEAP32[i3 >> 2] | 0;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 _free(i4);
 i4 = i5 + 80 | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 _free(i4);
 _free(i5);
 return;
}

function _FcValueListSerialize(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!i2) {
  i6 = 0;
  return i6 | 0;
 } else {
  i1 = 0;
  i5 = 0;
 }
 L3 : while (1) {
  i3 = i5;
  i5 = _FcSerializePtr(i6, i2) | 0;
  if (!i5) {
   i1 = 0;
   i2 = 18;
   break;
  }
  if (!i3) i1 = i5; else HEAP32[i3 >> 2] = i5 - i3 | 1;
  HEAP32[i5 >> 2] = 0;
  i3 = i2 + 8 | 0;
  i4 = i5 + 8 | 0;
  HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
  switch (HEAP32[i3 >> 2] | 0) {
  case 1:
   {
    HEAP32[i5 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
    break;
   }
  case 2:
   {
    HEAPF64[i5 + 16 >> 3] = +HEAPF64[i2 + 16 >> 3];
    break;
   }
  case 3:
   {
    i3 = _FcStrSerialize(i6, HEAP32[i2 + 16 >> 2] | 0) | 0;
    if (!i3) {
     i1 = 0;
     i2 = 18;
     break L3;
    }
    HEAP32[i5 + 16 >> 2] = i3 - i4 | 1;
    break;
   }
  case 4:
   {
    HEAP32[i5 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
    break;
   }
  case 9:
   {
    i3 = _FcRangeSerialize(i6, HEAP32[i2 + 16 >> 2] | 0) | 0;
    if (!i3) {
     i1 = 0;
     i2 = 18;
     break L3;
    }
    HEAP32[i5 + 16 >> 2] = i3 - i4 | 1;
    break;
   }
  case 6:
   {
    i3 = _FcCharSetSerialize(i6, HEAP32[i2 + 16 >> 2] | 0) | 0;
    if (!i3) {
     i1 = 0;
     i2 = 18;
     break L3;
    }
    HEAP32[i5 + 16 >> 2] = i3 - i4 | 1;
    break;
   }
  case 8:
   {
    i3 = _FcLangSetSerialize(i6, HEAP32[i2 + 16 >> 2] | 0) | 0;
    if (!i3) {
     i1 = 0;
     i2 = 18;
     break L3;
    }
    HEAP32[i5 + 16 >> 2] = i3 - i4 | 1;
    break;
   }
  default:
   {}
  }
  i2 = HEAP32[i2 >> 2] | 0;
  if (!i2) {
   i2 = 18;
   break;
  }
 }
 if ((i2 | 0) == 18) return i1 | 0;
 return 0;
}

function _tt_get_advances(i10, i11, i12, i1, i13) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i14 = i16 + 2 | 0;
 i15 = i16;
 i2 = (i12 | 0) != 0;
 if (!(i1 & 16)) {
  if (!i2) {
   STACKTOP = i16;
   return 0;
  }
  i2 = i10 + 532 | 0;
  i1 = 0;
  do {
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 112 >> 2] & 31](i10, 0, i1 + i11 | 0, i14, i15);
   HEAP32[i13 + (i1 << 2) >> 2] = HEAPU16[i15 >> 1];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i12 | 0));
  STACKTOP = i16;
  return 0;
 }
 if (!i2) {
  STACKTOP = i16;
  return 0;
 }
 i2 = i10 + 292 | 0;
 i3 = i10 + 364 | 0;
 i4 = i10 + 220 | 0;
 i5 = i10 + 222 | 0;
 i6 = i10 + 434 | 0;
 i7 = i10 + 436 | 0;
 i8 = i10 + 532 | 0;
 i1 = 0;
 do {
  do if (!(HEAP8[i2 >> 0] | 0)) if ((HEAP16[i3 >> 1] | 0) == -1) {
   i9 = HEAP16[i4 >> 1] | 0;
   HEAP16[i14 >> 1] = i9;
   i9 = (i9 << 16 >> 16) - (HEAP16[i5 >> 1] | 0) | 0;
   i9 = ((i9 | 0) < 0 ? 0 - i9 | 0 : i9) & 65535;
   HEAP16[i15 >> 1] = i9;
   break;
  } else {
   i9 = HEAP16[i6 >> 1] | 0;
   HEAP16[i14 >> 1] = i9;
   i9 = (i9 << 16 >> 16) - (HEAP16[i7 >> 1] | 0) | 0;
   i9 = ((i9 | 0) < 0 ? 0 - i9 | 0 : i9) & 65535;
   HEAP16[i15 >> 1] = i9;
   break;
  } else {
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 112 >> 2] & 31](i10, 1, i1 + i11 | 0, i14, i15);
   i9 = HEAP16[i15 >> 1] | 0;
  } while (0);
  HEAP32[i13 + (i1 << 2) >> 2] = i9 & 65535;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i12 | 0));
 STACKTOP = i16;
 return 0;
}

function _add_line_294(i10, i7, i8, i1, i2) {
 i10 = i10 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0, d5 = 0.0, i6 = 0, i9 = 0, i11 = 0, i12 = 0, d13 = 0.0, i14 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i12 + 8 | 0;
 i11 = i12;
 i3 = i1 - i7 | 0;
 i1 = i2 - i8 | 0;
 i6 = HEAP32[i10 + 48 >> 2] | 0;
 i2 = 0 - i6 | 0;
 if ((i1 | 0) < (i6 | 0) & ((i1 | 0) > (i2 | 0) & ((i3 | 0) > (i2 | 0) & (i3 | 0) < (i6 | 0)))) {
  i11 = 1;
  STACKTOP = i12;
  return i11 | 0;
 }
 d4 = +(i1 | 0) * +HEAPF64[i10 + 40 >> 3];
 d13 = +(0 - i3 | 0) * +HEAPF64[i10 + 32 >> 3];
 d5 = 1.0 / +Math_sqrt(+(d4 * d4 + d13 * d13));
 d4 = d4 * d5;
 d5 = d13 * d5;
 if (!(_start_segment(i10, i7, i8, d4, d5, 3) | 0)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = i10 + 60 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -4;
 i1 = i10 + 80 | 0;
 i2 = i10 + 88 | 0;
 i3 = ~~(+HEAPF64[i1 >> 3] * +HEAPF64[i10 + 16 >> 3]);
 i6 = ~~(+HEAPF64[i2 >> 3] * +HEAPF64[i10 + 24 >> 3]);
 HEAP32[i11 >> 2] = i3 + i7;
 HEAP32[i11 + 4 >> 2] = i6 + i8;
 i14 = HEAP32[i10 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 if (!(_outline_add_point(i14, i9, 1) | 0)) {
  i14 = 0;
  STACKTOP = i12;
  return i14 | 0;
 }
 HEAP32[i11 >> 2] = i7 - i3;
 HEAP32[i11 + 4 >> 2] = i8 - i6;
 i14 = HEAP32[i10 + 4 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 if (!(_outline_add_point(i14, i9, 1) | 0)) {
  i14 = 0;
  STACKTOP = i12;
  return i14 | 0;
 }
 HEAPF64[i1 >> 3] = d4;
 HEAPF64[i2 >> 3] = d5;
 i14 = 1;
 STACKTOP = i12;
 return i14 | 0;
}

function _parse_blend_axis_types(i2, i11) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i12 + 8 | 0;
 i9 = i12 + 4 | 0;
 i10 = i12;
 HEAP32[i10 >> 2] = 0;
 FUNCTION_TABLE_viiii[HEAP32[i11 + 60 >> 2] & 31](i11, i8, 4, i9);
 i1 = HEAP32[i9 >> 2] | 0;
 L1 : do if ((i1 | 0) < 0) {
  HEAP32[i10 >> 2] = 162;
  i1 = 162;
 } else {
  if ((i1 | 0) == 0 | (i1 | 0) > 4) {
   HEAP32[i10 >> 2] = 3;
   i1 = 3;
   break;
  }
  i1 = _t1_allocate_blend(i2, 0, i1) | 0;
  HEAP32[i10 >> 2] = i1;
  if (!i1) {
   i7 = HEAP32[i2 + 528 >> 2] | 0;
   i5 = HEAP32[i2 + 100 >> 2] | 0;
   if ((HEAP32[i9 >> 2] | 0) > 0) {
    i4 = 0;
    while (1) {
     i6 = i8 + (i4 * 12 | 0) | 0;
     i1 = HEAP32[i6 >> 2] | 0;
     if ((HEAP8[i1 >> 0] | 0) == 47) {
      i1 = i1 + 1 | 0;
      HEAP32[i6 >> 2] = i1;
     }
     i2 = (HEAP32[i8 + (i4 * 12 | 0) + 4 >> 2] | 0) - i1 | 0;
     if (!i2) {
      i2 = 10;
      break;
     }
     i3 = _ft_mem_alloc(i5, i2 + 1 | 0, i10) | 0;
     HEAP32[i7 + 8 + (i4 << 2) >> 2] = i3;
     i1 = HEAP32[i10 >> 2] | 0;
     if (i1 | 0) break L1;
     _memcpy(i3 | 0, HEAP32[i6 >> 2] | 0, i2 | 0) | 0;
     HEAP8[i3 + i2 >> 0] = 0;
     i4 = i4 + 1 | 0;
     if ((i4 | 0) >= (HEAP32[i9 >> 2] | 0)) {
      i2 = 13;
      break;
     }
    }
    if ((i2 | 0) == 10) {
     HEAP32[i10 >> 2] = 3;
     i1 = 3;
     break;
    } else if ((i2 | 0) == 13) {
     i1 = HEAP32[i10 >> 2] | 0;
     break;
    }
   } else i1 = 0;
  }
 } while (0);
 HEAP32[i11 + 12 >> 2] = i1;
 STACKTOP = i12;
 return;
}

function _FT_New_Size(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 if (!i6) {
  i8 = 35;
  return i8 | 0;
 }
 if (!i7) {
  i8 = 6;
  return i8 | 0;
 }
 i1 = i6 + 96 | 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  i8 = 34;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 i5 = HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] | 0;
 i8 = HEAP32[i6 + 100 >> 2] | 0;
 i2 = HEAP32[i5 + 40 >> 2] | 0;
 do if ((i2 | 0) > 0) {
  i1 = i8 + 4 | 0;
  i3 = FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 255](i8, i2) | 0;
  if (!i3) {
   i8 = 64;
   return i8 | 0;
  } else {
   _memset(i3 | 0, 0, i2 | 0) | 0;
   break;
  }
 } else if (!i2) {
  i3 = 0;
  i1 = i8 + 4 | 0;
  break;
 } else {
  i8 = 6;
  return i8 | 0;
 } while (0);
 i4 = FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 255](i8, 12) | 0;
 do if (!i4) if (!i3) {
  i8 = 64;
  return i8 | 0;
 } else {
  i1 = 64;
  i2 = i8 + 8 | 0;
  break;
 } else {
  i1 = i4;
  i2 = i1 + 12 | 0;
  do {
   HEAP8[i1 >> 0] = 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i2 | 0));
  HEAP32[i3 >> 2] = i6;
  HEAP32[i3 + 40 >> 2] = 0;
  i1 = HEAP32[i5 + 56 >> 2] | 0;
  if (i1 | 0) {
   i1 = FUNCTION_TABLE_ii[i1 & 63](i3) | 0;
   if (i1 | 0) {
    i2 = i8 + 8 | 0;
    FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 63](i8, i4);
    break;
   }
  }
  HEAP32[i7 >> 2] = i3;
  HEAP32[i4 + 8 >> 2] = i3;
  i8 = i6 + 112 | 0;
  i7 = HEAP32[i8 >> 2] | 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 >> 2] = i7;
  HEAP32[(i7 | 0 ? i7 + 4 | 0 : i6 + 108 | 0) >> 2] = i4;
  HEAP32[i8 >> 2] = i4;
  i8 = 0;
  return i8 | 0;
 } while (0);
 FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 63](i8, i3);
 i8 = i1;
 return i8 | 0;
}

function _gray_render_span(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0;
 i3 = HEAP32[i2 + 1164 >> 2] | 0;
 i1 = (HEAP32[i2 + 1168 >> 2] | 0) + (Math_imul(i3, 0 - i1 | 0) | 0) | 0;
 if ((i3 | 0) > -1) i6 = i1 + (Math_imul((HEAP32[i2 + 1156 >> 2] | 0) + -1 | 0, i3) | 0) | 0; else i6 = i1;
 if ((i4 | 0) <= 0) return;
 while (1) {
  i3 = HEAP8[i5 + 4 >> 0] | 0;
  L8 : do if (i3 << 24 >> 24) {
   i2 = HEAP16[i5 + 2 >> 1] | 0;
   i1 = HEAP16[i5 >> 1] | 0;
   if ((i2 & 65535) > 7) {
    _memset(i6 + i1 | 0, i3 | 0, i2 & 65535 | 0) | 0;
    break;
   }
   i1 = i6 + i1 | 0;
   switch (i2 << 16 >> 16) {
   case 7:
    {
     HEAP8[i1 >> 0] = i3;
     i1 = i1 + 1 | 0;
     i7 = 9;
     break;
    }
   case 6:
    {
     i7 = 9;
     break;
    }
   case 5:
    {
     i7 = 10;
     break;
    }
   case 4:
    {
     i7 = 11;
     break;
    }
   case 3:
    {
     i7 = 12;
     break;
    }
   case 2:
    {
     i7 = 13;
     break;
    }
   case 1:
    break;
   default:
    break L8;
   }
   if ((i7 | 0) == 9) {
    HEAP8[i1 >> 0] = i3;
    i1 = i1 + 1 | 0;
    i7 = 10;
   }
   if ((i7 | 0) == 10) {
    HEAP8[i1 >> 0] = i3;
    i1 = i1 + 1 | 0;
    i7 = 11;
   }
   if ((i7 | 0) == 11) {
    HEAP8[i1 >> 0] = i3;
    i1 = i1 + 1 | 0;
    i7 = 12;
   }
   if ((i7 | 0) == 12) {
    HEAP8[i1 >> 0] = i3;
    i1 = i1 + 1 | 0;
    i7 = 13;
   }
   if ((i7 | 0) == 13) {
    i7 = 0;
    HEAP8[i1 >> 0] = i3;
    i1 = i1 + 1 | 0;
   }
   HEAP8[i1 >> 0] = i3;
  } while (0);
  if ((i4 | 0) > 1) {
   i4 = i4 + -1 | 0;
   i5 = i5 + 6 | 0;
  } else break;
 }
 return;
}

function _FT_Stream_ExtractFrame(i8, i9, i10) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = i8 + 20 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[i8 + 4 >> 2] | 0;
 do if (!i2) {
  i1 = i8 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i4 >>> 0 <= i2 >>> 0 | (i4 - i2 | 0) >>> 0 < i9 >>> 0) {
   i10 = 85;
   return i10 | 0;
  } else {
   i3 = (HEAP32[i8 >> 2] | 0) + i2 | 0;
   i7 = i8 + 32 | 0;
   HEAP32[i7 >> 2] = i3;
   i8 = i8 + 36 | 0;
   HEAP32[i8 >> 2] = i3 + i9;
   HEAP32[i1 >> 2] = i2 + i9;
   i2 = i8;
   i1 = i7;
   break;
  }
 } else {
  i7 = HEAP32[i8 + 28 >> 2] | 0;
  if (i4 >>> 0 < i9 >>> 0) {
   i10 = 85;
   return i10 | 0;
  }
  if ((i9 | 0) > 0) {
   i1 = FUNCTION_TABLE_iii[HEAP32[i7 + 4 >> 2] & 255](i7, i9) | 0;
   if (!i1) {
    i1 = 64;
    i5 = 7;
   } else i2 = HEAP32[i3 >> 2] | 0;
  } else if (!i9) i1 = 0; else {
   i1 = 6;
   i5 = 7;
  }
  if ((i5 | 0) == 7) {
   HEAP32[i8 >> 2] = 0;
   i10 = i1;
   return i10 | 0;
  }
  HEAP32[i8 >> 2] = i1;
  i6 = i8 + 8 | 0;
  i5 = FUNCTION_TABLE_iiiii[i2 & 127](i8, HEAP32[i6 >> 2] | 0, i1, i9) | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  if (i5 >>> 0 < i9 >>> 0) {
   if (i3 | 0) FUNCTION_TABLE_vii[HEAP32[i7 + 8 >> 2] & 63](i7, i3);
   HEAP32[i8 >> 2] = 0;
   i4 = 85;
   i3 = 0;
  } else i4 = 0;
  i1 = i8 + 32 | 0;
  HEAP32[i1 >> 2] = i3;
  i2 = i8 + 36 | 0;
  HEAP32[i2 >> 2] = i3 + i9;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i5;
  if (i4) {
   i10 = i4;
   return i10 | 0;
  }
 } while (0);
 HEAP32[i10 >> 2] = i3;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 i10 = 0;
 return i10 | 0;
}

function _FT_GlyphLoader_CheckSubGlyphs(i7, i1) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = HEAP32[i7 >> 2] | 0;
 i9 = i7 + 48 | 0;
 i1 = (HEAP32[i9 >> 2] | 0) + i1 + (HEAP32[i7 + 84 >> 2] | 0) | 0;
 i6 = i7 + 12 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 if (i1 >>> 0 <= i5 >>> 0) {
  i9 = 0;
  return i9 | 0;
 }
 i2 = i1 + 1 | 0;
 i4 = i2 & -2;
 i8 = i7 + 52 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 L4 : do if ((i2 | i5 | 0) < 0) i2 = 6; else {
  do if (!i4) if (!i1) {
   i3 = 0;
   i1 = 0;
  } else {
   FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i1);
   i3 = 0;
   i1 = 0;
  } else {
   if ((i4 | 0) > 67108863) {
    i2 = 10;
    break L4;
   }
   i2 = i4 << 5;
   if (i5 | 0) {
    i2 = FUNCTION_TABLE_iiiii[HEAP32[i3 + 12 >> 2] & 127](i3, i5 << 5, i2, i1) | 0;
    i10 = (i2 | 0) == 0;
    i3 = i10 ? 64 : 0;
    i1 = i10 ? i1 : i2;
    break;
   }
   if ((i4 | 0) > 0) {
    i1 = FUNCTION_TABLE_iii[HEAP32[i3 + 4 >> 2] & 255](i3, i2) | 0;
    if (!i1) {
     i2 = 64;
     i1 = 0;
     break L4;
    }
    _memset(i1 | 0, 0, i2 | 0) | 0;
    i3 = 0;
    break;
   } else {
    HEAP32[i8 >> 2] = 0;
    i10 = 6;
    return i10 | 0;
   }
  } while (0);
  i2 = (i3 | 0) == 0;
  if ((i4 | 0) > (i5 | 0) & i2) {
   _memset(i1 + (i5 << 5) | 0, 0, i4 - i5 << 5 | 0) | 0;
   HEAP32[i8 >> 2] = i1;
  } else {
   HEAP32[i8 >> 2] = i1;
   if (!i2) {
    i10 = i3;
    return i10 | 0;
   }
  }
  HEAP32[i6 >> 2] = i4;
  HEAP32[i7 + 88 >> 2] = i1 + (HEAP32[i9 >> 2] << 5);
  i10 = 0;
  return i10 | 0;
 } while (0);
 HEAP32[i8 >> 2] = i1;
 i10 = i2;
 return i10 | 0;
}

function _FT_Vector_Length(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!i1) {
  i8 = 0;
  return i8 | 0;
 }
 i3 = i1;
 i2 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 if (!i2) {
  i8 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
  return i8 | 0;
 }
 i1 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
 if (!i3) {
  i8 = i1;
  return i8 | 0;
 }
 i1 = 31 - (Math_clz32(((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | i1 | 0) | 0) | 0;
 if ((i1 | 0) < 30) {
  i1 = 29 - i1 | 0;
  i8 = i1;
  i4 = i2 << i1;
  i1 = i3 << i1;
 } else {
  i7 = i1 + -29 | 0;
  i8 = 29 - i1 | 0;
  i4 = i2 >> i7;
  i1 = i3 >> i7;
 }
 i2 = 0 - i4 | 0;
 if ((i1 | 0) > (i4 | 0)) {
  i4 = (i1 | 0) > (i2 | 0);
  i5 = 1;
  i6 = 1;
  i7 = i4 ? i2 : 0 - i1 | 0;
  i1 = i4 ? i1 : i2;
 } else {
  i3 = (i1 | 0) < (i2 | 0);
  i5 = 1;
  i6 = 1;
  i7 = i3 ? i4 : i1;
  i1 = i3 ? 0 - i1 | 0 : i4;
 }
 while (1) {
  i2 = (i7 | 0) > 0;
  i4 = i7 + i5 >> i6;
  i3 = i1 + i5 >> i6;
  i1 = i1 + (i2 ? i4 : 0 - i4 | 0) | 0;
  i6 = i6 + 1 | 0;
  if ((i6 | 0) == 23) break; else {
   i5 = i5 << 1;
   i7 = i7 + (i2 ? 0 - i3 | 0 : i3) | 0;
  }
 }
 i7 = (i1 | 0) < 0;
 i3 = i7 ? 0 - i1 | 0 : i1;
 i1 = i3 & 65535;
 i3 = i3 >>> 16;
 i5 = i3 * 23318 | 0;
 i4 = (i1 * 56281 | 0) + i5 | 0;
 i6 = i4 << 16;
 i1 = i6 + (i1 * 23318 | 0) | 0;
 i1 = (i4 >>> 16) + (i3 * 56281 | 0) + ((i4 >>> 0 < i5 >>> 0 & 1) << 16) + (i1 >>> 0 < i6 >>> 0 & 1) + (i1 >>> 0 > 3221225471 & 1) | 0;
 i1 = i7 ? 0 - i1 | 0 : i1;
 if ((i8 | 0) > 0) {
  i8 = i1 + (1 << i8 + -1) >> i8;
  return i8 | 0;
 } else {
  i8 = i1 << 0 - i8;
  return i8 | 0;
 }
 return 0;
}

function _FT_MulDiv(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == (i3 | 0)) {
  i7 = i1;
  return i7 | 0;
 }
 i7 = i1 >> 31 | 1;
 i4 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 i5 = (i2 | 0) < 0;
 i1 = i5 ? 0 - i2 | 0 : i2;
 i7 = i5 ? 0 - i7 | 0 : i7;
 i5 = (i3 | 0) < 0;
 i6 = i5 ? 0 - i3 | 0 : i3;
 i7 = i5 ? 0 - i7 | 0 : i7;
 do if (!i6) i1 = 2147483647; else {
  if ((i1 + i4 | 0) >>> 0 <= (129894 - (i6 >>> 17) | 0) >>> 0) {
   i1 = (((i6 >>> 1) + (Math_imul(i1, i4) | 0) | 0) >>> 0) / (i6 >>> 0) | 0;
   break;
  }
  i3 = i4 & 65535;
  i8 = i4 >>> 16;
  i10 = i1 & 65535;
  i9 = i1 >>> 16;
  i4 = Math_imul(i10, i8) | 0;
  i2 = (Math_imul(i9, i3) | 0) + i4 | 0;
  i5 = i2 << 16;
  i1 = i5 + (Math_imul(i10, i3) | 0) | 0;
  i3 = i1 + (i6 >>> 1) | 0;
  i1 = (i2 >>> 16) + (Math_imul(i9, i8) | 0) + ((i2 >>> 0 < i4 >>> 0 & 1) << 16) + (i1 >>> 0 < i5 >>> 0 & 1) + (i3 >>> 0 < i1 >>> 0 & 1) | 0;
  if (!i1) {
   i1 = (i3 >>> 0) / (i6 >>> 0) | 0;
   break;
  }
  if (i1 >>> 0 < i6 >>> 0) {
   i4 = Math_clz32(i1 | 0) | 0;
   i5 = 32 - i4 | 0;
   i10 = i3 >>> i5 | i1 << i4;
   i2 = (i10 >>> 0) / (i6 >>> 0) | 0;
   i1 = i2;
   i2 = i10 - (Math_imul(i2, i6) | 0) | 0;
   i4 = i3 << i4;
   while (1) {
    i2 = i2 << 1 | i4 >>> 31;
    i3 = i2 >>> 0 < i6 >>> 0;
    i1 = (i3 ^ 1) & 1 | i1 << 1;
    i5 = i5 + -1 | 0;
    if (!i5) break; else {
     i2 = i2 - (i3 ? 0 : i6) | 0;
     i4 = i4 << 1;
    }
   }
  } else i1 = 2147483647;
 } while (0);
 i10 = (i7 | 0) < 0 ? 0 - i1 | 0 : i1;
 return i10 | 0;
}

function _composite_destruct(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) _ass_free_bitmap(i1);
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (i1 | 0) _ass_free_bitmap(i1);
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 if (i1 | 0) _ass_free_bitmap(i1);
 i10 = i3 + 24 | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 i9 = i3 + 28 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (!i2) {
  i10 = i1;
  _free(i10);
  return;
 } else i8 = 0;
 while (1) {
  i5 = HEAP32[i1 + (i8 * 12 | 0) >> 2] | 0;
  if (i5) {
   i6 = i5 + -32 | 0;
   i7 = HEAP32[i5 + -8 >> 2] | 0;
   if (!i7) {
    i2 = 12;
    break;
   }
   i3 = i5 + -4 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if (!i4) {
    i2 = 12;
    break;
   }
   i4 = i4 + -1 | 0;
   HEAP32[i3 >> 2] = i4;
   if (!i4) {
    i2 = HEAP32[i6 >> 2] | 0;
    if (i2 | 0) {
     i3 = HEAP32[i5 + -24 >> 2] | 0;
     i1 = i5 + -20 | 0;
     if (i3 | 0) HEAP32[i3 + 12 >> 2] = HEAP32[i1 >> 2];
     HEAP32[HEAP32[i1 >> 2] >> 2] = i3;
     i4 = i2 + 32 | 0;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
     i4 = i2 + 20 | 0;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) - i7;
    }
    i2 = HEAP32[i5 + -28 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[i2 + 12 >> 2] & 63](i5 + ((HEAP32[i2 + 20 >> 2] | 0) + 7 & -8) | 0, i5);
    _free(i6);
    i2 = HEAP32[i10 >> 2] | 0;
    i1 = HEAP32[i9 >> 2] | 0;
   }
  }
  i8 = i8 + 1 | 0;
  if (i8 >>> 0 >= i2 >>> 0) {
   i2 = 8;
   break;
  }
 }
 if ((i2 | 0) == 8) {
  _free(i1);
  return;
 } else if ((i2 | 0) == 12) ___assert_fail(354746, 354776, 466, 354788);
}

function _FcConfigDestroy(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = i4 + 68 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 HEAP32[i2 >> 2] = i3 + -1;
 if ((i3 | 0) != 1) return;
 if ((HEAP32[91920] | 0) == (i4 | 0)) HEAP32[91920] = 0;
 _FcStrSetDestroy(HEAP32[i4 >> 2] | 0);
 _FcStrSetDestroy(HEAP32[i4 + 8 >> 2] | 0);
 _FcStrSetDestroy(HEAP32[i4 + 12 >> 2] | 0);
 _FcStrSetDestroy(HEAP32[i4 + 16 >> 2] | 0);
 _FcStrSetDestroy(HEAP32[i4 + 36 >> 2] | 0);
 _FcStrSetDestroy(HEAP32[i4 + 40 >> 2] | 0);
 _FcFontSetDestroy(HEAP32[i4 + 44 >> 2] | 0);
 _FcFontSetDestroy(HEAP32[i4 + 48 >> 2] | 0);
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 if (i1 | 0) _FcBlanksDestroy(i1);
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 if (i1 | 0) do {
  i2 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  if (i3 | 0) _FcRuleDestroy(i3);
  _free(i2);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 if (i1 | 0) do {
  i2 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  if (i3 | 0) _FcRuleDestroy(i3);
  _free(i2);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[i4 + 28 >> 2] | 0;
 if (i1 | 0) do {
  i2 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  if (i3 | 0) _FcRuleDestroy(i3);
  _free(i2);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[i4 + 52 >> 2] | 0;
 if (i1 | 0) _FcFontSetDestroy(i1);
 i1 = HEAP32[i4 + 56 >> 2] | 0;
 if (i1 | 0) _FcFontSetDestroy(i1);
 i1 = HEAP32[i4 + 72 >> 2] | 0;
 if (i1 | 0) do {
  i3 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  _free(i3);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[i4 + 76 >> 2] | 0;
 if (i1 | 0) _FcStrFree(i1);
 _free(i4);
 return;
}

function _setElementTypePrefix(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = HEAP32[i5 + 356 >> 2] | 0;
 i8 = i12 + 80 | 0;
 i9 = i12 + 92 | 0;
 i10 = i12 + 88 | 0;
 i11 = i12 + 60 | 0;
 i12 = i12 + 96 | 0;
 i7 = i6 + 4 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 L1 : while (1) {
  switch (HEAP8[i4 >> 0] | 0) {
  case 0:
   {
    i1 = 1;
    i2 = 17;
    break L1;
   }
  case 58:
   {
    i2 = HEAP32[i6 >> 2] | 0;
    i1 = HEAP32[i9 >> 2] | 0;
    i3 = (i1 | 0) == (HEAP32[i10 >> 2] | 0);
    if ((i2 | 0) != (i4 | 0)) do {
     if (i3) {
      if (!((_poolGrow(i8) | 0) << 24 >> 24)) {
       i1 = 0;
       i2 = 17;
       break L1;
      }
      i1 = HEAP32[i9 >> 2] | 0;
     }
     i3 = HEAP8[i2 >> 0] | 0;
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i2 = i2 + 1 | 0;
     i1 = HEAP32[i9 >> 2] | 0;
     i3 = (i1 | 0) == (HEAP32[i10 >> 2] | 0);
    } while ((i2 | 0) != (i4 | 0));
    if (i3) {
     if (!((_poolGrow(i8) | 0) << 24 >> 24)) {
      i1 = 0;
      i2 = 17;
      break L1;
     }
     i1 = HEAP32[i9 >> 2] | 0;
    }
    HEAP32[i9 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = 0;
    i1 = _lookup(i5, i11, HEAP32[i12 >> 2] | 0, 8) | 0;
    if (!i1) {
     i1 = 0;
     i2 = 17;
     break L1;
    }
    i2 = HEAP32[i12 >> 2] | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) HEAP32[i12 >> 2] = HEAP32[i9 >> 2]; else HEAP32[i9 >> 2] = i2;
    HEAP32[i7 >> 2] = i1;
    break;
   }
  default:
   {}
  }
  i4 = i4 + 1 | 0;
 }
 if ((i2 | 0) == 17) return i1 | 0;
 return 0;
}

function _ass_pre_blur2_vert_c(i2, i3, i16, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0;
 i15 = i1 + 4 | 0;
 i13 = i1 << 4;
 if (!i16) return;
 if (!i15) {
  i1 = 0;
  do i1 = i1 + 16 | 0; while (i1 >>> 0 < i16 >>> 0);
  return;
 }
 i14 = i13 + 64 | 0;
 i1 = 0;
 while (1) {
  i4 = 0;
  i5 = 0;
  i7 = i2;
  while (1) {
   i8 = i4 + -64 | 0;
   i8 = i8 >>> 0 < i13 >>> 0 ? i3 + (i8 << 1) | 0 : 368376;
   i9 = i4 + -48 | 0;
   i9 = i9 >>> 0 < i13 >>> 0 ? i3 + (i9 << 1) | 0 : 368376;
   i10 = i4 + -32 | 0;
   i10 = i10 >>> 0 < i13 >>> 0 ? i3 + (i10 << 1) | 0 : 368376;
   i11 = i4 + -16 | 0;
   i11 = i11 >>> 0 < i13 >>> 0 ? i3 + (i11 << 1) | 0 : 368376;
   i12 = i4 >>> 0 < i13 >>> 0 ? i3 + (i4 << 1) | 0 : 368376;
   i6 = 0;
   do {
    i17 = HEAP16[i10 + (i6 << 1) >> 1] | 0;
    i17 = (((((HEAPU16[i12 + (i6 << 1) >> 1] | 0) + (HEAPU16[i8 + (i6 << 1) >> 1] | 0) | 0) >>> 1 & 32767) + i17 | 0) >>> 1 & 32767) + i17 | 0;
    i18 = (HEAPU16[i11 + (i6 << 1) >> 1] | 0) + (HEAPU16[i9 + (i6 << 1) >> 1] | 0) | 0;
    HEAP16[i7 + (i6 << 1) >> 1] = (((i17 + i18 | 0) >>> 1 & 32767 | i18 & 32768 & i17) + 1 | 0) >>> 1 & 32767;
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != 16);
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i15 | 0)) break; else {
    i4 = i4 + 16 | 0;
    i7 = i7 + 32 | 0;
   }
  }
  i1 = i1 + 16 | 0;
  if (i1 >>> 0 >= i16 >>> 0) break; else {
   i2 = i2 + (i14 << 1) | 0;
   i3 = i3 + (i13 << 1) | 0;
  }
 }
 return;
}

function _TT_New_Context(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7 + 4 | 0;
 i6 = i7;
 do if (i1 | 0) {
  i2 = HEAP32[i1 + 8 >> 2] | 0;
  i1 = _ft_mem_alloc(i2, 612, i6) | 0;
  if (!(HEAP32[i6 >> 2] | 0)) {
   i4 = i1 + 8 | 0;
   HEAP32[i4 >> 2] = i2;
   i3 = i1 + 432 | 0;
   HEAP32[i3 >> 2] = 32;
   i8 = _ft_mem_realloc(i2, 16, 0, 32, 0, i5) | 0;
   i2 = i1 + 436 | 0;
   HEAP32[i2 >> 2] = i8;
   if (!(HEAP32[i5 >> 2] | 0)) {
    HEAP16[i1 + 440 >> 1] = 0;
    HEAP16[i1 + 442 >> 1] = 0;
    HEAP32[i1 + 20 >> 2] = 0;
    HEAP32[i1 + 388 >> 2] = 0;
    HEAP32[i1 + 24 >> 2] = 0;
    HEAP32[i1 + 392 >> 2] = 0;
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
    i8 = i1;
    STACKTOP = i7;
    return i8 | 0;
   } else {
    i8 = HEAP32[i4 >> 2] | 0;
    HEAP16[i1 + 440 >> 1] = 0;
    HEAP16[i1 + 442 >> 1] = 0;
    i4 = i1 + 24 | 0;
    _ft_mem_free(i8, HEAP32[i4 >> 2] | 0);
    HEAP32[i4 >> 2] = 0;
    HEAP32[i1 + 20 >> 2] = 0;
    _ft_mem_free(i8, HEAP32[i2 >> 2] | 0);
    HEAP32[i2 >> 2] = 0;
    HEAP32[i3 >> 2] = 0;
    HEAP32[i1 + 428 >> 2] = 0;
    i4 = i1 + 392 | 0;
    _ft_mem_free(i8, HEAP32[i4 >> 2] | 0);
    HEAP32[i4 >> 2] = 0;
    HEAP32[i1 + 388 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 >> 2] = 0;
    _ft_mem_free(i8, i1);
    i8 = HEAP32[i5 >> 2] | 0;
    HEAP32[i6 >> 2] = i8;
    if (i8) break;
    STACKTOP = i7;
    return i1 | 0;
   }
  }
 } while (0);
 i8 = 0;
 STACKTOP = i7;
 return i8 | 0;
}

function _vfprintf(i15, i8, i1) {
 i15 = i15 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i10 = i16 + 120 | 0;
 i12 = i16 + 80 | 0;
 i13 = i16;
 i14 = i16 + 136 | 0;
 i2 = i12;
 i3 = i2 + 40 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
 if ((_printf_core(0, i8, i10, i13, i12) | 0) < 0) i1 = -1; else {
  if ((HEAP32[i15 + 76 >> 2] | 0) > -1) i11 = ___lockfile(i15) | 0; else i11 = 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i9 = i1 & 32;
  if ((HEAP8[i15 + 74 >> 0] | 0) < 1) HEAP32[i15 >> 2] = i1 & -33;
  i2 = i15 + 48 | 0;
  if (!(HEAP32[i2 >> 2] | 0)) {
   i3 = i15 + 44 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   HEAP32[i3 >> 2] = i14;
   i5 = i15 + 28 | 0;
   HEAP32[i5 >> 2] = i14;
   i6 = i15 + 20 | 0;
   HEAP32[i6 >> 2] = i14;
   HEAP32[i2 >> 2] = 80;
   i7 = i15 + 16 | 0;
   HEAP32[i7 >> 2] = i14 + 80;
   i1 = _printf_core(i15, i8, i10, i13, i12) | 0;
   if (i4) {
    FUNCTION_TABLE_iiii[HEAP32[i15 + 36 >> 2] & 127](i15, 0, 0) | 0;
    i1 = (HEAP32[i6 >> 2] | 0) == 0 ? -1 : i1;
    HEAP32[i3 >> 2] = i4;
    HEAP32[i2 >> 2] = 0;
    HEAP32[i7 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
   }
  } else i1 = _printf_core(i15, i8, i10, i13, i12) | 0;
  i2 = HEAP32[i15 >> 2] | 0;
  HEAP32[i15 >> 2] = i2 | i9;
  if (i11 | 0) ___unlockfile(i15);
  i1 = (i2 & 32 | 0) == 0 ? i1 : -1;
 }
 STACKTOP = i16;
 return i1 | 0;
}

function _cff_get_advances(i6, i8, i9, i1, i10) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i11 + 2 | 0;
 i4 = i11;
 i7 = HEAP32[i6 + 84 >> 2] | 0;
 do if (HEAP32[i6 + 8 >> 2] & 8 | 0) {
  if (!(i1 & 16)) {
   if (!(HEAP16[i6 + 216 + 34 >> 1] | 0)) break;
   if (i9 | 0) {
    i2 = i6 + 532 | 0;
    i1 = 0;
    do {
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 112 >> 2] & 31](i6, 0, i1 + i8 | 0, i3, i4);
     HEAP32[i10 + (i1 << 2) >> 2] = HEAPU16[i4 >> 1];
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i9 | 0));
   }
  } else {
   if (!(HEAP8[i6 + 292 >> 0] | 0)) break;
   if (i9 | 0) {
    i2 = i6 + 532 | 0;
    i1 = 0;
    do {
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 112 >> 2] & 31](i6, 1, i1 + i8 | 0, i3, i4);
     HEAP32[i10 + (i1 << 2) >> 2] = HEAPU16[i4 >> 1];
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i9 | 0));
   }
  }
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 } while (0);
 i5 = i1 | 256;
 i4 = i6 + 88 | 0;
 if (!i9) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 i3 = i1 & 16 | 0 ? i7 + 60 | 0 : i7 + 56 | 0;
 i2 = 0;
 while (1) {
  i1 = _cff_glyph_load(i7, HEAP32[i4 >> 2] | 0, i2 + i8 | 0, i5) | 0;
  if (i1 | 0) {
   i2 = 18;
   break;
  }
  HEAP32[i10 + (i2 << 2) >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 >= i9 >>> 0) {
   i1 = 0;
   i2 = 18;
   break;
  }
 }
 if ((i2 | 0) == 18) {
  STACKTOP = i11;
  return i1 | 0;
 }
 return 0;
}

function _ass_set_fonts(i4, i5, i6, i7, i8, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = i4 + 100 | 0;
 _free(HEAP32[i2 >> 2] | 0);
 i3 = i4 + 104 | 0;
 _free(HEAP32[i3 >> 2] | 0);
 if (!i5) i1 = 0; else i1 = ___strdup(i5) | 0;
 HEAP32[i2 >> 2] = i1;
 if (!i6) i1 = 0; else i1 = ___strdup(i6) | 0;
 HEAP32[i3 >> 2] = i1;
 i11 = i4 + 112 | 0;
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 _ass_cache_empty(HEAP32[i4 + 740 >> 2] | 0);
 _ass_cache_empty(HEAP32[i4 + 736 >> 2] | 0);
 _ass_cache_empty(HEAP32[i4 + 732 >> 2] | 0);
 i11 = HEAP32[i4 + 16 >> 2] | 0;
 HEAP32[i4 + 136 >> 2] = i11;
 i3 = HEAP32[i4 + 20 >> 2] | 0;
 HEAP32[i4 + 140 >> 2] = i3;
 i10 = HEAP32[i4 + 64 >> 2] | 0;
 i9 = HEAP32[i4 + 68 >> 2] | 0;
 HEAP32[i4 + 148 >> 2] = i11 - i10 - i9;
 i2 = HEAP32[i4 + 56 >> 2] | 0;
 i1 = HEAP32[i4 + 60 >> 2] | 0;
 HEAP32[i4 + 144 >> 2] = i3 - i2 - i1;
 HEAP32[i4 + 156 >> 2] = i11 - ((i10 | 0) > 0 ? i10 : 0) - ((i9 | 0) > 0 ? i9 : 0);
 HEAP32[i4 + 152 >> 2] = i3 - ((i2 | 0) > 0 ? i2 : 0) - ((i1 | 0) > 0 ? i1 : 0);
 i1 = i4 + 8 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  i10 = HEAP32[i4 >> 2] | 0;
  i11 = i4 + 4 | 0;
  i11 = HEAP32[i11 >> 2] | 0;
  i11 = _ass_fontselect_init(i10, i11, i6, i5, i8, i7) | 0;
  HEAP32[i1 >> 2] = i11;
  return;
 }
 _ass_fontselect_free(i2);
 i10 = HEAP32[i4 >> 2] | 0;
 i11 = i4 + 4 | 0;
 i11 = HEAP32[i11 >> 2] | 0;
 i11 = _ass_fontselect_init(i10, i11, i6, i5, i8, i7) | 0;
 HEAP32[i1 >> 2] = i11;
 return;
}

function _FcCharSetCount(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!i3) {
  i7 = 0;
  return i7 | 0;
 }
 i6 = i3;
 i5 = (HEAP32[i3 + 12 >> 2] | 0) + i6 | 0;
 i2 = i5;
 i7 = HEAP32[i3 + 4 >> 2] | 0;
 if (!i5) {
  i1 = -1;
  i4 = 7;
 } else {
  i1 = i7;
  do {
   if ((i1 | 0) < 1) {
    i4 = 5;
    break;
   }
   i1 = i1 + -1 >> 1;
  } while ((HEAP16[i2 + (i1 << 1) >> 1] | 0) != 0);
  if ((i4 | 0) == 5) i1 = ~i1;
  if ((i1 | 0) < 0) i4 = 7; else i4 = 9;
 }
 if ((i4 | 0) == 7) {
  i1 = ~i1;
  if ((i7 | 0) == (i1 | 0)) {
   i5 = i3 + 8 | 0;
   i3 = 0;
   i2 = 0;
  } else i4 = 9;
 }
 if ((i4 | 0) == 9) {
  i5 = i3 + 8 | 0;
  i3 = (HEAP32[i5 >> 2] | 0) + i6 | 0;
  i3 = i3 + (HEAP32[i3 + (i1 << 2) >> 2] | 0) | 0;
  i2 = i1;
 }
 i1 = 0;
 L17 : while (1) {
  i2 = i2 + 1 | 0;
  i4 = (i2 | 0) < (i7 | 0);
  while (1) {
   if (!i3) break L17;
   i8 = (_llvm_ctpop_i32(HEAP32[i3 >> 2] | 0) | 0) + i1 | 0;
   i8 = (_llvm_ctpop_i32(HEAP32[i3 + 4 >> 2] | 0) | 0) + i8 | 0;
   i8 = (_llvm_ctpop_i32(HEAP32[i3 + 8 >> 2] | 0) | 0) + i8 | 0;
   i8 = (_llvm_ctpop_i32(HEAP32[i3 + 12 >> 2] | 0) | 0) + i8 | 0;
   i8 = (_llvm_ctpop_i32(HEAP32[i3 + 16 >> 2] | 0) | 0) + i8 | 0;
   i8 = (_llvm_ctpop_i32(HEAP32[i3 + 20 >> 2] | 0) | 0) + i8 | 0;
   i8 = (_llvm_ctpop_i32(HEAP32[i3 + 24 >> 2] | 0) | 0) + i8 | 0;
   i1 = (_llvm_ctpop_i32(HEAP32[i3 + 28 >> 2] | 0) | 0) + i8 | 0;
   if (i4) break; else i3 = 0;
  }
  i3 = (HEAP32[i5 >> 2] | 0) + i6 | 0;
  i3 = i3 + (HEAP32[i3 + (i2 << 2) >> 2] | 0) | 0;
 }
 return i1 | 0;
}

function _T42_Face_Done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!i1) return;
 i2 = i1 + 132 | 0;
 i3 = HEAP32[i1 + 100 >> 2] | 0;
 i4 = HEAP32[i1 + 500 >> 2] | 0;
 if (i4 | 0) _FT_Done_Face(i4) | 0;
 _ft_mem_free(i3, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 i4 = i1 + 136 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 140 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 144 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 148 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 428 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 424 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 420 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 396 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 400 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 372 | 0;
 i2 = i4 + 12 | 0;
 _ft_mem_free(i3, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 i4 = i4 + 16 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 364 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 492 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 536 | 0;
 i2 = i4 + 20 | 0;
 _ft_mem_free(i3, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 return;
}

function __FcStrSetAppend(i7, i9) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0;
 i10 = i7 + 4 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 L1 : do if ((i8 | 0) > 0) {
  i6 = HEAP32[i7 + 12 >> 2] | 0;
  i5 = 0;
  while (1) {
   i1 = HEAP32[i6 + (i5 << 2) >> 2] | 0;
   if ((i1 | 0) == (i9 | 0)) break; else {
    i3 = i9;
    i2 = i1;
   }
   while (1) {
    i1 = HEAP8[i2 >> 0] | 0;
    i4 = HEAP8[i3 >> 0] | 0;
    if (!(i1 << 24 >> 24)) {
     i1 = 0;
     break;
    }
    if (i1 << 24 >> 24 == i4 << 24 >> 24) {
     i3 = i3 + 1 | 0;
     i2 = i2 + 1 | 0;
    } else break;
   }
   i5 = i5 + 1 | 0;
   if (i1 << 24 >> 24 == i4 << 24 >> 24) break;
   if ((i5 | 0) >= (i8 | 0)) break L1;
  }
  _free(i9);
  i10 = 1;
  return i10 | 0;
 } while (0);
 i5 = i7 + 8 | 0;
 if ((i8 | 0) == (HEAP32[i5 >> 2] | 0)) {
  i2 = i8 << 2;
  i1 = _malloc(i2 + 8 | 0) | 0;
  if (!i1) {
   i10 = 0;
   return i10 | 0;
  }
  i4 = i7 + 12 | 0;
  if (!i8) {
   i3 = HEAP32[i4 >> 2] | 0;
   i2 = i3;
  } else {
   i3 = HEAP32[i4 >> 2] | 0;
   _memcpy(i1 | 0, i3 | 0, i2 | 0) | 0;
   i2 = i3;
  }
  if (!i2) {
   i2 = i8;
   i3 = i8;
  } else {
   _free(i3);
   i2 = HEAP32[i10 >> 2] | 0;
   i3 = HEAP32[i5 >> 2] | 0;
  }
  HEAP32[i5 >> 2] = i3 + 1;
  HEAP32[i4 >> 2] = i1;
  i3 = i4;
 } else {
  i1 = i7 + 12 | 0;
  i3 = i1;
  i2 = i8;
  i1 = HEAP32[i1 >> 2] | 0;
 }
 HEAP32[i10 >> 2] = i2 + 1;
 HEAP32[i1 + (i2 << 2) >> 2] = i9;
 HEAP32[(HEAP32[i3 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] = 0;
 i10 = 1;
 return i10 | 0;
}

function _PCF_Face_Done(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if (!i7) return;
 i5 = HEAP32[i7 + 100 >> 2] | 0;
 i6 = i7 + 300 | 0;
 _ft_mem_free(i5, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 i6 = i7 + 292 | 0;
 _ft_mem_free(i5, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 i6 = i7 + 284 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i1 | 0) {
  i4 = i7 + 280 | 0;
  if ((HEAP32[i4 >> 2] | 0) > 0) {
   i3 = 0;
   do {
    i2 = i1 + (i3 * 12 | 0) | 0;
    if (i2 | 0) {
     _ft_mem_free(i5, HEAP32[i2 >> 2] | 0);
     HEAP32[i2 >> 2] = 0;
     i2 = i1 + (i3 * 12 | 0) + 8 | 0;
     if (HEAP8[i1 + (i3 * 12 | 0) + 4 >> 0] | 0) {
      _ft_mem_free(i5, HEAP32[i2 >> 2] | 0);
      HEAP32[i2 >> 2] = 0;
     }
    }
    i3 = i3 + 1 | 0;
    i1 = HEAP32[i6 >> 2] | 0;
   } while ((i3 | 0) < (HEAP32[i4 >> 2] | 0));
  }
  _ft_mem_free(i5, i1);
  HEAP32[i6 >> 2] = 0;
 }
 i1 = i7 + 192 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i7 + 20 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i7 + 24 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i7 + 32 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i7 + 176 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i7 + 180 | 0;
 _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i7 + 104 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i7 + 132 | 0)) return;
 _FT_Stream_Close(i2);
 HEAP32[i1 >> 2] = HEAP32[i7 + 172 >> 2];
 return;
}

function _FcStrStrIgnoreCase(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i11 + 48 | 0;
 i6 = i11 + 32 | 0;
 i7 = i11 + 16 | 0;
 i8 = i11;
 if (!((i2 | 0) != 0 & (i1 | 0) != 0)) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if ((i2 | 0) == (i1 | 0)) {
  i10 = i2;
  STACKTOP = i11;
  return i10 | 0;
 }
 i9 = i5 + 4 | 0;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 i4 = _FcStrCaseWalkerNext(i6, 0) | 0;
 i1 = _FcStrCaseWalkerNext(i5, 0) | 0;
 if (!(i1 << 24 >> 24)) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 L10 : while (1) {
  if (i1 << 24 >> 24 == i4 << 24 >> 24) {
   HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i7 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i7 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i8 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i8 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i8 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   do {
    i1 = _FcStrCaseWalkerNext(i7, 0) | 0;
    i3 = _FcStrCaseWalkerNext(i8, 0) | 0;
    if (!(i3 << 24 >> 24)) break L10;
   } while (i3 << 24 >> 24 == i1 << 24 >> 24);
  }
  i2 = HEAP32[i9 >> 2] | 0;
  i1 = _FcStrCaseWalkerNext(i5, 0) | 0;
  if (!(i1 << 24 >> 24)) {
   i1 = 0;
   i10 = 12;
   break;
  }
 }
 if ((i10 | 0) == 12) {
  STACKTOP = i11;
  return i1 | 0;
 }
 i10 = i2;
 STACKTOP = i11;
 return i10 | 0;
}

function _tt_face_load_gasp(i2, i6) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 i3 = HEAP32[i6 + 28 >> 2] | 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 508 >> 2] & 127](i2, 1734439792, i6, 0) | 0;
 HEAP32[i7 >> 2] = i1;
 if (i1 | 0) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i6, 4) | 0;
 HEAP32[i7 >> 2] = i1;
 if (i1 | 0) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 i4 = _FT_Stream_GetUShort(i6) | 0;
 i5 = i2 + 540 | 0;
 HEAP16[i5 >> 1] = i4;
 i4 = _FT_Stream_GetUShort(i6) | 0;
 i1 = i2 + 542 | 0;
 HEAP16[i1 >> 1] = i4;
 _FT_Stream_ExitFrame(i6);
 if ((HEAPU16[i5 >> 1] | 0) > 1) {
  HEAP16[i1 >> 1] = 0;
  HEAP32[i7 >> 2] = 8;
  i7 = 8;
  STACKTOP = i8;
  return i7 | 0;
 }
 i4 = HEAP16[i1 >> 1] | 0;
 i5 = i4 & 65535;
 i1 = _ft_mem_realloc(i3, 4, 0, i5, 0, i7) | 0;
 i2 = i2 + 544 | 0;
 HEAP32[i2 >> 2] = i1;
 i1 = HEAP32[i7 >> 2] | 0;
 if (i1 | 0) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i6, i5 << 2) | 0;
 HEAP32[i7 >> 2] = i1;
 if (i1 | 0) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 i2 = HEAP32[i2 >> 2] | 0;
 if (i4 << 16 >> 16) {
  i1 = 0;
  do {
   i4 = _FT_Stream_GetUShort(i6) | 0;
   HEAP16[i2 + (i1 << 2) >> 1] = i4;
   i4 = _FT_Stream_GetUShort(i6) | 0;
   HEAP16[i2 + (i1 << 2) + 2 >> 1] = i4;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i5 | 0));
 }
 _FT_Stream_ExitFrame(i6);
 i7 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _read_file(i6, i1, i7) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i11 + 24 | 0;
 i5 = i11 + 16 | 0;
 i3 = i11 + 8 | 0;
 i2 = i11;
 i8 = _fopen(i1, 357116) | 0;
 if (!i8) {
  HEAP32[i2 >> 2] = i1;
  _ass_msg(i6, 2, 357119, i2);
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if ((_fseek(i8, 0, 2) | 0) == -1) {
  HEAP32[i3 >> 2] = i1;
  _ass_msg(i6, 2, 357151, i3);
  _fclose(i8) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 i4 = _ftell(i8) | 0;
 _rewind(i8);
 HEAP32[i5 >> 2] = i4;
 _ass_msg(i6, 6, 357183, i5);
 if ((i4 | 0) != -1) {
  i2 = _malloc(i4 + 1 | 0) | 0;
  if (i2 | 0) {
   i1 = 0;
   do {
    i3 = _fread(i2 + i1 | 0, 1, i4 - i1 | 0, i8) | 0;
    if ((i3 | 0) < 1) {
     i10 = 9;
     break;
    }
    i1 = i3 + i1 | 0;
   } while ((i4 | 0) > (i1 | 0));
   if ((i10 | 0) == 9) {
    i7 = ___errno_location() | 0;
    i7 = HEAP32[i7 >> 2] | 0;
    i10 = ___errno_location() | 0;
    i10 = _strerror(HEAP32[i10 >> 2] | 0) | 0;
    HEAP32[i9 >> 2] = i7;
    HEAP32[i9 + 4 >> 2] = i10;
    _ass_msg(i6, 4, 357198, i9);
    _fclose(i8) | 0;
    _free(i2);
    i10 = 0;
    STACKTOP = i11;
    return i10 | 0;
   }
   HEAP8[i2 + i4 >> 0] = 0;
   _fclose(i8) | 0;
   if (!i7) {
    i10 = i2;
    STACKTOP = i11;
    return i10 | 0;
   }
   HEAP32[i7 >> 2] = i4;
   i10 = i2;
   STACKTOP = i11;
   return i10 | 0;
  }
 }
 _fclose(i8) | 0;
 i10 = 0;
 STACKTOP = i11;
 return i10 | 0;
}

function _FcStrContainsWord(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i11 + 16 | 0;
 i7 = i11;
 i2 = _strlen(i1) | 0;
 i8 = _strlen(i5) | 0;
 if ((i2 | 0) < (i8 | 0)) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 i9 = i6 + 4 | 0;
 i10 = i7 + 4 | 0;
 i3 = 1;
 while (1) {
  if (i3 | 0) {
   HEAP32[i9 >> 2] = i1;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i10 >> 2] = i5;
   HEAP32[i7 >> 2] = 0;
   do {
    i12 = _FcStrCaseWalkerNext(i6, 0) | 0;
    i3 = _FcStrCaseWalkerNext(i7, 0) | 0;
    i4 = i12 << 24 >> 24 == i3 << 24 >> 24;
   } while (i12 << 24 >> 24 != 0 & i4);
   if (i4 | i3 << 24 >> 24 == 0) {
    if ((i2 | 0) == (i8 | 0)) {
     i2 = 20;
     break;
    }
    i3 = HEAP8[i1 + i8 >> 0] | 0;
    if ((i3 & 255) < 48) {
     i2 = 20;
     break;
    }
    if ((i3 & 255) >= 58) {
     if ((i3 & 255) < 65) {
      i2 = 20;
      break;
     }
     if ((i3 & 255) >= 91) if ((i3 & 255) < 97 | (i3 + -123 & 255) < 4) {
      i2 = 20;
      break;
     }
    }
   }
  }
  i3 = HEAP8[i1 >> 0] | 0;
  if ((i3 & 255) < 48) i3 = 1; else if ((i3 & 255) < 58) i3 = 0; else if ((i3 & 255) < 65) i3 = 1; else if ((i3 & 255) < 91) i3 = 0; else if ((i3 & 255) < 97) i3 = 1; else i3 = (i3 + -123 & 255) < 4 & 1;
  if ((i2 | 0) > (i8 | 0)) {
   i2 = i2 + -1 | 0;
   i1 = i1 + 1 | 0;
  } else {
   i1 = 0;
   i2 = 20;
   break;
  }
 }
 if ((i2 | 0) == 20) {
  STACKTOP = i11;
  return i1 | 0;
 }
 return 0;
}

function _tt_sbit_decoder_load_compound(i9, i1, i4, i6, i7) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i8 = i9 + 12 | 0;
 i2 = HEAP32[i8 >> 2] | 0;
 i15 = HEAP16[i2 + 4 >> 1] | 0;
 i10 = HEAP16[i2 + 6 >> 1] | 0;
 i11 = HEAP16[i2 + 8 >> 1] | 0;
 i12 = HEAP16[i2 + 10 >> 1] | 0;
 i13 = HEAP16[i2 + 12 >> 1] | 0;
 i14 = HEAP16[i2 + 14 >> 1] | 0;
 i3 = i1 + 2 | 0;
 if (i3 >>> 0 > i4 >>> 0) {
  i15 = 3;
  return i15 | 0;
 }
 i5 = (HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0);
 if ((i3 + (i5 << 2) | 0) >>> 0 > i4 >>> 0) {
  i15 = 3;
  return i15 | 0;
 }
 if (!i5) i1 = 0; else {
  i2 = i3;
  i3 = 0;
  while (1) {
   i1 = _tt_sbit_decoder_load_image(i9, (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0), (HEAPU8[i2 + 2 >> 0] | 0) + i6 | 0, (HEAPU8[i2 + 3 >> 0] | 0) + i7 | 0) | 0;
   if (i1 | 0) break;
   i3 = i3 + 1 | 0;
   if (i3 >>> 0 >= i5 >>> 0) {
    i1 = 0;
    break;
   } else i2 = i2 + 4 | 0;
  }
  i2 = HEAP32[i8 >> 2] | 0;
 }
 HEAP16[i2 + 4 >> 1] = (i15 << 8 & 65535) << 16 >> 16 >> 8;
 HEAP16[i2 + 6 >> 1] = (i10 << 8 & 65535) << 16 >> 16 >> 8;
 HEAP16[i2 + 8 >> 1] = i11 & 255;
 HEAP16[i2 + 10 >> 1] = (i12 << 8 & 65535) << 16 >> 16 >> 8;
 HEAP16[i2 + 12 >> 1] = (i13 << 8 & 65535) << 16 >> 16 >> 8;
 HEAP16[i2 + 14 >> 1] = i14 & 255;
 i15 = HEAP32[i9 + 8 >> 2] | 0;
 HEAP16[i2 + 2 >> 1] = HEAP32[i15 + 4 >> 2] & 255;
 HEAP16[i2 >> 1] = HEAP32[i15 >> 2] & 255;
 i15 = i1;
 return i15 | 0;
}

function ___mo_lookup(i12, i13, i10) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = (HEAP32[i12 >> 2] | 0) + 1794895138 | 0;
 i3 = _swapc(HEAP32[i12 + 8 >> 2] | 0, i11) | 0;
 i1 = _swapc(HEAP32[i12 + 12 >> 2] | 0, i11) | 0;
 i2 = _swapc(HEAP32[i12 + 16 >> 2] | 0, i11) | 0;
 L1 : do if (i3 >>> 0 < i13 >>> 2 >>> 0) {
  i9 = i13 - (i3 << 2) | 0;
  if (i1 >>> 0 < i9 >>> 0 & i2 >>> 0 < i9 >>> 0) if (!((i2 | i1) & 3)) {
   i9 = i1 >>> 2;
   i8 = i2 >>> 2;
   i7 = 0;
   while (1) {
    i5 = i3 >>> 1;
    i6 = i7 + i5 | 0;
    i4 = i6 << 1;
    i2 = i4 + i9 | 0;
    i1 = _swapc(HEAP32[i12 + (i2 << 2) >> 2] | 0, i11) | 0;
    i2 = _swapc(HEAP32[i12 + (i2 + 1 << 2) >> 2] | 0, i11) | 0;
    if (!(i2 >>> 0 < i13 >>> 0 & i1 >>> 0 < (i13 - i2 | 0) >>> 0)) {
     i1 = 0;
     break L1;
    }
    if (HEAP8[i12 + (i2 + i1) >> 0] | 0) {
     i1 = 0;
     break L1;
    }
    i1 = _strcmp(i10, i12 + i2 | 0) | 0;
    if (!i1) break;
    i1 = (i1 | 0) < 0;
    if ((i3 | 0) == 1) {
     i1 = 0;
     break L1;
    } else {
     i7 = i1 ? i7 : i6;
     i3 = i1 ? i5 : i3 - i5 | 0;
    }
   }
   i1 = i4 + i8 | 0;
   i2 = _swapc(HEAP32[i12 + (i1 << 2) >> 2] | 0, i11) | 0;
   i1 = _swapc(HEAP32[i12 + (i1 + 1 << 2) >> 2] | 0, i11) | 0;
   if (i1 >>> 0 < i13 >>> 0 & i2 >>> 0 < (i13 - i1 | 0) >>> 0) i1 = (HEAP8[i12 + (i1 + i2) >> 0] | 0) == 0 ? i12 + i1 | 0 : 0; else i1 = 0;
  } else i1 = 0; else i1 = 0;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function _T1_Get_Advances(i2, i5, i6, i1, i7) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 1520 | 0;
 i8 = i10 + 1504 | 0;
 i9 = i10;
 if (i1 & 16 | 0) {
  if (!i6) {
   i9 = 0;
   STACKTOP = i10;
   return i9 | 0;
  }
  _memset(i7 | 0, 0, i6 << 2 | 0) | 0;
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i1 = FUNCTION_TABLE_iiiiiiiiii[HEAP32[HEAP32[(HEAP32[i2 + 488 >> 2] | 0) + 12 >> 2] >> 2] & 1](i9, i2, 0, 0, HEAP32[i2 + 420 >> 2] | 0, HEAP32[i2 + 528 >> 2] | 0, 0, 0, 180) | 0;
 if (i1 | 0) {
  i9 = i1;
  STACKTOP = i10;
  return i9 | 0;
 }
 HEAP8[i9 + 70 >> 0] = 1;
 HEAP8[i9 + 68 >> 0] = 0;
 HEAP32[i9 + 1364 >> 2] = HEAP32[i2 + 404 >> 2];
 HEAP32[i9 + 1368 >> 2] = HEAP32[i2 + 408 >> 2];
 HEAP32[i9 + 1372 >> 2] = HEAP32[i2 + 412 >> 2];
 HEAP32[i9 + 1488 >> 2] = HEAP32[i2 + 544 >> 2];
 HEAP32[i9 + 1492 >> 2] = HEAP32[i2 + 540 >> 2];
 if (!i6) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i3 = i9 + 4 | 0;
 i4 = i9 + 40 | 0;
 i2 = 0;
 do {
  if (!(_T1_Parse_Glyph_And_Get_Char_String(i9, i2 + i5 | 0, i8) | 0)) {
   i1 = HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 128 >> 2] | 0) + 48 >> 2] | 0;
   if (i1 | 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 63](HEAP32[i1 + 4 >> 2] | 0, i8);
   i1 = (_FT_RoundFix(HEAP32[i4 >> 2] | 0) | 0) >> 16;
  } else i1 = 0;
  HEAP32[i7 + (i2 << 2) >> 2] = i1;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i6 | 0));
 i1 = 0;
 STACKTOP = i10;
 return i1 | 0;
}

function _little2_predefinedEntityName(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 L1 : do switch ((i3 - i2 | 0) / 2 | 0 | 0) {
 case 2:
  {
   if (!(HEAP8[i2 + 3 >> 0] | 0)) if ((HEAP8[i2 + 2 >> 0] | 0) == 116) {
    if (!(HEAP8[i2 + 1 >> 0] | 0)) i1 = HEAP8[i2 >> 0] | 0; else i1 = -1;
    i3 = (i1 | 0) == 108 ? 60 : (i1 | 0) == 103 ? 62 : 0;
    return i3 | 0;
   }
   break;
  }
 case 3:
  {
   if (!(HEAP8[i2 + 1 >> 0] | 0)) if ((HEAP8[i2 >> 0] | 0) == 97) if (!(HEAP8[i2 + 3 >> 0] | 0)) if ((HEAP8[i2 + 2 >> 0] | 0) == 109) if (!(HEAP8[i2 + 5 >> 0] | 0)) if ((HEAP8[i2 + 4 >> 0] | 0) == 112) {
    i3 = 38;
    return i3 | 0;
   }
   break;
  }
 case 4:
  {
   if (!(HEAP8[i2 + 1 >> 0] | 0)) switch (HEAP8[i2 >> 0] | 0) {
   case 113:
    {
     if (HEAP8[i2 + 3 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 2 >> 0] | 0) != 117) break L1;
     if (HEAP8[i2 + 5 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 4 >> 0] | 0) != 111) break L1;
     if (HEAP8[i2 + 7 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 6 >> 0] | 0) == 116) i1 = 34; else break L1;
     return i1 | 0;
    }
   case 97:
    {
     if (HEAP8[i2 + 3 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 2 >> 0] | 0) != 112) break L1;
     if (HEAP8[i2 + 5 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 4 >> 0] | 0) != 111) break L1;
     if (HEAP8[i2 + 7 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 6 >> 0] | 0) == 115) i1 = 39; else break L1;
     return i1 | 0;
    }
   default:
    break L1;
   }
   break;
  }
 default:
  {}
 } while (0);
 i3 = 0;
 return i3 | 0;
}

function _big2_predefinedEntityName(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 L1 : do switch ((i3 - i2 | 0) / 2 | 0 | 0) {
 case 2:
  {
   if (!(HEAP8[i2 + 2 >> 0] | 0)) if ((HEAP8[i2 + 3 >> 0] | 0) == 116) {
    if (!(HEAP8[i2 >> 0] | 0)) i1 = HEAP8[i2 + 1 >> 0] | 0; else i1 = -1;
    i3 = (i1 | 0) == 108 ? 60 : (i1 | 0) == 103 ? 62 : 0;
    return i3 | 0;
   }
   break;
  }
 case 3:
  {
   if (!(HEAP8[i2 >> 0] | 0)) if ((HEAP8[i2 + 1 >> 0] | 0) == 97) if (!(HEAP8[i2 + 2 >> 0] | 0)) if ((HEAP8[i2 + 3 >> 0] | 0) == 109) if (!(HEAP8[i2 + 4 >> 0] | 0)) if ((HEAP8[i2 + 5 >> 0] | 0) == 112) {
    i3 = 38;
    return i3 | 0;
   }
   break;
  }
 case 4:
  {
   if (!(HEAP8[i2 >> 0] | 0)) switch (HEAP8[i2 + 1 >> 0] | 0) {
   case 113:
    {
     if (HEAP8[i2 + 2 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 3 >> 0] | 0) != 117) break L1;
     if (HEAP8[i2 + 4 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 5 >> 0] | 0) != 111) break L1;
     if (HEAP8[i2 + 6 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 7 >> 0] | 0) == 116) i1 = 34; else break L1;
     return i1 | 0;
    }
   case 97:
    {
     if (HEAP8[i2 + 2 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 3 >> 0] | 0) != 112) break L1;
     if (HEAP8[i2 + 4 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 5 >> 0] | 0) != 111) break L1;
     if (HEAP8[i2 + 6 >> 0] | 0) break L1;
     if ((HEAP8[i2 + 7 >> 0] | 0) == 115) i1 = 39; else break L1;
     return i1 | 0;
    }
   default:
    break L1;
   }
   break;
  }
 default:
  {}
 } while (0);
 i3 = 0;
 return i3 | 0;
}

function _FcNameUnparseLangSet(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = HEAP32[i8 + 4 >> 2] | 0;
 i6 = i6 >>> 0 < 8 ? i6 : 8;
 L1 : do if ((i6 | 0) > 0) {
  i7 = 0;
  i1 = 1;
  L2 : while (1) {
   i4 = HEAP32[i8 + 8 + (i7 << 2) >> 2] | 0;
   if (i4) {
    i5 = i7 << 5;
    i3 = 0;
    do {
     if (1 << i3 & i4) {
      i2 = i3 | i5;
      if (!i1) if (!(_FcStrBufChar(i9, 124) | 0)) {
       i1 = 0;
       i4 = 19;
       break L2;
      }
      if (!(_FcStrBufString(i9, 30904 + ((HEAPU8[63998 + i2 >> 0] | 0) * 24 | 0) | 0) | 0)) {
       i1 = 0;
       i4 = 19;
       break L2;
      } else i1 = 0;
     }
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) < 32);
   }
   i7 = i7 + 1 | 0;
   if ((i7 | 0) >= (i6 | 0)) {
    i2 = i1;
    break L1;
   }
  }
  if ((i4 | 0) == 19) return i1 | 0;
 } else i2 = 1; while (0);
 i1 = HEAP32[i8 >> 2] | 0;
 if (!i1) {
  i9 = 1;
  return i9 | 0;
 }
 i3 = _FcStrListCreate(i1) | 0;
 if (!i3) {
  i9 = 0;
  return i9 | 0;
 } else i1 = i2;
 while (1) {
  i2 = _FcStrListNext(i3) | 0;
  if (!i2) {
   i4 = 18;
   break;
  }
  if (!i1) if (!(_FcStrBufChar(i9, 124) | 0)) {
   i4 = 15;
   break;
  }
  if (!(_FcStrBufString(i9, i2) | 0)) {
   i4 = 17;
   break;
  } else i1 = 0;
 }
 if ((i4 | 0) == 15) {
  _FcStrListDone(i3);
  i9 = 0;
  return i9 | 0;
 } else if ((i4 | 0) == 17) {
  _FcStrListDone(i3);
  i9 = 0;
  return i9 | 0;
 } else if ((i4 | 0) == 18) {
  _FcStrListDone(i3);
  i9 = 1;
  return i9 | 0;
 }
 return 0;
}

function _ft_var_readpackeddeltas(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i10;
 i8 = HEAP32[i5 + 28 >> 2] | 0;
 HEAP32[i7 >> 2] = 0;
 i1 = _ft_mem_realloc(i8, 2, 0, i6, 0, i7) | 0;
 if (!(HEAP32[i7 >> 2] | 0)) i2 = 0; else {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 do {
  if (i2 >>> 0 >= i6 >>> 0) {
   i9 = 11;
   break;
  }
  i3 = (_FT_Stream_GetChar(i5) | 0) & 255;
  i7 = i3 & 63;
  if (!(i3 & 128)) if (!(i3 & 64)) {
   i3 = 0;
   while (1) {
    i11 = (_FT_Stream_GetChar(i5) | 0) << 24 >> 24;
    i4 = i2 + 1 | 0;
    HEAP16[i1 + (i2 << 1) >> 1] = i11;
    i3 = i3 + 1 | 0;
    if (i4 >>> 0 < i6 >>> 0 & i3 >>> 0 <= i7 >>> 0) i2 = i4; else {
     i2 = i4;
     break;
    }
   }
  } else {
   i3 = 0;
   while (1) {
    i11 = _FT_Stream_GetUShort(i5) | 0;
    i4 = i2 + 1 | 0;
    HEAP16[i1 + (i2 << 1) >> 1] = i11;
    i3 = i3 + 1 | 0;
    if (i4 >>> 0 < i6 >>> 0 & i3 >>> 0 <= i7 >>> 0) i2 = i4; else {
     i2 = i4;
     break;
    }
   }
  } else {
   i11 = i2 - i6 | 0;
   i3 = (i3 | -64) ^ 63;
   _memset(i1 + (i2 << 1) | 0, 0, Math_imul(i11 >>> 0 > i3 >>> 0 ? i11 : i3, -2) | 0) | 0;
   i3 = 0;
   do {
    i2 = i2 + 1 | 0;
    i3 = i3 + 1 | 0;
   } while (i2 >>> 0 < i6 >>> 0 & i3 >>> 0 <= i7 >>> 0);
  }
 } while (i3 >>> 0 > i7 >>> 0);
 if ((i9 | 0) == 11) {
  STACKTOP = i10;
  return i1 | 0;
 }
 _ft_mem_free(i8, i1);
 i11 = 0;
 STACKTOP = i10;
 return i11 | 0;
}

function _tt_cmap4_set_range(i13, i1) {
 i13 = i13 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 i9 = HEAP32[i13 + 32 >> 2] | 0;
 if (i9 >>> 0 <= i1 >>> 0) {
  i14 = -1;
  return i14 | 0;
 }
 i10 = (HEAP32[i13 + 16 >> 2] | 0) + 14 | 0;
 i11 = i13 + 44 | 0;
 i12 = i9 << 1;
 i5 = i12 + 2 | 0;
 i6 = i13 + 40 | 0;
 i7 = i13 + 48 | 0;
 i8 = i9 + -1 | 0;
 i3 = i1;
 while (1) {
  i4 = i10 + (i3 << 1) | 0;
  i2 = (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0);
  HEAP32[i11 >> 2] = i2;
  i4 = i4 + i5 | 0;
  i15 = (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0);
  HEAP32[i6 >> 2] = i15;
  i4 = i4 + i12 | 0;
  HEAP32[i7 >> 2] = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0)) << 16 >> 16;
  i4 = i4 + i12 | 0;
  i1 = (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0);
  if (i3 >>> 0 >= i8 >>> 0 & (i15 | 0) == 65535 & (i2 | 0) == 65535) {
   i2 = HEAP32[i13 >> 2] | 0;
   if (!i1) {
    i1 = 0;
    break;
   }
   if ((i4 + i1 + 2 | 0) >>> 0 > ((HEAP32[i2 + 500 >> 2] | 0) + (HEAP32[i2 + 504 >> 2] | 0) | 0) >>> 0) {
    i14 = 6;
    break;
   }
  }
  if ((i1 | 0) != 65535) break;
  i1 = i3 + 1 | 0;
  if (i1 >>> 0 < i9 >>> 0) i3 = i1; else {
   i1 = -1;
   i14 = 10;
   break;
  }
 }
 if ((i14 | 0) == 6) {
  HEAP32[i7 >> 2] = 1;
  i1 = 0;
 } else if ((i14 | 0) == 10) return i1 | 0;
 HEAP32[i13 + 52 >> 2] = i1 | 0 ? i4 + i1 | 0 : 0;
 HEAP32[i13 + 36 >> 2] = i3;
 i15 = 0;
 return i15 | 0;
}

function _exp(d1) {
 d1 = +d1;
 var i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, d9 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i4 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i5 = _bitshift64Lshr(i2 | 0, i4 | 0, 63) | 0;
 i6 = i4 & 2147483647;
 do if (i6 >>> 0 > 1082532650) {
  i8 = i4 & 2147483647;
  if (i8 >>> 0 > 2146435072 | (i8 | 0) == 2146435072 & i2 >>> 0 > 0) {
   d7 = d1;
   return +d7;
  }
  if (d1 > 709.782712893384) {
   d7 = d1 * 8988465674311579538646525.0e283;
   return +d7;
  } else {
   if (d1 < -708.3964185322641 & d1 < -745.1332191019411) d1 = 0.0; else {
    i8 = 8;
    break;
   }
   return +d1;
  }
 } else {
  if (i6 >>> 0 > 1071001154) {
   if (i6 >>> 0 > 1072734897) {
    i8 = 8;
    break;
   }
   i2 = (i5 ^ 1) - i5 | 0;
   i8 = 10;
   break;
  }
  if (i6 >>> 0 > 1043333120) {
   d7 = d1;
   d3 = 0.0;
   i2 = 0;
  } else {
   d7 = d1 + 1.0;
   return +d7;
  }
 } while (0);
 if ((i8 | 0) == 8) {
  i2 = ~~(d1 * 1.4426950408889634 + +HEAPF64[1264 + (i5 << 3) >> 3]);
  i8 = 10;
 }
 if ((i8 | 0) == 10) {
  d3 = +(i2 | 0);
  d1 = d1 - d3 * .6931471803691238;
  d3 = d3 * 1.9082149292705877e-10;
  d7 = d1 - d3;
 }
 d9 = d7 * d7;
 d9 = d7 - d9 * (d9 * (d9 * (d9 * (d9 * 4.1381367970572385e-08 + -1.6533902205465252e-06) + 6.613756321437934e-05) + -2.7777777777015593e-03) + .16666666666666602);
 d1 = d1 + (d7 * d9 / (2.0 - d9) - d3) + 1.0;
 if (!i2) {
  d9 = d1;
  return +d9;
 }
 d9 = +_scalbn(d1, i2);
 return +d9;
}

function _FcCharSetPutLeaf(i4, i1, i13, i14) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i8 = i4;
 i9 = i4 + 8 | 0;
 i7 = (HEAP32[i9 >> 2] | 0) + i8 | 0;
 i10 = i4 + 12 | 0;
 i5 = (HEAP32[i10 >> 2] | 0) + i8 | 0;
 i12 = i1 >>> 8;
 if (i1 >>> 0 > 16777215) {
  i14 = 0;
  return i14 | 0;
 }
 i2 = i5;
 i3 = i7;
 i11 = i4 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 do if (!(i1 + -1 & i1)) {
  if (!i1) {
   i1 = _malloc(32) | 0;
   i2 = _malloc(16) | 0;
  } else {
   i6 = _realloc(i7, i1 << 3) | 0;
   i2 = _realloc(i5, i1 << 2) | 0;
   i3 = i6 - i7 | 0;
   if ((i6 | 0) != 0 & (i3 | 0) != 0) {
    i4 = HEAP32[i11 >> 2] | 0;
    if ((i4 | 0) > 0) {
     i1 = 0;
     do {
      i7 = i6 + (i1 << 2) | 0;
      HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - i3;
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) < (i4 | 0));
     i1 = i6;
    } else i1 = i6;
   } else i1 = i6;
  }
  if ((i2 | 0) != 0 & (i1 | 0) != 0) {
   HEAP32[i9 >> 2] = i1 - i8;
   HEAP32[i10 >> 2] = i2 - i8;
   i3 = i1;
   i1 = HEAP32[i11 >> 2] | 0;
   break;
  } else {
   i14 = 0;
   return i14 | 0;
  }
 } while (0);
 i10 = i3 + (i14 << 2) | 0;
 _memmove(i10 + 4 | 0, i10 | 0, i1 - i14 << 2 | 0) | 0;
 i9 = i2 + (i14 << 1) | 0;
 _memmove(i9 + 2 | 0, i9 | 0, (HEAP32[i11 >> 2] | 0) - i14 << 1 | 0) | 0;
 HEAP16[i9 >> 1] = i12;
 HEAP32[i10 >> 2] = i13 - i3;
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 i14 = 1;
 return i14 | 0;
}

function _FT_Get_Glyph(i6, i8) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i9;
 if (!i6) {
  i8 = 37;
  STACKTOP = i9;
  return i8 | 0;
 }
 i5 = HEAP32[i6 >> 2] | 0;
 if (!i8) {
  i8 = 6;
  STACKTOP = i9;
  return i8 | 0;
 }
 i1 = HEAP32[i6 + 72 >> 2] | 0;
 L7 : do if ((i1 | 0) < 1869968492) switch (i1 | 0) {
 case 1651078259:
  {
   i3 = 5104;
   break;
  }
 default:
  i2 = 5;
 } else {
  switch (i1 | 0) {
  case 1869968492:
   break;
  default:
   {
    i2 = 5;
    break L7;
   }
  }
  i3 = 5136;
 } while (0);
 if ((i2 | 0) == 5) {
  i1 = _FT_Lookup_Renderer(i5, i1, 0) | 0;
  if (!i1) {
   i8 = 18;
   STACKTOP = i9;
   return i8 | 0;
  } else i3 = i1 + 20 | 0;
 }
 i7 = _ft_mem_alloc(HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0, i4) | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1 | 0) {
  i8 = i1;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = i5;
 i1 = i7 + 4 | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i7 + 8 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 64 >> 2] << 10;
 HEAP32[i7 + 16 >> 2] = HEAP32[i6 + 68 >> 2] << 10;
 i3 = FUNCTION_TABLE_iii[HEAP32[i3 + 8 >> 2] & 255](i7, i6) | 0;
 if (!i3) {
  HEAP32[i8 >> 2] = i7;
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 i2 = HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
 i1 = HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i7);
 _ft_mem_free(i2, i7);
 i8 = i3;
 STACKTOP = i9;
 return i8 | 0;
}

function _T1_Done_Blend(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = HEAP32[i1 + 100 >> 2] | 0;
 i3 = i1 + 528 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (!i4) return;
 i2 = HEAP32[i4 >> 2] | 0;
 i5 = HEAP32[i4 + 4 >> 2] | 0;
 i1 = i4 + 24 | 0;
 _ft_mem_free(i6, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 if (i2 >>> 0 > 1) _memset(i4 + 28 | 0, 0, (i2 << 2) + -4 | 0) | 0;
 i1 = i4 + 216 | 0;
 _ft_mem_free(i6, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 148 | 0;
 _ft_mem_free(i6, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 288 | 0;
 _ft_mem_free(i6, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 if (i2 | 0) {
  i1 = 0;
  do {
   HEAP32[i4 + 212 + (i1 << 2) >> 2] = 0;
   HEAP32[i4 + 144 + (i1 << 2) >> 2] = 0;
   HEAP32[i4 + 284 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i2 | 0));
 }
 i2 = i4 + 136 | 0;
 _ft_mem_free(i6, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i4 + 140 >> 2] = 0;
 i2 = (i5 | 0) == 0;
 if (!i2) {
  i1 = 0;
  do {
   i7 = i4 + 8 + (i1 << 2) | 0;
   _ft_mem_free(i6, HEAP32[i7 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i5 | 0));
  if (!i2) {
   i1 = 0;
   do {
    i7 = i4 + 88 + (i1 * 12 | 0) + 4 | 0;
    _ft_mem_free(i6, HEAP32[i7 >> 2] | 0);
    HEAP32[i7 >> 2] = 0;
    HEAP8[i4 + 88 + (i1 * 12 | 0) >> 0] = 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i5 | 0));
  }
 }
 _ft_mem_free(i6, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 return;
}

function _composite_key_move(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 if (i1 | 0) {
  _memcpy(i1 | 0, i3 | 0, i2 | 0) | 0;
  return 1;
 }
 i10 = i3 + 24 | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 i9 = i3 + 28 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 L5 : do if (!i2) i11 = i1; else {
  i8 = 0;
  while (1) {
   i5 = HEAP32[i1 + (i8 * 12 | 0) >> 2] | 0;
   if (i5) {
    i6 = i5 + -32 | 0;
    i7 = HEAP32[i5 + -8 >> 2] | 0;
    if (!i7) {
     i1 = 8;
     break;
    }
    i3 = i5 + -4 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) {
     i1 = 8;
     break;
    }
    i4 = i4 + -1 | 0;
    HEAP32[i3 >> 2] = i4;
    if (!i4) {
     i2 = HEAP32[i6 >> 2] | 0;
     if (i2 | 0) {
      i3 = HEAP32[i5 + -24 >> 2] | 0;
      i1 = i5 + -20 | 0;
      if (i3 | 0) HEAP32[i3 + 12 >> 2] = HEAP32[i1 >> 2];
      HEAP32[HEAP32[i1 >> 2] >> 2] = i3;
      i4 = i2 + 32 | 0;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
      i4 = i2 + 20 | 0;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) - i7;
     }
     i2 = HEAP32[i5 + -28 >> 2] | 0;
     FUNCTION_TABLE_vii[HEAP32[i2 + 12 >> 2] & 63](i5 + ((HEAP32[i2 + 20 >> 2] | 0) + 7 & -8) | 0, i5);
     _free(i6);
     i2 = HEAP32[i10 >> 2] | 0;
     i1 = HEAP32[i9 >> 2] | 0;
    }
   }
   i8 = i8 + 1 | 0;
   if (i8 >>> 0 >= i2 >>> 0) {
    i11 = i1;
    break L5;
   }
  }
  if ((i1 | 0) == 8) ___assert_fail(354746, 354776, 466, 354788);
 } while (0);
 _free(i11);
 return 1;
}

function _FcListPatternMatchAny(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 if (!i6) {
  i9 = 0;
  return i9 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) <= 0) {
  i9 = 1;
  return i9 | 0;
 }
 i8 = i6;
 i9 = i6 + 8 | 0;
 i5 = 0;
 L7 : while (1) {
  i4 = (HEAP32[i9 >> 2] | 0) + i8 | 0;
  i2 = i4 + (i5 << 3) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) != 42) {
   i3 = _FcPatternObjectFindElt(i7, i1) | 0;
   if (!i3) {
    i1 = 0;
    i2 = 14;
    break;
   }
   i4 = HEAP32[i4 + (i5 << 3) + 4 >> 2] | 0;
   i1 = i4;
   i1 = (i1 & 1 | 0) == 0 ? i4 : (i1 & -2) + i2 | 0;
   i2 = HEAP32[i3 + 4 >> 2] | 0;
   i4 = i2;
   i4 = (i4 & 1 | 0) == 0 ? i2 : (i4 & -2) + i3 | 0;
   if (i1 | 0) {
    if (!i4) {
     i1 = 0;
     i2 = 14;
     break;
    }
    do {
     i3 = i1 + 8 | 0;
     i2 = i4;
     while (1) {
      if (_FcConfigCompareValue(i2 + 8 | 0, 65561, i3) | 0) break;
      i11 = HEAP32[i2 >> 2] | 0;
      i10 = i11;
      i2 = (i10 & 1 | 0) == 0 ? i11 : (i10 & -2) + i2 | 0;
      if (!i2) {
       i1 = 0;
       i2 = 14;
       break L7;
      }
     }
     if (!i2) {
      i1 = 0;
      i2 = 14;
      break L7;
     }
     i10 = HEAP32[i1 >> 2] | 0;
     i11 = i10;
     i1 = (i11 & 1 | 0) == 0 ? i10 : (i11 & -2) + i1 | 0;
    } while ((i1 | 0) != 0);
   }
  }
  i5 = i5 + 1 | 0;
  if ((i5 | 0) >= (HEAP32[i6 >> 2] | 0)) {
   i1 = 1;
   i2 = 14;
   break;
  }
 }
 if ((i2 | 0) == 14) return i1 | 0;
 return 0;
}

function _outline_add_point(i5, i4, i6) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i3 = i5 + 4 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 do if (i1 >>> 0 < i2 >>> 0) i2 = i5 + 16 | 0; else {
  i1 = i2 << 1;
  i2 = ___errno_location() | 0;
  HEAP32[i2 >> 2] = 0;
  i2 = i5 + 16 | 0;
  i7 = _ass_try_realloc_array(HEAP32[i2 >> 2] | 0, i1, 8) | 0;
  HEAP32[i2 >> 2] = i7;
  i7 = ___errno_location() | 0;
  if (!(HEAP32[i7 >> 2] | 0)) {
   HEAP32[i3 >> 2] = i1;
   i1 = HEAP32[i5 >> 2] | 0;
   break;
  } else {
   i7 = 0;
   return i7 | 0;
  }
 } while (0);
 i3 = i4;
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 i7 = (HEAP32[i2 >> 2] | 0) + (i1 << 3) | 0;
 HEAP32[i7 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i7 + 4 >> 2] = i4;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 if (!(i6 << 24 >> 24)) {
  i7 = 1;
  return i7 | 0;
 }
 i4 = i5 + 8 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = i5 + 12 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 do if (i1 >>> 0 < i2 >>> 0) i2 = i5 + 20 | 0; else {
  i1 = i2 << 1;
  i2 = ___errno_location() | 0;
  HEAP32[i2 >> 2] = 0;
  i2 = i5 + 20 | 0;
  i7 = _ass_try_realloc_array(HEAP32[i2 >> 2] | 0, i1, 1) | 0;
  HEAP32[i2 >> 2] = i7;
  i7 = ___errno_location() | 0;
  if (!(HEAP32[i7 >> 2] | 0)) {
   HEAP32[i3 >> 2] = i1;
   i1 = HEAP32[i4 >> 2] | 0;
   break;
  } else {
   i7 = 0;
   return i7 | 0;
  }
 } while (0);
 HEAP8[(HEAP32[i2 >> 2] | 0) + i1 >> 0] = i6;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 i7 = 1;
 return i7 | 0;
}

function _FcConfigAddRule(i6, i3, i5) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 if (!i3) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 switch (i5 | 0) {
 case 0:
  {
   i1 = i6 + 20 | 0;
   break;
  }
 case 1:
  {
   i1 = i6 + 24 | 0;
   break;
  }
 case 2:
  {
   i1 = i6 + 28 | 0;
   break;
  }
 default:
  {
   i8 = 0;
   STACKTOP = i9;
   return i8 | 0;
  }
 }
 i7 = _malloc(8) | 0;
 if (!i7) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) break; else i1 = i2;
 }
 HEAP32[i1 >> 2] = i7;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = i3;
 i1 = 0;
 do {
  switch (HEAP32[i3 + 4 >> 2] | 0) {
  case 1:
   {
    i4 = i3 + 8 | 0;
    i2 = HEAP32[i4 >> 2] | 0;
    if ((HEAP32[i2 >> 2] | 0) == -1) {
     HEAP32[i2 >> 2] = i5;
     i2 = HEAP32[i4 >> 2] | 0;
    }
    i4 = HEAP32[i2 + 8 >> 2] | 0;
    i1 = (i1 | 0) < (i4 | 0) ? i4 : i1;
    break;
   }
  case 2:
   {
    i4 = HEAP32[HEAP32[i3 + 8 >> 2] >> 2] | 0;
    i1 = (i1 | 0) < (i4 | 0) ? i4 : i1;
    break;
   }
  default:
   {}
  }
  i3 = HEAP32[i3 >> 2] | 0;
 } while ((i3 | 0) != 0);
 i2 = (i1 & -1025) + -48 | 0;
 i1 = i6 + 32 | 0;
 if ((HEAP32[i1 >> 2] | 0) < (i2 | 0)) HEAP32[i1 >> 2] = i2;
 if (!(HEAP32[91917] & 4)) {
  i8 = 1;
  STACKTOP = i9;
  return i8 | 0;
 }
 _printf(354256, i8) | 0;
 _FcSubstPrint(i7);
 i8 = 1;
 STACKTOP = i9;
 return i8 | 0;
}

function _FT_MulDiv_No_Round(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == (i3 | 0)) {
  i7 = i1;
  return i7 | 0;
 }
 i7 = i1 >> 31 | 1;
 i4 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 i5 = (i2 | 0) < 0;
 i1 = i5 ? 0 - i2 | 0 : i2;
 i7 = i5 ? 0 - i7 | 0 : i7;
 i5 = (i3 | 0) < 0;
 i6 = i5 ? 0 - i3 | 0 : i3;
 i7 = i5 ? 0 - i7 | 0 : i7;
 do if (!i6) i1 = 2147483647; else {
  if ((i1 + i4 | 0) >>> 0 < 131072) {
   i1 = ((Math_imul(i1, i4) | 0) >>> 0) / (i6 >>> 0) | 0;
   break;
  }
  i3 = i4 & 65535;
  i2 = i4 >>> 16;
  i9 = i1 & 65535;
  i8 = i1 >>> 16;
  i5 = Math_imul(i9, i2) | 0;
  i4 = (Math_imul(i8, i3) | 0) + i5 | 0;
  i1 = i4 << 16;
  i3 = i1 + (Math_imul(i9, i3) | 0) | 0;
  i1 = (i4 >>> 16) + (Math_imul(i8, i2) | 0) + ((i4 >>> 0 < i5 >>> 0 & 1) << 16) + (i3 >>> 0 < i1 >>> 0 & 1) | 0;
  if (!i1) {
   i1 = (i3 >>> 0) / (i6 >>> 0) | 0;
   break;
  }
  if (i1 >>> 0 < i6 >>> 0) {
   i4 = Math_clz32(i1 | 0) | 0;
   i5 = 32 - i4 | 0;
   i9 = i3 >>> i5 | i1 << i4;
   i2 = (i9 >>> 0) / (i6 >>> 0) | 0;
   i1 = i2;
   i2 = i9 - (Math_imul(i2, i6) | 0) | 0;
   i4 = i3 << i4;
   while (1) {
    i2 = i2 << 1 | i4 >>> 31;
    i3 = i2 >>> 0 < i6 >>> 0;
    i1 = (i3 ^ 1) & 1 | i1 << 1;
    i5 = i5 + -1 | 0;
    if (!i5) break; else {
     i2 = i2 - (i3 ? 0 : i6) | 0;
     i4 = i4 << 1;
    }
   }
  } else i1 = 2147483647;
 } while (0);
 i9 = (i7 | 0) < 0 ? 0 - i1 | 0 : i1;
 return i9 | 0;
}

function _af_property_set(i6, i1, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i7;
 if (!(_strcmp(i1, 283931) | 0)) {
  i2 = HEAP32[i5 >> 2] | 0;
  i3 = 0;
  i1 = 22032;
  while (1) {
   if ((HEAP32[i1 + 8 >> 2] | 0) == (i2 | 0)) if ((HEAP32[i1 + 16 >> 2] | 0) == 10) {
    i2 = 5;
    break;
   }
   i1 = i3 + 1 | 0;
   if ((i1 | 0) == 49) {
    i1 = 6;
    i2 = 19;
    break;
   } else {
    i3 = i1;
    i1 = HEAP32[23492 + (i1 << 2) >> 2] | 0;
   }
  }
  if ((i2 | 0) == 5) {
   HEAP32[i6 + 12 >> 2] = i3;
   STACKTOP = i7;
   return 0;
  } else if ((i2 | 0) == 19) {
   STACKTOP = i7;
   return i1 | 0;
  }
 }
 if (!(_strcmp(i1, 283947) | 0)) {
  HEAP32[i6 + 16 >> 2] = HEAP32[i5 >> 2];
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (_strcmp(i1, 283962) | 0) {
  if (_strcmp(i1, 283980) | 0) {
   i6 = 12;
   STACKTOP = i7;
   return i6 | 0;
  }
  HEAP8[i6 + 20 >> 0] = HEAP8[i5 >> 0] | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i2 = HEAP32[i5 >> 2] | 0;
 do if (!i2) i1 = 35; else {
  i3 = i2 + 116 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i4 >> 2] = i1;
  if (!i1) {
   i1 = _af_face_globals_new(i2, i4, i6) | 0;
   if (i1 | 0) break;
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i1;
   HEAP32[i2 + 120 >> 2] = 62;
  }
  HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 4 >> 2];
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 } while (0);
 i6 = i1;
 STACKTOP = i7;
 return i6 | 0;
}

function _externalEntityContentProcessor(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = _doContent(i4, 1, HEAP32[i4 + 144 >> 2] | 0, i1, i2, i3, (HEAP8[i4 + 484 >> 0] | 0) == 0 & 1) | 0;
 if (i1 | 0) {
  i12 = i1;
  return i12 | 0;
 }
 i12 = i4 + 16 | 0;
 i1 = HEAP32[i4 + 364 >> 2] | 0;
 if (!i1) {
  i12 = 0;
  return i12 | 0;
 }
 while (1) {
  i6 = (HEAP32[i1 + 24 >> 2] | 0) + 1 | 0;
  i7 = i1 + 36 | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  i4 = i5 + i6 | 0;
  i11 = i1 + 4 | 0;
  i3 = HEAP32[i11 >> 2] | 0;
  if ((i3 | 0) == (i4 | 0)) {
   i1 = 0;
   i2 = 12;
   break;
  }
  i10 = i1 + 8 | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  i8 = i2 + i6 | 0;
  i9 = i1 + 40 | 0;
  if ((i8 | 0) > ((HEAP32[i9 >> 2] | 0) - i5 | 0)) {
   i4 = FUNCTION_TABLE_iii[HEAP32[i12 >> 2] & 255](i5, i8) | 0;
   if (!i4) {
    i1 = 1;
    i2 = 12;
    break;
   }
   i2 = i1 + 12 | 0;
   i5 = HEAP32[i7 >> 2] | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i5 | 0)) HEAP32[i2 >> 2] = i4;
   i2 = i1 + 16 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 | 0) HEAP32[i2 >> 2] = i4 + (i3 - i5);
   HEAP32[i7 >> 2] = i4;
   HEAP32[i9 >> 2] = i4 + i8;
   i4 = i4 + i6 | 0;
   i3 = HEAP32[i11 >> 2] | 0;
   i2 = HEAP32[i10 >> 2] | 0;
  }
  _memcpy(i4 | 0, i3 | 0, i2 | 0) | 0;
  HEAP32[i11 >> 2] = i4;
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i2 = 12;
   break;
  }
 }
 if ((i2 | 0) == 12) return i1 | 0;
 return 0;
}

function _t42_parse_font_matrix(i7, i1) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i9;
 if ((FUNCTION_TABLE_iiiii[HEAP32[i1 + 52 >> 2] & 127](i1, 6, i8, 3) | 0) < 6) {
  HEAP32[i1 + 12 >> 2] = 3;
  STACKTOP = i9;
  return;
 }
 i6 = i8 + 12 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
 if (!i2) {
  HEAP32[i1 + 12 >> 2] = 3;
  STACKTOP = i9;
  return;
 }
 i5 = (_FT_DivFix(1e3, i2) | 0) & 65535;
 HEAP16[i7 + 68 >> 1] = i5;
 if ((i2 | 0) == 65536) {
  i3 = i8 + 8 | 0;
  i4 = i8 + 16 | 0;
  i5 = i8 + 4 | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i8 + 20 >> 2] | 0;
 } else {
  i5 = _FT_DivFix(HEAP32[i8 >> 2] | 0, i2) | 0;
  HEAP32[i8 >> 2] = i5;
  i5 = i8 + 4 | 0;
  i3 = _FT_DivFix(HEAP32[i5 >> 2] | 0, i2) | 0;
  HEAP32[i5 >> 2] = i3;
  i3 = i8 + 8 | 0;
  i4 = _FT_DivFix(HEAP32[i3 >> 2] | 0, i2) | 0;
  HEAP32[i3 >> 2] = i4;
  i4 = i8 + 16 | 0;
  i1 = _FT_DivFix(HEAP32[i4 >> 2] | 0, i2) | 0;
  HEAP32[i4 >> 2] = i1;
  i1 = i8 + 20 | 0;
  i2 = _FT_DivFix(HEAP32[i1 >> 2] | 0, i2) | 0;
  HEAP32[i1 >> 2] = i2;
  i1 = HEAP32[i6 >> 2] >> 31 & -131072 | 65536;
  HEAP32[i6 >> 2] = i1;
 }
 HEAP32[i7 + 436 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 444 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 + 440 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i7 + 448 >> 2] = i1;
 HEAP32[i7 + 452 >> 2] = HEAP32[i4 >> 2] >> 16;
 HEAP32[i7 + 456 >> 2] = i2 >> 16;
 STACKTOP = i9;
 return;
}

function _FcCharSetSerializeAlloc(i7, i3) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 if ((HEAP32[i3 >> 2] | 0) == -1) i1 = i3; else {
  i2 = i7 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   i1 = _calloc(1, 1596) | 0;
   HEAP32[i2 >> 2] = i1;
   if (!i1) {
    i7 = 0;
    return i7 | 0;
   } else i2 = i1;
  } else i2 = i1;
  i1 = HEAP32[i2 + 1304 + ((i3 & 67) << 2) >> 2] | 0;
  L7 : do if (i1 | 0) {
   while (1) {
    if ((HEAP32[i1 + 4 >> 2] | 0) == (i3 | 0)) break;
    i1 = HEAP32[i1 >> 2] | 0;
    if (!i1) break L7;
   }
   if (HEAP32[i1 + 8 >> 2] | 0) {
    i7 = 1;
    return i7 | 0;
   }
  } while (0);
  i1 = _FcCharSetFreeze(i2, i3) | 0;
 }
 i5 = i1;
 i6 = i1 + 8 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i3 = (HEAP32[i1 + 12 >> 2] | 0) + i5 | 0;
 if (!(_FcSerializeAlloc(i7, i1, 16) | 0)) {
  i7 = 0;
  return i7 | 0;
 }
 i4 = i1 + 4 | 0;
 if (!(_FcSerializeAlloc(i7, i5 + i2 | 0, HEAP32[i4 >> 2] << 2) | 0)) {
  i7 = 0;
  return i7 | 0;
 }
 if (!(_FcSerializeAlloc(i7, i3, HEAP32[i4 >> 2] << 1) | 0)) {
  i7 = 0;
  return i7 | 0;
 }
 if ((HEAP32[i4 >> 2] | 0) > 0) i1 = 0; else {
  i7 = 1;
  return i7 | 0;
 }
 while (1) {
  i3 = (HEAP32[i6 >> 2] | 0) + i5 | 0;
  if (!(_FcSerializeAlloc(i7, i3 + (HEAP32[i3 + (i1 << 2) >> 2] | 0) | 0, 32) | 0)) {
   i1 = 0;
   i2 = 15;
   break;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (HEAP32[i4 >> 2] | 0)) {
   i1 = 1;
   i2 = 15;
   break;
  }
 }
 if ((i2 | 0) == 15) return i1 | 0;
 return 0;
}

function _t1_parse_font_matrix(i7, i1) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i9;
 if ((FUNCTION_TABLE_iiiii[HEAP32[i1 + 52 >> 2] & 127](i1, 6, i8, 3) | 0) < 6) {
  HEAP32[i1 + 12 >> 2] = 3;
  STACKTOP = i9;
  return;
 }
 i6 = i8 + 12 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
 if (!i2) {
  HEAP32[i1 + 12 >> 2] = 3;
  STACKTOP = i9;
  return;
 }
 i5 = (_FT_DivFix(1e3, i2) | 0) & 65535;
 HEAP16[i7 + 68 >> 1] = i5;
 if ((i2 | 0) == 65536) {
  i3 = i8 + 8 | 0;
  i4 = i8 + 16 | 0;
  i5 = i8 + 4 | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i8 + 20 >> 2] | 0;
 } else {
  i5 = _FT_DivFix(HEAP32[i8 >> 2] | 0, i2) | 0;
  HEAP32[i8 >> 2] = i5;
  i5 = i8 + 4 | 0;
  i3 = _FT_DivFix(HEAP32[i5 >> 2] | 0, i2) | 0;
  HEAP32[i5 >> 2] = i3;
  i3 = i8 + 8 | 0;
  i4 = _FT_DivFix(HEAP32[i3 >> 2] | 0, i2) | 0;
  HEAP32[i3 >> 2] = i4;
  i4 = i8 + 16 | 0;
  i1 = _FT_DivFix(HEAP32[i4 >> 2] | 0, i2) | 0;
  HEAP32[i4 >> 2] = i1;
  i1 = i8 + 20 | 0;
  i2 = _FT_DivFix(HEAP32[i1 >> 2] | 0, i2) | 0;
  HEAP32[i1 >> 2] = i2;
  i1 = HEAP32[i6 >> 2] >> 31 & -131072 | 65536;
  HEAP32[i6 >> 2] = i1;
 }
 HEAP32[i7 + 436 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 444 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 + 440 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i7 + 448 >> 2] = i1;
 HEAP32[i7 + 452 >> 2] = HEAP32[i4 >> 2] >> 16;
 HEAP32[i7 + 456 >> 2] = i2 >> 16;
 STACKTOP = i9;
 return;
}

function _FT_Match_Size(i6, i1, i7, i8) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!(HEAP32[i6 + 8 >> 2] & 2)) {
  i8 = 35;
  return i8 | 0;
 }
 if (HEAP32[i1 >> 2] | 0) {
  i8 = 7;
  return i8 | 0;
 }
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = ((Math_imul(i3, i5) | 0) + 36 | 0) / 72 | 0;
 i4 = (i5 | 0) == 0 ? i3 : i4;
 i5 = HEAP32[i1 + 16 >> 2] | 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = ((Math_imul(i2, i5) | 0) + 36 | 0) / 72 | 0;
 i1 = (i5 | 0) == 0 ? i2 : i1;
 i2 = (i2 | 0) == 0;
 if ((i3 | 0) != 0 & i2) {
  i5 = i4;
  i1 = i4;
 } else {
  i5 = i1;
  i1 = (i3 | 0) == 0 ? (i2 ? i4 : i1) : i4;
 }
 i3 = i1 + 32 | 0;
 i4 = i5 + 32 | 0;
 i5 = HEAP32[i6 + 28 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  i8 = 23;
  return i8 | 0;
 }
 i2 = HEAP32[i6 + 32 >> 2] | 0;
 L13 : do if (!(i7 << 24 >> 24)) {
  i1 = 0;
  while (1) {
   if (((HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0) + 32 ^ i4) >>> 0 <= 63) if (((HEAP32[i2 + (i1 << 4) + 8 >> 2] | 0) + 32 ^ i3) >>> 0 <= 63) break L13;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i5 | 0)) {
    i1 = 23;
    break;
   }
  }
  return i1 | 0;
 } else {
  i1 = 0;
  while (1) {
   if (((HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0) + 32 ^ i4) >>> 0 <= 63) break L13;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i5 | 0)) {
    i1 = 23;
    break;
   }
  }
  return i1 | 0;
 } while (0);
 if (!i8) {
  i8 = 0;
  return i8 | 0;
 }
 HEAP32[i8 >> 2] = i1;
 i8 = 0;
 return i8 | 0;
}

function _contentProcessor(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = _doContent(i4, 0, HEAP32[i4 + 144 >> 2] | 0, i1, i2, i3, (HEAP8[i4 + 484 >> 0] | 0) == 0 & 1) | 0;
 if (i1 | 0) {
  i12 = i1;
  return i12 | 0;
 }
 i12 = i4 + 16 | 0;
 i1 = HEAP32[i4 + 364 >> 2] | 0;
 if (!i1) {
  i12 = 0;
  return i12 | 0;
 }
 while (1) {
  i6 = (HEAP32[i1 + 24 >> 2] | 0) + 1 | 0;
  i7 = i1 + 36 | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  i4 = i5 + i6 | 0;
  i11 = i1 + 4 | 0;
  i3 = HEAP32[i11 >> 2] | 0;
  if ((i3 | 0) == (i4 | 0)) {
   i1 = 0;
   i2 = 12;
   break;
  }
  i10 = i1 + 8 | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  i8 = i2 + i6 | 0;
  i9 = i1 + 40 | 0;
  if ((i8 | 0) > ((HEAP32[i9 >> 2] | 0) - i5 | 0)) {
   i4 = FUNCTION_TABLE_iii[HEAP32[i12 >> 2] & 255](i5, i8) | 0;
   if (!i4) {
    i1 = 1;
    i2 = 12;
    break;
   }
   i2 = i1 + 12 | 0;
   i5 = HEAP32[i7 >> 2] | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i5 | 0)) HEAP32[i2 >> 2] = i4;
   i2 = i1 + 16 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 | 0) HEAP32[i2 >> 2] = i4 + (i3 - i5);
   HEAP32[i7 >> 2] = i4;
   HEAP32[i9 >> 2] = i4 + i8;
   i4 = i4 + i6 | 0;
   i3 = HEAP32[i11 >> 2] | 0;
   i2 = HEAP32[i10 >> 2] | 0;
  }
  _memcpy(i4 | 0, i3 | 0, i2 | 0) | 0;
  HEAP32[i11 >> 2] = i4;
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i2 = 12;
   break;
  }
 }
 if ((i2 | 0) == 12) return i1 | 0;
 return 0;
}

function _cff_get_ros(i1, i4, i6, i7) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i5 = HEAP32[i1 + 656 >> 2] | 0;
 if (!i5) {
  i7 = 0;
  return i7 | 0;
 }
 i2 = HEAP32[i5 + 1456 >> 2] | 0;
 if ((i2 | 0) == 65535) {
  i7 = 6;
  return i7 | 0;
 }
 if (i4 | 0) {
  i3 = i5 + 2964 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (!i1) {
   if (i2 >>> 0 > 390) {
    i1 = i2 + -391 | 0;
    if ((HEAP32[i5 + 1312 >> 2] | 0) >>> 0 > i1 >>> 0) i1 = HEAP32[(HEAP32[i5 + 1316 >> 2] | 0) + (i1 << 2) >> 2] | 0; else i1 = 0;
   } else {
    i1 = HEAP32[i5 + 2956 >> 2] | 0;
    if (!i1) i1 = 0; else i1 = FUNCTION_TABLE_ii[HEAP32[i1 + 20 >> 2] & 63](i2) | 0;
   }
   HEAP32[i3 >> 2] = i1;
  }
  HEAP32[i4 >> 2] = i1;
 }
 if (i6 | 0) {
  i3 = i5 + 2968 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (!i1) {
   i1 = HEAP32[i5 + 1460 >> 2] | 0;
   do if ((i1 | 0) == 65535) i1 = 0; else if (i1 >>> 0 > 390) {
    i1 = i1 + -391 | 0;
    if ((HEAP32[i5 + 1312 >> 2] | 0) >>> 0 <= i1 >>> 0) {
     i1 = 0;
     break;
    }
    i1 = HEAP32[(HEAP32[i5 + 1316 >> 2] | 0) + (i1 << 2) >> 2] | 0;
    break;
   } else {
    i2 = HEAP32[i5 + 2956 >> 2] | 0;
    if (!i2) {
     i1 = 0;
     break;
    }
    i1 = FUNCTION_TABLE_ii[HEAP32[i2 + 20 >> 2] & 63](i1) | 0;
    break;
   } while (0);
   HEAP32[i3 >> 2] = i1;
  }
  HEAP32[i6 >> 2] = i1;
 }
 if (!i7) {
  i7 = 0;
  return i7 | 0;
 }
 HEAP32[i7 >> 2] = HEAP32[i5 + 1464 >> 2];
 i7 = 0;
 return i7 | 0;
}

function _cf2_arrstack_push(i8, i9) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i11;
 i10 = i8 + 20 | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 i6 = i8 + 12 | 0;
 do if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
  i7 = (HEAP32[i8 + 16 >> 2] | 0) + i2 | 0;
  HEAP32[i5 >> 2] = 0;
  i3 = i8 + 8 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  i2 = Math_imul(i4, i7) | 0;
  if ((2147483647 / (i4 >>> 0) | 0) >>> 0 >= i7 >>> 0) {
   i4 = i8 + 24 | 0;
   i12 = i8 + 28 | 0;
   i1 = _ft_mem_realloc(HEAP32[i8 >> 2] | 0, 1, HEAP32[i4 >> 2] | 0, i2, HEAP32[i12 >> 2] | 0, i5) | 0;
   HEAP32[i12 >> 2] = i1;
   if (!(HEAP32[i5 >> 2] | 0)) {
    HEAP32[i6 >> 2] = i7;
    HEAP32[i4 >> 2] = i2;
    i2 = HEAP32[i10 >> 2] | 0;
    if (i2 >>> 0 <= i7 >>> 0) break;
    i1 = HEAP32[i8 + 4 >> 2] | 0;
    if (i1 | 0) if (!(HEAP32[i1 >> 2] | 0)) HEAP32[i1 >> 2] = 130;
    HEAP32[i10 >> 2] = i7;
    STACKTOP = i11;
    return;
   }
  }
  i1 = HEAP32[i8 + 4 >> 2] | 0;
  if (!i1) {
   STACKTOP = i11;
   return;
  }
  if (HEAP32[i1 >> 2] | 0) {
   STACKTOP = i11;
   return;
  }
  HEAP32[i1 >> 2] = 64;
  STACKTOP = i11;
  return;
 } else {
  i3 = i8 + 8 | 0;
  i1 = HEAP32[i8 + 28 >> 2] | 0;
 } while (0);
 i12 = HEAP32[i3 >> 2] | 0;
 _memcpy(i1 + (Math_imul(i12, i2) | 0) | 0, i9 | 0, i12 | 0) | 0;
 HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 STACKTOP = i11;
 return;
}

function _ass_expand_vert_c(i3, i4, i14, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i2 = i1 << 1;
 i13 = i2 + 4 | 0;
 i12 = i1 << 4;
 if (!i14) return;
 if (!i13) {
  i1 = 0;
  do i1 = i1 + 16 | 0; while (i1 >>> 0 < i14 >>> 0);
  return;
 }
 i11 = ((i2 + 3 | 0) >>> 1 << 5) + 32 | 0;
 i1 = 0;
 while (1) {
  i2 = 0;
  i5 = 0;
  i7 = i3;
  while (1) {
   i8 = i5 + -32 | 0;
   i8 = i8 >>> 0 < i12 >>> 0 ? i4 + (i8 << 1) | 0 : 368376;
   i9 = i5 + -16 | 0;
   i9 = i9 >>> 0 < i12 >>> 0 ? i4 + (i9 << 1) | 0 : 368376;
   i10 = i5 >>> 0 < i12 >>> 0 ? i4 + (i5 << 1) | 0 : 368376;
   i6 = 0;
   do {
    i18 = HEAP16[i8 + (i6 << 1) >> 1] | 0;
    i16 = HEAP16[i10 + (i6 << 1) >> 1] | 0;
    i15 = HEAP16[i9 + (i6 << 1) >> 1] | 0;
    i17 = (((i16 + i18 | 0) >>> 1 & 32767) + i15 | 0) >>> 1 & 32767;
    i15 = i15 + 1 | 0;
    HEAP16[i7 + (i6 << 1) >> 1] = (((i17 + i18 | 0) >>> 1 & 32767) + i15 | 0) >>> 1 & 32767;
    HEAP16[i7 + (i6 + 16 << 1) >> 1] = (((i17 + i16 | 0) >>> 1 & 32767) + i15 | 0) >>> 1 & 32767;
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != 16);
   i2 = i2 + 2 | 0;
   if (i2 >>> 0 >= i13 >>> 0) break; else {
    i5 = i5 + 16 | 0;
    i7 = i7 + 64 | 0;
   }
  }
  i1 = i1 + 16 | 0;
  if (i1 >>> 0 >= i14 >>> 0) break; else {
   i3 = i3 + (i11 << 1) | 0;
   i4 = i4 + (i12 << 1) | 0;
  }
 }
 return;
}

function _ass_font_provider_free(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = HEAP32[i8 >> 2] | 0;
 i7 = i5 + 16 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i6 = i5 + 24 | 0;
  i4 = 0;
  while (1) {
   i2 = HEAP32[i6 >> 2] | 0;
   i3 = i2 + (i4 * 52 | 0) + 44 | 0;
   if ((HEAP32[i3 >> 2] | 0) == (i8 | 0)) {
    _ass_font_provider_free_fontinfo(i2 + (i4 * 52 | 0) | 0);
    i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0;
    if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](HEAP32[i2 + (i4 * 52 | 0) + 48 >> 2] | 0);
    HEAP32[i3 >> 2] = 0;
    i2 = HEAP32[i7 >> 2] | 0;
   } else i2 = i1;
   i4 = i4 + 1 | 0;
   if ((i4 | 0) >= (i2 | 0)) break; else i1 = i2;
  }
  if ((i2 | 0) > 0) {
   i6 = i5 + 24 | 0;
   i1 = 0;
   i5 = 0;
   do {
    i3 = HEAP32[i6 >> 2] | 0;
    if (HEAP32[i3 + (i5 * 52 | 0) + 44 >> 2] | 0) {
     if ((i1 | 0) != (i5 | 0)) {
      i4 = i3 + (i1 * 52 | 0) | 0;
      i2 = i3 + (i5 * 52 | 0) | 0;
      i3 = i4 + 52 | 0;
      do {
       HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
       i4 = i4 + 4 | 0;
       i2 = i2 + 4 | 0;
      } while ((i4 | 0) < (i3 | 0));
      i2 = HEAP32[i7 >> 2] | 0;
     }
     i1 = i1 + 1 | 0;
    }
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) < (i2 | 0));
  } else i1 = 0;
 } else i1 = 0;
 HEAP32[i7 >> 2] = i1;
 i1 = HEAP32[i8 + 20 >> 2] | 0;
 if (!i1) {
  _free(i8);
  return;
 }
 FUNCTION_TABLE_vi[i1 & 127](HEAP32[i8 + 40 >> 2] | 0);
 _free(i8);
 return;
}

function _ass_renderer_done(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[i4 + 120 >> 2] | 0;
 if (i1 | 0) {
  i2 = i1 + 40 | 0;
  i3 = (HEAP32[i2 >> 2] | 0) + -1 | 0;
  HEAP32[i2 >> 2] = i3;
  if (!i3) do {
   i2 = i1;
   i1 = HEAP32[i1 + 28 >> 2] | 0;
   i3 = HEAP32[i2 + 36 >> 2] | 0;
   if (!i3) _ass_aligned_free(HEAP32[i2 + 12 >> 2] | 0); else _ass_cache_dec_ref(i3);
   _free(i2);
  } while ((i1 | 0) != 0);
 }
 i1 = HEAP32[i4 + 124 >> 2] | 0;
 if (i1 | 0) {
  i2 = i1 + 40 | 0;
  i3 = (HEAP32[i2 >> 2] | 0) + -1 | 0;
  HEAP32[i2 >> 2] = i3;
  if (!i3) do {
   i2 = i1;
   i1 = HEAP32[i1 + 28 >> 2] | 0;
   i3 = HEAP32[i2 + 36 >> 2] | 0;
   if (!i3) _ass_aligned_free(HEAP32[i2 + 12 >> 2] | 0); else _ass_cache_dec_ref(i3);
   _free(i2);
  } while ((i1 | 0) != 0);
 }
 _ass_cache_done(HEAP32[i4 + 740 >> 2] | 0);
 _ass_cache_done(HEAP32[i4 + 736 >> 2] | 0);
 _ass_cache_done(HEAP32[i4 + 732 >> 2] | 0);
 _ass_shaper_free(HEAP32[i4 + 116 >> 2] | 0);
 _ass_cache_done(HEAP32[i4 + 728 >> 2] | 0);
 _rasterizer_done(i4 + 760 | 0);
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 if (i1 | 0) _ass_fontselect_free(i1);
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 if (i1 | 0) _FT_Done_FreeType(i1) | 0;
 _free(HEAP32[i4 + 128 >> 2] | 0);
 _free(HEAP32[i4 + 680 >> 2] | 0);
 _free(HEAP32[i4 + 688 >> 2] | 0);
 _free(HEAP32[i4 + 696 >> 2] | 0);
 _free(HEAP32[i4 + 100 >> 2] | 0);
 _free(HEAP32[i4 + 104 >> 2] | 0);
 _free(HEAP32[i4 + 820 >> 2] | 0);
 _free(i4);
 return;
}

function _inflateEnd(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!i4) {
  i7 = -2;
  return i7 | 0;
 }
 i7 = i4 + 28 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (!i1) {
  i7 = -2;
  return i7 | 0;
 }
 i6 = i4 + 36 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if (!i2) {
  i7 = -2;
  return i7 | 0;
 }
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i5) i3 = i4 + 40 | 0; else {
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 & -2 | 0) == 4) {
   FUNCTION_TABLE_vii[i2 & 63](HEAP32[i4 + 40 >> 2] | 0, HEAP32[i5 + 12 >> 2] | 0);
   i1 = HEAP32[i5 >> 2] | 0;
  }
  if ((i1 | 0) == 6) FUNCTION_TABLE_vii[HEAP32[i6 >> 2] & 63](HEAP32[i4 + 40 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 28 >> 2] = 0;
  HEAP32[i5 + 32 >> 2] = 0;
  i2 = i5 + 40 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i5 + 52 >> 2] = i1;
  HEAP32[i5 + 48 >> 2] = i1;
  i3 = HEAP32[i5 + 56 >> 2] | 0;
  if (i3) {
   i1 = FUNCTION_TABLE_iiii[i3 & 127](0, 0, 0) | 0;
   HEAP32[i5 + 60 >> 2] = i1;
   HEAP32[i4 + 48 >> 2] = i1;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  i3 = i4 + 40 | 0;
  FUNCTION_TABLE_vii[HEAP32[i6 >> 2] & 63](HEAP32[i3 >> 2] | 0, i1);
  FUNCTION_TABLE_vii[HEAP32[i6 >> 2] & 63](HEAP32[i3 >> 2] | 0, HEAP32[i5 + 36 >> 2] | 0);
  FUNCTION_TABLE_vii[HEAP32[i6 >> 2] & 63](HEAP32[i3 >> 2] | 0, i5);
  i2 = HEAP32[i6 >> 2] | 0;
  i1 = HEAP32[i7 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[i2 & 63](HEAP32[i3 >> 2] | 0, i1);
 HEAP32[i7 >> 2] = 0;
 i7 = 0;
 return i7 | 0;
}

function _parse_weight_vector(i1, i11) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i9 = i12 + 8 | 0;
 i10 = i12;
 i4 = i1 + 528 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[i11 + 60 >> 2] & 31](i11, i9, 16, i10);
 i5 = HEAP32[i10 >> 2] | 0;
 do if ((i5 | 0) < 0) i1 = 162; else if ((i5 | 0) == 0 | (i5 | 0) > 16) i1 = 3; else {
  if (!i3) i6 = 5; else {
   i2 = HEAP32[i3 >> 2] | 0;
   if (!i2) i6 = 5; else if ((i2 | 0) == (i5 | 0)) i1 = i5; else {
    i1 = 3;
    break;
   }
  }
  if ((i6 | 0) == 5) {
   i1 = _t1_allocate_blend(i1, i5, 0) | 0;
   if (i1 | 0) break;
   i3 = HEAP32[i4 >> 2] | 0;
   i1 = HEAP32[i10 >> 2] | 0;
  }
  i6 = HEAP32[i11 >> 2] | 0;
  i7 = i11 + 8 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i4 = i11 + 40 | 0;
   i5 = i3 + 136 | 0;
   i2 = i3 + 140 | 0;
   i1 = 0;
   do {
    HEAP32[i11 >> 2] = HEAP32[i9 + (i1 * 12 | 0) >> 2];
    HEAP32[i7 >> 2] = HEAP32[i9 + (i1 * 12 | 0) + 4 >> 2];
    i3 = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 255](i11, 0) | 0;
    HEAP32[(HEAP32[i5 >> 2] | 0) + (i1 << 2) >> 2] = i3;
    HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] = i3;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[i10 >> 2] | 0));
  }
  HEAP32[i11 >> 2] = i6;
  HEAP32[i7 >> 2] = i8;
  i1 = 0;
 } while (0);
 HEAP32[i11 + 12 >> 2] = i1;
 STACKTOP = i12;
 return;
}

function _ass_cache_cut(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i8 = i6 + 20 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (i1 >>> 0 <= i7 >>> 0) return;
 i10 = i6 + 8 | 0;
 i11 = i6 + 32 | 0;
 i12 = i6 + 16 | 0;
 while (1) {
  i5 = HEAP32[i10 >> 2] | 0;
  if (!i5) {
   i9 = 0;
   break;
  }
  i3 = HEAP32[i5 + 24 >> 2] | 0;
  if (!i3) {
   i13 = 5;
   break;
  }
  HEAP32[i10 >> 2] = HEAP32[i5 + 16 >> 2];
  i2 = i5 + 28 | 0;
  i4 = (HEAP32[i2 >> 2] | 0) + -1 | 0;
  HEAP32[i2 >> 2] = i4;
  if (!i4) {
   i4 = HEAP32[i5 + 8 >> 2] | 0;
   i2 = i5 + 12 | 0;
   if (i4 | 0) HEAP32[i4 + 12 >> 2] = HEAP32[i2 >> 2];
   HEAP32[HEAP32[i2 >> 2] >> 2] = i4;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
   HEAP32[i8 >> 2] = i1 - i3;
   i1 = HEAP32[i12 >> 2] | 0;
   if ((HEAP32[i5 + 4 >> 2] | 0) != (i1 | 0)) {
    i13 = 11;
    break;
   }
   i4 = i5 + 32 | 0;
   FUNCTION_TABLE_vii[HEAP32[i1 + 12 >> 2] & 63](i4 + ((HEAP32[i1 + 20 >> 2] | 0) + 7 & -8) | 0, i4);
   _free(i5);
   i1 = HEAP32[i8 >> 2] | 0;
  } else HEAP32[i5 + 20 >> 2] = 0;
  if (i1 >>> 0 <= i7 >>> 0) {
   i13 = 14;
   break;
  }
 }
 if ((i13 | 0) == 5) ___assert_fail(357627, 354776, 491, 357694); else if ((i13 | 0) == 11) ___assert_fail(357708, 354776, 446, 357727); else if ((i13 | 0) == 14) i9 = HEAP32[i10 >> 2] | 0;
 HEAP32[((i9 | 0) == 0 ? i6 + 12 | 0 : i9 + 20 | 0) >> 2] = i10;
 return;
}

function _fix_outline(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i9 = HEAP32[i6 >> 2] | 0;
 i10 = HEAP32[((i4 | 0) > (i9 | 0) ? i2 : i6) >> 2] | 0;
 i5 = HEAP32[i2 + 4 >> 2] | 0;
 i11 = HEAP32[i6 + 4 >> 2] | 0;
 i7 = HEAP32[((i5 | 0) > (i11 | 0) ? i2 : i6) + 4 >> 2] | 0;
 i13 = i2 + 16 | 0;
 i3 = HEAP32[i13 >> 2] | 0;
 i14 = i6 + 16 | 0;
 i8 = HEAP32[i14 >> 2] | 0;
 i1 = (i3 + i4 | 0) < (i8 + i9 | 0);
 i15 = ((HEAP32[i2 + 12 >> 2] | 0) + i5 | 0) < ((HEAP32[i6 + 12 >> 2] | 0) + i11 | 0);
 i15 = (HEAP32[(i15 ? i2 : i6) + 12 >> 2] | 0) - i7 + (i15 ? i5 : i11) | 0;
 if ((i15 | 0) <= 0) return;
 i12 = (HEAP32[(i1 ? i2 : i6) + 16 >> 2] | 0) - i10 + (i1 ? i4 : i9) | 0;
 if ((i12 | 0) <= 0) return;
 i4 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(i7 - i5 | 0, i3) | 0) + (i10 - i4) | 0;
 i3 = 0;
 i1 = (HEAP32[i6 + 20 >> 2] | 0) + (Math_imul(i8, i7 - i11 | 0) | 0) + (i10 - i9) | 0;
 while (1) {
  i2 = 0;
  do {
   i10 = HEAP8[i1 + i2 >> 0] | 0;
   i11 = i4 + i2 | 0;
   i9 = HEAP8[i11 >> 0] | 0;
   HEAP8[i11 >> 0] = (i9 & 255) > (i10 & 255) ? (i9 & 255) - ((i10 & 255) >>> 1 & 255) & 255 : 0;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i12 | 0));
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i15 | 0)) break; else {
   i4 = i4 + (HEAP32[i13 >> 2] | 0) | 0;
   i1 = i1 + (HEAP32[i14 >> 2] | 0) | 0;
  }
 }
 return;
}

function _FcCharSetPrint(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i12 = i15 + 64 | 0;
 i11 = i15 + 56 | 0;
 i10 = i15 + 48 | 0;
 i9 = i15 + 40 | 0;
 i8 = i15 + 32 | 0;
 i14 = i15 + 24 | 0;
 i13 = i15 + 16 | 0;
 i7 = i15 + 8 | 0;
 i6 = i15;
 i5 = i1;
 i3 = (HEAP32[i1 + 8 >> 2] | 0) + i5 | 0;
 i4 = i3;
 i5 = (HEAP32[i1 + 12 >> 2] | 0) + i5 | 0;
 _putchar(10) | 0;
 i2 = i1 + 4 | 0;
 if ((HEAP32[i2 >> 2] | 0) > 0) i1 = 0; else {
  STACKTOP = i15;
  return;
 }
 do {
  i16 = (HEAP32[i4 + (i1 << 2) >> 2] | 0) + i3 | 0;
  _putchar(9) | 0;
  HEAP32[i6 >> 2] = HEAPU16[i5 + (i1 << 1) >> 1];
  _printf(347179, i6) | 0;
  HEAP32[i7 >> 2] = HEAP32[i16 >> 2];
  _printf(347185, i7) | 0;
  HEAP32[i13 >> 2] = HEAP32[i16 + 4 >> 2];
  _printf(347185, i13) | 0;
  HEAP32[i14 >> 2] = HEAP32[i16 + 8 >> 2];
  _printf(347185, i14) | 0;
  HEAP32[i8 >> 2] = HEAP32[i16 + 12 >> 2];
  _printf(347185, i8) | 0;
  HEAP32[i9 >> 2] = HEAP32[i16 + 16 >> 2];
  _printf(347185, i9) | 0;
  HEAP32[i10 >> 2] = HEAP32[i16 + 20 >> 2];
  _printf(347185, i10) | 0;
  HEAP32[i11 >> 2] = HEAP32[i16 + 24 >> 2];
  _printf(347185, i11) | 0;
  HEAP32[i12 >> 2] = HEAP32[i16 + 28 >> 2];
  _printf(347185, i12) | 0;
  _putchar(10) | 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) < (HEAP32[i2 >> 2] | 0));
 STACKTOP = i15;
 return;
}

function _gray_hline(i12, i3, i2, i1, i13) {
 i12 = i12 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = i1 >> 9;
 i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 do if (!(HEAP32[i12 + 1152 >> 2] & 2)) i11 = (i1 | 0) < 255 ? i1 : 255; else {
  i1 = i1 & 511;
  if (i1 >>> 0 > 256) {
   i11 = 512 - i1 | 0;
   break;
  } else {
   i11 = (i1 | 0) == 256 ? 255 : i1;
   break;
  }
 } while (0);
 i9 = (HEAP32[i12 + 172 >> 2] | 0) + i2 | 0;
 i8 = (HEAP32[i12 + 164 >> 2] | 0) + i3 | 0;
 i8 = (i8 | 0) < 32767 ? i8 : 32767;
 if (!i11) return;
 i10 = i12 + 1388 | 0;
 i5 = HEAP32[i10 >> 2] | 0;
 i1 = i12 + 1196 | 0;
 i4 = i12 + 1196 + (i5 * 6 | 0) | 0;
 i6 = (i5 | 0) > 0;
 i7 = i12 + 1400 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if (i6 & (i2 | 0) == (i9 | 0)) {
  i2 = i4 + -4 | 0;
  i3 = HEAPU16[i2 >> 1] | 0;
  if ((i3 + (HEAP16[i4 + -6 >> 1] | 0) | 0) == (i8 | 0)) if ((HEAPU8[i4 + -2 >> 0] | 0) == (i11 | 0)) {
   HEAP16[i2 >> 1] = i3 + i13;
   return;
  } else i2 = i9; else i2 = i9;
 }
 if ((i5 | 0) > 31 | (i2 | 0) != (i9 | 0)) {
  i3 = HEAP32[i12 + 1392 >> 2] | 0;
  if (i6 & (i3 | 0) != 0) FUNCTION_TABLE_viiii[i3 & 31](i2, i5, i1, HEAP32[i12 + 1396 >> 2] | 0);
  HEAP32[i10 >> 2] = 0;
  HEAP32[i7 >> 2] = i9;
 } else i1 = i4;
 HEAP16[i1 >> 1] = i8;
 HEAP16[i1 + 2 >> 1] = i13;
 HEAP8[i1 + 4 >> 0] = i11;
 HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 return;
}

function _ps_parser_to_token_array(i5, i6, i1, i9) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i11 + 12 | 0;
 i4 = i11;
 HEAP32[i9 >> 2] = -1;
 _ps_parser_to_token(i5, i2);
 if ((HEAP32[i2 + 8 >> 2] | 0) != 3) {
  STACKTOP = i11;
  return;
 }
 i10 = HEAP32[i5 >> 2] | 0;
 i7 = i5 + 8 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i3 = i6 + (i1 * 12 | 0) | 0;
 i1 = (HEAP32[i2 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = i1;
 i2 = (HEAP32[i2 + 4 >> 2] | 0) + -1 | 0;
 HEAP32[i7 >> 2] = i2;
 L4 : do if (i1 >>> 0 < i2 >>> 0) {
  i2 = i4 + 8 | 0;
  L6 : do if (!i6) {
   i1 = 0;
   while (1) {
    _ps_parser_to_token(i5, i4);
    if (!(HEAP32[i2 >> 2] | 0)) break L6;
    i1 = i1 + 12 | 0;
    if ((HEAP32[i5 >> 2] | 0) >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) break L4;
   }
  } else {
   i1 = i6;
   while (1) {
    _ps_parser_to_token(i5, i4);
    if (!(HEAP32[i2 >> 2] | 0)) break L6;
    if (i1 >>> 0 < i3 >>> 0) {
     HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
     HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
     HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
    }
    i1 = i1 + 12 | 0;
    if ((HEAP32[i5 >> 2] | 0) >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) break L4;
   }
  } while (0);
 } else i1 = i6; while (0);
 HEAP32[i9 >> 2] = (i1 - i6 | 0) / 12 | 0;
 HEAP32[i5 >> 2] = i10;
 HEAP32[i7 >> 2] = i8;
 STACKTOP = i11;
 return;
}

function _FcCacheFindByAddr(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[91921] | 0;
 L1 : do if (!i1) {
  while (1) {
   i1 = _malloc(28) | 0;
   _pthread_mutex_init(i1 | 0, 0) | 0;
   i2 = HEAP32[91921] | 0;
   if (!i2) HEAP32[91921] = i1;
   if (!i2) break;
   _pthread_mutex_destroy(i1 | 0) | 0;
   i1 = HEAP32[91921] | 0;
   if (i1 | 0) {
    i3 = 5;
    break L1;
   }
  }
  _pthread_mutex_lock(i1 | 0) | 0;
  _FcRandom() | 0;
 } else i3 = 5; while (0);
 if ((i3 | 0) == 5) _pthread_mutex_lock(i1 | 0) | 0;
 if (!i6) {
  i6 = 0;
  i5 = HEAP32[91921] | 0;
  _pthread_mutex_unlock(i5 | 0) | 0;
  return i6 | 0;
 }
 i2 = HEAP32[91922] | 0;
 if ((i2 | 0) > 0) {
  i1 = 367692;
  do {
   i5 = i2;
   i2 = i2 + -1 | 0;
   i3 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
   L15 : do if (i3) while (1) {
    i4 = i3 + 24 | 0;
    if (((HEAP32[i3 >> 2] | 0) + (HEAP32[i3 + 8 >> 2] | 0) | 0) >>> 0 > i6 >>> 0) break L15;
    i3 = HEAP32[i3 + 24 + (i2 << 2) >> 2] | 0;
    if (!i3) {
     i1 = i4;
     break;
    } else i1 = i4;
   } while (0);
  } while ((i5 | 0) > 1);
 } else i1 = 367692;
 i1 = HEAP32[i1 >> 2] | 0;
 if (i1 | 0) if (((HEAP32[i1 >> 2] | 0) + (HEAP32[i1 + 8 >> 2] | 0) | 0) >>> 0 > i6 >>> 0) {
  i6 = i1;
  i5 = HEAP32[91921] | 0;
  _pthread_mutex_unlock(i5 | 0) | 0;
  return i6 | 0;
 }
 i6 = 0;
 i5 = HEAP32[91921] | 0;
 _pthread_mutex_unlock(i5 | 0) | 0;
 return i6 | 0;
}

function _FT_GlyphLoader_Add(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 if (!i10) return;
 i8 = i10 + 56 | 0;
 i13 = HEAP16[i8 >> 1] | 0;
 i3 = i13 << 16 >> 16;
 i4 = i10 + 22 | 0;
 i5 = HEAP16[i4 >> 1] | 0;
 i9 = i10 + 58 | 0;
 i1 = (HEAPU16[i9 >> 1] | 0) + i5 & 65535;
 HEAP16[i4 >> 1] = i1;
 i6 = i10 + 20 | 0;
 i2 = (HEAPU16[i6 >> 1] | 0) + i3 & 65535;
 HEAP16[i6 >> 1] = i2;
 i7 = i10 + 84 | 0;
 i12 = i10 + 48 | 0;
 i11 = (HEAP32[i12 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i12 >> 2] = i11;
 i12 = i10 + 68 | 0;
 if (i13 << 16 >> 16 > 0) {
  i2 = HEAP32[i12 >> 2] | 0;
  i1 = 0;
  do {
   i13 = i2 + (i1 << 1) | 0;
   HEAP16[i13 >> 1] = (HEAPU16[i13 >> 1] | 0) + i5;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i3 | 0));
  i1 = HEAP16[i4 >> 1] | 0;
  i2 = HEAP16[i6 >> 1] | 0;
 }
 HEAP16[i9 >> 1] = 0;
 HEAP16[i8 >> 1] = 0;
 HEAP32[i7 >> 2] = 0;
 i1 = i1 << 16 >> 16;
 HEAP32[i10 + 60 >> 2] = (HEAP32[i10 + 24 >> 2] | 0) + (i1 << 3);
 HEAP32[i10 + 64 >> 2] = (HEAP32[i10 + 28 >> 2] | 0) + i1;
 HEAP32[i12 >> 2] = (HEAP32[i10 + 32 >> 2] | 0) + (i2 << 16 >> 16 << 1);
 if (HEAP8[i10 + 16 >> 0] | 0) {
  HEAP32[i10 + 76 >> 2] = (HEAP32[i10 + 40 >> 2] | 0) + (i1 << 3);
  HEAP32[i10 + 80 >> 2] = (HEAP32[i10 + 44 >> 2] | 0) + (i1 << 3);
 }
 HEAP32[i10 + 88 >> 2] = (HEAP32[i10 + 52 >> 2] | 0) + (i11 << 5);
 return;
}

function _tt_size_request(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i6;
 i2 = HEAP32[i5 >> 2] | 0;
 do if (!(HEAP32[i2 + 8 >> 2] & 2)) i1 = 0; else {
  i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i2 + 532 >> 2] | 0) + 104 >> 2] & 127](i2, i4, i3) | 0;
  if (i1 | 0) {
   HEAP32[i5 + 112 >> 2] = -1;
   i2 = HEAP32[i5 >> 2] | 0;
   break;
  }
  i1 = HEAP32[i3 >> 2] | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i3 = i5 + 112 | 0;
  HEAP32[i3 >> 2] = i1;
  if (!(HEAP32[i2 + 8 >> 2] & 1)) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i2 + 532 >> 2] | 0) + 108 >> 2] & 127](i2, i1, i5 + 12 | 0) | 0;
   if (!i1) i1 = 0; else HEAP32[i3 >> 2] = -1;
  } else {
   _FT_Select_Metrics(i2, i1);
   _tt_size_reset(i5) | 0;
   i1 = 0;
  }
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 } while (0);
 _FT_Request_Metrics(i2, i4);
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 1)) {
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 }
 i4 = _tt_size_reset(i5) | 0;
 i3 = i5 + 12 | 0;
 i5 = i5 + 44 | 0;
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP32[i3 + 24 >> 2] = HEAP32[i5 + 24 >> 2];
 i5 = i4;
 STACKTOP = i6;
 return i5 | 0;
}

function _utf8_toUtf16(i2, i8, i6, i9, i7) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0) | (i3 | 0) == (i7 | 0)) {
  i7 = i3;
  i6 = i1;
  HEAP32[i8 >> 2] = i6;
  HEAP32[i9 >> 2] = i7;
  return;
 }
 i5 = i2 + 76 | 0;
 L4 : while (1) {
  i4 = HEAP8[i1 >> 0] | 0;
  i2 = i4 & 255;
  switch (HEAP8[i5 + i2 >> 0] | 0) {
  case 5:
   {
    HEAP16[i3 >> 1] = HEAP8[i1 + 1 >> 0] & 63 | (i4 & 31) << 6;
    i3 = i3 + 2 | 0;
    i1 = i1 + 2 | 0;
    break;
   }
  case 6:
   {
    HEAP16[i3 >> 1] = (HEAP8[i1 + 1 >> 0] & 63) << 6 | i2 << 12 | HEAP8[i1 + 2 >> 0] & 63;
    i3 = i3 + 2 | 0;
    i1 = i1 + 3 | 0;
    break;
   }
  case 7:
   {
    i2 = i3 + 2 | 0;
    if ((i2 | 0) == (i7 | 0)) {
     i2 = 10;
     break L4;
    }
    i4 = ((HEAP8[i1 + 1 >> 0] & 63) << 12 | (i4 & 7) << 18 | (HEAP8[i1 + 2 >> 0] & 63) << 6 | HEAP8[i1 + 3 >> 0] & 63) + -65536 | 0;
    HEAP16[i3 >> 1] = i4 >>> 10 | 55296;
    HEAP16[i2 >> 1] = i4 & 1023 | 56320;
    i3 = i3 + 4 | 0;
    i1 = i1 + 4 | 0;
    break;
   }
  default:
   {
    HEAP16[i3 >> 1] = i4 << 24 >> 24;
    i3 = i3 + 2 | 0;
    i1 = i1 + 1 | 0;
   }
  }
  if ((i1 | 0) == (i6 | 0) | (i3 | 0) == (i7 | 0)) {
   i2 = 10;
   break;
  }
 }
 if ((i2 | 0) == 10) {
  HEAP32[i8 >> 2] = i1;
  HEAP32[i9 >> 2] = i3;
  return;
 }
}

function _attlist2(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 L1 : do switch (i1 | 0) {
 case 18:
  {
   i1 = i4 + 28 | 0;
   if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i4, i2, i3, 345360) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i4, i2, i3, 345366) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i4, i2, i3, 345369) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i4, i2, i3, 345375) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i4, i2, i3, 345296) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i4, i2, i3, 345382) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i4, i2, i3, 345391) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i4, i2, i3, 345399) | 0)) {
    if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i4, i2, i3, 345319) | 0)) break L1;
    HEAP32[i5 >> 2] = 74;
    i5 = 33;
    return i5 | 0;
   } else i1 = 30; else i1 = 29; else i1 = 28; else i1 = 27; else i1 = 26; else i1 = 25; else i1 = 24; else i1 = 23;
   HEAP32[i5 >> 2] = 73;
   i5 = i1;
   return i5 | 0;
  }
 case 23:
  {
   HEAP32[i5 >> 2] = 75;
   i5 = 33;
   return i5 | 0;
  }
 case 15:
  {
   i5 = 33;
   return i5 | 0;
  }
 default:
  if ((i1 | 0) == 28 & (HEAP32[i5 + 16 >> 2] | 0) == 0) {
   i5 = 59;
   return i5 | 0;
  }
 } while (0);
 HEAP32[i5 >> 2] = 41;
 i5 = -1;
 return i5 | 0;
}

function _FcCompareSizeRange(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i6 + 16 | 0;
 i5 = i6;
 _FcValueCanonicalize(i3, i1);
 _FcValueCanonicalize(i5, i2);
 switch (HEAP32[i3 >> 2] | 0) {
 case 2:
  {
   d4 = +HEAPF64[i3 + 8 >> 3];
   i2 = _FcRangeCreateDouble(d4, d4) | 0;
   break;
  }
 case 9:
  {
   i2 = _FcRangeCopy(HEAP32[i3 + 8 >> 2] | 0) | 0;
   break;
  }
 default:
  {
   d4 = -1.0;
   STACKTOP = i6;
   return +d4;
  }
 }
 switch (HEAP32[i5 >> 2] | 0) {
 case 2:
  {
   d4 = +HEAPF64[i5 + 8 >> 3];
   i1 = _FcRangeCreateDouble(d4, d4) | 0;
   i3 = 7;
   break;
  }
 case 9:
  {
   i1 = _FcRangeCopy(HEAP32[i5 + 8 >> 2] | 0) | 0;
   i3 = 7;
   break;
  }
 default:
  {
   d4 = -1.0;
   i1 = 0;
   i3 = 9;
  }
 }
 if ((i3 | 0) == 7) if (!(_FcRangeIsInRange(i2, i1) | 0)) {
  d9 = +HEAPF64[i2 + 8 >> 3];
  d7 = +HEAPF64[i1 >> 3];
  d10 = +Math_abs(+(d9 - d7));
  d8 = +HEAPF64[i2 >> 3];
  d4 = +HEAPF64[i1 + 8 >> 3];
  i3 = d10 < +Math_abs(+(d8 - d4));
  d4 = +Math_abs(+((i3 ? d9 : d8) - (i3 ? d7 : d4)));
  i3 = 10;
 } else {
  d4 = 0.0;
  i3 = 9;
 }
 if ((i3 | 0) == 9) if (i2) i3 = 10;
 if ((i3 | 0) == 10) _FcRangeDestroy(i2);
 if (!i1) {
  d10 = d4;
  STACKTOP = i6;
  return +d10;
 }
 _FcRangeDestroy(i1);
 d10 = d4;
 STACKTOP = i6;
 return +d10;
}

function _pfr_face_done(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!i2) return;
 i5 = HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 8 >> 2] | 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 i6 = i2 + 288 | 0;
 i3 = HEAP32[i2 + 100 >> 2] | 0;
 i4 = i6 + 80 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i6 + 84 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i6 + 88 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i6 + 76 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 + 72 >> 2] = 0;
 HEAP32[i6 + 64 >> 2] = 0;
 HEAP32[i6 + 60 >> 2] = 0;
 i4 = i6 + 100 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 + 92 >> 2] = 0;
 HEAP32[i6 + 96 >> 2] = 0;
 i4 = i6 + 128 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 + 120 >> 2] = 0;
 HEAP32[i6 + 124 >> 2] = 0;
 i4 = i6 + 108 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 + 104 >> 2] = 0;
 i4 = i6 + 136 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1 | 0) do {
  i7 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  _ft_mem_free(i3, i7);
 } while ((i1 | 0) != 0);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 + 140 >> 2] = 0;
 HEAP32[i6 + 132 >> 2] = 0;
 i7 = i2 + 32 | 0;
 _ft_mem_free(i5, HEAP32[i7 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 return;
}

function _parse_color_header(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if (!(_ass_strncasecmp(i1, 355653, 2) | 0)) i3 = 3; else if (!(_ass_strncasecmp(i1, 355656, 2) | 0)) i3 = 3; else i9 = 10;
 if ((i3 | 0) == 3) {
  i9 = 16;
  i1 = i1 + 2 | 0;
 }
 L6 : while (1) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 43:
   {
    i3 = 7;
    break L6;
   }
  case 45:
   {
    i2 = -1;
    i3 = 8;
    break L6;
   }
  case 9:
  case 32:
   break;
  default:
   {
    i2 = 1;
    break L6;
   }
  }
  i1 = i1 + 1 | 0;
 }
 if ((i3 | 0) == 7) {
  i2 = 1;
  i3 = 8;
 }
 if ((i3 | 0) == 8) i1 = i1 + 1 | 0;
 if ((i9 | 0) == 16) {
  i8 = (_ass_strncasecmp(i1, 355656, 2) | 0) == 0;
  i1 = i8 ? i1 + 2 | 0 : i1;
 }
 i5 = HEAP8[i1 >> 0] | 0;
 if (i5 << 24 >> 24 <= 47) {
  i9 = 0;
  i9 = _llvm_bswap_i32(i9 | 0) | 0;
  return i9 | 0;
 }
 i7 = i9 + 87 | 0;
 i8 = i9 + 55 | 0;
 i3 = 0;
 i4 = i1;
 i6 = i5 << 24 >> 24;
 while (1) {
  if ((i6 | 0) < 58) i5 = -48; else if ((i6 | 0) < (i7 | 0) & i5 << 24 >> 24 > 96) i5 = -87; else if ((i6 | 0) < (i8 | 0) & i5 << 24 >> 24 > 64) i5 = -55; else break;
  i3 = (Math_imul(i3, i9) | 0) + i6 + i5 | 0;
  i4 = i4 + 1 | 0;
  i5 = HEAP8[i4 >> 0] | 0;
  if (i5 << 24 >> 24 > 47) i6 = i5 << 24 >> 24; else break;
 }
 i9 = Math_imul((i4 | 0) == (i1 | 0) ? 1 : i2, i3) | 0;
 i9 = _llvm_bswap_i32(i9 | 0) | 0;
 return i9 | 0;
}

function _FT_Done_Size(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 if (!i6) {
  i7 = 36;
  return i7 | 0;
 }
 i2 = HEAP32[i6 >> 2] | 0;
 if (!i2) {
  i7 = 35;
  return i7 | 0;
 }
 i5 = HEAP32[i2 + 96 >> 2] | 0;
 if (!i5) {
  i7 = 34;
  return i7 | 0;
 }
 i7 = HEAP32[i5 + 8 >> 2] | 0;
 i3 = i2 + 108 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  i7 = 36;
  return i7 | 0;
 }
 while (1) {
  if ((HEAP32[i1 + 8 >> 2] | 0) == (i6 | 0)) break;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (!i1) {
   i1 = 36;
   i4 = 17;
   break;
  }
 }
 if ((i4 | 0) == 17) return i1 | 0;
 i8 = HEAP32[i1 >> 2] | 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[(i8 | 0 ? i8 + 4 | 0 : i3) >> 2] = i4;
 HEAP32[(i4 | 0 ? i4 : i2 + 112 | 0) >> 2] = i8;
 FUNCTION_TABLE_vii[HEAP32[i7 + 8 >> 2] & 63](i7, i1);
 i2 = i2 + 88 | 0;
 if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) {
  HEAP32[i2 >> 2] = 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i1 | 0) HEAP32[i2 >> 2] = HEAP32[i1 + 8 >> 2];
 }
 i1 = HEAP32[i6 + 8 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i6);
 i1 = HEAP32[(HEAP32[i5 + 12 >> 2] | 0) + 60 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i6);
 i2 = i6 + 40 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i1 = i7 + 8 | 0;
 if (i3 | 0) FUNCTION_TABLE_vii[HEAP32[i1 >> 2] & 63](i7, i3);
 HEAP32[i2 >> 2] = 0;
 FUNCTION_TABLE_vii[HEAP32[i1 >> 2] & 63](i7, i6);
 i8 = 0;
 return i8 | 0;
}

function _ass_font_new(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 i8 = _ass_cache_get(i1, i5, i6) | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i8) {
  if (HEAP32[i1 >> 2] | 0) {
   i8 = i1;
   STACKTOP = i7;
   return i8 | 0;
  }
  _ass_cache_dec_ref(i1);
  i8 = 0;
  STACKTOP = i7;
  return i8 | 0;
 }
 if (!i1) {
  i8 = 0;
  STACKTOP = i7;
  return i8 | 0;
 }
 HEAP32[i1 + 16 >> 2] = i2;
 HEAP32[i1 + 20 >> 2] = i3;
 HEAP32[i1 + 104 >> 2] = 0;
 HEAP32[i1 + 108 >> 2] = 0;
 i8 = _ass_cache_key(i1) | 0;
 HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[i8 >> 2];
 i8 = HEAP32[i6 >> 2] | 0;
 HEAP32[i8 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAPF64[i8 + 120 >> 3] = 1.0;
 HEAPF64[i8 + 112 >> 3] = 1.0;
 i1 = i8 + 128 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 i8 = (_add_face(i4, i8, 0) | 0) == -1;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i8) {
  HEAP32[i1 >> 2] = 0;
  _ass_cache_commit(HEAP32[i6 >> 2] | 0, 1);
  _ass_cache_dec_ref(HEAP32[i6 >> 2] | 0);
  i8 = 0;
  STACKTOP = i7;
  return i8 | 0;
 } else {
  _ass_cache_commit(i1, 1);
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i8 | 0;
 }
 return 0;
}

function __fribidi__run_list_encode_bidi_types__internal__(i7, i8) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = _malloc(24) | 0;
 if (!i1) {
  i8 = 0;
  return i8 | 0;
 }
 HEAP32[i1 + 16 >> 2] = 128;
 HEAP8[i1 + 20 >> 0] = -1;
 HEAP32[i1 + 8 >> 2] = -1;
 HEAP32[i1 + 12 >> 2] = -1;
 HEAP32[i1 >> 2] = i1;
 HEAP32[i1 + 4 >> 2] = i1;
 L4 : do if ((i8 | 0) > 0) {
  i6 = 0;
  i3 = 0;
  i4 = i1;
  do {
   i2 = HEAP32[i7 + (i6 << 2) >> 2] | 0;
   if ((i2 | 0) != (HEAP32[i4 + 16 >> 2] | 0)) {
    i5 = _malloc(24) | 0;
    if (!i5) {
     i3 = 0;
     break L4;
    }
    HEAP8[i5 + 20 >> 0] = 0;
    i3 = i5 + 4 | 0;
    HEAP32[i3 >> 2] = 0;
    HEAP32[i3 + 4 >> 2] = 0;
    HEAP32[i3 + 8 >> 2] = 0;
    HEAP32[i5 + 16 >> 2] = i2;
    HEAP32[i5 + 8 >> 2] = i6;
    HEAP32[i4 + 12 >> 2] = i6 - (HEAP32[i4 + 8 >> 2] | 0);
    HEAP32[i4 + 4 >> 2] = i5;
    HEAP32[i5 >> 2] = i4;
    i3 = i5;
    i4 = i5;
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (i8 | 0));
 } else {
  i4 = i1;
  i3 = 0;
 } while (0);
 HEAP32[i4 + 12 >> 2] = i8 - (HEAP32[i4 + 8 >> 2] | 0);
 i2 = i4 + 4 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i1 >> 2] = i4;
 if (i3 | 0) {
  i8 = i1;
  return i8 | 0;
 }
 HEAP32[i2 >> 2] = 0;
 do {
  i8 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  _free(i8);
 } while ((i1 | 0) != 0);
 i1 = 0;
 return i1 | 0;
}

function _tt_face_load_cvt(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7 + 4 | 0;
 i1 = i7;
 i2 = HEAP32[i5 + 28 >> 2] | 0;
 i3 = FUNCTION_TABLE_iiiii[HEAP32[i4 + 508 >> 2] & 127](i4, 1668707360, i5, i1) | 0;
 HEAP32[i6 >> 2] = i3;
 if (i3 | 0) {
  HEAP32[i4 + 644 >> 2] = 0;
  HEAP32[i4 + 648 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = (HEAP32[i1 >> 2] | 0) >>> 1;
 i3 = i4 + 644 | 0;
 HEAP32[i3 >> 2] = i1;
 i1 = _ft_mem_realloc(i2, 2, 0, i1, 0, i6) | 0;
 i2 = i4 + 648 | 0;
 HEAP32[i2 >> 2] = i1;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i1 | 0) {
  i6 = i1;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i5, HEAP32[i3 >> 2] << 1) | 0;
 HEAP32[i6 >> 2] = i1;
 if (i1 | 0) {
  i6 = i1;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = HEAP32[i2 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + (i3 << 1) | 0;
 if ((i3 | 0) > 0) do {
  i3 = _FT_Stream_GetUShort(i5) | 0;
  HEAP16[i1 >> 1] = i3;
  i1 = i1 + 2 | 0;
 } while (i1 >>> 0 < i2 >>> 0);
 _FT_Stream_ExitFrame(i5);
 if (!(HEAP8[i4 + 672 >> 0] | 0)) {
  i6 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i7;
  return i6 | 0;
 } else {
  i5 = _tt_face_vary_cvt(i4, i5) | 0;
  HEAP32[i6 >> 2] = i5;
  i6 = i5;
  STACKTOP = i7;
  return i6 | 0;
 }
 return 0;
}

function _get_next_char(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i6;
 i4 = HEAP32[i2 >> 2] | 0;
 HEAP32[i3 >> 2] = i4;
 L1 : do switch (HEAP8[i4 >> 0] | 0) {
 case 9:
  {
   i1 = i4 + 1 | 0;
   HEAP32[i3 >> 2] = i1;
   HEAP32[i2 >> 2] = i1;
   i1 = 32;
   break;
  }
 case 92:
  {
   switch (HEAP8[i4 + 1 >> 0] | 0) {
   case 78:
    break;
   case 110:
    {
     if ((HEAP32[i1 + 516 >> 2] | 0) != 2) {
      i1 = i4 + 2 | 0;
      HEAP32[i3 >> 2] = i1;
      HEAP32[i2 >> 2] = i1;
      i1 = 32;
      break L1;
     }
     break;
    }
   case 125:
    {
     i1 = i4 + 2 | 0;
     HEAP32[i3 >> 2] = i1;
     HEAP32[i2 >> 2] = i1;
     i1 = 125;
     break L1;
    }
   case 104:
    {
     i1 = i4 + 2 | 0;
     HEAP32[i3 >> 2] = i1;
     HEAP32[i2 >> 2] = i1;
     i1 = 160;
     break L1;
    }
   case 123:
    {
     i1 = i4 + 2 | 0;
     HEAP32[i3 >> 2] = i1;
     HEAP32[i2 >> 2] = i1;
     i1 = 123;
     break L1;
    }
   default:
    {
     i5 = 10;
     break L1;
    }
   }
   i1 = i4 + 2 | 0;
   HEAP32[i3 >> 2] = i1;
   HEAP32[i2 >> 2] = i1;
   i1 = 10;
   break;
  }
 default:
  i5 = 10;
 } while (0);
 if ((i5 | 0) == 10) {
  i1 = _ass_utf8_get_char(i3) | 0;
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 }
 STACKTOP = i6;
 return i1 | 0;
}

function _ft_mem_realloc(i1, i4, i5, i6, i3, i7) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i2 = 0, i8 = 0;
 if ((i5 | i4 | i6 | 0) < 0) {
  i5 = 6;
  i6 = i3;
  HEAP32[i7 >> 2] = i5;
  return i6 | 0;
 }
 do if ((i4 | 0) == 0 | (i6 | 0) == 0) if (!i3) {
  i2 = 0;
  i1 = 0;
 } else {
  FUNCTION_TABLE_vii[HEAP32[i1 + 8 >> 2] & 63](i1, i3);
  i2 = 0;
  i1 = 0;
 } else {
  if ((2147483647 / (i4 | 0) | 0 | 0) < (i6 | 0)) {
   i5 = 10;
   i6 = i3;
   HEAP32[i7 >> 2] = i5;
   return i6 | 0;
  }
  i2 = Math_imul(i6, i4) | 0;
  if (i5 | 0) {
   i8 = Math_imul(i5, i4) | 0;
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 12 >> 2] & 127](i1, i8, i2, i3) | 0;
   i8 = (i1 | 0) == 0;
   i2 = i8 ? 64 : 0;
   i1 = i8 ? i3 : i1;
   break;
  }
  if ((i2 | 0) <= 0) {
   i2 = i2 | 0 ? 6 : 0;
   i1 = 0;
   break;
  }
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 255](i1, i2) | 0;
  if (!i1) {
   i6 = 64;
   i8 = 0;
   HEAP32[i7 >> 2] = i6;
   return i8 | 0;
  } else {
   _memset(i1 | 0, 0, i2 | 0) | 0;
   i2 = 0;
   break;
  }
 } while (0);
 if (!((i6 | 0) > (i5 | 0) & (i2 | 0) == 0)) {
  i6 = i2;
  i8 = i1;
  HEAP32[i7 >> 2] = i6;
  return i8 | 0;
 }
 _memset(i1 + (Math_imul(i5, i4) | 0) | 0, 0, Math_imul(i6 - i5 | 0, i4) | 0) | 0;
 i6 = 0;
 i8 = i1;
 HEAP32[i7 >> 2] = i6;
 return i8 | 0;
}

function _FT_Stream_EnterFrame(i8, i7) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = i8 + 20 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[i8 + 4 >> 2] | 0;
 if (!i2) {
  i1 = i8 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i4 >>> 0 <= i2 >>> 0 | (i4 - i2 | 0) >>> 0 < i7 >>> 0) {
   i8 = 85;
   return i8 | 0;
  }
  i6 = (HEAP32[i8 >> 2] | 0) + i2 | 0;
  HEAP32[i8 + 32 >> 2] = i6;
  HEAP32[i8 + 36 >> 2] = i6 + i7;
  HEAP32[i1 >> 2] = i2 + i7;
  i8 = 0;
  return i8 | 0;
 }
 i6 = HEAP32[i8 + 28 >> 2] | 0;
 if (i4 >>> 0 < i7 >>> 0) {
  i8 = 85;
  return i8 | 0;
 }
 if ((i7 | 0) > 0) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i6 + 4 >> 2] & 255](i6, i7) | 0;
  if (!i1) {
   i1 = 64;
   i5 = 7;
  } else i2 = HEAP32[i3 >> 2] | 0;
 } else if (!i7) i1 = 0; else {
  i1 = 6;
  i5 = 7;
 }
 if ((i5 | 0) == 7) {
  HEAP32[i8 >> 2] = 0;
  i8 = i1;
  return i8 | 0;
 }
 HEAP32[i8 >> 2] = i1;
 i4 = i8 + 8 | 0;
 i3 = FUNCTION_TABLE_iiiii[i2 & 127](i8, HEAP32[i4 >> 2] | 0, i1, i7) | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (i3 >>> 0 < i7 >>> 0) {
  if (i1 | 0) FUNCTION_TABLE_vii[HEAP32[i6 + 8 >> 2] & 63](i6, i1);
  HEAP32[i8 >> 2] = 0;
  i2 = 85;
  i1 = 0;
 } else i2 = 0;
 HEAP32[i8 + 32 >> 2] = i1;
 HEAP32[i8 + 36 >> 2] = i1 + i7;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i3;
 i8 = i2;
 return i8 | 0;
}

function _internalSubset(i3, i1, i4, i5, i6) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0;
 switch (i1 | 0) {
 case 16:
  {
   i1 = i6 + 28 | 0;
   i2 = i6 + 68 | 0;
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i6, i4 + (HEAP32[i2 >> 2] << 1) | 0, i5, 345296) | 0) {
    HEAP32[i3 >> 2] = 47;
    i6 = 11;
    return i6 | 0;
   }
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i6, i4 + (HEAP32[i2 >> 2] << 1) | 0, i5, 345303) | 0) {
    HEAP32[i3 >> 2] = 48;
    i6 = 33;
    return i6 | 0;
   }
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i6, i4 + (HEAP32[i2 >> 2] << 1) | 0, i5, 345311) | 0) {
    HEAP32[i3 >> 2] = 49;
    i6 = 39;
    return i6 | 0;
   }
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i6, i4 + (HEAP32[i2 >> 2] << 1) | 0, i5, 345319) | 0) {
    HEAP32[i3 >> 2] = 50;
    i6 = 17;
    return i6 | 0;
   }
   break;
  }
 case 11:
  {
   i6 = 55;
   return i6 | 0;
  }
 case 13:
  {
   i6 = 56;
   return i6 | 0;
  }
 case 28:
  {
   i6 = 60;
   return i6 | 0;
  }
 case 26:
  {
   HEAP32[i3 >> 2] = 51;
   i6 = 3;
   return i6 | 0;
  }
 case -4:
 case 15:
  {
   i6 = 0;
   return i6 | 0;
  }
 default:
  if ((i1 | 0) == 28 & (HEAP32[i3 + 16 >> 2] | 0) == 0) {
   i6 = 59;
   return i6 | 0;
  }
 }
 HEAP32[i3 >> 2] = 41;
 i6 = -1;
 return i6 | 0;
}

function _cf2_builder_moveTo(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i6 = HEAP32[i9 + 20 >> 2] | 0;
 if (!i6) {
  i10 = i9 + 64 | 0;
  HEAP8[i10 >> 0] = 0;
  return;
 }
 i10 = HEAP16[i6 >> 1] | 0;
 if (i10 << 16 >> 16 < 2) i8 = 0; else i8 = (HEAP16[(HEAP32[i6 + 12 >> 2] | 0) + ((i10 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
 i7 = i6 + 2 | 0;
 i1 = HEAP16[i7 >> 1] | 0;
 i2 = i1 << 16 >> 16;
 if (i1 << 16 >> 16 > 1) {
  i3 = HEAP32[i6 + 4 >> 2] | 0;
  i4 = i3 + (i2 << 3) + -8 | 0;
  i5 = (HEAP32[i6 + 8 >> 2] | 0) + i2 + -1 | 0;
  if ((HEAP32[i3 + (i8 << 3) >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) if ((HEAP32[i3 + (i8 << 3) + 4 >> 2] | 0) == (HEAP32[i4 + 4 >> 2] | 0)) {
   i2 = i1 + -1 << 16 >> 16;
   if ((HEAP8[i5 >> 0] | 0) == 1) {
    HEAP16[i7 >> 1] = i2;
    i1 = i2;
   }
  }
 }
 if (i10 << 16 >> 16 <= 0) {
  i10 = i9 + 64 | 0;
  HEAP8[i10 >> 0] = 0;
  return;
 }
 i2 = (i1 << 16 >> 16) + -1 | 0;
 if ((i8 | 0) == (i2 | 0)) {
  HEAP16[i6 >> 1] = i10 + -1 << 16 >> 16;
  HEAP16[i7 >> 1] = i1 + -1 << 16 >> 16;
  i10 = i9 + 64 | 0;
  HEAP8[i10 >> 0] = 0;
  return;
 } else {
  HEAP16[(HEAP32[i6 + 12 >> 2] | 0) + ((i10 << 16 >> 16) + -1 << 1) >> 1] = i2;
  i10 = i9 + 64 | 0;
  HEAP8[i10 >> 0] = 0;
  return;
 }
}

function _cff_property_set(i10, i1, i6) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 if (!(_strcmp(i1, 280216) | 0)) {
  i7 = HEAP32[i6 >> 2] | 0;
  i8 = HEAP32[i6 + 4 >> 2] | 0;
  i9 = HEAP32[i6 + 8 >> 2] | 0;
  i2 = HEAP32[i6 + 12 >> 2] | 0;
  i3 = HEAP32[i6 + 16 >> 2] | 0;
  i4 = HEAP32[i6 + 20 >> 2] | 0;
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i1 = HEAP32[i6 + 28 >> 2] | 0;
  if ((i9 | 0) > (i3 | 0) | ((i7 | 0) > (i9 | 0) ? 1 : (i8 | i7 | i9 | i2 | i3 | i4 | i5 | i1 | 0) < 0)) {
   i10 = 6;
   return i10 | 0;
  }
  if ((i1 | 0) > 500 | ((i4 | 0) > 500 | ((i2 | 0) > 500 | ((i8 | 0) > 500 | (i3 | 0) > (i5 | 0))))) {
   i10 = 6;
   return i10 | 0;
  }
  HEAP32[i10 + 36 >> 2] = i7;
  HEAP32[i10 + 40 >> 2] = i8;
  HEAP32[i10 + 44 >> 2] = i9;
  HEAP32[i10 + 48 >> 2] = i2;
  HEAP32[i10 + 52 >> 2] = i3;
  HEAP32[i10 + 56 >> 2] = i4;
  HEAP32[i10 + 60 >> 2] = i5;
  HEAP32[i10 + 64 >> 2] = i1;
  i10 = 0;
  return i10 | 0;
 }
 if (!(_strcmp(i1, 280237) | 0)) {
  if ((HEAP32[i6 >> 2] | 0) != 1) {
   i10 = 7;
   return i10 | 0;
  }
  HEAP32[i10 + 28 >> 2] = 1;
  i10 = 0;
  return i10 | 0;
 } else {
  if (_strcmp(i1, 280252) | 0) {
   i10 = 12;
   return i10 | 0;
  }
  HEAP8[i10 + 32 >> 0] = HEAP8[i6 >> 0] | 0;
  i10 = 0;
  return i10 | 0;
 }
 return 0;
}

function _tt_cmap12_next(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = i6 + 28 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 L1 : do if ((i2 | 0) != -1) {
  i9 = i6 + 36 | 0;
  i1 = HEAP32[i9 >> 2] | 0;
  i10 = HEAP32[i6 + 40 >> 2] | 0;
  if (i1 >>> 0 < i10 >>> 0) {
   i8 = (HEAP32[i6 + 16 >> 2] | 0) + 16 | 0;
   i2 = i2 + 1 | 0;
   L4 : while (1) {
    i4 = i8 + (i1 * 12 | 0) + 4 | 0;
    i3 = i4 + -4 | 0;
    i3 = (HEAPU8[i3 + 1 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i3 + 3 >> 0] | 0);
    i4 = i4 + 4 | 0;
    i5 = i4 + -4 | 0;
    i5 = (HEAPU8[i5 + 1 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0) << 24 | (HEAPU8[i5 + 2 >> 0] | 0) << 8 | (HEAPU8[i5 + 3 >> 0] | 0);
    i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
    if (i2 >>> 0 <= i5 >>> 0) {
     i4 = ((HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0)) - i3 | 0;
     do {
      i3 = i4 + i2 | 0;
      if (i3 | 0) break L4;
      i2 = i2 + 1 | 0;
     } while (i2 >>> 0 <= i5 >>> 0);
    }
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i10 >>> 0) break L1;
   }
   HEAP32[i7 >> 2] = i2;
   HEAP32[i6 + 32 >> 2] = i3;
   HEAP32[i9 >> 2] = i1;
   return;
  }
 } while (0);
 HEAP8[i6 + 24 >> 0] = 0;
 return;
}

function _FcVStackPopAndDestroy(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i1 = i3 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 if (!i4) return;
 if ((HEAP32[i4 + 4 >> 2] | 0) != (HEAP32[i3 >> 2] | 0)) return;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 switch (HEAP32[i4 + 8 >> 2] | 0) {
 case 19:
  {
   i1 = HEAP32[i4 + 16 >> 2] | 0;
   i2 = HEAP32[i1 + 8 >> 2] | 0;
   if (i2 | 0) _FcExprDestroy(i2);
   _free(i1);
   break;
  }
 case 7:
 case 18:
 case 8:
 case 9:
  {
   _FcExprDestroy(HEAP32[i4 + 16 >> 2] | 0);
   break;
  }
 case 4:
 case 3:
 case 1:
  {
   _FcStrFree(HEAP32[i4 + 16 >> 2] | 0);
   break;
  }
 case 6:
  {
   _FcPatternDestroy(HEAP32[i4 + 16 >> 2] | 0);
   break;
  }
 case 17:
  {
   i2 = HEAP32[i4 + 16 >> 2] | 0;
   _FcExprDestroy(HEAP32[i2 + 16 >> 2] | 0);
   _free(i2);
   break;
  }
 case 12:
  {
   i1 = HEAP32[i4 + 16 >> 2] | 0;
   if (i1 | 0) _free(i1);
   break;
  }
 case 13:
  {
   _FcRangeDestroy(HEAP32[i4 + 16 >> 2] | 0);
   break;
  }
 case 15:
  {
   _FcCharSetDestroy(HEAP32[i4 + 16 >> 2] | 0);
   break;
  }
 case 16:
  {
   _FcLangSetDestroy(HEAP32[i4 + 16 >> 2] | 0);
   break;
  }
 default:
  {}
 }
 i1 = i3 + 1308 | 0;
 i2 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
 if ((i4 | 0) == (i3 + 1312 + (i2 * 24 | 0) | 0)) {
  HEAP32[i1 >> 2] = i2;
  return;
 } else {
  _free(i4);
  return;
 }
}

function _parse_ycbcr_matrix(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 L1 : while (1) {
  i2 = HEAP8[i1 >> 0] | 0;
  switch (i2 << 24 >> 24) {
  case 9:
  case 32:
   break;
  default:
   break L1;
  }
  i1 = i1 + 1 | 0;
 }
 i4 = i1;
 if (!(i2 << 24 >> 24)) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i3 = _strlen(i1) | 0;
 i2 = i1 + i3 | 0;
 L8 : do if ((i3 | 0) > 0) while (1) {
  i3 = i2 + -1 | 0;
  switch (HEAP8[i3 >> 0] | 0) {
  case 9:
  case 32:
   break;
  default:
   break L8;
  }
  if (i3 >>> 0 > i1 >>> 0) i2 = i3; else {
   i2 = i3;
   break L8;
  }
 } while (0);
 i4 = i2 - i4 | 0;
 i4 = i4 >>> 0 < 15 ? i4 : 15;
 _memcpy(i5 | 0, i1 | 0, i4 | 0) | 0;
 HEAP8[i5 + i4 >> 0] = 0;
 if (!(_ass_strcasecmp(i5, 355915) | 0)) i1 = 2; else if (!(_ass_strcasecmp(i5, 355920) | 0)) i1 = 3; else if (!(_ass_strcasecmp(i5, 355927) | 0)) i1 = 4; else if (!(_ass_strcasecmp(i5, 355934) | 0)) i1 = 5; else if (!(_ass_strcasecmp(i5, 355941) | 0)) i1 = 6; else if (!(_ass_strcasecmp(i5, 355948) | 0)) i1 = 7; else if (!(_ass_strcasecmp(i5, 355956) | 0)) i1 = 8; else if (!(_ass_strcasecmp(i5, 355964) | 0)) i1 = 9; else {
  i1 = (_ass_strcasecmp(i5, 355971) | 0) == 0;
  i1 = i1 ? 10 : 1;
 }
 i5 = i1;
 STACKTOP = i6;
 return i5 | 0;
}

function _FcDirCacheCreateTagFile(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i8 + 24 | 0;
 i6 = i8 + 16 | 0;
 i2 = i8 + 8 | 0;
 i1 = i8;
 if (!i5) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (!(_access(i5, 2) | 0)) {
  HEAP32[i1 >> 2] = 348018;
  HEAP32[i1 + 4 >> 2] = 0;
  i4 = _FcStrBuildFilename(i5, i1) | 0;
  if (!i4) {
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  i3 = _FcAtomicCreate(i4) | 0;
  if (!i3) i1 = 0; else {
   if (!(_FcAtomicLock(i3) | 0)) i1 = 0; else {
    i1 = _FcAtomicNewFile(i3) | 0;
    HEAP32[i2 >> 2] = 420;
    i1 = _FcOpen(i1, 66, i2) | 0;
    if ((i1 | 0) == -1) i1 = 0; else {
     i1 = ___fdopen(i1, 348031) | 0;
     if (!i1) i1 = 0; else {
      _fwrite(348034, 200, 1, i1) | 0;
      _fclose(i1) | 0;
      i1 = (_FcAtomicReplaceOrig(i3) | 0) != 0 & 1;
     }
    }
    _FcAtomicUnlock(i3);
   }
   _FcAtomicDestroy(i3);
  }
  _FcStrFree(i4);
 } else i1 = 0;
 if (!(HEAP32[91917] & 16)) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (!i1) {
  HEAP32[i7 >> 2] = i5;
  _printf(348263, i7) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 } else {
  HEAP32[i6 >> 2] = i5;
  _printf(348235, i6) | 0;
  i7 = 1;
  STACKTOP = i8;
  return i7 | 0;
 }
 return 0;
}

function _build_node(i6, i2, i9, i7, i10) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = (HEAP32[i6 + 356 >> 2] | 0) + 164 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i5 = HEAP32[i1 + (i2 * 28 | 0) >> 2] | 0;
 HEAP32[i9 >> 2] = i5;
 HEAP32[i9 + 4 >> 2] = HEAP32[i1 + (i2 * 28 | 0) + 4 >> 2];
 if ((i5 | 0) == 4) {
  HEAP32[i9 + 8 >> 2] = HEAP32[i10 >> 2];
  i1 = HEAP32[i1 + (i2 * 28 | 0) + 8 >> 2] | 0;
  while (1) {
   i7 = HEAP8[i1 >> 0] | 0;
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i8 + 1;
   HEAP8[i8 >> 0] = i7;
   if (!(HEAP8[i1 >> 0] | 0)) break; else i1 = i1 + 1 | 0;
  }
  HEAP32[i9 + 12 >> 2] = 0;
  HEAP32[i9 + 16 >> 2] = 0;
  return;
 }
 i3 = HEAP32[i1 + (i2 * 28 | 0) + 20 >> 2] | 0;
 i4 = i9 + 12 | 0;
 HEAP32[i4 >> 2] = i3;
 i5 = i9 + 16 | 0;
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (i3 * 20 | 0);
 if (i3 | 0) {
  i3 = 0;
  i1 = (HEAP32[i8 >> 2] | 0) + (i2 * 28 | 0) + 12 | 0;
  while (1) {
   i1 = HEAP32[i1 >> 2] | 0;
   _build_node(i6, i1, (HEAP32[i5 >> 2] | 0) + (i3 * 20 | 0) | 0, i7, i10);
   i3 = i3 + 1 | 0;
   if (i3 >>> 0 >= (HEAP32[i4 >> 2] | 0) >>> 0) break; else i1 = (HEAP32[i8 >> 2] | 0) + (i1 * 28 | 0) + 24 | 0;
  }
 }
 HEAP32[i9 + 8 >> 2] = 0;
 return;
}

function _element7(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 39;
   break;
  }
 case 24:
  {
   i4 = i1 + 4 | 0;
   i5 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
   HEAP32[i4 >> 2] = i5;
   if (!i5) {
    HEAP32[i1 >> 2] = 60;
    HEAP32[i1 + 8 >> 2] = 39;
    i1 = 45;
   } else i1 = 45;
   break;
  }
 case 36:
  {
   i4 = i1 + 4 | 0;
   i5 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
   HEAP32[i4 >> 2] = i5;
   if (!i5) {
    HEAP32[i1 >> 2] = 60;
    HEAP32[i1 + 8 >> 2] = 39;
    i1 = 46;
   } else i1 = 46;
   break;
  }
 case 35:
  {
   i4 = i1 + 4 | 0;
   i5 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
   HEAP32[i4 >> 2] = i5;
   if (!i5) {
    HEAP32[i1 >> 2] = 60;
    HEAP32[i1 + 8 >> 2] = 39;
    i1 = 47;
   } else i1 = 47;
   break;
  }
 case 37:
  {
   i4 = i1 + 4 | 0;
   i5 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
   HEAP32[i4 >> 2] = i5;
   if (!i5) {
    HEAP32[i1 >> 2] = 60;
    HEAP32[i1 + 8 >> 2] = 39;
    i1 = 48;
   } else i1 = 48;
   break;
  }
 case 38:
  {
   HEAP32[i1 >> 2] = 68;
   i1 = 50;
   break;
  }
 case 21:
  {
   HEAP32[i1 >> 2] = 68;
   i1 = 49;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _composite_compare(i5, i6, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[i5 + 24 >> 2] | 0;
 if ((i4 | 0) != (HEAP32[i6 + 24 >> 2] | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 L4 : do if (i4 | 0) {
  i2 = HEAP32[i5 + 28 >> 2] | 0;
  i3 = HEAP32[i6 + 28 >> 2] | 0;
  i1 = 0;
  while (1) {
   if ((HEAP32[i2 + (i1 * 12 | 0) >> 2] | 0) != (HEAP32[i3 + (i1 * 12 | 0) >> 2] | 0)) {
    i1 = 0;
    i2 = 13;
    break;
   }
   if ((HEAP32[i2 + (i1 * 12 | 0) + 4 >> 2] | 0) != (HEAP32[i3 + (i1 * 12 | 0) + 4 >> 2] | 0)) {
    i1 = 0;
    i2 = 13;
    break;
   }
   if ((HEAP32[i2 + (i1 * 12 | 0) + 8 >> 2] | 0) != (HEAP32[i3 + (i1 * 12 | 0) + 8 >> 2] | 0)) {
    i1 = 0;
    i2 = 13;
    break;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i4 >>> 0) break L4;
  }
  if ((i2 | 0) == 13) return i1 | 0;
 } while (0);
 if ((HEAP32[i5 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 if ((HEAP32[i5 + 4 >> 2] | 0) != (HEAP32[i6 + 4 >> 2] | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 if (!(+HEAPF64[i5 + 8 >> 3] == +HEAPF64[i6 + 8 >> 3])) {
  i6 = 0;
  return i6 | 0;
 }
 if ((HEAP32[i5 + 16 >> 2] | 0) != (HEAP32[i6 + 16 >> 2] | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i6 = (HEAP32[i5 + 20 >> 2] | 0) == (HEAP32[i6 + 20 >> 2] | 0) & 1;
 return i6 | 0;
}

function _ass_lazy_track_init(i9, i1) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i11 = i12 + 32 | 0;
 i8 = i12 + 24 | 0;
 i7 = i12 + 16 | 0;
 i6 = i12 + 8 | 0;
 i10 = i1 + 36 | 0;
 i4 = HEAP32[i10 >> 2] | 0;
 i1 = i1 + 40 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i4 | 0) > 0 & (i2 | 0) > 0) {
  STACKTOP = i12;
  return;
 }
 i5 = (i4 | 0) < 1;
 i3 = (i2 | 0) < 1;
 if (i5 & i3) {
  _ass_msg(i9, 2, 357392, i12);
  HEAP32[i10 >> 2] = 384;
  HEAP32[i1 >> 2] = 288;
  STACKTOP = i12;
  return;
 }
 if ((i4 | 0) == 1280 & i3) {
  HEAP32[i1 >> 2] = 1024;
  HEAP32[i6 >> 2] = 1024;
  _ass_msg(i9, 2, 357448, i6);
  STACKTOP = i12;
  return;
 }
 if (i3) {
  i11 = i4 * 3 | 0;
  i11 = (i11 | 0) < 4 ? 1 : (i11 | 0) / 4 | 0;
  HEAP32[i1 >> 2] = i11;
  HEAP32[i7 >> 2] = i11;
  _ass_msg(i9, 2, 357448, i7);
  STACKTOP = i12;
  return;
 }
 if (i5 & (i2 | 0) == 1024) {
  HEAP32[i10 >> 2] = 1280;
  HEAP32[i8 >> 2] = 1280;
  _ass_msg(i9, 2, 357482, i8);
  STACKTOP = i12;
  return;
 }
 i1 = i2 << 2;
 if (!i5) {
  STACKTOP = i12;
  return;
 }
 i8 = (i1 | 0) < 3 ? 1 : (i1 | 0) / 3 | 0;
 HEAP32[i10 >> 2] = i8;
 HEAP32[i11 >> 2] = i8;
 _ass_msg(i9, 2, 357482, i11);
 STACKTOP = i12;
 return;
}

function _FT_GlyphLoader_CreateExtra(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP32[i6 >> 2] | 0;
 i5 = i6 + 4 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = i1 << 1;
 L1 : do if ((i2 | 0) < 0) i1 = 6; else {
  do if (!i2) i1 = 0; else {
   if ((i2 | 0) > 268435455) {
    i1 = 10;
    break L1;
   }
   i4 = i1 << 4;
   if ((i4 | 0) > 0) {
    i1 = FUNCTION_TABLE_iii[HEAP32[i3 + 4 >> 2] & 255](i3, i4) | 0;
    if (!i1) {
     i1 = 64;
     break L1;
    }
    _memset(i1 | 0, 0, i4 | 0) | 0;
    i2 = 0;
   } else {
    i2 = i4 | 0 ? 6 : 0;
    i1 = 0;
   }
   if (!i2) {
    _memset(i1 | 0, 0, i4 | 0) | 0;
    break;
   }
   HEAP32[i6 + 40 >> 2] = i1;
   i6 = i2;
   return i6 | 0;
  } while (0);
  i3 = i6 + 40 | 0;
  HEAP32[i3 >> 2] = i1;
  HEAP8[i6 + 16 >> 0] = 1;
  i4 = i1 + (HEAP32[i5 >> 2] << 3) | 0;
  HEAP32[i6 + 44 >> 2] = i4;
  i5 = HEAP16[i6 + 22 >> 1] | 0;
  HEAP32[i6 + 60 >> 2] = (HEAP32[i6 + 24 >> 2] | 0) + (i5 << 3);
  HEAP32[i6 + 64 >> 2] = (HEAP32[i6 + 28 >> 2] | 0) + i5;
  HEAP32[i6 + 68 >> 2] = (HEAP32[i6 + 32 >> 2] | 0) + (HEAP16[i6 + 20 >> 1] << 1);
  HEAP32[i6 + 76 >> 2] = (HEAP32[i3 >> 2] | 0) + (i5 << 3);
  HEAP32[i6 + 80 >> 2] = i4 + (i5 << 3);
  i6 = 0;
  return i6 | 0;
 } while (0);
 HEAP32[i6 + 40 >> 2] = 0;
 i6 = i1;
 return i6 | 0;
}

function _af_glyph_hints_done(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 if (!i3) return;
 i4 = HEAP32[i3 >> 2] | 0;
 if (!i4) return;
 HEAP32[i3 + 44 >> 2] = 0;
 HEAP32[i3 + 48 >> 2] = 0;
 i1 = i3 + 52 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 + 72 | 0)) {
  _ft_mem_free(i4, i2);
  HEAP32[i1 >> 2] = 0;
 }
 HEAP32[i3 + 56 >> 2] = 0;
 HEAP32[i3 + 60 >> 2] = 0;
 i1 = i3 + 64 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 + 936 | 0)) {
  _ft_mem_free(i4, i2);
  HEAP32[i1 >> 2] = 0;
 }
 HEAP32[i3 + 1512 >> 2] = 0;
 HEAP32[i3 + 1516 >> 2] = 0;
 i1 = i3 + 1520 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 + 1540 | 0)) {
  _ft_mem_free(i4, i2);
  HEAP32[i1 >> 2] = 0;
 }
 HEAP32[i3 + 1524 >> 2] = 0;
 HEAP32[i3 + 1528 >> 2] = 0;
 i1 = i3 + 1532 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 + 2404 | 0)) {
  _ft_mem_free(i4, i2);
  HEAP32[i1 >> 2] = 0;
 }
 i2 = i3 + 40 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) != (i3 + 3e3 | 0)) {
  _ft_mem_free(i4, i1);
  HEAP32[i2 >> 2] = 0;
 }
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 36 >> 2] = 0;
 i1 = i3 + 28 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 + 3032 | 0)) {
  _ft_mem_free(i4, i2);
  HEAP32[i1 >> 2] = 0;
 }
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 return;
}

function _FcParseBinary(i9, i4) {
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i10;
 i1 = _FcPopExpr(i9) | 0;
 if (!i1) {
  STACKTOP = i10;
  return;
 }
 i5 = i9 + 16 | 0;
 i3 = 0;
 while (1) {
  if (!i3) i8 = i1; else {
   i2 = _FcConfigAllocExpr(HEAP32[i5 >> 2] | 0) | 0;
   if (!i2) {
    i7 = 7;
    break;
   }
   HEAP32[i2 >> 2] = i4;
   i8 = i2 + 8 | 0;
   HEAP32[i8 >> 2] = i1;
   HEAP32[i8 + 4 >> 2] = i3;
   i8 = i2;
  }
  i1 = _FcPopExpr(i9) | 0;
  if (!i1) break; else i3 = i8;
 }
 if ((i7 | 0) == 7) {
  _FcConfigMessage(i9, 2, 352676, i6);
  _FcExprDestroy(i1);
  _FcExprDestroy(i3);
  STACKTOP = i10;
  return;
 }
 i1 = i9 + 1308 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 >>> 0 < 64) {
  HEAP32[i1 >> 2] = i2 + 1;
  i1 = i9 + 1312 + (i2 * 24 | 0) | 0;
 } else {
  i1 = _malloc(24) | 0;
  if (!i1) {
   STACKTOP = i10;
   return;
  }
 }
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = 0;
 i4 = i9 + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 i2 = HEAP32[i9 >> 2] | 0;
 if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = i2;
 HEAP32[i4 >> 2] = i1;
 if (!i1) {
  STACKTOP = i10;
  return;
 }
 HEAP32[i1 + 16 >> 2] = i8;
 HEAP32[i3 >> 2] = 18;
 STACKTOP = i10;
 return;
}

function _FcPatternSerialize(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = (HEAP32[i6 + 8 >> 2] | 0) + i6 | 0;
 i7 = i1;
 i8 = _FcSerializePtr(i5, i6) | 0;
 if (!i8) {
  i8 = 0;
  return i8 | 0;
 };
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i8 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i8 + 12 >> 2] = -1;
 i2 = _FcSerializePtr(i5, i1) | 0;
 if (!i2) {
  i8 = 0;
  return i8 | 0;
 }
 HEAP32[i8 + 8 >> 2] = i2 - i8;
 L7 : do if ((HEAP32[i6 >> 2] | 0) > 0) {
  i1 = 0;
  while (1) {
   i3 = i7 + (i1 << 3) | 0;
   i9 = HEAP32[i7 + (i1 << 3) + 4 >> 2] | 0;
   i4 = i9;
   i4 = _FcValueListSerialize(i5, (i4 & 1 | 0) == 0 ? i9 : (i4 & -2) + i3 | 0) | 0;
   if (!i4) {
    i1 = 0;
    break;
   }
   i9 = i2 + (i1 << 3) | 0;
   HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i2 + (i1 << 3) + 4 >> 2] = i4 - i9 | 1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (HEAP32[i6 >> 2] | 0)) break L7;
  }
  return i1 | 0;
 } while (0);
 if (!(HEAP32[91917] & 32)) {
  i9 = i8;
  return i9 | 0;
 }
 _puts(348336) | 0;
 _FcPatternPrint(i6);
 _puts(348349) | 0;
 _FcPatternPrint(i8);
 _putchar(10) | 0;
 i9 = i8;
 return i9 | 0;
}

function _IsMacBinary(i5, i6, i7, i8) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i9 = i10;
 do if (!i6) i1 = 85; else {
  i3 = i6 + 20 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i1 | 0) if (FUNCTION_TABLE_iiiii[i1 & 127](i6, 0, 0, 0) | 0) {
   i1 = 85;
   break;
  }
  i4 = i6 + 8 | 0;
  HEAP32[i4 >> 2] = 0;
  i2 = HEAP32[i6 + 4 >> 2] | 0;
  if (!i2) i1 = 85; else {
   i1 = HEAP32[i3 >> 2] | 0;
   if (!i1) {
    i1 = i2 >>> 0 < 128 ? i2 : 128;
    _memcpy(i9 | 0, HEAP32[i6 >> 2] | 0, i1 | 0) | 0;
   } else i1 = FUNCTION_TABLE_iiiii[i1 & 127](i6, 0, i9, 128) | 0;
   HEAP32[i4 >> 2] = i1;
   if (i1 >>> 0 < 128) i1 = 85; else if (!(HEAP8[i9 >> 0] | 0)) if (!(HEAP8[i9 + 74 >> 0] | 0)) if (!(HEAP8[i9 + 82 >> 0] | 0)) {
    i4 = HEAP8[i9 + 1 >> 0] | 0;
    i1 = i4 & 255;
    if ((i4 + -1 & 255) > 32) i1 = 2; else if (!(HEAP8[i9 + 63 >> 0] | 0)) if (!(HEAP8[i9 + (i1 + 2) >> 0] | 0)) i1 = _IsMacResource(i5, i6, (HEAPU8[i9 + 84 >> 0] << 16 | HEAPU8[i9 + 83 >> 0] << 24 | HEAPU8[i9 + 85 >> 0] << 8 | HEAPU8[i9 + 86 >> 0]) + 255 & -128, i7, i8) | 0; else i1 = 2; else i1 = 2;
   } else i1 = 2; else i1 = 2; else i1 = 2;
  }
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function _cff_size_select(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 HEAP32[i3 + 44 >> 2] = i1;
 _FT_Select_Metrics(HEAP32[i3 >> 2] | 0, i1);
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i2 + 656 >> 2] | 0) + 2952 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) return 0;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) return 0;
 i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i1) return 0;
 i7 = HEAP32[(HEAP32[i3 >> 2] | 0) + 656 >> 2] | 0;
 i8 = HEAP32[i3 + 40 >> 2] | 0;
 i9 = HEAP32[i7 + 1392 >> 2] | 0;
 i5 = i1 + 4 | 0;
 i6 = i3 + 16 | 0;
 i4 = i3 + 20 | 0;
 FUNCTION_TABLE_viiiii[HEAP32[i5 >> 2] & 31](HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i4 >> 2] | 0, 0, 0);
 i1 = HEAP32[i7 + 1896 >> 2] | 0;
 if (!i1) return 0;
 do {
  i1 = i1 + -1 | 0;
  i3 = HEAP32[(HEAP32[i7 + 1900 + (i1 << 2) >> 2] | 0) + 68 >> 2] | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  if ((i9 | 0) == (i3 | 0)) i3 = HEAP32[i4 >> 2] | 0; else {
   i2 = _FT_MulDiv(i2, i9, i3) | 0;
   i3 = _FT_MulDiv(HEAP32[i4 >> 2] | 0, i9, i3) | 0;
  }
  FUNCTION_TABLE_viiiii[HEAP32[i5 >> 2] & 31](HEAP32[i8 + 4 + (i1 << 2) >> 2] | 0, i2, i3, 0, 0);
 } while ((i1 | 0) != 0);
 return 0;
}

function _outline_key_move(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if (i1 | 0) {
  _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
  if ((HEAP32[i2 >> 2] | 0) != 1) {
   i6 = 1;
   return i6 | 0;
  }
  i6 = ___strdup(HEAP32[i2 + 44 >> 2] | 0) | 0;
  HEAP32[i1 + 44 >> 2] = i6;
  i6 = (i6 | 0) != 0;
  return i6 | 0;
 }
 if (HEAP32[i2 >> 2] | 0) {
  i6 = 1;
  return i6 | 0;
 }
 i5 = HEAP32[i2 + 8 >> 2] | 0;
 if (!i5) {
  i6 = 1;
  return i6 | 0;
 }
 i6 = i5 + -32 | 0;
 i4 = HEAP32[i5 + -8 >> 2] | 0;
 if (!i4) ___assert_fail(354746, 354776, 466, 354788);
 i1 = i5 + -4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) ___assert_fail(354746, 354776, 466, 354788);
 i3 = i2 + -1 | 0;
 HEAP32[i1 >> 2] = i3;
 if (i3 | 0) {
  i6 = 1;
  return i6 | 0;
 }
 i2 = HEAP32[i6 >> 2] | 0;
 if (i2 | 0) {
  i3 = HEAP32[i5 + -24 >> 2] | 0;
  i1 = i5 + -20 | 0;
  if (i3 | 0) HEAP32[i3 + 12 >> 2] = HEAP32[i1 >> 2];
  HEAP32[HEAP32[i1 >> 2] >> 2] = i3;
  i3 = i2 + 32 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
  i3 = i2 + 20 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - i4;
 }
 i4 = HEAP32[i5 + -28 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[i4 + 12 >> 2] & 63](i5 + ((HEAP32[i4 + 20 >> 2] | 0) + 7 & -8) | 0, i5);
 _free(i6);
 i6 = 1;
 return i6 | 0;
}

function ___stpncpy(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i5 = i3;
 do if (!((i5 ^ i2) & 3)) {
  i4 = (i1 | 0) != 0;
  L3 : do if (i4 & (i5 & 3 | 0) != 0) while (1) {
   i5 = HEAP8[i3 >> 0] | 0;
   HEAP8[i2 >> 0] = i5;
   if (!(i5 << 24 >> 24)) break L3;
   i1 = i1 + -1 | 0;
   i3 = i3 + 1 | 0;
   i2 = i2 + 1 | 0;
   i4 = (i1 | 0) != 0;
   if (!(i4 & (i3 & 3 | 0) != 0)) {
    i6 = 5;
    break;
   }
  } else i6 = 5; while (0);
  if ((i6 | 0) == 5) if (!i4) {
   i1 = 0;
   break;
  }
  if (HEAP8[i3 >> 0] | 0) {
   L11 : do if (i1 >>> 0 > 3) {
    i4 = i3;
    while (1) {
     i3 = HEAP32[i4 >> 2] | 0;
     if ((i3 & -2139062144 ^ -2139062144) & i3 + -16843009 | 0) {
      i3 = i4;
      break L11;
     }
     HEAP32[i2 >> 2] = i3;
     i1 = i1 + -4 | 0;
     i3 = i4 + 4 | 0;
     i2 = i2 + 4 | 0;
     if (i1 >>> 0 > 3) i4 = i3; else break;
    }
   } while (0);
   i6 = 11;
  }
 } else i6 = 11; while (0);
 L16 : do if ((i6 | 0) == 11) if (!i1) i1 = 0; else while (1) {
  i6 = HEAP8[i3 >> 0] | 0;
  HEAP8[i2 >> 0] = i6;
  if (!(i6 << 24 >> 24)) break L16;
  i1 = i1 + -1 | 0;
  i2 = i2 + 1 | 0;
  if (!i1) {
   i1 = 0;
   break;
  } else i3 = i3 + 1 | 0;
 } while (0);
 _memset(i2 | 0, 0, i1 | 0) | 0;
 return i2 | 0;
}

function _bitmap_key_move(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if (i1 | 0) {
  _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
  if ((HEAP32[i2 >> 2] | 0) != 1) {
   i6 = 1;
   return i6 | 0;
  }
  i6 = ___strdup(HEAP32[i2 + 4 >> 2] | 0) | 0;
  HEAP32[i1 + 4 >> 2] = i6;
  i6 = (i6 | 0) != 0;
  return i6 | 0;
 }
 if (HEAP32[i2 >> 2] | 0) {
  i6 = 1;
  return i6 | 0;
 }
 i5 = HEAP32[i2 + 4 >> 2] | 0;
 if (!i5) {
  i6 = 1;
  return i6 | 0;
 }
 i6 = i5 + -32 | 0;
 i4 = HEAP32[i5 + -8 >> 2] | 0;
 if (!i4) ___assert_fail(354746, 354776, 466, 354788);
 i1 = i5 + -4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) ___assert_fail(354746, 354776, 466, 354788);
 i3 = i2 + -1 | 0;
 HEAP32[i1 >> 2] = i3;
 if (i3 | 0) {
  i6 = 1;
  return i6 | 0;
 }
 i2 = HEAP32[i6 >> 2] | 0;
 if (i2 | 0) {
  i3 = HEAP32[i5 + -24 >> 2] | 0;
  i1 = i5 + -20 | 0;
  if (i3 | 0) HEAP32[i3 + 12 >> 2] = HEAP32[i1 >> 2];
  HEAP32[HEAP32[i1 >> 2] >> 2] = i3;
  i3 = i2 + 32 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
  i3 = i2 + 20 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - i4;
 }
 i4 = HEAP32[i5 + -28 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[i4 + 12 >> 2] & 63](i5 + ((HEAP32[i4 + 20 >> 2] | 0) + 7 & -8) | 0, i5);
 _free(i6);
 i6 = 1;
 return i6 | 0;
}

function _ftglue_stream_frame_enter(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = i6 + 20 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if (!i2) {
  i1 = i6 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = HEAP32[i6 + 4 >> 2] | 0;
  if (i2 >>> 0 >= i3 >>> 0) {
   i7 = 85;
   return i7 | 0;
  }
  i4 = i2 + i7 | 0;
  if (i4 >>> 0 > i3 >>> 0) {
   i7 = 85;
   return i7 | 0;
  }
  i5 = (HEAP32[i6 >> 2] | 0) + i2 | 0;
  HEAP32[i6 + 32 >> 2] = i5;
  HEAP32[i6 + 36 >> 2] = i5 + i7;
  HEAP32[i1 >> 2] = i4;
  i7 = 0;
  return i7 | 0;
 }
 i5 = HEAP32[i6 + 28 >> 2] | 0;
 do if (!i7) i1 = 0; else {
  i1 = FUNCTION_TABLE_iii[HEAP32[i5 + 4 >> 2] & 255](i5, i7) | 0;
  if (i1 | 0) {
   i2 = HEAP32[i3 >> 2] | 0;
   break;
  }
  HEAP32[i6 >> 2] = 0;
  i7 = 64;
  return i7 | 0;
 } while (0);
 HEAP32[i6 >> 2] = i1;
 i4 = i6 + 8 | 0;
 i3 = FUNCTION_TABLE_iiiii[i2 & 127](i6, HEAP32[i4 >> 2] | 0, i1, i7) | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i3 >>> 0 < i7 >>> 0) if (!i1) {
  i2 = 85;
  i1 = 0;
 } else {
  FUNCTION_TABLE_vii[HEAP32[i5 + 8 >> 2] & 63](i5, i1);
  HEAP32[i6 >> 2] = 0;
  i2 = 85;
  i1 = 0;
 } else i2 = 0;
 HEAP32[i6 + 32 >> 2] = i1;
 HEAP32[i6 + 36 >> 2] = i1 + i7;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i3;
 i7 = i2;
 return i7 | 0;
}

function _FcStrCopyFilename(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 4128 | 0;
 i1 = i6 + 8 | 0;
 i4 = i6;
 i3 = i6 + 16 | 0;
 switch (HEAP8[i2 >> 0] | 0) {
 case 126:
  {
   i1 = _FcConfigHome() | 0;
   if (!i1) {
    i5 = 0;
    STACKTOP = i6;
    return i5 | 0;
   }
   i5 = _malloc((_strlen(i1) | 0) + (_strlen(i2) | 0) | 0) | 0;
   if (!i5) {
    i5 = 0;
    STACKTOP = i6;
    return i5 | 0;
   }
   _strcpy(i5, i1) | 0;
   _strcat(i5, i2 + 1 | 0) | 0;
   if ((HEAP8[i5 >> 0] | 0) == 47) i1 = _FcStrCanonAbsoluteFilename(i5) | 0; else if (!(_getcwd(i3, 4096) | 0)) i1 = 0; else {
    HEAP32[i4 >> 2] = i5;
    HEAP32[i4 + 4 >> 2] = 0;
    i4 = _FcStrBuildFilename(i3, i4) | 0;
    i1 = _FcStrCanonAbsoluteFilename(i4) | 0;
    _free(i4);
   }
   _free(i5);
   i5 = i1;
   STACKTOP = i6;
   return i5 | 0;
  }
 case 47:
  {
   i5 = _FcStrCanonAbsoluteFilename(i2) | 0;
   STACKTOP = i6;
   return i5 | 0;
  }
 default:
  {
   if (!(_getcwd(i3, 4096) | 0)) i1 = 0; else {
    HEAP32[i1 >> 2] = i2;
    HEAP32[i1 + 4 >> 2] = 0;
    i5 = _FcStrBuildFilename(i3, i1) | 0;
    i1 = _FcStrCanonAbsoluteFilename(i5) | 0;
    _free(i5);
   }
   i5 = i1;
   STACKTOP = i6;
   return i5 | 0;
  }
 }
 return 0;
}

function _shift_bitmap(i1, i4, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i6 | i4) >>> 0 >= 64) ___assert_fail(359766, 359811, 290, 359824);
 if ((i8 | 0) > 0 & (i7 | 0) > 1) {
  i1 = 0;
  do {
   i3 = Math_imul(i1, i9) | 0;
   i2 = i7;
   do {
    i2 = i2 + -1 | 0;
    i10 = i2 + i3 | 0;
    i12 = i5 + (i10 + -1) | 0;
    i13 = HEAPU8[i12 >> 0] | 0;
    i11 = (Math_imul(i13, i4) | 0) >> 6;
    HEAP8[i12 >> 0] = i13 - i11;
    i10 = i5 + i10 | 0;
    HEAP8[i10 >> 0] = (HEAPU8[i10 >> 0] | 0) + i11;
   } while ((i2 | 0) > 1);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i8 | 0));
 }
 if ((i7 | 0) > 0 & (i8 | 0) > 1) i2 = 0; else return;
 do {
  i1 = i8;
  do {
   i13 = i5 + ((Math_imul(i1 + -2 | 0, i9) | 0) + i2) | 0;
   i1 = i1 + -1 | 0;
   i11 = HEAPU8[i13 >> 0] | 0;
   i12 = (Math_imul(i11, i6) | 0) >> 6;
   HEAP8[i13 >> 0] = i11 - i12;
   i13 = i5 + ((Math_imul(i1, i9) | 0) + i2) | 0;
   HEAP8[i13 >> 0] = (HEAPU8[i13 >> 0] | 0) + i12;
  } while ((i1 | 0) > 1);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i7 | 0));
 return;
}

function _ft_corner_orientation(i1, i3, i4, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 if (!i3) return ((i1 | 0) > -1 ? i2 : 0 - i2 | 0) | 0;
 if (!i1) {
  i6 = (i3 | 0) > -1 ? 0 - i4 | 0 : i4;
  return i6 | 0;
 }
 if (!i2) {
  i6 = (i4 | 0) > -1 ? i3 : 0 - i3 | 0;
  return i6 | 0;
 }
 if (!i4) {
  i6 = (i2 | 0) > -1 ? 0 - i1 | 0 : i1;
  return i6 | 0;
 }
 i5 = i1 & 65535;
 i9 = i1 >>> 16;
 i10 = i2 & 65535;
 i8 = i2 >>> 16;
 i1 = Math_imul(i10, i9) | 0;
 i7 = (Math_imul(i8, i5) | 0) + i1 | 0;
 i6 = i7 << 16;
 i5 = i6 + (Math_imul(i10, i5) | 0) | 0;
 i6 = (i7 >>> 16) + (Math_imul(i8, i9) | 0) + ((i7 >>> 0 < i1 >>> 0 & 1) << 16) + (i5 >>> 0 < i6 >>> 0 & 1) | 0;
 i1 = i3 & 65535;
 i7 = i3 >>> 16;
 i9 = i4 & 65535;
 i8 = i4 >>> 16;
 i4 = Math_imul(i9, i7) | 0;
 i3 = (Math_imul(i8, i1) | 0) + i4 | 0;
 i2 = i3 << 16;
 i1 = i2 + (Math_imul(i9, i1) | 0) | 0;
 i2 = (i3 >>> 16) + (Math_imul(i8, i7) | 0) + ((i3 >>> 0 < i4 >>> 0 & 1) << 16) + (i1 >>> 0 < i2 >>> 0 & 1) | 0;
 if (i6 >>> 0 > i2 >>> 0) {
  i10 = 1;
  return i10 | 0;
 }
 if (i6 >>> 0 < i2 >>> 0) {
  i10 = -1;
  return i10 | 0;
 } else return (i5 >>> 0 > i1 >>> 0 ? 1 : (i5 >>> 0 < i1 >>> 0) << 31 >> 31) | 0;
 return 0;
}

function _FcPatternDel(i10, i1) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = _FcObjectFromName(i1) | 0;
 i6 = i10;
 i7 = i10 + 8 | 0;
 i8 = (HEAP32[i7 >> 2] | 0) + i6 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 L1 : do if ((i1 | 0) < 1) {
  i1 = 1;
  i2 = 0;
  i9 = 8;
 } else {
  i1 = i1 + -1 | 0;
  i4 = 0;
  while (1) {
   i3 = i1;
   while (1) {
    i2 = i3 + i4 >> 1;
    i1 = (HEAP32[i8 + (i2 << 3) >> 2] | 0) - i5 | 0;
    if (!i1) break L1;
    if ((i1 | 0) < 0) break;
    if ((i4 | 0) < (i2 | 0)) i3 = i2 + -1 | 0; else {
     i9 = 8;
     break L1;
    }
   }
   if ((i2 | 0) < (i3 | 0)) {
    i1 = i3;
    i4 = i2 + 1 | 0;
   } else {
    i9 = 8;
    break;
   }
  }
 } while (0);
 if ((i9 | 0) == 8) i2 = ~((i1 >>> 31) + i2);
 i1 = i8 + (i2 << 3) | 0;
 if ((i2 | 0) < 0 | (i1 | 0) == 0) {
  i10 = 0;
  return i10 | 0;
 }
 _FcValueListDestroy(HEAP32[i8 + (i2 << 3) + 4 >> 2] | 0);
 i9 = i1 + 8 | 0;
 _memmove(i1 | 0, i9 | 0, (HEAP32[i7 >> 2] | 0) + i6 + (HEAP32[i10 >> 2] << 3) - i9 | 0) | 0;
 i9 = (HEAP32[i10 >> 2] | 0) + -1 | 0;
 HEAP32[i10 >> 2] = i9;
 i10 = (HEAP32[i7 >> 2] | 0) + i6 | 0;
 HEAP32[i10 + (i9 << 3) >> 2] = 0;
 HEAP32[i10 + (i9 << 3) + 4 >> 2] = 0;
 i10 = 1;
 return i10 | 0;
}

function _FcCharSetFreezerDestroy(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6;
 if (!(HEAP32[91917] & 16)) i2 = 0; else {
  i3 = HEAP32[i5 + 1592 >> 2] | 0;
  i4 = HEAP32[i5 + 1580 >> 2] | 0;
  i2 = HEAP32[i5 + 1588 >> 2] | 0;
  HEAP32[i1 >> 2] = HEAP32[i5 + 1584 >> 2];
  HEAP32[i1 + 4 >> 2] = i3;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 + 12 >> 2] = i2;
  _printf(348300, i1) | 0;
  i2 = 0;
 }
 do {
  i1 = HEAP32[i5 + 1036 + (i2 << 2) >> 2] | 0;
  if (i1 | 0) do {
   i4 = i1;
   i1 = HEAP32[i1 >> 2] | 0;
   _free(i4);
  } while ((i1 | 0) != 0);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 67);
 i2 = 0;
 do {
  i1 = HEAP32[i5 + 1304 + (i2 << 2) >> 2] | 0;
  if (i1 | 0) do {
   i4 = i1;
   i1 = HEAP32[i1 >> 2] | 0;
   _free(i4);
  } while ((i1 | 0) != 0);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 67);
 i3 = i5 + 1032 | 0;
 i4 = i5 + 1028 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) > 0) i2 = 0; else {
  i4 = i1;
  _free(i4);
  _free(i5);
  STACKTOP = i6;
  return;
 }
 do {
  _free(HEAP32[i1 + (i2 << 2) >> 2] | 0);
  i2 = i2 + 1 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
 } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
 _free(i1);
 _free(i5);
 STACKTOP = i6;
 return;
}

function _FcStrBufData(i8, i1, i2) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 if ((i2 | 0) <= 0) {
  i12 = 1;
  return i12 | 0;
 }
 i9 = i8 + 12 | 0;
 i10 = i8 + 16 | 0;
 i12 = i8 + 8 | 0;
 i11 = i8 + 4 | 0;
 while (1) {
  i6 = i2;
  i2 = i2 + -1 | 0;
  i7 = HEAP8[i1 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  if ((i4 | 0) == (HEAP32[i10 >> 2] | 0)) {
   if (HEAP32[i12 >> 2] | 0) {
    i1 = 0;
    i2 = 14;
    break;
   }
   if (!(HEAP32[i11 >> 2] | 0)) {
    i3 = i4 + 64 | 0;
    i5 = _malloc(i3) | 0;
    if (!i5) {
     i2 = 11;
     break;
    }
    HEAP32[i11 >> 2] = 1;
    _memcpy(i5 | 0, HEAP32[i8 >> 2] | 0, i4 | 0) | 0;
   } else {
    i3 = i4 << 1;
    i4 = _realloc(HEAP32[i8 >> 2] | 0, i3) | 0;
    if (!i4) {
     i2 = 11;
     break;
    }
    i5 = i4;
    i4 = HEAP32[i9 >> 2] | 0;
   }
   HEAP32[i10 >> 2] = i3;
   HEAP32[i8 >> 2] = i5;
   i3 = i5;
  } else i3 = HEAP32[i8 >> 2] | 0;
  HEAP32[i9 >> 2] = i4 + 1;
  HEAP8[i3 + i4 >> 0] = i7;
  if ((i6 | 0) <= 1) {
   i1 = 1;
   i2 = 14;
   break;
  }
 }
 if ((i2 | 0) == 11) {
  HEAP32[i12 >> 2] = 1;
  i12 = 0;
  return i12 | 0;
 } else if ((i2 | 0) == 14) return i1 | 0;
 return 0;
}

function _findEncodingNS(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i8 = i7 + 4 | 0;
 i5 = i7 + 8 | 0;
 i3 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i3 >> 2] = i5;
 FUNCTION_TABLE_viiiii[HEAP32[i4 + 60 >> 2] & 31](i4, i8, i2, i3, i5 + 127 | 0);
 if ((HEAP32[i8 >> 2] | 0) != (i2 | 0)) {
  i8 = 0;
  STACKTOP = i7;
  return i8 | 0;
 }
 HEAP8[HEAP32[i3 >> 2] >> 0] = 0;
 i1 = 345258;
 i2 = i5;
 L4 : while (1) {
  i8 = HEAP8[i2 >> 0] | 0;
  i3 = HEAP8[i1 >> 0] | 0;
  i8 = (i8 + -97 & 255) < 26 ? (i8 & 255) + 224 & 255 : i8;
  switch ((i8 << 24 >> 24 == ((i3 + -97 & 255) < 26 ? (i3 & 255) + 224 & 255 : i3) << 24 >> 24 ? (i8 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
  case 0:
   {
    i1 = i1 + 1 | 0;
    i2 = i2 + 1 | 0;
    break;
   }
  case 1:
   break L4;
  case 2:
   {
    i6 = 5;
    break L4;
   }
  default:
   {
    i6 = 4;
    break L4;
   }
  }
 }
 if ((i6 | 0) == 5) if ((HEAP32[i4 + 68 >> 2] | 0) == 2) {
  i8 = i4;
  STACKTOP = i7;
  return i8 | 0;
 }
 i1 = _getEncodingIndex(i5) | 0;
 if ((i1 | 0) == -1) {
  i8 = 0;
  STACKTOP = i7;
  return i8 | 0;
 }
 i8 = HEAP32[28872 + (i1 << 2) >> 2] | 0;
 STACKTOP = i7;
 return i8 | 0;
}

function _FcValueListPrint(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i10 + 64 | 0;
 i9 = i10 + 56 | 0;
 i8 = i10 + 48 | 0;
 i7 = i10 + 40 | 0;
 i6 = i10 + 32 | 0;
 i3 = i10 + 16 | 0;
 i4 = i10;
 if (!i1) {
  STACKTOP = i10;
  return;
 }
 i5 = HEAP32[22843] | 0;
 do {
  _FcValueCanonicalize(i4, i1 + 8 | 0);
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  _putchar(32) | 0;
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  __FcValuePrintFile(i5, i2);
  switch (HEAP32[i1 + 24 >> 2] | 0) {
  case 0:
   {
    _printf(347068, i6) | 0;
    break;
   }
  case 1:
   {
    _printf(347072, i7) | 0;
    break;
   }
  case 2:
   {
    _printf(347076, i8) | 0;
    break;
   }
  default:
   _printf(347080, i9) | 0;
  }
  i12 = HEAP32[i1 >> 2] | 0;
  i11 = i12;
  i1 = (i11 & 1 | 0) == 0 ? i12 : (i11 & -2) + i1 | 0;
 } while ((i1 | 0) != 0);
 STACKTOP = i10;
 return;
}

function _findEncoding(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i8 = i7 + 4 | 0;
 i5 = i7 + 8 | 0;
 i3 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i3 >> 2] = i5;
 FUNCTION_TABLE_viiiii[HEAP32[i4 + 60 >> 2] & 31](i4, i8, i2, i3, i5 + 127 | 0);
 if ((HEAP32[i8 >> 2] | 0) != (i2 | 0)) {
  i8 = 0;
  STACKTOP = i7;
  return i8 | 0;
 }
 HEAP8[HEAP32[i3 >> 2] >> 0] = 0;
 i1 = 345258;
 i2 = i5;
 L4 : while (1) {
  i8 = HEAP8[i2 >> 0] | 0;
  i3 = HEAP8[i1 >> 0] | 0;
  i8 = (i8 + -97 & 255) < 26 ? (i8 & 255) + 224 & 255 : i8;
  switch ((i8 << 24 >> 24 == ((i3 + -97 & 255) < 26 ? (i3 & 255) + 224 & 255 : i3) << 24 >> 24 ? (i8 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
  case 0:
   {
    i1 = i1 + 1 | 0;
    i2 = i2 + 1 | 0;
    break;
   }
  case 1:
   break L4;
  case 2:
   {
    i6 = 5;
    break L4;
   }
  default:
   {
    i6 = 4;
    break L4;
   }
  }
 }
 if ((i6 | 0) == 5) if ((HEAP32[i4 + 68 >> 2] | 0) == 2) {
  i8 = i4;
  STACKTOP = i7;
  return i8 | 0;
 }
 i1 = _getEncodingIndex(i5) | 0;
 if ((i1 | 0) == -1) {
  i8 = 0;
  STACKTOP = i7;
  return i8 | 0;
 }
 i8 = HEAP32[27740 + (i1 << 2) >> 2] | 0;
 STACKTOP = i7;
 return i8 | 0;
}

function _event_has_hard_overrides(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 L1 : while (1) {
  i2 = HEAP8[i1 >> 0] | 0;
  switch (i2 << 24 >> 24) {
  case 0:
   {
    i1 = 0;
    i2 = 14;
    break L1;
   }
  case 92:
   {
    i2 = i1 + 1 | 0;
    i1 = (HEAP8[i2 >> 0] | 0) == 0 ? i2 : i1 + 2 | 0;
    continue L1;
   }
  default:
   {}
  }
  i1 = i1 + 1 | 0;
  if (i2 << 24 >> 24 != 123) continue;
  L6 : while (1) {
   switch (HEAP8[i1 >> 0] | 0) {
   case 125:
   case 0:
    continue L1;
   case 92:
    break;
   default:
    {
     i1 = i1 + 1 | 0;
     continue L6;
    }
   }
   i1 = i1 + 1 | 0;
   if (!(_strncmp(i1, 358814, 3) | 0)) {
    i1 = 1;
    i2 = 14;
    break L1;
   }
   if (!(_strncmp(i1, 358818, 4) | 0)) {
    i1 = 1;
    i2 = 14;
    break L1;
   }
   if (!(_strncmp(i1, 358823, 4) | 0)) {
    i1 = 1;
    i2 = 14;
    break L1;
   }
   if (!(_strncmp(i1, 358828, 5) | 0)) {
    i1 = 1;
    i2 = 14;
    break L1;
   }
   if (!(_strncmp(i1, 358834, 3) | 0)) {
    i1 = 1;
    i2 = 14;
    break L1;
   }
   if (!(_strncmp(i1, 358838, 3) | 0)) {
    i1 = 1;
    i2 = 14;
    break L1;
   }
   if ((HEAP8[i1 >> 0] | 0) == 112) {
    i1 = 1;
    i2 = 14;
    break L1;
   }
  }
 }
 if ((i2 | 0) == 14) return i1 | 0;
 return 0;
}

function _ass_stripe_pack_c(i1, i11, i2, i10, i12) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0;
 L1 : do if (!i10) i3 = i1; else {
  if (!i12) {
   i2 = 0;
   while (1) {
    i1 = i1 + 16 | 0;
    i2 = i2 + 16 | 0;
    if (i2 >>> 0 >= i10 >>> 0) {
     i3 = i1;
     break L1;
    }
   }
  }
  i9 = i12 << 4;
  i8 = 0;
  while (1) {
   i4 = 0;
   i5 = i1;
   i6 = i2;
   while (1) {
    i7 = 125054 + ((i4 << 4 & 16) << 1) | 0;
    i3 = 0;
    do {
     i13 = HEAP16[i6 + (i3 << 1) >> 1] | 0;
     HEAP8[i5 + i3 >> 0] = (i13 - (i13 >>> 8) + (HEAPU16[i7 + (i3 << 1) >> 1] | 0) | 0) >>> 6;
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) != 16);
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i12 | 0)) break; else {
     i5 = i5 + i11 | 0;
     i6 = i6 + 32 | 0;
    }
   }
   i1 = i1 + 16 | 0;
   i8 = i8 + 16 | 0;
   if (i8 >>> 0 >= i10 >>> 0) {
    i3 = i1;
    break;
   } else i2 = i2 + (i9 << 1) | 0;
  }
 } while (0);
 i2 = i11 - (i10 + 15 & -16) | 0;
 if ((i12 | 0) == 0 | (i2 | 0) == 0) return; else i1 = 0;
 do {
  _memset(i3 + (Math_imul(i1, i11) | 0) | 0, 0, i2 | 0) | 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i12 | 0));
 return;
}

function _FcConfigMessage(i5, i6, i7, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i2 = i11 + 24 | 0;
 i10 = i11 + 16 | 0;
 i9 = i11;
 i8 = i11 + 32 | 0;
 HEAP32[i8 >> 2] = i1;
 switch (i6 | 0) {
 case 0:
  {
   i4 = 354389;
   break;
  }
 case 1:
  {
   i4 = 354381;
   break;
  }
 case 2:
  {
   i4 = 354375;
   break;
  }
 default:
  i4 = 354148;
 }
 if (!i5) {
  i10 = HEAP32[22811] | 0;
  HEAP32[i2 >> 2] = i4;
  _fprintf(i10, 354450, i2) | 0;
  _vfprintf(i10, i7, i8) | 0;
  _fputc(10, i10) | 0;
  STACKTOP = i11;
  return;
 }
 i2 = HEAP32[i5 + 12 >> 2] | 0;
 i3 = HEAP32[22811] | 0;
 i1 = _XML_GetCurrentLineNumber(HEAP32[i5 + 20 >> 2] | 0) | 0;
 if (!i2) {
  HEAP32[i10 >> 2] = i4;
  HEAP32[i10 + 4 >> 2] = i1;
  _fprintf(i3, 354425, i10) | 0;
 } else {
  HEAP32[i9 >> 2] = i4;
  HEAP32[i9 + 4 >> 2] = i2;
  HEAP32[i9 + 8 >> 2] = i1;
  _fprintf(i3, 354394, i9) | 0;
 }
 if (i6 >>> 0 <= 1) {
  i10 = i3;
  _vfprintf(i10, i7, i8) | 0;
  _fputc(10, i10) | 0;
  STACKTOP = i11;
  return;
 }
 HEAP32[i5 + 8 >> 2] = 1;
 i10 = i3;
 _vfprintf(i10, i7, i8) | 0;
 _fputc(10, i10) | 0;
 STACKTOP = i11;
 return;
}

function _FcPatternObjectDel(i7, i5) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = i7;
 i9 = i7 + 8 | 0;
 i10 = (HEAP32[i9 >> 2] | 0) + i8 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 L1 : do if ((i1 | 0) < 1) {
  i1 = 1;
  i2 = 0;
  i6 = 8;
 } else {
  i1 = i1 + -1 | 0;
  i4 = 0;
  while (1) {
   i3 = i1;
   while (1) {
    i2 = i3 + i4 >> 1;
    i1 = (HEAP32[i10 + (i2 << 3) >> 2] | 0) - i5 | 0;
    if (!i1) break L1;
    if ((i1 | 0) < 0) break;
    if ((i4 | 0) < (i2 | 0)) i3 = i2 + -1 | 0; else {
     i6 = 8;
     break L1;
    }
   }
   if ((i2 | 0) < (i3 | 0)) {
    i1 = i3;
    i4 = i2 + 1 | 0;
   } else {
    i6 = 8;
    break;
   }
  }
 } while (0);
 if ((i6 | 0) == 8) i2 = ~((i1 >>> 31) + i2);
 i1 = i10 + (i2 << 3) | 0;
 if ((i2 | 0) < 0 | (i1 | 0) == 0) {
  i10 = 0;
  return i10 | 0;
 }
 _FcValueListDestroy(HEAP32[i10 + (i2 << 3) + 4 >> 2] | 0);
 i10 = i1 + 8 | 0;
 _memmove(i1 | 0, i10 | 0, (HEAP32[i9 >> 2] | 0) + i8 + (HEAP32[i7 >> 2] << 3) - i10 | 0) | 0;
 i10 = (HEAP32[i7 >> 2] | 0) + -1 | 0;
 HEAP32[i7 >> 2] = i10;
 i9 = (HEAP32[i9 >> 2] | 0) + i8 | 0;
 HEAP32[i9 + (i10 << 3) >> 2] = 0;
 HEAP32[i9 + (i10 << 3) + 4 >> 2] = 0;
 i10 = 1;
 return i10 | 0;
}

function _t2_hints_stems(i8, i1, i2, i9) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i10 = i12;
 if ((i2 | 0) <= 0) {
  STACKTOP = i12;
  return;
 }
 i11 = i8 + 4 | 0;
 i7 = i8 + 16 + (((i1 | 0) != 0 & 1) * 36 | 0) | 0;
 i1 = 0;
 do {
  i6 = (i2 | 0) < 16 ? i2 : 16;
  i4 = i6 << 1;
  i3 = 0;
  do {
   i1 = (HEAP32[i9 + (i3 << 2) >> 2] | 0) + i1 | 0;
   i5 = (_FT_RoundFix(i1) | 0) >> 16;
   HEAP32[i10 + (i3 << 2) >> 2] = i5;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i4 | 0));
  i3 = 0;
  do {
   i5 = i10 + ((i3 | 1) << 2) | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i10 + (i3 << 2) >> 2] | 0);
   i3 = i3 + 2 | 0;
  } while ((i3 | 0) < (i4 | 0));
  L11 : do if (!(HEAP32[i11 >> 2] | 0)) {
   i3 = i6;
   i4 = i10;
   while (1) {
    i5 = _ps_dimension_add_t1stem(i7, HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0, 0) | 0;
    if (i5 | 0) break;
    if ((i3 | 0) > 1) {
     i3 = i3 + -1 | 0;
     i4 = i4 + 8 | 0;
    } else break L11;
   }
   HEAP32[i11 >> 2] = i5;
  } while (0);
  i2 = i2 - i6 | 0;
 } while ((i2 | 0) > 0);
 STACKTOP = i12;
 return;
}

function _FcConfigValues(i1, i2, i3, i4, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i10 + 16 | 0;
 i6 = i10;
 if (!i4) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i9 = _malloc(32) | 0;
 if (!i9) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i7 = i9 + 8 | 0;
 if ((HEAP32[i4 >> 2] & 65535 | 0) == 36) {
  i6 = i4 + 8 | 0;
  _FcConfigEvaluate(i5, i1, i2, i3, HEAP32[i6 >> 2] | 0);
  HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  i1 = _FcConfigValues(i1, i2, i3, HEAP32[i6 + 4 >> 2] | 0, i8) | 0;
 } else {
  _FcConfigEvaluate(i6, i1, i2, i3, i4);
  HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  i1 = 0;
 }
 HEAP32[i9 >> 2] = i1;
 HEAP32[i9 + 24 >> 2] = i8;
 if (HEAP32[i7 >> 2] | 0) {
  STACKTOP = i10;
  return i9 | 0;
 }
 i8 = i1;
 _free(i9);
 i9 = (i8 & 1 | 0) == 0 ? i1 : (i8 & -2) + i9 | 0;
 STACKTOP = i10;
 return i9 | 0;
}

function _FcStrBufString(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = HEAP8[i1 >> 0] | 0;
 if (!(i2 << 24 >> 24)) {
  i10 = 1;
  return i10 | 0;
 }
 i7 = i6 + 12 | 0;
 i8 = i6 + 16 | 0;
 i10 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 while (1) {
  i1 = i1 + 1 | 0;
  i4 = HEAP32[i7 >> 2] | 0;
  if ((i4 | 0) == (HEAP32[i8 >> 2] | 0)) {
   if (HEAP32[i10 >> 2] | 0) {
    i1 = 0;
    i2 = 14;
    break;
   }
   if (!(HEAP32[i9 >> 2] | 0)) {
    i3 = i4 + 64 | 0;
    i5 = _malloc(i3) | 0;
    if (!i5) {
     i2 = 11;
     break;
    }
    HEAP32[i9 >> 2] = 1;
    _memcpy(i5 | 0, HEAP32[i6 >> 2] | 0, i4 | 0) | 0;
   } else {
    i3 = i4 << 1;
    i4 = _realloc(HEAP32[i6 >> 2] | 0, i3) | 0;
    if (!i4) {
     i2 = 11;
     break;
    }
    i5 = i4;
    i4 = HEAP32[i7 >> 2] | 0;
   }
   HEAP32[i8 >> 2] = i3;
   HEAP32[i6 >> 2] = i5;
   i3 = i5;
  } else i3 = HEAP32[i6 >> 2] | 0;
  HEAP32[i7 >> 2] = i4 + 1;
  HEAP8[i3 + i4 >> 0] = i2;
  i2 = HEAP8[i1 >> 0] | 0;
  if (!(i2 << 24 >> 24)) {
   i1 = 1;
   i2 = 14;
   break;
  }
 }
 if ((i2 | 0) == 11) {
  HEAP32[i10 >> 2] = 1;
  i10 = 0;
  return i10 | 0;
 } else if ((i2 | 0) == 14) return i1 | 0;
 return 0;
}

function _check_allocations(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = i1 + 4 | 0;
 if ((HEAP32[i3 >> 2] | 0) >>> 0 >= i2 >>> 0) {
  i3 = 1;
  return i3 | 0;
 }
 i4 = ___errno_location() | 0;
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 8 | 0;
 i5 = _ass_try_realloc_array(HEAP32[i4 >> 2] | 0, i2, 4) | 0;
 HEAP32[i4 >> 2] = i5;
 i4 = ___errno_location() | 0;
 if (HEAP32[i4 >> 2] | 0) {
  i5 = 0;
  return i5 | 0;
 }
 i5 = ___errno_location() | 0;
 HEAP32[i5 >> 2] = 0;
 i5 = i1 + 12 | 0;
 i4 = _ass_try_realloc_array(HEAP32[i5 >> 2] | 0, i2, 4) | 0;
 HEAP32[i5 >> 2] = i4;
 i5 = ___errno_location() | 0;
 if (HEAP32[i5 >> 2] | 0) {
  i5 = 0;
  return i5 | 0;
 }
 i5 = ___errno_location() | 0;
 HEAP32[i5 >> 2] = 0;
 i5 = i1 + 16 | 0;
 i4 = _ass_try_realloc_array(HEAP32[i5 >> 2] | 0, i2, 1) | 0;
 HEAP32[i5 >> 2] = i4;
 i5 = ___errno_location() | 0;
 if (HEAP32[i5 >> 2] | 0) {
  i5 = 0;
  return i5 | 0;
 }
 i5 = ___errno_location() | 0;
 HEAP32[i5 >> 2] = 0;
 i5 = i1 + 20 | 0;
 i4 = _ass_try_realloc_array(HEAP32[i5 >> 2] | 0, i2, 4) | 0;
 HEAP32[i5 >> 2] = i4;
 i5 = ___errno_location() | 0;
 if (HEAP32[i5 >> 2] | 0) {
  i5 = 0;
  return i5 | 0;
 }
 HEAP32[i3 >> 2] = i2;
 i5 = 1;
 return i5 | 0;
}

function _FcStrGlobMatch(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 L1 : while (1) {
  i4 = i2 + 1 | 0;
  i2 = HEAP8[i2 >> 0] | 0;
  switch (i2 << 24 >> 24) {
  case 0:
   {
    i2 = 12;
    break L1;
   }
  case 42:
   {
    i2 = 3;
    break L1;
   }
  case 63:
   {
    if (!(HEAP8[i1 >> 0] | 0)) {
     i3 = 0;
     i2 = 13;
     break L1;
    }
    break;
   }
  default:
   if ((HEAP8[i1 >> 0] | 0) != i2 << 24 >> 24) {
    i3 = 0;
    i2 = 13;
    break L1;
   }
  }
  i2 = i4;
  i1 = i1 + 1 | 0;
 }
 if ((i2 | 0) == 3) {
  if (!(HEAP8[i4 >> 0] | 0)) {
   i4 = 1;
   return i4 | 0;
  }
  if (!(_strchr(i4, 42) | 0)) {
   i2 = _strlen(i1) | 0;
   i3 = _strlen(i4) | 0;
   if (i2 >>> 0 < i3 >>> 0) {
    i4 = 0;
    return i4 | 0;
   } else i1 = i1 + (i2 - i3) | 0;
  }
  if (!(HEAP8[i1 >> 0] | 0)) {
   i4 = 0;
   return i4 | 0;
  }
  while (1) {
   if (_FcStrGlobMatch(i4, i1) | 0) {
    i3 = 1;
    i2 = 13;
    break;
   }
   i1 = i1 + 1 | 0;
   if (!(HEAP8[i1 >> 0] | 0)) {
    i3 = 0;
    i2 = 13;
    break;
   }
  }
  if ((i2 | 0) == 13) return i3 | 0;
 } else if ((i2 | 0) == 12) {
  i4 = (HEAP8[i1 >> 0] | 0) == 0 & 1;
  return i4 | 0;
 } else if ((i2 | 0) == 13) return i3 | 0;
 return 0;
}

function _bitmap_destruct(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 if (i2 | 0) _ass_free_bitmap(i2);
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (i1 | 0) _ass_free_bitmap(i1);
 switch (HEAP32[i3 >> 2] | 0) {
 case 0:
  {
   i4 = HEAP32[i3 + 4 >> 2] | 0;
   if (!i4) return;
   i5 = i4 + -32 | 0;
   i6 = HEAP32[i4 + -8 >> 2] | 0;
   if (!i6) ___assert_fail(354746, 354776, 466, 354788);
   i1 = i4 + -4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) ___assert_fail(354746, 354776, 466, 354788);
   i3 = i2 + -1 | 0;
   HEAP32[i1 >> 2] = i3;
   if (i3 | 0) return;
   i2 = HEAP32[i5 >> 2] | 0;
   if (i2 | 0) {
    i3 = HEAP32[i4 + -24 >> 2] | 0;
    i1 = i4 + -20 | 0;
    if (i3 | 0) HEAP32[i3 + 12 >> 2] = HEAP32[i1 >> 2];
    HEAP32[HEAP32[i1 >> 2] >> 2] = i3;
    i3 = i2 + 32 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
    i3 = i2 + 20 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - i6;
   }
   i6 = HEAP32[i4 + -28 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[i6 + 12 >> 2] & 63](i4 + ((HEAP32[i6 + 20 >> 2] | 0) + 7 & -8) | 0, i4);
   _free(i5);
   return;
  }
 case 1:
  {
   _free(HEAP32[i3 + 4 >> 2] | 0);
   return;
  }
 default:
  return;
 }
}

function _ps_unicodes_char_next(i8, i10) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i2 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
 i9 = HEAP32[i8 + 16 >> 2] | 0;
 do if (!i9) i1 = 0; else {
  i7 = HEAP32[i8 + 20 >> 2] | 0;
  i1 = 0;
  i4 = i9;
  i5 = 0;
  while (1) {
   i6 = ((i4 - i5 | 0) >>> 1) + i5 | 0;
   i3 = HEAP32[i7 + (i6 << 3) >> 2] | 0;
   if ((i3 | 0) == (i2 | 0)) {
    i3 = 4;
    break;
   }
   i3 = i3 & 2147483647;
   if ((i3 | 0) == (i2 | 0)) i1 = HEAP32[i7 + (i6 << 3) + 4 >> 2] | 0;
   i3 = i3 >>> 0 < i2 >>> 0;
   i5 = i3 ? i6 + 1 | 0 : i5;
   i4 = i3 ? i4 : i6;
   if (i4 >>> 0 <= i5 >>> 0) {
    i3 = 8;
    break;
   }
  }
  if ((i3 | 0) == 4) {
   i8 = i2;
   i9 = HEAP32[i7 + (i6 << 3) + 4 >> 2] | 0;
   HEAP32[i10 >> 2] = i8;
   return i9 | 0;
  } else if ((i3 | 0) == 8) {
   if (!i1) {
    i1 = i5;
    break;
   }
   HEAP32[i10 >> 2] = i2;
   return i1 | 0;
  }
 } while (0);
 if (i1 >>> 0 >= i9 >>> 0) {
  i8 = 0;
  i9 = 0;
  HEAP32[i10 >> 2] = i8;
  return i9 | 0;
 }
 i9 = HEAP32[i8 + 20 >> 2] | 0;
 i8 = HEAP32[i9 + (i1 << 3) >> 2] & 2147483647;
 i9 = HEAP32[i9 + (i1 << 3) + 4 >> 2] | 0;
 HEAP32[i10 >> 2] = i8;
 return i9 | 0;
}

function _FcCharSetFindLeafCreate(i10, i11) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 >>> 8 & 65535;
 i8 = i10;
 i5 = (HEAP32[i10 + 12 >> 2] | 0) + i8 | 0;
 i7 = i5;
 i4 = HEAP32[i10 + 4 >> 2] | 0;
 if (!i5) i1 = -1; else {
  i2 = i4 + -1 | 0;
  i3 = 0;
  while (1) {
   if ((i3 | 0) > (i2 | 0)) {
    i9 = 5;
    break;
   }
   i1 = i2 + i3 >> 1;
   i12 = HEAP16[i7 + (i1 << 1) >> 1] | 0;
   i5 = (i12 & 65535) < (i6 & 65535);
   if (i12 << 16 >> 16 == i6 << 16 >> 16) break; else {
    i2 = i5 ? i2 : i1 + -1 | 0;
    i3 = i5 ? i1 + 1 | 0 : i3;
   }
  }
  if ((i9 | 0) == 5) {
   if ((i2 | 0) < 0) i9 = 8; else if ((i2 | 0) < (i4 | 0)) if ((HEAPU16[i7 + (i2 << 1) >> 1] | 0) < (i6 & 65535)) i9 = 8; else i1 = i2; else i1 = i2;
   if ((i9 | 0) == 8) i1 = i2 + 1 | 0;
   i1 = ~i1;
  }
  if ((i1 | 0) > -1) {
   i12 = (HEAP32[i10 + 8 >> 2] | 0) + i8 | 0;
   i12 = i12 + (HEAP32[i12 + (i1 << 2) >> 2] | 0) | 0;
   return i12 | 0;
  }
 }
 i2 = _calloc(1, 32) | 0;
 if (!i2) {
  i12 = 0;
  return i12 | 0;
 }
 if (_FcCharSetPutLeaf(i10, i11, i2, ~i1) | 0) {
  i12 = i2;
  return i12 | 0;
 }
 _free(i2);
 i12 = 0;
 return i12 | 0;
}

function _tt_face_get_location(i6, i1, i7) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[i6 + 696 >> 2] | 0;
 do if (i5 >>> 0 > i1 >>> 0) {
  i4 = HEAP32[i6 + 700 >> 2] | 0;
  if (HEAP16[i6 + 210 >> 1] | 0) {
   i1 = i4 + (i1 << 2) + 4 | 0;
   i3 = i1 + -4 | 0;
   i3 = HEAPU8[i3 + 1 >> 0] << 16 | HEAPU8[i3 >> 0] << 24 | HEAPU8[i3 + 2 >> 0] << 8 | HEAPU8[i3 + 3 >> 0];
   i1 = i1 + 4 | 0;
   if (i1 >>> 0 > (i4 + (i5 << 2) | 0) >>> 0) {
    i2 = i3;
    i1 = i3;
    break;
   }
   i1 = i1 + -4 | 0;
   i2 = i3;
   i1 = HEAPU8[i1 + 1 >> 0] << 16 | HEAPU8[i1 >> 0] << 24 | HEAPU8[i1 + 2 >> 0] << 8 | HEAPU8[i1 + 3 >> 0];
   break;
  }
  i1 = i4 + (i1 << 1) + 2 | 0;
  i2 = i1 + -2 | 0;
  i2 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
  i1 = i1 + 2 | 0;
  if (i1 >>> 0 > (i4 + (i5 << 1) | 0) >>> 0) i1 = i2; else {
   i1 = i1 + -2 | 0;
   i1 = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
  }
  i2 = i2 << 1;
  i1 = i1 << 1;
 } else {
  i2 = 0;
  i1 = 0;
 } while (0);
 i4 = HEAP32[i6 + 668 >> 2] | 0;
 i6 = i4 >>> 0 < i2 >>> 0;
 i5 = i1 >>> 0 > i4 >>> 0 ? i4 : i1;
 HEAP32[i7 >> 2] = i6 ? 0 : (i5 >>> 0 < i2 >>> 0 ? i4 : i5) - i2 | 0;
 return (i6 ? 0 : i2) | 0;
}

function _FcUtf16Len(i2, i1, i3, i10, i11) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 L1 : do if (!i3) {
  i2 = 0;
  i1 = 0;
 } else {
  i9 = (i1 | 0) == 0;
  i8 = (i9 ^ 1) & 1;
  i9 = i9 & 1;
  i1 = 0;
  i7 = i2;
  i2 = 0;
  while (1) {
   if ((i3 | 0) < 2) {
    i1 = 0;
    i3 = 11;
    break;
   }
   i5 = (HEAPU8[i7 + i8 >> 0] | 0) << 8;
   i4 = i5 | (HEAPU8[i7 + i9 >> 0] | 0);
   i6 = i7 + 2 | 0;
   if ((i5 & 64512 | 0) == 55296) {
    if ((i3 + -2 | 0) < 2) {
     i1 = 0;
     i3 = 11;
     break;
    }
    i5 = (HEAPU8[i6 + i8 >> 0] | 0) << 8;
    if ((i5 & 64512 | 0) != 56320) {
     i1 = 0;
     i3 = 11;
     break;
    }
    i4 = (i5 & 768 | i4 << 10 & 1047552 | (HEAPU8[i6 + i9 >> 0] | 0)) + 65536 | 0;
    i6 = i7 + 4 | 0;
   }
   i5 = i6 - i7 | 0;
   if ((i5 | 0) < 1) {
    i1 = 0;
    i3 = 11;
    break;
   }
   i2 = i4 >>> 0 > i2 >>> 0 ? i4 : i2;
   i3 = i3 - i5 | 0;
   i1 = i1 + 1 | 0;
   if (!i3) break L1; else i7 = i6;
  }
  if ((i3 | 0) == 11) return i1 | 0;
 } while (0);
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2 >>> 0 > 65535 ? 4 : i2 >>> 0 > 256 ? 2 : 1;
 i11 = 1;
 return i11 | 0;
}

function _FcStrStr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i9 = 0;
  return i9 | 0;
 }
 if ((i1 | 0) == (i2 | 0)) {
  i9 = i1;
  return i9 | 0;
 }
 i8 = HEAP8[i2 >> 0] | 0;
 if (!(i8 << 24 >> 24)) {
  i9 = 0;
  return i9 | 0;
 }
 i7 = i2 + 1 | 0;
 L10 : while (1) {
  while (1) {
   i6 = i1 + 1 | 0;
   i5 = HEAP8[i1 >> 0] | 0;
   i2 = i5 << 24 >> 24 == i8 << 24 >> 24;
   if (i5 << 24 >> 24 == 0 | i2) break; else i1 = i6;
  }
  if (!i2) {
   i1 = 0;
   i9 = 12;
   break;
  }
  i2 = HEAP8[i6 >> 0] | 0;
  i5 = HEAP8[i7 >> 0] | 0;
  i4 = i2 << 24 >> 24 == 0;
  i3 = i5 << 24 >> 24 == 0;
  if (i2 << 24 >> 24 == i5 << 24 >> 24 | (i4 | i3)) {
   i2 = i7;
   i5 = i6;
  } else {
   i1 = i6;
   continue;
  }
  while (1) {
   i5 = i5 + 1 | 0;
   if (i4 | i3) break L10;
   i2 = i2 + 1 | 0;
   i11 = HEAP8[i5 >> 0] | 0;
   i10 = HEAP8[i2 >> 0] | 0;
   i4 = i11 << 24 >> 24 == 0;
   i3 = i10 << 24 >> 24 == 0;
   if (!(i11 << 24 >> 24 == i10 << 24 >> 24 | (i4 | i3))) {
    i1 = i6;
    continue L10;
   }
  }
 }
 if ((i9 | 0) == 12) return i1 | 0;
 i11 = i3 ? i1 : 0;
 return i11 | 0;
}

function _FcCharSetHasChar(i8, i11) {
 i8 = i8 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0;
 if (!i8) {
  i11 = 0;
  return i11 | 0;
 }
 i6 = i11 >>> 8 & 65535;
 i9 = i8;
 i5 = (HEAP32[i8 + 12 >> 2] | 0) + i9 | 0;
 i7 = i5;
 i4 = HEAP32[i8 + 4 >> 2] | 0;
 if (!i5) {
  i11 = 0;
  return i11 | 0;
 }
 i2 = i4 + -1 | 0;
 i3 = 0;
 while (1) {
  if ((i3 | 0) > (i2 | 0)) {
   i10 = 6;
   break;
  }
  i1 = i2 + i3 >> 1;
  i12 = HEAP16[i7 + (i1 << 1) >> 1] | 0;
  i5 = (i12 & 65535) < (i6 & 65535);
  if (i12 << 16 >> 16 == i6 << 16 >> 16) break; else {
   i2 = i5 ? i2 : i1 + -1 | 0;
   i3 = i5 ? i1 + 1 | 0 : i3;
  }
 }
 if ((i10 | 0) == 6) {
  if ((i2 | 0) < 0) i10 = 9; else if ((i2 | 0) < (i4 | 0)) if ((HEAPU16[i7 + (i2 << 1) >> 1] | 0) < (i6 & 65535)) i10 = 9; else i1 = i2; else i1 = i2;
  if ((i10 | 0) == 9) i1 = i2 + 1 | 0;
  i1 = ~i1;
 }
 if ((i1 | 0) <= -1) {
  i12 = 0;
  return i12 | 0;
 }
 i12 = (HEAP32[i8 + 8 >> 2] | 0) + i9 | 0;
 i1 = i12 + (HEAP32[i12 + (i1 << 2) >> 2] | 0) | 0;
 if (!i1) {
  i12 = 0;
  return i12 | 0;
 }
 i12 = (HEAP32[i1 + ((i11 >>> 5 & 7) << 2) >> 2] & 1 << (i11 & 31) | 0) != 0 & 1;
 return i12 | 0;
}

function _Vertical_Sweep_Span(i9, i1, i5, i6, i7, i2) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i8 = 0;
 i1 = HEAP32[i9 + 4 >> 2] | 0;
 i2 = 0 - i1 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i4 = (i5 + -1 + i1 & i2) >> i3;
 if ((HEAP16[i7 + 12 >> 1] & 7) == 2) i8 = 3; else if ((i6 - i5 - i1 | 0) > (HEAP32[i9 + 20 >> 2] | 0)) i8 = 3; else i2 = i4;
 if ((i8 | 0) == 3) i2 = (i2 & i6) >> i3;
 if ((i2 | 0) <= -1) return;
 i1 = HEAPU16[i9 + 56 >> 1] | 0;
 if ((i4 | 0) >= (i1 | 0)) return;
 i8 = (i4 | 0) > 0 ? i4 : 0;
 i2 = (i2 | 0) < (i1 | 0) ? i2 : i1 + -1 | 0;
 i5 = i8 << 13 >> 16;
 i6 = i2 << 13 >> 16;
 i8 = 255 >>> (i8 & 7);
 i2 = 127 >>> (i2 & 7) ^ 255;
 i7 = HEAP32[i9 + 60 >> 2] | 0;
 i4 = HEAP32[i9 + 148 >> 2] | 0;
 i1 = i7 + i4 + i5 | 0;
 i3 = i6 - i5 | 0;
 if ((i3 | 0) > 0) {
  HEAP8[i1 >> 0] = HEAPU8[i1 >> 0] | 0 | i8;
  if ((i3 | 0) != 1) {
   i9 = i5 - i6 | 0;
   _memset(i7 + (i4 + i5 + 1) | 0, -1, i6 + ((i9 | 0) > -2 ? i9 : -2) + 1 - i5 | 0) | 0;
   do {
    i3 = i3 + -1 | 0;
    i1 = i1 + 1 | 0;
   } while ((i3 | 0) > 1);
  }
  i1 = i1 + 1 | 0;
 } else i2 = i2 & i8;
 HEAP8[i1 >> 0] = HEAPU8[i1 >> 0] | 0 | i2;
 return;
}

function _tt_cmap13_next(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = i4 + 28 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 L1 : do if ((i2 | 0) != -1) {
  i7 = i4 + 36 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  i8 = HEAP32[i4 + 40 >> 2] | 0;
  if (i1 >>> 0 < i8 >>> 0) {
   i6 = (HEAP32[i4 + 16 >> 2] | 0) + 16 | 0;
   i3 = i2 + 1 | 0;
   while (1) {
    i2 = i6 + (i1 * 12 | 0) + 4 | 0;
    i10 = i2 + -4 | 0;
    i10 = (HEAPU8[i10 + 1 >> 0] | 0) << 16 | (HEAPU8[i10 >> 0] | 0) << 24 | (HEAPU8[i10 + 2 >> 0] | 0) << 8 | (HEAPU8[i10 + 3 >> 0] | 0);
    i2 = i2 + 4 | 0;
    i9 = i2 + -4 | 0;
    i2 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
    i3 = i3 >>> 0 < i10 >>> 0 ? i10 : i3;
    if (!((i2 | 0) == 0 ? 1 : i3 >>> 0 > ((HEAPU8[i9 + 1 >> 0] | 0) << 16 | (HEAPU8[i9 >> 0] | 0) << 24 | (HEAPU8[i9 + 2 >> 0] | 0) << 8 | (HEAPU8[i9 + 3 >> 0] | 0)) >>> 0)) break;
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i8 >>> 0) break L1;
   }
   HEAP32[i5 >> 2] = i3;
   HEAP32[i4 + 32 >> 2] = i2;
   HEAP32[i7 >> 2] = i1;
   return;
  }
 } while (0);
 HEAP8[i4 + 24 >> 0] = 0;
 return;
}

function _addtag(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 i2 = i1 >>> 24 & 255;
 HEAP8[i6 >> 0] = i2;
 i3 = i1 >>> 16 & 255;
 HEAP8[i6 + 1 >> 0] = i3;
 i4 = i1 >>> 8 & 255;
 HEAP8[i6 + 2 >> 0] = i4;
 i1 = i1 & 255;
 HEAP8[i6 + 3 >> 0] = i1;
 HEAP8[i6 + 4 >> 0] = 0;
 if (((i2 & -33) + -65 & 255) >= 26) if (!(i2 << 24 >> 24 == 32 | (i2 + -48 & 255) < 10)) {
  STACKTOP = i7;
  return;
 }
 if (((i3 & -33) + -65 & 255) >= 26) if (!(i3 << 24 >> 24 == 32 | (i3 + -48 & 255) < 10)) {
  STACKTOP = i7;
  return;
 }
 if (((i4 & -33) + -65 & 255) >= 26) if (!(i4 << 24 >> 24 == 32 | (i4 + -48 & 255) < 10)) {
  STACKTOP = i7;
  return;
 }
 if (((i1 & -33) + -65 & 255) >= 26) if (!(i1 << 24 >> 24 == 32 | (i1 + -48 & 255) < 10)) {
  STACKTOP = i7;
  return;
 }
 if (HEAP8[i5 >> 0] | 0) {
  i4 = i5 + (_strlen(i5) | 0) | 0;
  HEAP8[i4 >> 0] = 32;
  HEAP8[i4 + 1 >> 0] = 0;
 }
 i1 = i5 + (_strlen(i5) | 0) | 0;
 i2 = 351607;
 i3 = i1 + 10 | 0;
 do {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 } while ((i1 | 0) < (i3 | 0));
 _strcat(i5, i6) | 0;
 STACKTOP = i7;
 return;
}

function _FT_Set_Charmap(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i8;
 if (!i5) {
  i7 = 35;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = HEAP32[i5 + 40 >> 2] | 0;
 if (!((i6 | 0) != 0 & (i1 | 0) != 0)) {
  i7 = 38;
  STACKTOP = i8;
  return i7 | 0;
 }
 i2 = HEAP32[i6 >> 2] | 0;
 if (!i2) i7 = 7; else {
  i2 = HEAP32[i2 + 96 >> 2] | 0;
  i3 = HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] | 0;
  if (!i3) i7 = 7; else {
   i2 = FUNCTION_TABLE_iii[i3 & 255](i2, 283087) | 0;
   if (!i2) i7 = 7; else if (!(FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 255](i6, i4) | 0)) {
    if ((HEAP32[i4 + 4 >> 2] | 0) == 14) {
     i7 = 6;
     STACKTOP = i8;
     return i7 | 0;
    }
   } else i7 = 7;
  }
 }
 i4 = HEAP32[i5 + 36 >> 2] | 0;
 i2 = i1 + (i4 << 2) | 0;
 if ((i4 | 0) <= 0) {
  i7 = 6;
  STACKTOP = i8;
  return i7 | 0;
 }
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) == (i6 | 0)) break;
  i1 = i1 + 4 | 0;
  if (i1 >>> 0 >= i2 >>> 0) {
   i1 = 6;
   i7 = 13;
   break;
  }
 }
 if ((i7 | 0) == 13) {
  STACKTOP = i8;
  return i1 | 0;
 }
 HEAP32[i5 + 92 >> 2] = i6;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _memchr(i2, i5, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = i5 & 255;
 i3 = (i1 | 0) != 0;
 L1 : do if (i3 & (i2 & 3 | 0) != 0) {
  i4 = i5 & 255;
  while (1) {
   if ((HEAP8[i2 >> 0] | 0) == i4 << 24 >> 24) {
    i7 = 6;
    break L1;
   }
   i2 = i2 + 1 | 0;
   i1 = i1 + -1 | 0;
   i3 = (i1 | 0) != 0;
   if (!(i3 & (i2 & 3 | 0) != 0)) {
    i7 = 5;
    break;
   }
  }
 } else i7 = 5; while (0);
 if ((i7 | 0) == 5) if (i3) i7 = 6; else i1 = 0;
 L8 : do if ((i7 | 0) == 6) {
  i4 = i5 & 255;
  if ((HEAP8[i2 >> 0] | 0) != i4 << 24 >> 24) {
   i3 = Math_imul(i6, 16843009) | 0;
   L11 : do if (i1 >>> 0 > 3) while (1) {
    i6 = HEAP32[i2 >> 2] ^ i3;
    if ((i6 & -2139062144 ^ -2139062144) & i6 + -16843009 | 0) break;
    i2 = i2 + 4 | 0;
    i1 = i1 + -4 | 0;
    if (i1 >>> 0 <= 3) {
     i7 = 11;
     break L11;
    }
   } else i7 = 11; while (0);
   if ((i7 | 0) == 11) if (!i1) {
    i1 = 0;
    break;
   }
   while (1) {
    if ((HEAP8[i2 >> 0] | 0) == i4 << 24 >> 24) break L8;
    i2 = i2 + 1 | 0;
    i1 = i1 + -1 | 0;
    if (!i1) {
     i1 = 0;
     break;
    }
   }
  }
 } while (0);
 return (i1 | 0 ? i2 : 0) | 0;
}

function _FcExprDestroy(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) return;
 switch ((HEAP32[i1 >> 2] & 65535) << 16 >> 16) {
 case 35:
 case 39:
 case 40:
 case 37:
 case 38:
  {
   i3 = 11;
   break;
  }
 case 2:
  {
   _free(HEAP32[i1 + 8 >> 2] | 0);
   break;
  }
 case 3:
  {
   i2 = HEAP32[i1 + 8 >> 2] | 0;
   if (i2 | 0) {
    _FcExprDestroy(HEAP32[i2 >> 2] | 0);
    _FcExprDestroy(HEAP32[i2 + 4 >> 2] | 0);
    _FcExprDestroy(HEAP32[i2 + 8 >> 2] | 0);
    _FcExprDestroy(HEAP32[i2 + 12 >> 2] | 0);
    _free(i2);
   }
   break;
  }
 case 4:
  {
   _FcRangeDestroy(HEAP32[i1 + 8 >> 2] | 0);
   break;
  }
 case 6:
  {
   _FcCharSetDestroy(HEAP32[i1 + 8 >> 2] | 0);
   break;
  }
 case 7:
  {
   _FcLangSetDestroy(HEAP32[i1 + 8 >> 2] | 0);
   break;
  }
 case 10:
  {
   _free(HEAP32[i1 + 8 >> 2] | 0);
   break;
  }
 case 25:
 case 24:
 case 30:
 case 29:
 case 28:
 case 27:
 case 23:
 case 22:
 case 21:
 case 20:
 case 26:
 case 31:
 case 32:
 case 33:
 case 34:
 case 19:
 case 36:
  {
   _FcExprDestroy(HEAP32[i1 + 8 + 4 >> 2] | 0);
   i3 = 11;
   break;
  }
 default:
  {}
 }
 if ((i3 | 0) == 11) _FcExprDestroy(HEAP32[i1 + 8 >> 2] | 0);
 HEAP32[i1 >> 2] = 8;
 return;
}

function _Current_Ratio(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = i2 + 244 | 0;
 i6 = i2 + 256 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i1 | 0) {
  i6 = i1;
  return i6 | 0;
 }
 i4 = HEAP16[i2 + 296 >> 1] | 0;
 if (!(i4 << 16 >> 16)) i1 = HEAP32[i5 >> 2] | 0; else {
  i3 = HEAP16[i2 + 294 >> 1] | 0;
  i1 = HEAP32[i2 + 248 >> 2] | 0;
  if (i3 << 16 >> 16) {
   i7 = i3 << 16 >> 16;
   i8 = HEAP32[i5 >> 2] | 0;
   i5 = (i8 | 0) < 0 ? 0 - i8 | 0 : i8;
   i2 = i3 << 16 >> 16 < 0 ? 0 - i7 | 0 : i7;
   i3 = Math_imul(i5 >>> 16, i2) | 0;
   i10 = i3 << 16 | 8192;
   i2 = i10 + (Math_imul(i5 & 65535, i2) | 0) | 0;
   i2 = (i2 >>> 0 < i10 >>> 0 & 1) + (i3 >>> 16) << 18 | i2 >>> 14;
   i3 = i4 << 16 >> 16;
   i10 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i5 = i4 << 16 >> 16 < 0 ? 0 - i3 | 0 : i3;
   i4 = Math_imul(i10 >>> 16, i5) | 0;
   i9 = i4 << 16 | 8192;
   i5 = i9 + (Math_imul(i10 & 65535, i5) | 0) | 0;
   i5 = (i5 >>> 0 < i9 >>> 0 & 1) + (i4 >>> 16) << 18 | i5 >>> 14;
   i1 = _FT_Hypot((i8 ^ i7 | 0) > -1 ? i2 : 0 - i2 | 0, (i1 ^ i3 | 0) > -1 ? i5 : 0 - i5 | 0) | 0;
  }
 }
 HEAP32[i6 >> 2] = i1;
 i10 = i1;
 return i10 | 0;
}

function _outline_destruct(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 _outline_free(i2 + 4 | 0);
 _outline_free(i2 + 28 | 0);
 _outline_free(i2 + 52 | 0);
 switch (HEAP32[i1 >> 2] | 0) {
 case 0:
  {
   i5 = HEAP32[i1 + 8 >> 2] | 0;
   if (!i5) return;
   i6 = i5 + -32 | 0;
   i4 = HEAP32[i5 + -8 >> 2] | 0;
   if (!i4) ___assert_fail(354746, 354776, 466, 354788);
   i1 = i5 + -4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) ___assert_fail(354746, 354776, 466, 354788);
   i3 = i2 + -1 | 0;
   HEAP32[i1 >> 2] = i3;
   if (i3 | 0) return;
   i2 = HEAP32[i6 >> 2] | 0;
   if (i2 | 0) {
    i3 = HEAP32[i5 + -24 >> 2] | 0;
    i1 = i5 + -20 | 0;
    if (i3 | 0) HEAP32[i3 + 12 >> 2] = HEAP32[i1 >> 2];
    HEAP32[HEAP32[i1 >> 2] >> 2] = i3;
    i3 = i2 + 32 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
    i3 = i2 + 20 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - i4;
   }
   i4 = HEAP32[i5 + -28 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[i4 + 12 >> 2] & 63](i5 + ((HEAP32[i4 + 20 >> 2] | 0) + 7 & -8) | 0, i5);
   _free(i6);
   return;
  }
 case 1:
  {
   _free(HEAP32[i1 + 44 >> 2] | 0);
   return;
  }
 default:
  return;
 }
}

function _FcBlanksAdd(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i8;
 i2 = HEAP32[i6 >> 2] | 0;
 L1 : do if ((i2 | 0) > 0) {
  i3 = HEAP32[i6 + 8 >> 2] | 0;
  i1 = 0;
  while (1) {
   if ((HEAP32[i3 + (i1 << 2) >> 2] | 0) == (i7 | 0)) {
    i1 = 1;
    break;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i2 | 0)) break L1;
  }
  STACKTOP = i8;
  return i1 | 0;
 } while (0);
 i5 = i6 + 4 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) == -1) {
  i6 = HEAP32[22811] | 0;
  HEAP32[i4 >> 2] = i7;
  _fprintf(i6, 346923, i4) | 0;
  i7 = 1;
  STACKTOP = i8;
  return i7 | 0;
 }
 do if ((i2 | 0) == (i1 | 0)) {
  i3 = i2 + 32 | 0;
  i4 = i6 + 8 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i2 = i3 << 2;
  if (!i1) i1 = _malloc(i2) | 0; else i1 = _realloc(i1, i2) | 0;
  if (!i1) {
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  } else {
   HEAP32[i5 >> 2] = i3;
   HEAP32[i4 >> 2] = i1;
   i2 = HEAP32[i6 >> 2] | 0;
   break;
  }
 } else i1 = HEAP32[i6 + 8 >> 2] | 0; while (0);
 HEAP32[i6 >> 2] = i2 + 1;
 HEAP32[i1 + (i2 << 2) >> 2] = i7;
 i7 = 1;
 STACKTOP = i8;
 return i7 | 0;
}

function _ps_dimension_done(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i3 = i5 + 28 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i4 = i5 + 32 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i2) {
  while (1) {
   _ft_mem_free(i6, HEAP32[i1 + 8 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   i2 = i2 + -1 | 0;
   if (!i2) break; else i1 = i1 + 16 | 0;
  }
  i1 = HEAP32[i4 >> 2] | 0;
 }
 _ft_mem_free(i6, i1);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 + 24 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 i3 = i5 + 16 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i4 = i5 + 20 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i2) {
  while (1) {
   _ft_mem_free(i6, HEAP32[i1 + 8 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   i2 = i2 + -1 | 0;
   if (!i2) break; else i1 = i1 + 16 | 0;
  }
  i1 = HEAP32[i4 >> 2] | 0;
 }
 _ft_mem_free(i6, i1);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 i4 = i5 + 8 | 0;
 _ft_mem_free(i6, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 return;
}

function _ass_pre_blur1_vert_c(i2, i3, i14, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = i1 + 2 | 0;
 i11 = i1 << 4;
 if (!i14) return;
 if (!i13) {
  i1 = 0;
  do i1 = i1 + 16 | 0; while (i1 >>> 0 < i14 >>> 0);
  return;
 }
 i12 = i11 + 32 | 0;
 i1 = 0;
 while (1) {
  i4 = 0;
  i5 = 0;
  i7 = i2;
  while (1) {
   i8 = i5 + -32 | 0;
   i8 = i8 >>> 0 < i11 >>> 0 ? i3 + (i8 << 1) | 0 : 368376;
   i9 = i5 + -16 | 0;
   i9 = i9 >>> 0 < i11 >>> 0 ? i3 + (i9 << 1) | 0 : 368376;
   i10 = i5 >>> 0 < i11 >>> 0 ? i3 + (i5 << 1) | 0 : 368376;
   i6 = 0;
   do {
    HEAP16[i7 + (i6 << 1) >> 1] = ((HEAPU16[i9 + (i6 << 1) >> 1] | 0) + 1 + (((HEAPU16[i10 + (i6 << 1) >> 1] | 0) + (HEAPU16[i8 + (i6 << 1) >> 1] | 0) | 0) >>> 1 & 32767) | 0) >>> 1 & 32767;
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != 16);
   i4 = i4 + 1 | 0;
   if ((i4 | 0) == (i13 | 0)) break; else {
    i5 = i5 + 16 | 0;
    i7 = i7 + 32 | 0;
   }
  }
  i1 = i1 + 16 | 0;
  if (i1 >>> 0 >= i14 >>> 0) break; else {
   i2 = i2 + (i12 << 1) | 0;
   i3 = i3 + (i11 << 1) | 0;
  }
 }
 return;
}

function _charmap_magic(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i12 + 8 | 0;
 i9 = i12;
 i6 = HEAP32[i4 + 36 >> 2] | 0;
 if ((i6 | 0) > 0) {
  i7 = HEAP32[i4 + 40 >> 2] | 0;
  i1 = -1;
  i2 = 0;
  L3 : do {
   i8 = HEAP32[i7 + (i2 << 2) >> 2] | 0;
   i5 = (HEAP16[i8 + 8 >> 1] | 0) == 3;
   if (i5) switch (HEAP16[i8 + 10 >> 1] | 0) {
   case 1:
   case 10:
    {
     i11 = 5;
     break L3;
    }
   default:
    {}
   }
   i1 = (i1 | 0) < 0 & i5 ? i2 : i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i6 | 0));
  if ((i11 | 0) == 5) {
   _FT_Set_Charmap(i4, i8) | 0;
   STACKTOP = i12;
   return;
  }
  if ((i1 | 0) > -1) {
   _FT_Set_Charmap(i4, HEAP32[(HEAP32[i4 + 40 >> 2] | 0) + (i1 << 2) >> 2] | 0) | 0;
   STACKTOP = i12;
   return;
  }
 }
 if (HEAP32[i4 + 92 >> 2] | 0) {
  STACKTOP = i12;
  return;
 }
 if (!i6) {
  _ass_msg(i3, 2, 357756, i9);
  STACKTOP = i12;
  return;
 } else {
  _ass_msg(i3, 2, 357783, i10);
  _FT_Set_Charmap(i4, HEAP32[HEAP32[i4 + 40 >> 2] >> 2] | 0) | 0;
  STACKTOP = i12;
  return;
 }
}

function _FcPStackPop(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5 + 8 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) {
  _FcConfigMessage(i4, 2, 352633, i5);
  STACKTOP = i5;
  return;
 }
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (i1 | 0) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 | 0) do {
   if (HEAP8[i2 >> 0] | 0) {
    HEAP32[i3 >> 2] = i2;
    _FcConfigMessage(i4, 2, 352653, i3);
   }
   i1 = i1 + 8 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while ((i2 | 0) != 0);
 }
 i2 = i4 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 L13 : do if (i1 | 0) do {
  if ((HEAP32[i1 + 4 >> 2] | 0) != (HEAP32[i4 >> 2] | 0)) break L13;
  _FcVStackPopAndDestroy(i4);
  i1 = HEAP32[i2 >> 2] | 0;
 } while ((i1 | 0) != 0); while (0);
 i3 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 _FcStrBufDestroy(i3 + 12 | 0);
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 if (!((i1 | 0) == 0 | (i1 | 0) == (i3 + 96 | 0))) _free(i1);
 i1 = i4 + 24 | 0;
 i2 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
 if ((i3 | 0) == (i4 + 28 + (i2 * 160 | 0) | 0)) {
  HEAP32[i1 >> 2] = i2;
  STACKTOP = i5;
  return;
 } else {
  _free(i3);
  STACKTOP = i5;
  return;
 }
}

function _tt_face_free_ps_names(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = HEAP32[i2 + 100 >> 2] | 0;
 i6 = i2 + 612 | 0;
 if (!(HEAP8[i6 >> 0] | 0)) {
  HEAP8[i6 >> 0] = 0;
  return;
 }
 i1 = HEAP32[i2 + 468 >> 2] | 0;
 if ((i1 | 0) >= 163840) {
  switch (i1 | 0) {
  case 163840:
   break;
  default:
   {
    HEAP8[i6 >> 0] = 0;
    return;
   }
  }
  i4 = i2 + 620 | 0;
  _ft_mem_free(i5, HEAP32[i4 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  HEAP16[i2 + 616 >> 1] = 0;
  HEAP8[i6 >> 0] = 0;
  return;
 }
 switch (i1 | 0) {
 case 131072:
  break;
 default:
  {
   HEAP8[i6 >> 0] = 0;
   return;
  }
 }
 i4 = i2 + 620 | 0;
 _ft_mem_free(i5, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 HEAP16[i2 + 616 >> 1] = 0;
 i4 = i2 + 618 | 0;
 i3 = i2 + 624 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP16[i4 >> 1] | 0) {
  i2 = 0;
  do {
   _ft_mem_free(i5, HEAP32[i1 + (i2 << 2) >> 2] | 0);
   HEAP32[(HEAP32[i3 >> 2] | 0) + (i2 << 2) >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
  } while (i2 >>> 0 < (HEAPU16[i4 >> 1] | 0) >>> 0);
 }
 _ft_mem_free(i5, i1);
 HEAP32[i3 >> 2] = 0;
 HEAP16[i4 >> 1] = 0;
 HEAP8[i6 >> 0] = 0;
 return;
}

function _tt_cmap8_char_next(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = (HEAPU8[i2 + 8205 >> 0] | 0) << 16 | (HEAPU8[i2 + 8204 >> 0] | 0) << 24 | (HEAPU8[i2 + 8206 >> 0] | 0) << 8 | (HEAPU8[i2 + 8207 >> 0] | 0);
 if (!i1) {
  i4 = 0;
  i5 = 0;
  HEAP32[i6 >> 2] = i4;
  return i5 | 0;
 }
 i3 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
 i5 = i1;
 i4 = i2 + 8208 | 0;
 while (1) {
  i2 = (HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0);
  i1 = i4;
  i4 = i4 + 12 | 0;
  i3 = i3 >>> 0 < i2 >>> 0 ? i2 : i3;
  if (i3 >>> 0 <= ((HEAPU8[i1 + 5 >> 0] | 0) << 16 | (HEAPU8[i1 + 4 >> 0] | 0) << 24 | (HEAPU8[i1 + 6 >> 0] | 0) << 8 | (HEAPU8[i1 + 7 >> 0] | 0)) >>> 0) {
   i1 = ((HEAPU8[i1 + 9 >> 0] | 0) << 16 | (HEAPU8[i1 + 8 >> 0] | 0) << 24 | (HEAPU8[i1 + 10 >> 0] | 0) << 8 | (HEAPU8[i1 + 11 >> 0] | 0)) + (i3 - i2) | 0;
   if (i1 | 0) {
    i2 = 6;
    break;
   }
  }
  i5 = i5 + -1 | 0;
  if (!i5) {
   i3 = 0;
   i1 = 0;
   i2 = 6;
   break;
  }
 }
 if ((i2 | 0) == 6) {
  HEAP32[i6 >> 2] = i3;
  return i1 | 0;
 }
 return 0;
}

function _big2_isPublicId(i2, i4, i1, i7) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i8 = 0;
 i6 = i1 + -2 | 0;
 i1 = i4 + 2 | 0;
 if ((i1 | 0) == (i6 | 0)) {
  i8 = 1;
  return i8 | 0;
 }
 i5 = i2 + 76 | 0;
 i3 = i1;
 i1 = i4;
 L4 : while (1) {
  if (HEAP8[i3 >> 0] | 0) break;
  i2 = HEAP8[i1 + 3 >> 0] | 0;
  switch (HEAP8[i5 + (i2 & 255) >> 0] | 0) {
  case 23:
  case 19:
  case 30:
  case 33:
  case 16:
  case 18:
  case 10:
  case 9:
  case 15:
  case 14:
  case 17:
  case 35:
  case 34:
  case 32:
  case 31:
  case 13:
  case 27:
  case 24:
  case 25:
   break;
  case 21:
   {
    if (i2 << 24 >> 24 == 9) break L4;
    break;
   }
  case 22:
  case 26:
   {
    if (i2 << 24 >> 24 < 0) i8 = 8;
    break;
   }
  default:
   i8 = 8;
  }
  if ((i8 | 0) == 8) {
   i8 = 0;
   switch (HEAP8[i1 + 3 >> 0] | 0) {
   case 64:
   case 36:
    break;
   default:
    break L4;
   }
  }
  i1 = i3 + 2 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i1 = 1;
   i8 = 10;
   break;
  } else {
   i4 = i3;
   i3 = i1;
   i1 = i4;
  }
 }
 if ((i8 | 0) == 10) return i1 | 0;
 HEAP32[i7 >> 2] = i3;
 i8 = 0;
 return i8 | 0;
}

function _pfr_extra_item_load_stem_snaps(i2, i3, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 HEAP32[i8 >> 2] = 0;
 i4 = HEAP32[i6 >> 2] | 0;
 i7 = i6 + 76 | 0;
 if (HEAP32[i7 >> 2] | 0) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 i1 = i2 + 1 | 0;
 if (i1 >>> 0 <= i3 >>> 0) {
  i2 = HEAPU8[i2 >> 0] | 0;
  i5 = i2 & 15;
  i2 = i5 + (i2 >>> 4) | 0;
  if ((i1 + (i2 << 1) | 0) >>> 0 <= i3 >>> 0) {
   i3 = _ft_mem_realloc(i4, 4, 0, i2, 0, i8) | 0;
   i4 = HEAP32[i8 >> 2] | 0;
   if (i4 | 0) {
    i8 = i4;
    STACKTOP = i9;
    return i8 | 0;
   }
   HEAP32[i7 >> 2] = i3;
   HEAP32[i6 + 64 >> 2] = i3 + (i5 << 2);
   if (!i2) {
    i8 = 0;
    STACKTOP = i9;
    return i8 | 0;
   }
   while (1) {
    HEAP32[i3 >> 2] = ((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) << 16 >> 16;
    i2 = i2 + -1 | 0;
    if (!i2) break; else {
     i3 = i3 + 4 | 0;
     i1 = i1 + 2 | 0;
    }
   }
   i8 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i9;
   return i8 | 0;
  }
 }
 HEAP32[i8 >> 2] = 8;
 i8 = 8;
 STACKTOP = i9;
 return i8 | 0;
}

function __FcObjectLookupOtherTypeByName(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 L1 : while (1) {
  i2 = HEAP32[91919] | 0;
  if (i2 | 0) {
   i1 = i2;
   do {
    if (!(_strcmp(HEAP32[i1 + 4 >> 2] | 0, i6) | 0)) {
     i5 = i1;
     break L1;
    }
    i1 = HEAP32[i1 >> 2] | 0;
   } while ((i1 | 0) != 0);
  }
  i4 = _malloc(16) | 0;
  if (!i4) {
   i1 = 0;
   i8 = 16;
   break;
  }
  i1 = ___strdup(i6) | 0;
  i3 = i4 + 4 | 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i4 + 8 >> 2] = -1;
  i1 = HEAP32[17126] | 0;
  HEAP32[17126] = i1 + 1;
  HEAP32[i4 + 12 >> 2] = i1;
  if ((i1 | 0) < 1072) {
   i8 = 7;
   break;
  }
  HEAP32[i4 >> 2] = i2;
  i1 = i2;
  i2 = HEAP32[91919] | 0;
  if ((i2 | 0) == (i1 | 0)) HEAP32[91919] = i4;
  if ((i2 | 0) == (i1 | 0)) {
   i8 = 12;
   break;
  }
  i1 = HEAP32[i3 >> 2] | 0;
  if (i1 | 0) _free(i1);
  _free(i4);
 }
 if ((i8 | 0) == 7) {
  _fwrite(351330, 41, 1, HEAP32[22811] | 0) | 0;
  _abort();
 } else if ((i8 | 0) == 12) i5 = i4; else if ((i8 | 0) == 16) return i1 | 0;
 if (i7 | 0) HEAP32[i7 >> 2] = HEAP32[i5 + 12 >> 2];
 i8 = i5 + 4 | 0;
 return i8 | 0;
}

function _raccess_guess_darwin_ufs_export(i3, i1, i2, i8, i6) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i7 = _raccess_make_file_name(i9, i2, 280865) | 0;
 if (!i7) {
  i9 = 64;
  return i9 | 0;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[i4 + 4 >> 2] & 255](i4, 40) | 0;
 do if (!i5) i1 = 64; else {
  i3 = i7;
  i1 = i5;
  i2 = i1 + 40 | 0;
  do {
   HEAP8[i1 >> 0] = 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i2 | 0));
  i2 = i5 + 28 | 0;
  HEAP32[i2 >> 2] = i4;
  i1 = _FT_Stream_Open(i5, i7) | 0;
  HEAP32[i5 + 16 >> 2] = i3;
  if (i1 | 0) {
   FUNCTION_TABLE_vii[HEAP32[i4 + 8 >> 2] & 63](i4, i5);
   break;
  }
  HEAP32[i2 >> 2] = i4;
  i1 = _raccess_guess_apple_generic(i5, 333319, i6) | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i3 = HEAP32[i5 + 24 >> 2] | 0;
  if (i3 | 0) FUNCTION_TABLE_vi[i3 & 127](i5);
  FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i5);
  if (!i1) {
   HEAP32[i8 >> 2] = i7;
   i9 = 0;
   return i9 | 0;
  }
 } while (0);
 FUNCTION_TABLE_vii[HEAP32[i9 + 8 >> 2] & 63](i9, i7);
 i9 = i1;
 return i9 | 0;
}

function _little2_isPublicId(i2, i3, i1, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i4 = 0, i5 = 0, i7 = 0;
 i5 = i1 + -2 | 0;
 i1 = i3 + 2 | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i7 = 1;
  return i7 | 0;
 }
 i4 = i2 + 76 | 0;
 i2 = i1;
 i1 = i3;
 L4 : while (1) {
  if (HEAP8[i1 + 3 >> 0] | 0) break;
  i1 = HEAP8[i2 >> 0] | 0;
  switch (HEAP8[i4 + (i1 & 255) >> 0] | 0) {
  case 23:
  case 19:
  case 30:
  case 33:
  case 16:
  case 18:
  case 10:
  case 9:
  case 15:
  case 14:
  case 17:
  case 35:
  case 34:
  case 32:
  case 31:
  case 13:
  case 27:
  case 24:
  case 25:
   break;
  case 21:
   {
    if (i1 << 24 >> 24 == 9) break L4;
    break;
   }
  case 22:
  case 26:
   {
    if (i1 << 24 >> 24 < 0) i7 = 8;
    break;
   }
  default:
   i7 = 8;
  }
  if ((i7 | 0) == 8) {
   i7 = 0;
   switch (HEAP8[i2 >> 0] | 0) {
   case 64:
   case 36:
    break;
   default:
    break L4;
   }
  }
  i1 = i2 + 2 | 0;
  if ((i1 | 0) == (i5 | 0)) {
   i1 = 1;
   i7 = 10;
   break;
  } else {
   i3 = i2;
   i2 = i1;
   i1 = i3;
  }
 }
 if ((i7 | 0) == 10) return i1 | 0;
 HEAP32[i6 >> 2] = i2;
 i7 = 0;
 return i7 | 0;
}

function _bitmap_compare(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 L1 : do if ((i1 | 0) == (HEAP32[i3 >> 2] | 0)) {
  switch (i1 | 0) {
  case 0:
   break;
  case 1:
   {
    i1 = (_strcmp(HEAP32[i2 + 4 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0) | 0) == 0;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
  if ((HEAP32[i2 + 4 >> 2] | 0) == (HEAP32[i3 + 4 >> 2] | 0)) if ((HEAP32[i2 + 8 >> 2] | 0) == (HEAP32[i3 + 8 >> 2] | 0)) if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i3 + 12 >> 2] | 0)) if ((HEAP32[i2 + 16 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0)) if ((HEAP32[i2 + 20 >> 2] | 0) == (HEAP32[i3 + 20 >> 2] | 0)) if ((HEAP32[i2 + 24 >> 2] | 0) == (HEAP32[i3 + 24 >> 2] | 0)) if ((HEAP32[i2 + 28 >> 2] | 0) == (HEAP32[i3 + 28 >> 2] | 0)) if ((HEAP32[i2 + 32 >> 2] | 0) == (HEAP32[i3 + 32 >> 2] | 0)) if ((HEAP32[i2 + 36 >> 2] | 0) == (HEAP32[i3 + 36 >> 2] | 0)) i1 = (HEAP32[i2 + 40 >> 2] | 0) == (HEAP32[i3 + 40 >> 2] | 0); else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0; else i1 = 0;
 } else i1 = 0; while (0);
 return i1 & 1 | 0;
}

function _t1_builder_init(i4, i1, i3, i2, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 HEAP32[i4 + 64 >> 2] = 0;
 HEAP8[i4 + 68 >> 0] = 1;
 HEAP32[i4 + 4 >> 2] = i1;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 >> 2] = HEAP32[i1 + 100 >> 2];
 if (i2 | 0) {
  i2 = i2 + 156 | 0;
  i1 = HEAP32[HEAP32[i2 >> 2] >> 2] | 0;
  HEAP32[i4 + 12 >> 2] = i1;
  HEAP32[i4 + 16 >> 2] = i1 + 20;
  HEAP32[i4 + 20 >> 2] = i1 + 56;
  _FT_GlyphLoader_Rewind(i1);
  HEAP32[i4 + 76 >> 2] = HEAP32[i3 + 40 >> 2];
  i1 = i4 + 72 | 0;
  HEAP32[i1 >> 2] = 0;
  if (i5 << 24 >> 24) HEAP32[i1 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2];
 }
 i3 = i4 + 24 | 0;
 i5 = i4 + 80 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i5 >> 2] = HEAP32[6049];
 HEAP32[i5 + 4 >> 2] = HEAP32[6050];
 HEAP32[i5 + 8 >> 2] = HEAP32[6051];
 HEAP32[i5 + 12 >> 2] = HEAP32[6052];
 HEAP32[i5 + 16 >> 2] = HEAP32[6053];
 HEAP32[i5 + 20 >> 2] = HEAP32[6054];
 HEAP32[i5 + 24 >> 2] = HEAP32[6055];
 HEAP32[i5 + 28 >> 2] = HEAP32[6056];
 return;
}

function _raccess_guess_linux_netatalk(i3, i1, i2, i8, i6) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i7 = _raccess_make_file_name(i9, i2, 280800) | 0;
 if (!i7) {
  i9 = 64;
  return i9 | 0;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[i4 + 4 >> 2] & 255](i4, 40) | 0;
 do if (!i5) i1 = 64; else {
  i3 = i7;
  i1 = i5;
  i2 = i1 + 40 | 0;
  do {
   HEAP8[i1 >> 0] = 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i2 | 0));
  i2 = i5 + 28 | 0;
  HEAP32[i2 >> 2] = i4;
  i1 = _FT_Stream_Open(i5, i7) | 0;
  HEAP32[i5 + 16 >> 2] = i3;
  if (i1 | 0) {
   FUNCTION_TABLE_vii[HEAP32[i4 + 8 >> 2] & 63](i4, i5);
   break;
  }
  HEAP32[i2 >> 2] = i4;
  i1 = _raccess_guess_apple_generic(i5, 333319, i6) | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i3 = HEAP32[i5 + 24 >> 2] | 0;
  if (i3 | 0) FUNCTION_TABLE_vi[i3 & 127](i5);
  FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i5);
  if (!i1) {
   HEAP32[i8 >> 2] = i7;
   i9 = 0;
   return i9 | 0;
  }
 } while (0);
 FUNCTION_TABLE_vii[HEAP32[i9 + 8 >> 2] & 63](i9, i7);
 i9 = i1;
 return i9 | 0;
}

function _raccess_guess_linux_double(i3, i1, i2, i8, i6) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i7 = _raccess_make_file_name(i9, i2, 280814) | 0;
 if (!i7) {
  i9 = 64;
  return i9 | 0;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[i4 + 4 >> 2] & 255](i4, 40) | 0;
 do if (!i5) i1 = 64; else {
  i3 = i7;
  i1 = i5;
  i2 = i1 + 40 | 0;
  do {
   HEAP8[i1 >> 0] = 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i2 | 0));
  i2 = i5 + 28 | 0;
  HEAP32[i2 >> 2] = i4;
  i1 = _FT_Stream_Open(i5, i7) | 0;
  HEAP32[i5 + 16 >> 2] = i3;
  if (i1 | 0) {
   FUNCTION_TABLE_vii[HEAP32[i4 + 8 >> 2] & 63](i4, i5);
   break;
  }
  HEAP32[i2 >> 2] = i4;
  i1 = _raccess_guess_apple_generic(i5, 333319, i6) | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i3 = HEAP32[i5 + 24 >> 2] | 0;
  if (i3 | 0) FUNCTION_TABLE_vi[i3 & 127](i5);
  FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i5);
  if (!i1) {
   HEAP32[i8 >> 2] = i7;
   i9 = 0;
   return i9 | 0;
  }
 } while (0);
 FUNCTION_TABLE_vii[HEAP32[i9 + 8 >> 2] & 63](i9, i7);
 i9 = i1;
 return i9 | 0;
}

function _FcCompareLang(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i5 + 16 | 0;
 i4 = i5;
 _FcValueCanonicalize(i3, i1);
 _FcValueCanonicalize(i4, i2);
 L1 : do switch (HEAP32[i3 >> 2] | 0) {
 case 8:
  switch (HEAP32[i4 >> 2] | 0) {
  case 8:
   {
    i1 = _FcLangSetCompare(HEAP32[i3 + 8 >> 2] | 0, HEAP32[i4 + 8 >> 2] | 0) | 0;
    break L1;
   }
  case 3:
   {
    i1 = _FcLangSetHasLang(HEAP32[i3 + 8 >> 2] | 0, HEAP32[i4 + 8 >> 2] | 0) | 0;
    break L1;
   }
  default:
   {
    d6 = -1.0;
    STACKTOP = i5;
    return +d6;
   }
  }
 case 3:
  switch (HEAP32[i4 >> 2] | 0) {
  case 8:
   {
    i1 = _FcLangSetHasLang(HEAP32[i4 + 8 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0;
    break L1;
   }
  case 3:
   {
    i1 = _FcLangCompare(HEAP32[i3 + 8 >> 2] | 0, HEAP32[i4 + 8 >> 2] | 0) | 0;
    break L1;
   }
  default:
   {
    d6 = -1.0;
    STACKTOP = i5;
    return +d6;
   }
  }
 default:
  {
   d6 = -1.0;
   STACKTOP = i5;
   return +d6;
  }
 } while (0);
 d6 = (i1 | 0) == 0 ? 0.0 : (i1 | 0) == 1 ? 1.0 : 2.0;
 STACKTOP = i5;
 return +d6;
}

function _tt_cmap14_get_nondef_chars(i2, i8, i3) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i1 = (HEAPU8[i8 + 1 >> 0] | 0) << 16 | (HEAPU8[i8 >> 0] | 0) << 24 | (HEAPU8[i8 + 2 >> 0] | 0) << 8 | (HEAPU8[i8 + 3 >> 0] | 0);
 i5 = i1 + 1 | 0;
 i6 = i2 + 28 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 HEAP32[i7 >> 2] = 0;
 do if (i4 >>> 0 < i5 >>> 0) {
  HEAP32[i2 + 36 >> 2] = i3;
  i10 = i2 + 32 | 0;
  i2 = _ft_mem_realloc(i3, 4, i4, i5, HEAP32[i10 >> 2] | 0, i7) | 0;
  HEAP32[i10 >> 2] = i2;
  if (!(HEAP32[i7 >> 2] | 0)) {
   HEAP32[i6 >> 2] = i5;
   i4 = i2;
   break;
  }
  i10 = 0;
  STACKTOP = i9;
  return i10 | 0;
 } else i4 = HEAP32[i2 + 32 >> 2] | 0; while (0);
 if (!i1) i1 = 0; else {
  i3 = 0;
  i2 = i8 + 4 | 0;
  while (1) {
   HEAP32[i4 + (i3 << 2) >> 2] = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) << 16 | (HEAPU8[i2 + 2 >> 0] | 0);
   i3 = i3 + 1 | 0;
   if ((i3 | 0) == (i1 | 0)) break; else i2 = i2 + 5 | 0;
  }
 }
 HEAP32[i4 + (i1 << 2) >> 2] = 0;
 i10 = i4;
 STACKTOP = i9;
 return i10 | 0;
}

function _outline_get_cbox(i1, i11) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i12 = HEAP32[i1 >> 2] | 0;
 if (!i12) {
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  HEAP32[i11 + 12 >> 2] = 0;
  return;
 }
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i10 = i11 + 8 | 0;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i1;
 i4 = HEAP32[i9 + 4 >> 2] | 0;
 i6 = i11 + 12 | 0;
 HEAP32[i6 >> 2] = i4;
 i7 = i11 + 4 | 0;
 HEAP32[i7 >> 2] = i4;
 if ((i12 | 0) == 1) return; else {
  i5 = 1;
  i8 = i1;
  i2 = i1;
  i3 = i4;
  i1 = i4;
 }
 do {
  i4 = i9 + (i5 << 3) | 0;
  i13 = HEAP32[i4 >> 2] | 0;
  i8 = (i8 | 0) > (i13 | 0) ? i13 : i8;
  HEAP32[i11 >> 2] = i8;
  i2 = (i2 | 0) > (i13 | 0) ? i2 : HEAP32[i4 >> 2] | 0;
  HEAP32[i10 >> 2] = i2;
  i4 = i9 + (i5 << 3) + 4 | 0;
  i13 = HEAP32[i4 >> 2] | 0;
  i3 = (i3 | 0) > (i13 | 0) ? i13 : i3;
  HEAP32[i7 >> 2] = i3;
  i1 = (i1 | 0) > (i13 | 0) ? i1 : HEAP32[i4 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  i5 = i5 + 1 | 0;
 } while (i5 >>> 0 < i12 >>> 0);
 return;
}

function _FcLangSetCopy(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = _malloc(40) | 0;
 if (!i3) {
  i5 = 0;
  return i5 | 0;
 }
 i2 = i3 + 8 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 8;
 HEAP32[i3 >> 2] = 0;
 i4 = HEAP32[i1 + 4 >> 2] << 2;
 i4 = i4 >>> 0 < 32 ? i4 : 32;
 _memset(i2 + i4 | 0, 0, (i4 >>> 0 > 31 ? 0 : 32 - i4 | 0) | 0) | 0;
 _memcpy(i2 | 0, i1 + 8 | 0, i4 | 0) | 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  i5 = i3;
  return i5 | 0;
 }
 i4 = _FcStrSetCreate() | 0;
 HEAP32[i3 >> 2] = i4;
 if (i4 | 0) {
  i1 = _FcStrListCreate(HEAP32[i1 >> 2] | 0) | 0;
  do if (i1 | 0) {
   while (1) {
    i2 = _FcStrListNext(i1) | 0;
    if (!i2) break;
    if (!(_FcStrSetAdd(i4, i2) | 0)) {
     i5 = 7;
     break;
    }
   }
   if ((i5 | 0) == 7) {
    _FcStrListDone(i1);
    break;
   }
   _FcStrListDone(i1);
   i5 = i3;
   return i5 | 0;
  } while (0);
  _FcStrSetDestroy(i4);
 }
 _free(i3);
 i5 = 0;
 return i5 | 0;
}

function _FcStrSetAddLangs(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i5 = i7;
 i2 = i5;
 i3 = i2 + 128 | 0;
 do {
  HEAP8[i2 >> 0] = 0;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) < (i3 | 0));
 if (!i1) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i2 = _strchr(i1, 58) | 0;
 if (!i2) i3 = 0; else {
  i3 = 0;
  i4 = i2;
  do {
   i2 = i4 - i1 | 0;
   i2 = i2 >>> 0 < 127 ? i2 : 127;
   _strncpy(i5, i1, i2) | 0;
   HEAP8[i5 + i2 >> 0] = 0;
   if (HEAP8[i5 >> 0] | 0) {
    i2 = _FcLangNormalize(i5) | 0;
    if (i2) {
     i1 = ___strdup(i2) | 0;
     if (i1 | 0) if (!(__FcStrSetAppend(i6, i1) | 0)) _free(i1);
     _free(i2);
     i3 = 1;
    }
   }
   i1 = i4 + 1 | 0;
   i4 = _strchr(i1, 58) | 0;
  } while ((i4 | 0) != 0);
 }
 if (!(HEAP8[i1 >> 0] | 0)) {
  i6 = i3;
  STACKTOP = i7;
  return i6 | 0;
 }
 i2 = _FcLangNormalize(i1) | 0;
 if (!i2) {
  i6 = i3;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = ___strdup(i2) | 0;
 if (i1 | 0) if (!(__FcStrSetAppend(i6, i1) | 0)) _free(i1);
 _free(i2);
 i6 = 1;
 STACKTOP = i7;
 return i6 | 0;
}

function _get_substitutions(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7;
 i6 = _FcPatternCreate() | 0;
 if (!i6) {
  STACKTOP = i7;
  return;
 }
 _FcPatternAddString(i6, 354977, i2) | 0;
 _FcPatternAddString(i6, 354977, 355032) | 0;
 _FcPatternAddBool(i6, 354939, 1) | 0;
 L4 : do if (_FcConfigSubstitute(HEAP32[i1 >> 2] | 0, i6, 0) | 0) {
  i4 = i3 + 16 | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _calloc(100, 4) | 0;
  i2 = i3 + 4 | 0;
  HEAP32[i2 >> 2] = i1;
  if (i1 | 0) {
   HEAP32[i5 >> 2] = 0;
   if (!(_FcPatternGetString(i6, 354977, 0, i5) | 0)) do {
    if ((HEAP32[i4 >> 2] | 0) >= 100) break L4;
    i1 = HEAP32[i5 >> 2] | 0;
    if (!(_strcmp(i1, 355032) | 0)) break L4;
    i1 = ___strdup(i1) | 0;
    HEAP32[i5 >> 2] = i1;
    if (!i1) break L4;
    i3 = HEAP32[i4 >> 2] | 0;
    HEAP32[(HEAP32[i2 >> 2] | 0) + (i3 << 2) >> 2] = i1;
    i3 = i3 + 1 | 0;
    HEAP32[i4 >> 2] = i3;
   } while (!(_FcPatternGetString(i6, 354977, i3, i5) | 0));
  }
 } while (0);
 _FcPatternDestroy(i6);
 STACKTOP = i7;
 return;
}

function _wcrtomb(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 do if (!i1) i1 = 1; else {
  if (i2 >>> 0 < 128) {
   HEAP8[i1 >> 0] = i2;
   i1 = 1;
   break;
  }
  i3 = (___pthread_self_48() | 0) + 188 | 0;
  if (!(HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) if ((i2 & -128 | 0) == 57216) {
   HEAP8[i1 >> 0] = i2;
   i1 = 1;
   break;
  } else {
   i1 = ___errno_location() | 0;
   HEAP32[i1 >> 2] = 84;
   i1 = -1;
   break;
  }
  if (i2 >>> 0 < 2048) {
   HEAP8[i1 >> 0] = i2 >>> 6 | 192;
   HEAP8[i1 + 1 >> 0] = i2 & 63 | 128;
   i1 = 2;
   break;
  }
  if (i2 >>> 0 < 55296 | (i2 & -8192 | 0) == 57344) {
   HEAP8[i1 >> 0] = i2 >>> 12 | 224;
   HEAP8[i1 + 1 >> 0] = i2 >>> 6 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i2 & 63 | 128;
   i1 = 3;
   break;
  }
  if ((i2 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[i1 >> 0] = i2 >>> 18 | 240;
   HEAP8[i1 + 1 >> 0] = i2 >>> 12 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i2 >>> 6 & 63 | 128;
   HEAP8[i1 + 3 >> 0] = i2 & 63 | 128;
   i1 = 4;
   break;
  } else {
   i1 = ___errno_location() | 0;
   HEAP32[i1 >> 2] = 84;
   i1 = -1;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _outline_copy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (i2 | 0) {
  i5 = HEAP32[i2 >> 2] | 0;
  if (i5 | 0) {
   i6 = HEAP32[i2 + 8 >> 2] | 0;
   i7 = i5 << 3;
   i8 = _malloc(i7) | 0;
   HEAP32[i1 + 16 >> 2] = i8;
   i3 = _malloc(i6) | 0;
   i4 = i1 + 20 | 0;
   HEAP32[i4 >> 2] = i3;
   if ((i8 | 0) == 0 | (i3 | 0) == 0) {
    _free(i8);
    _free(HEAP32[i4 >> 2] | 0);
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 0;
    HEAP32[i1 + 16 >> 2] = 0;
    HEAP32[i1 + 20 >> 2] = 0;
    i8 = 0;
    return i8 | 0;
   } else {
    HEAP32[i1 + 4 >> 2] = i5;
    HEAP32[i1 + 12 >> 2] = i6;
    _memcpy(i8 | 0, HEAP32[i2 + 16 >> 2] | 0, i7 | 0) | 0;
    _memcpy(i3 | 0, HEAP32[i2 + 20 >> 2] | 0, i6 | 0) | 0;
    HEAP32[i1 >> 2] = i5;
    HEAP32[i1 + 8 >> 2] = i6;
    i8 = 1;
    return i8 | 0;
   }
  }
 };
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 i8 = 1;
 return i8 | 0;
}

function _FT_Get_First_Char(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7;
 do if (!i1) {
  i2 = 0;
  i1 = 0;
 } else {
  i3 = i1 + 92 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) {
   i2 = 0;
   i1 = 0;
  } else {
   i4 = i1 + 16 | 0;
   if (!(HEAP32[i4 >> 2] | 0)) {
    i2 = 0;
    i1 = 0;
   } else {
    i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 12 >> 2] & 255](i2, 0) | 0;
    if (i1 | 0) if (i1 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0) {
     i2 = 0;
     break;
    }
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) {
     i2 = 0;
     i1 = 0;
    } else if (!(HEAP32[i4 >> 2] | 0)) {
     i2 = 0;
     i1 = 0;
    } else {
     HEAP32[i5 >> 2] = 0;
     i3 = i2 + 12 | 0;
     do i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 255](i2, i5) | 0; while (i1 >>> 0 >= (HEAP32[i4 >> 2] | 0) >>> 0);
     i2 = (i1 | 0) == 0 ? 0 : HEAP32[i5 >> 2] | 0;
    }
   }
  }
 } while (0);
 if (!i6) {
  STACKTOP = i7;
  return i2 | 0;
 }
 HEAP32[i6 >> 2] = i1;
 STACKTOP = i7;
 return i2 | 0;
}

function _font_hash(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 if (!(i3 << 24 >> 24)) i1 = -2128831035; else {
  i1 = -2128831035;
  do {
   i2 = i2 + 1 | 0;
   i1 = Math_imul(i1 ^ i3 & 255, 16777619) | 0;
   i3 = HEAP8[i2 >> 0] | 0;
  } while (i3 << 24 >> 24 != 0);
 }
 i3 = Math_imul((HEAPU8[i4 + 4 >> 0] | 0) ^ i1, 16777619) | 0;
 i3 = Math_imul(i3 ^ (HEAPU8[i4 + 5 >> 0] | 0), 16777619) | 0;
 i3 = Math_imul(i3 ^ (HEAPU8[i4 + 6 >> 0] | 0), 16777619) | 0;
 i3 = Math_imul(i3 ^ (HEAPU8[i4 + 7 >> 0] | 0), 16777619) | 0;
 i3 = Math_imul((HEAPU8[i4 + 8 >> 0] | 0) ^ i3, 16777619) | 0;
 i3 = Math_imul(i3 ^ (HEAPU8[i4 + 9 >> 0] | 0), 16777619) | 0;
 i3 = Math_imul(i3 ^ (HEAPU8[i4 + 10 >> 0] | 0), 16777619) | 0;
 i3 = Math_imul(i3 ^ (HEAPU8[i4 + 11 >> 0] | 0), 16777619) | 0;
 i3 = Math_imul((HEAPU8[i4 + 12 >> 0] | 0) ^ i3, 16777619) | 0;
 i3 = Math_imul(i3 ^ (HEAPU8[i4 + 13 >> 0] | 0), 16777619) | 0;
 i3 = Math_imul(i3 ^ (HEAPU8[i4 + 14 >> 0] | 0), 16777619) | 0;
 return Math_imul(i3 ^ (HEAPU8[i4 + 15 >> 0] | 0), 16777619) | 0;
}

function _fread(i2, i7, i1, i8) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = Math_imul(i1, i7) | 0;
 i1 = (i7 | 0) == 0 ? 0 : i1;
 if ((HEAP32[i8 + 76 >> 2] | 0) > -1) i6 = ___lockfile(i8) | 0; else i6 = 0;
 i3 = i8 + 74 | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 HEAP8[i3 >> 0] = i4 + 255 | i4;
 i3 = i8 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i11 = (HEAP32[i8 + 8 >> 2] | 0) - i4 | 0;
 i5 = i11 >>> 0 < i9 >>> 0 ? i11 : i9;
 if ((i11 | 0) > 0) {
  _memcpy(i2 | 0, i4 | 0, i5 | 0) | 0;
  HEAP32[i3 >> 2] = i4 + i5;
  i3 = i9 - i5 | 0;
  i2 = i2 + i5 | 0;
 } else i3 = i9;
 L7 : do if (!i3) i10 = 13; else {
  i5 = i8 + 32 | 0;
  while (1) {
   if (___toread(i8) | 0) break;
   i4 = FUNCTION_TABLE_iiii[HEAP32[i5 >> 2] & 127](i8, i2, i3) | 0;
   if ((i4 + 1 | 0) >>> 0 < 2) break;
   i3 = i3 - i4 | 0;
   if (!i3) {
    i10 = 13;
    break L7;
   } else i2 = i2 + i4 | 0;
  }
  if (i6 | 0) ___unlockfile(i8);
  i1 = ((i9 - i3 | 0) >>> 0) / (i7 >>> 0) | 0;
 } while (0);
 if ((i10 | 0) == 13) if (i6) ___unlockfile(i8);
 return i1 | 0;
}

function ___fwritex(i7, i2, i6) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i1 = i6 + 16 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!i3) if (!(___towrite(i6) | 0)) {
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = 5;
 } else i1 = 0; else i4 = 5;
 L5 : do if ((i4 | 0) == 5) {
  i8 = i6 + 20 | 0;
  i5 = HEAP32[i8 >> 2] | 0;
  i1 = i5;
  if ((i3 - i5 | 0) >>> 0 < i2 >>> 0) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 127](i6, i7, i2) | 0;
   break;
  }
  L10 : do if ((HEAP8[i6 + 75 >> 0] | 0) > -1) {
   i5 = i2;
   while (1) {
    if (!i5) {
     i4 = 0;
     i3 = i7;
     break L10;
    }
    i3 = i5 + -1 | 0;
    if ((HEAP8[i7 + i3 >> 0] | 0) == 10) break; else i5 = i3;
   }
   i1 = FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 127](i6, i7, i5) | 0;
   if (i1 >>> 0 < i5 >>> 0) break L5;
   i4 = i5;
   i3 = i7 + i5 | 0;
   i2 = i2 - i5 | 0;
   i1 = HEAP32[i8 >> 2] | 0;
  } else {
   i4 = 0;
   i3 = i7;
  } while (0);
  _memcpy(i1 | 0, i3 | 0, i2 | 0) | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i2;
  i1 = i4 + i2 | 0;
 } while (0);
 return i1 | 0;
}

function _FcStrSetEqual(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i10 | 0) != (HEAP32[i2 + 4 >> 2] | 0)) {
  i10 = 0;
  return i10 | 0;
 }
 if ((i10 | 0) <= 0) {
  i10 = 1;
  return i10 | 0;
 }
 i9 = HEAP32[i1 + 12 >> 2] | 0;
 i7 = HEAP32[i2 + 12 >> 2] | 0;
 i5 = 0;
 L7 : while (1) {
  i8 = HEAP32[i9 + (i5 << 2) >> 2] | 0;
  i6 = 0;
  while (1) {
   i1 = HEAP32[i7 + (i6 << 2) >> 2] | 0;
   if ((i1 | 0) == (i8 | 0)) break; else {
    i3 = i8;
    i2 = i1;
   }
   while (1) {
    i1 = HEAP8[i2 >> 0] | 0;
    i4 = HEAP8[i3 >> 0] | 0;
    if (!(i1 << 24 >> 24)) {
     i1 = 0;
     break;
    }
    if (i1 << 24 >> 24 == i4 << 24 >> 24) {
     i3 = i3 + 1 | 0;
     i2 = i2 + 1 | 0;
    } else break;
   }
   i6 = i6 + 1 | 0;
   if (i1 << 24 >> 24 == i4 << 24 >> 24) break;
   if ((i6 | 0) >= (i10 | 0)) {
    i1 = 0;
    i2 = 11;
    break L7;
   }
  }
  i5 = i5 + 1 | 0;
  if ((i5 | 0) >= (i10 | 0)) {
   i1 = 1;
   i2 = 11;
   break;
  }
 }
 if ((i2 | 0) == 11) return i1 | 0;
 return 0;
}

function _FcSubstPrint(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 _puts(354267) | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i1) {
  _putchar(10) | 0;
  STACKTOP = i6;
  return;
 } else i2 = 0;
 do {
  i4 = i1 + 4 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) != (i3 | 0)) {
   switch (i3 | 0) {
   case 1:
    {
     _puts(354273) | 0;
     break;
    }
   case 2:
    {
     _puts(354280) | 0;
     break;
    }
   default:
    {}
   }
   i2 = HEAP32[i4 >> 2] | 0;
  }
  _putchar(9) | 0;
  switch (HEAP32[i4 >> 2] | 0) {
  case 1:
   {
    _FcTestPrint(HEAP32[i1 + 8 >> 2] | 0);
    break;
   }
  case 2:
   {
    i4 = HEAP32[i1 + 8 >> 2] | 0;
    i3 = _FcObjectName(HEAP32[i4 >> 2] | 0) | 0;
    HEAP32[i5 >> 2] = i3;
    _printf(348633, i5) | 0;
    _FcOpPrint(HEAP32[i4 + 4 >> 2] | 0);
    _putchar(32) | 0;
    _FcExprPrint(HEAP32[i4 + 8 >> 2] | 0);
    _puts(354287) | 0;
    break;
   }
  default:
   {}
  }
  i1 = HEAP32[i1 >> 2] | 0;
 } while ((i1 | 0) != 0);
 _putchar(10) | 0;
 STACKTOP = i6;
 return;
}

function _FcAtomicCreate(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = _strlen(i1) | 0;
 i3 = i2 + 5 | 0;
 i4 = _malloc((i3 + i2 << 1) + 32 | 0) | 0;
 if (!i4) {
  i4 = 0;
  return i4 | 0;
 }
 i5 = i4 + 16 | 0;
 HEAP32[i4 >> 2] = i5;
 _strcpy(i5, i1) | 0;
 i2 = (HEAP32[i4 >> 2] | 0) + i2 + 1 | 0;
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i2;
 _strcpy(i2, i1) | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i2 = i2 + (_strlen(i2) | 0) | 0;
 HEAP8[i2 >> 0] = HEAP8[346894] | 0;
 HEAP8[i2 + 1 >> 0] = HEAP8[346895] | 0;
 HEAP8[i2 + 2 >> 0] = HEAP8[346896] | 0;
 HEAP8[i2 + 3 >> 0] = HEAP8[346897] | 0;
 HEAP8[i2 + 4 >> 0] = HEAP8[346898] | 0;
 i5 = (HEAP32[i5 >> 2] | 0) + i3 + 1 | 0;
 i2 = i4 + 8 | 0;
 HEAP32[i2 >> 2] = i5;
 _strcpy(i5, i1) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i1 = i1 + (_strlen(i1) | 0) | 0;
 HEAP8[i1 >> 0] = HEAP8[346899] | 0;
 HEAP8[i1 + 1 >> 0] = HEAP8[346900] | 0;
 HEAP8[i1 + 2 >> 0] = HEAP8[346901] | 0;
 HEAP8[i1 + 3 >> 0] = HEAP8[346902] | 0;
 HEAP8[i1 + 4 >> 0] = HEAP8[346903] | 0;
 HEAP32[i4 + 12 >> 2] = (HEAP32[i2 >> 2] | 0) + i3 + 1;
 return i4 | 0;
}

function _tt_cmap8_char_index(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 i2 = (HEAPU8[i1 + 8205 >> 0] | 0) << 16 | (HEAPU8[i1 + 8204 >> 0] | 0) << 24 | (HEAPU8[i1 + 8206 >> 0] | 0) << 8 | (HEAPU8[i1 + 8207 >> 0] | 0);
 if (!i2) {
  i5 = 0;
  return i5 | 0;
 }
 i4 = i1 + 8208 | 0;
 i1 = i2;
 while (1) {
  i2 = (HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0);
  if (i2 >>> 0 > i5 >>> 0) {
   i1 = 0;
   i3 = 7;
   break;
  }
  i1 = i1 + -1 | 0;
  if (((HEAPU8[i4 + 5 >> 0] | 0) << 16 | (HEAPU8[i4 + 4 >> 0] | 0) << 24 | (HEAPU8[i4 + 6 >> 0] | 0) << 8 | (HEAPU8[i4 + 7 >> 0] | 0)) >>> 0 >= i5 >>> 0) {
   i3 = 6;
   break;
  }
  if (!i1) {
   i1 = 0;
   i3 = 7;
   break;
  } else i4 = i4 + 12 | 0;
 }
 if ((i3 | 0) == 6) {
  i5 = i5 - i2 + ((HEAPU8[i4 + 9 >> 0] | 0) << 16 | (HEAPU8[i4 + 8 >> 0] | 0) << 24 | (HEAPU8[i4 + 10 >> 0] | 0) << 8 | (HEAPU8[i4 + 11 >> 0] | 0)) | 0;
  return i5 | 0;
 } else if ((i3 | 0) == 7) return i1 | 0;
 return 0;
}

function _cff_get_name_index(i1, i8) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i2 = HEAP32[i1 + 656 >> 2] | 0;
 i1 = _ft_module_get_service(HEAP32[i1 + 96 >> 2] | 0, 284871) | 0;
 if (!i1) {
  i9 = 0;
  return i9 | 0;
 }
 i7 = i2 + 12 | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  i9 = 0;
  return i9 | 0;
 }
 i5 = i2 + 1160 | 0;
 i6 = i2 + 1312 | 0;
 i4 = i2 + 1316 | 0;
 i3 = i1 + 20 | 0;
 i1 = 0;
 while (1) {
  i10 = HEAP16[(HEAP32[i5 >> 2] | 0) + (i1 << 1) >> 1] | 0;
  i2 = i10 & 65535;
  if ((i10 & 65535) > 390) {
   i2 = i2 + -391 | 0;
   if ((HEAP32[i6 >> 2] | 0) >>> 0 > i2 >>> 0) {
    i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + (i2 << 2) >> 2] | 0;
    i9 = 8;
   }
  } else {
   i2 = FUNCTION_TABLE_ii[HEAP32[i3 >> 2] & 63](i2) | 0;
   i9 = 8;
  }
  if ((i9 | 0) == 8) {
   i9 = 0;
   if (i2 | 0) if (!(_strcmp(i8, i2) | 0)) {
    i9 = 11;
    break;
   }
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) {
   i1 = 0;
   i9 = 11;
   break;
  }
 }
 if ((i9 | 0) == 11) return i1 | 0;
 return 0;
}

function _ass_face_set_size(i5, d6) {
 i5 = i5 | 0;
 d6 = +d6;
 var d1 = 0.0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i9;
 i2 = _FT_Get_Sfnt_Table(i5, 3) | 0;
 i3 = _FT_Get_Sfnt_Table(i5, 2) | 0;
 i8 = HEAP32[i5 + 88 >> 2] | 0;
 if (!i3) d1 = 1.0; else {
  if (!i2) i4 = 4; else {
   i2 = (HEAP16[i2 + 4 >> 1] | 0) - (HEAP16[i2 + 6 >> 1] | 0) | 0;
   if (!i2) i4 = 4;
  }
  if ((i4 | 0) == 4) i2 = (HEAP16[i3 + 70 >> 1] | 0) - (HEAP16[i3 + 72 >> 1] | 0) | 0;
  i4 = (HEAP16[i3 + 78 >> 1] | 0) + (HEAP16[i3 + 76 >> 1] | 0) | 0;
  d1 = (i2 | 0) != 0 & (i4 | 0) != 0 ? +(i2 | 0) / +(i4 | 0) : 1.0;
 }
 HEAP32[i7 >> 2] = 1;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = ~~(d1 * d6 * 64.0);
 HEAP32[i7 + 16 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 _FT_Request_Size(i5, i7) | 0;
 i7 = i8 + 24 | 0;
 HEAP32[i7 >> 2] = ~~(+(HEAP32[i7 >> 2] | 0) / d1);
 i7 = i8 + 28 | 0;
 HEAP32[i7 >> 2] = ~~(+(HEAP32[i7 >> 2] | 0) / d1);
 i8 = i8 + 32 | 0;
 HEAP32[i8 >> 2] = ~~(+(HEAP32[i8 >> 2] | 0) / d1);
 STACKTOP = i9;
 return;
}

function _FcValueSave(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 switch (HEAP32[i2 >> 2] | 0) {
 case 3:
  {
   i4 = i2 + 8 | 0;
   i3 = ___strdup(HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i3;
   if (!i3) HEAP32[i2 >> 2] = 0;
   break;
  }
 case 5:
  {
   i3 = i2 + 8 | 0;
   i4 = _FcMatrixCopy(HEAP32[i3 >> 2] | 0) | 0;
   HEAP32[i3 >> 2] = i4;
   if (!i4) HEAP32[i2 >> 2] = 0;
   break;
  }
 case 6:
  {
   i3 = i2 + 8 | 0;
   i4 = _FcCharSetCopy(HEAP32[i3 >> 2] | 0) | 0;
   HEAP32[i3 >> 2] = i4;
   if (!i4) HEAP32[i2 >> 2] = 0;
   break;
  }
 case 8:
  {
   i3 = i2 + 8 | 0;
   i4 = _FcLangSetCopy(HEAP32[i3 >> 2] | 0) | 0;
   HEAP32[i3 >> 2] = i4;
   if (!i4) HEAP32[i2 >> 2] = 0;
   break;
  }
 case 9:
  {
   i3 = i2 + 8 | 0;
   i4 = _FcRangeCopy(HEAP32[i3 >> 2] | 0) | 0;
   HEAP32[i3 >> 2] = i4;
   if (!i4) HEAP32[i2 >> 2] = 0;
   break;
  }
 default:
  {}
 }
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 return;
}

function _tt_cmap10_validate(i3, i6) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i1 = i3 + 20 | 0;
 i5 = i6 + 160 | 0;
 if (i1 >>> 0 > (HEAP32[i5 >> 2] | 0) >>> 0) _ft_validator_error(i6, 8);
 i4 = (HEAPU8[i3 + 5 >> 0] | 0) << 16 | (HEAPU8[i3 + 4 >> 0] | 0) << 24 | (HEAPU8[i3 + 6 >> 0] | 0) << 8 | (HEAPU8[i3 + 7 >> 0] | 0);
 i2 = (HEAPU8[i3 + 17 >> 0] | 0) << 16 | (HEAPU8[i3 + 16 >> 0] | 0) << 24 | (HEAPU8[i3 + 18 >> 0] | 0) << 8 | (HEAPU8[i3 + 19 >> 0] | 0);
 if (i4 >>> 0 < 20 ? 1 : i4 >>> 0 > ((HEAP32[i5 >> 2] | 0) - i3 | 0) >>> 0) _ft_validator_error(i6, 8);
 if ((i4 + -20 | 0) >>> 1 >>> 0 < i2 >>> 0) _ft_validator_error(i6, 8);
 if ((HEAP32[i6 + 164 >> 2] | 0) == 0 | (i2 | 0) == 0) return 0;
 i3 = i6 + 172 | 0;
 while (1) {
  if (((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) >>> 0 >= (HEAP32[i3 >> 2] | 0) >>> 0) {
   i1 = 9;
   break;
  }
  i2 = i2 + -1 | 0;
  if (!i2) {
   i1 = 11;
   break;
  } else i1 = i1 + 2 | 0;
 }
 if ((i1 | 0) == 9) _ft_validator_error(i6, 16); else if ((i1 | 0) == 11) return 0;
 return 0;
}

function _FT_Get_Glyph_Name(i5, i6, i7, i8) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!i5) {
  i8 = 35;
  return i8 | 0;
 }
 if ((i7 | 0) == 0 | (i8 | 0) == 0) {
  i8 = 6;
  return i8 | 0;
 }
 HEAP8[i7 >> 0] = 0;
 if ((HEAP32[i5 + 16 >> 2] | 0) <= (i6 | 0)) {
  i8 = 16;
  return i8 | 0;
 }
 if (!(HEAP32[i5 + 8 >> 2] & 512)) {
  i8 = 6;
  return i8 | 0;
 }
 i4 = i5 + 128 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i2 + 36 >> 2] | 0;
 switch (i1 | 0) {
 case 0:
  {
   i3 = 6;
   break;
  }
 case -2:
  {
   i8 = 6;
   return i8 | 0;
  }
 default:
  {}
 }
 if ((i3 | 0) == 6) {
  i1 = HEAP32[i5 + 96 >> 2] | 0;
  i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] | 0;
  if (!i3) i1 = 0; else {
   i1 = FUNCTION_TABLE_iii[i3 & 255](i1, 283076) | 0;
   i2 = HEAP32[i4 >> 2] | 0;
  }
  HEAP32[i2 + 36 >> 2] = i1 | 0 ? i1 : -2;
 }
 if (!i1) {
  i8 = 6;
  return i8 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i8 = 6;
  return i8 | 0;
 }
 i8 = FUNCTION_TABLE_iiiii[i1 & 127](i5, i6, i7, i8) | 0;
 return i8 | 0;
}

function _FcStrBufDoneStatic(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = i8 + 12 | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 i6 = i8 + 16 | 0;
 do if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
  i3 = i8 + 8 | 0;
  if (HEAP32[i3 >> 2] | 0) {
   i9 = 0;
   return i9 | 0;
  }
  i5 = i8 + 4 | 0;
  if (!(HEAP32[i5 >> 2] | 0)) {
   i4 = i2 + 64 | 0;
   i1 = _malloc(i4) | 0;
   if (i1 | 0) {
    HEAP32[i5 >> 2] = 1;
    _memcpy(i1 | 0, HEAP32[i8 >> 2] | 0, i2 | 0) | 0;
    i5 = i8;
    i7 = 10;
   }
  } else {
   i2 = i2 << 1;
   i1 = _realloc(HEAP32[i8 >> 2] | 0, i2) | 0;
   if (i1 | 0) {
    i4 = i2;
    i5 = i8;
    i2 = HEAP32[i9 >> 2] | 0;
    i7 = 10;
   }
  }
  if ((i7 | 0) == 10) {
   HEAP32[i6 >> 2] = i4;
   HEAP32[i5 >> 2] = i1;
   break;
  }
  HEAP32[i3 >> 2] = 1;
  i9 = 0;
  return i9 | 0;
 } else {
  i3 = i8 + 8 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
 } while (0);
 HEAP32[i9 >> 2] = i2 + 1;
 HEAP8[i1 + i2 >> 0] = 0;
 if (HEAP32[i3 >> 2] | 0) {
  i9 = 0;
  return i9 | 0;
 }
 i9 = HEAP32[i8 >> 2] | 0;
 return i9 | 0;
}

function ___mkostemps(i5, i1, i3) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 i2 = _strlen(i5) | 0;
 L1 : do if (i2 >>> 0 < 6 | (i2 + -6 | 0) >>> 0 < i1 >>> 0) i7 = 3; else {
  i4 = i5 + i2 + (0 - i1) + -6 | 0;
  if (!(_memcmp(i4, 367628, 6) | 0)) {
   i3 = i3 & -2097348 | 194;
   i2 = 100;
   do {
    ___randname(i4) | 0;
    HEAP32[i6 >> 2] = 384;
    i1 = _open(i5, i3, i6) | 0;
    if ((i1 | 0) > -1) break L1;
    i2 = i2 + -1 | 0;
    if (!i2) break;
    i1 = ___errno_location() | 0;
   } while ((HEAP32[i1 >> 2] | 0) == 17);
   HEAP8[i4 >> 0] = HEAP8[367628] | 0;
   HEAP8[i4 + 1 >> 0] = HEAP8[367629] | 0;
   HEAP8[i4 + 2 >> 0] = HEAP8[367630] | 0;
   HEAP8[i4 + 3 >> 0] = HEAP8[367631] | 0;
   HEAP8[i4 + 4 >> 0] = HEAP8[367632] | 0;
   HEAP8[i4 + 5 >> 0] = HEAP8[367633] | 0;
   i1 = -1;
  } else i7 = 3;
 } while (0);
 if ((i7 | 0) == 3) {
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 22;
  i1 = -1;
 }
 STACKTOP = i8;
 return i1 | 0;
}

function _tt_cmap14_variants(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i9;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 i8 = HEAP32[i2 + 16 >> 2] | 0;
 i6 = i1 + 1 | 0;
 i7 = i2 + 28 | 0;
 i4 = HEAP32[i7 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 do if (i4 >>> 0 < i6 >>> 0) {
  HEAP32[i2 + 36 >> 2] = i3;
  i10 = i2 + 32 | 0;
  i2 = _ft_mem_realloc(i3, 4, i4, i6, HEAP32[i10 >> 2] | 0, i5) | 0;
  HEAP32[i10 >> 2] = i2;
  if (!(HEAP32[i5 >> 2] | 0)) {
   HEAP32[i7 >> 2] = i6;
   i4 = i2;
   break;
  }
  i10 = 0;
  STACKTOP = i9;
  return i10 | 0;
 } else i4 = HEAP32[i2 + 32 >> 2] | 0; while (0);
 if (!i1) i1 = 0; else {
  i2 = i8 + 10 | 0;
  i3 = 0;
  while (1) {
   HEAP32[i4 + (i3 << 2) >> 2] = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) << 16 | (HEAPU8[i2 + 2 >> 0] | 0);
   i3 = i3 + 1 | 0;
   if ((i3 | 0) == (i1 | 0)) break; else i2 = i2 + 11 | 0;
  }
 }
 HEAP32[i4 + (i1 << 2) >> 2] = 0;
 i10 = i4;
 STACKTOP = i9;
 return i10 | 0;
}

function _t1_builder_close_contour(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i6) return;
 i8 = HEAP16[i6 >> 1] | 0;
 if (i8 << 16 >> 16 < 2) i7 = 0; else i7 = (HEAP16[(HEAP32[i6 + 12 >> 2] | 0) + ((i8 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
 i5 = i6 + 2 | 0;
 i1 = HEAP16[i5 >> 1] | 0;
 i2 = i1 << 16 >> 16;
 if (i1 << 16 >> 16 > 1) {
  i3 = HEAP32[i6 + 4 >> 2] | 0;
  i4 = i3 + (i2 << 3) + -8 | 0;
  i2 = (HEAP32[i6 + 8 >> 2] | 0) + i2 + -1 | 0;
  if ((HEAP32[i3 + (i7 << 3) >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) if ((HEAP32[i3 + (i7 << 3) + 4 >> 2] | 0) == (HEAP32[i4 + 4 >> 2] | 0)) if ((HEAP8[i2 >> 0] | 0) == 1) {
   i1 = i1 + -1 << 16 >> 16;
   HEAP16[i5 >> 1] = i1;
  }
 }
 if (i8 << 16 >> 16 <= 0) return;
 i2 = (i1 << 16 >> 16) + -1 | 0;
 if ((i7 | 0) == (i2 | 0)) {
  HEAP16[i6 >> 1] = i8 + -1 << 16 >> 16;
  HEAP16[i5 >> 1] = i1 + -1 << 16 >> 16;
  return;
 } else {
  HEAP16[(HEAP32[i6 + 12 >> 2] | 0) + ((i8 << 16 >> 16) + -1 << 1) >> 1] = i2;
  return;
 }
}

function _FcStrSetDel(i1, i9) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = i1 + 4 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 if ((i11 | 0) <= 0) {
  i12 = 0;
  return i12 | 0;
 }
 i7 = i1 + 12 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i1 = 0;
 while (1) {
  i6 = HEAP32[i8 + (i1 << 2) >> 2] | 0;
  if ((i6 | 0) == (i9 | 0)) break; else {
   i3 = i9;
   i4 = i6;
  }
  while (1) {
   i2 = HEAP8[i4 >> 0] | 0;
   i5 = HEAP8[i3 >> 0] | 0;
   if (!(i2 << 24 >> 24)) {
    i2 = 0;
    break;
   }
   if (i2 << 24 >> 24 == i5 << 24 >> 24) {
    i3 = i3 + 1 | 0;
    i4 = i4 + 1 | 0;
   } else break;
  }
  if (i2 << 24 >> 24 == i5 << 24 >> 24) break;
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i11 | 0)) {
   i1 = 0;
   i12 = 9;
   break;
  }
 }
 if ((i12 | 0) == 9) return i1 | 0;
 _free(i6);
 i12 = HEAP32[i7 >> 2] | 0;
 _memmove(i12 + (i1 << 2) | 0, i12 + (i1 + 1 << 2) | 0, (HEAP32[i10 >> 2] | 0) - i1 << 2 | 0) | 0;
 HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
 i12 = 1;
 return i12 | 0;
}

function _T1_Get_Track_Kerning(i1, i9, i10, i11) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = HEAP32[i1 + 492 >> 2] | 0;
 if (!i1) {
  i11 = 6;
  return i11 | 0;
 }
 i8 = i1 + 32 | 0;
 i2 = HEAP32[i8 >> 2] | 0;
 if (!i2) {
  i11 = 0;
  return i11 | 0;
 }
 i7 = i1 + 28 | 0;
 i6 = 0;
 i1 = i2;
 do {
  i5 = HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i5 + (i6 * 20 | 0) >> 2] | 0) == (i10 | 0)) {
   i3 = HEAP32[i5 + (i6 * 20 | 0) + 4 >> 2] | 0;
   if ((i3 | 0) > (i9 | 0)) i2 = HEAP32[i5 + (i6 * 20 | 0) + 8 >> 2] | 0; else {
    i4 = HEAP32[i5 + (i6 * 20 | 0) + 12 >> 2] | 0;
    i2 = HEAP32[i5 + (i6 * 20 | 0) + 16 >> 2] | 0;
    if ((i4 | 0) >= (i9 | 0)) {
     i5 = i5 + (i6 * 20 | 0) + 8 | 0;
     i2 = _FT_MulDiv(i9 - i3 | 0, i2 - (HEAP32[i5 >> 2] | 0) | 0, i4 - i3 | 0) | 0;
     i1 = HEAP32[i8 >> 2] | 0;
     i2 = (HEAP32[i5 >> 2] | 0) + i2 | 0;
    }
   }
   HEAP32[i11 >> 2] = i2;
  }
  i6 = i6 + 1 | 0;
 } while (i6 >>> 0 < i1 >>> 0);
 i1 = 0;
 return i1 | 0;
}

function _ass_font_get_asc_desc(i3, i4, i9, i10) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = i3 + 108 | 0;
 L1 : do if ((HEAP32[i5 >> 2] | 0) > 0) {
  i6 = i4 | 61440;
  i2 = 0;
  while (1) {
   i7 = HEAP32[i3 + 64 + (i2 << 2) >> 2] | 0;
   i8 = _FT_Get_Sfnt_Table(i7, 2) | 0;
   i1 = HEAP32[i7 + 92 >> 2] | 0;
   if (!i1) i1 = i4; else i1 = (HEAP32[i1 + 4 >> 2] | 0) == 1937337698 ? i6 : i4;
   i2 = i2 + 1 | 0;
   if (_FT_Get_Char_Index(i7, i1) | 0) break;
   if ((i2 | 0) >= (HEAP32[i5 >> 2] | 0)) break L1;
  }
  i2 = HEAP32[(HEAP32[i7 + 88 >> 2] | 0) + 20 >> 2] | 0;
  if (!i8) {
   i1 = _FT_MulFix(HEAP16[i7 + 70 >> 1] | 0, i2) | 0;
   HEAP32[i9 >> 2] = i1;
   i1 = 0 - (HEAP16[i7 + 72 >> 1] | 0) | 0;
  } else {
   i1 = _FT_MulFix(HEAP16[i8 + 76 >> 1] | 0, i2) | 0;
   HEAP32[i9 >> 2] = i1;
   i1 = HEAP16[i8 + 78 >> 1] | 0;
  }
  i9 = _FT_MulFix(i1, i2) | 0;
  HEAP32[i10 >> 2] = i9;
  return;
 } while (0);
 HEAP32[i10 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 return;
}

function _vsnprintf(i2, i1, i8, i9) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i3 = i11 + 124 | 0;
 i10 = i11;
 i4 = i10;
 i5 = 91560;
 i6 = i4 + 124 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  i4 = i4 + 4 | 0;
  i5 = i5 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 if ((i1 + -1 | 0) >>> 0 > 2147483646) if (!i1) {
  i2 = i3;
  i1 = 1;
  i7 = 4;
 } else {
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 75;
  i1 = -1;
 } else i7 = 4;
 if ((i7 | 0) == 4) {
  i7 = -2 - i2 | 0;
  i7 = i1 >>> 0 > i7 >>> 0 ? i7 : i1;
  HEAP32[i10 + 48 >> 2] = i7;
  i3 = i10 + 20 | 0;
  HEAP32[i3 >> 2] = i2;
  HEAP32[i10 + 44 >> 2] = i2;
  i1 = i2 + i7 | 0;
  i2 = i10 + 16 | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i10 + 28 >> 2] = i1;
  i1 = _vfprintf(i10, i8, i9) | 0;
  if (i7) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP8[i10 + (((i10 | 0) == (HEAP32[i2 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
  }
 }
 STACKTOP = i11;
 return i1 | 0;
}

function ___shgetc(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i2 = i7 + 104 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) i8 = 3; else if ((HEAP32[i7 + 108 >> 2] | 0) < (i1 | 0)) i8 = 3; else i8 = 4;
 if ((i8 | 0) == 3) {
  i1 = ___uflow(i7) | 0;
  if ((i1 | 0) < 0) i8 = 4; else {
   i3 = HEAP32[i2 >> 2] | 0;
   i2 = i7 + 8 | 0;
   if (!i3) {
    i3 = HEAP32[i2 >> 2] | 0;
    i4 = i7 + 108 | 0;
    i5 = i3;
    i2 = HEAP32[i7 + 4 >> 2] | 0;
   } else {
    i5 = HEAP32[i2 >> 2] | 0;
    i2 = HEAP32[i7 + 4 >> 2] | 0;
    i4 = i7 + 108 | 0;
    i3 = i3 - (HEAP32[i4 >> 2] | 0) | 0;
    i6 = i5;
    if ((i5 - i2 | 0) < (i3 | 0)) {
     i5 = i6;
     i3 = i6;
    } else {
     i5 = i2 + (i3 + -1) | 0;
     i3 = i6;
    }
   }
   HEAP32[i7 + 100 >> 2] = i5;
   if (i3 | 0) HEAP32[i4 >> 2] = i3 + 1 - i2 + (HEAP32[i4 >> 2] | 0);
   i2 = i2 + -1 | 0;
   if ((HEAPU8[i2 >> 0] | 0 | 0) != (i1 | 0)) HEAP8[i2 >> 0] = i1;
  }
 }
 if ((i8 | 0) == 4) {
  HEAP32[i7 + 100 >> 2] = 0;
  i1 = -1;
 }
 return i1 | 0;
}

function _t1_cmap_std_char_next(i1, i11) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = (HEAP32[i11 >> 2] | 0) + 1 | 0;
 if (i3 >>> 0 >= 256) {
  i9 = 0;
  i10 = 0;
  HEAP32[i11 >> 2] = i9;
  return i10 | 0;
 }
 i8 = i1 + 16 | 0;
 i9 = i1 + 20 | 0;
 i10 = i1 + 24 | 0;
 i7 = i1 + 28 | 0;
 L4 : while (1) {
  i4 = FUNCTION_TABLE_ii[HEAP32[i9 >> 2] & 63](HEAPU16[(HEAP32[i8 >> 2] | 0) + (i3 << 1) >> 1] | 0) | 0;
  i5 = HEAP32[i10 >> 2] | 0;
  L6 : do if (i5 | 0) {
   i6 = HEAP32[i7 >> 2] | 0;
   i1 = 0;
   while (1) {
    i2 = HEAP32[i6 + (i1 << 2) >> 2] | 0;
    if (i2 | 0) if ((HEAP8[i2 >> 0] | 0) == (HEAP8[i4 >> 0] | 0)) if (!(_strcmp(i2, i4) | 0)) break;
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i5 >>> 0) break L6;
   }
   if (i1 | 0) {
    i2 = 11;
    break L4;
   }
  } while (0);
  i3 = i3 + 1 | 0;
  if (i3 >>> 0 >= 256) {
   i3 = 0;
   i1 = 0;
   i2 = 11;
   break;
  }
 }
 if ((i2 | 0) == 11) {
  HEAP32[i11 >> 2] = i3;
  return i1 | 0;
 }
 return 0;
}

function _outline_adjust(i3, d1, i7, i8) {
 i3 = i3 | 0;
 d1 = +d1;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0;
 i5 = _lrint(d1 * 65536.0) | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = (i6 | 0) == 0;
 if ((i5 | 0) == 65536) {
  if (i2) return;
  i3 = HEAP32[i3 + 16 >> 2] | 0;
  i2 = 0;
  do {
   i5 = i3 + (i2 << 3) | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i7;
   i5 = i3 + (i2 << 3) + 4 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i8;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i6 | 0));
  return;
 } else {
  if (i2) return;
  i3 = HEAP32[i3 + 16 >> 2] | 0;
  i4 = ((i5 | 0) < 0) << 31 >> 31;
  i2 = 0;
  do {
   i9 = i3 + (i2 << 3) | 0;
   i10 = HEAP32[i9 >> 2] | 0;
   i10 = ___muldi3(i10 | 0, ((i10 | 0) < 0) << 31 >> 31 | 0, i5 | 0, i4 | 0) | 0;
   i10 = _bitshift64Lshr(i10 | 0, tempRet0 | 0, 16) | 0;
   HEAP32[i9 >> 2] = i10 + i7;
   i9 = i3 + (i2 << 3) + 4 | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i8;
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < i6 >>> 0);
  return;
 }
}

function _FT_DivFix(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = i1 >> 31;
 i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 i6 = (i2 | 0) < 0;
 i7 = i6 ? 0 - (i7 | 1) | 0 : i7;
 i6 = i6 ? 0 - i2 | 0 : i2;
 do if (!i6) i1 = 2147483647; else {
  if (i1 >>> 0 <= (i6 >>> 17 ^ 65535) >>> 0) {
   i1 = (((i6 >>> 1) + (i1 << 16) | 0) >>> 0) / (i6 >>> 0) | 0;
   break;
  }
  i5 = i1 << 16;
  i3 = (i6 >>> 1) + i5 | 0;
  i1 = (i3 >>> 0 < i5 >>> 0 & 1) + (i1 >>> 16) | 0;
  if (i1 >>> 0 < i6 >>> 0) {
   i4 = Math_clz32(i1 | 0) | 0;
   i5 = 32 - i4 | 0;
   i8 = i3 >>> i5 | i1 << i4;
   i2 = (i8 >>> 0) / (i6 >>> 0) | 0;
   i1 = i2;
   i2 = i8 - (Math_imul(i2, i6) | 0) | 0;
   i4 = i3 << i4;
   while (1) {
    i2 = i2 << 1 | i4 >>> 31;
    i3 = i2 >>> 0 < i6 >>> 0;
    i1 = (i3 ^ 1) & 1 | i1 << 1;
    i5 = i5 + -1 | 0;
    if (!i5) break; else {
     i2 = i2 - (i3 ? 0 : i6) | 0;
     i4 = i4 << 1;
    }
   }
  } else i1 = 2147483647;
 } while (0);
 return ((i7 | 0) < 0 ? 0 - i1 | 0 : i1) | 0;
}

function _FcGetDefaultLangs() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[91918] | 0;
 if (i1 | 0) {
  i3 = i1;
  return i3 | 0;
 }
 while (1) {
  i1 = _FcStrSetCreate() | 0;
  i2 = _getenv(349413) | 0;
  if (!i2) i3 = 4; else if (!(HEAP8[i2 >> 0] | 0)) i3 = 4; else i3 = 10;
  do if ((i3 | 0) == 4) {
   i3 = 0;
   i2 = _getenv(349421) | 0;
   if (i2 | 0) if (HEAP8[i2 >> 0] | 0) {
    i3 = 10;
    break;
   }
   i2 = _getenv(349428) | 0;
   if (i2 | 0) if (HEAP8[i2 >> 0] | 0) {
    i3 = 10;
    break;
   }
   i2 = _getenv(349437) | 0;
   if (i2 | 0) if (HEAP8[i2 >> 0] | 0) {
    i3 = 10;
    break;
   }
   _FcStrSetAdd(i1, 349964) | 0;
  } while (0);
  if ((i3 | 0) == 10) if (!(_FcStrSetAddLangs(i1, i2) | 0)) _FcStrSetAdd(i1, 349964) | 0;
  HEAP32[i1 >> 2] = -1;
  i2 = HEAP32[91918] | 0;
  if (!i2) HEAP32[91918] = i1;
  if (!i2) {
   i3 = 15;
   break;
  }
  HEAP32[i1 >> 2] = 1;
  _FcStrSetDestroy(i1);
  i1 = HEAP32[91918] | 0;
  if (i1 | 0) {
   i3 = 15;
   break;
  }
 }
 if ((i3 | 0) == 15) return i1 | 0;
 return 0;
}

function _normal_predefinedEntityName(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 L1 : do switch (i3 - i2 | 0) {
 case 2:
  {
   if ((HEAP8[i2 + 1 >> 0] | 0) == 116) {
    i3 = HEAP8[i2 >> 0] | 0;
    i3 = i3 << 24 >> 24 == 108 ? 60 : i3 << 24 >> 24 == 103 ? 62 : 0;
    return i3 | 0;
   }
   break;
  }
 case 3:
  {
   if ((HEAP8[i2 >> 0] | 0) == 97) if ((HEAP8[i2 + 1 >> 0] | 0) == 109) if ((HEAP8[i2 + 2 >> 0] | 0) == 112) {
    i3 = 38;
    return i3 | 0;
   }
   break;
  }
 case 4:
  switch (HEAP8[i2 >> 0] | 0) {
  case 113:
   {
    if ((HEAP8[i2 + 1 >> 0] | 0) != 117) break L1;
    if ((HEAP8[i2 + 2 >> 0] | 0) != 111) break L1;
    if ((HEAP8[i2 + 3 >> 0] | 0) == 116) i1 = 34; else break L1;
    return i1 | 0;
   }
  case 97:
   {
    if ((HEAP8[i2 + 1 >> 0] | 0) != 112) break L1;
    if ((HEAP8[i2 + 2 >> 0] | 0) != 111) break L1;
    if ((HEAP8[i2 + 3 >> 0] | 0) == 115) i1 = 39; else break L1;
    return i1 | 0;
   }
  default:
   break L1;
  }
 default:
  {}
 } while (0);
 i3 = 0;
 return i3 | 0;
}

function _FcBlanksIsMember(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  i6 = 0;
  return i6 | 0;
 }
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 if ((HEAP32[i5 >> 2] | 0) >>> 0 > i6 >>> 0) {
  i6 = 0;
  return i6 | 0;
 }
 if ((HEAP32[i5 + (i2 + -1 << 2) >> 2] | 0) >>> 0 < i6 >>> 0) {
  i6 = 0;
  return i6 | 0;
 }
 i1 = (i2 | 0) / 2 | 0;
 i3 = HEAP32[i5 + (i1 << 2) >> 2] | 0;
 if ((i3 | 0) == (i6 | 0)) {
  i6 = 1;
  return i6 | 0;
 } else i4 = 0;
 L12 : while (1) {
  while (1) {
   if ((i4 | 0) >= (i2 | 0)) {
    i1 = 0;
    i2 = 10;
    break L12;
   }
   if (i3 >>> 0 < i6 >>> 0) break;
   i2 = i1 + -1 | 0;
   i1 = (i2 + i4 | 0) / 2 | 0;
   i3 = HEAP32[i5 + (i1 << 2) >> 2] | 0;
   if ((i3 | 0) == (i6 | 0)) {
    i1 = 1;
    i2 = 10;
    break L12;
   }
  }
  i4 = i1 + 1 | 0;
  i1 = (i2 + i4 | 0) / 2 | 0;
  i3 = HEAP32[i5 + (i1 << 2) >> 2] | 0;
  if ((i3 | 0) == (i6 | 0)) {
   i1 = 1;
   i2 = 10;
   break;
  }
 }
 if ((i2 | 0) == 10) return i1 | 0;
 return 0;
}

function _normal_isPublicId(i3, i2, i1, i5) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i4 = 0, i6 = 0;
 i4 = i1 + -1 | 0;
 i1 = i2 + 1 | 0;
 if ((i1 | 0) == (i4 | 0)) {
  i6 = 1;
  return i6 | 0;
 }
 i3 = i3 + 76 | 0;
 L4 : while (1) {
  i2 = HEAP8[i1 >> 0] | 0;
  switch (HEAP8[i3 + (i2 & 255) >> 0] | 0) {
  case 23:
  case 19:
  case 30:
  case 33:
  case 16:
  case 18:
  case 10:
  case 9:
  case 15:
  case 14:
  case 17:
  case 35:
  case 34:
  case 32:
  case 31:
  case 13:
  case 27:
  case 24:
  case 25:
   break;
  case 21:
   {
    if (i2 << 24 >> 24 == 9) break L4;
    break;
   }
  case 22:
  case 26:
   {
    if (i2 << 24 >> 24 < 0) i6 = 7;
    break;
   }
  default:
   i6 = 7;
  }
  if ((i6 | 0) == 7) {
   i6 = 0;
   switch (i2 << 24 >> 24 | 0) {
   case 64:
   case 36:
    break;
   default:
    break L4;
   }
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) == (i4 | 0)) {
   i1 = 1;
   i6 = 9;
   break;
  }
 }
 if ((i6 | 0) == 9) return i1 | 0;
 HEAP32[i5 >> 2] = i1;
 i6 = 0;
 return i6 | 0;
}

function _memset(i5, i6, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i3 = i5 + i4 | 0;
 i6 = i6 & 255;
 if ((i4 | 0) >= 67) {
  while (i5 & 3) {
   HEAP8[i5 >> 0] = i6;
   i5 = i5 + 1 | 0;
  }
  i1 = i3 & -4 | 0;
  i2 = i1 - 64 | 0;
  i7 = i6 | i6 << 8 | i6 << 16 | i6 << 24;
  while ((i5 | 0) <= (i2 | 0)) {
   HEAP32[i5 >> 2] = i7;
   HEAP32[i5 + 4 >> 2] = i7;
   HEAP32[i5 + 8 >> 2] = i7;
   HEAP32[i5 + 12 >> 2] = i7;
   HEAP32[i5 + 16 >> 2] = i7;
   HEAP32[i5 + 20 >> 2] = i7;
   HEAP32[i5 + 24 >> 2] = i7;
   HEAP32[i5 + 28 >> 2] = i7;
   HEAP32[i5 + 32 >> 2] = i7;
   HEAP32[i5 + 36 >> 2] = i7;
   HEAP32[i5 + 40 >> 2] = i7;
   HEAP32[i5 + 44 >> 2] = i7;
   HEAP32[i5 + 48 >> 2] = i7;
   HEAP32[i5 + 52 >> 2] = i7;
   HEAP32[i5 + 56 >> 2] = i7;
   HEAP32[i5 + 60 >> 2] = i7;
   i5 = i5 + 64 | 0;
  }
  while ((i5 | 0) < (i1 | 0)) {
   HEAP32[i5 >> 2] = i7;
   i5 = i5 + 4 | 0;
  }
 }
 while ((i5 | 0) < (i3 | 0)) {
  HEAP8[i5 >> 0] = i6;
  i5 = i5 + 1 | 0;
 }
 return i3 - i4 | 0;
}

function _FcStrCanonAbsoluteFilename(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i1 = _malloc((_strlen(i3) | 0) + 1 | 0) | 0;
 if (!i1) {
  i5 = 0;
  return i5 | 0;
 } else {
  i5 = 0;
  i2 = i1;
 }
 while (1) {
  L5 : while (1) {
   i4 = HEAP8[i3 >> 0] | 0;
   switch (i4 << 24 >> 24) {
   case 0:
   case 47:
    break L5;
   default:
    {}
   }
   HEAP8[i2 >> 0] = i4;
   i2 = i2 + 1 | 0;
   i3 = i3 + 1 | 0;
  }
  L9 : do if (i5) switch (i3 - i5 | 0) {
  case 1:
   {
    i2 = i2 + -1 | 0;
    break L9;
   }
  case 2:
   {
    i5 = (_strncmp(i5, 347401, 2) | 0) == 0;
    i2 = i5 ? i2 + -2 | 0 : i2;
    break L9;
   }
  case 3:
   {
    if (_strncmp(i5, 347404, 3) | 0) break L9;
    i2 = i2 + -3 | 0;
    do {
     if (i2 >>> 0 <= i1 >>> 0) break L9;
     i2 = i2 + -1 | 0;
    } while ((HEAP8[i2 >> 0] | 0) != 47);
    break;
   }
  default:
   break L9;
  } while (0);
  HEAP8[i2 >> 0] = i4;
  if (!(i4 << 24 >> 24)) break; else {
   i5 = i3;
   i2 = i2 + 1 | 0;
   i3 = i3 + 1 | 0;
  }
 }
 return i1 | 0;
}

function _parse_vector_clip(i8, i6, i1) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, d11 = 0.0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i10;
 i3 = i10 + 8 | 0;
 i9 = i8 + 472 | 0;
 i7 = HEAP32[i9 >> 2] | 0;
 i5 = i1 + -1 | 0;
 if (i5 >>> 0 > 1) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 if ((i1 | 0) == 2) {
  i4 = HEAP32[i6 + 4 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i2 + 4 >> 2] = i4;
  _mystrtoi(i2, i3) | 0;
  i3 = HEAP32[i3 >> 2] | 0;
 } else i3 = 1;
 i4 = HEAP32[i6 + (i5 << 3) >> 2] | 0;
 i2 = HEAP32[i6 + (i5 << 3) + 4 >> 2] | 0;
 _ass_drawing_free(i7);
 i1 = _ass_drawing_new(HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i1;
 if (!i1) {
  i9 = 1;
  STACKTOP = i10;
  return i9 | 0;
 }
 HEAP32[i1 + 4 >> 2] = i3;
 d11 = +HEAPF64[i8 + 176 >> 3];
 HEAPF64[i1 + 16 >> 3] = +HEAPF64[i8 + 184 >> 3] * d11;
 HEAPF64[i1 + 24 >> 3] = d11;
 _ass_drawing_set_text(i1, i4, i2 - i4 | 0);
 i9 = 1;
 STACKTOP = i10;
 return i9 | 0;
}

function _FcParseUnary(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = _FcPopExpr(i5) | 0;
 if (!i2) {
  STACKTOP = i7;
  return;
 }
 i6 = _FcConfigAllocExpr(HEAP32[i5 + 16 >> 2] | 0) | 0;
 if (!i6) {
  _FcExprDestroy(i2);
  _FcConfigMessage(i5, 2, 352676, i7);
  STACKTOP = i7;
  return;
 }
 HEAP32[i6 >> 2] = i1;
 i1 = i6 + 8 | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i1 + 4 >> 2] = 0;
 i1 = i5 + 1308 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 >>> 0 < 64) {
  HEAP32[i1 >> 2] = i2 + 1;
  i1 = i5 + 1312 + (i2 * 24 | 0) | 0;
 } else {
  i1 = _malloc(24) | 0;
  if (!i1) {
   STACKTOP = i7;
   return;
  }
 }
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = 0;
 i4 = i5 + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 i2 = HEAP32[i5 >> 2] | 0;
 if (!i2) i2 = 0; else i2 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = i2;
 HEAP32[i4 >> 2] = i1;
 if (!i1) {
  STACKTOP = i7;
  return;
 }
 HEAP32[i1 + 16 >> 2] = i6;
 HEAP32[i3 >> 2] = 18;
 STACKTOP = i7;
 return;
}

function ___stdio_read(i5, i6, i7) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i9;
 i4 = i9 + 16 | 0;
 HEAP32[i4 >> 2] = i6;
 i2 = i4 + 4 | 0;
 i8 = i5 + 48 | 0;
 i10 = HEAP32[i8 >> 2] | 0;
 HEAP32[i2 >> 2] = i7 - ((i10 | 0) != 0 & 1);
 i3 = i5 + 44 | 0;
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 12 >> 2] = i10;
 HEAP32[i1 >> 2] = HEAP32[i5 + 60 >> 2];
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = 2;
 i1 = ___syscall_ret(___syscall145(145, i1 | 0) | 0) | 0;
 if ((i1 | 0) < 1) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | i1 & 48 ^ 16; else {
  i4 = HEAP32[i2 >> 2] | 0;
  if (i1 >>> 0 > i4 >>> 0) {
   i2 = HEAP32[i3 >> 2] | 0;
   i3 = i5 + 4 | 0;
   HEAP32[i3 >> 2] = i2;
   HEAP32[i5 + 8 >> 2] = i2 + (i1 - i4);
   if (!(HEAP32[i8 >> 2] | 0)) i1 = i7; else {
    HEAP32[i3 >> 2] = i2 + 1;
    HEAP8[i6 + (i7 + -1) >> 0] = HEAP8[i2 >> 0] | 0;
    i1 = i7;
   }
  }
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _FcValueCanonicalize(i5, i2) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i1 = HEAP32[i2 >> 2] | 0;
 switch (i1 | 0) {
 case 3:
  {
   i7 = HEAP32[i2 + 8 >> 2] | 0;
   i6 = i7;
   i1 = 3;
   i3 = 0;
   i4 = 0;
   i2 = (i6 & 1 | 0) == 0 ? i7 : (i6 & -2) + i2 | 0;
   break;
  }
 case 6:
  {
   i6 = HEAP32[i2 + 8 >> 2] | 0;
   i7 = i6;
   i1 = 6;
   i3 = 0;
   i4 = 0;
   i2 = (i7 & 1 | 0) == 0 ? i6 : (i7 & -2) + i2 | 0;
   break;
  }
 case 8:
  {
   i6 = HEAP32[i2 + 8 >> 2] | 0;
   i7 = i6;
   i1 = 8;
   i3 = 0;
   i4 = 0;
   i2 = (i7 & 1 | 0) == 0 ? i6 : (i7 & -2) + i2 | 0;
   break;
  }
 case 9:
  {
   i6 = HEAP32[i2 + 8 >> 2] | 0;
   i7 = i6;
   i1 = 9;
   i3 = 0;
   i4 = 0;
   i2 = (i7 & 1 | 0) == 0 ? i6 : (i7 & -2) + i2 | 0;
   break;
  }
 default:
  {
   i3 = HEAP32[i2 + 12 >> 2] | 0;
   i4 = HEAP32[i2 + 4 >> 2] | 0;
   i2 = HEAP32[i2 + 8 >> 2] | 0;
  }
 }
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP32[i5 + 8 >> 2] = i2;
 HEAP32[i5 + 12 >> 2] = i3;
 return;
}

function _FT_Outline_Get_CBox(i1, i9) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!((i1 | 0) != 0 & (i9 | 0) != 0)) return;
 i2 = HEAP16[i1 + 2 >> 1] | 0;
 if (!(i2 << 16 >> 16)) {
  i3 = 0;
  i4 = 0;
  i2 = 0;
  i1 = 0;
 } else {
  i5 = HEAP32[i1 + 4 >> 2] | 0;
  i8 = i5 + (i2 << 16 >> 16 << 3) | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i1 = HEAP32[i5 + 4 >> 2] | 0;
  if (i2 << 16 >> 16 > 1) {
   i4 = i1;
   i2 = i6;
   i7 = i5 + 8 | 0;
   i3 = i6;
   while (1) {
    i6 = HEAP32[i7 >> 2] | 0;
    i3 = (i6 | 0) < (i3 | 0) ? i6 : i3;
    i2 = (i6 | 0) > (i2 | 0) ? i6 : i2;
    i5 = HEAP32[i5 + 12 >> 2] | 0;
    i4 = (i5 | 0) < (i4 | 0) ? i5 : i4;
    i1 = (i5 | 0) > (i1 | 0) ? i5 : i1;
    i5 = i7 + 8 | 0;
    if (i5 >>> 0 < i8 >>> 0) {
     i6 = i7;
     i7 = i5;
     i5 = i6;
    } else break;
   }
  } else {
   i3 = i6;
   i4 = i1;
   i2 = i6;
  }
 }
 HEAP32[i9 >> 2] = i3;
 HEAP32[i9 + 8 >> 2] = i2;
 HEAP32[i9 + 4 >> 2] = i4;
 HEAP32[i9 + 12 >> 2] = i1;
 return;
}

function _PCF_Size_Request(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = ((Math_imul(i2, i6) | 0) + 36 | 0) / 72 | 0;
 i3 = ((i6 | 0) == 0 ? i2 : i3) + 32 >> 6;
 L1 : do switch (HEAP32[i1 >> 2] | 0) {
 case 0:
  if ((i3 | 0) == ((HEAP32[(HEAP32[i5 + 32 >> 2] | 0) + 12 >> 2] | 0) + 32 >> 6 | 0)) {
   i1 = i5 + 196 | 0;
   i2 = i1 + 8 | 0;
   i1 = i1 + 12 | 0;
   break L1;
  } else {
   i6 = 23;
   return i6 | 0;
  }
 case 1:
  {
   i1 = i5 + 196 | 0;
   i2 = i1 + 8 | 0;
   i1 = i1 + 12 | 0;
   if ((i3 | 0) != ((HEAP32[i1 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) | 0)) {
    i6 = 23;
    return i6 | 0;
   }
   break;
  }
 default:
  {
   i6 = 7;
   return i6 | 0;
  }
 } while (0);
 _FT_Select_Metrics(i5, 0);
 HEAP32[i4 + 24 >> 2] = HEAP32[i2 >> 2] << 6;
 HEAP32[i4 + 28 >> 2] = 0 - (HEAP32[i1 >> 2] | 0) << 6;
 HEAP32[i4 + 36 >> 2] = HEAP16[i5 + 196 + 40 >> 1] << 6;
 i6 = 0;
 return i6 | 0;
}

function _FcDirCacheScan(i4, i7) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i8 + 8 | 0;
 i2 = i8;
 i5 = i8 + 12 | 0;
 i1 = _FcConfigGetSysRoot(i7) | 0;
 if (!i1) i6 = ___strdup(i4) | 0; else {
  HEAP32[i2 >> 2] = i4;
  HEAP32[i2 + 4 >> 2] = 0;
  i6 = _FcStrBuildFilename(i1, i2) | 0;
 }
 if (HEAP32[91917] & 8 | 0) {
  HEAP32[i3 >> 2] = i6;
  _printf(347948, i3) | 0;
 }
 if ((_FcStatChecksum(i6, i5) | 0) < 0) {
  i7 = 0;
  _FcStrFree(i6);
  STACKTOP = i8;
  return i7 | 0;
 }
 i3 = _FcFontSetCreate() | 0;
 if (!i3) {
  i7 = 0;
  _FcStrFree(i6);
  STACKTOP = i8;
  return i7 | 0;
 }
 i2 = _FcStrSetCreate() | 0;
 if (!i2) i1 = 0; else {
  if (!(_FcDirScanConfig(i3, i2, 0, i6, 1, i7, 0) | 0)) i1 = 0; else {
   i1 = _FcDirCacheBuild(i3, i4, i5, i2) | 0;
   if (!i1) i1 = 0; else _FcDirCacheWrite(i1, i7) | 0;
  }
  _FcStrSetDestroy(i2);
 }
 _FcFontSetDestroy(i3);
 i7 = i1;
 _FcStrFree(i6);
 STACKTOP = i8;
 return i7 | 0;
}

function _BDF_Size_Request(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = HEAP32[i5 + 140 >> 2] | 0;
 i7 = HEAP32[i1 + 16 >> 2] | 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = ((Math_imul(i2, i7) | 0) + 36 | 0) / 72 | 0;
 i3 = ((i7 | 0) == 0 ? i2 : i3) + 32 >> 6;
 L1 : do switch (HEAP32[i1 >> 2] | 0) {
 case 0:
  if ((i3 | 0) == ((HEAP32[(HEAP32[i5 + 32 >> 2] | 0) + 12 >> 2] | 0) + 32 >> 6 | 0)) {
   i2 = i6 + 44 | 0;
   i1 = i6 + 40 | 0;
   break L1;
  } else {
   i7 = 23;
   return i7 | 0;
  }
 case 1:
  {
   i1 = i6 + 40 | 0;
   i2 = i6 + 44 | 0;
   if ((i3 | 0) != ((HEAP32[i2 >> 2] | 0) + (HEAP32[i1 >> 2] | 0) | 0)) {
    i7 = 23;
    return i7 | 0;
   }
   break;
  }
 default:
  {
   i7 = 7;
   return i7 | 0;
  }
 } while (0);
 _FT_Select_Metrics(i5, 0);
 HEAP32[i4 + 24 >> 2] = HEAP32[i1 >> 2] << 6;
 HEAP32[i4 + 28 >> 2] = 0 - (HEAP32[i2 >> 2] | 0) << 6;
 HEAP32[i4 + 36 >> 2] = (HEAPU16[i6 + 4 >> 1] | 0) << 6;
 i7 = 0;
 return i7 | 0;
}

function _little2_nameLength(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i3 = i1 + 76 | 0;
 i2 = i4;
 L1 : while (1) {
  i1 = HEAP8[i2 >> 0] | 0;
  L3 : do switch (HEAP8[i2 + 1 >> 0] | 0) {
  case -33:
  case -34:
  case -35:
  case -36:
   break L1;
  case 0:
   {
    switch (HEAP8[i3 + (i1 & 255) >> 0] | 0) {
    case 6:
     {
      i1 = 3;
      break L3;
     }
    case 7:
     {
      i5 = 6;
      break L3;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 23:
    case 22:
    case 29:
     {
      i5 = 7;
      break L3;
     }
    case 5:
     break;
    default:
     break L1;
    }
    i1 = 2;
    break;
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i5 = 6;
    break;
   }
  case -1:
   {
    if ((i1 & 255) > 253) break L1; else i5 = 7;
    break;
   }
  default:
   i5 = 7;
  } while (0);
  if ((i5 | 0) == 6) {
   i5 = 0;
   i1 = 4;
  } else if ((i5 | 0) == 7) {
   i5 = 0;
   i1 = 2;
  }
  i2 = i2 + i1 | 0;
 }
 return i2 - i4 | 0;
}

function _big2_nameLength(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i3 = i1 + 76 | 0;
 i2 = i4;
 L1 : while (1) {
  i1 = HEAP8[i2 + 1 >> 0] | 0;
  L3 : do switch (HEAP8[i2 >> 0] | 0) {
  case -33:
  case -34:
  case -35:
  case -36:
   break L1;
  case 0:
   {
    switch (HEAP8[i3 + (i1 & 255) >> 0] | 0) {
    case 6:
     {
      i1 = 3;
      break L3;
     }
    case 7:
     {
      i5 = 6;
      break L3;
     }
    case 27:
    case 26:
    case 25:
    case 24:
    case 23:
    case 22:
    case 29:
     {
      i5 = 7;
      break L3;
     }
    case 5:
     break;
    default:
     break L1;
    }
    i1 = 2;
    break;
   }
  case -37:
  case -38:
  case -39:
  case -40:
   {
    i5 = 6;
    break;
   }
  case -1:
   {
    if ((i1 & 255) > 253) break L1; else i5 = 7;
    break;
   }
  default:
   i5 = 7;
  } while (0);
  if ((i5 | 0) == 6) {
   i5 = 0;
   i1 = 4;
  } else if ((i5 | 0) == 7) {
   i5 = 0;
   i1 = 2;
  }
  i2 = i2 + i1 | 0;
 }
 return i2 - i4 | 0;
}

function _Split_Cubic(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = i1 + 24 | 0;
 i8 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 + 48 >> 2] = i8;
 i3 = i1 + 8 | 0;
 i5 = i1 + 16 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
 i4 = i7 + (HEAP32[i1 >> 2] | 0) >> 1;
 HEAP32[i3 >> 2] = i4;
 i8 = i8 + 1 + i6 >> 1;
 HEAP32[i1 + 40 >> 2] = i8;
 i6 = (i7 + i6 >> 1) + 1 | 0;
 i4 = i6 + i4 >> 1;
 HEAP32[i5 >> 2] = i4;
 i8 = i6 + i8 >> 1;
 HEAP32[i1 + 32 >> 2] = i8;
 HEAP32[i2 >> 2] = i8 + 1 + i4 >> 1;
 i2 = i1 + 28 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 + 52 >> 2] = i4;
 i8 = i1 + 12 | 0;
 i6 = i1 + 20 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 i7 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
 i3 = i7 + (HEAP32[i1 + 4 >> 2] | 0) >> 1;
 HEAP32[i8 >> 2] = i3;
 i4 = i4 + 1 + i5 >> 1;
 HEAP32[i1 + 44 >> 2] = i4;
 i5 = (i7 + i5 >> 1) + 1 | 0;
 i3 = i5 + i3 >> 1;
 HEAP32[i6 >> 2] = i3;
 i4 = i5 + i4 >> 1;
 HEAP32[i1 + 36 >> 2] = i4;
 HEAP32[i2 >> 2] = i4 + 1 + i3 >> 1;
 return;
}

function _tt_face_load_any(i7, i4, i3, i8, i6) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 do if (!i4) i1 = HEAP32[(HEAP32[i7 + 104 >> 2] | 0) + 4 >> 2] | 0; else {
  i2 = HEAP16[i7 + 152 >> 1] | 0;
  i1 = HEAP32[i7 + 156 >> 2] | 0;
  i5 = i1 + ((i2 & 65535) << 4) | 0;
  if (!(i2 << 16 >> 16)) {
   i8 = 142;
   return i8 | 0;
  } else i2 = i1;
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) {
    i1 = HEAP32[i2 + 12 >> 2] | 0;
    if (i1 | 0) {
     i4 = 6;
     break;
    }
   }
   i1 = i2 + 16 | 0;
   if (i1 >>> 0 < i5 >>> 0) i2 = i1; else {
    i1 = 142;
    i4 = 12;
    break;
   }
  }
  if ((i4 | 0) == 6) {
   i3 = (HEAP32[i2 + 8 >> 2] | 0) + i3 | 0;
   break;
  } else if ((i4 | 0) == 12) return i1 | 0;
 } while (0);
 if (i6) {
  i2 = HEAP32[i6 >> 2] | 0;
  if (!i2) {
   HEAP32[i6 >> 2] = i1;
   i8 = 0;
   return i8 | 0;
  } else i1 = i2;
 }
 i8 = _FT_Stream_ReadAt(HEAP32[i7 + 104 >> 2] | 0, i3, i8, i1) | 0;
 return i8 | 0;
}

function _pfr_cmap_char_next(i1, i8) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = i1 + 20 | 0;
 if (!i9) {
  i9 = 0;
  i10 = 0;
  HEAP32[i8 >> 2] = i9;
  return i10 | 0;
 }
 i4 = HEAP32[i7 >> 2] | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + 1 | 0;
  i1 = i9;
  i2 = 0;
  while (1) {
   i5 = ((i1 - i2 | 0) >>> 1) + i2 | 0;
   i6 = HEAP32[i4 + (i5 << 4) >> 2] | 0;
   if ((i6 | 0) == (i3 | 0)) break;
   i6 = i6 >>> 0 < i3 >>> 0;
   i2 = i6 ? i5 + 1 | 0 : i2;
   i1 = i6 ? i1 : i5;
   if (i1 >>> 0 <= i2 >>> 0) break L4;
  }
  if (i5 | 0) {
   i10 = 7;
   break;
  }
 }
 if ((i10 | 0) == 7) {
  i9 = i3;
  i10 = i5 + 1 | 0;
  HEAP32[i8 >> 2] = i9;
  return i10 | 0;
 }
 if ((i2 | 0) == 0 | i2 >>> 0 >= i9 >>> 0) {
  i9 = 0;
  i10 = 0;
  HEAP32[i8 >> 2] = i9;
  return i10 | 0;
 }
 i9 = HEAP32[(HEAP32[i7 >> 2] | 0) + (i2 << 4) >> 2] | 0;
 i10 = i2 + 1 | 0;
 HEAP32[i8 >> 2] = i9;
 return i10 | 0;
}

function _FcCacheTimeValid(i2, i6, i1) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i7 + 8 | 0;
 i3 = i7;
 i4 = i7 + 20 | 0;
 if (!i1) {
  i2 = _FcConfigGetSysRoot(i2) | 0;
  i1 = (HEAP32[i6 + 12 >> 2] | 0) + i6 | 0;
  if (!i2) i1 = ___strdup(i1) | 0; else {
   HEAP32[i3 >> 2] = i1;
   HEAP32[i3 + 4 >> 2] = 0;
   i1 = _FcStrBuildFilename(i2, i3) | 0;
  }
  i3 = (_FcStatChecksum(i1, i4) | 0) < 0;
  _FcStrFree(i1);
  if (i3) {
   i6 = 0;
   STACKTOP = i7;
   return i6 | 0;
  } else i1 = i4;
 }
 if (!(HEAP32[91917] & 16)) {
  i2 = i1 + 56 | 0;
  i1 = i6 + 28 | 0;
 } else {
  i4 = i6 + 28 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  i2 = i1 + 56 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i6 + 12 >> 2] | 0) + i6;
  HEAP32[i5 + 4 >> 2] = i3;
  HEAP32[i5 + 8 >> 2] = i1;
  _printf(352018, i5) | 0;
  i1 = i4;
 }
 i6 = (HEAP32[i1 >> 2] | 0) == (HEAP32[i2 >> 2] | 0) & 1;
 STACKTOP = i7;
 return i6 | 0;
}

function _FcNoticeFoundry(i1) {
 i1 = i1 | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 if (!(_strstr(i1, 351673) | 0)) if (!(_strstr(i1, 351679) | 0)) if (!(_strstr(i1, 351687) | 0)) if (!(_strstr(i1, 351697) | 0)) if (!(_strstr(i1, 351702) | 0)) if (!(_strstr(i1, 351708) | 0)) if (!(_strstr(i1, 351723) | 0)) if (!(_strstr(i1, 351730) | 0)) if (!(_strstr(i1, 351734) | 0)) if (!(_strstr(i1, 351769) | 0)) if (!(_strstr(i1, 351778) | 0)) if (!(_strstr(i1, 351792) | 0)) if (!(_strstr(i1, 351802) | 0)) if (!(_strstr(i1, 351811) | 0)) if (!(_strstr(i1, 351817) | 0)) if (!(_strstr(i1, 351832) | 0)) if (!(_strstr(i1, 351836) | 0)) if (!(_strstr(i1, 351844) | 0)) {
  i1 = 0;
  return i1 | 0;
 } else i1 = 17; else i1 = 16; else i1 = 15; else i1 = 14; else i1 = 13; else i1 = 12; else i1 = 11; else i1 = 10; else i1 = 9; else i1 = 8; else i1 = 7; else i1 = 6; else i1 = 5; else i1 = 4; else i1 = 3; else i1 = 2; else i1 = 1; else i1 = 0;
 i1 = HEAP32[71024 + (i1 << 3) + 4 >> 2] | 0;
 return i1 | 0;
}

function _FcValueListSerializeAlloc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) {
  i2 = 1;
  return i2 | 0;
 }
 L3 : while (1) {
  if (!(_FcSerializeAlloc(i2, i1, 32) | 0)) {
   i1 = 0;
   i2 = 9;
   break;
  }
  switch (HEAP32[i1 + 8 >> 2] | 0) {
  case 3:
   {
    if (!(_FcStrSerializeAlloc(i2, HEAP32[i1 + 16 >> 2] | 0) | 0)) {
     i1 = 0;
     i2 = 9;
     break L3;
    }
    break;
   }
  case 6:
   {
    if (!(_FcCharSetSerializeAlloc(i2, HEAP32[i1 + 16 >> 2] | 0) | 0)) {
     i1 = 0;
     i2 = 9;
     break L3;
    }
    break;
   }
  case 8:
   {
    if (!(_FcLangSetSerializeAlloc(i2, HEAP32[i1 + 16 >> 2] | 0) | 0)) {
     i1 = 0;
     i2 = 9;
     break L3;
    }
    break;
   }
  case 9:
   {
    if (!(_FcRangeSerializeAlloc(i2, HEAP32[i1 + 16 >> 2] | 0) | 0)) {
     i1 = 0;
     i2 = 9;
     break L3;
    }
    break;
   }
  default:
   {}
  }
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) {
   i1 = 1;
   i2 = 9;
   break;
  }
 }
 if ((i2 | 0) == 9) return i1 | 0;
 return 0;
}

function _attlist8(i3, i1, i4, i5, i6) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0;
 switch (i1 | 0) {
 case 20:
  {
   i1 = i6 + 28 | 0;
   i2 = i6 + 68 | 0;
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i6, i4 + (HEAP32[i2 >> 2] | 0) | 0, i5, 345408) | 0) {
    HEAP32[i3 >> 2] = 55;
    i6 = 35;
    return i6 | 0;
   }
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i6, i4 + (HEAP32[i2 >> 2] | 0) | 0, i5, 345416) | 0) {
    HEAP32[i3 >> 2] = 55;
    i6 = 36;
    return i6 | 0;
   }
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i6, i4 + (HEAP32[i2 >> 2] | 0) | 0, i5, 345425) | 0) {
    HEAP32[i3 >> 2] = 76;
    i6 = 33;
    return i6 | 0;
   }
   break;
  }
 case 27:
  {
   HEAP32[i3 >> 2] = 55;
   i6 = 37;
   return i6 | 0;
  }
 case 15:
  {
   i6 = 33;
   return i6 | 0;
  }
 default:
  if ((i1 | 0) == 28 & (HEAP32[i3 + 16 >> 2] | 0) == 0) {
   i6 = 59;
   return i6 | 0;
  }
 }
 HEAP32[i3 >> 2] = 41;
 i6 = -1;
 return i6 | 0;
}

function _ass_shaper_reorder(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = i4 + 4 | 0;
 i8 = i5 + 20 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) > 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 << 2) >> 2] = i2;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
 }
 i7 = i4 + 8 | 0;
 i6 = i4 + 12 | 0;
 if ((HEAP32[i6 >> 2] | 0) <= 0) {
  i8 = i1;
  return i8 | 0;
 }
 i4 = i5 + 12 | 0;
 i3 = i5 + 16 | 0;
 i2 = 0;
 while (1) {
  i9 = HEAP32[i7 >> 2] | 0;
  i5 = HEAP32[i9 + (i2 * 24 | 0) + 16 >> 2] | 0;
  if (!((_fribidi_reorder_line(0, (HEAP32[i4 >> 2] | 0) + (i5 << 2) | 0, HEAP32[i9 + (i2 * 24 | 0) + 20 >> 2] | 0, 0, 64, (HEAP32[i3 >> 2] | 0) + i5 | 0, 0, i1 + (i5 << 2) | 0) | 0) << 24 >> 24)) {
   i1 = 0;
   i2 = 7;
   break;
  }
  i2 = i2 + 1 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if ((i2 | 0) >= (HEAP32[i6 >> 2] | 0)) {
   i2 = 7;
   break;
  }
 }
 if ((i2 | 0) == 7) return i1 | 0;
 return 0;
}

function _T1_Set_MM_Blend(i1, i2, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = HEAP32[i1 + 528 >> 2] | 0;
 if (!i8) {
  i10 = 6;
  return i10 | 0;
 }
 i9 = i8 + 4 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i6 = i3 >>> 0 < i2 >>> 0 ? i3 : i2;
 i1 = HEAP32[i8 >> 2] | 0;
 if (!i1) {
  i10 = 0;
  return i10 | 0;
 }
 i7 = i8 + 136 | 0;
 i5 = 0;
 i2 = i3;
 do {
  if (!i2) {
   i3 = 65536;
   i2 = 0;
  } else {
   i3 = 65536;
   i4 = 0;
   do {
    if (i4 >>> 0 < i6 >>> 0) i1 = HEAP32[i10 + (i4 << 2) >> 2] | 0; else i1 = 32768;
    i2 = (i1 | 0) > 0 ? i1 : 0;
    i2 = (i2 | 0) < 65536 ? i2 : 65536;
    i3 = _FT_MulFix(i3, (1 << i4 & i5 | 0) == 0 ? 65536 - i2 | 0 : i2) | 0;
    i4 = i4 + 1 | 0;
    i2 = HEAP32[i9 >> 2] | 0;
   } while (i4 >>> 0 < i2 >>> 0);
   i1 = HEAP32[i8 >> 2] | 0;
  }
  HEAP32[(HEAP32[i7 >> 2] | 0) + (i5 << 2) >> 2] = i3;
  i5 = i5 + 1 | 0;
 } while (i5 >>> 0 < i1 >>> 0);
 i1 = 0;
 return i1 | 0;
}

function _sift(i3, i10, i7, i1, i8) {
 i3 = i3 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i12;
 HEAP32[i11 >> 2] = i3;
 L1 : do if ((i1 | 0) > 1) {
  i9 = 0 - i10 | 0;
  i2 = i3;
  i6 = i1;
  i1 = 1;
  while (1) {
   i4 = i2 + i9 | 0;
   i5 = i6 + -2 | 0;
   i2 = i4 + (0 - (HEAP32[i8 + (i5 << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[i7 & 255](i3, i2) | 0) > -1) if ((FUNCTION_TABLE_iii[i7 & 255](i3, i4) | 0) > -1) break L1;
   i3 = i1 + 1 | 0;
   i1 = i11 + (i1 << 2) | 0;
   if ((FUNCTION_TABLE_iii[i7 & 255](i2, i4) | 0) > -1) {
    HEAP32[i1 >> 2] = i2;
    i1 = i6 + -1 | 0;
   } else {
    HEAP32[i1 >> 2] = i4;
    i2 = i4;
    i1 = i5;
   }
   if ((i1 | 0) <= 1) {
    i1 = i3;
    break L1;
   }
   i6 = i1;
   i1 = i3;
   i3 = HEAP32[i11 >> 2] | 0;
  }
 } else i1 = 1; while (0);
 _cycle(i10, i11, i1);
 STACKTOP = i12;
 return;
}

function _ass_set_frame_size(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i1 + 16 | 0;
 i5 = i1 + 20 | 0;
 if ((HEAP32[i4 >> 2] | 0) == (i2 | 0)) if ((HEAP32[i5 >> 2] | 0) == (i3 | 0)) return;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i5 >> 2] = i3;
 i7 = i1 + 112 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 _ass_cache_empty(HEAP32[i1 + 740 >> 2] | 0);
 _ass_cache_empty(HEAP32[i1 + 736 >> 2] | 0);
 _ass_cache_empty(HEAP32[i1 + 732 >> 2] | 0);
 i7 = HEAP32[i4 >> 2] | 0;
 HEAP32[i1 + 136 >> 2] = i7;
 i3 = HEAP32[i5 >> 2] | 0;
 HEAP32[i1 + 140 >> 2] = i3;
 i6 = HEAP32[i1 + 64 >> 2] | 0;
 i2 = HEAP32[i1 + 68 >> 2] | 0;
 HEAP32[i1 + 148 >> 2] = i7 - i6 - i2;
 i4 = HEAP32[i1 + 56 >> 2] | 0;
 i5 = HEAP32[i1 + 60 >> 2] | 0;
 HEAP32[i1 + 144 >> 2] = i3 - i4 - i5;
 HEAP32[i1 + 156 >> 2] = i7 - ((i6 | 0) > 0 ? i6 : 0) - ((i2 | 0) > 0 ? i2 : 0);
 HEAP32[i1 + 152 >> 2] = i3 - ((i4 | 0) > 0 ? i4 : 0) - ((i5 | 0) > 0 ? i5 : 0);
 return;
}

function _tt_cmap14_get_def_chars(i6, i7, i2) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = _tt_cmap14_def_char_count(i7) | 0;
 i3 = HEAP8[i7 >> 0] | 0;
 i4 = HEAP8[i7 + 1 >> 0] | 0;
 i5 = HEAP8[i7 + 2 >> 0] | 0;
 i1 = HEAP8[i7 + 3 >> 0] | 0;
 if (_tt_cmap14_ensure(i6, i8 + 1 | 0, i2) | 0) {
  i8 = 0;
  return i8 | 0;
 }
 i2 = (i4 & 255) << 16 | (i3 & 255) << 24 | (i5 & 255) << 8 | i1 & 255;
 i8 = HEAP32[i6 + 32 >> 2] | 0;
 if (!i2) i1 = i8; else {
  i1 = i8;
  do {
   i3 = i7;
   i7 = i7 + 4 | 0;
   i5 = HEAPU8[i3 + 7 >> 0] | 0;
   i6 = i1 + 4 | 0;
   i3 = (HEAPU8[i3 + 5 >> 0] | 0) << 8 | (HEAPU8[i7 >> 0] | 0) << 16 | (HEAPU8[i3 + 6 >> 0] | 0);
   i4 = i5 + 1 | 0;
   while (1) {
    HEAP32[i1 >> 2] = i3;
    i4 = i4 + -1 | 0;
    if (!i4) break; else {
     i3 = i3 + 1 | 0;
     i1 = i1 + 4 | 0;
    }
   }
   i1 = i6 + (i5 << 2) | 0;
   i2 = i2 + -1 | 0;
  } while ((i2 | 0) != 0);
 }
 HEAP32[i1 >> 2] = 0;
 return i8 | 0;
}

function _FcTestPrint(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i7 + 56 | 0;
 i2 = i7 + 48 | 0;
 i6 = i7 + 40 | 0;
 i5 = i7 + 32 | 0;
 i4 = i7 + 24 | 0;
 switch (HEAP32[i1 >> 2] | 0) {
 case 0:
  {
   _printf(349287, i7) | 0;
   break;
  }
 case 1:
  {
   _printf(349296, i7 + 8 | 0) | 0;
   break;
  }
 case 2:
  {
   _printf(349302, i7 + 16 | 0) | 0;
   break;
  }
 default:
  {}
 }
 switch (HEAP32[i1 + 4 >> 2] | 0) {
 case 0:
  {
   _printf(349308, i4) | 0;
   break;
  }
 case 1:
  {
   _printf(349313, i5) | 0;
   break;
  }
 case 2:
  {
   _printf(349318, i6) | 0;
   break;
  }
 case 3:
  {
   _printf(349325, i2) | 0;
   break;
  }
 default:
  {}
 }
 i6 = _FcObjectName(HEAP32[i1 + 8 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i6;
 _printf(348684, i3) | 0;
 _FcOpPrint(HEAP32[i1 + 12 >> 2] | 0);
 _putchar(32) | 0;
 _FcExprPrint(HEAP32[i1 + 16 >> 2] | 0);
 _putchar(10) | 0;
 STACKTOP = i7;
 return;
}

function _ft_mem_qrealloc(i3, i4, i5, i2, i1, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 do if ((i5 | i4 | i2 | 0) < 0) i2 = 6; else {
  if ((i4 | 0) == 0 | (i2 | 0) == 0) {
   if (!i1) {
    i2 = 0;
    i1 = 0;
    break;
   }
   FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i1);
   i2 = 0;
   i1 = 0;
   break;
  }
  if ((2147483647 / (i4 | 0) | 0 | 0) < (i2 | 0)) i2 = 10; else {
   i2 = Math_imul(i2, i4) | 0;
   if (i5 | 0) {
    i5 = Math_imul(i5, i4) | 0;
    i5 = FUNCTION_TABLE_iiiii[HEAP32[i3 + 12 >> 2] & 127](i3, i5, i2, i1) | 0;
    i4 = (i5 | 0) == 0;
    i2 = i4 ? 64 : 0;
    i1 = i4 ? i1 : i5;
    break;
   }
   if ((i2 | 0) <= 0) {
    i2 = i2 | 0 ? 6 : 0;
    i1 = 0;
    break;
   }
   i1 = FUNCTION_TABLE_iii[HEAP32[i3 + 4 >> 2] & 255](i3, i2) | 0;
   if (!i1) {
    i2 = 64;
    i1 = 0;
   } else {
    _memset(i1 | 0, 0, i2 | 0) | 0;
    i2 = 0;
   }
  }
 } while (0);
 HEAP32[i6 >> 2] = i2;
 return i1 | 0;
}

function _tt_cmap2_char_index(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 if (i5 >>> 0 >= 65536) return 0;
 i3 = i5 >>> 8;
 i4 = i1 + 6 | 0;
 i2 = i1 + 518 | 0;
 if (!i3) {
  i4 = i4 + (i5 << 1 & 510) | 0;
  if ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0)) return 0;
 } else {
  i1 = i4 + (i3 << 1) | 0;
  i1 = HEAP8[i1 + 1 >> 0] & -8 & 255 | (HEAPU8[i1 >> 0] | 0) << 8;
  if (!i1) return 0; else i2 = i2 + i1 | 0;
 }
 i3 = i2 + 6 | 0;
 i4 = (HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i2 + 7 >> 0] | 0);
 i1 = (i5 & 255) - ((HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0)) | 0;
 if (i4 | 0 ? i1 >>> 0 < ((HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0)) >>> 0 : 0) {
  i5 = i3 + (i4 + (i1 << 1)) | 0;
  i5 = (HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i5 + 1 >> 0] | 0);
  return ((i5 | 0) == 0 ? 0 : i5 + ((HEAPU8[i2 + 4 >> 0] | 0) << 8 | (HEAPU8[i2 + 5 >> 0] | 0)) & 65535) | 0;
 } else return 0;
 return 0;
}

function _FT_Matrix_Multiply_Scaled(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i1 = i1 << 16;
 if (!((i2 | 0) != 0 & (i3 | 0) != 0)) return;
 i8 = HEAP32[i2 >> 2] | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i9 = _FT_MulDiv(i8, i6, i1) | 0;
 i13 = HEAP32[i2 + 4 >> 2] | 0;
 i5 = i3 + 8 | 0;
 i14 = HEAP32[i5 >> 2] | 0;
 i9 = (_FT_MulDiv(i13, i14, i1) | 0) + i9 | 0;
 i7 = i3 + 4 | 0;
 i12 = HEAP32[i7 >> 2] | 0;
 i8 = _FT_MulDiv(i8, i12, i1) | 0;
 i4 = i3 + 12 | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 i8 = (_FT_MulDiv(i13, i10, i1) | 0) + i8 | 0;
 i13 = HEAP32[i2 + 8 >> 2] | 0;
 i6 = _FT_MulDiv(i13, i6, i1) | 0;
 i11 = HEAP32[i2 + 12 >> 2] | 0;
 i6 = (_FT_MulDiv(i11, i14, i1) | 0) + i6 | 0;
 i2 = _FT_MulDiv(i13, i12, i1) | 0;
 i2 = (_FT_MulDiv(i11, i10, i1) | 0) + i2 | 0;
 HEAP32[i3 >> 2] = i9;
 HEAP32[i7 >> 2] = i8;
 HEAP32[i5 >> 2] = i6;
 HEAP32[i4 >> 2] = i2;
 return;
}

function _FNT_Size_Request(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 i2 = ((Math_imul(i5, i6) | 0) + 36 | 0) / 72 | 0;
 i2 = ((i6 | 0) == 0 ? i5 : i2) + 32 >> 6;
 L1 : do switch (HEAP32[i1 >> 2] | 0) {
 case 0:
  if ((i2 | 0) == ((HEAP32[(HEAP32[i4 + 32 >> 2] | 0) + 12 >> 2] | 0) + 32 >> 6 | 0)) {
   i1 = HEAP32[i4 + 132 >> 2] | 0;
   break L1;
  } else {
   i6 = 23;
   return i6 | 0;
  }
 case 1:
  {
   i1 = HEAP32[i4 + 132 >> 2] | 0;
   if ((i2 | 0) != (HEAPU16[i1 + 96 >> 1] | 0 | 0)) {
    i6 = 23;
    return i6 | 0;
   }
   break;
  }
 default:
  {
   i6 = 7;
   return i6 | 0;
  }
 } while (0);
 _FT_Select_Metrics(i4, 0);
 i6 = HEAPU16[i1 + 80 >> 1] | 0;
 HEAP32[i3 + 24 >> 2] = i6 << 6;
 HEAP32[i3 + 28 >> 2] = i6 - (HEAPU16[i1 + 96 >> 1] | 0) << 6;
 HEAP32[i3 + 36 >> 2] = (HEAPU16[i1 + 102 >> 1] | 0) << 6;
 i6 = 0;
 return i6 | 0;
}

function _FcStrBufChar(i3, i9) {
 i3 = i3 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = i3 + 12 | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 i7 = i3 + 16 | 0;
 do if ((i2 | 0) == (HEAP32[i7 >> 2] | 0)) {
  i6 = i3 + 8 | 0;
  if (HEAP32[i6 >> 2] | 0) {
   i10 = 0;
   return i10 | 0;
  }
  i4 = i3 + 4 | 0;
  if (!(HEAP32[i4 >> 2] | 0)) {
   i5 = i2 + 64 | 0;
   i1 = _malloc(i5) | 0;
   if (i1 | 0) {
    HEAP32[i4 >> 2] = 1;
    _memcpy(i1 | 0, HEAP32[i3 >> 2] | 0, i2 | 0) | 0;
    i8 = 10;
   }
  } else {
   i2 = i2 << 1;
   i1 = _realloc(HEAP32[i3 >> 2] | 0, i2) | 0;
   if (i1 | 0) {
    i5 = i2;
    i2 = HEAP32[i10 >> 2] | 0;
    i8 = 10;
   }
  }
  if ((i8 | 0) == 10) {
   HEAP32[i7 >> 2] = i5;
   HEAP32[i3 >> 2] = i1;
   break;
  }
  HEAP32[i6 >> 2] = 1;
  i10 = 0;
  return i10 | 0;
 } else i1 = HEAP32[i3 >> 2] | 0; while (0);
 HEAP32[i10 >> 2] = i2 + 1;
 HEAP8[i1 + i2 >> 0] = i9;
 i10 = 1;
 return i10 | 0;
}

function _ps_table_new(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i6;
 HEAP32[i1 + 32 >> 2] = i3;
 i7 = _ft_mem_realloc(i3, 4, 0, i2, 0, i4) | 0;
 i5 = i1 + 24 | 0;
 HEAP32[i5 >> 2] = i7;
 if (!(HEAP32[i4 >> 2] | 0)) {
  i7 = _ft_mem_realloc(i3, 4, 0, i2, 0, i4) | 0;
  HEAP32[i1 + 28 >> 2] = i7;
  if (!(HEAP32[i4 >> 2] | 0)) {
   HEAP32[i1 + 16 >> 2] = i2;
   HEAP32[i1 + 12 >> 2] = -559038737;
   HEAP32[i1 + 20 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   i7 = i1 + 36 | 0;
   HEAP32[i7 >> 2] = HEAP32[6032];
   HEAP32[i7 + 4 >> 2] = HEAP32[6033];
   HEAP32[i7 + 8 >> 2] = HEAP32[6034];
   HEAP32[i7 + 12 >> 2] = HEAP32[6035];
   i7 = 0;
   STACKTOP = i6;
   return i7 | 0;
  }
 }
 _ft_mem_free(i3, HEAP32[i5 >> 2] | 0);
 HEAP32[i5 >> 2] = 0;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function _tt_face_load_os2(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 508 >> 2] & 127](i2, 1330851634, i4, 0) | 0;
 if (i1 | 0) {
  i4 = i1;
  return i4 | 0;
 }
 i3 = i2 + 364 | 0;
 i1 = _FT_Stream_ReadFields(i4, 117696, i3) | 0;
 if (i1 | 0) {
  i4 = i1;
  return i4 | 0;
 }
 i1 = i2 + 444 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP16[i2 + 464 >> 1] = -1;
 if (!(HEAP16[i3 >> 1] | 0)) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = _FT_Stream_ReadFields(i4, 117872, i3) | 0;
 if (i1 | 0) {
  i4 = i1;
  return i4 | 0;
 }
 if ((HEAPU16[i3 >> 1] | 0) <= 1) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = _FT_Stream_ReadFields(i4, 117888, i3) | 0;
 if (i1 | 0) {
  i4 = i1;
  return i4 | 0;
 }
 if ((HEAPU16[i3 >> 1] | 0) <= 4) {
  i4 = 0;
  return i4 | 0;
 }
 i4 = _FT_Stream_ReadFields(i4, 117916, i3) | 0;
 return i4 | 0;
}

function _tt_cmap10_char_next(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 i3 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
 i2 = (HEAPU8[i1 + 13 >> 0] | 0) << 16 | (HEAPU8[i1 + 12 >> 0] | 0) << 24 | (HEAPU8[i1 + 14 >> 0] | 0) << 8 | (HEAPU8[i1 + 15 >> 0] | 0);
 i5 = (HEAPU8[i1 + 17 >> 0] | 0) << 16 | (HEAPU8[i1 + 16 >> 0] | 0) << 24 | (HEAPU8[i1 + 18 >> 0] | 0) << 8 | (HEAPU8[i1 + 19 >> 0] | 0);
 i3 = i3 >>> 0 < i2 >>> 0 ? i2 : i3;
 i2 = i3 - i2 | 0;
 if (i2 >>> 0 >= i5 >>> 0) {
  i4 = i3;
  i5 = 0;
  HEAP32[i6 >> 2] = i4;
  return i5 | 0;
 }
 i4 = i1 + 20 + (i2 << 1) | 0;
 while (1) {
  i1 = (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0);
  if (i1 | 0) {
   i2 = 5;
   break;
  }
  i3 = i3 + 1 | 0;
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 >= i5 >>> 0) {
   i1 = 0;
   i2 = 5;
   break;
  } else i4 = i4 + 2 | 0;
 }
 if ((i2 | 0) == 5) {
  HEAP32[i6 >> 2] = i3;
  return i1 | 0;
 }
 return 0;
}

function _Get_Kerning(i1, i2, i3, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 HEAP32[i7 >> 2] = 0;
 i8 = i7 + 4 | 0;
 HEAP32[i8 >> 2] = 0;
 i4 = HEAP32[i1 + 492 >> 2] | 0;
 if (!i4) return 0;
 i1 = HEAP32[i4 + 36 >> 2] | 0;
 i6 = i2 << 16 | i3;
 i2 = i1 + (HEAP32[i4 + 40 >> 2] << 4) + -16 | 0;
 L4 : do if (i2 >>> 0 < i1 >>> 0) i9 = 6; else {
  while (1) {
   i3 = (i2 - i1 >> 4 | 0) / 2 | 0;
   i4 = i1 + (i3 << 4) | 0;
   i5 = HEAP32[i4 >> 2] << 16 | HEAP32[i1 + (i3 << 4) + 4 >> 2];
   if ((i5 | 0) == (i6 | 0)) break;
   i5 = i5 >>> 0 < i6 >>> 0;
   i2 = i5 ? i2 : i4 + -16 | 0;
   i1 = i5 ? i4 + 16 | 0 : i1;
   if (i1 >>> 0 > i2 >>> 0) {
    i9 = 6;
    break L4;
   }
  }
  HEAP32[i7 >> 2] = HEAP32[i1 + (i3 << 4) + 8 >> 2];
  i1 = HEAP32[i1 + (i3 << 4) + 12 >> 2] | 0;
 } while (0);
 if ((i9 | 0) == 6) {
  HEAP32[i7 >> 2] = 0;
  i1 = 0;
 }
 HEAP32[i8 >> 2] = i1;
 return 0;
}

function _libassjs_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i6 + 28 | 0;
 i4 = i6 + 24 | 0;
 i5 = i6 + 20 | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i5 >> 2] = 245887;
 i2 = _ass_library_init() | 0;
 HEAP32[91912] = i2;
 if (!(HEAP32[91912] | 0)) {
  _printf(245895, i6) | 0;
  _exit(2);
 }
 _ass_set_message_cb(HEAP32[91912] | 0, 17, 0);
 i2 = _ass_renderer_init(HEAP32[91912] | 0) | 0;
 HEAP32[91913] = i2;
 if (!(HEAP32[91913] | 0)) {
  _printf(245921, i6 + 8 | 0) | 0;
  _exit(3);
 }
 _ass_set_frame_size(HEAP32[91913] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 _ass_set_fonts(HEAP32[91913] | 0, 245948, 0, 3, 245960, 1);
 i5 = _ass_read_file(HEAP32[91912] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
 HEAP32[91914] = i5;
 if (HEAP32[91914] | 0) {
  STACKTOP = i6;
  return;
 } else {
  _printf(245972, i6 + 16 | 0) | 0;
  _exit(4);
 }
}

function _FT_Get_Advance(i2, i3, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0;
 if (!i2) {
  i5 = 35;
  return i5 | 0;
 }
 if (!i5) {
  i5 = 6;
  return i5 | 0;
 }
 if ((HEAP32[i2 + 16 >> 2] | 0) >>> 0 <= i3 >>> 0) {
  i5 = 16;
  return i5 | 0;
 }
 i1 = HEAP32[(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 12 >> 2] | 0) + 84 >> 2] | 0;
 do if (i1 | 0) if ((i4 & 3 | 0) != 0 | (i4 & 983040 | 0) == 65536) {
  i1 = FUNCTION_TABLE_iiiiii[i1 & 127](i2, i3, 1, i4, i5) | 0;
  if (i1 | 0) {
   if ((i1 & 255 | 0) == 7) break;
   return i1 | 0;
  }
  if (i4 & 1 | 0) {
   i5 = 0;
   return i5 | 0;
  }
  i1 = HEAP32[i2 + 88 >> 2] | 0;
  if (!i1) {
   i5 = 36;
   return i5 | 0;
  }
  i4 = _FT_MulDiv(HEAP32[i5 >> 2] | 0, HEAP32[((i4 & 16 | 0) == 0 ? i1 + 16 | 0 : i1 + 20 | 0) >> 2] | 0, 64) | 0;
  HEAP32[i5 >> 2] = i4;
  i5 = 0;
  return i5 | 0;
 } while (0);
 i5 = _FT_Get_Advances(i2, i3, 1, i4, i5) | 0;
 return i5 | 0;
}

function _update_font(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i1 = HEAP32[i3 + 500 >> 2] | 0;
 i2 = i4 + 12 | 0;
 if ((HEAP8[i1 >> 0] | 0) == 64) {
  HEAP32[i2 >> 2] = 1;
  i1 = i1 + 1 | 0;
 } else HEAP32[i2 >> 2] = 0;
 i1 = ___strdup(i1) | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[i3 + 504 >> 2] | 0;
 switch (i1 | 0) {
 case 1:
 case -1:
  {
   i1 = 700;
   break;
  }
 case 0:
  {
   i1 = 400;
   break;
  }
 default:
  {}
 }
 HEAP32[i4 + 4 >> 2] = i1;
 i1 = HEAP32[i3 + 508 >> 2] | 0;
 switch (i1 | 0) {
 case 1:
  {
   i1 = 100;
   break;
  }
 case 0:
  {
   i1 = 0;
   break;
  }
 default:
  {}
 }
 HEAP32[i4 + 8 >> 2] = i1;
 i2 = i3 + 220 | 0;
 _ass_cache_dec_ref(HEAP32[i2 >> 2] | 0);
 i4 = _ass_font_new(HEAP32[i3 + 728 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0, i4) | 0;
 HEAP32[i2 >> 2] = i4;
 STACKTOP = i5;
 return;
}

function _fnt_font_load(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i2 = i3 + 4 | 0;
 i1 = _FT_Stream_Seek(i4, HEAP32[i3 >> 2] | 0) | 0;
 if (i1 | 0) {
  i4 = i1;
  return i4 | 0;
 }
 i1 = _FT_Stream_ReadFields(i4, 116976, i2) | 0;
 if (i1 | 0) {
  i4 = i1;
  return i4 | 0;
 }
 i1 = HEAP16[i2 >> 1] | 0;
 switch (i1 << 16 >> 16) {
 case 768:
 case 512:
  break;
 default:
  {
   i4 = 2;
   return i4 | 0;
  }
 }
 i2 = i3 + 8 | 0;
 if ((HEAP32[i2 >> 2] | 0) >>> 0 < (i1 << 16 >> 16 == 768 ? 148 : 118) >>> 0) {
  i4 = 2;
  return i4 | 0;
 }
 if (i1 << 16 >> 16 == 512) {
  i1 = i3 + 132 | 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
 }
 if (HEAP16[i3 + 72 >> 1] & 1) {
  i4 = 2;
  return i4 | 0;
 }
 i1 = _FT_Stream_Seek(i4, HEAP32[i3 >> 2] | 0) | 0;
 if (i1 | 0) {
  i4 = i1;
  return i4 | 0;
 }
 i4 = _FT_Stream_ExtractFrame(i4, HEAP32[i2 >> 2] | 0, i3 + 160 | 0) | 0;
 return i4 | 0;
}

function _unknown_toUtf16(i1, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == (i6 | 0)) return;
 i9 = i1 + 376 | 0;
 i10 = i1 + 368 | 0;
 i11 = i1 + 372 | 0;
 i4 = i1 + 76 | 0;
 i3 = HEAP32[i7 >> 2] | 0;
 while (1) {
  if ((i3 | 0) == (i8 | 0)) {
   i1 = 7;
   break;
  }
  i1 = HEAP16[i9 + ((HEAPU8[i2 >> 0] | 0) << 1) >> 1] | 0;
  if (!(i1 << 16 >> 16)) {
   i1 = (FUNCTION_TABLE_iii[HEAP32[i10 >> 2] & 255](HEAP32[i11 >> 2] | 0, i2) | 0) & 65535;
   i2 = HEAP32[i5 >> 2] | 0;
   i3 = (HEAPU8[i4 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) + -3 | 0;
  } else i3 = 1;
  HEAP32[i5 >> 2] = i2 + i3;
  i2 = HEAP32[i7 >> 2] | 0;
  i3 = i2 + 2 | 0;
  HEAP32[i7 >> 2] = i3;
  HEAP16[i2 >> 1] = i1;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (i6 | 0)) {
   i1 = 7;
   break;
  }
 }
 if ((i1 | 0) == 7) return;
}

function _ps_parser_to_fixed_array(i3, i4, i5, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i7 = 0;
 i7 = HEAP32[i3 + 8 >> 2] | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = i2;
 L1 : do if (i1 >>> 0 < i7 >>> 0) while (1) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 0:
  case 12:
  case 9:
  case 10:
  case 13:
  case 32:
   {
    i1 = i2;
    break;
   }
  case 37:
   {
    i2 = 37;
    L5 : while (1) {
     switch (i2 << 24 >> 24) {
     case 10:
     case 13:
      break L5;
     default:
      {}
     }
     i2 = i1 + 1 | 0;
     if (i2 >>> 0 >= i7 >>> 0) {
      i1 = i2;
      break;
     }
     i1 = i2;
     i2 = HEAP8[i2 >> 0] | 0;
    }
    break;
   }
  default:
   {
    i1 = i2;
    break L1;
   }
  }
  i1 = i1 + 1 | 0;
  i2 = i1;
  if (i1 >>> 0 >= i7 >>> 0) {
   i1 = i2;
   break L1;
  }
 } else i1 = i2; while (0);
 HEAP32[i3 >> 2] = i1;
 return _ps_tofixedarray(i3, i7, i4, i5, i6) | 0;
}

function _tt_face_load_maxp(i2, i6) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = i2 + 260 | 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 508 >> 2] & 127](i2, 1835104368, i6, 0) | 0;
 if (i1 | 0) {
  i7 = i1;
  return i7 | 0;
 }
 i1 = _FT_Stream_ReadFields(i6, 117932, i7) | 0;
 if (i1 | 0) {
  i7 = i1;
  return i7 | 0;
 }
 i3 = i2 + 276 | 0;
 i4 = i2 + 280 | 0;
 i5 = i2 + 290 | 0;
 i1 = i2 + 266 | 0;
 i2 = i1 + 26 | 0;
 do {
  HEAP16[i1 >> 1] = 0;
  i1 = i1 + 2 | 0;
 } while ((i1 | 0) < (i2 | 0));
 if ((HEAP32[i7 >> 2] | 0) <= 65535) {
  i7 = 0;
  return i7 | 0;
 }
 i1 = _FT_Stream_ReadFields(i6, 117948, i7) | 0;
 if (i1 | 0) {
  i7 = i1;
  return i7 | 0;
 }
 if ((HEAPU16[i4 >> 1] | 0) < 64) HEAP16[i4 >> 1] = 64;
 if ((HEAPU16[i3 >> 1] | 0) > 65531) HEAP16[i3 >> 1] = -5;
 if ((HEAPU16[i5 >> 1] | 0) <= 100) {
  i7 = 0;
  return i7 | 0;
 }
 HEAP16[i5 >> 1] = 100;
 i7 = 0;
 return i7 | 0;
}

function _FT_Done_Face(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!i2) {
  i6 = 35;
  return i6 | 0;
 }
 i5 = HEAP32[i2 + 96 >> 2] | 0;
 if (!i5) {
  i6 = 35;
  return i6 | 0;
 }
 i3 = (HEAP32[i2 + 128 >> 2] | 0) + 56 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i4 + -1;
 if ((i4 | 0) > 1) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = HEAP32[i5 + 8 >> 2] | 0;
 i4 = i5 + 16 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) {
  i6 = 35;
  return i6 | 0;
 }
 while (1) {
  if ((HEAP32[i1 + 8 >> 2] | 0) == (i2 | 0)) break;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (!i1) {
   i1 = 35;
   i6 = 8;
   break;
  }
 }
 if ((i6 | 0) == 8) return i1 | 0;
 i7 = HEAP32[i1 >> 2] | 0;
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[(i7 | 0 ? i7 + 4 | 0 : i4) >> 2] = i6;
 HEAP32[(i6 | 0 ? i6 : i5 + 20 | 0) >> 2] = i7;
 FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i1);
 _destroy_face(i3, i2, i5);
 i6 = 0;
 return i6 | 0;
}

function _FcFontSetSerialize(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = _FcSerializePtr(i3, i4) | 0;
 if (!i1) {
  i8 = 0;
  return i8 | 0;
 };
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i1 >> 2];
 i7 = i4 + 8 | 0;
 i8 = _FcSerializePtr(i3, HEAP32[i7 >> 2] | 0) | 0;
 if (!i8) {
  i8 = 0;
  return i8 | 0;
 }
 i5 = i1;
 HEAP32[i1 + 8 >> 2] = i8 - i5 | 1;
 if ((HEAP32[i4 >> 2] | 0) > 0) i2 = 0; else {
  i8 = i1;
  return i8 | 0;
 }
 while (1) {
  i6 = _FcPatternSerialize(i3, HEAP32[(HEAP32[i7 >> 2] | 0) + (i2 << 2) >> 2] | 0) | 0;
  if (!i6) {
   i1 = 0;
   i2 = 6;
   break;
  }
  HEAP32[i8 + (i2 << 2) >> 2] = i6 - i5 | 1;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) >= (HEAP32[i4 >> 2] | 0)) {
   i2 = 6;
   break;
  }
 }
 if ((i2 | 0) == 6) return i1 | 0;
 return 0;
}

function _tt_cmap6_char_next(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
 i2 = (HEAPU8[i4 + 6 >> 0] | 0) << 8 | (HEAPU8[i4 + 7 >> 0] | 0);
 i5 = (HEAPU8[i4 + 8 >> 0] | 0) << 8 | (HEAPU8[i4 + 9 >> 0] | 0);
 if (i1 >>> 0 > 65535) {
  i4 = 0;
  i5 = 0;
  HEAP32[i6 >> 2] = i4;
  return i5 | 0;
 }
 i3 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
 i1 = i3 - i2 | 0;
 if (i1 >>> 0 >= i5 >>> 0) {
  i4 = 0;
  i5 = 0;
  HEAP32[i6 >> 2] = i4;
  return i5 | 0;
 }
 i4 = i4 + 10 + (i1 << 1) | 0;
 i2 = i1;
 while (1) {
  i1 = (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0);
  if (i1 | 0) {
   i2 = 6;
   break;
  }
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 >= i5 >>> 0) {
   i3 = 0;
   i1 = 0;
   i2 = 6;
   break;
  } else {
   i4 = i4 + 2 | 0;
   i3 = i3 + 1 | 0;
  }
 }
 if ((i2 | 0) == 6) {
  HEAP32[i6 >> 2] = i3;
  return i1 | 0;
 }
 return 0;
}

function _normal_updatePosition(i1, i2, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0;
 if (i2 >>> 0 >= i5 >>> 0) return;
 i3 = i1 + 76 | 0;
 i4 = i6 + 4 | 0;
 i1 = i2;
 do {
  switch (HEAP8[i3 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
  case 5:
   {
    i1 = i1 + 2 | 0;
    break;
   }
  case 6:
   {
    i1 = i1 + 3 | 0;
    break;
   }
  case 7:
   {
    i1 = i1 + 4 | 0;
    break;
   }
  case 10:
   {
    HEAP32[i4 >> 2] = -1;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
    i1 = i1 + 1 | 0;
    break;
   }
  case 9:
   {
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
    i2 = i1 + 1 | 0;
    if ((i2 | 0) == (i5 | 0)) i1 = i5; else i1 = (HEAP8[i3 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) == 10 ? i1 + 2 | 0 : i2;
    HEAP32[i4 >> 2] = -1;
    break;
   }
  default:
   i1 = i1 + 1 | 0;
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 } while (i1 >>> 0 < i5 >>> 0);
 return;
}

function _element2(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 39;
   break;
  }
 case 20:
  {
   if (!(FUNCTION_TABLE_iiiii[HEAP32[i5 + 28 >> 2] & 127](i5, i3 + (HEAP32[i5 + 68 >> 2] | 0) | 0, i4, 345353) | 0)) i6 = 10; else {
    HEAP32[i1 >> 2] = 67;
    i1 = 43;
   }
   break;
  }
 case 23:
  {
   HEAP32[i1 + 4 >> 2] = 2;
   HEAP32[i1 >> 2] = 68;
   i1 = 44;
   break;
  }
 case 41:
 case 18:
  {
   HEAP32[i1 >> 2] = 69;
   i1 = 51;
   break;
  }
 case 30:
  {
   HEAP32[i1 >> 2] = 69;
   i1 = 53;
   break;
  }
 case 31:
  {
   HEAP32[i1 >> 2] = 69;
   i1 = 52;
   break;
  }
 case 32:
  {
   HEAP32[i1 >> 2] = 69;
   i1 = 54;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else i6 = 10;
 }
 if ((i6 | 0) == 10) {
  HEAP32[i1 >> 2] = 41;
  i1 = -1;
 }
 return i1 | 0;
}

function _FcObjectLookupIdByName(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 i1 = _strlen(i5) | 0;
 if ((i1 + -3 | 0) >>> 0 < 12) {
  i4 = i5 + 1 | 0;
  i2 = (HEAPU8[350649 + (HEAPU8[i5 + 2 >> 0] | 0) >> 0] | 0) + i1 + (HEAPU8[350649 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0) | 0;
  if (i2 >>> 0 < 60) {
   i3 = 68024 + (i2 << 3) | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   if ((i1 | 0) > -1) {
    i1 = 350905 + i1 | 0;
    if ((HEAP8[i5 >> 0] | 0) == (HEAP8[i1 >> 0] | 0)) if (!(_strcmp(i4, i1 + 1 | 0) | 0)) {
     if (i3) {
      i7 = HEAP32[68024 + (i2 << 3) + 4 >> 2] | 0;
      STACKTOP = i8;
      return i7 | 0;
     }
    } else i7 = 6; else i7 = 6;
   } else i7 = 6;
  } else i7 = 6;
 } else i7 = 6;
 i7 = (__FcObjectLookupOtherTypeByName(i5, i6) | 0) == 0;
 i7 = i7 ? 0 : HEAP32[i6 >> 2] | 0;
 STACKTOP = i8;
 return i7 | 0;
}

function ___strchrnul(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i3 = i4 & 255;
 L1 : do if (!i3) i1 = i1 + (_strlen(i1) | 0) | 0; else {
  if (i1 & 3) {
   i2 = i4 & 255;
   do {
    i5 = HEAP8[i1 >> 0] | 0;
    if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break L1;
    i1 = i1 + 1 | 0;
   } while ((i1 & 3 | 0) != 0);
  }
  i3 = Math_imul(i3, 16843009) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  L10 : do if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) do {
   i5 = i2 ^ i3;
   if ((i5 & -2139062144 ^ -2139062144) & i5 + -16843009 | 0) break L10;
   i1 = i1 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009 | 0)); while (0);
  i2 = i4 & 255;
  while (1) {
   i5 = HEAP8[i1 >> 0] | 0;
   if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break; else i1 = i1 + 1 | 0;
  }
 } while (0);
 return i1 | 0;
}

function _latin1_toUtf8(i1, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = i8;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) return;
 while (1) {
  i2 = HEAPU8[i1 >> 0] | 0;
  i3 = HEAP32[i7 >> 2] | 0;
  if (!(i2 & 128)) {
   if ((i3 | 0) == (i8 | 0)) {
    i1 = 8;
    break;
   }
   HEAP32[i5 >> 2] = i1 + 1;
   i3 = HEAP8[i1 >> 0] | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i3;
   i1 = HEAP32[i5 >> 2] | 0;
  } else {
   if ((i4 - i3 | 0) < 2) {
    i1 = 8;
    break;
   }
   HEAP32[i7 >> 2] = i3 + 1;
   HEAP8[i3 >> 0] = i2 >>> 6 | 192;
   i1 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i2 & 63 | 128;
   i1 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
   HEAP32[i5 >> 2] = i1;
  }
  if ((i1 | 0) == (i6 | 0)) {
   i1 = 8;
   break;
  }
 }
 if ((i1 | 0) == 8) return;
}

function _ass_add_font(i1, i2, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i7 = i1 + 16 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (!((i2 | 0) != 0 & (i5 | 0) != 0 & (i6 | 0) != 0)) return;
 i4 = i1 + 12 | 0;
 do if (!(i8 & 31)) {
  i1 = _realloc(HEAP32[i4 >> 2] | 0, (i8 * 12 | 0) + 384 | 0) | 0;
  if (!i1) return; else {
   HEAP32[i4 >> 2] = i1;
   break;
  }
 } while (0);
 i2 = ___strdup(i2) | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + (i8 * 12 | 0) | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = _malloc(i6) | 0;
 HEAP32[i1 + (i8 * 12 | 0) + 4 >> 2] = i2;
 i3 = HEAP32[i3 >> 2] | 0;
 if ((i3 | 0) == 0 | (i2 | 0) == 0) {
  _free(i3);
  _free(HEAP32[(HEAP32[i4 >> 2] | 0) + (i8 * 12 | 0) + 4 >> 2] | 0);
  return;
 } else {
  _memcpy(i2 | 0, i5 | 0, i6 | 0) | 0;
  HEAP32[i1 + (i8 * 12 | 0) + 8 >> 2] = i6;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  return;
 }
}

function _tt_cmap6_validate(i3, i6) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i1 = i3 + 10 | 0;
 i5 = i6 + 160 | 0;
 if (i1 >>> 0 > (HEAP32[i5 >> 2] | 0) >>> 0) _ft_validator_error(i6, 8);
 i4 = (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i3 + 3 >> 0] | 0);
 i2 = (HEAPU8[i3 + 8 >> 0] | 0) << 8 | (HEAPU8[i3 + 9 >> 0] | 0);
 if ((i3 + i4 | 0) >>> 0 > (HEAP32[i5 >> 2] | 0) >>> 0) _ft_validator_error(i6, 8);
 if (i4 >>> 0 < ((i2 << 1) + 10 | 0) >>> 0) _ft_validator_error(i6, 8);
 if ((HEAP32[i6 + 164 >> 2] | 0) == 0 | (i2 | 0) == 0) return 0;
 i3 = i6 + 172 | 0;
 while (1) {
  if (((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) >>> 0 >= (HEAP32[i3 >> 2] | 0) >>> 0) {
   i1 = 9;
   break;
  }
  i2 = i2 + -1 | 0;
  if (!i2) {
   i1 = 11;
   break;
  } else i1 = i1 + 2 | 0;
 }
 if ((i1 | 0) == 9) _ft_validator_error(i6, 16); else if ((i1 | 0) == 11) return 0;
 return 0;
}

function _FT_Stream_ReadULongLE(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i8;
 HEAP32[i4 >> 2] = 0;
 i6 = i3 + 8 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 do if ((i2 + 3 | 0) >>> 0 < (HEAP32[i3 + 4 >> 2] | 0) >>> 0) {
  i5 = HEAP32[i3 + 20 >> 2] | 0;
  if (!i5) {
   i1 = (HEAP32[i3 >> 2] | 0) + i2 | 0;
   if (!i1) {
    i3 = 0;
    i1 = i2;
   } else i7 = 6;
  } else {
   if ((FUNCTION_TABLE_iiiii[i5 & 127](i3, i2, i1, 4) | 0) != 4) break;
   i2 = HEAP32[i6 >> 2] | 0;
   i7 = 6;
  }
  if ((i7 | 0) == 6) {
   i3 = (HEAPU8[i1 + 2 >> 0] | 0) << 16 | (HEAPU8[i1 + 3 >> 0] | 0) << 24 | (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0);
   i1 = i2;
  }
  HEAP32[i6 >> 2] = i1 + 4;
  i7 = i3;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 85;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _FT_GlyphLoader_Prepare(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP16[i1 + 58 >> 1] = 0;
 HEAP16[i1 + 56 >> 1] = 0;
 HEAP32[i1 + 84 >> 2] = 0;
 i2 = HEAP16[i1 + 22 >> 1] | 0;
 HEAP32[i1 + 60 >> 2] = (HEAP32[i1 + 24 >> 2] | 0) + (i2 << 3);
 HEAP32[i1 + 64 >> 2] = (HEAP32[i1 + 28 >> 2] | 0) + i2;
 HEAP32[i1 + 68 >> 2] = (HEAP32[i1 + 32 >> 2] | 0) + (HEAP16[i1 + 20 >> 1] << 1);
 if (!(HEAP8[i1 + 16 >> 0] | 0)) {
  i2 = i1 + 52 | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i3 = i1 + 48 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i3 = i2 + (i3 << 5) | 0;
  i2 = i1 + 88 | 0;
  HEAP32[i2 >> 2] = i3;
  return;
 }
 HEAP32[i1 + 76 >> 2] = (HEAP32[i1 + 40 >> 2] | 0) + (i2 << 3);
 HEAP32[i1 + 80 >> 2] = (HEAP32[i1 + 44 >> 2] | 0) + (i2 << 3);
 i3 = i1 + 52 | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 48 | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 i2 = i3 + (i2 << 5) | 0;
 i3 = i1 + 88 | 0;
 HEAP32[i3 >> 2] = i2;
 return;
}

function _FT_Stream_ReadULong(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i8;
 HEAP32[i4 >> 2] = 0;
 i6 = i3 + 8 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 do if ((i2 + 3 | 0) >>> 0 < (HEAP32[i3 + 4 >> 2] | 0) >>> 0) {
  i5 = HEAP32[i3 + 20 >> 2] | 0;
  if (!i5) {
   i1 = (HEAP32[i3 >> 2] | 0) + i2 | 0;
   if (!i1) {
    i3 = 0;
    i1 = i2;
   } else i7 = 6;
  } else {
   if ((FUNCTION_TABLE_iiiii[i5 & 127](i3, i2, i1, 4) | 0) != 4) break;
   i2 = HEAP32[i6 >> 2] | 0;
   i7 = 6;
  }
  if ((i7 | 0) == 6) {
   i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
   i1 = i2;
  }
  HEAP32[i6 >> 2] = i1 + 4;
  i7 = i3;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 85;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _bdf_cmap_char_next(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = HEAP32[i1 + 20 >> 2] | 0;
 i2 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 L1 : do if (!i6) {
  i1 = 0;
  i9 = 4;
 } else {
  i1 = 0;
  i4 = i6;
  while (1) {
   i5 = (i1 + i4 | 0) >>> 1;
   i3 = HEAP32[i8 + (i5 << 3) >> 2] | 0;
   if ((i2 | 0) == (i3 | 0)) {
    i1 = i5;
    break L1;
   }
   i3 = i2 >>> 0 < i3 >>> 0;
   i4 = i3 ? i5 : i4;
   i1 = i3 ? i1 : i5 + 1 | 0;
   if (i1 >>> 0 >= i4 >>> 0) {
    i9 = 4;
    break;
   }
  }
 } while (0);
 do if ((i9 | 0) == 4) if (i1 >>> 0 < i6 >>> 0) {
  i2 = HEAP32[i8 + (i1 << 3) >> 2] | 0;
  break;
 } else {
  i8 = 0;
  i9 = 0;
  HEAP32[i7 >> 2] = i8;
  return i9 | 0;
 } while (0);
 i6 = i2;
 i9 = (HEAPU16[i8 + (i1 << 3) + 4 >> 1] | 0) + 1 & 65535;
 HEAP32[i7 >> 2] = i6;
 return i9 | 0;
}

function _ass_utf8_get_char(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i8 = HEAPU8[i2 >> 0] | 0;
 L1 : do if (!(i8 & 128)) i9 = 4; else {
  i3 = 128;
  i1 = -1;
  while (1) {
   i3 = i3 >>> 1;
   i6 = i1 + 1 | 0;
   if (!(i3 & i8)) break; else i1 = i6;
  }
  if (i1 >>> 0 > 3) i9 = 4; else {
   i1 = i2 + 1 | 0;
   i2 = HEAPU8[i1 >> 0] | 0;
   if ((i2 & 192 | 0) == 128) {
    i4 = i3 + 255 & i8;
    i5 = i1;
    i3 = i6;
    do {
     if ((i3 | 0) < 1) break L1;
     i3 = i3 + -1 | 0;
     i4 = i2 & 63 | i4 << 6;
     i5 = i5 + 1 | 0;
     i2 = HEAPU8[i5 >> 0] | 0;
    } while ((i2 & 192 | 0) == 128);
    if (!i3) {
     i9 = i4;
     i8 = i5;
     HEAP32[i7 >> 2] = i8;
     return i9 | 0;
    }
   }
  }
 } while (0);
 if ((i9 | 0) == 4) i1 = i2 + 1 | 0;
 i9 = i8;
 i8 = i1;
 HEAP32[i7 >> 2] = i8;
 return i9 | 0;
}

function _readdir(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i7;
 i5 = i4 + 8 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i3 = i4 + 12 | 0;
 L1 : do if ((i1 | 0) < (HEAP32[i3 >> 2] | 0)) i6 = 6; else {
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i2 + 4 >> 2] = i4 + 24;
  HEAP32[i2 + 8 >> 2] = 2048;
  i1 = ___syscall220(220, i2 | 0) | 0;
  if ((i1 | 0) >= 1) {
   HEAP32[i3 >> 2] = i1;
   HEAP32[i5 >> 2] = 0;
   i1 = 0;
   i6 = 6;
   break;
  }
  switch (i1 | 0) {
  case 0:
  case -2:
   {
    i1 = 0;
    break L1;
   }
  default:
   {}
  }
  i5 = ___errno_location() | 0;
  HEAP32[i5 >> 2] = 0 - i1;
  i1 = 0;
 } while (0);
 if ((i6 | 0) == 6) {
  i6 = i4 + 24 + i1 | 0;
  HEAP32[i5 >> 2] = (HEAPU16[i6 + 8 >> 1] | 0) + i1;
  HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  i1 = i6;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _pcf_cmap_char_next(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = HEAP32[i1 + 20 >> 2] | 0;
 i2 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 L1 : do if (!i6) {
  i1 = 0;
  i9 = 4;
 } else {
  i1 = 0;
  i4 = i6;
  while (1) {
   i5 = (i1 + i4 | 0) >>> 1;
   i3 = HEAP32[i8 + (i5 << 3) >> 2] | 0;
   if ((i2 | 0) == (i3 | 0)) {
    i1 = i5;
    break L1;
   }
   i3 = i2 >>> 0 < i3 >>> 0;
   i4 = i3 ? i5 : i4;
   i1 = i3 ? i1 : i5 + 1 | 0;
   if (i1 >>> 0 >= i4 >>> 0) {
    i9 = 4;
    break;
   }
  }
 } while (0);
 do if ((i9 | 0) == 4) if (i1 >>> 0 < i6 >>> 0) {
  i2 = HEAP32[i8 + (i1 << 3) >> 2] | 0;
  break;
 } else {
  i8 = 0;
  i9 = 0;
  HEAP32[i7 >> 2] = i8;
  return i9 | 0;
 } while (0);
 i6 = i2;
 i9 = (HEAPU16[i8 + (i1 << 3) + 4 >> 1] | 0) + 1 | 0;
 HEAP32[i7 >> 2] = i6;
 return i9 | 0;
}

function _ft_bitmap_glyph_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 if ((HEAP32[i2 + 72 >> 2] | 0) != 1651078259) {
  i4 = 18;
  return i4 | 0;
 }
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 100 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 104 >> 2];
 i3 = i2 + 156 | 0;
 i1 = i1 + 28 | 0;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] & 1)) {
  _FT_Bitmap_Init(i1);
  i4 = _FT_Bitmap_Copy(i4, i2 + 76 | 0, i1) | 0;
  return i4 | 0;
 } else {
  i4 = i2 + 76 | 0;
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
  HEAP32[i1 + 20 >> 2] = HEAP32[i4 + 20 >> 2];
  i4 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -2;
  i4 = 0;
  return i4 | 0;
 }
 return 0;
}

function _af_latin_hints_init(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = HEAP32[i5 + 4 >> 2] | 0;
 HEAP32[i4 + 2988 >> 2] = i5;
 i1 = HEAP32[i5 + 28 >> 2] | 0;
 i6 = i4 + 2980 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 44 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 48 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 1616 >> 2];
 HEAP32[i4 + 16 >> 2] = HEAP32[i5 + 1620 >> 2];
 i8 = HEAP32[i5 + 24 >> 2] | 0;
 i9 = (i8 | 0) == 2;
 i3 = (i8 | 1 | 0) == 3 & 1;
 i3 = i9 | (i8 | 0) == 4 ? i3 | 2 : i3;
 i8 = (i8 | 0) == 1;
 i3 = i8 ? i3 : i3 | 4;
 i3 = i9 ? i3 | 8 : i3;
 if (i8) i7 = 3; else if (HEAP32[i2 + 12 >> 2] & 1) i7 = 3;
 if ((i7 | 0) == 3) i1 = i1 | 1;
 HEAP32[i6 >> 2] = (HEAP8[(HEAP32[(HEAP32[i5 + 36 >> 2] | 0) + 212 >> 2] | 0) + 20 >> 0] | 0) == 0 ? i1 | 8 : i1;
 HEAP32[i4 + 2984 >> 2] = i3;
 return 0;
}

function _initUpdatePosition(i2, i1, i4, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i3 = 0;
 if (i1 >>> 0 >= i4 >>> 0) return;
 i3 = i5 + 4 | 0;
 do {
  switch (HEAP8[27448 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
  case 5:
   {
    i1 = i1 + 2 | 0;
    break;
   }
  case 6:
   {
    i1 = i1 + 3 | 0;
    break;
   }
  case 7:
   {
    i1 = i1 + 4 | 0;
    break;
   }
  case 10:
   {
    HEAP32[i3 >> 2] = -1;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
    i1 = i1 + 1 | 0;
    break;
   }
  case 9:
   {
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
    i2 = i1 + 1 | 0;
    if ((i2 | 0) == (i4 | 0)) i1 = i4; else i1 = (HEAP8[27448 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0) == 10 ? i1 + 2 | 0 : i2;
    HEAP32[i3 >> 2] = -1;
    break;
   }
  default:
   i1 = i1 + 1 | 0;
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 } while (i1 >>> 0 < i4 >>> 0);
 return;
}

function _ass_fill_solid_tile16_c(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = ((i3 | 0) != 0) << 31 >> 31;
 _memset(i1 | 0, i3 | 0, 16) | 0;
 _memset(i1 + i2 | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 << 1) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 * 3 | 0) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 << 2) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 * 5 | 0) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 * 6 | 0) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 * 7 | 0) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 << 3) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 * 9 | 0) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 * 10 | 0) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 * 11 | 0) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 * 12 | 0) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 * 13 | 0) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 * 14 | 0) | 0, i3 | 0, 16) | 0;
 _memset(i1 + (i2 * 15 | 0) | 0, i3 | 0, 16) | 0;
 return;
}

function _FcLangSetPromote(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i4 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 24 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 0;
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = 8;
 HEAP32[i3 >> 2] = 0;
 if (!i1) return i3 | 0;
 i2 = _FcLangSetIndex(i1) | 0;
 if ((i2 | 0) <= 0) {
  i2 = i3 + 40 | 0;
  HEAP32[i3 >> 2] = i2;
  HEAP32[i3 + 44 >> 2] = 1;
  HEAP32[i3 + 48 >> 2] = 1;
  i4 = i3 + 56 | 0;
  HEAP32[i3 + 52 >> 2] = i4;
  HEAP32[i2 >> 2] = 1;
  HEAP32[i4 >> 2] = i1;
  return i3 | 0;
 }
 i2 = HEAPU8[63754 + i2 >> 0] | 0;
 i5 = i2 >>> 5;
 i1 = i3 + 8 + (i5 << 2) | 0;
 if (i5 >>> 0 >= (HEAP32[i4 >> 2] | 0) >>> 0) return i3 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << (i2 & 31);
 return i3 | 0;
}

function _copy_bitmap(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = HEAP32[i3 + 8 >> 2] | 0;
 i5 = i3 + 12 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = _malloc(24) | 0;
 if (!i7) {
  i7 = 0;
  return i7 | 0;
 }
 i1 = 1 << HEAP32[i1 >> 2];
 i2 = 0 - i1 | 0;
 i2 = i4 >>> 0 > i2 >>> 0 ? i4 : i4 + -1 + i1 & i2;
 if (i2 >>> 0 <= (2147483615 / (((i6 | 0) > 1 ? i6 : 1) >>> 0) | 0) >>> 0) {
  i1 = _ass_aligned_alloc(i1, (Math_imul(i2, i6) | 0) + 32 | 0, 0) | 0;
  if (i1 | 0) {
   HEAP32[i7 + 8 >> 2] = i4;
   HEAP32[i7 + 12 >> 2] = i6;
   HEAP32[i7 + 16 >> 2] = i2;
   HEAP32[i7 + 20 >> 2] = i1;
   HEAP32[i7 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   _memcpy(i1 | 0, HEAP32[i3 + 20 >> 2] | 0, Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[i3 + 16 >> 2] | 0) | 0) | 0;
   return i7 | 0;
  }
 }
 _free(i7);
 i7 = 0;
 return i7 | 0;
}

function ___stpcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = i2;
 L1 : do if (!((i3 ^ i1) & 3)) {
  if (i3 & 3) do {
   i3 = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 >> 0] = i3;
   if (!(i3 << 24 >> 24)) break L1;
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
  } while ((i2 & 3 | 0) != 0);
  i3 = HEAP32[i2 >> 2] | 0;
  if (!((i3 & -2139062144 ^ -2139062144) & i3 + -16843009)) {
   i4 = i1;
   while (1) {
    i2 = i2 + 4 | 0;
    i1 = i4 + 4 | 0;
    HEAP32[i4 >> 2] = i3;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 & -2139062144 ^ -2139062144) & i3 + -16843009 | 0) break; else i4 = i1;
   }
  }
  i4 = 8;
 } else i4 = 8; while (0);
 if ((i4 | 0) == 8) {
  i4 = HEAP8[i2 >> 0] | 0;
  HEAP8[i1 >> 0] = i4;
  if (i4 << 24 >> 24) do {
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
   i4 = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 >> 0] = i4;
  } while (i4 << 24 >> 24 != 0);
 }
 return i1 | 0;
}

function _ps_parser_to_fixed(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = HEAP32[i3 + 8 >> 2] | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = i2;
 L1 : do if (i1 >>> 0 < i5 >>> 0) while (1) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 0:
  case 12:
  case 9:
  case 10:
  case 13:
  case 32:
   {
    i1 = i2;
    break;
   }
  case 37:
   {
    i2 = 37;
    L5 : while (1) {
     switch (i2 << 24 >> 24) {
     case 10:
     case 13:
      break L5;
     default:
      {}
     }
     i2 = i1 + 1 | 0;
     if (i2 >>> 0 >= i5 >>> 0) {
      i1 = i2;
      break;
     }
     i1 = i2;
     i2 = HEAP8[i2 >> 0] | 0;
    }
    break;
   }
  default:
   {
    i1 = i2;
    break L1;
   }
  }
  i1 = i1 + 1 | 0;
  i2 = i1;
  if (i1 >>> 0 >= i5 >>> 0) {
   i1 = i2;
   break L1;
  }
 } else i1 = i2; while (0);
 HEAP32[i3 >> 2] = i1;
 return _PS_Conv_ToFixed(i3, i5, i4) | 0;
}

function _FcCacheDirsValid(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i9 + 8 | 0;
 i3 = i9;
 i8 = _FcStrSetCreate() | 0;
 i2 = _FcConfigGetSysRoot(i4) | 0;
 if (!i8) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 i1 = (HEAP32[i5 + 12 >> 2] | 0) + i5 | 0;
 if (!i2) i6 = ___strdup(i1) | 0; else {
  HEAP32[i3 >> 2] = i1;
  HEAP32[i3 + 4 >> 2] = 0;
  i6 = _FcStrBuildFilename(i2, i3) | 0;
 }
 if (!(_FcDirScanOnly(i8, i6, i4) | 0)) i1 = 0; else {
  i2 = HEAP32[i5 + 20 >> 2] | 0;
  i3 = HEAP32[i8 + 4 >> 2] | 0;
  i1 = (i2 | 0) == (i3 | 0) & 1;
  if (HEAP32[91917] & 16) {
   HEAP32[i7 >> 2] = i6;
   HEAP32[i7 + 4 >> 2] = i2;
   HEAP32[i7 + 8 >> 2] = i3;
   _printf(351995, i7) | 0;
  }
 }
 _FcStrSetDestroy(i8);
 _FcStrFree(i6);
 i8 = i1;
 STACKTOP = i9;
 return i8 | 0;
}

function _FcPatternPrint(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6 + 8 | 0;
 i1 = i6;
 if (!i4) {
  _puts(347019) | 0;
  STACKTOP = i6;
  return;
 }
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 4 >> 2] = i3;
 _printf(347032, i1) | 0;
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  i2 = i4;
  i3 = i4 + 8 | 0;
  i1 = 0;
  do {
   i9 = (HEAP32[i3 >> 2] | 0) + i2 | 0;
   i7 = i9 + (i1 << 3) | 0;
   i8 = _FcObjectName(HEAP32[i7 >> 2] | 0) | 0;
   HEAP32[i5 >> 2] = i8;
   _printf(347063, i5) | 0;
   i9 = HEAP32[i9 + (i1 << 3) + 4 >> 2] | 0;
   i8 = i9;
   _FcValueListPrint((i8 & 1 | 0) == 0 ? i9 : (i8 & -2) + i7 | 0);
   _putchar(10) | 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i4 >> 2] | 0));
 }
 _putchar(10) | 0;
 STACKTOP = i6;
 return;
}

function _FcRangeCompare(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 switch (i1 | 0) {
 case 25:
 case 24:
 case 22:
  {
   if ((i2 | 0) != 0 & (i3 | 0) != 0) if (!(+HEAPF64[i2 >> 3] >= +HEAPF64[i3 >> 3])) i1 = 0; else i1 = +HEAPF64[i2 + 8 >> 3] <= +HEAPF64[i3 + 8 >> 3]; else i1 = 0;
   break;
  }
 case 26:
 case 23:
  {
   if ((i2 | 0) != 0 & (i3 | 0) != 0) if (!(+HEAPF64[i2 >> 3] >= +HEAPF64[i3 >> 3])) i1 = 1; else i1 = !(+HEAPF64[i2 + 8 >> 3] <= +HEAPF64[i3 + 8 >> 3]); else i1 = 1;
   break;
  }
 case 27:
  {
   i1 = +HEAPF64[i2 >> 3] < +HEAPF64[i3 >> 3];
   break;
  }
 case 28:
  {
   i1 = +HEAPF64[i2 >> 3] <= +HEAPF64[i3 >> 3];
   break;
  }
 case 29:
  {
   i1 = +HEAPF64[i2 + 8 >> 3] > +HEAPF64[i3 + 8 >> 3];
   break;
  }
 case 30:
  {
   i1 = +HEAPF64[i2 + 8 >> 3] >= +HEAPF64[i3 + 8 >> 3];
   break;
  }
 default:
  i1 = 0;
 }
 return i1 & 1 | 0;
}

function _prolog0(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 switch (i2 | 0) {
 case 15:
  {
   HEAP32[i1 >> 2] = 39;
   i1 = 0;
   break;
  }
 case 12:
  {
   HEAP32[i1 >> 2] = 39;
   i1 = 1;
   break;
  }
 case 11:
  {
   HEAP32[i1 >> 2] = 39;
   i1 = 55;
   break;
  }
 case 13:
  {
   HEAP32[i1 >> 2] = 39;
   i1 = 56;
   break;
  }
 case 14:
  {
   i1 = 0;
   break;
  }
 case 16:
  {
   if (!(FUNCTION_TABLE_iiiii[HEAP32[i5 + 28 >> 2] & 127](i5, i3 + (HEAP32[i5 + 68 >> 2] << 1) | 0, i4, 345274) | 0)) i6 = 10; else {
    HEAP32[i1 >> 2] = 40;
    i1 = 3;
   }
   break;
  }
 case 29:
  {
   HEAP32[i1 >> 2] = 41;
   i1 = 2;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else i6 = 10;
 }
 if ((i6 | 0) == 10) {
  HEAP32[i1 >> 2] = 41;
  i1 = -1;
 }
 return i1 | 0;
}

function _ft_module_get_service(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!i5) {
  i6 = 0;
  return i6 | 0;
 }
 i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0;
 if (i1 | 0) {
  i1 = FUNCTION_TABLE_iii[i1 & 255](i5, i6) | 0;
  if (i1 | 0) {
   i6 = i1;
   return i6 | 0;
  }
 }
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 i4 = i1 + 20 + (i3 << 2) | 0;
 if ((i3 | 0) <= 0) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = i1 + 20 | 0;
 while (1) {
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 | 0) != (i5 | 0)) {
   i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] | 0;
   if (i2 | 0) {
    i1 = FUNCTION_TABLE_iii[i2 & 255](i1, i6) | 0;
    if (i1 | 0) {
     i2 = 10;
     break;
    }
   }
  }
  i3 = i3 + 4 | 0;
  if (i3 >>> 0 >= i4 >>> 0) {
   i1 = 0;
   i2 = 10;
   break;
  }
 }
 if ((i2 | 0) == 10) return i1 | 0;
 return 0;
}

function _FT_Stream_ReadUOffset(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i8;
 HEAP32[i4 >> 2] = 0;
 i6 = i3 + 8 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 do if ((i2 + 2 | 0) >>> 0 < (HEAP32[i3 + 4 >> 2] | 0) >>> 0) {
  i5 = HEAP32[i3 + 20 >> 2] | 0;
  if (!i5) {
   i1 = (HEAP32[i3 >> 2] | 0) + i2 | 0;
   if (!i1) {
    i3 = 0;
    i1 = i2;
   } else i7 = 6;
  } else {
   if ((FUNCTION_TABLE_iiiii[i5 & 127](i3, i2, i1, 3) | 0) != 3) break;
   i2 = HEAP32[i6 >> 2] | 0;
   i7 = 6;
  }
  if ((i7 | 0) == 6) {
   i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) << 16 | (HEAPU8[i1 + 2 >> 0] | 0);
   i1 = i2;
  }
  HEAP32[i6 >> 2] = i1 + 3;
  i7 = i3;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 85;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _ass_cache_dec_ref(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 if (!i4) return;
 i5 = i4 + -32 | 0;
 i6 = HEAP32[i4 + -8 >> 2] | 0;
 if (!i6) ___assert_fail(354746, 354776, 466, 354788);
 i1 = i4 + -4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) ___assert_fail(354746, 354776, 466, 354788);
 i3 = i2 + -1 | 0;
 HEAP32[i1 >> 2] = i3;
 if (i3 | 0) return;
 i2 = HEAP32[i5 >> 2] | 0;
 if (i2 | 0) {
  i3 = HEAP32[i4 + -24 >> 2] | 0;
  i1 = i4 + -20 | 0;
  if (i3 | 0) HEAP32[i3 + 12 >> 2] = HEAP32[i1 >> 2];
  HEAP32[HEAP32[i1 >> 2] >> 2] = i3;
  i3 = i2 + 32 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
  i3 = i2 + 20 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - i6;
 }
 i6 = HEAP32[i4 + -28 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[i6 + 12 >> 2] & 63](i4 + ((HEAP32[i6 + 20 >> 2] | 0) + 7 & -8) | 0, i4);
 _free(i5);
 return;
}

function _FcObjectValidType(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = i2 + -1 | 0;
 if (i1 >>> 0 < 48) i1 = 64244 + (i1 << 3) | 0; else i1 = _FcObjectLookupOtherTypeById(i2) | 0;
 L5 : do if (!i1) i1 = 1; else {
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  switch (i1 | 0) {
  case -1:
   {
    i1 = 1;
    break L5;
   }
  case 1:
  case 2:
   {
    if ((i3 + -1 | 0) >>> 0 < 2) {
     i1 = 1;
     break L5;
    }
    break;
   }
  case 8:
   {
    switch (i3 | 0) {
    case 3:
    case 8:
     {
      i1 = 1;
      break L5;
     }
    default:
     {}
    }
    break;
   }
  case 9:
   {
    switch (i3 | 0) {
    case 1:
    case 2:
    case 9:
     {
      i1 = 1;
      break L5;
     }
    default:
     {}
    }
    break;
   }
  default:
   if ((i1 | 0) == (i3 | 0)) {
    i1 = 1;
    break L5;
   }
  }
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function _check_type1_format(i5, i6, i7) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i8;
 i1 = _FT_Stream_Seek(i5, 0) | 0;
 L1 : do if (!i1) {
  i3 = _FT_Stream_ReadUShort(i5, i2) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  do if (!i1) {
   if ((i3 + 32767 & 65535) < 2) {
    _FT_Stream_ReadULongLE(i5, i2) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (i1 | 0) break;
    if (i3 << 16 >> 16 != -32767) i4 = 8;
   } else i4 = 8;
   if ((i4 | 0) == 8) {
    i1 = _FT_Stream_Seek(i5, 0) | 0;
    if (i1 | 0) break L1;
   }
   i1 = _FT_Stream_EnterFrame(i5, i7) | 0;
   if (i1 | 0) break L1;
   i1 = (_memcmp(HEAP32[i5 + 32 >> 2] | 0, i6, i7) | 0) == 0;
   _FT_Stream_ExitFrame(i5);
   i1 = i1 ? 0 : 2;
   break L1;
  } while (0);
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _raccess_guess_darwin_hfsplus(i2, i1, i5, i6, i7) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0;
 i4 = _strlen(i5) | 0;
 i3 = i4 + 6 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 do if ((i4 | 0) > -6) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 255](i1, i3) | 0;
  if (!i1) {
   i7 = 64;
   return i7 | 0;
  } else {
   _memset(i1 | 0, 0, i3 | 0) | 0;
   break;
  }
 } else if (!i3) i1 = 0; else {
  i7 = 6;
  return i7 | 0;
 } while (0);
 _memcpy(i1 | 0, i5 | 0, i4 | 0) | 0;
 i5 = i1 + i4 | 0;
 HEAP8[i5 >> 0] = HEAP8[280841] | 0;
 HEAP8[i5 + 1 >> 0] = HEAP8[280842] | 0;
 HEAP8[i5 + 2 >> 0] = HEAP8[280843] | 0;
 HEAP8[i5 + 3 >> 0] = HEAP8[280844] | 0;
 HEAP8[i5 + 4 >> 0] = HEAP8[280845] | 0;
 HEAP8[i5 + 5 >> 0] = HEAP8[280846] | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 i7 = 0;
 return i7 | 0;
}

function _fputc(i4, i7) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i5 = i4 & 255;
 i1 = i4 & 255;
 if ((HEAP32[i7 + 76 >> 2] | 0) < 0) i6 = 3; else if (!(___lockfile(i7) | 0)) i6 = 3; else {
  if ((i1 | 0) == (HEAP8[i7 + 75 >> 0] | 0)) i6 = 10; else {
   i2 = i7 + 20 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i7 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i2 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i5;
   } else i6 = 10;
  }
  if ((i6 | 0) == 10) i1 = ___overflow(i7, i4) | 0;
  ___unlockfile(i7);
 }
 do if ((i6 | 0) == 3) {
  if ((i1 | 0) != (HEAP8[i7 + 75 >> 0] | 0)) {
   i2 = i7 + 20 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i7 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i2 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i5;
    break;
   }
  }
  i1 = ___overflow(i7, i4) | 0;
 } while (0);
 return i1 | 0;
}

function _FcGetPrgname() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 i3 = i5;
 i1 = HEAP32[91940] | 0;
 L1 : do if (!i1) {
  while (1) {
   i1 = _readlink(349336, i3, 4096) | 0;
   if ((i1 | 0) == -1) i4 = 5; else {
    HEAP8[i3 + i1 >> 0] = 0;
    i1 = _strrchr(i3, 47) | 0;
    i1 = ___strdup((i1 | 0) == 0 ? i3 : i1 + 1 | 0) | 0;
    if (!i1) i4 = 5;
   }
   if ((i4 | 0) == 5) {
    i4 = 0;
    i1 = ___strdup(369704) | 0;
   }
   i2 = HEAP32[91940] | 0;
   if (!i2) HEAP32[91940] = i1;
   if (!i2) break;
   _free(i1);
   i1 = HEAP32[91940] | 0;
   if (i1 | 0) {
    i4 = 9;
    break L1;
   }
  }
  if (!i1) i1 = 0; else i4 = 9;
 } else i4 = 9; while (0);
 if ((i4 | 0) == 9) if (!(HEAP8[i1 >> 0] | 0)) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i4 = i1;
 STACKTOP = i5;
 return i4 | 0;
}

function _FT_Outline_Done(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) {
  i4 = 33;
  return i4 | 0;
 }
 i3 = HEAP32[i1 >> 2] | 0;
 if (!i4) {
  i4 = 20;
  return i4 | 0;
 }
 if (!i3) {
  i4 = 6;
  return i4 | 0;
 }
 if (HEAP32[i4 + 16 >> 2] & 1 | 0) {
  i1 = i4 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
  HEAP32[i1 >> 2] = 0;
  i1 = i4 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
  HEAP32[i1 >> 2] = 0;
  i1 = i4 + 12 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
  HEAP32[i1 >> 2] = 0;
 };
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 i4 = 0;
 return i4 | 0;
}

function _cos(d1) {
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & 2147483647;
 L1 : do if (i3 >>> 0 < 1072243196) if (i3 >>> 0 < 1044816030) d1 = 1.0; else d1 = +___cos(d1, 0.0); else {
  if (i3 >>> 0 > 2146435071) {
   d1 = d1 - d1;
   break;
  }
  switch ((___rem_pio2(d1, i2) | 0) & 3) {
  case 0:
   {
    d1 = +___cos(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3]);
    break L1;
   }
  case 1:
   {
    d1 = -+___sin(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3], 1);
    break L1;
   }
  case 2:
   {
    d1 = -+___cos(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3]);
    break L1;
   }
  default:
   {
    d1 = +___sin(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3], 1);
    break L1;
   }
  }
 } while (0);
 STACKTOP = i4;
 return +d1;
}

function _lookup_style(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 while (1) if ((HEAP8[i1 >> 0] | 0) == 42) i1 = i1 + 1 | 0; else break;
 i2 = (_ass_strcasecmp(i1, 357055) | 0) == 0;
 i2 = i2 ? 357055 : i1;
 i4 = HEAP32[i5 + 16 >> 2] | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 while (1) {
  i1 = i3 + -1 | 0;
  if ((i3 | 0) <= 0) break;
  if (!(_strcmp(HEAP32[i4 + (i1 * 144 | 0) >> 2] | 0, i2) | 0)) {
   i7 = 7;
   break;
  } else i3 = i1;
 }
 if ((i7 | 0) == 7) {
  STACKTOP = i8;
  return i1 | 0;
 }
 i7 = HEAP32[i5 + 76 >> 2] | 0;
 i3 = HEAP32[i5 + 84 >> 2] | 0;
 i4 = HEAP32[i4 + (i7 * 144 | 0) >> 2] | 0;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i6 + 4 >> 2] = i2;
 HEAP32[i6 + 8 >> 2] = i4;
 _ass_msg(i3, 2, 357063, i6);
 STACKTOP = i8;
 return i7 | 0;
}

function _FcStrContainsIgnoreBlanksAndCase(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i9 + 16 | 0;
 i6 = i9;
 if (!(HEAP8[i1 >> 0] | 0)) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 i7 = i5 + 4 | 0;
 i8 = i6 + 4 | 0;
 while (1) {
  HEAP32[i7 >> 2] = i1;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i8 >> 2] = i4;
  HEAP32[i6 >> 2] = 0;
  do {
   i10 = _FcStrCaseWalkerNext(i5, 347946) | 0;
   i3 = _FcStrCaseWalkerNext(i6, 347946) | 0;
   i2 = i10 << 24 >> 24 == i3 << 24 >> 24;
  } while (i10 << 24 >> 24 != 0 & i2);
  if (i2 | i3 << 24 >> 24 == 0) {
   i2 = 7;
   break;
  }
  i1 = i1 + 1 | 0;
  if (!(HEAP8[i1 >> 0] | 0)) {
   i1 = 0;
   i2 = 7;
   break;
  }
 }
 if ((i2 | 0) == 7) {
  STACKTOP = i9;
  return i1 | 0;
 }
 return 0;
}

function _t1_builder_add_point1(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[i2 + 12 >> 2] | 0;
 if (((HEAP16[i1 + 22 >> 1] | 0) + 1 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
  i1 = _FT_GlyphLoader_CheckPoints(i1, 1, 0) | 0;
  if (i1 | 0) {
   i4 = i1;
   return i4 | 0;
  }
 }
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 if (!(HEAP8[i2 + 68 >> 0] | 0)) i1 = i1 + 2 | 0; else {
  i6 = HEAP32[i1 + 4 >> 2] | 0;
  i2 = i1 + 2 | 0;
  i5 = HEAP16[i2 >> 1] | 0;
  i1 = (HEAP32[i1 + 8 >> 2] | 0) + i5 | 0;
  i3 = (_FT_RoundFix(i3) | 0) >> 16;
  HEAP32[i6 + (i5 << 3) >> 2] = i3;
  i4 = (_FT_RoundFix(i4) | 0) >> 16;
  HEAP32[i6 + (i5 << 3) + 4 >> 2] = i4;
  HEAP8[i1 >> 0] = 1;
  i1 = i2;
 }
 HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
 i6 = 0;
 return i6 | 0;
}

function _FcLangSetUnion(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = _FcLangSetCopy(i1) | 0;
 i1 = _FcLangSetGetLangs(i2) | 0;
 i3 = _FcStrListCreate(i1) | 0;
 _FcStrSetDestroy(i1);
 i1 = _FcStrListNext(i3) | 0;
 if (!i1) {
  _FcStrListDone(i3);
  return i5 | 0;
 }
 i4 = i5 + 4 | 0;
 do {
  i2 = _FcLangSetIndex(i1) | 0;
  do if ((i2 | 0) > -1) {
   i1 = HEAPU8[63754 + i2 >> 0] | 0;
   i6 = i1 >>> 5;
   i2 = i5 + 8 + (i6 << 2) | 0;
   if (i6 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0) HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1 << (i1 & 31);
  } else {
   i2 = HEAP32[i5 >> 2] | 0;
   if (!i2) {
    i2 = _FcStrSetCreate() | 0;
    HEAP32[i5 >> 2] = i2;
    if (!i2) break;
   }
   _FcStrSetAdd(i2, i1) | 0;
  } while (0);
  i1 = _FcStrListNext(i3) | 0;
 } while ((i1 | 0) != 0);
 _FcStrListDone(i3);
 return i5 | 0;
}

function _FT_Stream_ReadUShortLE(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i8;
 HEAP32[i4 >> 2] = 0;
 i6 = i3 + 8 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 do if ((i2 + 1 | 0) >>> 0 < (HEAP32[i3 + 4 >> 2] | 0) >>> 0) {
  i5 = HEAP32[i3 + 20 >> 2] | 0;
  if (!i5) {
   i1 = (HEAP32[i3 >> 2] | 0) + i2 | 0;
   if (!i1) {
    i3 = 0;
    i1 = i2;
   } else i7 = 6;
  } else {
   if ((FUNCTION_TABLE_iiiii[i5 & 127](i3, i2, i1, 2) | 0) != 2) break;
   i2 = HEAP32[i6 >> 2] | 0;
   i7 = 6;
  }
  if ((i7 | 0) == 6) {
   i3 = ((HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0)) & 65535;
   i1 = i2;
  }
  HEAP32[i6 >> 2] = i1 + 2;
  i7 = i3;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 85;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _sin(d1) {
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & 2147483647;
 L1 : do if (i3 >>> 0 < 1072243196) {
  if (i3 >>> 0 >= 1045430272) d1 = +___sin(d1, 0.0, 0);
 } else {
  if (i3 >>> 0 > 2146435071) {
   d1 = d1 - d1;
   break;
  }
  switch ((___rem_pio2(d1, i2) | 0) & 3) {
  case 0:
   {
    d1 = +___sin(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3], 1);
    break L1;
   }
  case 1:
   {
    d1 = +___cos(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3]);
    break L1;
   }
  case 2:
   {
    d1 = -+___sin(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3], 1);
    break L1;
   }
  default:
   {
    d1 = -+___cos(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3]);
    break L1;
   }
  }
 } while (0);
 STACKTOP = i4;
 return +d1;
}

function _FT_Stream_ReadUShort(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i8;
 HEAP32[i4 >> 2] = 0;
 i6 = i3 + 8 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 do if ((i2 + 1 | 0) >>> 0 < (HEAP32[i3 + 4 >> 2] | 0) >>> 0) {
  i5 = HEAP32[i3 + 20 >> 2] | 0;
  if (!i5) {
   i1 = (HEAP32[i3 >> 2] | 0) + i2 | 0;
   if (!i1) {
    i3 = 0;
    i1 = i2;
   } else i7 = 6;
  } else {
   if ((FUNCTION_TABLE_iiiii[i5 & 127](i3, i2, i1, 2) | 0) != 2) break;
   i2 = HEAP32[i6 >> 2] | 0;
   i7 = 6;
  }
  if ((i7 | 0) == 6) {
   i3 = ((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) & 65535;
   i1 = i2;
  }
  HEAP32[i6 >> 2] = i1 + 2;
  i7 = i3;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 85;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _fopen(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i7 + 32 | 0;
 i5 = i7 + 16 | 0;
 i2 = i7;
 if (!(_memchr(367596, HEAP8[i3 >> 0] | 0, 4) | 0)) {
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 22;
  i1 = 0;
 } else {
  i4 = ___fmodeflags(i3) | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i2 + 4 >> 2] = i4 | 32768;
  HEAP32[i2 + 8 >> 2] = 438;
  i2 = ___syscall_ret(___syscall5(5, i2 | 0) | 0) | 0;
  if ((i2 | 0) < 0) i1 = 0; else {
   if (i4 & 524288 | 0) {
    HEAP32[i5 >> 2] = i2;
    HEAP32[i5 + 4 >> 2] = 2;
    HEAP32[i5 + 8 >> 2] = 1;
    ___syscall221(221, i5 | 0) | 0;
   }
   i1 = ___fdopen(i2, i3) | 0;
   if (!i1) {
    HEAP32[i6 >> 2] = i2;
    ___syscall6(6, i6 | 0) | 0;
    i1 = 0;
   }
  }
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _cid_size_init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i2 + 320 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i1) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = FUNCTION_TABLE_iiii[HEAP32[i1 >> 2] & 127](HEAP32[i2 + 100 >> 2] | 0, (HEAP32[i2 + 140 + 164 >> 2] | 0) + ((HEAP32[i2 + 4 >> 2] | 0) * 252 | 0) | 0, i4) | 0;
 if (!i1) HEAP32[i3 + 40 >> 2] = HEAP32[i4 >> 2];
 i4 = i1;
 STACKTOP = i5;
 return i4 | 0;
}

function _FcStrSetMember(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i8 | 0) <= 0) {
  i8 = 0;
  return i8 | 0;
 }
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i5 = 0;
 while (1) {
  i1 = HEAP32[i6 + (i5 << 2) >> 2] | 0;
  if ((i1 | 0) == (i7 | 0)) {
   i1 = 1;
   i2 = 8;
   break;
  } else {
   i3 = i7;
   i2 = i1;
  }
  while (1) {
   i1 = HEAP8[i2 >> 0] | 0;
   i4 = HEAP8[i3 >> 0] | 0;
   if (!(i1 << 24 >> 24)) {
    i1 = 0;
    break;
   }
   if (i1 << 24 >> 24 == i4 << 24 >> 24) {
    i3 = i3 + 1 | 0;
    i2 = i2 + 1 | 0;
   } else break;
  }
  i5 = i5 + 1 | 0;
  if (i1 << 24 >> 24 == i4 << 24 >> 24) {
   i1 = 1;
   i2 = 8;
   break;
  }
  if ((i5 | 0) >= (i8 | 0)) {
   i1 = 0;
   i2 = 8;
   break;
  }
 }
 if ((i2 | 0) == 8) return i1 | 0;
 return 0;
}

function _ps_table_done(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i9;
 i6 = HEAP32[i5 + 32 >> 2] | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 if (!i7) {
  STACKTOP = i9;
  return;
 }
 i8 = i5 + 4 | 0;
 i2 = _ft_mem_alloc(i6, HEAP32[i8 >> 2] | 0, i1) | 0;
 HEAP32[i5 >> 2] = i2;
 if (HEAP32[i1 >> 2] | 0) {
  STACKTOP = i9;
  return;
 }
 _memcpy(i2 | 0, i7 | 0, HEAP32[i8 >> 2] | 0) | 0;
 i3 = (HEAP32[i5 >> 2] | 0) - i7 | 0;
 i1 = HEAP32[i5 + 24 >> 2] | 0;
 i2 = HEAP32[i5 + 16 >> 2] | 0;
 i4 = i1 + (i2 << 2) | 0;
 if ((i2 | 0) > 0) do {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 | 0) HEAP32[i1 >> 2] = i2 + i3;
  i1 = i1 + 4 | 0;
 } while (i1 >>> 0 < i4 >>> 0);
 HEAP32[i5 + 8 >> 2] = HEAP32[i8 >> 2];
 _ft_mem_free(i6, i7);
 STACKTOP = i9;
 return;
}

function _FcCharSetSubtractLeaf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = HEAP32[i2 >> 2] & ~HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = i10;
 i9 = HEAP32[i2 + 4 >> 2] & ~HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 4 >> 2] = i9;
 i8 = HEAP32[i2 + 8 >> 2] & ~HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 8 >> 2] = i8;
 i7 = HEAP32[i2 + 12 >> 2] & ~HEAP32[i3 + 12 >> 2];
 HEAP32[i1 + 12 >> 2] = i7;
 i6 = HEAP32[i2 + 16 >> 2] & ~HEAP32[i3 + 16 >> 2];
 HEAP32[i1 + 16 >> 2] = i6;
 i5 = HEAP32[i2 + 20 >> 2] & ~HEAP32[i3 + 20 >> 2];
 HEAP32[i1 + 20 >> 2] = i5;
 i4 = HEAP32[i2 + 24 >> 2] & ~HEAP32[i3 + 24 >> 2];
 HEAP32[i1 + 24 >> 2] = i4;
 i3 = HEAP32[i2 + 28 >> 2] & ~HEAP32[i3 + 28 >> 2];
 HEAP32[i1 + 28 >> 2] = i3;
 return (i10 | i9 | i8 | i7 | i6 | i5 | i4 | i3 | 0) != 0 | 0;
}

function _FcUcs4ToUtf8(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (i5 >>> 0 < 128) {
  HEAP8[i6 >> 0] = i5;
  i1 = i6 + 1 | 0;
 } else {
  if (i5 >>> 0 < 2048) {
   i2 = 0;
   i1 = 6;
   i3 = 192;
   i4 = 31;
  } else if (i5 >>> 0 < 65536) {
   i2 = 6;
   i1 = 12;
   i3 = 224;
   i4 = 15;
  } else if (i5 >>> 0 < 2097152) {
   i2 = 12;
   i1 = 18;
   i3 = 240;
   i4 = 7;
  } else if (i5 >>> 0 < 67108864) {
   i2 = 18;
   i1 = 24;
   i3 = 248;
   i4 = 3;
  } else if ((i5 | 0) > -1) {
   i2 = 24;
   i1 = 30;
   i3 = 252;
   i4 = 1;
  } else {
   i6 = 0;
   return i6 | 0;
  }
  HEAP8[i6 >> 0] = i5 >>> i1 & i4 | i3;
  i1 = i6 + 1 | 0;
  do {
   HEAP8[i1 >> 0] = i5 >>> i2 & 63 | 128;
   i2 = i2 + -6 | 0;
   i1 = i1 + 1 | 0;
  } while ((i2 | 0) > -1);
 }
 i6 = i1 - i6 | 0;
 return i6 | 0;
}

function _utf8_isInvalid3(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i1 = HEAP8[i3 + 2 >> 0] | 0;
 i2 = i1 & 255;
 if (!(i2 & 128)) {
  i5 = 1;
  i5 = i5 & 1;
  return i5 | 0;
 }
 i5 = HEAP8[i3 >> 0] | 0;
 if (i5 << 24 >> 24 == -17) if ((HEAP8[i3 + 1 >> 0] | 0) == -65) if ((i1 & 255) > 189) {
  i5 = 1;
  i5 = i5 & 1;
  return i5 | 0;
 } else {
  i1 = 191;
  i2 = -65;
 } else i4 = 5; else i4 = 5;
 if ((i4 | 0) == 5) {
  if ((i2 & 192 | 0) == 192) {
   i5 = 1;
   i5 = i5 & 1;
   return i5 | 0;
  }
  i2 = HEAP8[i3 + 1 >> 0] | 0;
  i1 = i2 & 255;
  if (i5 << 24 >> 24 == -32) {
   i5 = (i2 & 255) < 160 | (i1 & 192 | 0) == 192;
   i5 = i5 & 1;
   return i5 | 0;
  }
 }
 i5 = (i1 & 128 | 0) == 0 ? 1 : i5 << 24 >> 24 == -19 ? (i2 & 255) > 159 : (i1 & 192 | 0) == 192;
 i5 = i5 & 1;
 return i5 | 0;
}

function _element1(i2, i1, i3, i4, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i1 | 0) {
 case 18:
  {
   i1 = i5 + 28 | 0;
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345343) | 0) {
    HEAP32[i2 >> 2] = 60;
    HEAP32[i2 + 8 >> 2] = 39;
    i5 = 42;
    return i5 | 0;
   }
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345349) | 0) {
    HEAP32[i2 >> 2] = 60;
    HEAP32[i2 + 8 >> 2] = 39;
    i5 = 41;
    return i5 | 0;
   }
   break;
  }
 case 23:
  {
   HEAP32[i2 >> 2] = 66;
   HEAP32[i2 + 4 >> 2] = 1;
   i5 = 44;
   return i5 | 0;
  }
 case 15:
  {
   i5 = 39;
   return i5 | 0;
  }
 default:
  if ((i1 | 0) == 28 & (HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i5 = 59;
   return i5 | 0;
  }
 }
 HEAP32[i2 >> 2] = 41;
 i5 = -1;
 return i5 | 0;
}

function _FcNameBool(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = HEAP8[i1 >> 0] | 0;
 i3 = i4 << 24 >> 24;
 switch (((i4 + -65 & 255) < 26 ? i3 + 32 | 0 : i3) << 24 >> 24 | 0) {
 case 49:
 case 121:
 case 116:
  {
   HEAP32[i2 >> 2] = 1;
   i4 = 1;
   return i4 | 0;
  }
 case 48:
 case 110:
 case 102:
  {
   HEAP32[i2 >> 2] = 0;
   i4 = 1;
   return i4 | 0;
  }
 case 111:
  {
   i3 = HEAP8[i1 + 1 >> 0] | 0;
   i4 = i3 << 24 >> 24;
   switch (((i3 + -65 & 255) < 26 ? i4 + 32 | 0 : i4) << 24 >> 24 | 0) {
   case 110:
    {
     HEAP32[i2 >> 2] = 1;
     i4 = 1;
     return i4 | 0;
    }
   case 102:
    {
     HEAP32[i2 >> 2] = 0;
     i4 = 1;
     return i4 | 0;
    }
   default:
    {
     i4 = 0;
     return i4 | 0;
    }
   }
  }
 default:
  {
   i4 = 0;
   return i4 | 0;
  }
 }
 return 0;
}

function _ass_font_provider_free_fontinfo(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i3 = i5 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 | 0) {
  i4 = i5 + 16 | 0;
  if ((HEAP32[i4 >> 2] | 0) > 0) {
   i2 = 0;
   do {
    _free(HEAP32[i1 + (i2 << 2) >> 2] | 0);
    i2 = i2 + 1 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
   } while ((i2 | 0) < (HEAP32[i4 >> 2] | 0));
  }
  _free(i1);
 }
 i3 = i5 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 | 0) {
  i4 = i5 + 12 | 0;
  if ((HEAP32[i4 >> 2] | 0) > 0) {
   i2 = 0;
   do {
    _free(HEAP32[i1 + (i2 << 2) >> 2] | 0);
    i2 = i2 + 1 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
   } while ((i2 | 0) < (HEAP32[i4 >> 2] | 0));
  }
  _free(i1);
 }
 i1 = HEAP32[i5 + 32 >> 2] | 0;
 if (i1 | 0) _free(i1);
 i1 = HEAP32[i5 + 40 >> 2] | 0;
 if (!i1) return;
 _free(i1);
 return;
}

function _doctype1(i2, i1, i3, i4, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 L1 : do switch (i1 | 0) {
 case 15:
  {
   i1 = 3;
   break;
  }
 case 25:
  {
   HEAP32[i2 >> 2] = 43;
   i1 = 7;
   break;
  }
 case 17:
  {
   HEAP32[i2 >> 2] = 44;
   i1 = 8;
   break;
  }
 case 18:
  {
   i1 = i5 + 28 | 0;
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345282) | 0) {
    HEAP32[i2 >> 2] = 45;
    i1 = 3;
    break L1;
   }
   if (!(FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345289) | 0)) i6 = 9; else {
    HEAP32[i2 >> 2] = 46;
    i1 = 3;
   }
   break;
  }
 default:
  if ((i1 | 0) == 28 & (HEAP32[i2 + 16 >> 2] | 0) == 0) i1 = 59; else i6 = 9;
 } while (0);
 if ((i6 | 0) == 9) {
  HEAP32[i2 >> 2] = 41;
  i1 = -1;
 }
 return i1 | 0;
}

function _FcConfigBuildFonts(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 L1 : do if (!i1) {
  i1 = HEAP32[91920] | 0;
  if (!i1) {
   while (1) {
    i1 = _FcInitLoadConfigAndFonts() | 0;
    i2 = HEAP32[91920] | 0;
    if (!i2) HEAP32[91920] = i1;
    if (!i2) break;
    _FcConfigDestroy(i1);
    i1 = HEAP32[91920] | 0;
    if (i1 | 0) break L1;
   }
   if (!i1) {
    i4 = 0;
    return i4 | 0;
   }
  }
 } while (0);
 i2 = _FcFontSetCreate() | 0;
 if (!i2) {
  i4 = 0;
  return i4 | 0;
 }
 i3 = i1 + 52 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 | 0) _FcFontSetDestroy(i4);
 HEAP32[i3 >> 2] = i2;
 if (!(_FcConfigAddDirList(i1, 0, HEAP32[i1 + 8 >> 2] | 0) | 0)) {
  i4 = 0;
  return i4 | 0;
 }
 if (!(HEAP32[91917] & 8)) {
  i4 = 1;
  return i4 | 0;
 }
 _FcFontSetPrint(i2);
 i4 = 1;
 return i4 | 0;
}

function _FcLangCompare(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = 2;
 while (1) {
  i3 = HEAP8[i2 >> 0] | 0;
  i4 = HEAP8[i1 >> 0] | 0;
  i5 = i3 & 255;
  i5 = (i3 + -65 & 255) < 26 ? i5 + 32 | 0 : i5;
  i3 = i4 & 255;
  i3 = (i4 + -65 & 255) < 26 ? i3 + 32 | 0 : i3;
  i4 = i5 & 255;
  i5 = i5 & 255;
  if ((i4 | 0) != (i3 & 255 | 0)) break;
  if (!(i5 << 24 >> 24)) {
   i1 = 0;
   i7 = 8;
   break;
  }
  i6 = (i4 | 0) == 45 ? 1 : i6;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 }
 if ((i7 | 0) == 8) return i1 | 0;
 switch (i5 << 24 >> 24) {
 case 0:
 case 45:
  break;
 default:
  {
   i7 = i6;
   return i7 | 0;
  }
 }
 switch ((i3 & 255) << 24 >> 24) {
 case 0:
 case 45:
  break;
 default:
  {
   i7 = i6;
   return i7 | 0;
  }
 }
 i7 = 1;
 return i7 | 0;
}

function _FT_Outline_Copy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i4 = 20;
  return i4 | 0;
 }
 i3 = i1 + 2 | 0;
 i4 = HEAP16[i3 >> 1] | 0;
 if (i4 << 16 >> 16 != (HEAP16[i2 + 2 >> 1] | 0)) {
  i4 = 6;
  return i4 | 0;
 }
 if ((HEAP16[i1 >> 1] | 0) != (HEAP16[i2 >> 1] | 0)) {
  i4 = 6;
  return i4 | 0;
 }
 if ((i1 | 0) == (i2 | 0)) {
  i4 = 0;
  return i4 | 0;
 }
 _memcpy(HEAP32[i2 + 4 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, i4 << 16 >> 16 << 3 | 0) | 0;
 _memcpy(HEAP32[i2 + 8 >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0, HEAP16[i3 >> 1] | 0) | 0;
 _memcpy(HEAP32[i2 + 12 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0, HEAP16[i1 >> 1] << 1 | 0) | 0;
 i4 = i2 + 16 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 + 16 >> 2] & -2 | HEAP32[i4 >> 2] & 1;
 i4 = 0;
 return i4 | 0;
}

function _FT_Stream_ReadChar(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7;
 HEAP8[i5 >> 0] = 0;
 HEAP32[i4 >> 2] = 0;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 i6 = i1 + 8 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if (!i3) if (i2 >>> 0 < (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
  i1 = HEAP8[(HEAP32[i1 >> 2] | 0) + i2 >> 0] | 0;
  HEAP8[i5 >> 0] = i1;
  i3 = 6;
 } else i3 = 7; else if ((FUNCTION_TABLE_iiiii[i3 & 127](i1, i2, i5, 1) | 0) == 1) {
  i2 = HEAP32[i6 >> 2] | 0;
  i1 = HEAP8[i5 >> 0] | 0;
  i3 = 6;
 } else i3 = 7;
 if ((i3 | 0) == 6) {
  HEAP32[i6 >> 2] = i2 + 1;
  i6 = i1;
  STACKTOP = i7;
  return i6 | 0;
 } else if ((i3 | 0) == 7) {
  HEAP32[i4 >> 2] = 85;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 return 0;
}

function _ass_read_file(i4, i5, i2) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 i3 = i7 + 12 | 0;
 i1 = _read_file(i4, i5, i3) | 0;
 do if (i1 | 0) {
  if (i2) {
   i2 = _sub_recode(i4, i1, HEAP32[i3 >> 2] | 0, i2) | 0;
   _free(i1);
   if (!i2) break; else i1 = i2;
  }
  i2 = _parse_memory(i4, i1) | 0;
  _free(i1);
  if (!i2) {
   i6 = 0;
   STACKTOP = i7;
   return i6 | 0;
  }
  i1 = ___strdup(i5) | 0;
  HEAP32[i2 + 80 >> 2] = i1;
  i1 = HEAP32[i2 >> 2] | 0;
  i3 = HEAP32[i2 + 8 >> 2] | 0;
  HEAP32[i6 >> 2] = i5;
  HEAP32[i6 + 4 >> 2] = i1;
  HEAP32[i6 + 8 >> 2] = i3;
  _ass_msg(i4, 4, 357343, i6);
  i6 = i2;
  STACKTOP = i7;
  return i6 | 0;
 } while (0);
 i6 = 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _FcWeightFromOpenType(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = (i1 + -1 | 0) >>> 0 < 9 ? i1 * 100 | 0 : i1;
 if ((i6 + -1 | 0) >>> 0 > 999) {
  i6 = -1;
  return i6 | 0;
 } else i1 = 1;
 while (1) {
  i2 = HEAP32[70920 + (i1 << 3) >> 2] | 0;
  if ((i6 | 0) > (i2 | 0)) i1 = i1 + 1 | 0; else break;
 }
 i3 = HEAP32[70920 + (i1 << 3) + 4 >> 2] | 0;
 if ((i6 | 0) == (i2 | 0)) {
  i6 = i3;
  return i6 | 0;
 }
 i5 = i1 + -1 | 0;
 i4 = HEAP32[70920 + (i5 << 3) >> 2] | 0;
 i5 = HEAP32[70920 + (i5 << 3) + 4 >> 2] | 0;
 i2 = i2 - i4 | 0;
 i1 = i3 - i5 | 0;
 if ((i6 | 0) < (i4 | 0) | ((i2 | 0) < 1 | (i1 | 0) < 0)) ___assert_fail(351617, 351657, 48, 351668);
 i6 = (((Math_imul(i1, i6 - i4 | 0) | 0) + ((i2 | 0) / 2 | 0) | 0) / (i2 | 0) | 0) + i5 | 0;
 return i6 | 0;
}

function _FcPatternObjectFindElt(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = (HEAP32[i1 + 8 >> 2] | 0) + i1 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 L1 : do if ((i1 | 0) < 1) {
  i2 = 1;
  i1 = 0;
 } else {
  i2 = i1 + -1 | 0;
  i4 = 0;
  L3 : while (1) {
   i3 = i2;
   while (1) {
    i1 = i3 + i4 >> 1;
    i2 = (HEAP32[i6 + (i1 << 3) >> 2] | 0) - i5 | 0;
    if (!i2) break L3;
    if ((i2 | 0) < 0) break;
    if ((i4 | 0) < (i1 | 0)) i3 = i1 + -1 | 0; else break L1;
   }
   if ((i1 | 0) < (i3 | 0)) {
    i2 = i3;
    i4 = i1 + 1 | 0;
   } else break L1;
  }
  i5 = (i1 | 0) < 0;
  i6 = i6 + (i1 << 3) | 0;
  i6 = i5 ? 0 : i6;
  return i6 | 0;
 } while (0);
 i4 = ~((i2 >>> 31) + i1);
 i5 = (i4 | 0) < 0;
 i6 = i6 + (i4 << 3) | 0;
 i6 = i5 ? 0 : i6;
 return i6 | 0;
}

function _Direct_Move(i2, i3, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0, i7 = 0;
 i1 = HEAP16[i2 + 298 >> 1] | 0;
 if (i1 << 16 >> 16) {
  i7 = _FT_MulDiv(i5, i1 << 16 >> 16, HEAP32[i2 + 564 >> 2] | 0) | 0;
  i1 = i4 & 65535;
  i6 = (HEAP32[i3 + 16 >> 2] | 0) + (i1 << 3) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i7;
  i1 = (HEAP32[i3 + 24 >> 2] | 0) + i1 | 0;
  HEAP8[i1 >> 0] = HEAP8[i1 >> 0] | 8;
 }
 i1 = HEAP16[i2 + 300 >> 1] | 0;
 if (!(i1 << 16 >> 16)) return;
 i5 = _FT_MulDiv(i5, i1 << 16 >> 16, HEAP32[i2 + 564 >> 2] | 0) | 0;
 i7 = i4 & 65535;
 i6 = (HEAP32[i3 + 16 >> 2] | 0) + (i7 << 3) + 4 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i5;
 i7 = (HEAP32[i3 + 24 >> 2] | 0) + i7 | 0;
 HEAP8[i7 >> 0] = HEAP8[i7 >> 0] | 16;
 return;
}

function _outline_to_bitmap2(i5, i1, i2, i4, i6, i7) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i3 = 0;
 if (!((i6 | 0) != 0 & (i7 | 0) != 0)) ___assert_fail(359891, 359811, 441, 359904);
 HEAP32[i7 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 if (!i1) i3 = 0; else i3 = (HEAP32[i1 >> 2] | 0) == 0 ? 0 : i1;
 if (!i2) i2 = 0; else i2 = (HEAP32[i2 >> 2] | 0) == 0 ? 0 : i2;
 if (!i4) i1 = 0; else i1 = (HEAP32[i4 >> 2] | 0) == 0 ? 0 : i4;
 if (i3 | 0) {
  i4 = _outline_to_bitmap(i5, i3, 0, 1) | 0;
  HEAP32[i6 >> 2] = i4;
  if (!i4) {
   i7 = 0;
   return i7 | 0;
  }
 }
 if ((i2 | 0) != 0 | (i1 | 0) != 0) {
  i6 = _outline_to_bitmap(i5, i2, i1, 1) | 0;
  HEAP32[i7 >> 2] = i6;
  if (!i6) {
   i7 = 0;
   return i7 | 0;
  }
 }
 i7 = 1;
 return i7 | 0;
}

function _tt_name_entry_ascii_from_utf16(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7;
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = (HEAPU16[i1 + 8 >> 1] | 0) >>> 1;
 i5 = i1 & 65535;
 i6 = _ft_mem_realloc(i2, 1, 0, i5 + 1 | 0, 0, i3) | 0;
 if (HEAP32[i3 >> 2] | 0) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 L4 : do if (!(i1 << 16 >> 16)) i1 = 0; else {
  i1 = 0;
  while (1) {
   i2 = HEAP8[i4 + 1 >> 0] | 0;
   i3 = (HEAPU8[i4 >> 0] | 0) << 8 | i2 & 255;
   if (!i3) break L4;
   HEAP8[i6 + i1 >> 0] = (i3 + -32 | 0) >>> 0 > 95 ? 63 : i2;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 < i5 >>> 0) i4 = i4 + 2 | 0; else break;
  }
 } while (0);
 HEAP8[i6 + i1 >> 0] = 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _ass_library_done(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!i5) return;
 _free(HEAP32[i5 >> 2] | 0);
 HEAP32[i5 >> 2] = 0;
 i3 = i5 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2) {
   do {
    _free(i2);
    i1 = i1 + 4 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
   } while ((i2 | 0) != 0);
   i1 = HEAP32[i3 >> 2] | 0;
  }
 }
 _free(i1);
 HEAP32[i3 >> 2] = 0;
 i3 = i5 + 16 | 0;
 i4 = i5 + 12 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) > 0) {
  i2 = 0;
  do {
   _free(HEAP32[i1 + (i2 * 12 | 0) >> 2] | 0);
   _free(HEAP32[(HEAP32[i4 >> 2] | 0) + (i2 * 12 | 0) + 4 >> 2] | 0);
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
  } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
 }
 _free(i1);
 _free(i5);
 return;
}

function _tt_face_free_name(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = HEAP32[(HEAP32[i3 + 96 >> 2] | 0) + 8 >> 2] | 0;
 i5 = i3 + 356 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i6 = i3 + 348 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  HEAP32[i6 >> 2] = 0;
  i6 = i3 + 344 | 0;
  HEAP16[i6 >> 1] = 0;
  i6 = i3 + 352 | 0;
  HEAP32[i6 >> 2] = 0;
  return;
 }
 if (i2) {
  while (1) {
   i7 = i1 + 16 | 0;
   _ft_mem_free(i4, HEAP32[i7 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   HEAP16[i1 + 8 >> 1] = 0;
   i2 = i2 + -1 | 0;
   if (!i2) break; else i1 = i1 + 20 | 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
 }
 _ft_mem_free(i4, i1);
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 i7 = i3 + 344 | 0;
 HEAP16[i7 >> 1] = 0;
 i7 = i3 + 352 | 0;
 HEAP32[i7 >> 2] = 0;
 return;
}

function _cff_get_glyph_name(i1, i2, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0;
 i4 = HEAP32[i1 + 656 >> 2] | 0;
 i3 = HEAP32[i4 + 2956 >> 2] | 0;
 if (!i3) {
  i6 = 11;
  return i6 | 0;
 }
 i1 = HEAP16[(HEAP32[i4 + 1160 >> 2] | 0) + (i2 << 1) >> 1] | 0;
 i2 = i1 & 65535;
 if (i1 << 16 >> 16 == -1) {
  i6 = 0;
  return i6 | 0;
 }
 do if ((i1 & 65535) > 390) {
  i1 = i2 + -391 | 0;
  if ((HEAP32[i4 + 1312 >> 2] | 0) >>> 0 > i1 >>> 0) {
   i1 = HEAP32[(HEAP32[i4 + 1316 >> 2] | 0) + (i1 << 2) >> 2] | 0;
   break;
  } else {
   i6 = 0;
   return i6 | 0;
  }
 } else i1 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2) | 0; while (0);
 if (!i1) {
  i6 = 0;
  return i6 | 0;
 }
 _ft_mem_strcpyn(i5, i1, i6) | 0;
 i6 = 0;
 return i6 | 0;
}

function _ps_hinter_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = i1 + 12 | 0;
 i4 = i1 + 16 | 0;
 i5 = i4 + 84 | 0;
 do {
  HEAP32[i4 >> 2] = 0;
  i4 = i4 + 4 | 0;
 } while ((i4 | 0) < (i5 | 0));
 HEAP32[i3 >> 2] = i2;
 HEAP32[i1 + 100 >> 2] = 85;
 HEAP32[i1 + 104 >> 2] = 22;
 HEAP32[i1 + 108 >> 2] = 63;
 HEAP32[i1 + 116 >> 2] = 64;
 HEAP32[i1 + 120 >> 2] = 189;
 HEAP32[i1 + 124 >> 2] = 13;
 HEAP32[i1 + 128 >> 2] = 14;
 HEAP32[i1 + 132 >> 2] = 33;
 HEAP32[i1 + 136 >> 2] = 67;
 HEAP32[i1 + 112 >> 2] = i3;
 HEAP32[i1 + 144 >> 2] = 65;
 HEAP32[i1 + 148 >> 2] = 189;
 HEAP32[i1 + 152 >> 2] = 25;
 HEAP32[i1 + 156 >> 2] = 26;
 HEAP32[i1 + 160 >> 2] = 15;
 HEAP32[i1 + 164 >> 2] = 67;
 HEAP32[i1 + 140 >> 2] = i3;
 return 0;
}

function _fuzzycmp(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = HEAP8[i3 >> 0] | 0;
 L1 : do if (!(i1 << 24 >> 24)) {
  i1 = 0;
  i5 = 8;
 } else while (1) {
  i4 = HEAP8[i2 >> 0] | 0;
  if (!(i4 << 24 >> 24)) {
   i5 = 8;
   break L1;
  }
  i1 = i1 & 255;
  do {
   if (!((i1 + -48 | 0) >>> 0 > 10 & ((i1 | 32) + -97 | 0) >>> 0 > 26)) break;
   i3 = i3 + 1 | 0;
   i6 = HEAP8[i3 >> 0] | 0;
   i1 = i6 & 255;
  } while (i6 << 24 >> 24 != 0);
  if ((i1 | 32 | 0) != (i4 & 255 | 0)) {
   i1 = 1;
   break L1;
  }
  i3 = i3 + 1 | 0;
  i2 = i2 + 1 | 0;
  i1 = HEAP8[i3 >> 0] | 0;
  if (!(i1 << 24 >> 24)) {
   i1 = 0;
   i5 = 8;
   break;
  }
 } while (0);
 if ((i5 | 0) == 8) i1 = i1 << 24 >> 24 != (HEAP8[i2 >> 0] | 0) & 1;
 return i1 | 0;
}

function ___overflow(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i8 = i5 & 255;
 HEAP8[i7 >> 0] = i8;
 i1 = i6 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) if (!(___towrite(i6) | 0)) {
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = 4;
 } else i1 = -1; else i3 = 4;
 do if ((i3 | 0) == 4) {
  i4 = i6 + 20 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (i3 >>> 0 < i2 >>> 0) {
   i1 = i5 & 255;
   if ((i1 | 0) != (HEAP8[i6 + 75 >> 0] | 0)) {
    HEAP32[i4 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i8;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 127](i6, i7, 1) | 0) == 1) i1 = HEAPU8[i7 >> 0] | 0; else i1 = -1;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function _t1_builder_add_contour(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i2) {
  i2 = 3;
  return i2 | 0;
 }
 if (!(HEAP8[i1 + 68 >> 0] | 0)) {
  HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (((HEAP16[i1 + 20 >> 1] | 0) + 1 + (HEAP16[i1 + 56 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 8 >> 2] | 0) >>> 0) {
  i1 = _FT_GlyphLoader_CheckPoints(i1, 0, 1) | 0;
  if (i1 | 0) {
   i2 = i1;
   return i2 | 0;
  }
 }
 i1 = HEAP16[i2 >> 1] | 0;
 if (i1 << 16 >> 16 > 0) {
  HEAP16[(HEAP32[i2 + 12 >> 2] | 0) + ((i1 << 16 >> 16) + -1 << 1) >> 1] = (HEAPU16[i2 + 2 >> 1] | 0) + 65535;
  i1 = HEAP16[i2 >> 1] | 0;
 }
 HEAP16[i2 >> 1] = i1 + 1 << 16 >> 16;
 i2 = 0;
 return i2 | 0;
}

function _T1_Size_Init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i2 + 548 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i1) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = FUNCTION_TABLE_iiii[HEAP32[i1 >> 2] & 127](HEAP32[i2 + 100 >> 2] | 0, i2 + 168 | 0, i4) | 0;
 if (!i1) HEAP32[i3 + 40 >> 2] = HEAP32[i4 >> 2];
 i4 = i1;
 STACKTOP = i5;
 return i4 | 0;
}

function _FT_Get_Postscript_Name(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!i5) {
  i5 = 0;
  return i5 | 0;
 }
 i4 = i5 + 128 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 switch (i1 | 0) {
 case 0:
  {
   i3 = 3;
   break;
  }
 case -2:
  {
   i5 = 0;
   return i5 | 0;
  }
 default:
  {}
 }
 if ((i3 | 0) == 3) {
  i3 = HEAP32[i5 + 96 >> 2] | 0;
  i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0;
  if (!i1) i1 = 0; else {
   i1 = FUNCTION_TABLE_iii[i1 & 255](i3, 344673) | 0;
   i2 = HEAP32[i4 >> 2] | 0;
  }
  HEAP32[i2 + 28 >> 2] = i1 | 0 ? i1 : -2;
 }
 if (!i1) {
  i5 = 0;
  return i5 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i5 = 0;
  return i5 | 0;
 }
 i5 = FUNCTION_TABLE_ii[i1 & 63](i5) | 0;
 return i5 | 0;
}

function _ps_parser_skip_spaces(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = HEAP32[i4 + 8 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = i1;
 L1 : do if (i2 >>> 0 < i3 >>> 0) while (1) {
  switch (HEAP8[i2 >> 0] | 0) {
  case 0:
  case 12:
  case 9:
  case 10:
  case 13:
  case 32:
   break;
  case 37:
   {
    i1 = i2;
    i2 = 37;
    L5 : while (1) {
     switch (i2 << 24 >> 24) {
     case 10:
     case 13:
      break L5;
     default:
      {}
     }
     i2 = i1 + 1 | 0;
     if (i2 >>> 0 >= i3 >>> 0) {
      i1 = i2;
      break;
     }
     i1 = i2;
     i2 = HEAP8[i2 >> 0] | 0;
    }
    break;
   }
  default:
   break L1;
  }
  i2 = i1 + 1 | 0;
  i1 = i2;
  if (i2 >>> 0 >= i3 >>> 0) break L1;
 } while (0);
 HEAP32[i4 >> 2] = i1;
 return;
}

function _cdataSectionProcessor(i3, i1, i4, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i6;
 HEAP32[i2 >> 2] = i1;
 i1 = _doCdataSection(i3, HEAP32[i3 + 144 >> 2] | 0, i2, i4, i5, (HEAP8[i3 + 484 >> 0] | 0) == 0 & 1) | 0;
 if (i1 | 0) {
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i2 = i3 + 280 | 0;
 if (!(HEAP32[i3 + 476 >> 2] | 0)) {
  HEAP32[i2 >> 2] = 77;
  i5 = _contentProcessor(i3, i1, i4, i5) | 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  HEAP32[i2 >> 2] = 82;
  i5 = _externalEntityContentProcessor(i3, i1, i4, i5) | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _big2_toUtf16(i1, i4, i3, i5, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0, i8 = 0;
 i8 = HEAP32[i4 >> 2] | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 i2 = i8;
 i1 = i7;
 if ((i3 - i8 | 0) > (i6 - i7 | 0)) {
  i8 = i3 + -2 | 0;
  i3 = (HEAP8[i8 >> 0] & -8) << 24 >> 24 == -40 ? i8 : i3;
 }
 if ((i2 | 0) == (i3 | 0) | (i1 | 0) == (i6 | 0)) return;
 while (1) {
  i8 = ((HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0)) & 65535;
  HEAP32[i5 >> 2] = i1 + 2;
  HEAP16[i1 >> 1] = i8;
  i2 = (HEAP32[i4 >> 2] | 0) + 2 | 0;
  HEAP32[i4 >> 2] = i2;
  if ((i2 | 0) == (i3 | 0)) {
   i1 = 6;
   break;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i1 = 6;
   break;
  }
 }
 if ((i1 | 0) == 6) return;
}

function _tt_name_entry_ascii_from_other(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = HEAP16[i1 + 8 >> 1] | 0;
 i4 = i1 & 65535;
 i5 = _ft_mem_realloc(i2, 1, 0, i4 + 1 | 0, 0, i7) | 0;
 if (HEAP32[i7 >> 2] | 0) {
  i7 = 0;
  STACKTOP = i6;
  return i7 | 0;
 }
 L4 : do if (!(i1 << 16 >> 16)) i1 = 0; else {
  i1 = 0;
  while (1) {
   i2 = HEAP8[i3 >> 0] | 0;
   if (!(i2 << 24 >> 24)) break L4;
   HEAP8[i5 + i1 >> 0] = (i2 & 255) < 32 | i2 << 24 >> 24 < 0 ? 63 : i2;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 < i4 >>> 0) i3 = i3 + 1 | 0; else break;
  }
 } while (0);
 HEAP8[i5 + i1 >> 0] = 0;
 i7 = i5;
 STACKTOP = i6;
 return i7 | 0;
}

function _parse_memory(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i2 = _calloc(1, 96) | 0;
 do if (!i2) i4 = 0; else {
  HEAP32[i2 + 84 >> 2] = i1;
  HEAP32[i2 + 60 >> 2] = 1;
  i1 = _calloc(1, 32) | 0;
  HEAP32[i2 + 88 >> 2] = i1;
  if (!i1) {
   _free(i2);
   i4 = 0;
   break;
  } else {
   HEAP32[i1 + 28 >> 2] = 1;
   i4 = i2;
   break;
  }
 } while (0);
 _process_text(i4, i3);
 i2 = HEAP32[i4 + 8 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i3 = HEAP32[i4 + 20 >> 2] | 0;
  i1 = 0;
  do {
   HEAP32[i3 + (i1 * 56 | 0) + 16 >> 2] = i1;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i2 | 0));
 }
 if (!(HEAP32[i4 + 32 >> 2] | 0)) {
  _ass_free_track(i4);
  i4 = 0;
  return i4 | 0;
 } else {
  _ass_process_force_style(i4);
  return i4 | 0;
 }
 return 0;
}

function _entity7(i2, i1, i3, i4, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i1 | 0) {
 case 18:
  {
   i1 = i5 + 28 | 0;
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345282) | 0) {
    HEAP32[i2 >> 2] = 85;
    i5 = 11;
    return i5 | 0;
   }
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345289) | 0) {
    HEAP32[i2 >> 2] = 86;
    i5 = 11;
    return i5 | 0;
   }
   break;
  }
 case 27:
  {
   HEAP32[i2 >> 2] = 60;
   HEAP32[i2 + 8 >> 2] = 11;
   i5 = 12;
   return i5 | 0;
  }
 case 15:
  {
   i5 = 11;
   return i5 | 0;
  }
 default:
  if ((i1 | 0) == 28 & (HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i5 = 59;
   return i5 | 0;
  }
 }
 HEAP32[i2 >> 2] = 41;
 i5 = -1;
 return i5 | 0;
}

function _entity2(i2, i1, i3, i4, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i1 | 0) {
 case 18:
  {
   i1 = i5 + 28 | 0;
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345282) | 0) {
    HEAP32[i2 >> 2] = 81;
    i5 = 11;
    return i5 | 0;
   }
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345289) | 0) {
    HEAP32[i2 >> 2] = 82;
    i5 = 11;
    return i5 | 0;
   }
   break;
  }
 case 27:
  {
   HEAP32[i2 >> 2] = 60;
   HEAP32[i2 + 8 >> 2] = 11;
   i5 = 12;
   return i5 | 0;
  }
 case 15:
  {
   i5 = 11;
   return i5 | 0;
  }
 default:
  if ((i1 | 0) == 28 & (HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i5 = 59;
   return i5 | 0;
  }
 }
 HEAP32[i2 >> 2] = 41;
 i5 = -1;
 return i5 | 0;
}

function _raccess_guess_darwin_newvfs(i2, i1, i5, i6, i7) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0;
 i4 = _strlen(i5) | 0;
 i3 = i4 + 18 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 do if ((i4 | 0) > -18) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 255](i1, i3) | 0;
  if (!i1) {
   i7 = 64;
   return i7 | 0;
  } else {
   _memset(i1 | 0, 0, i3 | 0) | 0;
   break;
  }
 } else if (!i3) i1 = 0; else {
  i7 = 6;
  return i7 | 0;
 } while (0);
 _memcpy(i1 | 0, i5 | 0, i4 | 0) | 0;
 i2 = i1 + i4 | 0;
 i3 = 280847;
 i4 = i2 + 18 | 0;
 do {
  HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
  i2 = i2 + 1 | 0;
  i3 = i3 + 1 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 i7 = 0;
 return i7 | 0;
}

function _FcPatternSerializeAlloc(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = (HEAP32[i3 + 8 >> 2] | 0) + i3 | 0;
 i4 = i1;
 if (!(_FcSerializeAlloc(i2, i3, 16) | 0)) {
  i4 = 0;
  return i4 | 0;
 }
 if (!(_FcSerializeAlloc(i2, i1, HEAP32[i3 >> 2] << 3) | 0)) {
  i4 = 0;
  return i4 | 0;
 }
 if ((HEAP32[i3 >> 2] | 0) > 0) i1 = 0; else {
  i4 = 1;
  return i4 | 0;
 }
 while (1) {
  i6 = HEAP32[i4 + (i1 << 3) + 4 >> 2] | 0;
  i5 = i6;
  if (!(_FcValueListSerializeAlloc(i2, (i5 & 1 | 0) == 0 ? i6 : (i5 & -2) + (i4 + (i1 << 3)) | 0) | 0)) {
   i1 = 0;
   i2 = 6;
   break;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (HEAP32[i3 >> 2] | 0)) {
   i1 = 1;
   i2 = 6;
   break;
  }
 }
 if ((i2 | 0) == 6) return i1 | 0;
 return 0;
}

function ___fseeko_unlocked(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if ((i5 | 0) == 1) i1 = i1 - (HEAP32[i4 + 8 >> 2] | 0) + (HEAP32[i4 + 4 >> 2] | 0) | 0;
 i2 = i4 + 20 | 0;
 i3 = i4 + 28 | 0;
 if ((HEAP32[i2 >> 2] | 0) >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i4 + 36 >> 2] & 127](i4, 0, 0) | 0;
  if (!(HEAP32[i2 >> 2] | 0)) i1 = -1; else i6 = 5;
 } else i6 = 5;
 if ((i6 | 0) == 5) {
  HEAP32[i4 + 16 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[i4 + 40 >> 2] & 127](i4, i1, i5) | 0) < 0) i1 = -1; else {
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -17;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _fflush(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 do if (!i2) {
  if (!(HEAP32[22875] | 0)) i1 = 0; else i1 = _fflush(HEAP32[22875] | 0) | 0;
  i2 = ___ofl_lock() | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  if (i2) do {
   if ((HEAP32[i2 + 76 >> 2] | 0) > -1) i3 = ___lockfile(i2) | 0; else i3 = 0;
   if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0) i1 = ___fflush_unlocked(i2) | 0 | i1;
   if (i3 | 0) ___unlockfile(i2);
   i2 = HEAP32[i2 + 56 >> 2] | 0;
  } while ((i2 | 0) != 0);
  ___ofl_unlock();
 } else {
  if ((HEAP32[i2 + 76 >> 2] | 0) <= -1) {
   i1 = ___fflush_unlocked(i2) | 0;
   break;
  }
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___fflush_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } while (0);
 return i1 | 0;
}

function _tt_cmap0_validate(i3, i5) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i1 = i5 + 160 | 0;
 if ((i3 + 4 | 0) >>> 0 > (HEAP32[i1 >> 2] | 0) >>> 0) _ft_validator_error(i5, 8);
 i4 = (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i3 + 3 >> 0] | 0);
 if (i4 >>> 0 < 262 ? 1 : (i3 + i4 | 0) >>> 0 > (HEAP32[i1 >> 2] | 0) >>> 0) _ft_validator_error(i5, 8);
 if (!(HEAP32[i5 + 164 >> 2] | 0)) return 0;
 i4 = i5 + 172 | 0;
 i2 = 0;
 i1 = i3 + 6 | 0;
 while (1) {
  if ((HEAPU8[i1 >> 0] | 0) >>> 0 >= (HEAP32[i4 >> 2] | 0) >>> 0) {
   i1 = 8;
   break;
  }
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == 256) {
   i1 = 10;
   break;
  } else i1 = i1 + 1 | 0;
 }
 if ((i1 | 0) == 8) _ft_validator_error(i5, 16); else if ((i1 | 0) == 10) return 0;
 return 0;
}

function _little2_toUtf16(i1, i4, i3, i5, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0, i8 = 0;
 i8 = HEAP32[i4 >> 2] | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 i2 = i8;
 i1 = i7;
 if ((i3 - i8 | 0) > (i6 - i7 | 0)) i3 = (HEAP8[i3 + -1 >> 0] & -8) << 24 >> 24 == -40 ? i3 + -2 | 0 : i3;
 if ((i2 | 0) == (i3 | 0) | (i1 | 0) == (i6 | 0)) return;
 while (1) {
  i8 = ((HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0)) & 65535;
  HEAP32[i5 >> 2] = i1 + 2;
  HEAP16[i1 >> 1] = i8;
  i2 = (HEAP32[i4 >> 2] | 0) + 2 | 0;
  HEAP32[i4 >> 2] = i2;
  if ((i2 | 0) == (i3 | 0)) {
   i1 = 6;
   break;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i1 = 6;
   break;
  }
 }
 if ((i1 | 0) == 6) return;
}

function _cff_property_get(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!(_strcmp(i2, 280216) | 0)) {
  HEAP32[i3 >> 2] = HEAP32[i1 + 36 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 40 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 44 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 48 >> 2];
  HEAP32[i3 + 16 >> 2] = HEAP32[i1 + 52 >> 2];
  HEAP32[i3 + 20 >> 2] = HEAP32[i1 + 56 >> 2];
  HEAP32[i3 + 24 >> 2] = HEAP32[i1 + 60 >> 2];
  HEAP32[i3 + 28 >> 2] = HEAP32[i1 + 64 >> 2];
  i3 = 0;
  return i3 | 0;
 }
 if (!(_strcmp(i2, 280237) | 0)) {
  HEAP32[i3 >> 2] = HEAP32[i1 + 28 >> 2];
  i3 = 0;
  return i3 | 0;
 }
 if (_strcmp(i2, 280252) | 0) {
  i3 = 12;
  return i3 | 0;
 }
 HEAP8[i3 >> 0] = HEAP8[i1 + 32 >> 0] | 0;
 i3 = 0;
 return i3 | 0;
}

function _FcFontSort(i1, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 if (!i3) ___assert_fail(354616, 354578, 1047, 354735);
 if (!i6) ___assert_fail(354626, 354578, 1048, 354735);
 HEAP32[i6 >> 2] = 1;
 if (!i1) {
  i1 = _FcConfigGetCurrent() | 0;
  if (!i1) {
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  } else i2 = i1;
 } else i2 = i1;
 i1 = HEAP32[i2 + 52 >> 2] | 0;
 if (!i1) i1 = 0; else {
  HEAP32[i7 >> 2] = i1;
  i1 = 1;
 }
 i2 = HEAP32[i2 + 56 >> 2] | 0;
 if (i2) {
  HEAP32[i7 + (i1 << 2) >> 2] = i2;
  i1 = i1 + 1 | 0;
 }
 i7 = _FcFontSetSort(0, i7, i1, i3, i4, i5, i6) | 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _cff_size_done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i2 + 656 >> 2] | 0;
 i4 = HEAP32[i1 + 40 >> 2] | 0;
 if (!i4) return;
 i1 = HEAP32[(HEAP32[i2 + 656 >> 2] | 0) + 2952 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) return;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) return;
 i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i1) return;
 i2 = i1 + 8 | 0;
 FUNCTION_TABLE_vi[HEAP32[i2 >> 2] & 127](HEAP32[i4 >> 2] | 0);
 i1 = HEAP32[i3 + 1896 >> 2] | 0;
 if (!i1) return;
 do {
  i1 = i1 + -1 | 0;
  FUNCTION_TABLE_vi[HEAP32[i2 >> 2] & 127](HEAP32[i4 + 4 + (i1 << 2) >> 2] | 0);
 } while ((i1 | 0) != 0);
 return;
}

function _FcLangSetSubtract(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = _FcLangSetCopy(i1) | 0;
 i1 = _FcLangSetGetLangs(i2) | 0;
 i3 = _FcStrListCreate(i1) | 0;
 _FcStrSetDestroy(i1);
 i1 = _FcStrListNext(i3) | 0;
 if (!i1) {
  _FcStrListDone(i3);
  return i5 | 0;
 }
 i4 = i5 + 4 | 0;
 do {
  i2 = _FcLangSetIndex(i1) | 0;
  if ((i2 | 0) > -1) {
   i1 = HEAPU8[63754 + i2 >> 0] | 0;
   i6 = i1 >>> 5;
   i2 = i5 + 8 + (i6 << 2) | 0;
   if (i6 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0) HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & ~(1 << (i1 & 31));
  } else {
   i2 = HEAP32[i5 >> 2] | 0;
   if (i2 | 0) _FcStrSetDel(i2, i1) | 0;
  }
  i1 = _FcStrListNext(i3) | 0;
 } while ((i1 | 0) != 0);
 _FcStrListDone(i3);
 return i5 | 0;
}

function _parse_fd_array(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i6;
 i2 = HEAP32[i3 + 100 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[i1 + 36 >> 2] & 63](i1) | 0;
 if ((i5 | 0) < 0) {
  STACKTOP = i6;
  return;
 }
 i1 = i3 + 304 | 0;
 if (HEAP32[i1 >> 2] | 0) {
  STACKTOP = i6;
  return;
 }
 i2 = _ft_mem_realloc(i2, 252, 0, i5, 0, i4) | 0;
 HEAP32[i1 >> 2] = i2;
 if (HEAP32[i4 >> 2] | 0) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i3 + 300 >> 2] = i5;
 if ((i5 | 0) > 0) i1 = 0; else {
  STACKTOP = i6;
  return;
 }
 do {
  HEAP32[i2 + (i1 * 252 | 0) + 4 >> 2] = 4;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) < (i5 | 0));
 STACKTOP = i6;
 return;
}

function _TT_Load_Glyph_Header(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 200 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = i3 + 10 | 0;
 if (i4 >>> 0 > (HEAP32[i1 + 204 >> 2] | 0) >>> 0) {
  i4 = 20;
  return i4 | 0;
 }
 HEAP16[i1 + 32 >> 1] = (HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i3 + 1 >> 0] | 0);
 HEAP32[i1 + 36 >> 2] = ((HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i3 + 3 >> 0] | 0)) << 16 >> 16;
 HEAP32[i1 + 40 >> 2] = ((HEAPU8[i3 + 4 >> 0] | 0) << 8 | (HEAPU8[i3 + 5 >> 0] | 0)) << 16 >> 16;
 HEAP32[i1 + 44 >> 2] = ((HEAPU8[i3 + 6 >> 0] | 0) << 8 | (HEAPU8[i3 + 7 >> 0] | 0)) << 16 >> 16;
 HEAP32[i1 + 48 >> 2] = ((HEAPU8[i3 + 8 >> 0] | 0) << 8 | (HEAPU8[i3 + 9 >> 0] | 0)) << 16 >> 16;
 HEAP32[i2 >> 2] = i4;
 i4 = 0;
 return i4 | 0;
}

function _lookup_style_strict(i4, i5, i6) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 i1 = HEAP32[i4 >> 2] | 0;
 L1 : do if ((i1 | 0) > 0) {
  i7 = HEAP32[i4 + 16 >> 2] | 0;
  while (1) {
   i2 = i1;
   i1 = i1 + -1 | 0;
   i3 = HEAP32[i7 + (i1 * 144 | 0) >> 2] | 0;
   if (!(_strncmp(i3, i5, i6) | 0)) if (!(HEAP8[i3 + i6 >> 0] | 0)) break;
   if ((i2 | 0) <= 1) break L1;
  }
  i8 = i7 + (i1 * 144 | 0) | 0;
  STACKTOP = i9;
  return i8 | 0;
 } while (0);
 i7 = HEAP32[i4 + 84 >> 2] | 0;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i8 + 4 >> 2] = i6;
 HEAP32[i8 + 8 >> 2] = i5;
 _ass_msg(i7, 2, 357577, i8);
 i8 = 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _fclose(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 if ((HEAP32[i4 + 76 >> 2] | 0) > -1) i5 = ___lockfile(i4) | 0; else i5 = 0;
 ___unlist_locked_file(i4);
 i6 = (HEAP32[i4 >> 2] & 1 | 0) != 0;
 if (!i6) {
  i3 = ___ofl_lock() | 0;
  i2 = HEAP32[i4 + 52 >> 2] | 0;
  i1 = i4 + 56 | 0;
  if (i2 | 0) HEAP32[i2 + 56 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) HEAP32[i1 + 52 >> 2] = i2;
  if ((HEAP32[i3 >> 2] | 0) == (i4 | 0)) HEAP32[i3 >> 2] = i1;
  ___ofl_unlock();
 }
 i1 = _fflush(i4) | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 63](i4) | 0 | i1;
 i2 = HEAP32[i4 + 92 >> 2] | 0;
 if (i2 | 0) _free(i2);
 if (i6) {
  if (i5 | 0) ___unlockfile(i4);
 } else _free(i4);
 return i1 | 0;
}

function _FcObjectLookupBuiltinIdByName(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = _strlen(i5) | 0;
 if ((i1 + -3 | 0) >>> 0 >= 12) {
  i5 = 0;
  return i5 | 0;
 }
 i4 = i5 + 1 | 0;
 i2 = (HEAPU8[350649 + (HEAPU8[i5 + 2 >> 0] | 0) >> 0] | 0) + i1 + (HEAPU8[350649 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0) | 0;
 if (i2 >>> 0 >= 60) {
  i5 = 0;
  return i5 | 0;
 }
 i3 = 68024 + (i2 << 3) | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) <= -1) {
  i5 = 0;
  return i5 | 0;
 }
 i1 = 350905 + i1 | 0;
 if ((HEAP8[i5 >> 0] | 0) != (HEAP8[i1 >> 0] | 0)) {
  i5 = 0;
  return i5 | 0;
 }
 if ((i3 | 0) == 0 | (_strcmp(i4, i1 + 1 | 0) | 0) != 0) {
  i5 = 0;
  return i5 | 0;
 }
 i5 = HEAP32[68024 + (i2 << 3) + 4 >> 2] | 0;
 return i5 | 0;
}

function _FT_Get_Next_Char(i1, i2, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i7;
 if (!i1) {
  i2 = 0;
  i1 = 0;
 } else {
  i5 = HEAP32[i1 + 92 >> 2] | 0;
  if (!i5) {
   i2 = 0;
   i1 = 0;
  } else {
   i3 = i1 + 16 | 0;
   if (!(HEAP32[i3 >> 2] | 0)) {
    i2 = 0;
    i1 = 0;
   } else {
    HEAP32[i4 >> 2] = i2;
    i2 = i5 + 12 | 0;
    do i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 255](i5, i4) | 0; while (i1 >>> 0 >= (HEAP32[i3 >> 2] | 0) >>> 0);
    i2 = (i1 | 0) == 0 ? 0 : HEAP32[i4 >> 2] | 0;
   }
  }
 }
 if (!i6) {
  STACKTOP = i7;
  return i2 | 0;
 }
 HEAP32[i6 >> 2] = i1;
 STACKTOP = i7;
 return i2 | 0;
}

function _BDF_Face_Done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!i1) return;
 i3 = HEAP32[i1 + 100 >> 2] | 0;
 i2 = i1 + 140 | 0;
 _bdf_free_font(HEAP32[i2 >> 2] | 0);
 i4 = i1 + 144 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 132 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 136 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 20 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i1 + 24 | 0;
 _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i1 = i1 + 32 | 0;
 _ft_mem_free(i3, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 _ft_mem_free(i3, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 return;
}

function _open(i3, i5, i2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i7 + 16 | 0;
 i4 = i7;
 i1 = i7 + 32 | 0;
 if (!(i5 & 4194368)) i1 = 0; else {
  HEAP32[i1 >> 2] = i2;
  i8 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  i2 = HEAP32[i8 >> 2] | 0;
  HEAP32[i1 >> 2] = i8 + 4;
  i1 = i2;
 }
 HEAP32[i4 >> 2] = i3;
 HEAP32[i4 + 4 >> 2] = i5 | 32768;
 HEAP32[i4 + 8 >> 2] = i1;
 i1 = ___syscall5(5, i4 | 0) | 0;
 if (!((i5 & 524288 | 0) == 0 | (i1 | 0) < 0)) {
  HEAP32[i6 >> 2] = i1;
  HEAP32[i6 + 4 >> 2] = 2;
  HEAP32[i6 + 8 >> 2] = 1;
  ___syscall221(221, i6 | 0) | 0;
 }
 i8 = ___syscall_ret(i1) | 0;
 STACKTOP = i7;
 return i8 | 0;
}

function _t1_builder_add_point(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 if (!(HEAP8[i1 + 68 >> 0] | 0)) {
  i5 = i5 + 2 | 0;
  i4 = HEAP16[i5 >> 1] | 0;
  i4 = i4 + 1 << 16 >> 16;
  HEAP16[i5 >> 1] = i4;
  return;
 } else {
  i7 = HEAP32[i5 + 4 >> 2] | 0;
  i1 = i5 + 2 | 0;
  i6 = HEAP16[i1 >> 1] | 0;
  i5 = (HEAP32[i5 + 8 >> 2] | 0) + i6 | 0;
  i2 = (_FT_RoundFix(i2) | 0) >> 16;
  HEAP32[i7 + (i6 << 3) >> 2] = i2;
  i3 = (_FT_RoundFix(i3) | 0) >> 16;
  HEAP32[i7 + (i6 << 3) + 4 >> 2] = i3;
  HEAP8[i5 >> 0] = i4 << 24 >> 24 ? 1 : 2;
  i5 = i1;
  i4 = HEAP16[i5 >> 1] | 0;
  i4 = i4 + 1 << 16 >> 16;
  HEAP16[i5 >> 1] = i4;
  return;
 }
}

function _FcUtf16ToUcs4(i6, i1, i7, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i8 = 0;
 if ((i5 | 0) < 2) {
  i7 = 0;
  return i7 | 0;
 }
 i4 = (i1 | 0) == 0;
 i3 = (i4 ^ 1) & 1;
 i8 = (HEAPU8[i6 + i3 >> 0] | 0) << 8;
 i4 = i4 & 1;
 i2 = i8 | (HEAPU8[i6 + i4 >> 0] | 0);
 i1 = i6 + 2 | 0;
 do if ((i8 & 64512 | 0) == 55296) {
  if ((i5 + -2 | 0) < 2) {
   i8 = 0;
   return i8 | 0;
  }
  i3 = (HEAPU8[i1 + i3 >> 0] | 0) << 8;
  if ((i3 & 64512 | 0) == 56320) {
   i2 = (i3 & 768 | i2 << 10 & 1047552 | (HEAPU8[i1 + i4 >> 0] | 0)) + 65536 | 0;
   i1 = i6 + 4 | 0;
   break;
  } else {
   i8 = 0;
   return i8 | 0;
  }
 } while (0);
 HEAP32[i7 >> 2] = i2;
 i8 = i1 - i6 | 0;
 return i8 | 0;
}

function _scalbn(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 if ((i1 | 0) > 1023) {
  d2 = d2 * 8988465674311579538646525.0e283;
  i3 = i1 + -1023 | 0;
  i4 = (i3 | 0) > 1023;
  i1 = i1 + -2046 | 0;
  d2 = i4 ? d2 * 8988465674311579538646525.0e283 : d2;
  i1 = i4 ? ((i1 | 0) < 1023 ? i1 : 1023) : i3;
 } else if ((i1 | 0) < -1022) {
  d2 = d2 * 2.2250738585072014e-308;
  i4 = i1 + 1022 | 0;
  i3 = (i4 | 0) < -1022;
  i1 = i1 + 2044 | 0;
  d2 = i3 ? d2 * 2.2250738585072014e-308 : d2;
  i1 = i3 ? ((i1 | 0) > -1022 ? i1 : -1022) : i4;
 }
 i3 = _bitshift64Shl(i1 + 1023 | 0, 0, 52) | 0;
 i4 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = i3;
 HEAP32[tempDoublePtr + 4 >> 2] = i4;
 return +(d2 * +HEAPF64[tempDoublePtr >> 3]);
}

function _FcConfigXdgCacheHome() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = _getenv(352411) | 0;
 if (!1) {
  i3 = 0;
  return i3 | 0;
 }
 if (i1 | 0) {
  i3 = _FcStrCopy(i1) | 0;
  return i3 | 0;
 }
 i1 = _getenv(347408) | 0;
 if (!i1) i2 = 0; else i2 = _strlen(i1) | 0;
 i3 = _malloc(i2 + 8 | 0) | 0;
 if (!i3) {
  i3 = 0;
  return i3 | 0;
 }
 i4 = i3 + i2 | 0;
 _memcpy(i3 | 0, i1 | 0, i2 | 0) | 0;
 HEAP8[i4 >> 0] = HEAP8[352426] | 0;
 HEAP8[i4 + 1 >> 0] = HEAP8[352427] | 0;
 HEAP8[i4 + 2 >> 0] = HEAP8[352428] | 0;
 HEAP8[i4 + 3 >> 0] = HEAP8[352429] | 0;
 HEAP8[i4 + 4 >> 0] = HEAP8[352430] | 0;
 HEAP8[i4 + 5 >> 0] = HEAP8[352431] | 0;
 HEAP8[i4 + 6 >> 0] = HEAP8[352432] | 0;
 HEAP8[i3 + (i2 + 7) >> 0] = 0;
 return i3 | 0;
}

function _strstr(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = HEAP8[i3 >> 0] | 0;
 do if (i2 << 24 >> 24) {
  i1 = _strchr(i1, i2 << 24 >> 24) | 0;
  if (!i1) i1 = 0; else if (HEAP8[i3 + 1 >> 0] | 0) if (!(HEAP8[i1 + 1 >> 0] | 0)) i1 = 0; else {
   if (!(HEAP8[i3 + 2 >> 0] | 0)) {
    i1 = _twobyte_strstr(i1, i3) | 0;
    break;
   }
   if (!(HEAP8[i1 + 2 >> 0] | 0)) i1 = 0; else {
    if (!(HEAP8[i3 + 3 >> 0] | 0)) {
     i1 = _threebyte_strstr(i1, i3) | 0;
     break;
    }
    if (!(HEAP8[i1 + 3 >> 0] | 0)) i1 = 0; else if (!(HEAP8[i3 + 4 >> 0] | 0)) {
     i1 = _fourbyte_strstr(i1, i3) | 0;
     break;
    } else {
     i1 = _twoway_strstr(i1, i3) | 0;
     break;
    }
   }
  }
 } while (0);
 return i1 | 0;
}

function _outline_add_segment(i3, i5) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0;
 i6 = i3 + 8 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i4 = i3 + 12 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 do if (i1 >>> 0 < i2 >>> 0) i2 = i3 + 20 | 0; else {
  i1 = i2 << 1;
  i2 = ___errno_location() | 0;
  HEAP32[i2 >> 2] = 0;
  i2 = i3 + 20 | 0;
  i3 = _ass_try_realloc_array(HEAP32[i2 >> 2] | 0, i1, 1) | 0;
  HEAP32[i2 >> 2] = i3;
  i3 = ___errno_location() | 0;
  if (!(HEAP32[i3 >> 2] | 0)) {
   HEAP32[i4 >> 2] = i1;
   i1 = HEAP32[i6 >> 2] | 0;
   break;
  } else {
   i6 = 0;
   return i6 | 0;
  }
 } while (0);
 HEAP8[(HEAP32[i2 >> 2] | 0) + i1 >> 0] = i5;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 i6 = 1;
 return i6 | 0;
}

function _XmlUtf8Encode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((i1 | 0) < 0) {
  i2 = 0;
  return i2 | 0;
 }
 if ((i1 | 0) < 128) {
  HEAP8[i2 >> 0] = i1;
  i2 = 1;
  return i2 | 0;
 }
 if ((i1 | 0) < 2048) {
  HEAP8[i2 >> 0] = i1 >>> 6 | 192;
  HEAP8[i2 + 1 >> 0] = i1 & 63 | 128;
  i2 = 2;
  return i2 | 0;
 }
 if ((i1 | 0) < 65536) {
  HEAP8[i2 >> 0] = i1 >>> 12 | 224;
  HEAP8[i2 + 1 >> 0] = i1 >>> 6 & 63 | 128;
  HEAP8[i2 + 2 >> 0] = i1 & 63 | 128;
  i2 = 3;
  return i2 | 0;
 }
 if ((i1 | 0) >= 1114112) {
  i2 = 0;
  return i2 | 0;
 }
 HEAP8[i2 >> 0] = i1 >>> 18 | 240;
 HEAP8[i2 + 1 >> 0] = i1 >>> 12 & 63 | 128;
 HEAP8[i2 + 2 >> 0] = i1 >>> 6 & 63 | 128;
 HEAP8[i2 + 3 >> 0] = i1 & 63 | 128;
 i2 = 4;
 return i2 | 0;
}

function _FcLangSetGetLangs(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = _FcStrSetCreate() | 0;
 if (!i6) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = i2 + 4 | 0;
 i1 = 0;
 do {
  i4 = HEAPU8[63754 + i1 >> 0] | 0;
  i5 = i4 >>> 5;
  if (i5 >>> 0 < (HEAP32[i3 >> 2] | 0) >>> 0) if (HEAP32[i2 + 8 + (i5 << 2) >> 2] & 1 << (i4 & 31) | 0) _FcStrSetAdd(i6, 30904 + (i1 * 24 | 0) | 0) | 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 244);
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) return i6 | 0;
 i2 = _FcStrListCreate(i1) | 0;
 if (!i2) return i6 | 0;
 i1 = _FcStrListNext(i2) | 0;
 if (i1 | 0) do {
  _FcStrSetAdd(i6, i1) | 0;
  i1 = _FcStrListNext(i2) | 0;
 } while ((i1 | 0) != 0);
 _FcStrListDone(i2);
 return i6 | 0;
}

function _af_dummy_hints_apply(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i6 = _af_glyph_hints_reload(i2, i3) | 0;
 if (i6 | 0) return i6 | 0;
 i4 = HEAP32[i2 + 24 >> 2] | 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 i5 = i1 + (i4 * 40 | 0) | 0;
 if ((i4 | 0) <= 0) return i6 | 0;
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 i3 = HEAP32[i3 + 8 >> 2] | 0;
 while (1) {
  HEAP32[i4 >> 2] = HEAP32[i1 + 16 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 20 >> 2];
  i2 = HEAPU16[i1 >> 1] | 0;
  if (!(i2 & 1)) i2 = ((i2 & 2) >>> 1) + 1 << 24 >> 24; else i2 = 0;
  HEAP8[i3 >> 0] = i2;
  i1 = i1 + 40 | 0;
  if (i1 >>> 0 >= i5 >>> 0) break; else {
   i4 = i4 + 8 | 0;
   i3 = i3 + 1 | 0;
  }
 }
 return i6 | 0;
}

function _ass_mul_bitmaps_c(i3, i6, i1, i10, i5, i7, i8, i2) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i4 = 0, i9 = 0;
 i4 = Math_imul(i2, i10) | 0;
 i9 = i1 + i4 | 0;
 if ((i4 | 0) <= 0) return;
 if (!i8) {
  do i1 = i1 + i10 | 0; while (i1 >>> 0 < i9 >>> 0);
  return;
 } else {
  i4 = i3;
  i2 = i5;
 }
 while (1) {
  i3 = 0;
  do {
   i5 = ((Math_imul(HEAPU8[i2 + i3 >> 0] | 0, HEAPU8[i1 + i3 >> 0] | 0) | 0) + 255 | 0) >>> 8 & 255;
   HEAP8[i4 + i3 >> 0] = i5;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i8 | 0));
  i1 = i1 + i10 | 0;
  if (i1 >>> 0 >= i9 >>> 0) break; else {
   i4 = i4 + i6 | 0;
   i2 = i2 + i7 | 0;
  }
 }
 return;
}

function _FcStrSerializeAlloc(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = (_strlen(i3) | 0) + 1 | 0;
 i5 = i2 + 12 + (((i3 >>> 0) % 8191 | 0) << 2) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i6 = i1;
 L1 : do if (i1 | 0) {
  while (1) {
   if ((HEAP32[i1 + 4 >> 2] | 0) == (i3 | 0)) {
    i1 = 1;
    break;
   }
   i1 = HEAP32[i1 >> 2] | 0;
   if (!i1) break L1;
  }
  return i1 | 0;
 } while (0);
 i1 = _malloc(12) | 0;
 if (!i1) {
  i6 = 0;
  return i6 | 0;
 }
 HEAP32[i1 + 4 >> 2] = i3;
 i3 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 + 8 >> 2] = i3;
 HEAP32[i1 >> 2] = i6;
 HEAP32[i5 >> 2] = i1;
 i6 = i4 & 7;
 HEAP32[i2 >> 2] = ((i6 | 0) == 0 ? 0 : 8 - i6 | 0) + i4 + i3;
 i6 = 1;
 return i6 | 0;
}

function _cycle(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i2 = i7;
 L1 : do if ((i5 | 0) >= 2) {
  i6 = i4 + (i5 << 2) | 0;
  HEAP32[i6 >> 2] = i2;
  if (i1 | 0) while (1) {
   i3 = i1 >>> 0 < 256 ? i1 : 256;
   _memcpy(i2 | 0, HEAP32[i4 >> 2] | 0, i3 | 0) | 0;
   i2 = 0;
   do {
    i8 = i4 + (i2 << 2) | 0;
    i2 = i2 + 1 | 0;
    _memcpy(HEAP32[i8 >> 2] | 0, HEAP32[i4 + (i2 << 2) >> 2] | 0, i3 | 0) | 0;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i3;
   } while ((i2 | 0) != (i5 | 0));
   i1 = i1 - i3 | 0;
   if (!i1) break L1;
   i2 = HEAP32[i6 >> 2] | 0;
  }
 } while (0);
 STACKTOP = i7;
 return;
}

function _atol(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 while (1) {
  i4 = HEAP8[i1 >> 0] | 0;
  i2 = i4 << 24 >> 24;
  i5 = i1 + 1 | 0;
  if (!(_isspace(i2) | 0)) break; else i1 = i5;
 }
 switch (i2 | 0) {
 case 45:
  {
   i1 = 1;
   i6 = 5;
   break;
  }
 case 43:
  {
   i1 = 0;
   i6 = 5;
   break;
  }
 default:
  {
   i7 = 0;
   i3 = i1;
   i1 = i4;
  }
 }
 if ((i6 | 0) == 5) {
  i7 = i1;
  i3 = i5;
  i1 = HEAP8[i5 >> 0] | 0;
 }
 i2 = (i1 << 24 >> 24) + -48 | 0;
 if (i2 >>> 0 < 10) {
  i1 = 0;
  do {
   i3 = i3 + 1 | 0;
   i1 = (i1 * 10 | 0) - i2 | 0;
   i2 = (HEAP8[i3 >> 0] | 0) + -48 | 0;
  } while (i2 >>> 0 < 10);
 } else i1 = 0;
 return (i7 | 0 ? i1 : 0 - i1 | 0) | 0;
}

function _atoi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 while (1) {
  i4 = HEAP8[i1 >> 0] | 0;
  i2 = i4 << 24 >> 24;
  i5 = i1 + 1 | 0;
  if (!(_isspace(i2) | 0)) break; else i1 = i5;
 }
 switch (i2 | 0) {
 case 45:
  {
   i1 = 1;
   i6 = 5;
   break;
  }
 case 43:
  {
   i1 = 0;
   i6 = 5;
   break;
  }
 default:
  {
   i7 = 0;
   i3 = i1;
   i1 = i4;
  }
 }
 if ((i6 | 0) == 5) {
  i7 = i1;
  i3 = i5;
  i1 = HEAP8[i5 >> 0] | 0;
 }
 i2 = (i1 << 24 >> 24) + -48 | 0;
 if (i2 >>> 0 < 10) {
  i1 = 0;
  do {
   i3 = i3 + 1 | 0;
   i1 = (i1 * 10 | 0) - i2 | 0;
   i2 = (HEAP8[i3 >> 0] | 0) + -48 | 0;
  } while (i2 >>> 0 < 10);
 } else i1 = 0;
 return (i7 | 0 ? i1 : 0 - i1 | 0) | 0;
}

function _FcComparePostScript(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0;
 i6 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = i6;
 i3 = (i3 & 1 | 0) == 0 ? i6 : (i3 & -2) + i1 | 0;
 i6 = HEAP32[i2 + 8 >> 2] | 0;
 i1 = i6;
 i1 = (i1 & 1 | 0) == 0 ? i6 : (i1 & -2) + i2 | 0;
 i6 = HEAP8[i3 >> 0] | 0;
 i5 = i6 & 255;
 i2 = HEAP8[i1 >> 0] | 0;
 i4 = i2 & 255;
 if (!((i6 << 24 >> 24 == 32 ? 1 : (((i6 + -65 & 255) < 26 ? i5 + 32 | 0 : i5) | 0) == (((i2 + -65 & 255) < 26 ? i4 + 32 | 0 : i4) | 0)) | i2 << 24 >> 24 == 32)) {
  d7 = 1.0;
  return +d7;
 }
 i5 = _FcStrMatchIgnoreCaseAndDelims(i3, i1, 354600) | 0;
 i6 = _strlen(i3) | 0;
 d7 = +((i6 - i5 | 0) >>> 0) / +(i6 >>> 0);
 return +d7;
}

function _find_charmap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = (HEAP8[i1 >> 0] | 0) == 0 ? 362407 : i1;
 i1 = 362407;
 while (1) {
  if (!(_fuzzycmp(i3, i1) | 0)) {
   i4 = 3;
   break;
  }
  i1 = i1 + ((_strlen(i1) | 0) + 1) | 0;
  do if (!(HEAP8[i1 >> 0] | 0)) {
   i2 = HEAP8[i1 + 1 >> 0] | 0;
   if ((i2 & 255) > 128) {
    i1 = i1 + 2 | 0;
    break;
   } else {
    i1 = i1 + ((((128 - (i2 & 255) | 0) >>> 2) * 5 | 0) + 2) | 0;
    break;
   }
  } while (0);
  if (!(HEAP8[i1 >> 0] | 0)) {
   i1 = -1;
   break;
  }
 }
 if ((i4 | 0) == 3) {
  if (HEAP8[i1 >> 0] | 0) do i1 = i1 + ((_strlen(i1) | 0) + 1) | 0; while ((HEAP8[i1 >> 0] | 0) != 0);
  i1 = i1 + 1 - 362407 | 0;
 }
 return i1 | 0;
}

function _T1_Get_Multi_Master(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i2 = HEAP32[i1 + 528 >> 2] | 0;
 if (!i2) {
  i4 = 6;
  return i4 | 0;
 }
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 >> 2];
 if (!i3) {
  i4 = 0;
  return i4 | 0;
 } else i1 = 0;
 do {
  HEAP32[i4 + 8 + (i1 * 12 | 0) >> 2] = HEAP32[i2 + 8 + (i1 << 2) >> 2];
  i5 = HEAP32[i2 + 88 + (i1 * 12 | 0) + 4 >> 2] | 0;
  HEAP32[i4 + 8 + (i1 * 12 | 0) + 4 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i4 + 8 + (i1 * 12 | 0) + 8 >> 2] = HEAP32[i5 + ((HEAPU8[i2 + 88 + (i1 * 12 | 0) >> 0] | 0) + -1 << 2) >> 2];
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i3 | 0));
 i1 = 0;
 return i1 | 0;
}

function _FcCharSetDestroy(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!i6) return;
 if ((HEAP32[i6 >> 2] | 0) == -1) {
  _FcCacheObjectDereference(i6);
  return;
 }
 i5 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = i5 + -1;
 if ((i5 | 0) != 1) return;
 i5 = i6 + 4 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i3 = i6;
  i4 = i6 + 8 | 0;
  i2 = 0;
  do {
   i1 = (HEAP32[i4 >> 2] | 0) + i3 | 0;
   _free(i1 + (HEAP32[i1 + (i2 << 2) >> 2] | 0) | 0);
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 >> 2] | 0;
  } while ((i2 | 0) < (i1 | 0));
 }
 if (i1 | 0) {
  i5 = i6;
  _free((HEAP32[i6 + 8 >> 2] | 0) + i5 | 0);
  _free((HEAP32[i6 + 12 >> 2] | 0) + i5 | 0);
 }
 _free(i6);
 return;
}

function _Horizontal_Sweep_Span(i5, i6, i3, i4, i1, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 if ((i4 - i3 | 0) >= (i1 | 0)) return;
 i2 = 0 - i1 | 0;
 i1 = i3 + -1 + i1 & i2;
 if ((i1 | 0) != (i2 & i4 | 0)) return;
 i1 = i1 >> HEAP32[i5 >> 2];
 if ((i1 | 0) <= -1) return;
 i2 = HEAP32[i5 + 104 >> 2] | 0;
 if (i1 >>> 0 >= i2 >>> 0) return;
 i4 = i6 << 16 >> 16;
 i3 = HEAP32[i5 + 112 >> 2] | 0;
 i6 = (HEAP32[i5 + 60 >> 2] | 0) + (i4 >> 3) + (Math_imul(i3, 0 - i1 | 0) | 0) | 0;
 i5 = i6 + (Math_imul(i3, i2 + -1 | 0) | 0) | 0;
 i6 = (i3 | 0) > 0 ? i5 : i6;
 HEAP8[i6 >> 0] = HEAPU8[i6 >> 0] | 0 | 128 >>> (i4 & 7);
 return;
}

function _prolog1(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 switch (i2 | 0) {
 case 14:
 case 15:
  {
   i1 = 0;
   break;
  }
 case 11:
  {
   i1 = 55;
   break;
  }
 case 13:
  {
   i1 = 56;
   break;
  }
 case 16:
  {
   if (!(FUNCTION_TABLE_iiiii[HEAP32[i5 + 28 >> 2] & 127](i5, i3 + (HEAP32[i5 + 68 >> 2] << 1) | 0, i4, 345274) | 0)) i6 = 8; else {
    HEAP32[i1 >> 2] = 40;
    i1 = 3;
   }
   break;
  }
 case 29:
  {
   HEAP32[i1 >> 2] = 41;
   i1 = 2;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else i6 = 8;
 }
 if ((i6 | 0) == 8) {
  HEAP32[i1 >> 2] = 41;
  i1 = -1;
 }
 return i1 | 0;
}

function _ft_glyphslot_alloc_bitmap(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = HEAP32[(HEAP32[i5 + 4 >> 2] | 0) + 100 >> 2] | 0;
 i1 = (HEAP32[i5 + 156 >> 2] | 0) + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 1)) HEAP32[i1 >> 2] = i2 | 1; else {
  i1 = i5 + 88 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
  HEAP32[i1 >> 2] = 0;
 }
 if ((i4 | 0) > 0) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i3 + 4 >> 2] & 255](i3, i4) | 0;
  if (!i1) {
   i2 = 0;
   i1 = 64;
  } else {
   _memset(i1 | 0, 0, i4 | 0) | 0;
   i2 = i1;
   i1 = 0;
  }
 } else {
  i2 = 0;
  i1 = i4 | 0 ? 6 : 0;
 }
 HEAP32[i5 + 88 >> 2] = i2;
 return i1 | 0;
}

function ___fflush_unlocked(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 28 | 0;
 if ((HEAP32[i6 >> 2] | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i5 + 36 >> 2] & 127](i5, 0, 0) | 0;
  if (!(HEAP32[i6 >> 2] | 0)) i1 = -1; else i2 = 3;
 } else i2 = 3;
 if ((i2 | 0) == 3) {
  i1 = i5 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = i5 + 8 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if (i2 >>> 0 < i4 >>> 0) FUNCTION_TABLE_iiii[HEAP32[i5 + 40 >> 2] & 127](i5, i2 - i4 | 0, 1) | 0;
  HEAP32[i5 + 16 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  i1 = 0;
 }
 return i1 | 0;
}

function _ft_lzw_stream_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = i1 + 12 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (!i6) return;
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 i4 = HEAP32[i6 + 180 >> 2] | 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 36 >> 2] = 0;
 HEAP32[i6 + 40 >> 2] = 0;
 HEAP8[i6 + 44 >> 0] = 0;
 HEAP32[i6 + 48 >> 2] = 0;
 HEAP32[i6 + 104 >> 2] = 0;
 HEAP32[i6 + 64 >> 2] = 9;
 HEAP32[i6 + 12 >> 2] = 0;
 i1 = i6 + 100 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i6 + 112 | 0)) {
  _ft_mem_free(i4, i2);
  HEAP32[i1 >> 2] = 0;
 }
 _ft_mem_free(i4, HEAP32[i6 + 88 >> 2] | 0);
 _memset(i6 | 0, 0, 184) | 0;
 _ft_mem_free(i3, i6);
 HEAP32[i5 >> 2] = 0;
 return;
}

function _utf8_toUtf8(i1, i5, i2, i6, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i3 = 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i4 = i4 - i1 | 0;
 L1 : do if ((i2 - i3 | 0) > (i4 | 0)) {
  i2 = i3 + i4 | 0;
  while (1) {
   if (i2 >>> 0 <= i3 >>> 0) break L1;
   i4 = i2 + -1 | 0;
   if ((HEAP8[i4 >> 0] & -64) << 24 >> 24 == -128) i2 = i4; else break;
  }
 } while (0);
 if ((i3 | 0) == (i2 | 0)) {
  i4 = i1;
  HEAP32[i5 >> 2] = i3;
  HEAP32[i6 >> 2] = i4;
  return;
 }
 do {
  HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i1 = i1 + 1 | 0;
 } while ((i3 | 0) != (i2 | 0));
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = i1;
 return;
}

function _FcLangSetEqual(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[((HEAP32[i2 + 4 >> 2] | 0) >>> 0 < (HEAP32[i4 + 4 >> 2] | 0) >>> 0 ? i2 : i4) + 4 >> 2] | 0;
 i3 = (i1 | 0) < 8 ? i1 : 8;
 L1 : do if ((i1 | 0) > 0) {
  i1 = 0;
  while (1) {
   if ((HEAP32[i2 + 8 + (i1 << 2) >> 2] | 0) != (HEAP32[i4 + 8 + (i1 << 2) >> 2] | 0)) {
    i1 = 0;
    break;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i3 | 0)) break L1;
  }
  return i1 | 0;
 } while (0);
 i3 = HEAP32[i2 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = (i1 | 0) == 0;
 if (!i3) {
  i4 = i2 & 1;
  return i4 | 0;
 }
 if (i2) {
  i4 = 0;
  return i4 | 0;
 }
 i4 = _FcStrSetEqual(i3, i1) | 0;
 return i4 | 0;
}

function _FcSerializeAlloc(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 i5 = i2 + 12 + (((i3 >>> 0) % 8191 | 0) << 2) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i6 = i1;
 L1 : do if (i1 | 0) {
  while (1) {
   if ((HEAP32[i1 + 4 >> 2] | 0) == (i3 | 0)) {
    i1 = 1;
    break;
   }
   i1 = HEAP32[i1 >> 2] | 0;
   if (!i1) break L1;
  }
  return i1 | 0;
 } while (0);
 i1 = _malloc(12) | 0;
 if (!i1) {
  i6 = 0;
  return i6 | 0;
 }
 HEAP32[i1 + 4 >> 2] = i3;
 i3 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 + 8 >> 2] = i3;
 HEAP32[i1 >> 2] = i6;
 HEAP32[i5 >> 2] = i1;
 i6 = i4 & 7;
 HEAP32[i2 >> 2] = ((i6 | 0) == 0 ? 0 : 8 - i6 | 0) + i4 + i3;
 i6 = 1;
 return i6 | 0;
}

function _FcValueListDestroy(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!i1) return;
 do {
  switch (HEAP32[i1 + 8 >> 2] | 0) {
  case 3:
   {
    _free(HEAP32[i1 + 16 >> 2] | 0);
    break;
   }
  case 5:
   {
    _FcMatrixFree(HEAP32[i1 + 16 >> 2] | 0);
    break;
   }
  case 6:
   {
    _FcCharSetDestroy(HEAP32[i1 + 16 >> 2] | 0);
    break;
   }
  case 8:
   {
    _FcLangSetDestroy(HEAP32[i1 + 16 >> 2] | 0);
    break;
   }
  case 9:
   {
    _FcRangeDestroy(HEAP32[i1 + 16 >> 2] | 0);
    break;
   }
  default:
   {}
  }
  i4 = HEAP32[i1 >> 2] | 0;
  i3 = i4;
  i2 = i1;
  i1 = (i3 & 1 | 0) == 0 ? i4 : (i3 & -2) + i1 | 0;
  _free(i2);
 } while ((i1 | 0) != 0);
 return;
}

function _FT_Stream_Open(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if (!i2) {
  i5 = 40;
  return i5 | 0;
 }
 i3 = i2 + 12 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = i1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i4 = i2 + 20 | 0;
 HEAP32[i4 >> 2] = 0;
 i5 = i2 + 24 | 0;
 HEAP32[i5 >> 2] = 0;
 i1 = _fopen(i1, 357116) | 0;
 if (!i1) {
  i5 = 1;
  return i5 | 0;
 }
 _fseek(i1, 0, 2) | 0;
 i6 = _ftell(i1) | 0;
 HEAP32[i2 + 4 >> 2] = i6;
 if (!i6) {
  _fclose(i1) | 0;
  i6 = 81;
  return i6 | 0;
 } else {
  _fseek(i1, 0, 0) | 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i4 >> 2] = 63;
  HEAP32[i5 >> 2] = 57;
  i6 = 0;
  return i6 | 0;
 }
 return 0;
}

function _element6(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 39;
   break;
  }
 case 23:
  {
   i1 = i1 + 4 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
   i1 = 44;
   break;
  }
 case 41:
 case 18:
  {
   HEAP32[i1 >> 2] = 69;
   i1 = 51;
   break;
  }
 case 30:
  {
   HEAP32[i1 >> 2] = 69;
   i1 = 53;
   break;
  }
 case 31:
  {
   HEAP32[i1 >> 2] = 69;
   i1 = 52;
   break;
  }
 case 32:
  {
   HEAP32[i1 >> 2] = 69;
   i1 = 54;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _t1_cmap_std_char_index(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 if (i1 >>> 0 >= 256) {
  i5 = 0;
  return i5 | 0;
 }
 i4 = FUNCTION_TABLE_ii[HEAP32[i2 + 20 >> 2] & 63](HEAPU16[(HEAP32[i2 + 16 >> 2] | 0) + (i1 << 1) >> 1] | 0) | 0;
 i5 = HEAP32[i2 + 24 >> 2] | 0;
 if (!i5) {
  i5 = 0;
  return i5 | 0;
 }
 i2 = HEAP32[i2 + 28 >> 2] | 0;
 i1 = 0;
 while (1) {
  i3 = HEAP32[i2 + (i1 << 2) >> 2] | 0;
  if (i3 | 0) if ((HEAP8[i3 >> 0] | 0) == (HEAP8[i4 >> 0] | 0)) if (!(_strcmp(i3, i4) | 0)) {
   i2 = 8;
   break;
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= i5 >>> 0) {
   i1 = 0;
   i2 = 8;
   break;
  }
 }
 if ((i2 | 0) == 8) return i1 | 0;
 return 0;
}

function _Dual_Project(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = HEAP16[i1 + 290 >> 1] | 0;
 i6 = HEAP16[i1 + 292 >> 1] | 0;
 i5 = Math_imul(i7, i2 & 65535) | 0;
 i7 = Math_imul(i7, i2 >> 16) | 0;
 i1 = (i7 << 16) + i5 | 0;
 i4 = Math_imul(i6, i3 & 65535) | 0;
 i6 = Math_imul(i6, i3 >> 16) | 0;
 i3 = (i6 << 16) + i4 | 0;
 i2 = i3 + i1 | 0;
 i1 = (i7 >> 16) + (i5 >> 31) + (i4 >> 31) + (i6 >> 16) + (i1 >>> 0 < i5 >>> 0 & 1) + (i3 >>> 0 < i4 >>> 0 & 1) + (i2 >>> 0 < i1 >>> 0 & 1) | 0;
 i4 = i1 >> 31;
 i3 = i4 + i2 | 0;
 return i4 + i1 + (i3 >>> 0 < i2 >>> 0 & 1) + (i3 >>> 0 > 4294959103 & 1) << 18 | (i3 + 8192 | 0) >>> 14 | 0;
}

function _af_indic_hints_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i1 + 2988 >> 2] = i2;
 i5 = HEAP32[i2 + 28 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 1616 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 1620 >> 2];
 i6 = HEAP32[i2 + 24 >> 2] | 0;
 i4 = (i6 | 0) == 2;
 i3 = (i6 | 1 | 0) == 3 & 1;
 i3 = i4 | (i6 | 0) == 4 ? i3 | 2 : i3;
 i3 = (i6 | 0) == 1 ? i3 : i3 | 4;
 HEAP32[i1 + 2980 >> 2] = ((HEAP8[(HEAP32[(HEAP32[i2 + 36 >> 2] | 0) + 212 >> 2] | 0) + 20 >> 0] | 0) == 0 ? 12 : 4) | i5;
 HEAP32[i1 + 2984 >> 2] = i4 ? i3 | 8 : i3;
 return 0;
}

function _ass_stripe_unpack_c(i1, i2, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0;
 if (!i9) return;
 i10 = i9 << 4;
 if (!i8) return; else i6 = 0;
 while (1) {
  i3 = 0;
  i4 = i1;
  while (1) {
   i5 = 0;
   do {
    i11 = HEAPU8[i2 + (i5 + i3) >> 0] | 0;
    HEAP16[i4 + (i5 << 1) >> 1] = ((i11 << 7 | i11 >>> 1) + 1 | 0) >>> 1;
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != 16);
   i3 = i3 + 16 | 0;
   if (i3 >>> 0 >= i8 >>> 0) break; else i4 = i4 + (i10 << 1) | 0;
  }
  i6 = i6 + 1 | 0;
  if ((i6 | 0) == (i9 | 0)) break; else {
   i1 = i1 + 32 | 0;
   i2 = i2 + i7 | 0;
  }
 }
 return;
}

function _af_cjk_hints_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i1 + 2988 >> 2] = i2;
 i5 = HEAP32[i2 + 28 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 1616 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 1620 >> 2];
 i6 = HEAP32[i2 + 24 >> 2] | 0;
 i4 = (i6 | 0) == 2;
 i3 = (i6 | 1 | 0) == 3 & 1;
 i3 = i4 | (i6 | 0) == 4 ? i3 | 2 : i3;
 i3 = (i6 | 0) == 1 ? i3 : i3 | 4;
 HEAP32[i1 + 2980 >> 2] = ((HEAP8[(HEAP32[(HEAP32[i2 + 36 >> 2] | 0) + 212 >> 2] | 0) + 20 >> 0] | 0) == 0 ? 12 : 4) | i5;
 HEAP32[i1 + 2984 >> 2] = i4 ? i3 | 8 : i3;
 return 0;
}

function _FcConfigXdgConfigHome() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = _getenv(354289) | 0;
 if (!1) {
  i3 = 0;
  return i3 | 0;
 }
 if (i1 | 0) {
  i3 = _FcStrCopy(i1) | 0;
  return i3 | 0;
 }
 i1 = _getenv(347408) | 0;
 if (!i1) i2 = 0; else i2 = _strlen(i1) | 0;
 i3 = _malloc(i2 + 9 | 0) | 0;
 if (!i3) {
  i3 = 0;
  return i3 | 0;
 }
 _memcpy(i3 | 0, i1 | 0, i2 | 0) | 0;
 i1 = i3 + i2 | 0;
 i4 = i1;
 HEAP8[i4 >> 0] = 47;
 HEAP8[i4 + 1 >> 0] = 46;
 HEAP8[i4 + 2 >> 0] = 99;
 HEAP8[i4 + 3 >> 0] = 111;
 i1 = i1 + 4 | 0;
 HEAP8[i1 >> 0] = 110;
 HEAP8[i1 + 1 >> 0] = 102;
 HEAP8[i1 + 2 >> 0] = 105;
 HEAP8[i1 + 3 >> 0] = 103;
 HEAP8[i3 + (i2 + 8) >> 0] = 0;
 return i3 | 0;
}

function _frexp(d1, i5) {
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i4 = _bitshift64Lshr(i2 | 0, i3 | 0, 52) | 0;
 switch (i4 & 2047) {
 case 0:
  {
   if (d1 != 0.0) {
    d1 = +_frexp(d1 * 18446744073709551616.0, i5);
    i2 = (HEAP32[i5 >> 2] | 0) + -64 | 0;
   } else i2 = 0;
   HEAP32[i5 >> 2] = i2;
   break;
  }
 case 2047:
  break;
 default:
  {
   HEAP32[i5 >> 2] = (i4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = i2;
   HEAP32[tempDoublePtr + 4 >> 2] = i3 & -2146435073 | 1071644672;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +d1;
}

function _Project(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = HEAP16[i1 + 294 >> 1] | 0;
 i6 = HEAP16[i1 + 296 >> 1] | 0;
 i5 = Math_imul(i7, i2 & 65535) | 0;
 i7 = Math_imul(i7, i2 >> 16) | 0;
 i1 = (i7 << 16) + i5 | 0;
 i4 = Math_imul(i6, i3 & 65535) | 0;
 i6 = Math_imul(i6, i3 >> 16) | 0;
 i3 = (i6 << 16) + i4 | 0;
 i2 = i3 + i1 | 0;
 i1 = (i7 >> 16) + (i5 >> 31) + (i4 >> 31) + (i6 >> 16) + (i1 >>> 0 < i5 >>> 0 & 1) + (i3 >>> 0 < i4 >>> 0 & 1) + (i2 >>> 0 < i1 >>> 0 & 1) | 0;
 i4 = i1 >> 31;
 i3 = i4 + i2 | 0;
 return i4 + i1 + (i3 >>> 0 < i2 >>> 0 & 1) + (i3 >>> 0 > 4294959103 & 1) << 18 | (i3 + 8192 | 0) >>> 14 | 0;
}

function _alloc_bitmap(i1, i4, i5, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i2 = 0, i6 = 0;
 i6 = _malloc(24) | 0;
 if (!i6) {
  i6 = 0;
  return i6 | 0;
 }
 i1 = 1 << HEAP32[i1 >> 2];
 i2 = 0 - i1 | 0;
 i2 = i4 >>> 0 > i2 >>> 0 ? i4 : i4 + -1 + i1 & i2;
 if (i2 >>> 0 <= (2147483615 / (((i5 | 0) > 1 ? i5 : 1) >>> 0) | 0) >>> 0) {
  i1 = _ass_aligned_alloc(i1, (Math_imul(i2, i5) | 0) + 32 | 0, i3) | 0;
  if (i1 | 0) {
   HEAP32[i6 + 8 >> 2] = i4;
   HEAP32[i6 + 12 >> 2] = i5;
   HEAP32[i6 + 16 >> 2] = i2;
   HEAP32[i6 + 20 >> 2] = i1;
   HEAP32[i6 + 4 >> 2] = 0;
   HEAP32[i6 >> 2] = 0;
   return i6 | 0;
  }
 }
 _free(i6);
 i6 = 0;
 return i6 | 0;
}

function _ft_corner_is_flat(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = i3 + i1 | 0;
 i9 = i4 + i2 | 0;
 i6 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 i5 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
 i7 = (i6 | 0) > (i5 | 0);
 i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
 i2 = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
 i1 = (i3 | 0) > (i2 | 0);
 i8 = (i8 | 0) < 0 ? 0 - i8 | 0 : i8;
 i4 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
 i9 = (i8 | 0) > (i4 | 0);
 i4 = ((i9 ? i4 : i8) * 3 >> 3) + (i9 ? i8 : i4) | 0;
 return (((i7 ? i5 : i6) * 3 >> 3) + (i7 ? i6 : i5) + (i1 ? i3 : i2) + ((i1 ? i2 : i3) * 3 >> 3) - i4 | 0) < (i4 >> 4 | 0) | 0;
}

function _raccess_make_file_name(i2, i1, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0;
 i3 = _strlen(i1) | 0;
 i3 = i3 + 1 + (_strlen(i4) | 0) | 0;
 do if ((i3 | 0) > 0) {
  i2 = FUNCTION_TABLE_iii[HEAP32[i2 + 4 >> 2] & 255](i2, i3) | 0;
  if (!i2) {
   i4 = 0;
   return i4 | 0;
  } else {
   _memset(i2 | 0, 0, i3 | 0) | 0;
   break;
  }
 } else if (!i3) i2 = 0; else {
  i4 = 0;
  return i4 | 0;
 } while (0);
 i3 = _strrchr(i1, 47) | 0;
 if (!i3) HEAP8[i2 >> 0] = 0; else {
  i5 = i3 - i1 + 1 | 0;
  _strncpy(i2, i1, i5) | 0;
  HEAP8[i2 + i5 >> 0] = 0;
  i1 = i3 + 1 | 0;
 }
 _strcat(i2, i4) | 0;
 _strcat(i2, i1) | 0;
 i5 = i2;
 return i5 | 0;
}

function _utf8_isInvalid4(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAPU8[i2 + 3 >> 0] | 0;
 if ((i3 & 128 | 0) == 0 | (i3 & 192 | 0) == 192) {
  i3 = 1;
  i3 = i3 & 1;
  return i3 | 0;
 }
 i3 = HEAPU8[i2 + 2 >> 0] | 0;
 if ((i3 & 128 | 0) == 0 | (i3 & 192 | 0) == 192) {
  i3 = 1;
  i3 = i3 & 1;
  return i3 | 0;
 }
 i3 = HEAP8[i2 >> 0] | 0;
 i1 = HEAP8[i2 + 1 >> 0] | 0;
 i2 = i1 & 255;
 if (i3 << 24 >> 24 == -16) {
  i3 = (i1 & 255) < 144 | (i2 & 192 | 0) == 192;
  i3 = i3 & 1;
  return i3 | 0;
 } else {
  i3 = (i2 & 128 | 0) == 0 ? 1 : i3 << 24 >> 24 == -12 ? (i1 & 255) > 143 : (i2 & 192 | 0) == 192;
  i3 = i3 & 1;
  return i3 | 0;
 }
 return 0;
}

function _Split_Conic(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = i1 + 16 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 + 32 >> 2] = i3;
 i5 = i1 + 8 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 i3 = (i4 + i3 | 0) / 2 | 0;
 HEAP32[i1 + 24 >> 2] = i3;
 i4 = ((HEAP32[i1 >> 2] | 0) + i4 | 0) / 2 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i2 >> 2] = (i4 + i3 | 0) / 2 | 0;
 i2 = i1 + 20 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 + 36 >> 2] = i3;
 i4 = i1 + 12 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i3 = (i5 + i3 | 0) / 2 | 0;
 HEAP32[i1 + 28 >> 2] = i3;
 i1 = ((HEAP32[i1 + 4 >> 2] | 0) + i5 | 0) / 2 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i2 >> 2] = (i1 + i3 | 0) / 2 | 0;
 return;
}

function _FT_Lookup_Renderer(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if (!i1) {
  i6 = 0;
  return i6 | 0;
 }
 i1 = HEAP32[i1 + 148 >> 2] | 0;
 i3 = (i5 | 0) != 0;
 if (i3) {
  i2 = HEAP32[i5 >> 2] | 0;
  if (i2) i1 = HEAP32[i2 + 4 >> 2] | 0;
  HEAP32[i5 >> 2] = 0;
 }
 if (!i1) {
  i6 = 0;
  return i6 | 0;
 }
 while (1) {
  i2 = HEAP32[i1 + 8 >> 2] | 0;
  if ((HEAP32[i2 + 16 >> 2] | 0) == (i4 | 0)) break;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i6 = 11;
   break;
  }
 }
 if ((i6 | 0) == 11) return i1 | 0;
 if (!i3) {
  i6 = i2;
  return i6 | 0;
 }
 HEAP32[i5 >> 2] = i1;
 i6 = i2;
 return i6 | 0;
}

function _externalSubset1(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i6 = 0;
 switch (i1 | 0) {
 case 33:
  {
   HEAP32[i5 >> 2] = 63;
   i1 = 0;
   break;
  }
 case 34:
  {
   i1 = i5 + 12 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) i6 = 7; else {
    HEAP32[i1 >> 2] = i2 + -1;
    i1 = 0;
   }
   break;
  }
 case 15:
  {
   i1 = 0;
   break;
  }
 case 26:
  {
   i6 = 7;
   break;
  }
 case -4:
  {
   if (!(HEAP32[i5 + 12 >> 2] | 0)) i1 = 0; else i6 = 7;
   break;
  }
 default:
  i1 = _internalSubset(i5, i1, i2, i3, i4) | 0;
 }
 if ((i6 | 0) == 7) {
  HEAP32[i5 >> 2] = 41;
  i1 = -1;
 }
 return i1 | 0;
}

function _FcConfigAddDirList(i3, i4, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 i6 = _FcStrListCreate(i5) | 0;
 if (!i6) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 } else i2 = 0;
 L3 : while (1) {
  do {
   i1 = _FcStrListNext(i6) | 0;
   if (!i1) break L3;
   if (HEAP32[91917] & 8 | 0) {
    HEAP32[i7 >> 2] = i1;
    _printf(347379, i7) | 0;
   }
   i1 = _FcDirCacheRead(i1, 0, i3) | 0;
  } while (!(i1 | 0));
  _FcConfigAddCache(i3, i1, i4, i5) | 0;
  _FcDirCacheUnload(i1);
  i2 = 1;
 }
 _FcStrListDone(i6);
 i7 = i2;
 STACKTOP = i8;
 return i7 | 0;
}

function _ps_unicodes_char_index(i2, i6) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP32[i2 + 20 >> 2] | 0;
 i1 = 0;
 i5 = i3;
 i3 = i3 + (HEAP32[i2 + 16 >> 2] << 3) + -8 | 0;
 while (1) {
  if (i5 >>> 0 > i3 >>> 0) break;
  i4 = i5 + (i3 - i5 >> 4 << 3) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) == (i6 | 0)) {
   i1 = i4;
   break;
  }
  i2 = i2 & 2147483647;
  i1 = (i2 | 0) == (i6 | 0) ? i4 : i1;
  i2 = i2 >>> 0 < i6 >>> 0;
  if ((i5 | 0) == (i3 | 0)) break; else {
   i5 = i2 ? i4 + 8 | 0 : i5;
   i3 = i2 ? i3 : i4 + -8 | 0;
  }
 }
 if (!i1) {
  i6 = 0;
  return i6 | 0;
 }
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 return i6 | 0;
}

function _ft_glyphslot_set_bitmap(i3, i7) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = i3 + 156 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if (i2 | 0) {
  i1 = HEAP32[i2 + 4 >> 2] | 0;
  if (i1 & 1 | 0) {
   i4 = HEAP32[(HEAP32[i3 + 4 >> 2] | 0) + 100 >> 2] | 0;
   i6 = i3 + 88 | 0;
   i3 = HEAP32[i6 >> 2] | 0;
   if (i3) {
    FUNCTION_TABLE_vii[HEAP32[i4 + 8 >> 2] & 63](i4, i3);
    i1 = HEAP32[i5 >> 2] | 0;
    i2 = i1;
    i1 = HEAP32[i1 + 4 >> 2] | 0;
   }
   HEAP32[i6 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = i1 & -2;
   HEAP32[i6 >> 2] = i7;
   return;
  }
 }
 i6 = i3 + 88 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 >> 2] = i7;
 return;
}

function _af_face_globals_free(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 if (!i4) return;
 i5 = HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] | 0;
 i3 = 0;
 do {
  i6 = i4 + 16 + (i3 << 2) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (i1 | 0) {
   i2 = HEAP32[(HEAP32[23472 + (HEAP32[(HEAP32[23492 + (i3 << 2) >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0) + 16 >> 2] | 0;
   if (i2) {
    FUNCTION_TABLE_vi[i2 & 127](i1);
    i1 = HEAP32[i6 >> 2] | 0;
   }
   _ft_mem_free(i5, i1);
   HEAP32[i6 >> 2] = 0;
  }
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 49);
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 _ft_mem_free(i5, i4);
 return;
}

function _FcFontSetSerializeAlloc(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 if (!(_FcSerializeAlloc(i2, i3, 12) | 0)) {
  i4 = 0;
  return i4 | 0;
 }
 i4 = i3 + 8 | 0;
 if (!(_FcSerializeAlloc(i2, HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] << 2) | 0)) {
  i4 = 0;
  return i4 | 0;
 }
 if ((HEAP32[i3 >> 2] | 0) > 0) i1 = 0; else {
  i4 = 1;
  return i4 | 0;
 }
 while (1) {
  if (!(_FcPatternSerializeAlloc(i2, HEAP32[(HEAP32[i4 >> 2] | 0) + (i1 << 2) >> 2] | 0) | 0)) {
   i1 = 0;
   i2 = 6;
   break;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (HEAP32[i3 >> 2] | 0)) {
   i1 = 1;
   i2 = 6;
   break;
  }
 }
 if ((i2 | 0) == 6) return i1 | 0;
 return 0;
}

function ___divdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i9 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i6 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i5 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i8 = _i64Subtract(i10 ^ i1 | 0, i9 ^ i2 | 0, i10 | 0, i9 | 0) | 0;
 i7 = tempRet0;
 i1 = i6 ^ i10;
 i2 = i5 ^ i9;
 return _i64Subtract((___udivmoddi4(i8, i7, _i64Subtract(i6 ^ i3 | 0, i5 ^ i4 | 0, i6 | 0, i5 | 0) | 0, tempRet0, 0) | 0) ^ i1 | 0, tempRet0 ^ i2 | 0, i1 | 0, i2 | 0) | 0;
}

function _FT_Done_GlyphSlot(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 if (!i6) return;
 i4 = HEAP32[i6 + 4 >> 2] | 0;
 i7 = HEAP32[(HEAP32[i4 + 96 >> 2] | 0) + 8 >> 2] | 0;
 i4 = i4 + 84 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = 0;
 while (1) {
  if (!i1) {
   i5 = 8;
   break;
  }
  i3 = HEAP32[i1 + 8 >> 2] | 0;
  if ((i1 | 0) == (i6 | 0)) break; else {
   i2 = i1;
   i1 = i3;
  }
 }
 if ((i5 | 0) == 8) return;
 HEAP32[((i2 | 0) == 0 ? i4 : i2 + 8 | 0) >> 2] = i3;
 i1 = HEAP32[i6 + 20 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[i1 & 127](i6);
 _ft_glyphslot_done(i6);
 FUNCTION_TABLE_vii[HEAP32[i7 + 8 >> 2] & 63](i7, i6);
 return;
}

function _notation1(i2, i1, i3, i4, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i1 | 0) {
 case 18:
  {
   i1 = i5 + 28 | 0;
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345282) | 0) {
    HEAP32[i2 >> 2] = 58;
    i5 = 17;
    return i5 | 0;
   }
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345289) | 0) {
    HEAP32[i2 >> 2] = 59;
    i5 = 17;
    return i5 | 0;
   }
   break;
  }
 case 15:
  {
   i5 = 17;
   return i5 | 0;
  }
 default:
  if ((i1 | 0) == 28 & (HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i5 = 59;
   return i5 | 0;
  }
 }
 HEAP32[i2 >> 2] = 41;
 i5 = -1;
 return i5 | 0;
}

function _cff_sid_to_glyph_name(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 + 656 >> 2] | 0;
 i1 = HEAP16[(HEAP32[i3 + 1160 >> 2] | 0) + (i2 << 1) >> 1] | 0;
 i2 = i1 & 65535;
 if (i1 << 16 >> 16 == -1) {
  i3 = 0;
  return i3 | 0;
 }
 if ((i1 & 65535) > 390) {
  i1 = i2 + -391 | 0;
  if ((HEAP32[i3 + 1312 >> 2] | 0) >>> 0 <= i1 >>> 0) {
   i3 = 0;
   return i3 | 0;
  }
  i3 = HEAP32[(HEAP32[i3 + 1316 >> 2] | 0) + (i1 << 2) >> 2] | 0;
  return i3 | 0;
 } else {
  i1 = HEAP32[i3 + 2956 >> 2] | 0;
  if (!i1) {
   i3 = 0;
   return i3 | 0;
  }
  i3 = FUNCTION_TABLE_ii[HEAP32[i1 + 20 >> 2] & 63](i2) | 0;
  return i3 | 0;
 }
 return 0;
}

function _condSect0(i2, i1, i3, i4, i5) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i1 | 0) {
 case 18:
  {
   i1 = i5 + 28 | 0;
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345328) | 0) {
    HEAP32[i2 >> 2] = 64;
    i5 = 0;
    return i5 | 0;
   }
   if (FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](i5, i3, i4, 345336) | 0) {
    HEAP32[i2 >> 2] = 65;
    i5 = 0;
    return i5 | 0;
   }
   break;
  }
 case 15:
  {
   i5 = 0;
   return i5 | 0;
  }
 default:
  if ((i1 | 0) == 28 & (HEAP32[i2 + 16 >> 2] | 0) == 0) {
   i5 = 59;
   return i5 | 0;
  }
 }
 HEAP32[i2 >> 2] = 41;
 i5 = -1;
 return i5 | 0;
}

function _T42_Size_Request(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = HEAP32[i2 >> 2] | 0;
 _FT_Activate_Size(HEAP32[i2 + 44 >> 2] | 0) | 0;
 i3 = i3 + 500 | 0;
 i1 = _FT_Request_Size(HEAP32[i3 >> 2] | 0, i1) | 0;
 if (i1 | 0) return i1 | 0;
 i2 = i2 + 12 | 0;
 i3 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] | 0) + 12 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
 return i1 | 0;
}

function _T42_Size_Select(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = HEAP32[i2 >> 2] | 0;
 _FT_Activate_Size(HEAP32[i2 + 44 >> 2] | 0) | 0;
 i3 = i3 + 500 | 0;
 i1 = _FT_Select_Size(HEAP32[i3 >> 2] | 0, i1) | 0;
 if (i1 | 0) return i1 | 0;
 i2 = i2 + 12 | 0;
 i3 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] | 0) + 12 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
 return i1 | 0;
}

function _FcConfigFileExists(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i1 = (i1 | 0) == 0 ? 369704 : i1;
 i2 = _strlen(i1) | 0;
 i2 = _malloc(i2 + 5 + (_strlen(i3) | 0) & -4) | 0;
 if (!i2) {
  i4 = 0;
  return i4 | 0;
 }
 _strcpy(i2, i1) | 0;
 if (!(HEAP8[i2 >> 0] | 0)) i4 = 4; else {
  i1 = i2 + ((_strlen(i2) | 0) + -1) | 0;
  if ((HEAP8[i1 >> 0] | 0) != 47) i4 = 4;
 }
 if ((i4 | 0) == 4) if ((HEAP8[i3 >> 0] | 0) != 47) {
  i4 = i2 + (_strlen(i2) | 0) | 0;
  HEAP8[i4 >> 0] = 47;
  HEAP8[i4 + 1 >> 0] = 0;
 }
 _strcat(i2, i3) | 0;
 if (!(_access(i2, 4) | 0)) {
  i4 = i2;
  return i4 | 0;
 }
 _FcStrFree(i2);
 i4 = 0;
 return i4 | 0;
}

function _fstat(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i7 + 40 | 0;
 i4 = i7 + 8 | 0;
 i2 = i7;
 HEAP32[i2 >> 2] = i3;
 HEAP32[i2 + 4 >> 2] = i1;
 i2 = ___syscall197(197, i2 | 0) | 0;
 if ((i2 | 0) == -9) {
  HEAP32[i4 >> 2] = i3;
  HEAP32[i4 + 4 >> 2] = 1;
  if ((___syscall221(221, i4 | 0) | 0) < 0) i6 = 3; else {
   ___procfdname(i4, i3);
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = i1;
   i1 = ___syscall_ret(___syscall195(195, i5 | 0) | 0) | 0;
  }
 } else i6 = 3;
 if ((i6 | 0) == 3) i1 = ___syscall_ret(i2) | 0;
 STACKTOP = i7;
 return i1 | 0;
}

function _strtox_469(i6, i7, i1) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i5 = i8;
 i3 = i5;
 i4 = i3 + 124 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 i3 = i5 + 4 | 0;
 HEAP32[i3 >> 2] = i6;
 i4 = i5 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i5 + 44 >> 2] = i6;
 HEAP32[i5 + 76 >> 2] = -1;
 ___shlim(i5, 0);
 d2 = +___floatscan(i5, i1, 1);
 i1 = (HEAP32[i3 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 + 108 >> 2] | 0) | 0;
 if (i7 | 0) HEAP32[i7 >> 2] = i1 | 0 ? i6 + i1 | 0 : i6;
 STACKTOP = i8;
 return +d2;
}

function _little2_nameMatchesAscii(i1, i3, i5, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 i4 = HEAP8[i2 >> 0] | 0;
 i1 = (i3 | 0) == (i5 | 0);
 L1 : do if (i4 << 24 >> 24) {
  while (1) {
   if (i1) {
    i1 = 0;
    i2 = 7;
    break;
   }
   if (HEAP8[i3 + 1 >> 0] | 0) {
    i1 = 0;
    i2 = 7;
    break;
   }
   if ((HEAP8[i3 >> 0] | 0) != i4 << 24 >> 24) {
    i1 = 0;
    i2 = 7;
    break;
   }
   i3 = i3 + 2 | 0;
   i2 = i2 + 1 | 0;
   i4 = HEAP8[i2 >> 0] | 0;
   i1 = (i3 | 0) == (i5 | 0);
   if (!(i4 << 24 >> 24)) break L1;
  }
  if ((i2 | 0) == 7) return i1 | 0;
 } while (0);
 i5 = i1 & 1;
 return i5 | 0;
}

function _FT_Get_Module_Interface(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 if (!((i1 | 0) != 0 & (i4 | 0) != 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = i1 + 20 + (i3 << 2) | 0;
 if ((i3 | 0) <= 0) {
  i6 = 0;
  return i6 | 0;
 }
 i1 = i1 + 20 | 0;
 while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i1 = i1 + 4 | 0;
  if (!(_strcmp(HEAP32[i3 + 8 >> 2] | 0, i4) | 0)) break;
  if (i1 >>> 0 >= i5 >>> 0) {
   i1 = 0;
   i6 = 8;
   break;
  }
 }
 if ((i6 | 0) == 8) return i1 | 0;
 if (!i2) {
  i6 = 0;
  return i6 | 0;
 }
 i6 = HEAP32[i3 + 20 >> 2] | 0;
 return i6 | 0;
}

function _big2_nameMatchesAscii(i1, i3, i5, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 i4 = HEAP8[i2 >> 0] | 0;
 i1 = (i3 | 0) == (i5 | 0);
 L1 : do if (i4 << 24 >> 24) {
  while (1) {
   if (i1) {
    i1 = 0;
    i2 = 7;
    break;
   }
   if (HEAP8[i3 >> 0] | 0) {
    i1 = 0;
    i2 = 7;
    break;
   }
   if ((HEAP8[i3 + 1 >> 0] | 0) != i4 << 24 >> 24) {
    i1 = 0;
    i2 = 7;
    break;
   }
   i3 = i3 + 2 | 0;
   i2 = i2 + 1 | 0;
   i4 = HEAP8[i2 >> 0] | 0;
   i1 = (i3 | 0) == (i5 | 0);
   if (!(i4 << 24 >> 24)) break L1;
  }
  if ((i2 | 0) == 7) return i1 | 0;
 } while (0);
 i5 = i1 & 1;
 return i5 | 0;
}

function _tt_face_load_hhea(i3, i4, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i3 + 508 >> 2] | 0;
 do if (!(i1 << 24 >> 24)) {
  i1 = FUNCTION_TABLE_iiiii[i2 & 127](i3, 1751672161, i4, 0) | 0;
  if (!i1) {
   i2 = i3 + 216 | 0;
   break;
  } else {
   i4 = i1;
   return i4 | 0;
  }
 } else {
  i1 = FUNCTION_TABLE_iiiii[i2 & 127](i3, 1986553185, i4, 0) | 0;
  if (!i1) i2 = i3 + 296 | 0; else {
   i4 = i1;
   return i4 | 0;
  }
 } while (0);
 i1 = _FT_Stream_ReadFields(i4, 118008, i2) | 0;
 if (i1 | 0) {
  i4 = i1;
  return i4 | 0;
 }
 HEAP32[i2 + 36 >> 2] = 0;
 HEAP32[i2 + 40 >> 2] = 0;
 i4 = 0;
 return i4 | 0;
}

function _FcCompareFamily(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0;
 i6 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = i6;
 i3 = (i3 & 1 | 0) == 0 ? i6 : (i3 & -2) + i1 | 0;
 i6 = HEAP32[i2 + 8 >> 2] | 0;
 i1 = i6;
 i1 = (i1 & 1 | 0) == 0 ? i6 : (i1 & -2) + i2 | 0;
 i6 = HEAP8[i3 >> 0] | 0;
 i5 = i6 & 255;
 i2 = HEAP8[i1 >> 0] | 0;
 i4 = i2 & 255;
 if (!((i6 << 24 >> 24 == 32 ? 1 : (((i6 + -65 & 255) < 26 ? i5 + 32 | 0 : i5) | 0) == (((i2 + -65 & 255) < 26 ? i4 + 32 | 0 : i4) | 0)) | i2 << 24 >> 24 == 32)) {
  d7 = 1.0;
  return +d7;
 }
 d7 = +((_FcStrCmpIgnoreBlanksAndCase(i3, i1) | 0) != 0 & 1);
 return +d7;
}

function _realloc_bitmap(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0, i7 = 0;
 i6 = i3 + 20 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i1 = 1 << HEAP32[i1 >> 2];
 i2 = 0 - i1 | 0;
 i2 = i4 >>> 0 > i2 >>> 0 ? i4 : i4 + -1 + i1 & i2;
 if (i2 >>> 0 > (2147483615 / (((i5 | 0) > 1 ? i5 : 1) >>> 0) | 0) >>> 0) {
  i7 = 0;
  return i7 | 0;
 }
 i1 = _ass_aligned_alloc(i1, (Math_imul(i2, i5) | 0) + 32 | 0, 0) | 0;
 if (!i1) {
  i7 = 0;
  return i7 | 0;
 }
 HEAP32[i3 + 8 >> 2] = i4;
 HEAP32[i3 + 12 >> 2] = i5;
 HEAP32[i3 + 16 >> 2] = i2;
 HEAP32[i6 >> 2] = i1;
 _ass_aligned_free(i7);
 i7 = 1;
 return i7 | 0;
}

function _FcFontSetAdd(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = i6 + 4 | 0;
 do if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
  i3 = i1 + 32 | 0;
  i4 = i6 + 8 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  i1 = i3 << 2;
  if (!i2) i1 = _malloc(i1) | 0; else i1 = _realloc(i2, i1) | 0;
  if (!i1) {
   i7 = 0;
   return i7 | 0;
  } else {
   HEAP32[i5 >> 2] = i3;
   HEAP32[i4 >> 2] = i1;
   i2 = HEAP32[i6 >> 2] | 0;
   break;
  }
 } else {
  i2 = i1;
  i1 = HEAP32[i6 + 8 >> 2] | 0;
 } while (0);
 HEAP32[i6 >> 2] = i2 + 1;
 HEAP32[i1 + (i2 << 2) >> 2] = i7;
 i7 = 1;
 return i7 | 0;
}

function _tt_face_goto_table(i1, i4, i5, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i7 = 0;
 i2 = HEAP16[i1 + 152 >> 1] | 0;
 i1 = HEAP32[i1 + 156 >> 2] | 0;
 i3 = i1 + ((i2 & 65535) << 4) | 0;
 if (!(i2 << 16 >> 16)) {
  i7 = 142;
  return i7 | 0;
 }
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if (i2 | 0) break;
  }
  i1 = i1 + 16 | 0;
  if (i1 >>> 0 >= i3 >>> 0) {
   i1 = 142;
   i7 = 8;
   break;
  }
 }
 if ((i7 | 0) == 8) return i1 | 0;
 if (i6 | 0) HEAP32[i6 >> 2] = i2;
 i7 = _FT_Stream_Seek(i5, HEAP32[i1 + 8 >> 2] | 0) | 0;
 return i7 | 0;
}

function _pfr_extra_item_load_font_id(i5, i1, i2) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 HEAP32[i6 >> 2] = 0;
 i3 = i1 - i5 | 0;
 i4 = i2 + 80 | 0;
 if (HEAP32[i4 >> 2] | 0) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = _ft_mem_alloc(HEAP32[i2 >> 2] | 0, i3 + 1 | 0, i6) | 0;
 HEAP32[i4 >> 2] = i1;
 i2 = HEAP32[i6 >> 2] | 0;
 if (i2 | 0) {
  i6 = i2;
  STACKTOP = i7;
  return i6 | 0;
 }
 _memcpy(i1 | 0, i5 | 0, i3 | 0) | 0;
 HEAP8[(HEAP32[i4 >> 2] | 0) + i3 >> 0] = 0;
 i6 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _ass_add_bitmaps_c(i1, i7, i3, i4, i2, i5) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i6 = 0, i8 = 0, i9 = 0;
 i2 = Math_imul(i2, i7) | 0;
 i6 = i1 + i2 | 0;
 if ((i2 | 0) <= 0) return;
 if (!i5) {
  do i1 = i1 + i7 | 0; while (i1 >>> 0 < i6 >>> 0);
  return;
 } else i2 = i3;
 while (1) {
  i3 = 0;
  do {
   i8 = i1 + i3 | 0;
   i9 = (HEAPU8[i2 + i3 >> 0] | 0) + (HEAPU8[i8 >> 0] | 0) | 0;
   HEAP8[i8 >> 0] = i9 >>> 0 < 255 ? i9 : 255;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i5 | 0));
  i1 = i1 + i7 | 0;
  if (i1 >>> 0 >= i6 >>> 0) break; else i2 = i2 + i4 | 0;
 }
 return;
}

function _T1_Size_Request(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i2 + 548 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if ((i1 | 0) != 0 & (i2 | 0) != 0) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) {
   i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
   _FT_Request_Metrics(HEAP32[i3 >> 2] | 0, i4);
   if (!i1) return 0;
   FUNCTION_TABLE_viiiii[HEAP32[i1 + 4 >> 2] & 31](HEAP32[i3 + 40 >> 2] | 0, HEAP32[i3 + 16 >> 2] | 0, HEAP32[i3 + 20 >> 2] | 0, 0, 0);
   return 0;
  }
 }
 _FT_Request_Metrics(HEAP32[i3 >> 2] | 0, i4);
 return 0;
}

function _FcPatternDestroy(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 if (!i4) return;
 i1 = i4 + 12 | 0;
 if ((HEAP32[i1 >> 2] | 0) == -1) {
  _FcCacheObjectDereference(i4);
  return;
 }
 i3 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i3 + -1;
 if ((i3 | 0) != 1) return;
 i2 = (HEAP32[i4 + 8 >> 2] | 0) + i4 | 0;
 i3 = i2;
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  i1 = 0;
  do {
   i6 = HEAP32[i3 + (i1 << 3) + 4 >> 2] | 0;
   i5 = i6;
   _FcValueListDestroy((i5 & 1 | 0) == 0 ? i6 : (i5 & -2) + (i3 + (i1 << 3)) | 0);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i4 >> 2] | 0));
 }
 _free(i2);
 _free(i4);
 return;
}

function _t1_get_index(i4, i5, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if (i5 >>> 0 > 65535) {
  i6 = 0;
  return i6 | 0;
 }
 i6 = HEAP32[i1 + 284 >> 2] | 0;
 if ((i6 | 0) <= 0) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = HEAP32[i1 + 288 >> 2] | 0;
 i1 = 0;
 while (1) {
  i2 = HEAP32[i3 + (i1 << 2) >> 2] | 0;
  if (i2 | 0) if ((HEAP8[i2 >> 0] | 0) == (HEAP8[i4 >> 0] | 0)) if ((_strlen(i2) | 0) == (i5 | 0)) if (!(_strncmp(i2, i4, i5) | 0)) {
   i2 = 9;
   break;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i6 | 0)) {
   i1 = 0;
   i2 = 9;
   break;
  }
 }
 if ((i2 | 0) == 9) return i1 | 0;
 return 0;
}

function _ass_sub_bitmaps_c(i1, i7, i3, i4, i2, i5) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i6 = 0, i8 = 0, i9 = 0;
 i2 = Math_imul(i2, i7) | 0;
 i6 = i1 + i2 | 0;
 if ((i2 | 0) <= 0) return;
 if (!i5) {
  do i1 = i1 + i7 | 0; while (i1 >>> 0 < i6 >>> 0);
  return;
 } else i2 = i3;
 while (1) {
  i3 = 0;
  do {
   i8 = i1 + i3 | 0;
   i9 = (HEAPU8[i8 >> 0] | 0) - (HEAPU8[i2 + i3 >> 0] | 0) | 0;
   HEAP8[i8 >> 0] = (i9 | 0) > 0 ? i9 : 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i5 | 0));
  i1 = i1 + i7 | 0;
  if (i1 >>> 0 >= i6 >>> 0) break; else i2 = i2 + i4 | 0;
 }
 return;
}

function _fourbyte_strstr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i4 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
 i1 = i2 + 3 | 0;
 i5 = HEAP8[i1 >> 0] | 0;
 i3 = i5 & 255 | ((HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8);
 i2 = i5 << 24 >> 24 != 0;
 if (!((i3 | 0) == (i4 | 0) | i2 ^ 1)) do {
  i1 = i1 + 1 | 0;
  i2 = HEAP8[i1 >> 0] | 0;
  i3 = i2 & 255 | i3 << 8;
  i2 = i2 << 24 >> 24 != 0;
 } while (!((i3 | 0) == (i4 | 0) | i2 ^ 1));
 return (i2 ? i1 + -3 | 0 : 0) | 0;
}

function ___toread(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 74 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 HEAP8[i1 >> 0] = i2 + 255 | i2;
 i1 = i3 + 20 | 0;
 i2 = i3 + 28 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 127](i3, 0, 0) | 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(i1 & 4)) {
  i2 = (HEAP32[i3 + 44 >> 2] | 0) + (HEAP32[i3 + 48 >> 2] | 0) | 0;
  HEAP32[i3 + 8 >> 2] = i2;
  HEAP32[i3 + 4 >> 2] = i2;
  i1 = i1 << 27 >> 31;
 } else {
  HEAP32[i3 >> 2] = i1 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function _realloc(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 if (!i2) {
  i3 = _malloc(i3) | 0;
  return i3 | 0;
 }
 if (i3 >>> 0 > 4294967231) {
  i3 = ___errno_location() | 0;
  HEAP32[i3 >> 2] = 12;
  i3 = 0;
  return i3 | 0;
 }
 i1 = _try_realloc_chunk(i2 + -8 | 0, i3 >>> 0 < 11 ? 16 : i3 + 11 & -8) | 0;
 if (i1 | 0) {
  i3 = i1 + 8 | 0;
  return i3 | 0;
 }
 i1 = _malloc(i3) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i4 = HEAP32[i2 + -4 >> 2] | 0;
 i4 = (i4 & -8) - ((i4 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy(i1 | 0, i2 | 0, (i4 >>> 0 < i3 >>> 0 ? i4 : i3) | 0) | 0;
 _free(i2);
 i3 = i1;
 return i3 | 0;
}

function ___procfdname(i5, i2) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = i5;
 i3 = 367613;
 i4 = i1 + 15 | 0;
 do {
  HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i3 = i3 + 1 | 0;
 } while ((i1 | 0) < (i4 | 0));
 if (!i2) {
  HEAP8[i5 + 14 >> 0] = 48;
  HEAP8[i5 + 15 >> 0] = 0;
 } else {
  i3 = i2;
  i1 = 14;
  while (1) {
   i1 = i1 + 1 | 0;
   if (i3 >>> 0 < 10) break; else i3 = (i3 >>> 0) / 10 | 0;
  }
  HEAP8[i5 + i1 >> 0] = 0;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP8[i5 + i1 >> 0] = (i2 >>> 0) % 10 | 0 | 48;
   if (i2 >>> 0 < 10) break; else i2 = (i2 >>> 0) / 10 | 0;
  }
 }
 return;
}

function _FT_Add_Default_Modules(i1) {
 i1 = i1 | 0;
 _FT_Add_Module(i1, 5168) | 0;
 _FT_Add_Module(i1, 5824) | 0;
 _FT_Add_Module(i1, 7724) | 0;
 _FT_Add_Module(i1, 9516) | 0;
 _FT_Add_Module(i1, 11564) | 0;
 _FT_Add_Module(i1, 11696) | 0;
 _FT_Add_Module(i1, 12656) | 0;
 _FT_Add_Module(i1, 12820) | 0;
 _FT_Add_Module(i1, 17972) | 0;
 _FT_Add_Module(i1, 19936) | 0;
 _FT_Add_Module(i1, 23708) | 0;
 _FT_Add_Module(i1, 23768) | 0;
 _FT_Add_Module(i1, 23840) | 0;
 _FT_Add_Module(i1, 23948) | 0;
 _FT_Add_Module(i1, 24008) | 0;
 _FT_Add_Module(i1, 24068) | 0;
 _FT_Add_Module(i1, 24832) | 0;
 _FT_Add_Module(i1, 24896) | 0;
 return;
}

function _pcf_get_bdf_property(i1, i3, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[i1 + 284 >> 2] | 0;
 i2 = HEAP32[i1 + 280 >> 2] | 0;
 if ((i2 | 0) < 1) {
  i6 = 6;
  return i6 | 0;
 } else i1 = 0;
 do {
  i4 = (_strcmp(HEAP32[i5 + (i1 * 12 | 0) >> 2] | 0, i3) | 0) == 0;
  i1 = i1 + 1 | 0;
 } while (!((i1 | 0) >= (i2 | 0) | i4));
 i1 = i5 + (i1 * 12 | 0) + -12 | 0;
 if (!i4) {
  i6 = 6;
  return i6 | 0;
 }
 i4 = (HEAP8[i1 + 4 >> 0] | 0) == 0;
 i5 = HEAP32[(i4 ? i1 + 8 | 0 : i1 + 8 | 0) >> 2] | 0;
 HEAP32[i6 >> 2] = i4 ? 2 : 1;
 HEAP32[i6 + 4 >> 2] = i5;
 i6 = 0;
 return i6 | 0;
}

function _ass_cache_commit(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = i1 + -32 | 0;
 i4 = i1 + -8 | 0;
 if ((i2 | 0) != 0 & (HEAP32[i4 >> 2] | 0) == 0) {
  HEAP32[i4 >> 2] = i2;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = i4 + 20 | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i2;
  i2 = i4 + 32 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
  i4 = i4 + 12 | 0;
  HEAP32[HEAP32[i4 >> 2] >> 2] = i3;
  HEAP32[i1 + -12 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i4 >> 2] = i1 + -16;
  i4 = i1 + -4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  return;
 } else ___assert_fail(357652, 354776, 432, 357677);
}

function _FcCharSetUnionLeaf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2] | HEAP32[i2 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2] | HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2] | HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2] | HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i3 + 16 >> 2] | HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i3 + 20 >> 2] | HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 24 >> 2] | HEAP32[i2 + 24 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i3 + 28 >> 2] | HEAP32[i2 + 28 >> 2];
 return 1;
}

function _FcConfigXdgDataHome() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = _getenv(354305) | 0;
 if (!1) {
  i5 = 0;
  return i5 | 0;
 }
 if (i1 | 0) {
  i5 = _FcStrCopy(i1) | 0;
  return i5 | 0;
 }
 i1 = _getenv(347408) | 0;
 if (!i1) i2 = 0; else i2 = _strlen(i1) | 0;
 i5 = _malloc(i2 + 14 | 0) | 0;
 if (!i5) {
  i5 = 0;
  return i5 | 0;
 }
 i4 = i5 + (i2 + 13) | 0;
 _memcpy(i5 | 0, i1 | 0, i2 | 0) | 0;
 i1 = i5 + i2 | 0;
 i2 = 354319;
 i3 = i1 + 13 | 0;
 do {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 } while ((i1 | 0) < (i3 | 0));
 HEAP8[i4 >> 0] = 0;
 return i5 | 0;
}

function _t42_get_name_index(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = HEAP32[i3 + 416 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  i8 = 0;
  return i8 | 0;
 }
 i6 = HEAP32[i3 + 420 >> 2] | 0;
 i7 = HEAP8[i4 >> 0] | 0;
 i1 = 0;
 while (1) {
  i2 = HEAP32[i6 + (i1 << 2) >> 2] | 0;
  if (i7 << 24 >> 24 == (HEAP8[i2 >> 0] | 0)) if (!(_strcmp(i4, i2) | 0)) break;
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i5 | 0)) {
   i1 = 0;
   i8 = 7;
   break;
  }
 }
 if ((i8 | 0) == 7) return i1 | 0;
 i8 = _atol(HEAP32[(HEAP32[i3 + 424 >> 2] | 0) + (i1 << 2) >> 2] | 0) | 0;
 return i8 | 0;
}

function _unknown_isInvalid(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 368 >> 2] & 255](HEAP32[i1 + 372 >> 2] | 0, i2) | 0;
 if (i1 >>> 0 > 65535) {
  i2 = 1;
  return i2 | 0;
 }
 switch (i1 >>> 8 & 16777215 | 0) {
 case 0:
  {
   if (!(HEAP8[26712 + i1 >> 0] | 0)) {
    i2 = 1;
    return i2 | 0;
   }
   break;
  }
 case 255:
  {
   if ((i1 | 1 | 0) == 65535) {
    i2 = 1;
    return i2 | 0;
   }
   break;
  }
 case 223:
 case 222:
 case 221:
 case 220:
 case 219:
 case 218:
 case 217:
 case 216:
  {
   i2 = 1;
   return i2 | 0;
  }
 default:
  {}
 }
 i2 = 0;
 return i2 | 0;
}

function _Direct_Move_Orig(i2, i3, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0;
 i1 = HEAP16[i2 + 298 >> 1] | 0;
 if (i1 << 16 >> 16) {
  i6 = _FT_MulDiv(i5, i1 << 16 >> 16, HEAP32[i2 + 564 >> 2] | 0) | 0;
  i1 = (HEAP32[i3 + 12 >> 2] | 0) + ((i4 & 65535) << 3) | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i6;
 }
 i1 = HEAP16[i2 + 300 >> 1] | 0;
 if (!(i1 << 16 >> 16)) return;
 i5 = _FT_MulDiv(i5, i1 << 16 >> 16, HEAP32[i2 + 564 >> 2] | 0) | 0;
 i6 = (HEAP32[i3 + 12 >> 2] | 0) + ((i4 & 65535) << 3) + 4 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i5;
 return;
}

function _FcFreeTypeQuery(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7 + 4 | 0;
 i6 = i7;
 if (_FT_Init_FreeType(i6) | 0) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (!(_FT_New_Face(HEAP32[i6 >> 2] | 0, i1, i2, i5) | 0)) {
  i8 = HEAP32[i5 >> 2] | 0;
  HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
  i1 = _FcFreeTypeQueryFace(i8, i1, i2, i3) | 0;
  _FT_Done_Face(HEAP32[i5 >> 2] | 0) | 0;
 } else i1 = 0;
 _FT_Done_FreeType(HEAP32[i6 >> 2] | 0) | 0;
 i8 = i1;
 STACKTOP = i7;
 return i8 | 0;
}

function _tt_cmap14_ensure(i1, i5, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i7;
 i6 = i1 + 28 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 if (i4 >>> 0 >= i5 >>> 0) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i1 + 36 >> 2] = i2;
 i1 = i1 + 32 | 0;
 i4 = _ft_mem_realloc(i2, 4, i4, i5, HEAP32[i1 >> 2] | 0, i3) | 0;
 HEAP32[i1 >> 2] = i4;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 | 0) {
  i6 = i1;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i6 >> 2] = i5;
 i6 = 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _entity5(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 17:
  {
   HEAP32[i1 >> 2] = HEAP32[i1 + 16 >> 2] | 0 ? 43 : 62;
   i5 = 15;
   return i5 | 0;
  }
 case 18:
  {
   if (FUNCTION_TABLE_iiiii[HEAP32[i5 + 28 >> 2] & 127](i5, i3, i4, 345431) | 0) {
    HEAP32[i1 >> 2] = 84;
    i5 = 11;
    return i5 | 0;
   }
   break;
  }
 case 15:
  {
   i5 = 11;
   return i5 | 0;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) {
   i5 = 59;
   return i5 | 0;
  }
 }
 HEAP32[i1 >> 2] = 41;
 i5 = -1;
 return i5 | 0;
}

function _fmt_u(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i3 >>> 0 > 4294967295) {
  while (1) {
   i4 = ___uremdi3(i3 | 0, i2 | 0, 10, 0) | 0;
   i1 = i1 + -1 | 0;
   HEAP8[i1 >> 0] = i4 & 255 | 48;
   i4 = i3;
   i3 = ___udivdi3(i3 | 0, i2 | 0, 10, 0) | 0;
   if (!(i2 >>> 0 > 9 | (i2 | 0) == 9 & i4 >>> 0 > 4294967295)) break; else i2 = tempRet0;
  }
  i2 = i3;
 } else i2 = i3;
 if (i2) while (1) {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = (i2 >>> 0) % 10 | 0 | 48;
  if (i2 >>> 0 < 10) break; else i2 = (i2 >>> 0) / 10 | 0;
 }
 return i1 | 0;
}

function _strtox(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i7 = i9;
 HEAP32[i7 >> 2] = 0;
 i8 = i7 + 4 | 0;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i7 + 44 >> 2] = i4;
 i6 = i7 + 8 | 0;
 HEAP32[i6 >> 2] = (i4 | 0) < 0 ? -1 : i4 + 2147483647 | 0;
 HEAP32[i7 + 76 >> 2] = -1;
 ___shlim(i7, 0);
 i1 = ___intscan(i7, i1, 1, i2, i3) | 0;
 if (i5 | 0) HEAP32[i5 >> 2] = i4 + ((HEAP32[i8 >> 2] | 0) + (HEAP32[i7 + 108 >> 2] | 0) - (HEAP32[i6 >> 2] | 0));
 STACKTOP = i9;
 return i1 | 0;
}

function _pfr_get_metrics(i1, i2, i3, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i4 = 0;
 i4 = i1 + 288 | 0;
 i1 = HEAP32[i1 + 88 >> 2] | 0;
 if (i2 | 0) HEAP32[i2 >> 2] = HEAP32[i4 + 12 >> 2];
 if (i3 | 0) HEAP32[i3 >> 2] = HEAP32[i4 + 16 >> 2];
 if (!i1) {
  i2 = 65536;
  i1 = 65536;
 } else {
  i4 = i4 + 16 | 0;
  i2 = _FT_DivFix((HEAPU16[i1 + 12 >> 1] | 0) << 6, HEAP32[i4 >> 2] | 0) | 0;
  i1 = _FT_DivFix((HEAPU16[i1 + 14 >> 1] | 0) << 6, HEAP32[i4 >> 2] | 0) | 0;
 }
 if (i5 | 0) HEAP32[i5 >> 2] = i2;
 if (!i6) return 0;
 HEAP32[i6 >> 2] = i1;
 return 0;
}

function _outline_alloc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = _malloc(i2 << 3) | 0;
 HEAP32[i1 + 16 >> 2] = i4;
 i6 = _malloc(i3) | 0;
 i5 = i1 + 20 | 0;
 HEAP32[i5 >> 2] = i6;
 if ((i4 | 0) == 0 | (i6 | 0) == 0) {
  _free(i4);
  _free(HEAP32[i5 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 20 >> 2] = 0;
  i6 = 0;
  return i6 | 0;
 } else {
  HEAP32[i1 + 4 >> 2] = i2;
  HEAP32[i1 + 12 >> 2] = i3;
  i6 = 1;
  return i6 | 0;
 }
 return 0;
}

function _FcStrMatchIgnoreCaseAndDelims(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i7 + 16 | 0;
 i5 = i7;
 if ((i1 | 0) == (i2 | 0)) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i6 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 >> 2] = 0;
 do i2 = _FcStrCaseWalkerNext(i4, i3) | 0; while (i2 << 24 >> 24 != 0 & i2 << 24 >> 24 == (_FcStrCaseWalkerNext(i5, i3) | 0) << 24 >> 24);
 i6 = (HEAP32[i6 >> 2] | 0) + ~i1 | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _bdf_cmap_char_index(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 if (!i1) {
  i7 = 0;
  return i7 | 0;
 } else i4 = 0;
 while (1) {
  i3 = (i4 + i1 | 0) >>> 1;
  i2 = HEAP32[i6 + (i3 << 3) >> 2] | 0;
  if ((i2 | 0) == (i5 | 0)) break;
  i2 = i2 >>> 0 > i5 >>> 0;
  i1 = i2 ? i3 : i1;
  i4 = i2 ? i4 : i3 + 1 | 0;
  if (i4 >>> 0 >= i1 >>> 0) {
   i1 = 0;
   i7 = 5;
   break;
  }
 }
 if ((i7 | 0) == 5) return i1 | 0;
 i7 = (HEAPU16[i6 + (i3 << 3) + 4 >> 1] | 0) + 1 & 65535;
 return i7 | 0;
}

function _pfr_cmap_init(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = HEAP32[i3 + 408 >> 2] | 0;
 HEAP32[i2 + 16 >> 2] = i4;
 i3 = HEAP32[i3 + 416 >> 2] | 0;
 HEAP32[i2 + 20 >> 2] = i3;
 i2 = i3;
 if (i4 >>> 0 <= 1) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = 1;
 i3 = HEAP32[i2 >> 2] | 0;
 while (1) {
  i5 = i3;
  i3 = HEAP32[i2 + (i1 << 4) >> 2] | 0;
  i1 = i1 + 1 | 0;
  if (i5 >>> 0 >= i3 >>> 0) {
   i1 = 8;
   i2 = 5;
   break;
  }
  if (i1 >>> 0 >= i4 >>> 0) {
   i1 = 0;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) return i1 | 0;
 return 0;
}

function _parse_color_tag(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 L1 : while (1) {
  HEAP32[i2 >> 2] = i1;
  switch (HEAP8[i1 >> 0] | 0) {
  case 72:
  case 38:
   break;
  default:
   break L1;
  }
  i1 = i1 + 1 | 0;
 }
 i2 = _strtoll(i1, i2, 16) | 0;
 i1 = tempRet0;
 i4 = (i1 | 0) > -1 | (i1 | 0) == -1 & i2 >>> 0 > 2147483648;
 i2 = i4 ? i2 : -2147483648;
 i1 = i4 ? i1 : -1;
 i4 = (i1 | 0) < 0 | (i1 | 0) == 0 & i2 >>> 0 < 2147483647;
 i2 = i4 ? i2 : 2147483647;
 i2 = _llvm_bswap_i32(i2 | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _pcf_cmap_char_index(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 if (!i1) {
  i7 = 0;
  return i7 | 0;
 } else i4 = 0;
 while (1) {
  i3 = (i4 + i1 | 0) >>> 1;
  i2 = HEAP32[i6 + (i3 << 3) >> 2] | 0;
  if ((i2 | 0) == (i5 | 0)) break;
  i2 = i2 >>> 0 > i5 >>> 0;
  i1 = i2 ? i3 : i1;
  i4 = i2 ? i4 : i3 + 1 | 0;
  if (i4 >>> 0 >= i1 >>> 0) {
   i1 = 0;
   i7 = 5;
   break;
  }
 }
 if ((i7 | 0) == 5) return i1 | 0;
 i7 = (HEAPU16[i6 + (i3 << 3) + 4 >> 1] | 0) + 1 | 0;
 return i7 | 0;
}

function _ft_mem_strdup(i1, i5, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 if (!i5) {
  i1 = 0;
  i7 = 4;
 } else {
  i2 = (_strlen(i5) | 0) + 1 | 0;
  if ((i2 | 0) > 0) {
   i4 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 255](i1, i2) | 0;
   i3 = i4;
   i4 = (i4 | 0) == 0 ? 64 : 0;
   i1 = i2;
  } else {
   i1 = i2;
   i7 = 4;
  }
 }
 if ((i7 | 0) == 4) {
  i3 = 0;
  i4 = i1 | 0 ? 6 : 0;
 }
 if (!((i5 | 0) != 0 & (i4 | 0) == 0)) {
  HEAP32[i6 >> 2] = i4;
  return i3 | 0;
 }
 _memcpy(i3 | 0, i5 | 0, i1 | 0) | 0;
 HEAP32[i6 >> 2] = i4;
 return i3 | 0;
}

function _FT_MulFix(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 if ((i1 | 0) == 0 | (i3 | 0) == 65536) {
  i5 = i1;
  return i5 | 0;
 }
 i5 = i1 >> 31;
 i2 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 i4 = (i3 | 0) < 0;
 i1 = i4 ? 0 - i3 | 0 : i3;
 if (((i1 >>> 8) + i2 | 0) >>> 0 < 8191) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else {
  i3 = i2 & 65535;
  i1 = (Math_imul(i1 >>> 16, i3) | 0) + (Math_imul(i2 >>> 16, i1) | 0) + (((Math_imul(i1 & 65535, i3) | 0) + 32768 | 0) >>> 16) | 0;
 }
 i5 = ((i4 ? 0 - (i5 | 1) | 0 : i5) | 0) < 0 ? 0 - i1 | 0 : i1;
 return i5 | 0;
}

function _FcCompareSize(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var d2 = 0.0, d3 = 0.0;
 switch (HEAP32[i1 >> 2] | 0) {
 case 1:
  {
   d2 = +(HEAP32[i1 + 8 >> 2] | 0);
   break;
  }
 case 2:
  {
   d2 = +HEAPF64[i1 + 8 >> 3];
   break;
  }
 default:
  {
   d3 = -1.0;
   return +d3;
  }
 }
 switch (HEAP32[i4 >> 2] | 0) {
 case 1:
  {
   d3 = +(HEAP32[i4 + 8 >> 2] | 0);
   break;
  }
 case 2:
  {
   d3 = +HEAPF64[i4 + 8 >> 3];
   break;
  }
 default:
  {
   d3 = -1.0;
   return +d3;
  }
 }
 d2 = d3 - d2;
 if (d3 == 0.0) {
  d3 = 0.0;
  return +d3;
 }
 d3 = d2 < 0.0 ? -d2 : d2;
 return +d3;
}

function _t1_cmap_custom_char_next(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 i2 = i2 >>> 0 < i4 >>> 0 ? i4 : i2;
 i4 = (HEAP32[i1 + 20 >> 2] | 0) + i4 | 0;
 L1 : do if (i2 >>> 0 < i4 >>> 0) {
  i3 = HEAP32[i1 + 24 >> 2] | 0;
  while (1) {
   i1 = HEAP16[i3 + (i2 << 1) >> 1] | 0;
   if (i1 << 16 >> 16) break L1;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i4 >>> 0) {
    i2 = 0;
    i1 = 0;
    break;
   }
  }
 } else {
  i2 = 0;
  i1 = 0;
 } while (0);
 HEAP32[i5 >> 2] = i2;
 return i1 & 65535 | 0;
}

function _FcStrListDone(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[i6 >> 2] | 0) == -1) {
  _free(i5);
  return;
 }
 i4 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = i4 + -1;
 if ((i4 | 0) != 1) {
  _free(i5);
  return;
 }
 i3 = i6 + 4 | 0;
 i4 = i6 + 12 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) > 0) {
  i2 = 0;
  do {
   _free(HEAP32[i1 + (i2 << 2) >> 2] | 0);
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
  } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
 }
 if (i1 | 0) _free(i1);
 _free(i6);
 _free(i5);
 return;
}

function _FcStrDowncase(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i3 = i4 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = 0;
 i1 = 0;
 do i1 = i1 + 1 | 0; while ((_FcStrCaseWalkerNext(i4, 0) | 0) << 24 >> 24 != 0);
 i1 = _malloc(i1) | 0;
 if (!i1) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = 0;
 i2 = i1;
 while (1) {
  i3 = _FcStrCaseWalkerNext(i4, 0) | 0;
  HEAP8[i2 >> 0] = i3;
  if (!(i3 << 24 >> 24)) break; else i2 = i2 + 1 | 0;
 }
 STACKTOP = i5;
 return i1 | 0;
}

function _strncmp(i3, i5, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0;
 if (!i4) i1 = 0; else {
  i7 = HEAP8[i3 >> 0] | 0;
  i1 = i7 & 255;
  i6 = HEAP8[i5 >> 0] | 0;
  i2 = i6 & 255;
  L3 : do if (i7 << 24 >> 24) do {
   i4 = i4 + -1 | 0;
   if (!(i7 << 24 >> 24 == i6 << 24 >> 24 & ((i4 | 0) != 0 & i6 << 24 >> 24 != 0))) break L3;
   i3 = i3 + 1 | 0;
   i5 = i5 + 1 | 0;
   i7 = HEAP8[i3 >> 0] | 0;
   i1 = i7 & 255;
   i6 = HEAP8[i5 >> 0] | 0;
   i2 = i6 & 255;
  } while (i7 << 24 >> 24 != 0); while (0);
  i1 = i1 - i2 | 0;
 }
 return i1 | 0;
}

function ___strerror_l(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0;
 i3 = 0;
 while (1) {
  if ((HEAPU8[360515 + i3 >> 0] | 0) == (i2 | 0)) {
   i2 = 2;
   break;
  }
  i1 = i3 + 1 | 0;
  if ((i1 | 0) == 87) {
   i1 = 360603;
   i3 = 87;
   i2 = 5;
   break;
  } else i3 = i1;
 }
 if ((i2 | 0) == 2) if (!i3) i1 = 360603; else {
  i1 = 360603;
  i2 = 5;
 }
 if ((i2 | 0) == 5) while (1) {
  do {
   i2 = i1;
   i1 = i1 + 1 | 0;
  } while ((HEAP8[i2 >> 0] | 0) != 0);
  i3 = i3 + -1 | 0;
  if (!i3) break; else i2 = 5;
 }
 return ___lctrans(i1, HEAP32[i4 + 20 >> 2] | 0) | 0;
}

function _saveSetjmp(i1, i3, i5, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 setjmpId = setjmpId + 1 | 0;
 HEAP32[i1 >> 2] = setjmpId;
 while ((i2 | 0) < (i4 | 0)) {
  if (!(HEAP32[i5 + (i2 << 3) >> 2] | 0)) {
   HEAP32[i5 + (i2 << 3) >> 2] = setjmpId;
   HEAP32[i5 + ((i2 << 3) + 4) >> 2] = i3;
   HEAP32[i5 + ((i2 << 3) + 8) >> 2] = 0;
   tempRet0 = i4;
   return i5 | 0;
  }
  i2 = i2 + 1 | 0;
 }
 i4 = i4 * 2 | 0;
 i5 = _realloc(i5 | 0, 8 * (i4 + 1 | 0) | 0) | 0;
 i5 = _saveSetjmp(i1 | 0, i3 | 0, i5 | 0, i4 | 0) | 0;
 tempRet0 = i4;
 return i5 | 0;
}

function _ft_glyphslot_free_bitmap(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = i3 + 156 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if (i2 | 0) {
  i1 = HEAP32[i2 + 4 >> 2] | 0;
  if (i1 & 1 | 0) {
   i5 = HEAP32[(HEAP32[i3 + 4 >> 2] | 0) + 100 >> 2] | 0;
   i6 = i3 + 88 | 0;
   i3 = HEAP32[i6 >> 2] | 0;
   if (i3) {
    FUNCTION_TABLE_vii[HEAP32[i5 + 8 >> 2] & 63](i5, i3);
    i1 = HEAP32[i4 >> 2] | 0;
    i2 = i1;
    i1 = HEAP32[i1 + 4 >> 2] | 0;
   }
   HEAP32[i6 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = i1 & -2;
   return;
  }
 }
 HEAP32[i3 + 88 >> 2] = 0;
 return;
}

function _FcFontSetPrint(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5 + 8 | 0;
 i3 = i5;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = i1;
 _printf(347001, i3) | 0;
 if ((HEAP32[i2 >> 2] | 0) <= 0) {
  STACKTOP = i5;
  return;
 }
 i3 = i2 + 8 | 0;
 i1 = 0;
 do {
  HEAP32[i4 >> 2] = i1;
  _printf(354641, i4) | 0;
  _FcPatternPrint(HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 << 2) >> 2] | 0);
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) < (HEAP32[i2 >> 2] | 0));
 STACKTOP = i5;
 return;
}

function _random() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 ___lock(368364);
 i1 = HEAP32[23001] | 0;
 i2 = HEAP32[23002] | 0;
 if (!i1) {
  i1 = _lcg31(HEAP32[i2 >> 2] | 0) | 0;
  HEAP32[i2 >> 2] = i1;
 } else {
  i3 = HEAP32[92093] | 0;
  i4 = HEAP32[23003] | 0;
  i5 = i2 + (i4 << 2) | 0;
  i2 = (HEAP32[i5 >> 2] | 0) + (HEAP32[i2 + (i3 << 2) >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = i2;
  i4 = i4 + 1 | 0;
  HEAP32[23003] = (i4 | 0) == (i1 | 0) ? 0 : i4;
  i3 = i3 + 1 | 0;
  HEAP32[92093] = (i3 | 0) == (i1 | 0) ? 0 : i3;
  i1 = i2 >>> 1;
 }
 ___unlock(368364);
 return i1 | 0;
}

function _pfr_get_kerning(i1, i2, i3, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i4 = 0, i5 = 0;
 i5 = i1 + 288 | 0;
 _pfr_face_get_kerning(i1, i2, i3, i6) | 0;
 i4 = i5 + 12 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 i5 = i5 + 16 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) return 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i1 | 0) {
  i3 = _FT_MulDiv(i1, i2, i3) | 0;
  HEAP32[i6 >> 2] = i3;
 }
 i1 = i6 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) return 0;
 i6 = _FT_MulDiv(i2, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i1 >> 2] = i6;
 return 0;
}

function _FcStrCmpIgnoreBlanksAndCase(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i5 + 16 | 0;
 i4 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i4 >> 2] = 0;
 do {
  i1 = _FcStrCaseWalkerNext(i3, 347946) | 0;
  i2 = _FcStrCaseWalkerNext(i4, 347946) | 0;
 } while (i1 << 24 >> 24 ? i1 << 24 >> 24 == i2 << 24 >> 24 : 0);
 i4 = (i1 & 255) - (i2 & 255) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _FcMatrixMultiply(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 d11 = +HEAPF64[i2 >> 3];
 d9 = +HEAPF64[i3 >> 3];
 d10 = +HEAPF64[i2 + 8 >> 3];
 d8 = +HEAPF64[i3 + 16 >> 3];
 d7 = +HEAPF64[i3 + 8 >> 3];
 d5 = +HEAPF64[i3 + 24 >> 3];
 d6 = +HEAPF64[i2 + 16 >> 3];
 d4 = +HEAPF64[i2 + 24 >> 3];
 HEAPF64[i1 >> 3] = d11 * d9 + d10 * d8;
 HEAPF64[i1 + 8 >> 3] = d11 * d7 + d10 * d5;
 HEAPF64[i1 + 16 >> 3] = d9 * d6 + d8 * d4;
 HEAPF64[i1 + 24 >> 3] = d7 * d6 + d5 * d4;
 return;
}

function _tt_cmap13_char_next(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i5 = i1 + 28 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == -1) {
  i5 = 0;
  return i5 | 0;
 }
 i3 = i1 + 24 | 0;
 if (HEAP8[i3 >> 0] | 0) if ((i2 | 0) == (HEAP32[i4 >> 2] | 0)) {
  _tt_cmap13_next(i1);
  if (!(HEAP8[i3 >> 0] | 0)) {
   i5 = 0;
   return i5 | 0;
  }
  i1 = HEAP32[i1 + 32 >> 2] | 0;
  if (!i1) {
   i5 = 0;
   return i5 | 0;
  }
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  i5 = i1;
  return i5 | 0;
 }
 i5 = _tt_cmap13_char_map_binary(i1, i4, 1) | 0;
 return i5 | 0;
}

function _tt_cmap12_char_next(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i5 = i1 + 28 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == -1) {
  i5 = 0;
  return i5 | 0;
 }
 i3 = i1 + 24 | 0;
 if (HEAP8[i3 >> 0] | 0) if ((i2 | 0) == (HEAP32[i4 >> 2] | 0)) {
  _tt_cmap12_next(i1);
  if (!(HEAP8[i3 >> 0] | 0)) {
   i5 = 0;
   return i5 | 0;
  }
  i1 = HEAP32[i1 + 32 >> 2] | 0;
  if (!i1) {
   i5 = 0;
   return i5 | 0;
  }
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  i5 = i1;
  return i5 | 0;
 }
 i5 = _tt_cmap12_char_map_binary(i1, i4, 1) | 0;
 return i5 | 0;
}

function _normal_nameMatchesAscii(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP8[i2 >> 0] | 0;
 i1 = (i4 | 0) == (i5 | 0);
 L1 : do if (i3 << 24 >> 24) {
  while (1) {
   if (i1) {
    i1 = 0;
    i2 = 6;
    break;
   }
   if ((HEAP8[i4 >> 0] | 0) != i3 << 24 >> 24) {
    i1 = 0;
    i2 = 6;
    break;
   }
   i4 = i4 + 1 | 0;
   i2 = i2 + 1 | 0;
   i3 = HEAP8[i2 >> 0] | 0;
   i1 = (i4 | 0) == (i5 | 0);
   if (!(i3 << 24 >> 24)) break L1;
  }
  if ((i2 | 0) == 6) return i1 | 0;
 } while (0);
 i5 = i1 & 1;
 return i5 | 0;
}

function _get_sfnt_table(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 switch (i2 | 0) {
 case 0:
  {
   i1 = i1 + 160 | 0;
   break;
  }
 case 3:
  {
   i1 = i1 + 216 | 0;
   break;
  }
 case 4:
  {
   i1 = HEAP8[i1 + 292 >> 0] | 0 ? i1 + 296 | 0 : 0;
   break;
  }
 case 2:
  {
   i1 = i1 + 364 | 0;
   i1 = (HEAP16[i1 >> 1] | 0) == -1 ? 0 : i1;
   break;
  }
 case 5:
  {
   i1 = i1 + 468 | 0;
   break;
  }
 case 1:
  {
   i1 = i1 + 260 | 0;
   break;
  }
 case 6:
  {
   i1 = i1 + 548 | 0;
   i1 = HEAP32[i1 >> 2] | 0 ? i1 : 0;
   break;
  }
 default:
  i1 = 0;
 }
 return i1 | 0;
}

function _FcLangSetAdd(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i1 = _FcLangSetIndex(i2) | 0;
 if ((i1 | 0) > -1) {
  i2 = HEAPU8[63754 + i1 >> 0] | 0;
  i4 = i2 >>> 5;
  i1 = i3 + 8 + (i4 << 2) | 0;
  if (i4 >>> 0 >= (HEAP32[i3 + 4 >> 2] | 0) >>> 0) {
   i4 = 1;
   return i4 | 0;
  }
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << (i2 & 31);
  i4 = 1;
  return i4 | 0;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  i1 = _FcStrSetCreate() | 0;
  HEAP32[i3 >> 2] = i1;
  if (!i1) {
   i4 = 0;
   return i4 | 0;
  }
 }
 i4 = _FcStrSetAdd(i1, i2) | 0;
 return i4 | 0;
}

function _FcStrSerialize(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[i2 + 12 + (((i4 >>> 0) % 8191 | 0) << 2) >> 2] | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 while (1) {
  if ((HEAP32[i1 + 4 >> 2] | 0) == (i4 | 0)) break;
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i3 = 7;
   break;
  }
 }
 if ((i3 | 0) == 7) return i1 | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = (HEAP32[i2 + 8 >> 2] | 0) + i1 | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 _strcpy(i1, i4) | 0;
 i4 = i1;
 return i4 | 0;
}

function _FT_Stream_Read(i1, i2, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = i1 + 8 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if (i3 >>> 0 <= i7 >>> 0) {
  i7 = 85;
  return i7 | 0;
 }
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i4) {
  i4 = i3 - i7 | 0;
  i4 = i4 >>> 0 > i5 >>> 0 ? i5 : i4;
  _memcpy(i2 | 0, (HEAP32[i1 >> 2] | 0) + i7 | 0, i4 | 0) | 0;
  i1 = i4;
 } else i1 = FUNCTION_TABLE_iiiii[i4 & 127](i1, i7, i2, i5) | 0;
 HEAP32[i6 >> 2] = i1 + i7;
 i7 = i1 >>> 0 < i5 >>> 0 ? 85 : 0;
 return i7 | 0;
}

function _threebyte_strstr(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i4 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8;
 i2 = i3 + 2 | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 i3 = (HEAPU8[i3 + 1 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (i1 & 255) << 8;
 i1 = i1 << 24 >> 24 != 0;
 if (!((i3 | 0) == (i4 | 0) | i1 ^ 1)) do {
  i2 = i2 + 1 | 0;
  i1 = HEAP8[i2 >> 0] | 0;
  i3 = (i1 & 255 | i3) << 8;
  i1 = i1 << 24 >> 24 != 0;
 } while (!((i3 | 0) == (i4 | 0) | i1 ^ 1));
 return (i1 ? i2 + -2 | 0 : 0) | 0;
}

function _FT_Select_Size(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!i1) {
  i3 = 35;
  return i3 | 0;
 }
 if (!(HEAP32[i1 + 8 >> 2] & 2)) {
  i3 = 35;
  return i3 | 0;
 }
 if ((i2 | 0) < 0) {
  i3 = 6;
  return i3 | 0;
 }
 if ((HEAP32[i1 + 28 >> 2] | 0) <= (i2 | 0)) {
  i3 = 6;
  return i3 | 0;
 }
 i3 = HEAP32[(HEAP32[(HEAP32[i1 + 96 >> 2] | 0) + 12 >> 2] | 0) + 92 >> 2] | 0;
 if (!i3) {
  _FT_Select_Metrics(i1, i2);
  i3 = 0;
  return i3 | 0;
 } else {
  i3 = FUNCTION_TABLE_iii[i3 & 255](HEAP32[i1 + 88 >> 2] | 0, i2) | 0;
  return i3 | 0;
 }
 return 0;
}

function _pfr_cmap_char_index(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 if (!i2) {
  i7 = 0;
  return i7 | 0;
 }
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 i4 = 0;
 while (1) {
  i3 = ((i2 - i4 | 0) >>> 1) + i4 | 0;
  i1 = HEAP32[i5 + (i3 << 4) >> 2] | 0;
  if ((i1 | 0) == (i6 | 0)) break;
  i1 = i1 >>> 0 < i6 >>> 0;
  i2 = i1 ? i2 : i3;
  i4 = i1 ? i3 + 1 | 0 : i4;
  if (i2 >>> 0 <= i4 >>> 0) {
   i1 = 0;
   i7 = 6;
   break;
  }
 }
 if ((i7 | 0) == 6) return i1 | 0;
 i7 = i3 + 1 | 0;
 return i7 | 0;
}

function _cid_size_request(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 _FT_Request_Metrics(HEAP32[i3 >> 2] | 0, i1);
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i2 + 320 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) return 0;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) return 0;
 i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i1) return 0;
 FUNCTION_TABLE_viiiii[HEAP32[i1 + 4 >> 2] & 31](HEAP32[i3 + 40 >> 2] | 0, HEAP32[i3 + 16 >> 2] | 0, HEAP32[i3 + 20 >> 2] | 0, 0, 0);
 return 0;
}

function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = i1;
 L1 : do if (!(i4 & 3)) i3 = 4; else {
  i2 = i4;
  while (1) {
   if (!(HEAP8[i1 >> 0] | 0)) {
    i1 = i2;
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = i1;
   if (!(i2 & 3)) {
    i3 = 4;
    break;
   }
  }
 } while (0);
 if ((i3 | 0) == 4) {
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) i1 = i1 + 4 | 0; else break;
  }
  if ((i2 & 255) << 24 >> 24) do i1 = i1 + 1 | 0; while ((HEAP8[i1 >> 0] | 0) != 0);
 }
 return i1 - i4 | 0;
}

function _FT_Stream_TryRead(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = i1 + 8 | 0;
 i4 = HEAP32[i7 >> 2] | 0;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 if (i5 >>> 0 <= i4 >>> 0) {
  i7 = 0;
  return i7 | 0;
 }
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i6) {
  i6 = i5 - i4 | 0;
  i6 = i6 >>> 0 > i3 >>> 0 ? i3 : i6;
  _memcpy(i2 | 0, (HEAP32[i1 >> 2] | 0) + i4 | 0, i6 | 0) | 0;
  i1 = i6;
 } else i1 = FUNCTION_TABLE_iiiii[i6 & 127](i1, i4, i2, i3) | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i1;
 i7 = i1;
 return i7 | 0;
}

function _latin1_toUtf16(i1, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0, i8 = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) == (i4 | 0)) return;
 i2 = HEAP32[i5 >> 2] | 0;
 while (1) {
  if ((i2 | 0) == (i6 | 0)) {
   i1 = 5;
   break;
  }
  HEAP32[i3 >> 2] = i1 + 1;
  i8 = HEAPU8[i1 >> 0] | 0;
  i7 = HEAP32[i5 >> 2] | 0;
  i2 = i7 + 2 | 0;
  HEAP32[i5 >> 2] = i2;
  HEAP16[i7 >> 1] = i8;
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 | 0) == (i4 | 0)) {
   i1 = 5;
   break;
  }
 }
 if ((i1 | 0) == 5) return;
}

function _FNT_Face_Done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if (!i1) return;
 i2 = HEAP32[i1 + 100 >> 2] | 0;
 i3 = HEAP32[i1 + 104 >> 2] | 0;
 i4 = i1 + 132 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 | 0) {
  i6 = i5 + 160 | 0;
  if (HEAP32[i6 >> 2] | 0) _FT_Stream_ReleaseFrame(i3, i6);
  i6 = i5 + 168 | 0;
  _ft_mem_free(i2, HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  _ft_mem_free(i2, i5);
  HEAP32[i4 >> 2] = 0;
 }
 i6 = i1 + 32 | 0;
 _ft_mem_free(i2, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 return;
}

function _parse_alpha_tag(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 L1 : while (1) {
  HEAP32[i2 >> 2] = i1;
  switch (HEAP8[i1 >> 0] | 0) {
  case 72:
  case 38:
   break;
  default:
   break L1;
  }
  i1 = i1 + 1 | 0;
 }
 i2 = _strtoll(i1, i2, 16) | 0;
 i1 = tempRet0;
 i4 = (i1 | 0) > -1 | (i1 | 0) == -1 & i2 >>> 0 > 2147483648;
 i2 = i4 ? i2 : -2147483648;
 i1 = i4 ? i1 : -1;
 i4 = (i1 | 0) < 0 | (i1 | 0) == 0 & i2 >>> 0 < 2147483647;
 i2 = i4 ? i2 : 2147483647;
 STACKTOP = i3;
 return i2 | 0;
}

function _sfnt_table_info(i2, i3, i4, i5, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0;
 if (!((i5 | 0) != 0 & (i6 | 0) != 0)) {
  i6 = 6;
  return i6 | 0;
 }
 i1 = HEAPU16[i2 + 152 >> 1] | 0;
 do if (i4) if (i1 >>> 0 > i3 >>> 0) {
  i1 = HEAP32[i2 + 156 >> 2] | 0;
  HEAP32[i4 >> 2] = HEAP32[i1 + (i3 << 4) >> 2];
  HEAP32[i5 >> 2] = HEAP32[i1 + (i3 << 4) + 8 >> 2];
  i1 = HEAP32[i1 + (i3 << 4) + 12 >> 2] | 0;
  break;
 } else {
  i6 = 142;
  return i6 | 0;
 } while (0);
 HEAP32[i6 >> 2] = i1;
 i6 = 0;
 return i6 | 0;
}

function _FcPatternGetInteger(i1, i2, i3, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i6;
 i1 = _FcPatternObjectGet(i1, _FcObjectFromName(i2) | 0, i3, i4) | 0;
 L1 : do if (!i1) {
  switch (HEAP32[i4 >> 2] | 0) {
  case 2:
   {
    i1 = ~~+HEAPF64[i4 + 8 >> 3];
    break;
   }
  case 1:
   {
    i1 = HEAP32[i4 + 8 >> 2] | 0;
    break;
   }
  default:
   {
    i1 = 2;
    break L1;
   }
  }
  HEAP32[i5 >> 2] = i1;
  i1 = 0;
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _element3(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 39;
   break;
  }
 case 24:
  {
   HEAP32[i1 >> 2] = 60;
   HEAP32[i1 + 8 >> 2] = 39;
   i1 = 45;
   break;
  }
 case 36:
  {
   HEAP32[i1 >> 2] = 60;
   HEAP32[i1 + 8 >> 2] = 39;
   i1 = 46;
   break;
  }
 case 21:
  {
   HEAP32[i1 >> 2] = 70;
   i1 = 39;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _FcStrCmpIgnoreCase(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i5 + 16 | 0;
 i4 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i4 >> 2] = 0;
 do {
  i1 = _FcStrCaseWalkerNext(i3, 0) | 0;
  i2 = _FcStrCaseWalkerNext(i4, 0) | 0;
 } while (i1 << 24 >> 24 ? i1 << 24 >> 24 == i2 << 24 >> 24 : 0);
 i4 = (i1 & 255) - (i2 & 255) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _cff_get_cmap_info(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i1 = HEAP32[(HEAP32[(HEAP32[i2 >> 2] | 0) + 96 >> 2] | 0) + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 i4 = HEAP32[i2 + 12 >> 2] | 0;
 if ((i4 | 0) == 7860 | (i4 | 0) == 7820) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = _ft_module_get_service(_FT_Get_Module(i1, 283071) | 0, 283087) | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 i4 = FUNCTION_TABLE_iii[i1 & 255](i2, i3) | 0;
 return i4 | 0;
}

function _FcLangSetSerialize(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i1 = _FcSerializePtr(i1, i2) | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 i4 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 24 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 0;
 i3 = HEAP32[i2 + 4 >> 2] << 2;
 _memcpy(i4 | 0, i2 + 8 | 0, (i3 >>> 0 < 32 ? i3 : 32) | 0) | 0;
 HEAP32[i1 + 4 >> 2] = 8;
 HEAP32[i1 >> 2] = 0;
 i2 = i1;
 return i2 | 0;
}

function _FT_Load_Sfnt_Table(i3, i4, i5, i6, i7) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0;
 if (!i3) {
  i7 = 35;
  return i7 | 0;
 }
 if (!(HEAP32[i3 + 8 >> 2] & 8)) {
  i7 = 35;
  return i7 | 0;
 }
 i1 = HEAP32[i3 + 96 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] | 0;
 if (!i2) {
  i7 = 7;
  return i7 | 0;
 }
 i1 = FUNCTION_TABLE_iii[i2 & 255](i1, 344694) | 0;
 if (!i1) {
  i7 = 7;
  return i7 | 0;
 }
 i7 = FUNCTION_TABLE_iiiiii[HEAP32[i1 >> 2] & 127](i3, i4, i5, i6, i7) | 0;
 return i7 | 0;
}

function _tt_cmap10_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = i2 - ((HEAPU8[i3 + 13 >> 0] | 0) << 16 | (HEAPU8[i3 + 12 >> 0] | 0) << 24 | (HEAPU8[i3 + 14 >> 0] | 0) << 8 | (HEAPU8[i3 + 15 >> 0] | 0)) | 0;
 if (i1 >>> 0 >= ((HEAPU8[i3 + 17 >> 0] | 0) << 16 | (HEAPU8[i3 + 16 >> 0] | 0) << 24 | (HEAPU8[i3 + 18 >> 0] | 0) << 8 | (HEAPU8[i3 + 19 >> 0] | 0)) >>> 0) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = i3 + 20 + (i1 << 1) | 0;
 i3 = (HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i3 + 1 >> 0] | 0);
 return i3 | 0;
}

function _ps_hints_t2mask(i1, i7, i4, i8) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0;
 i10 = i1 + 4 | 0;
 if (HEAP32[i10 >> 2] | 0) return;
 i5 = i1 + 16 | 0;
 i9 = HEAP32[i1 >> 2] | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i2 = i1 + 52 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 + i6 | 0) != (i4 | 0)) return;
 i1 = _ps_dimension_set_mask_bits(i5, i8, i3, i6, i7, i9) | 0;
 if (!i1) {
  i1 = _ps_dimension_set_mask_bits(i2, i8, 0, i3, i7, i9) | 0;
  if (!i1) return;
 }
 HEAP32[i10 >> 2] = i1;
 return;
}

function _FcPatternObjectGetDouble(i1, i3, i4, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var d2 = 0.0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7;
 i1 = _FcPatternObjectGet(i1, i3, i4, i5) | 0;
 L1 : do if (!i1) {
  switch (HEAP32[i5 >> 2] | 0) {
  case 2:
   {
    d2 = +HEAPF64[i5 + 8 >> 3];
    break;
   }
  case 1:
   {
    d2 = +(HEAP32[i5 + 8 >> 2] | 0);
    break;
   }
  default:
   {
    i1 = 2;
    break L1;
   }
  }
  HEAPF64[i6 >> 3] = d2;
  i1 = 0;
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function _FT_Get_Module(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 if (!((i1 | 0) != 0 & (i3 | 0) != 0)) {
  i4 = 0;
  return i4 | 0;
 }
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 i4 = i1 + 20 + (i2 << 2) | 0;
 if ((i2 | 0) <= 0) {
  i4 = 0;
  return i4 | 0;
 }
 i2 = i1 + 20 | 0;
 while (1) {
  i1 = HEAP32[i2 >> 2] | 0;
  i2 = i2 + 4 | 0;
  if (!(_strcmp(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0, i3) | 0)) {
   i2 = 6;
   break;
  }
  if (i2 >>> 0 >= i4 >>> 0) {
   i1 = 0;
   i2 = 6;
   break;
  }
 }
 if ((i2 | 0) == 6) return i1 | 0;
 return 0;
}

function _puts(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = HEAP32[22843] | 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) i4 = ___lockfile(i3) | 0; else i4 = 0;
 do if ((_fputs(i1, i3) | 0) < 0) i1 = 1; else {
  if ((HEAP8[i3 + 75 >> 0] | 0) != 10) {
   i1 = i3 + 20 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i3 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i1 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = 10;
    i1 = 0;
    break;
   }
  }
  i1 = (___overflow(i3, 10) | 0) < 0;
 } while (0);
 if (i4 | 0) ___unlockfile(i3);
 return i1 << 31 >> 31 | 0;
}

function _FT_Vector_Transform_Scaled(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = i1 << 16;
 if (!((i2 | 0) != 0 & (i3 | 0) != 0)) return;
 i6 = HEAP32[i2 >> 2] | 0;
 i5 = _FT_MulDiv(i6, HEAP32[i3 >> 2] | 0, i1) | 0;
 i4 = i2 + 4 | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i5 = (_FT_MulDiv(i7, HEAP32[i3 + 4 >> 2] | 0, i1) | 0) + i5 | 0;
 i6 = _FT_MulDiv(i6, HEAP32[i3 + 8 >> 2] | 0, i1) | 0;
 i3 = (_FT_MulDiv(i7, HEAP32[i3 + 12 >> 2] | 0, i1) | 0) + i6 | 0;
 HEAP32[i2 >> 2] = i5;
 HEAP32[i4 >> 2] = i3;
 return;
}

function _FcConfigAllocExpr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = i1 + 72 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i4 = i2;
 if (!i2) i5 = 3; else {
  i1 = HEAP32[i2 + 4 >> 2] | 0;
  if ((i1 | 0) == (i2 + 4088 | 0)) i5 = 3;
 }
 do if ((i5 | 0) == 3) {
  i1 = _malloc(4088) | 0;
  if (!i1) {
   i5 = 0;
   return i5 | 0;
  } else {
   HEAP32[i1 >> 2] = i4;
   i5 = i1 + 8 | 0;
   HEAP32[i1 + 4 >> 2] = i5;
   HEAP32[i3 >> 2] = i1;
   i2 = i1;
   i1 = i5;
   break;
  }
 } while (0);
 HEAP32[i2 + 4 >> 2] = i1 + 16;
 i5 = i1;
 return i5 | 0;
}

function _FcPatternAddString(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 i2 = _FcObjectFromName(i2) | 0;
 HEAP32[i6 >> 2] = (i3 | 0) == 0 ? 0 : 3;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i3 = _FcPatternObjectAddWithBinding(i1, i2, i5, 1, 1) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FcConfigLexOp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(_strcmp(i1, i2) | 0)) i1 = 0; else if (!(_strcmp(i1, i2 + 20 | 0) | 0)) i1 = 1; else if (!(_strcmp(i1, i2 + 40 | 0) | 0)) i1 = 2; else if (!(_strcmp(i1, i2 + 60 | 0) | 0)) i1 = 3; else if (!(_strcmp(i1, i2 + 80 | 0) | 0)) i1 = 4; else if (!(_strcmp(i1, i2 + 100 | 0) | 0)) i1 = 5; else if (!(_strcmp(i1, i2 + 120 | 0) | 0)) i1 = 6; else if (!(_strcmp(i1, i2 + 140 | 0) | 0)) i1 = 7; else {
  i2 = 41;
  return i2 | 0;
 }
 i2 = HEAP32[i2 + (i1 * 20 | 0) + 16 >> 2] | 0;
 return i2 | 0;
}

function _getcwd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 i4 = i6;
 i3 = i6 + 8 | 0;
 if (!i1) {
  i2 = 4096;
  i1 = i3;
  i5 = 4;
 } else if (!i2) {
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 22;
  i1 = 0;
 } else i5 = 4;
 if ((i5 | 0) == 4) {
  HEAP32[i4 >> 2] = i1;
  HEAP32[i4 + 4 >> 2] = i2;
  if ((___syscall_ret(___syscall183(183, i4 | 0) | 0) | 0) < 0) i1 = 0; else if ((i1 | 0) == (i3 | 0)) i1 = ___strdup(i3) | 0;
 }
 STACKTOP = i6;
 return i1 | 0;
}

function _afm_parser_init(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 i5 = _ft_mem_alloc(i2, 16, i6) | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 if (i6 | 0) {
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i5 + 8 >> 2] = i4;
 HEAP32[i5 + 12 >> 2] = 2;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i1 + 4 >> 2] = i5;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 i6 = 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _FcCompareNumber(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var d1 = 0.0, d3 = 0.0;
 switch (HEAP32[i2 >> 2] | 0) {
 case 1:
  {
   d3 = +(HEAP32[i2 + 8 >> 2] | 0);
   break;
  }
 case 2:
  {
   d3 = +HEAPF64[i2 + 8 >> 3];
   break;
  }
 default:
  {
   d3 = -1.0;
   return +d3;
  }
 }
 switch (HEAP32[i4 >> 2] | 0) {
 case 1:
  {
   d1 = +(HEAP32[i4 + 8 >> 2] | 0);
   break;
  }
 case 2:
  {
   d1 = +HEAPF64[i4 + 8 >> 3];
   break;
  }
 default:
  {
   d3 = -1.0;
   return +d3;
  }
 }
 d3 = d1 - d3;
 d3 = d3 < 0.0 ? -d3 : d3;
 return +d3;
}

function _sfnt_get_charset_id(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7 + 8 | 0;
 i6 = i7;
 i1 = _tt_face_find_bdf_prop(i2, 283096, i6) | 0;
 if (!i1) {
  i1 = _tt_face_find_bdf_prop(i2, 283113, i5) | 0;
  if (!i1) if ((HEAP32[i6 >> 2] | 0) == 1) if ((HEAP32[i5 >> 2] | 0) == 1) {
   HEAP32[i3 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i4 >> 2] = HEAP32[i6 + 4 >> 2];
   i1 = 0;
  } else i1 = 6; else i1 = 6;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _FcConfigSetSysRoot(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 if (!i1) {
  i1 = HEAP32[91920] | 0;
  if (!i1) {
   i1 = _FcConfigCreate() | 0;
   if (!i1) return; else i5 = 1;
  } else i5 = 0;
 } else i5 = 0;
 if (!i2) i2 = 0; else {
  i2 = _FcStrCopyFilename(i2) | 0;
  if (!i2) return;
 }
 i3 = i1 + 76 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 | 0) _FcStrFree(i4);
 HEAP32[i3 >> 2] = i2;
 if (!i5) return;
 i5 = _FcInitLoadOwnConfigAndFonts(i1) | 0;
 _FcConfigSetCurrent(i5) | 0;
 _FcConfigDestroy(i5);
 return;
}

function _FcStrBufDone(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = i3 + 8 | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  i2 = HEAP32[i3 + 12 >> 2] | 0;
  i1 = _malloc(i2 + 1 | 0) | 0;
  if (!i1) i1 = 0; else {
   _memcpy(i1 | 0, HEAP32[i3 >> 2] | 0, i2 | 0) | 0;
   HEAP8[i1 + i2 >> 0] = 0;
  }
 } else i1 = 0;
 i2 = i3 + 4 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) return i1 | 0;
 _free(HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = i3 + 20;
 HEAP32[i3 + 16 >> 2] = 64;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 return i1 | 0;
}

function _msg_callback(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i7 + 24 | 0;
 i5 = i7 + 20 | 0;
 i6 = i7 + 16 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i7 + 12 >> 2] = i4;
 if ((HEAP32[i8 >> 2] | 0) > 5) {
  STACKTOP = i7;
  return;
 }
 _printf(245878, i7) | 0;
 _vprintf(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 _printf(348499, i7 + 8 | 0) | 0;
 STACKTOP = i7;
 return;
}

function _tt_get_interface(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = _ft_service_list_lookup(5740, i3) | 0;
 if (i1 | 0) {
  i3 = i1;
  return i3 | 0;
 }
 if (!i2) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = _FT_Get_Module(i1, 283071) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = FUNCTION_TABLE_iii[HEAP32[i1 + 16 >> 2] & 255](i2, i3) | 0;
 return i3 | 0;
}

function _ps_hints_t2counter(i1, i2, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = i1 + 4 | 0;
 if (HEAP32[i9 >> 2] | 0) return;
 i4 = i1 + 16 | 0;
 i7 = HEAP32[i1 >> 2] | 0;
 i8 = HEAP32[i4 >> 2] | 0;
 i5 = i1 + 52 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i3 + i8 | 0) != (i2 | 0)) return;
 i1 = _ps_dimension_set_mask_bits(i4, i6, 0, i8, 0, i7) | 0;
 if (!i1) {
  i1 = _ps_dimension_set_mask_bits(i5, i6, i8, i3, 0, i7) | 0;
  if (!i1) return;
 }
 HEAP32[i9 >> 2] = i1;
 return;
}

function _FcOpen(i1, i2, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i6;
 i3 = i6 + 16 | 0;
 if (!(i2 & 64)) {
  i5 = _open(i1, i2 | 557056, i6 + 8 | 0) | 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = i5;
  i7 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  i5 = HEAP32[i7 >> 2] | 0;
  HEAP32[i3 >> 2] = i7 + 4;
  HEAP32[i4 >> 2] = i5;
  i5 = _open(i1, i2 | 557056, i4) | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _FT_Stream_ReadAt(i4, i5, i1, i6) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 if (i2 >>> 0 <= i5 >>> 0) {
  i6 = 85;
  return i6 | 0;
 }
 i3 = HEAP32[i4 + 20 >> 2] | 0;
 if (!i3) {
  i3 = i2 - i5 | 0;
  i3 = i3 >>> 0 > i6 >>> 0 ? i6 : i3;
  _memcpy(i1 | 0, (HEAP32[i4 >> 2] | 0) + i5 | 0, i3 | 0) | 0;
  i1 = i3;
 } else i1 = FUNCTION_TABLE_iiiii[i3 & 127](i4, i5, i1, i6) | 0;
 HEAP32[i4 + 8 >> 2] = i1 + i5;
 i6 = i1 >>> 0 < i6 >>> 0 ? 85 : 0;
 return i6 | 0;
}

function _tt_face_load_hmtx(i3, i4, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = i1 << 24 >> 24 == 0;
 i2 = FUNCTION_TABLE_iiiii[HEAP32[i3 + 508 >> 2] & 127](i3, i1 ? 1752003704 : 1986884728, i4, i5) | 0;
 if (i2 | 0) {
  STACKTOP = i6;
  return i2 | 0;
 }
 HEAP32[(i1 ? i3 + 684 | 0 : i3 + 692 | 0) >> 2] = HEAP32[i5 >> 2];
 i5 = _FT_Stream_Pos(i4) | 0;
 HEAP32[(i1 ? i3 + 784 | 0 : i3 + 788 | 0) >> 2] = i5;
 STACKTOP = i6;
 return i2 | 0;
}

function _bsearch(i6, i1, i2, i7, i8) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 L1 : do if (!i2) i1 = 0; else {
  i5 = i1;
  while (1) {
   i4 = i2 >>> 1;
   i1 = i5 + (Math_imul(i4, i7) | 0) | 0;
   i3 = FUNCTION_TABLE_iii[i8 & 255](i6, i1) | 0;
   if (!i3) break L1;
   if ((i2 | 0) == 1) {
    i1 = 0;
    break L1;
   }
   i3 = (i3 | 0) < 0;
   i2 = i3 ? i4 : i2 - i4 | 0;
   if (!i2) {
    i1 = 0;
    break;
   } else i5 = i3 ? i5 : i1;
  }
 } while (0);
 return i1 | 0;
}

function ___srandom(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[23001] | 0;
 if (!i5) HEAP32[HEAP32[23002] >> 2] = i2; else {
  HEAP32[23003] = (i5 | 0) == 31 | (i5 | 0) == 7 ? 3 : 1;
  HEAP32[92093] = 0;
  if ((i5 | 0) > 0) {
   i1 = HEAP32[23002] | 0;
   i4 = 0;
   i3 = 0;
   do {
    i2 = _lcg64(i2, i3) | 0;
    i3 = tempRet0;
    HEAP32[i1 + (i4 << 2) >> 2] = i3;
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) < (i5 | 0));
  } else i1 = HEAP32[23002] | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 }
 return;
}

function _fribidi_shape_mirroring(i6, i1, i7) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!((i1 | 0) > 0 & (i7 | 0) != 0)) return;
 do {
  i2 = i1;
  i1 = i1 + -1 | 0;
  if (HEAP8[i6 + i1 >> 0] & 1) {
   i3 = i7 + (i1 << 2) | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) <= 65535) {
    i5 = HEAP16[102896 + ((HEAPU16[100848 + (i4 >> 6 << 1) >> 1] | 0) + (i4 & 63) << 1) >> 1] | 0;
    if (i5 << 16 >> 16) HEAP32[i3 >> 2] = (i5 << 16 >> 16) + i4;
   }
  }
 } while ((i2 | 0) > 1);
 return;
}

function _FcPatternAddLangSet(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 HEAP32[i6 >> 2] = 8;
 HEAP32[i6 + 8 >> 2] = i3;
 i3 = _FcObjectFromName(i2) | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i3 = _FcPatternObjectAddWithBinding(i1, i3, i5, 1, 1) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FcPatternAddInteger(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 i2 = _FcObjectFromName(i2) | 0;
 HEAP32[i6 >> 2] = 1;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i3 = _FcPatternObjectAddWithBinding(i1, i2, i5, 1, 1) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FcPatternAddCharSet(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 HEAP32[i6 >> 2] = 6;
 HEAP32[i6 + 8 >> 2] = i3;
 i3 = _FcObjectFromName(i2) | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i3 = _FcPatternObjectAddWithBinding(i1, i3, i5, 1, 1) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FcMatrixCopy(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = _malloc(32) | 0;
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 };
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
 return i2 | 0;
}

function _FcPatternAddRange(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 i2 = _FcObjectFromName(i2) | 0;
 HEAP32[i6 >> 2] = 9;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i3 = _FcPatternObjectAddWithBinding(i1, i2, i5, 1, 1) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FcPatternAddDouble(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 i2 = _FcObjectFromName(i2) | 0;
 HEAP32[i6 >> 2] = 2;
 HEAPF64[i6 + 8 >> 3] = d3;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i2 = _FcPatternObjectAddWithBinding(i1, i2, i5, 1, 1) | 0;
 STACKTOP = i4;
 return i2 | 0;
}

function _FcPatternAddBool(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 i2 = _FcObjectFromName(i2) | 0;
 HEAP32[i6 >> 2] = 4;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i3 = _FcPatternObjectAddWithBinding(i1, i2, i5, 1, 1) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _ascii_toUtf8(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == (i3 | 0)) return;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) == (i5 | 0)) {
   i1 = 4;
   break;
  }
  HEAP32[i2 >> 2] = i1 + 1;
  i7 = HEAP8[i1 >> 0] | 0;
  i6 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i6 + 1;
  HEAP8[i6 >> 0] = i7;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == (i3 | 0)) {
   i1 = 4;
   break;
  }
 }
 if ((i1 | 0) == 4) return;
}

function _FcPatternObjectAddString(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 HEAP32[i6 >> 2] = (i3 | 0) == 0 ? 0 : 3;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i3 = _FcPatternObjectAddWithBinding(i1, i2, i5, 1, 1) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _get_data_embedded(i1, i5, i6, i3) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i7 = 0;
 i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i2 = HEAP32[i7 + (i4 * 12 | 0) + 8 >> 2] | 0;
 if (!i5) {
  i7 = i2;
  return i7 | 0;
 }
 i1 = i2 - i6 | 0;
 i1 = i1 >>> 0 < i3 >>> 0 ? i1 : i3;
 if (i2 >>> 0 <= i6 >>> 0) {
  i7 = 0;
  return i7 | 0;
 }
 _memcpy(i5 | 0, (HEAP32[i7 + (i4 * 12 | 0) + 4 >> 2] | 0) + i6 | 0, i1 | 0) | 0;
 i7 = i1;
 return i7 | 0;
}

function _FT_New_Library(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i3 = 6;
  return i3 | 0;
 }
 i3 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 255](i1, 192) | 0;
 if (!i3) {
  i3 = 64;
  return i3 | 0;
 }
 _memset(i3 + 16 | 0, 0, 172) | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 168 >> 2] = 0;
 HEAP32[i3 + 164 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 2;
 HEAP32[i3 + 8 >> 2] = 6;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 188 >> 2] = 1;
 HEAP32[i2 >> 2] = i3;
 i3 = 0;
 return i3 | 0;
}

function _pad(i5, i2, i3, i4, i1) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i6 = i7;
 if ((i3 | 0) > (i4 | 0) & (i1 & 73728 | 0) == 0) {
  i1 = i3 - i4 | 0;
  _memset(i6 | 0, i2 | 0, (i1 >>> 0 < 256 ? i1 : 256) | 0) | 0;
  if (i1 >>> 0 > 255) {
   i2 = i3 - i4 | 0;
   do {
    _out(i5, i6, 256);
    i1 = i1 + -256 | 0;
   } while (i1 >>> 0 > 255);
   i1 = i2 & 255;
  }
  _out(i5, i6, i1);
 }
 STACKTOP = i7;
 return;
}

function _ft_gzip_stream_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!i3) return;
 i1 = HEAP32[i1 + 28 >> 2] | 0;
 _inflateEnd(i3 + 12 | 0) | 0;
 HEAP32[i3 + 44 >> 2] = 0;
 HEAP32[i3 + 48 >> 2] = 0;
 HEAP32[i3 + 52 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 _ft_mem_free(i1, i3);
 HEAP32[i2 >> 2] = 0;
 return;
}

function _ass_aligned_alloc(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i4 = i3 + -1 | 0;
 if (i4 & i3 | 0) ___assert_fail(357516, 357547, 85, 357559);
 if ((-5 - i3 | 0) >>> 0 <= i1 >>> 0) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = i3 + 3 + i1 | 0;
 if (i2) i2 = _calloc(i1, 1) | 0; else i2 = _malloc(i1) | 0;
 i5 = i2 + 4 | 0;
 i1 = i5 & i4;
 i1 = (i1 | 0) == 0 ? i5 : i5 + (i3 - i1) | 0;
 if (!i2) {
  i5 = 0;
  return i5 | 0;
 }
 HEAP32[i1 + -4 >> 2] = i2;
 i5 = i1;
 return i5 | 0;
}

function _T1_Parse_Glyph(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i3 = _T1_Parse_Glyph_And_Get_Char_String(i2, i1, i4) | 0;
 if (i3 | 0) {
  STACKTOP = i5;
  return i3 | 0;
 }
 i1 = HEAP32[(HEAP32[(HEAP32[i2 + 4 >> 2] | 0) + 128 >> 2] | 0) + 48 >> 2] | 0;
 if (!i1) {
  STACKTOP = i5;
  return i3 | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 63](HEAP32[i1 + 4 >> 2] | 0, i4);
 STACKTOP = i5;
 return i3 | 0;
}

function _ass_shaper_cleanup(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = i5 + 4 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((i1 | 0) <= 0) return;
 i3 = 0;
 i2 = i1;
 while (1) {
  i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i3 * 344 | 0) + 336 >> 2] | 0;
  if (!i1) i1 = i2; else {
   do {
    i2 = i1;
    i1 = HEAP32[i1 + 336 >> 2] | 0;
    _free(i2);
   } while ((i1 | 0) != 0);
   i1 = HEAP32[i4 >> 2] | 0;
  }
  i3 = i3 + 1 | 0;
  if ((i3 | 0) >= (i1 | 0)) break; else i2 = i1;
 }
 return;
}

function _cid_size_done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 40 | 0;
 if (!(HEAP32[i3 >> 2] | 0)) return;
 i2 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i2 + 320 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if ((i1 | 0) != 0 & (i2 | 0) != 0) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) {
   i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
   if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i1 + 8 >> 2] & 127](HEAP32[i3 >> 2] | 0);
  }
 }
 HEAP32[i3 >> 2] = 0;
 return;
}

function _cff_cmap_encoding_char_next(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i2 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 if (i2 >>> 0 >= 255) {
  i5 = 0;
  return i5 | 0;
 }
 i3 = i1 + 16 | 0;
 i1 = 0;
 do {
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 > 255) {
   i5 = 6;
   break;
  }
  i6 = HEAP16[(HEAP32[i3 >> 2] | 0) + (i2 << 1) >> 1] | 0;
  i1 = i6 & 65535;
 } while (!(i6 << 16 >> 16));
 if ((i5 | 0) == 6) return i1 | 0;
 HEAP32[i4 >> 2] = i2;
 i6 = i1;
 return i6 | 0;
}

function _FT_Get_BDF_Property(i3, i4, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0;
 if (!i3) i1 = 35; else if (!i5) i1 = 6; else {
  HEAP32[i5 >> 2] = 0;
  i1 = HEAP32[i3 + 96 >> 2] | 0;
  i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] | 0;
  if (!i2) i1 = 6; else {
   i1 = FUNCTION_TABLE_iii[i2 & 255](i1, 344705) | 0;
   if (!i1) i1 = 6; else {
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (!i1) i1 = 6; else i1 = FUNCTION_TABLE_iiii[i1 & 127](i3, i4, i5) | 0;
   }
  }
 }
 return i1 | 0;
}

function _declClose(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i5 = HEAP32[i1 + 8 >> 2] | 0;
   return i5 | 0;
  }
 case 17:
  {
   HEAP32[i1 >> 2] = HEAP32[i1 + 16 >> 2] | 0 ? 43 : 62;
   i5 = HEAP32[i1 + 8 >> 2] | 0;
   return i5 | 0;
  }
 default:
  {
   if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) {
    i5 = 59;
    return i5 | 0;
   }
   HEAP32[i1 >> 2] = 41;
   i5 = -1;
   return i5 | 0;
  }
 }
 return 0;
}

function _T1_Size_Done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 40 | 0;
 if (!(HEAP32[i3 >> 2] | 0)) return;
 i2 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i2 + 548 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if ((i1 | 0) != 0 & (i2 | 0) != 0) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) {
   i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
   if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i1 + 8 >> 2] & 127](HEAP32[i3 >> 2] | 0);
  }
 }
 HEAP32[i3 >> 2] = 0;
 return;
}

function _FcStrSetDestroy(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if ((HEAP32[i5 >> 2] | 0) == -1) return;
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = i4 + -1;
 if ((i4 | 0) != 1) return;
 i3 = i5 + 4 | 0;
 i4 = i5 + 12 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) > 0) {
  i2 = 0;
  do {
   _free(HEAP32[i1 + (i2 << 2) >> 2] | 0);
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
  } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
 }
 if (i1 | 0) _free(i1);
 _free(i5);
 return;
}

function _FcMakeDirectory(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!(HEAP8[i1 >> 0] | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = _FcStrDirname(i1) | 0;
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 if (!(_access(i2, 0) | 0)) if (!(_mkdir(i1, 493) | 0)) i1 = (_chmod(i1, 493) | 0) == 0; else i1 = 0; else if ((_access(i2, 0) | 0) == -1) if (!(_FcMakeDirectory(i2) | 0)) i1 = 0; else if (!(_mkdir(i1, 493) | 0)) i1 = (_chmod(i1, 493) | 0) == 0; else i1 = 0; else i1 = 0;
 _FcStrFree(i2);
 i2 = i1 & 1;
 return i2 | 0;
}

function _FcPatternObjectAddInteger(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 HEAP32[i6 >> 2] = 1;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i3 = _FcPatternObjectAddWithBinding(i1, i2, i5, 1, 1) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FcPatternObjectAddDouble(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 HEAP32[i6 >> 2] = 2;
 HEAPF64[i6 + 8 >> 3] = d3;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i2 = _FcPatternObjectAddWithBinding(i1, i2, i5, 1, 1) | 0;
 STACKTOP = i4;
 return i2 | 0;
}

function _FcPatternObjectAddBool(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 HEAP32[i6 >> 2] = 4;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i3 = _FcPatternObjectAddWithBinding(i1, i2, i5, 1, 1) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _notation4(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 17;
   break;
  }
 case 27:
  {
   HEAP32[i1 >> 2] = 60;
   HEAP32[i1 + 8 >> 2] = 17;
   i1 = 19;
   break;
  }
 case 17:
  {
   HEAP32[i1 >> 2] = HEAP32[i1 + 16 >> 2] | 0 ? 43 : 62;
   i1 = 20;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _condSect1(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 25:
  {
   HEAP32[i1 >> 2] = 62;
   i5 = i1 + 12 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   i5 = 0;
   return i5 | 0;
  }
 case 15:
  {
   i5 = 0;
   return i5 | 0;
  }
 default:
  {
   if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) {
    i5 = 59;
    return i5 | 0;
   }
   HEAP32[i1 >> 2] = 41;
   i5 = -1;
   return i5 | 0;
  }
 }
 return 0;
}

function _FcSerializePtr(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i1 = HEAP32[i3 + 12 + (((i2 >>> 0) % 8191 | 0) << 2) >> 2] | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 while (1) {
  if ((HEAP32[i1 + 4 >> 2] | 0) == (i2 | 0)) break;
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i4 = 6;
   break;
  }
 }
 if ((i4 | 0) == 6) return i1 | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 i4 = (HEAP32[i3 + 8 >> 2] | 0) + i1 | 0;
 return i4 | 0;
}

function _normal_nameLength(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 76 | 0;
 i1 = i4;
 L1 : while (1) {
  switch (HEAP8[i3 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
  case 5:
   {
    i2 = 2;
    break;
   }
  case 6:
   {
    i2 = 3;
    break;
   }
  case 7:
   {
    i2 = 4;
    break;
   }
  case 27:
  case 26:
  case 25:
  case 24:
  case 23:
  case 22:
  case 29:
   {
    i2 = 1;
    break;
   }
  default:
   break L1;
  }
  i1 = i1 + i2 | 0;
 }
 return i1 - i4 | 0;
}

function ___stdio_seek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5;
 i4 = i5 + 20 | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = i2;
 HEAP32[i6 + 12 >> 2] = i4;
 HEAP32[i6 + 16 >> 2] = i3;
 if ((___syscall_ret(___syscall140(140, i6 | 0) | 0) | 0) < 0) {
  HEAP32[i4 >> 2] = -1;
  i1 = -1;
 } else i1 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function _FcRuleDestroy(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 do {
  i2 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  switch (HEAP32[i2 + 4 >> 2] | 0) {
  case 1:
   {
    i4 = HEAP32[i2 + 8 >> 2] | 0;
    _FcExprDestroy(HEAP32[i4 + 16 >> 2] | 0);
    _free(i4);
    break;
   }
  case 2:
   {
    i4 = HEAP32[i2 + 8 >> 2] | 0;
    i3 = HEAP32[i4 + 8 >> 2] | 0;
    if (i3 | 0) _FcExprDestroy(i3);
    _free(i4);
    break;
   }
  default:
   {}
  }
  _free(i2);
 } while ((i1 | 0) != 0);
 return;
}

function _af_indic_metrics_scale(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i3 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
 _af_cjk_metrics_scale_dim(i1, i2, 0);
 _af_cjk_metrics_scale_dim(i1, i2, 1);
 return;
}

function _store_int(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 L1 : do if (i1 | 0) switch (i2 | 0) {
 case -2:
  {
   HEAP8[i1 >> 0] = i3;
   break L1;
  }
 case -1:
  {
   HEAP16[i1 >> 1] = i3;
   break L1;
  }
 case 0:
  {
   HEAP32[i1 >> 2] = i3;
   break L1;
  }
 case 1:
  {
   HEAP32[i1 >> 2] = i3;
   break L1;
  }
 case 3:
  {
   i2 = i1;
   HEAP32[i2 >> 2] = i3;
   HEAP32[i2 + 4 >> 2] = i4;
   break L1;
  }
 default:
  break L1;
 } while (0);
 return;
}

function _af_cjk_metrics_scale(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i3 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
 _af_cjk_metrics_scale_dim(i1, i2, 0);
 _af_cjk_metrics_scale_dim(i1, i2, 1);
 return;
}

function _FT_Get_Sfnt_Table(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 if (!i3) {
  i4 = 0;
  return i4 | 0;
 }
 if (!(HEAP32[i3 + 8 >> 2] & 8)) {
  i4 = 0;
  return i4 | 0;
 }
 i2 = HEAP32[i3 + 96 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = FUNCTION_TABLE_iii[i1 & 255](i2, 344694) | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 i4 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 255](i3, i4) | 0;
 return i4 | 0;
}

function _FT_Outline_Translate(i3, i5, i6) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 if (!i3) return;
 i1 = HEAP16[i3 + 2 >> 1] | 0;
 if (i1 << 16 >> 16 <= 0) return;
 i4 = i1 << 16 >> 16;
 i2 = 0;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 while (1) {
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i5;
  i3 = i1 + 4 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i6;
  i2 = i2 + 1 << 16 >> 16;
  if ((i2 & 65535 | 0) >= (i4 | 0)) break; else i1 = i1 + 8 | 0;
 }
 return;
}

function _sfnt_get_name_index(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i6;
 i5 = HEAP32[i2 + 16 >> 2] | 0;
 L1 : do if ((i5 | 0) > 0) {
  i1 = 0;
  while (1) {
   if (!(_tt_face_get_ps_name(i2, i1, i4) | 0)) if (!(_strcmp(i3, HEAP32[i4 >> 2] | 0) | 0)) break L1;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i5 >>> 0) {
    i1 = 0;
    break;
   }
  }
 } else i1 = 0; while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _FcCompareFilename(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, d5 = 0.0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = i4;
 i3 = (i3 & 1 | 0) == 0 ? i4 : (i3 & -2) + i1 | 0;
 i4 = HEAP32[i2 + 8 >> 2] | 0;
 i1 = i4;
 i1 = (i1 & 1 | 0) == 0 ? i4 : (i1 & -2) + i2 | 0;
 if (!(_FcStrCmp(i3, i1) | 0)) {
  d5 = 0.0;
  return +d5;
 }
 if (!(_FcStrCmpIgnoreCase(i3, i1) | 0)) {
  d5 = 1.0;
  return +d5;
 }
 i4 = (_FcStrGlobMatch(i3, i1) | 0) == 0;
 d5 = i4 ? 3.0 : 2.0;
 return +d5;
}

function _Round_Super_45(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = HEAP32[i1 + 480 >> 2] | 0;
 i5 = HEAP32[i1 + 484 >> 2] | 0;
 i1 = HEAP32[i1 + 476 >> 2] | 0;
 if ((i2 | 0) > -1) {
  i5 = i3 + i2 - i4 + i5 | 0;
  i5 = i5 - ((i5 | 0) % (i1 | 0) | 0) + i4 | 0;
  return ((i5 | 0) < 0 ? i4 : i5) | 0;
 } else {
  i5 = i3 - i2 - i4 + i5 | 0;
  i5 = ((i5 | 0) % (i1 | 0) | 0) - i5 - i4 | 0;
  return ((i5 | 0) > 0 ? 0 - i4 | 0 : i5) | 0;
 }
 return 0;
}

function _FcConfigGetFonts(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 L1 : do if (!i1) {
  i1 = HEAP32[91920] | 0;
  if (!i1) {
   while (1) {
    i1 = _FcInitLoadConfigAndFonts() | 0;
    i2 = HEAP32[91920] | 0;
    if (!i2) HEAP32[91920] = i1;
    if (!i2) break;
    _FcConfigDestroy(i1);
    i1 = HEAP32[91920] | 0;
    if (i1 | 0) break L1;
   }
   if (!i1) {
    i3 = 0;
    return i3 | 0;
   }
  }
 } while (0);
 i3 = HEAP32[i1 + 52 + (i3 << 2) >> 2] | 0;
 return i3 | 0;
}

function _prologProcessor(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i2;
 i8 = i1 + 144 | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 i7 = FUNCTION_TABLE_iiiii[HEAP32[i7 >> 2] & 127](i7, i2, i3, i6) | 0;
 i4 = _doProlog(i1, HEAP32[i8 >> 2] | 0, i2, i3, i7, HEAP32[i6 >> 2] | 0, i4, (HEAP8[i1 + 484 >> 0] | 0) == 0 & 1) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _prolog2(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i5 = i2 + -11 | 0;
 switch (i5 >>> 1 | i5 << 31 | 0) {
 case 2:
  {
   i1 = 0;
   break;
  }
 case 0:
  {
   i1 = 55;
   break;
  }
 case 1:
  {
   i1 = 56;
   break;
  }
 case 9:
  {
   HEAP32[i1 >> 2] = 41;
   i1 = 2;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _cmp_event_layer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = HEAP32[i1 + 28 >> 2] | 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 i2 = HEAP32[i4 + 20 >> 2] | 0;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i2 | 0) < (i3 | 0)) {
  i4 = -1;
  return i4 | 0;
 }
 if ((i2 | 0) > (i3 | 0)) {
  i4 = 1;
  return i4 | 0;
 } else {
  i3 = HEAP32[i4 + 16 >> 2] | 0;
  i4 = HEAP32[i1 + 16 >> 2] | 0;
  return ((i3 | 0) < (i4 | 0) ? -1 : (i3 | 0) > (i4 | 0) & 1) | 0;
 }
 return 0;
}

function _attlist1(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 33;
   break;
  }
 case 17:
  {
   HEAP32[i1 >> 2] = HEAP32[i1 + 16 >> 2] | 0 ? 43 : 62;
   i1 = 33;
   break;
  }
 case 41:
 case 18:
  {
   HEAP32[i1 >> 2] = 72;
   i1 = 22;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _FcLangSetPrint(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 1120 | 0;
 i4 = i5 + 8 | 0;
 i3 = i5;
 i2 = i5 + 12 | 0;
 _FcStrBufInit(i2, i5 + 96 | 0, 1024);
 if (_FcNameUnparseLangSet(i2, i1) | 0) if (_FcStrBufChar(i2, 0) | 0) {
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  _printf(352569, i3) | 0;
  _FcStrBufDestroy(i2);
  STACKTOP = i5;
  return;
 }
 _printf(347144, i4) | 0;
 _FcStrBufDestroy(i2);
 STACKTOP = i5;
 return;
}

function _FcNameConstant(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 while (1) {
  i5 = 67004 + (i1 * 12 | 0) | 0;
  i4 = i1 + 1 | 0;
  if (!(_FcStrCmpIgnoreCase(i2, HEAP32[i5 >> 2] | 0) | 0)) break;
  if (i4 >>> 0 < 57) i1 = i4; else {
   i1 = 0;
   i6 = 6;
   break;
  }
 }
 if ((i6 | 0) == 6) return i1 | 0;
 if (!i5) {
  i6 = 0;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = HEAP32[67004 + (i1 * 12 | 0) + 8 >> 2];
 i6 = 1;
 return i6 | 0;
}

function _little2_skipS(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (HEAP8[i1 + 1 >> 0] | 0) {
  i3 = i1;
  return i3 | 0;
 }
 i3 = i2 + 76 | 0;
 L4 : while (1) {
  switch (HEAP8[i3 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
  case 21:
  case 9:
  case 10:
   break;
  default:
   {
    i2 = 5;
    break L4;
   }
  }
  i2 = i1 + 2 | 0;
  if (!(HEAP8[i1 + 3 >> 0] | 0)) i1 = i2; else {
   i1 = i2;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) return i1 | 0;
 return 0;
}

function _perror(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = HEAP32[22811] | 0;
 i4 = ___errno_location() | 0;
 i4 = _strerror(HEAP32[i4 >> 2] | 0) | 0;
 if ((HEAP32[i2 + 76 >> 2] | 0) > -1) i3 = ___lockfile(i2) | 0; else i3 = 0;
 if (i1 | 0) if (HEAP8[i1 >> 0] | 0) {
  _fwrite(i1, _strlen(i1) | 0, 1, i2) | 0;
  _fputc(58, i2) | 0;
  _fputc(32, i2) | 0;
 }
 _fwrite(i4, _strlen(i4) | 0, 1, i2) | 0;
 _fputc(10, i2) | 0;
 if (i3 | 0) ___unlockfile(i2);
 return;
}

function _tt_size_select(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = i1 + 112 | 0;
 HEAP32[i4 >> 2] = i2;
 if (HEAP32[i3 + 8 >> 2] & 1 | 0) {
  _FT_Select_Metrics(i3, i2);
  _tt_size_reset(i1) | 0;
  i4 = 0;
  return i4 | 0;
 }
 i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 + 532 >> 2] | 0) + 108 >> 2] & 127](i3, i2, i1 + 12 | 0) | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 HEAP32[i4 >> 2] = -1;
 i4 = i1;
 return i4 | 0;
}

function _T1_Set_Var_Design(i3, i1, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = i1 >>> 0 < 4 ? i1 : 4;
 if (i1 | 0) {
  i2 = 0;
  do {
   i7 = (_FT_RoundFix(HEAP32[i4 + (i2 << 2) >> 2] | 0) | 0) >> 16;
   HEAP32[i5 + (i2 << 2) >> 2] = i7;
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < i1 >>> 0);
 }
 i7 = _T1_Set_MM_Design(i3, i1, i5) | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function _element5(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 39;
   break;
  }
 case 36:
  {
   HEAP32[i1 >> 2] = 60;
   HEAP32[i1 + 8 >> 2] = 39;
   i1 = 46;
   break;
  }
 case 21:
  {
   HEAP32[i1 >> 2] = 70;
   i1 = 39;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _FcPatternAdd(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i2 = _FcObjectFromName(i2) | 0;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i4 = _FcPatternObjectAddWithBinding(i1, i2, i6, 1, i4) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _cff_get_cid_from_glyph_index(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = HEAP32[i1 + 656 >> 2] | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 if ((HEAP32[i1 + 1456 >> 2] | 0) == 65535) {
  i3 = 6;
  return i3 | 0;
 }
 if ((HEAP32[i1 + 12 >> 2] | 0) >>> 0 < i2 >>> 0) {
  i3 = 6;
  return i3 | 0;
 }
 if (!i3) {
  i3 = 0;
  return i3 | 0;
 }
 HEAP32[i3 >> 2] = HEAPU16[(HEAP32[i1 + 1160 >> 2] | 0) + (i2 << 1) >> 1];
 i3 = 0;
 return i3 | 0;
}

function _entity10(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 17:
  {
   HEAP32[i1 >> 2] = HEAP32[i1 + 16 >> 2] | 0 ? 43 : 62;
   i5 = 15;
   return i5 | 0;
  }
 case 15:
  {
   i5 = 11;
   return i5 | 0;
  }
 default:
  {
   if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) {
    i5 = 59;
    return i5 | 0;
   }
   HEAP32[i1 >> 2] = 41;
   i5 = -1;
   return i5 | 0;
  }
 }
 return 0;
}

function _cff_get_interface(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = _ft_service_list_lookup(9396, i3) | 0;
 if (i2 | 0) {
  i3 = i2;
  return i3 | 0;
 }
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = _FT_Get_Module(i1, 283071) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 255](i1, i3) | 0;
 return i3 | 0;
}

function _ass_drawing_new(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _calloc(1, 120) | 0;
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 HEAP32[i2 + 108 >> 2] = 2147483647;
 HEAP32[i2 + 104 >> 2] = 2147483647;
 HEAP32[i2 + 116 >> 2] = -2147483648;
 HEAP32[i2 + 112 >> 2] = -2147483648;
 HEAP32[i2 + 76 >> 2] = i1;
 HEAPF64[i2 + 16 >> 3] = 1.0;
 HEAPF64[i2 + 24 >> 3] = 1.0;
 if (_outline_alloc(i2 + 40 | 0, 100, 100) | 0) return i2 | 0;
 _free(i2);
 i2 = 0;
 return i2 | 0;
}

function ___towrite(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 74 | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 HEAP8[i2 >> 0] = i3 + 255 | i3;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 8)) {
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  i3 = HEAP32[i1 + 44 >> 2] | 0;
  HEAP32[i1 + 28 >> 2] = i3;
  HEAP32[i1 + 20 >> 2] = i3;
  HEAP32[i1 + 16 >> 2] = i3 + (HEAP32[i1 + 48 >> 2] | 0);
  i1 = 0;
 } else {
  HEAP32[i1 >> 2] = i2 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function _FT_Stream_Skip(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 if ((i1 | 0) < 0) {
  i4 = 85;
  return i4 | 0;
 }
 i4 = i3 + 8 | 0;
 i1 = (HEAP32[i4 >> 2] | 0) + i1 | 0;
 i2 = HEAP32[i3 + 20 >> 2] | 0;
 if (!i2) {
  if ((HEAP32[i3 + 4 >> 2] | 0) >>> 0 < i1 >>> 0) {
   i4 = 85;
   return i4 | 0;
  }
 } else if (FUNCTION_TABLE_iiiii[i2 & 127](i3, i1, 0, 0) | 0) {
  i4 = 85;
  return i4 | 0;
 }
 HEAP32[i4 >> 2] = i1;
 i4 = 0;
 return i4 | 0;
}

function _libassjs_render(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4;
 i5 = i4 + 12 | 0;
 i3 = i4 + 8 | 0;
 HEAPF64[i6 >> 3] = d1;
 HEAP32[i5 >> 2] = i2;
 i2 = ~~(+HEAPF64[i6 >> 3] * 1.0e3);
 i2 = _ass_render_frame(HEAP32[91913] | 0, HEAP32[91914] | 0, i2, ((i2 | 0) < 0) << 31 >> 31, HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i2;
 STACKTOP = i4;
 return HEAP32[i3 >> 2] | 0;
}

function _FcMatrixEqual(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((i1 | 0) == (i2 | 0)) {
  i2 = 1;
  return i2 | 0;
 }
 if ((i1 | 0) == 0 | (i2 | 0) == 0) {
  i2 = 0;
  return i2 | 0;
 }
 if (+HEAPF64[i1 >> 3] == +HEAPF64[i2 >> 3]) if (+HEAPF64[i1 + 8 >> 3] == +HEAPF64[i2 + 8 >> 3]) if (+HEAPF64[i1 + 16 >> 3] == +HEAPF64[i2 + 16 >> 3]) i1 = +HEAPF64[i1 + 24 >> 3] == +HEAPF64[i2 + 24 >> 3]; else i1 = 0; else i1 = 0; else i1 = 0;
 i2 = i1 & 1;
 return i2 | 0;
}

function _ft_service_list_lookup(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 if (!((i1 | 0) != 0 & (i3 | 0) != 0)) {
  i4 = 0;
  return i4 | 0;
 }
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  i4 = 0;
  return i4 | 0;
 }
 while (1) {
  if (!(_strcmp(i2, i3) | 0)) break;
  i1 = i1 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) {
   i1 = 0;
   i4 = 6;
   break;
  }
 }
 if ((i4 | 0) == 6) return i1 | 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 return i4 | 0;
}

function ___stdout_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i5;
 HEAP32[i1 + 36 >> 2] = 61;
 if (!(HEAP32[i1 >> 2] & 64)) {
  HEAP32[i4 >> 2] = HEAP32[i1 + 60 >> 2];
  HEAP32[i4 + 4 >> 2] = 21523;
  HEAP32[i4 + 8 >> 2] = i5 + 16;
  if (___syscall54(54, i4 | 0) | 0) HEAP8[i1 + 75 >> 0] = -1;
 }
 i4 = ___stdio_write(i1, i2, i3) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _FcConfigGetSysRoot(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 L1 : do if (!i1) {
  i1 = HEAP32[91920] | 0;
  if (!i1) {
   while (1) {
    i1 = _FcInitLoadConfigAndFonts() | 0;
    i2 = HEAP32[91920] | 0;
    if (!i2) HEAP32[91920] = i1;
    if (!i2) break;
    _FcConfigDestroy(i1);
    i1 = HEAP32[91920] | 0;
    if (i1 | 0) break L1;
   }
   if (!i1) {
    i2 = 0;
    return i2 | 0;
   }
  }
 } while (0);
 i2 = HEAP32[i1 + 76 >> 2] | 0;
 return i2 | 0;
}

function _FT_Get_PS_Font_Info(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 if (!i3) i1 = 35; else if (!i4) i1 = 6; else {
  i1 = HEAP32[i3 + 96 >> 2] | 0;
  i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] | 0;
  if (!i2) i1 = 6; else {
   i1 = FUNCTION_TABLE_iii[i2 & 255](i1, 344721) | 0;
   if (!i1) i1 = 6; else {
    i1 = HEAP32[i1 >> 2] | 0;
    if (!i1) i1 = 6; else i1 = FUNCTION_TABLE_iii[i1 & 255](i3, i4) | 0;
   }
  }
 }
 return i1 | 0;
}

function _cid_ps_get_font_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = i1 + 140 + 24 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
 return 0;
}

function _FcConfigGetBlanks(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 L1 : do if (!i1) {
  i1 = HEAP32[91920] | 0;
  if (!i1) {
   while (1) {
    i1 = _FcInitLoadConfigAndFonts() | 0;
    i2 = HEAP32[91920] | 0;
    if (!i2) HEAP32[91920] = i1;
    if (!i2) break;
    _FcConfigDestroy(i1);
    i1 = HEAP32[91920] | 0;
    if (i1 | 0) break L1;
   }
   if (!i1) {
    i2 = 0;
    return i2 | 0;
   }
  }
 } while (0);
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 return i2 | 0;
}

function _sbrk(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 15 & -16 | 0;
 i2 = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 i1 = i2 + i3 | 0;
 if ((i3 | 0) > 0 & (i1 | 0) < (i2 | 0) | (i1 | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = i1;
 if ((i1 | 0) > (getTotalMemory() | 0)) if (!(enlargeMemory() | 0)) {
  HEAP32[DYNAMICTOP_PTR >> 2] = i2;
  ___setErrNo(12);
  return -1;
 }
 return i2 | 0;
}

function _FcValueDestroy(i1) {
 i1 = i1 | 0;
 switch (HEAP32[i1 >> 2] | 0) {
 case 3:
  {
   _free(HEAP32[i1 + 8 >> 2] | 0);
   return;
  }
 case 5:
  {
   _FcMatrixFree(HEAP32[i1 + 8 >> 2] | 0);
   return;
  }
 case 6:
  {
   _FcCharSetDestroy(HEAP32[i1 + 8 >> 2] | 0);
   return;
  }
 case 8:
  {
   _FcLangSetDestroy(HEAP32[i1 + 8 >> 2] | 0);
   return;
  }
 case 9:
  {
   _FcRangeDestroy(HEAP32[i1 + 8 >> 2] | 0);
   return;
  }
 default:
  return;
 }
}

function _ft_synthesize_vertical_metrics(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 i3 = (i3 | 0) < 0 ? ((i4 | 0) < (i3 | 0) ? i3 : i4) : i4 - i3 | 0;
 i2 = (i2 | 0) == 0 ? (i3 * 12 | 0) / 10 | 0 : i2;
 HEAP32[i1 + 20 >> 2] = (HEAP32[i1 + 8 >> 2] | 0) - ((HEAP32[i1 + 16 >> 2] | 0) / 2 | 0);
 HEAP32[i1 + 24 >> 2] = (i2 - i3 | 0) / 2 | 0;
 HEAP32[i1 + 28 >> 2] = i2;
 return;
}

function _fribidi_get_bidi_types(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if (!i1) return; else i4 = i2;
 while (1) {
  i2 = HEAP32[i3 >> 2] | 0;
  if ((i2 | 0) > 1114111) i2 = 0; else i2 = HEAPU8[245992 + ((HEAPU16[92144 + (i2 >> 8 << 1) >> 1] | 0) + (i2 & 255)) >> 0] | 0;
  HEAP32[i4 >> 2] = HEAP32[5028 + (i2 << 2) >> 2];
  i1 = i1 + -1 | 0;
  if (!i1) break; else {
   i4 = i4 + 4 | 0;
   i3 = i3 + 4 | 0;
  }
 }
 return;
}

function _vsscanf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i4 = i6;
 i5 = i4;
 i7 = i5 + 124 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i7 | 0));
 HEAP32[i4 + 32 >> 2] = 94;
 HEAP32[i4 + 44 >> 2] = i1;
 HEAP32[i4 + 76 >> 2] = -1;
 HEAP32[i4 + 84 >> 2] = i1;
 i7 = _vfscanf(i4, i2, i3) | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function _t42_ps_get_font_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = i1 + 132 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
 return 0;
}

function _ass_strncasecmp(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i5 = i2 + i1 | 0;
 i1 = i3;
 while (1) {
  i6 = HEAP8[i2 >> 0] | 0;
  i2 = i2 + 1 | 0;
  i4 = HEAP8[355659 + (i6 & 255) >> 0] | 0;
  i3 = HEAP8[355659 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0;
  if (!(i6 << 24 >> 24 != 0 & i2 >>> 0 < i5 >>> 0 & i4 << 24 >> 24 == i3 << 24 >> 24)) break; else i1 = i1 + 1 | 0;
 }
 return (i4 & 255) - (i3 & 255) | 0;
}

function _t1_ps_get_font_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = i1 + 132 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
 return 0;
}

function _mystrtoll(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, d5 = 0.0;
 i3 = HEAP32[i1 >> 2] | 0;
 d5 = +_ass_strtod(i3, i1);
 d5 = d5 + (d5 > 0.0 ? .5 : -.5);
 i4 = +Math_abs(d5) >= 1.0 ? (d5 > 0.0 ? ~~+Math_min(+Math_floor(d5 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil((d5 - +(~~d5 >>> 0)) / 4294967296.0) >>> 0) : 0;
 HEAP32[i2 >> 2] = ~~d5 >>> 0;
 HEAP32[i2 + 4 >> 2] = i4;
 return (HEAP32[i1 >> 2] | 0) != (i3 | 0) | 0;
}

function _pfr_slot_done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[HEAP32[i1 + 188 >> 2] >> 2] | 0;
 i3 = i1 + 168 | 0;
 _ft_mem_free(i2, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 HEAP32[i1 + 172 >> 2] = 0;
 HEAP32[i1 + 164 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i1 + 184 >> 2] | 0);
 i1 = i1 + 176 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP8[i1 + 16 >> 0] = 0;
 return;
}

function _ft_outline_glyph_prepare(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 HEAP32[i2 + 72 >> 2] = 1869968492;
 i3 = i2 + 108 | 0;
 i1 = i1 + 20 | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 i2 = i2 + 124 | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
 return 0;
}

function _t1_get_name_index(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = HEAP32[i1 + 416 >> 2] | 0;
 if ((i4 | 0) <= 0) {
  i4 = 0;
  return i4 | 0;
 }
 i2 = HEAP32[i1 + 420 >> 2] | 0;
 i1 = 0;
 while (1) {
  if (!(_strcmp(i3, HEAP32[i2 + (i1 << 2) >> 2] | 0) | 0)) {
   i2 = 5;
   break;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i4 | 0)) {
   i1 = 0;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) return i1 | 0;
 return 0;
}

function _af_indic_metrics_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = i2 + 92 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 40 >> 2] = HEAPU16[i2 + 68 >> 1];
 if (!(_FT_Select_Charmap(i2, 1970170211) | 0)) {
  _af_cjk_metrics_init_widths(i1, i2);
  _af_cjk_metrics_check_digits(i1, i2);
  _FT_Set_Charmap(i2, i4) | 0;
  return 0;
 } else {
  HEAP32[i3 >> 2] = 0;
  _FT_Set_Charmap(i2, i4) | 0;
  return 0;
 }
 return 0;
}

function _tt_cmap0_char_next(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i3 = (HEAP32[i1 + 16 >> 2] | 0) + 6 | 0;
 i2 = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 while (1) {
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= 256) {
   i1 = 0;
   i3 = 4;
   break;
  }
  i5 = HEAP8[i3 + i1 >> 0] | 0;
  i2 = i5 & 255;
  if (i5 << 24 >> 24) {
   i3 = 4;
   break;
  }
 }
 if ((i3 | 0) == 4) {
  HEAP32[i4 >> 2] = i1;
  return i2 | 0;
 }
 return 0;
}

function ___string_read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i1 + 84 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i7 = i3 + 256 | 0;
 i5 = _memchr(i6, 0, i7) | 0;
 i5 = (i5 | 0) == 0 ? i7 : i5 - i6 | 0;
 i3 = i5 >>> 0 < i3 >>> 0 ? i5 : i3;
 _memcpy(i2 | 0, i6 | 0, i3 | 0) | 0;
 HEAP32[i1 + 4 >> 2] = i6 + i3;
 i2 = i6 + i5 | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 HEAP32[i4 >> 2] = i2;
 return i3 | 0;
}

function _XML_GetCurrentLineNumber(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = i1 + 288 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 | 0) {
  i4 = i1 + 296 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if (i3 >>> 0 >= i5 >>> 0) {
   i6 = HEAP32[i1 + 144 >> 2] | 0;
   FUNCTION_TABLE_viiii[HEAP32[i6 + 52 >> 2] & 31](i6, i5, i3, i1 + 408 | 0);
   HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  }
 }
 return (HEAP32[i1 + 408 >> 2] | 0) + 1 | 0;
}

function _FcPatternObjectAdd(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 i4 = _FcPatternObjectAddWithBinding(i1, i2, i6, 1, i4) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _cff_get_ps_name(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = HEAP32[i2 + 656 >> 2] | 0;
 if (HEAP32[i2 + 532 >> 2] | 0) {
  i1 = _ft_module_get_service(_FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 283071) | 0, 344673) | 0;
  if (i1 | 0) {
   i1 = HEAP32[i1 >> 2] | 0;
   if (i1 | 0) {
    i3 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
    return i3 | 0;
   }
  }
 }
 i3 = HEAP32[i3 + 1304 >> 2] | 0;
 return i3 | 0;
}

function _attlist7(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 33;
   break;
  }
 case 24:
  {
   HEAP32[i1 >> 2] = 73;
   i1 = 33;
   break;
  }
 case 21:
  {
   HEAP32[i1 >> 2] = 77;
   i1 = 33;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _attlist4(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 33;
   break;
  }
 case 24:
  {
   HEAP32[i1 >> 2] = 73;
   i1 = 33;
   break;
  }
 case 21:
  {
   HEAP32[i1 >> 2] = 75;
   i1 = 33;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _font_compare(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (_strcmp(HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0) {
  i3 = 0;
  return i3 | 0;
 }
 if ((HEAP32[i1 + 4 >> 2] | 0) != (HEAP32[i2 + 4 >> 2] | 0)) {
  i3 = 0;
  return i3 | 0;
 }
 if ((HEAP32[i1 + 8 >> 2] | 0) != (HEAP32[i2 + 8 >> 2] | 0)) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = (HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i2 + 12 >> 2] | 0) & 1;
 return i3 | 0;
}

function ___sin(d1, d2, i5) {
 d1 = +d1;
 d2 = +d2;
 i5 = i5 | 0;
 var d3 = 0.0, d4 = 0.0, d6 = 0.0;
 d6 = d1 * d1;
 d3 = d6 * (d6 * d6) * (d6 * 1.58969099521155e-10 + -2.5050760253406863e-08) + (d6 * (d6 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
 d4 = d6 * d1;
 if (!i5) d1 = d4 * (d6 * d3 + -.16666666666666632) + d1; else d1 = d1 - (d4 * .16666666666666632 + (d6 * (d2 * .5 - d4 * d3) - d2));
 return +d1;
}

function ___fmodeflags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = (_strchr(i1, 43) | 0) == 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i3 = i3 ? i2 << 24 >> 24 != 114 & 1 : 2;
 i4 = (_strchr(i1, 120) | 0) == 0;
 i3 = i4 ? i3 : i3 | 128;
 i1 = (_strchr(i1, 101) | 0) == 0;
 i1 = i1 ? i3 : i3 | 524288;
 i1 = i2 << 24 >> 24 == 114 ? i1 : i1 | 64;
 i1 = i2 << 24 >> 24 == 119 ? i1 | 512 : i1;
 return (i2 << 24 >> 24 == 97 ? i1 | 1024 : i1) | 0;
}

function _entity0(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 11;
   break;
  }
 case 22:
  {
   HEAP32[i1 >> 2] = 53;
   i1 = 11;
   break;
  }
 case 18:
  {
   HEAP32[i1 >> 2] = 54;
   i1 = 9;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _doctype4(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 3;
   break;
  }
 case 25:
  {
   HEAP32[i1 >> 2] = 43;
   i1 = 7;
   break;
  }
 case 17:
  {
   HEAP32[i1 >> 2] = 44;
   i1 = 8;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _strcmp(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i1 = HEAP8[i2 >> 0] | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 if (i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i4 << 24 >> 24) i2 = i4; else {
  do {
   i2 = i2 + 1 | 0;
   i3 = i3 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   i4 = HEAP8[i3 >> 0] | 0;
  } while (!(i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i4 << 24 >> 24));
  i2 = i4;
 }
 return (i1 & 255) - (i2 & 255) | 0;
}

function _ass_font_clear(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = i4 + 108 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) > 0) i3 = 0; else {
  i5 = HEAP32[i4 >> 2] | 0;
  _free(i5);
  return;
 }
 do {
  i2 = HEAP32[i4 + 64 + (i3 << 2) >> 2] | 0;
  if (i2) {
   _FT_Done_Face(i2) | 0;
   i1 = HEAP32[i5 >> 2] | 0;
  }
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) < (i1 | 0));
 i5 = HEAP32[i4 >> 2] | 0;
 _free(i5);
 return;
}

function _TT_Access_Glyph_Frame(i5, i1, i2, i3) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = HEAP32[i5 + 24 >> 2] | 0;
 i1 = _FT_Stream_Seek(i4, i2) | 0;
 if (i1 | 0) {
  i5 = i1;
  return i5 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i4, i3) | 0;
 if (i1 | 0) {
  i5 = i1;
  return i5 | 0;
 }
 HEAP32[i5 + 200 >> 2] = HEAP32[i4 + 32 >> 2];
 HEAP32[i5 + 204 >> 2] = HEAP32[i4 + 36 >> 2];
 i5 = 0;
 return i5 | 0;
}

function _memcmp(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 L1 : do if (!i2) i1 = 0; else {
  while (1) {
   i4 = HEAP8[i1 >> 0] | 0;
   i5 = HEAP8[i3 >> 0] | 0;
   if (i4 << 24 >> 24 != i5 << 24 >> 24) break;
   i2 = i2 + -1 | 0;
   if (!i2) {
    i1 = 0;
    break L1;
   } else {
    i1 = i1 + 1 | 0;
    i3 = i3 + 1 | 0;
   }
  }
  i1 = (i4 & 255) - (i5 & 255) | 0;
 } while (0);
 return i1 | 0;
}

function _FT_Stream_GetULongLE(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 32 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = i3 + 3 | 0;
 if (i4 >>> 0 >= (HEAP32[i1 + 36 >> 2] | 0) >>> 0) {
  i4 = 0;
  HEAP32[i2 >> 2] = i3;
  return i4 | 0;
 }
 i4 = (HEAPU8[i3 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0);
 i3 = i3 + 4 | 0;
 HEAP32[i2 >> 2] = i3;
 return i4 | 0;
}

function _FT_New_Memory_Face(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i7;
 if (!i2) {
  i6 = 6;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i6 >> 2] = 1;
 HEAP32[i6 + 4 >> 2] = i2;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAP32[i6 + 16 >> 2] = 0;
 i6 = _FT_Open_Face(i1, i6, i4, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _ps_table_release(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = HEAP32[i1 + 32 >> 2] | 0;
 i3 = i1 + 12 | 0;
 if ((HEAP32[i3 >> 2] | 0) != -559038737) return;
 _ft_mem_free(i2, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i4 = i1 + 24 | 0;
 _ft_mem_free(i2, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i1 = i1 + 28 | 0;
 _ft_mem_free(i2, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 return;
}

function _fribidi_get_joining_types(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if (!i1) return; else i4 = i2;
 while (1) {
  i2 = HEAP32[i3 >> 2] | 0;
  if ((i2 | 0) > 1048575) i2 = 0; else i2 = HEAPU8[267496 + ((HEAPU16[106352 + (i2 >> 8 << 1) >> 1] | 0) + (i2 & 255)) >> 0] | 0;
  HEAP8[i4 >> 0] = i2;
  i1 = i1 + -1 | 0;
  if (!i1) break; else {
   i4 = i4 + 1 | 0;
   i3 = i3 + 4 | 0;
  }
 }
 return;
}

function _FcSortCompare(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var d1 = 0.0, d2 = 0.0, i5 = 0, i6 = 0;
 i6 = 24;
 d2 = 0.0;
 d1 = 0.0;
 i5 = (HEAP32[i3 >> 2] | 0) + 8 | 0;
 i3 = (HEAP32[i4 >> 2] | 0) + 8 | 0;
 while (1) {
  if (!i6) break;
  d1 = +HEAPF64[i3 >> 3];
  d2 = +HEAPF64[i5 >> 3];
  if (d1 == d2) {
   i6 = i6 + -1 | 0;
   i5 = i5 + 8 | 0;
   i3 = i3 + 8 | 0;
  } else break;
 }
 return (d1 < d2 ? -1 : d1 > d2 & 1) | 0;
}

function _FT_Stream_GetULong(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 32 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = i3 + 3 | 0;
 if (i4 >>> 0 >= (HEAP32[i1 + 36 >> 2] | 0) >>> 0) {
  i4 = 0;
  HEAP32[i2 >> 2] = i3;
  return i4 | 0;
 }
 i4 = (HEAPU8[i3 + 1 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 >> 0] | 0);
 i3 = i3 + 4 | 0;
 HEAP32[i2 >> 2] = i3;
 return i4 | 0;
}

function _Round_Super(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = HEAP32[i1 + 480 >> 2] | 0;
 i5 = HEAP32[i1 + 484 >> 2] | 0;
 i1 = 0 - (HEAP32[i1 + 476 >> 2] | 0) | 0;
 if ((i2 | 0) > -1) {
  i5 = (i3 + i2 - i4 + i5 & i1) + i4 | 0;
  return ((i5 | 0) < 0 ? i4 : i5) | 0;
 } else {
  i5 = 0 - ((i3 - i2 - i4 + i5 & i1) + i4) | 0;
  return ((i5 | 0) > 0 ? 0 - i4 | 0 : i5) | 0;
 }
 return 0;
}

function _FT_GlyphSlot_Oblique(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 if (!i1) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i1 + 72 >> 2] | 0) != 1869968492) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i2 >> 2] = 65536;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 13930;
 HEAP32[i2 + 12 >> 2] = 65536;
 _FT_Outline_Transform(i1 + 108 | 0, i2);
 STACKTOP = i3;
 return;
}

function _fwrite(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 i5 = Math_imul(i1, i4) | 0;
 i1 = (i4 | 0) == 0 ? 0 : i1;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i6 = (___lockfile(i3) | 0) == 0;
  i2 = ___fwritex(i2, i5, i3) | 0;
  if (!i6) ___unlockfile(i3);
 } else i2 = ___fwritex(i2, i5, i3) | 0;
 if ((i2 | 0) != (i5 | 0)) i1 = (i2 >>> 0) / (i4 >>> 0) | 0;
 return i1 | 0;
}

function _check_postscript(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 if (!(_FcPatternGetString(i1, 355051, 0, i2) | 0)) {
  i1 = HEAP32[i2 >> 2] | 0;
  if (!(_strcmp(i1, 355062) | 0)) i1 = 1; else if (!(_strcmp(i1, 355069) | 0)) i1 = 1; else if (!(_strcmp(i1, 355077) | 0)) i1 = 1; else i1 = (_strcmp(i1, 355088) | 0) == 0;
 } else i1 = 0;
 STACKTOP = i3;
 return i1 | 0;
}

function _big2_skipS(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (HEAP8[i1 >> 0] | 0) {
  i2 = i1;
  return i2 | 0;
 }
 i2 = i2 + 76 | 0;
 L4 : while (1) {
  switch (HEAP8[i2 + (HEAPU8[i1 + 1 >> 0] | 0) >> 0] | 0) {
  case 21:
  case 9:
  case 10:
   break;
  default:
   {
    i2 = 5;
    break L4;
   }
  }
  i1 = i1 + 2 | 0;
  if (HEAP8[i1 >> 0] | 0) {
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) return i1 | 0;
 return 0;
}

function _pfr_get_advance(i2, i1, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i3 = 0;
 HEAP32[i4 >> 2] = 0;
 if (!i1) {
  i4 = 6;
  return i4 | 0;
 }
 i3 = i1 + -1 | 0;
 if (!i2) {
  i4 = 6;
  return i4 | 0;
 }
 i1 = i2 + 288 | 0;
 if (i3 >>> 0 >= (HEAP32[i1 + 120 >> 2] | 0) >>> 0) {
  i4 = 6;
  return i4 | 0;
 }
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i1 + 128 >> 2] | 0) + (i3 << 4) + 4 >> 2];
 i4 = 0;
 return i4 | 0;
}

function _t1_hints_stem(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 i4 = _FT_RoundFix(HEAP32[i1 >> 2] | 0) | 0;
 i1 = _FT_RoundFix(HEAP32[i1 + 4 >> 2] | 0) | 0;
 i5 = i2 + 4 | 0;
 if (HEAP32[i5 >> 2] | 0) return;
 i1 = _ps_dimension_add_t1stem(i2 + 16 + (((i3 | 0) != 0 & 1) * 36 | 0) | 0, i4 >> 16, i1 >> 16, HEAP32[i2 >> 2] | 0, 0) | 0;
 if (!i1) return;
 HEAP32[i5 >> 2] = i1;
 return;
}

function _FcStrCmp(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 if ((i2 | 0) == (i1 | 0)) {
  i4 = 0;
  return i4 | 0;
 } else i3 = i1;
 while (1) {
  i1 = HEAP8[i2 >> 0] | 0;
  i4 = HEAP8[i3 >> 0] | 0;
  if (!(i1 << 24 >> 24)) {
   i1 = 0;
   break;
  }
  if (i1 << 24 >> 24 == i4 << 24 >> 24) {
   i3 = i3 + 1 | 0;
   i2 = i2 + 1 | 0;
  } else break;
 }
 i4 = (i1 & 255) - (i4 & 255) | 0;
 return i4 | 0;
}

function _ft_mem_strcpyn(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 L1 : do if (i2 >>> 0 > 1) while (1) {
  i4 = HEAP8[i3 >> 0] | 0;
  if (!(i4 << 24 >> 24)) break L1;
  i3 = i3 + 1 | 0;
  i5 = i1 + 1 | 0;
  HEAP8[i1 >> 0] = i4;
  i2 = i2 + -1 | 0;
  if (i2 >>> 0 <= 1) {
   i1 = i5;
   break;
  } else i1 = i5;
 } while (0);
 HEAP8[i1 >> 0] = 0;
 return (HEAP8[i3 >> 0] | 0) != 0 | 0;
}

function _tt_cmap14_def_char_count(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = i1;
 i2 = i2 + 7 | 0;
 i1 = 0;
 while (1) {
  i1 = i1 + 1 + (HEAPU8[i2 >> 0] | 0) | 0;
  i3 = i3 + -1 | 0;
  if (!i3) break; else i2 = i2 + 4 | 0;
 }
 return i1 | 0;
}

function ___ftello_unlocked(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (!(HEAP32[i2 >> 2] & 128)) i1 = 1; else i1 = (HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 i1 = FUNCTION_TABLE_iiii[HEAP32[i2 + 40 >> 2] & 127](i2, 0, i1) | 0;
 if ((i1 | 0) >= 0) i1 = i1 - (HEAP32[i2 + 8 >> 2] | 0) + (HEAP32[i2 + 4 >> 2] | 0) + (HEAP32[i2 + 20 >> 2] | 0) - (HEAP32[i2 + 28 >> 2] | 0) | 0;
 return i1 | 0;
}

function _outline_translate(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0, i6 = 0;
 i5 = HEAP32[i1 >> 2] | 0;
 if (!i5) return;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = 0;
 do {
  i6 = i2 + (i1 << 3) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i3;
  i6 = i2 + (i1 << 3) + 4 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i4;
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < i5 >>> 0);
 return;
}

function _FT_Has_PS_Glyph_Names(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 if (!i3) i1 = 0; else {
  i1 = HEAP32[i3 + 96 >> 2] | 0;
  i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] | 0;
  if (!i2) i1 = 0; else {
   i1 = FUNCTION_TABLE_iii[i2 & 255](i1, 344721) | 0;
   if (!i1) i1 = 0; else {
    i1 = HEAP32[i1 + 8 >> 2] | 0;
    if (!i1) i1 = 0; else i1 = FUNCTION_TABLE_ii[i1 & 63](i3) | 0;
   }
  }
 }
 return i1 | 0;
}

function _opendir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4 + 8 | 0;
 i2 = _open(i1, 589824, i4) | 0;
 do if ((i2 | 0) < 0) i1 = 0; else {
  i1 = _calloc(1, 2072) | 0;
  if (!i1) {
   HEAP32[i3 >> 2] = i2;
   ___syscall6(6, i3 | 0) | 0;
   i1 = 0;
   break;
  } else {
   HEAP32[i1 >> 2] = i2;
   break;
  }
 } while (0);
 STACKTOP = i4;
 return i1 | 0;
}

function _tt_cmap6_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = i2 - ((HEAPU8[i3 + 6 >> 0] | 0) << 8 | (HEAPU8[i3 + 7 >> 0] | 0)) | 0;
 if (i1 >>> 0 >= ((HEAPU8[i3 + 8 >> 0] | 0) << 8 | (HEAPU8[i3 + 9 >> 0] | 0)) >>> 0) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = i3 + 10 + (i1 << 1) | 0;
 i3 = (HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i3 + 1 >> 0] | 0);
 return i3 | 0;
}

function _tt_cmap4_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 HEAP32[i3 >> 2] = i2;
 do if (i2 >>> 0 > 65535) i1 = 0; else if (!(HEAP32[i1 + 20 >> 2] & 1)) {
  i1 = _tt_cmap4_char_map_binary(i1, i3, 0) | 0;
  break;
 } else {
  i1 = _tt_cmap4_char_map_linear(i1, i3, 0) | 0;
  break;
 } while (0);
 STACKTOP = i4;
 return i1 | 0;
}

function _rasterizer_init(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i1 >> 2] = i3;
 i3 = i1 + 20 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 i3 = _ass_aligned_alloc(32, 1 << (i2 << 1), 0) | 0;
 HEAP32[i1 + 48 >> 2] = i3;
 return (i3 | 0) != 0 | 0;
}

function _ftglue_stream_seek(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i3) {
  if ((i2 | 0) < 0) {
   i3 = 85;
   return i3 | 0;
  }
  if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 < i2 >>> 0) {
   i3 = 85;
   return i3 | 0;
  }
 } else if (FUNCTION_TABLE_iiiii[i3 & 127](i1, i2, 0, 0) | 0) {
  i3 = 85;
  return i3 | 0;
 }
 HEAP32[i1 + 8 >> 2] = i2;
 i3 = 0;
 return i3 | 0;
}

function _FcConfigGetCurrent() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[91920] | 0;
 if (i1 | 0) {
  i2 = i1;
  return i2 | 0;
 }
 while (1) {
  i1 = _FcInitLoadConfigAndFonts() | 0;
  i2 = HEAP32[91920] | 0;
  if (!i2) HEAP32[91920] = i1;
  if (!i2) {
   i2 = 4;
   break;
  }
  _FcConfigDestroy(i1);
  i1 = HEAP32[91920] | 0;
  if (i1 | 0) {
   i2 = 4;
   break;
  }
 }
 if ((i2 | 0) == 4) return i1 | 0;
 return 0;
}

function _initstate(i3, i4, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 if (i2 >>> 0 < 8) i1 = 0; else {
  ___lock(368364);
  i1 = _savestate() | 0;
  if (i2 >>> 0 < 32) i2 = 0; else if (i2 >>> 0 < 64) i2 = 7; else i2 = i2 >>> 0 < 128 ? 15 : i2 >>> 0 < 256 ? 31 : 63;
  HEAP32[23001] = i2;
  HEAP32[23002] = i4 + 4;
  ___srandom(i3);
  _savestate() | 0;
  ___unlock(368364);
 }
 return i1 | 0;
}

function _ft_outline_glyph_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = i2 + 108 | 0;
 i4 = i1 + 20 | 0;
 if ((HEAP32[i2 + 72 >> 2] | 0) != 1869968492) {
  i4 = 18;
  return i4 | 0;
 }
 i1 = _FT_Outline_New(HEAP32[i1 >> 2] | 0, HEAP16[i2 + 110 >> 1] | 0, HEAP16[i3 >> 1] | 0, i4) | 0;
 if (i1 | 0) {
  i4 = i1;
  return i4 | 0;
 }
 _FT_Outline_Copy(i3, i4) | 0;
 i4 = 0;
 return i4 | 0;
}

function _rint(d1) {
 d1 = +d1;
 var i2 = 0, i3 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i3 = i2 & 2146435072;
 if (!(i3 >>> 0 > 1126170624 | (i3 | 0) == 1126170624 & 0 > 0)) {
  i2 = (i2 | 0) < 0;
  d1 = (i2 ? 4503599627370496.0 : -4503599627370496.0) + ((i2 ? -4503599627370496.0 : 4503599627370496.0) + d1);
  if (d1 == 0.0) d1 = i2 ? -0.0 : 0.0;
 }
 return +d1;
}

function _FcSerializeDestroy(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i2 = 0;
 do {
  i1 = HEAP32[i3 + 12 + (i2 << 2) >> 2] | 0;
  if (i1 | 0) do {
   i4 = i1;
   i1 = HEAP32[i1 >> 2] | 0;
   _free(i4);
  } while ((i1 | 0) != 0);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 8191);
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 if (!i1) {
  _free(i3);
  return;
 }
 _FcCharSetFreezerDestroy(i1);
 _free(i3);
 return;
}

function _notation3(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 17;
   break;
  }
 case 27:
  {
   HEAP32[i1 >> 2] = 60;
   HEAP32[i1 + 8 >> 2] = 17;
   i1 = 19;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i1 & 65535;
 i5 = i2 & 65535;
 i3 = Math_imul(i5, i6) | 0;
 i4 = i1 >>> 16;
 i1 = (i3 >>> 16) + (Math_imul(i5, i4) | 0) | 0;
 i5 = i2 >>> 16;
 i2 = Math_imul(i5, i6) | 0;
 return (tempRet0 = (i1 >>> 16) + (Math_imul(i5, i4) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0, i1 + i2 << 16 | i3 & 65535 | 0) | 0;
}

function _FcLangSetCreate() {
 var i1 = 0, i2 = 0;
 i1 = _malloc(40) | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 i2 = i1 + 8 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 8;
 HEAP32[i1 >> 2] = 0;
 return i1 | 0;
}

function _ft_raster1_transform(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if ((HEAP32[i2 + 72 >> 2] | 0) != (HEAP32[i1 + 16 >> 2] | 0)) {
  i4 = 6;
  return i4 | 0;
 }
 if (i3 | 0) _FT_Outline_Transform(i2 + 108 | 0, i3);
 if (!i4) {
  i4 = 0;
  return i4 | 0;
 }
 _FT_Outline_Translate(i2 + 108 | 0, HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0);
 i4 = 0;
 return i4 | 0;
}

function _entity6(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 11;
   break;
  }
 case 18:
  {
   HEAP32[i1 >> 2] = 60;
   HEAP32[i1 + 8 >> 2] = 11;
   i1 = 16;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _copysign(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i4 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | i3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = i4;
 HEAP32[tempDoublePtr + 4 >> 2] = i3;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _ps_parser_init(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = i2;
 HEAP32[i1 + 8 >> 2] = i3;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i1 + 16 >> 2] = i4;
 i1 = i1 + 20 | 0;
 i2 = 24144;
 i3 = i1 + 52 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 return;
}

function _ft_smooth_transform(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if ((HEAP32[i2 + 72 >> 2] | 0) != (HEAP32[i1 + 16 >> 2] | 0)) {
  i4 = 6;
  return i4 | 0;
 }
 if (i3 | 0) _FT_Outline_Transform(i2 + 108 | 0, i3);
 if (!i4) {
  i4 = 0;
  return i4 | 0;
 }
 _FT_Outline_Translate(i2 + 108 | 0, HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0);
 i4 = 0;
 return i4 | 0;
}

function _fnt_cmap_char_next(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = (HEAP32[i2 >> 2] | 0) + 1 | 0;
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = i3 - i4 | 0;
 if (i3 >>> 0 <= i4 >>> 0) {
  i5 = 1;
  HEAP32[i2 >> 2] = i4;
  return i5 | 0;
 }
 i1 = i5 >>> 0 < (HEAP32[i1 + 20 >> 2] | 0) >>> 0;
 i4 = i1 ? i3 : 0;
 i5 = i1 ? i5 + 1 | 0 : 0;
 HEAP32[i2 >> 2] = i4;
 return i5 | 0;
}

function _ass_drawing_hash(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP8[i1 >> 0] | 0;
 if (!(i2 << 24 >> 24)) i1 = -2128831035; else {
  i3 = i1;
  i1 = -2128831035;
  do {
   i3 = i3 + 1 | 0;
   i1 = Math_imul(i1 ^ i2 & 255, 16777619) | 0;
   i2 = HEAP8[i3 >> 0] | 0;
  } while (i2 << 24 >> 24 != 0);
 }
 HEAP32[i4 + 72 >> 2] = i1;
 return;
}

function _tt_face_load_cmap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = i1 + 504 | 0;
 i3 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 508 >> 2] & 127](i1, 1668112752, i2, i4) | 0;
 if (i3 | 0) {
  i4 = i3;
  return i4 | 0;
 }
 i1 = _FT_Stream_ExtractFrame(i2, HEAP32[i4 >> 2] | 0, i1 + 500 | 0) | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i4 = i1;
 return i4 | 0;
}

function _Vertical_Sweep_Init(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = HEAP32[i4 + 112 >> 2] | 0;
 i1 = 0 - i3 | 0;
 HEAP16[i4 + 156 >> 1] = i1;
 i1 = Math_imul(HEAP16[i2 >> 1] | 0, i1) | 0;
 i2 = i4 + 148 | 0;
 HEAP32[i2 >> 2] = i1;
 if ((i3 | 0) <= 0) return;
 i4 = (Math_imul((HEAP32[i4 + 104 >> 2] | 0) + -1 | 0, i3) | 0) + i1 | 0;
 HEAP32[i2 >> 2] = i4;
 return;
}

function _cff_slot_init(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 i3 = HEAP32[(HEAP32[i1 + 656 >> 2] | 0) + 2952 >> 2] | 0;
 if (!i3) return 0;
 i1 = _FT_Get_Module(HEAP32[(HEAP32[i1 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if (!i1) return 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[i3 + 8 >> 2] & 63](i1) | 0;
 HEAP32[(HEAP32[i2 + 156 >> 2] | 0) + 36 >> 2] = i3;
 return 0;
}

function _ass_strcasecmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 while (1) {
  i5 = HEAP8[i1 >> 0] | 0;
  i3 = HEAP8[355659 + (i5 & 255) >> 0] | 0;
  i4 = HEAP8[355659 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
  if (!(i5 << 24 >> 24)) break;
  if (i3 << 24 >> 24 == i4 << 24 >> 24) {
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
  } else break;
 }
 return (i3 & 255) - (i4 & 255) | 0;
}

function ___randname(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 ___clock_gettime(0, i2 | 0) | 0;
 i1 = 0;
 i2 = (HEAP32[i2 + 4 >> 2] | 0) * 65537 ^ (i2 >>> 4) + i3;
 while (1) {
  HEAP8[i3 + i1 >> 0] = (i2 & 15) + 65 | i2 << 1 & 32;
  i1 = i1 + 1 | 0;
  if ((i1 | 0) == 6) break; else i2 = i2 >>> 5;
 }
 STACKTOP = i4;
 return i3 | 0;
}

function _parse_expansion_factor(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i2 + 96 >> 2] | 0;
 if ((i3 | 0) <= -1) return;
 if ((i3 | 0) >= (HEAP32[i1 + 300 >> 2] | 0)) return;
 i1 = HEAP32[i1 + 304 >> 2] | 0;
 i2 = FUNCTION_TABLE_iii[HEAP32[i2 + 40 >> 2] & 255](i2, 0) | 0;
 HEAP32[i1 + (i3 * 252 | 0) + 208 >> 2] = i2;
 HEAP32[i1 + (i3 * 252 | 0) + 180 >> 2] = i2;
 return;
}

function _attlist3(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 33;
   break;
  }
 case 41:
 case 18:
 case 19:
  {
   HEAP32[i1 >> 2] = 78;
   i1 = 31;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _iconv_open(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = _find_charmap(i1) | 0;
 if ((i3 | 0) == -1) i4 = 4; else {
  i1 = _find_charmap(i2) | 0;
  if ((i1 | 0) == -1) i4 = 4; else if ((HEAPU8[362407 + i3 >> 0] | 0) > 207) i4 = 4; else i1 = i1 << 16 | i3;
 }
 if ((i4 | 0) == 4) {
  i1 = ___errno_location() | 0;
  HEAP32[i1 >> 2] = 22;
  i1 = -1;
 }
 return i1 | 0;
}

function _FcFontSetDestroy(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = i4 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  i2 = 0;
  do {
   _FcPatternDestroy(HEAP32[i1 + (i2 << 2) >> 2] | 0);
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
  } while ((i2 | 0) < (HEAP32[i4 >> 2] | 0));
 }
 if (!i1) {
  _free(i4);
  return;
 }
 _free(i1);
 _free(i4);
 return;
}

function _FT_Library_Version(i1, i4, i5, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) {
  i2 = 0;
  i3 = 0;
  i1 = 0;
 } else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  i3 = HEAP32[i1 + 8 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
 }
 if (i4 | 0) HEAP32[i4 >> 2] = i1;
 if (i5 | 0) HEAP32[i5 >> 2] = i3;
 if (!i6) return;
 HEAP32[i6 >> 2] = i2;
 return;
}

function _twobyte_strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
 i4 = HEAPU8[i1 >> 0] | 0;
 while (1) {
  i2 = i1 + 1 | 0;
  i3 = HEAP8[i2 >> 0] | 0;
  if (!(i3 << 24 >> 24)) {
   i1 = 0;
   break;
  }
  i4 = i3 & 255 | i4 << 8 & 65280;
  if ((i4 | 0) == (i5 | 0)) break; else i1 = i2;
 }
 return i1 | 0;
}

function _FcPatternGetCharSet(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = _FcPatternObjectGet(i1, _FcObjectFromName(i2) | 0, i3, i5) | 0;
 if (!i1) if ((HEAP32[i5 >> 2] | 0) == 6) {
  HEAP32[i4 >> 2] = HEAP32[i5 + 8 >> 2];
  i1 = 0;
 } else i1 = 2;
 STACKTOP = i6;
 return i1 | 0;
}

function _ass_font_provider_new(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0;
 i5 = _calloc(1, 44) | 0;
 if (!i5) {
  i5 = 0;
  return i5 | 0;
 }
 HEAP32[i5 >> 2] = i1;
 i3 = i5 + 4 | 0;
 i1 = i3 + 36 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  i3 = i3 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i3 | 0) < (i1 | 0));
 HEAP32[i5 + 40 >> 2] = i4;
 return i5 | 0;
}

function _FcPatternGetString(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = _FcPatternObjectGet(i1, _FcObjectFromName(i2) | 0, i3, i5) | 0;
 if (!i1) if ((HEAP32[i5 >> 2] | 0) == 3) {
  HEAP32[i4 >> 2] = HEAP32[i5 + 8 >> 2];
  i1 = 0;
 } else i1 = 2;
 STACKTOP = i6;
 return i1 | 0;
}

function _FcPatternGetBool(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = _FcPatternObjectGet(i1, _FcObjectFromName(i2) | 0, i3, i5) | 0;
 if (!i1) if ((HEAP32[i5 >> 2] | 0) == 4) {
  HEAP32[i4 >> 2] = HEAP32[i5 + 8 >> 2];
  i1 = 0;
 } else i1 = 2;
 STACKTOP = i6;
 return i1 | 0;
}

function ___cos(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0;
 d3 = d1 * d1;
 d4 = d3 * d3;
 d5 = d3 * .5;
 d6 = 1.0 - d5;
 return +(d6 + (1.0 - d6 - d5 + (d3 * (d3 * (d3 * (d3 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + d4 * d4 * (d3 * (2.087572321298175e-09 - d3 * 1.1359647557788195e-11) + -2.7557314351390663e-07)) - d1 * d2)));
}

function _T42_GlyphSlot_Init(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = HEAP32[i3 + 500 >> 2] | 0;
 if (!(HEAP32[i3 + 84 >> 2] | 0)) {
  i3 = 0;
  i1 = i2 + 84 | 0;
 } else i3 = _FT_New_GlyphSlot(i2, i1) | 0;
 HEAP32[i4 + 160 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i3 | 0;
}

function _FT_Bitmap_Done(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) {
  i2 = 33;
  return i2 | 0;
 }
 if (!i2) {
  i2 = 6;
  return i2 | 0;
 }
 _ft_mem_free(HEAP32[i1 >> 2] | 0, HEAP32[i2 + 12 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 i2 = 0;
 return i2 | 0;
}

function _FcValuePrintFile(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 _fputc(32, i1) | 0;
 HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 __FcValuePrintFile(i1, i4);
 STACKTOP = i3;
 return;
}

function _FcCharSetAddChar(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 if ((HEAP32[i1 >> 2] | 0) == -1) {
  i2 = 0;
  return i2 | 0;
 }
 i3 = _FcCharSetFindLeafCreate(i1, i2) | 0;
 i1 = i3 + ((i2 >>> 5 & 7) << 2) | 0;
 if (!i3) {
  i3 = 0;
  return i3 | 0;
 }
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << (i2 & 31);
 i3 = 1;
 return i3 | 0;
}

function _element4(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 39;
   break;
  }
 case 41:
 case 18:
  {
   HEAP32[i1 >> 2] = 71;
   i1 = 51;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _element0(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 39;
   break;
  }
 case 41:
 case 18:
  {
   HEAP32[i1 >> 2] = 56;
   i1 = 40;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _attlist0(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 33;
   break;
  }
 case 41:
 case 18:
  {
   HEAP32[i1 >> 2] = 55;
   i1 = 34;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _shl(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i5 = i4 + 4 | 0;
 if (i1 >>> 0 > 31) {
  i3 = HEAP32[i4 >> 2] | 0;
  HEAP32[i5 >> 2] = i3;
  HEAP32[i4 >> 2] = 0;
  i1 = i1 + -32 | 0;
  i2 = 0;
 } else {
  i2 = HEAP32[i4 >> 2] | 0;
  i3 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i5 >> 2] = i2 >>> (32 - i1 | 0) | i3 << i1;
 HEAP32[i4 >> 2] = i2 << i1;
 return;
}

function _t1_decoder_done(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 i2 = i2 + 108 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 return;
}

function _t1_builder_done(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 i2 = i2 + 108 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 return;
}

function _doctype0(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 3;
   break;
  }
 case 41:
 case 18:
  {
   HEAP32[i1 >> 2] = 42;
   i1 = 4;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _rskip_spaces(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 L1 : do if (i1 >>> 0 > i3 >>> 0) while (1) {
  i2 = i1 + -1 | 0;
  switch (HEAP8[i2 >> 0] | 0) {
  case 9:
  case 32:
   break;
  default:
   break L1;
  }
  if (i2 >>> 0 > i3 >>> 0) i1 = i2; else {
   i1 = i2;
   break L1;
  }
 } while (0);
 HEAP32[i4 >> 2] = i1;
 return;
}

function _comp_PairMap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == (i4 | 0)) {
  i3 = HEAP32[i1 + 4 >> 2] | 0;
  i4 = HEAP32[i2 + 4 >> 2] | 0;
  i4 = (i3 | 0) < (i4 | 0) ? -1 : (i3 | 0) > (i4 | 0) & 1;
  return i4 | 0;
 } else {
  i4 = (i3 | 0) < (i4 | 0) ? -1 : 1;
  return i4 | 0;
 }
 return 0;
}

function _cff_cmap_unicode_init(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i1 + 656 >> 2] | 0;
 if (!(HEAP32[i2 + 1160 >> 2] | 0)) {
  i3 = 163;
  return i3 | 0;
 }
 i3 = FUNCTION_TABLE_iiiiiii[HEAP32[(HEAP32[i2 + 2956 >> 2] | 0) + 4 >> 2] & 1](HEAP32[i1 + 100 >> 2] | 0, i3, HEAP32[i2 + 12 >> 2] | 0, 182, 0, i1) | 0;
 return i3 | 0;
}

function _FT_Stream_ReleaseFrame(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 if (!i1) {
  HEAP32[i3 >> 2] = 0;
  return;
 }
 if (!(HEAP32[i1 + 20 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  return;
 }
 i1 = HEAP32[i1 + 28 >> 2] | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if (i2 | 0) FUNCTION_TABLE_vii[HEAP32[i1 + 8 >> 2] & 63](i1, i2);
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 return;
}

function _FT_New_Face(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i6;
 if (!i2) {
  i5 = 6;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP32[i5 >> 2] = 4;
 HEAP32[i5 + 12 >> 2] = i2;
 HEAP32[i5 + 16 >> 2] = 0;
 i5 = _FT_Open_Face(i1, i5, i3, i4) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _memmove(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i4 | 0) < (i1 | 0) & (i1 | 0) < (i4 + i2 | 0)) {
  i3 = i1;
  i4 = i4 + i2 | 0;
  i1 = i1 + i2 | 0;
  while ((i2 | 0) > 0) {
   i1 = i1 - 1 | 0;
   i4 = i4 - 1 | 0;
   i2 = i2 - 1 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  }
  i1 = i3;
 } else _memcpy(i1, i4, i2) | 0;
 return i1 | 0;
}

function _shr(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i5 = i4 + 4 | 0;
 if (i1 >>> 0 > 31) {
  i3 = HEAP32[i5 >> 2] | 0;
  HEAP32[i4 >> 2] = i3;
  HEAP32[i5 >> 2] = 0;
  i1 = i1 + -32 | 0;
  i2 = 0;
 } else {
  i2 = HEAP32[i5 >> 2] | 0;
  i3 = HEAP32[i4 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i2 << 32 - i1 | i3 >>> i1;
 HEAP32[i5 >> 2] = i2 >>> i1;
 return;
}

function _arg_n(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 while (1) {
  i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i3 >> 2] = i5 + 4;
  if (i1 >>> 0 > 1) i1 = i1 + -1 | 0; else break;
 }
 STACKTOP = i4;
 return i2 | 0;
}

function _T1_GlyphSlot_Init(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 i3 = HEAP32[i1 + 548 >> 2] | 0;
 if (!i3) return 0;
 i1 = _FT_Get_Module(HEAP32[(HEAP32[i1 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if (!i1) return 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[i3 + 4 >> 2] & 63](i1) | 0;
 HEAP32[(HEAP32[i2 + 156 >> 2] | 0) + 36 >> 2] = i3;
 return 0;
}

function _notation2(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 17;
   break;
  }
 case 27:
  {
   HEAP32[i1 >> 2] = 61;
   i1 = 21;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _notation0(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 17;
   break;
  }
 case 18:
  {
   HEAP32[i1 >> 2] = 57;
   i1 = 18;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _ass_shaper_new(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _calloc(28, 1) | 0;
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 HEAP32[i2 + 24 >> 2] = 64;
 if (_check_allocations(i2, i1) | 0) return i2 | 0;
 _free(HEAP32[i2 + 8 >> 2] | 0);
 _free(HEAP32[i2 + 12 >> 2] | 0);
 _free(HEAP32[i2 + 16 >> 2] | 0);
 _free(HEAP32[i2 + 20 >> 2] | 0);
 _free(i2);
 i2 = 0;
 return i2 | 0;
}

function _t1_decrypt(i4, i5, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if ((i5 | 0) <= 0) return;
 i1 = i1 & 65535;
 i2 = 0;
 while (1) {
  i6 = i4 + i2 | 0;
  i3 = HEAPU8[i6 >> 0] | 0;
  HEAP8[i6 >> 0] = i3 ^ i1 >>> 8;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i5 | 0)) break; else i1 = ((i3 + i1 | 0) * 52845 | 0) + 22719 & 65535;
 }
 return;
}

function _condSect2(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 0;
   break;
  }
 case 25:
  {
   HEAP32[i1 >> 2] = 62;
   i1 = 58;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _compare_uni_maps(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = i3 & 2147483647;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = i1 & 2147483647;
 if ((i4 | 0) == (i2 | 0)) return (i3 >>> 0 > i1 >>> 0 ? 1 : (i3 >>> 0 < i1 >>> 0) << 31 >> 31) | 0; else return (i4 >>> 0 > i2 >>> 0 ? 1 : (i4 >>> 0 < i2 >>> 0) << 31 >> 31) | 0;
 return 0;
}

function _attlist9(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 33;
   break;
  }
 case 27:
  {
   HEAP32[i1 >> 2] = 55;
   i1 = 38;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _attlist6(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 33;
   break;
  }
 case 18:
  {
   HEAP32[i1 >> 2] = 79;
   i1 = 32;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _attlist5(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 33;
   break;
  }
 case 23:
  {
   HEAP32[i1 >> 2] = 77;
   i1 = 33;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _FcPatternObjectGetString(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = _FcPatternObjectGet(i1, i2, i3, i5) | 0;
 if (!i1) if ((HEAP32[i5 >> 2] | 0) == 3) {
  HEAP32[i4 >> 2] = HEAP32[i5 + 8 >> 2];
  i1 = 0;
 } else i1 = 2;
 STACKTOP = i6;
 return i1 | 0;
}

function _FT_Stream_GetUShortLE(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 32 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = i3 + 1 | 0;
 if (i4 >>> 0 >= (HEAP32[i1 + 36 >> 2] | 0) >>> 0) {
  i4 = 0;
  HEAP32[i2 >> 2] = i3;
  return i4 | 0;
 }
 i4 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0)) & 65535;
 i3 = i3 + 2 | 0;
 HEAP32[i2 >> 2] = i3;
 return i4 | 0;
}

function _entity9(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 11;
   break;
  }
 case 27:
  {
   HEAP32[i1 >> 2] = 87;
   i1 = 13;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _entity8(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 11;
   break;
  }
 case 27:
  {
   HEAP32[i1 >> 2] = 85;
   i1 = 14;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _entity4(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 11;
   break;
  }
 case 27:
  {
   HEAP32[i1 >> 2] = 83;
   i1 = 13;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _entity3(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 11;
   break;
  }
 case 27:
  {
   HEAP32[i1 >> 2] = 81;
   i1 = 14;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _entity1(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 11;
   break;
  }
 case 18:
  {
   HEAP32[i1 >> 2] = 80;
   i1 = 10;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _doctype5(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 3;
   break;
  }
 case 17:
  {
   HEAP32[i1 >> 2] = 44;
   i1 = 8;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _doctype3(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 3;
   break;
  }
 case 27:
  {
   HEAP32[i1 >> 2] = 52;
   i1 = 5;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _doctype2(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 switch (i2 | 0) {
 case 15:
  {
   i1 = 3;
   break;
  }
 case 27:
  {
   HEAP32[i1 >> 2] = 45;
   i1 = 6;
   break;
  }
 default:
  if ((i2 | 0) == 28 & (HEAP32[i1 + 16 >> 2] | 0) == 0) i1 = 59; else {
   HEAP32[i1 >> 2] = 41;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _cid_slot_init(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 i3 = HEAP32[i1 + 320 >> 2] | 0;
 if (!i3) return 0;
 i1 = _FT_Get_Module(HEAP32[(HEAP32[i1 + 96 >> 2] | 0) + 4 >> 2] | 0, 283988) | 0;
 if (!i1) return 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[i3 + 4 >> 2] & 63](i1) | 0;
 HEAP32[(HEAP32[i2 + 156 >> 2] | 0) + 36 >> 2] = i3;
 return 0;
}

function _FT_Stream_GetUShort(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 32 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = i3 + 1 | 0;
 if (i4 >>> 0 >= (HEAP32[i1 + 36 >> 2] | 0) >>> 0) {
  i4 = 0;
  HEAP32[i2 >> 2] = i3;
  return i4 | 0;
 }
 i4 = ((HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i4 >> 0] | 0)) & 65535;
 i3 = i3 + 2 | 0;
 HEAP32[i2 >> 2] = i3;
 return i4 | 0;
}

function _FcObjectLookupOtherNameById(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[91919] | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 while (1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (i2 | 0)) break;
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i3 = 5;
   break;
  }
 }
 if ((i3 | 0) == 5) return i1 | 0;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 return i3 | 0;
}

function _ft_mem_alloc(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 if ((i3 | 0) > 0) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 255](i1, i3) | 0;
  if (!i1) {
   i2 = 0;
   i1 = 64;
  } else {
   _memset(i1 | 0, 0, i3 | 0) | 0;
   i2 = i1;
   i1 = 0;
  }
 } else {
  i2 = 0;
  i1 = i3 | 0 ? 6 : 0;
 }
 HEAP32[i4 >> 2] = i1;
 return i2 | 0;
}

function _FcInitDebug() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 if (HEAP32[91917] | 0) {
  STACKTOP = i3;
  return;
 }
 i1 = _getenv(351953) | 0;
 if (!i1) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i2 >> 2] = i1;
 _printf(351962, i2) | 0;
 i2 = _atoi(i1) | 0;
 HEAP32[91917] = (i2 | 0) > 0 ? i2 : 0;
 STACKTOP = i3;
 return;
}

function _FT_Outline_Transform(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 if (!((i2 | 0) != 0 & (i3 | 0) != 0)) return;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 i4 = HEAP16[i2 + 2 >> 1] | 0;
 i2 = i1 + (i4 << 16 >> 16 << 3) | 0;
 if (i4 << 16 >> 16 <= 0) return;
 do {
  _FT_Vector_Transform(i1, i3);
  i1 = i1 + 8 | 0;
 } while (i1 >>> 0 < i2 >>> 0);
 return;
}

function dynCall_iiiiiiiiiii(i11, i1, i3, i4, i5, i6, i7, i8, i9, i10, i2) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iiiiiiiiiii[i11 & 3](i1 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0, i10 | 0, i2 | 0) | 0;
}

function _gray_raster_new(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 HEAP32[i2 >> 2] = 0;
 i3 = _ft_mem_alloc(i1, 4, i4) | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 if (i4 | 0) {
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i3 >> 2] = i1;
 HEAP32[i2 >> 2] = i3;
 STACKTOP = i5;
 return i4 | 0;
}

function _calloc(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 if (!i2) i1 = 0; else {
  i1 = Math_imul(i3, i2) | 0;
  if ((i3 | i2) >>> 0 > 65535) i1 = ((i1 >>> 0) / (i2 >>> 0) | 0 | 0) == (i3 | 0) ? i1 : -1;
 }
 i2 = _malloc(i1) | 0;
 if (!i2) return i2 | 0;
 if (!(HEAP32[i2 + -4 >> 2] & 3)) return i2 | 0;
 _memset(i2 | 0, 0, i1 | 0) | 0;
 return i2 | 0;
}

function _FNT_Size_Select(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i3 + 132 >> 2] | 0;
 _FT_Select_Metrics(i3, 0);
 i3 = HEAPU16[i2 + 80 >> 1] | 0;
 HEAP32[i1 + 24 >> 2] = i3 << 6;
 HEAP32[i1 + 28 >> 2] = i3 - (HEAPU16[i2 + 96 >> 1] | 0) << 6;
 HEAP32[i1 + 36 >> 2] = (HEAPU16[i2 + 102 >> 1] | 0) << 6;
 return 0;
}

function _ft_black_new(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 HEAP32[i2 >> 2] = 0;
 i3 = _ft_mem_alloc(i1, 4, i4) | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 if (i4 | 0) {
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i3 >> 2] = i1;
 HEAP32[i2 >> 2] = i3;
 STACKTOP = i5;
 return i4 | 0;
}

function _sfnt_get_glyph_name(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i1 = _tt_face_get_ps_name(i1, i2, i5) | 0;
 if (i1 | 0) {
  STACKTOP = i6;
  return i1 | 0;
 }
 _ft_mem_strcpyn(i3, HEAP32[i5 >> 2] | 0, i4) | 0;
 STACKTOP = i6;
 return i1 | 0;
}

function _FcObjectLookupOtherTypeById(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[91919] | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 while (1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (i2 | 0)) break;
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i3 = 5;
   break;
  }
 }
 if ((i3 | 0) == 5) return i1 | 0;
 i3 = i1 + 4 | 0;
 return i3 | 0;
}

function _t1_builder_check_points(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (((HEAP16[i1 + 22 >> 1] | 0) + i2 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 <= (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = _FT_GlyphLoader_CheckPoints(i1, i2, 0) | 0;
 return i2 | 0;
}

function _ass_composite_cache_create() {
 var i1 = 0, i2 = 0;
 i1 = _calloc(1, 36) | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 HEAP32[i1 >> 2] = 65535;
 HEAP32[i1 + 12 >> 2] = i1 + 8;
 HEAP32[i1 + 16 >> 2] = 90424;
 i2 = _calloc(65535, 4) | 0;
 HEAP32[i1 + 4 >> 2] = i2;
 if (i2 | 0) {
  i2 = i1;
  return i2 | 0;
 }
 _free(i1);
 i2 = 0;
 return i2 | 0;
}

function _ass_outline_cache_create() {
 var i1 = 0, i2 = 0;
 i1 = _calloc(1, 36) | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 HEAP32[i1 >> 2] = 65535;
 HEAP32[i1 + 12 >> 2] = i1 + 8;
 HEAP32[i1 + 16 >> 2] = 90448;
 i2 = _calloc(65535, 4) | 0;
 HEAP32[i1 + 4 >> 2] = i2;
 if (i2 | 0) {
  i2 = i1;
  return i2 | 0;
 }
 _free(i1);
 i2 = 0;
 return i2 | 0;
}

function _ass_try_realloc_array(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = Math_imul(i2, i1) | 0;
 if ((4294967295 / (i2 >>> 0) | 0) >>> 0 < i1 >>> 0) i1 = 0; else i1 = _realloc(i4, (i3 | 0) == 0 ? 1 : i3) | 0;
 i3 = (i1 | 0) == 0;
 i2 = ___errno_location() | 0;
 HEAP32[i2 >> 2] = i3 ? 12 : 0;
 return (i3 ? i4 : i1) | 0;
}

function _ass_bitmap_cache_create() {
 var i1 = 0, i2 = 0;
 i1 = _calloc(1, 36) | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 HEAP32[i1 >> 2] = 65535;
 HEAP32[i1 + 12 >> 2] = i1 + 8;
 HEAP32[i1 + 16 >> 2] = 90400;
 i2 = _calloc(65535, 4) | 0;
 HEAP32[i1 + 4 >> 2] = i2;
 if (i2 | 0) {
  i2 = i1;
  return i2 | 0;
 }
 _free(i1);
 i2 = 0;
 return i2 | 0;
}

function _BDF_Size_Select(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i4 + 140 >> 2] | 0;
 _FT_Select_Metrics(i4, i2);
 HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 40 >> 2] << 6;
 HEAP32[i1 + 28 >> 2] = 0 - (HEAP32[i3 + 44 >> 2] | 0) << 6;
 HEAP32[i1 + 36 >> 2] = (HEAPU16[i3 + 4 >> 1] | 0) << 6;
 return 0;
}

function _outline_close_contour(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) ___assert_fail(359983, 359954, 272, 360003);
 i1 = (HEAP32[i1 + 20 >> 2] | 0) + (i2 + -1) | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 if ((i2 & 255) > 3) ___assert_fail(360025, 359954, 273, 360003); else {
  HEAP8[i1 >> 0] = i2 | 4;
  return 1;
 }
 return 0;
}

function _ft_ansi_stream_io(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 if (!i4) if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 < i2 >>> 0) {
  i5 = 1;
  return i5 | 0;
 }
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 if ((HEAP32[i1 + 8 >> 2] | 0) != (i2 | 0)) _fseek(i5, i2, 0) | 0;
 i5 = _fread(i3, 1, i4, i5) | 0;
 return i5 | 0;
}

function _ass_font_cache_create() {
 var i1 = 0, i2 = 0;
 i1 = _calloc(1, 36) | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 HEAP32[i1 >> 2] = 65535;
 HEAP32[i1 + 12 >> 2] = i1 + 8;
 HEAP32[i1 + 16 >> 2] = 90376;
 i2 = _calloc(65535, 4) | 0;
 HEAP32[i1 + 4 >> 2] = i2;
 if (i2 | 0) {
  i2 = i1;
  return i2 | 0;
 }
 _free(i1);
 i2 = 0;
 return i2 | 0;
}

function _FT_Stream_Seek(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i3) {
  if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 < i2 >>> 0) {
   i3 = 85;
   return i3 | 0;
  }
 } else if (FUNCTION_TABLE_iiiii[i3 & 127](i1, i2, 0, 0) | 0) {
  i3 = 85;
  return i3 | 0;
 }
 HEAP32[i1 + 8 >> 2] = i2;
 i3 = 0;
 return i3 | 0;
}

function _t1_cmap_custom_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 if (i3 >>> 0 > i2 >>> 0) {
  i3 = 0;
  return i3 | 0;
 }
 if (((HEAP32[i1 + 20 >> 2] | 0) + i3 | 0) >>> 0 <= i2 >>> 0) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = HEAPU16[(HEAP32[i1 + 24 >> 2] | 0) + (i2 << 1) >> 1] | 0;
 return i3 | 0;
}

function _XmlInitEncodingNS(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i1 = _getEncodingIndex(i1) | 0;
 if ((i1 | 0) == -1) {
  i3 = 0;
  return i3 | 0;
 }
 HEAP8[i2 + 73 >> 0] = i1;
 HEAP32[i2 >> 2] = 75;
 HEAP32[i2 + 4 >> 2] = 76;
 HEAP32[i2 + 52 >> 2] = 28;
 HEAP32[i2 + 76 >> 2] = i3;
 HEAP32[i3 >> 2] = i2;
 i3 = 1;
 return i3 | 0;
}

function _ps_hints_close(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 if (i1 | 0) {
  i4 = i1;
  return i4 | 0;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = _ps_dimension_end(i3 + 16 | 0, i4, i1) | 0;
 if (i2 | 0) {
  i4 = i2;
  return i4 | 0;
 }
 i4 = _ps_dimension_end(i3 + 52 | 0, i4, i1) | 0;
 return i4 | 0;
}

function ___unlist_locked_file(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (HEAP32[i1 + 68 >> 2] | 0) {
  i2 = HEAP32[i1 + 116 >> 2] | 0;
  i1 = i1 + 112 | 0;
  if (i2 | 0) HEAP32[i2 + 112 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) i1 = (___pthread_self_118() | 0) + 232 | 0; else i1 = i1 + 116 | 0;
  HEAP32[i1 >> 2] = i2;
 }
 return;
}

function _XmlInitEncoding(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i1 = _getEncodingIndex(i1) | 0;
 if ((i1 | 0) == -1) {
  i3 = 0;
  return i3 | 0;
 }
 HEAP8[i2 + 73 >> 0] = i1;
 HEAP32[i2 >> 2] = 73;
 HEAP32[i2 + 4 >> 2] = 74;
 HEAP32[i2 + 52 >> 2] = 28;
 HEAP32[i2 + 76 >> 2] = i3;
 HEAP32[i3 >> 2] = i2;
 i3 = 1;
 return i3 | 0;
}

function _ft_mem_qalloc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i2 | 0) > 0) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 255](i1, i2) | 0;
  i2 = i1;
  i1 = (i1 | 0) == 0 ? 64 : 0;
  HEAP32[i3 >> 2] = i1;
  return i2 | 0;
 } else {
  i1 = 0;
  i2 = i2 | 0 ? 6 : 0;
  HEAP32[i3 >> 2] = i2;
  return i1 | 0;
 }
 return 0;
}

function _getint(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[i4 >> 2] | 0;
 i3 = (HEAP8[i2 >> 0] | 0) + -48 | 0;
 if (i3 >>> 0 < 10) {
  i1 = 0;
  do {
   i1 = i3 + (i1 * 10 | 0) | 0;
   i2 = i2 + 1 | 0;
   HEAP32[i4 >> 2] = i2;
   i3 = (HEAP8[i2 >> 0] | 0) + -48 | 0;
  } while (i3 >>> 0 < 10);
 } else i1 = 0;
 return i1 | 0;
}

function _FcEditPrint(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = _FcObjectName(HEAP32[i1 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i4;
 _printf(348633, i3) | 0;
 _FcOpPrint(HEAP32[i1 + 4 >> 2] | 0);
 _putchar(32) | 0;
 _FcExprPrint(HEAP32[i1 + 8 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _check_glyph(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) i1 = 1; else if (!(_FcPatternGetCharSet(i1, 355024, 0, i3) | 0)) i1 = (_FcCharSetHasChar(HEAP32[i3 >> 2] | 0, i2) | 0) == 1; else i1 = 0;
 STACKTOP = i4;
 return i1 | 0;
}

function _rand() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = 367640;
 i2 = ___muldi3(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, 1284865837, 1481765933) | 0;
 i2 = _i64Add(i2 | 0, tempRet0 | 0, 1, 0) | 0;
 i1 = tempRet0;
 i3 = 367640;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i3 + 4 >> 2] = i1;
 i1 = _bitshift64Lshr(i2 | 0, i1 | 0, 33) | 0;
 return i1 | 0;
}

function _ft_bitmap_glyph_bbox(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = HEAP32[i1 + 20 >> 2] << 6;
 HEAP32[i2 >> 2] = i4;
 i3 = i1 + 28 | 0;
 HEAP32[i2 + 8 >> 2] = (HEAP32[i3 + 4 >> 2] << 6) + i4;
 i1 = HEAP32[i1 + 24 >> 2] << 6;
 HEAP32[i2 + 12 >> 2] = i1;
 HEAP32[i2 + 4 >> 2] = i1 - (HEAP32[i3 >> 2] << 6);
 return;
}

function _cff_driver_init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 28 >> 2] = 1;
 HEAP8[i1 + 32 >> 0] = 0;
 HEAP32[i1 + 36 >> 2] = 500;
 HEAP32[i1 + 40 >> 2] = 400;
 HEAP32[i1 + 44 >> 2] = 1e3;
 HEAP32[i1 + 48 >> 2] = 275;
 HEAP32[i1 + 52 >> 2] = 1667;
 HEAP32[i1 + 56 >> 2] = 275;
 HEAP32[i1 + 60 >> 2] = 2333;
 HEAP32[i1 + 64 >> 2] = 0;
 return 0;
}

function _t1_cmap_standard_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i3 + 484 >> 2] | 0;
 HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 416 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i3 + 420 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 24 >> 2];
 return 0;
}

function _fmt_x(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 if (!((i3 | 0) == 0 & (i2 | 0) == 0)) do {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = HEAPU8[367578 + (i3 & 15) >> 0] | 0 | i4;
  i3 = _bitshift64Lshr(i3 | 0, i2 | 0, 4) | 0;
  i2 = tempRet0;
 } while (!((i3 | 0) == 0 & (i2 | 0) == 0));
 return i1 | 0;
}

function _unknown_isNmstrt(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 368 >> 2] & 255](HEAP32[i1 + 372 >> 2] | 0, i2) | 0;
 if (i1 >>> 0 > 65535) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAP32[25356 + (((HEAPU8[344737 + (i1 >>> 8) >> 0] | 0) << 3 | i1 >>> 5 & 7) << 2) >> 2] & 1 << (i1 & 31);
 return i2 | 0;
}

function _FcRangeSerialize(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _FcSerializePtr(i1, i2) | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 };
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 i2 = i1;
 return i2 | 0;
}

function _FcNameGetConstant(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = 0;
 while (1) {
  i1 = 67004 + (i2 * 12 | 0) | 0;
  i2 = i2 + 1 | 0;
  if (!(_FcStrCmpIgnoreCase(i3, HEAP32[i1 >> 2] | 0) | 0)) {
   i2 = 4;
   break;
  }
  if (i2 >>> 0 >= 57) {
   i1 = 0;
   i2 = 4;
   break;
  }
 }
 if ((i2 | 0) == 4) return i1 | 0;
 return 0;
}

function _t1_cmap_expert_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i3 + 484 >> 2] | 0;
 HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 416 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i3 + 420 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 28 >> 2];
 return 0;
}

function _ftglue_stream_frame_exit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (HEAP32[i1 + 20 >> 2] | 0) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 | 0) {
   i3 = HEAP32[i1 + 28 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i2);
   HEAP32[i1 >> 2] = 0;
  }
 }
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 return;
}

function _af_dummy_hints_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 2988 >> 2] = i2;
 HEAP32[i1 + 2980 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 20 >> 2];
 return 0;
}

function _unknown_isName(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 368 >> 2] & 255](HEAP32[i1 + 372 >> 2] | 0, i2) | 0;
 if (i1 >>> 0 > 65535) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAP32[25356 + (((HEAPU8[344993 + (i1 >>> 8) >> 0] | 0) << 3 | i1 >>> 5 & 7) << 2) >> 2] & 1 << (i1 & 31);
 return i2 | 0;
}

function _rewind(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) {
  i2 = (___lockfile(i1) | 0) == 0;
  ___fseeko_unlocked(i1, 0, 0) | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -33;
  if (!i2) ___unlockfile(i1);
 } else {
  ___fseeko_unlocked(i1, 0, 0) | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -33;
 }
 return;
}

function _pfr_slot_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = HEAP32[HEAP32[i1 + 156 >> 2] >> 2] | 0;
 i3 = i1 + 160 | 0;
 i4 = i3 + 36 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP32[i1 + 188 >> 2] = i2;
 HEAP8[i1 + 192 >> 0] = 0;
 _FT_GlyphLoader_Rewind(i2);
 return 0;
}

function _PCF_Size_Select(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i3 = i4 + 196 | 0;
 _FT_Select_Metrics(i4, i2);
 HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 8 >> 2] << 6;
 HEAP32[i1 + 28 >> 2] = 0 - (HEAP32[i3 + 12 >> 2] | 0) << 6;
 HEAP32[i1 + 36 >> 2] = HEAP16[i3 + 40 >> 1] << 6;
 return 0;
}

function dynCall_iiiiiiiiii(i10, i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 return FUNCTION_TABLE_iiiiiiiiii[i10 & 1](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0) | 0;
}

function _ass_fontselect_free(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 if (i1 | 0) _ass_font_provider_free(i1);
 i1 = HEAP32[i2 + 32 >> 2] | 0;
 if (i1 | 0) _ass_font_provider_free(i1);
 _free(HEAP32[i2 + 24 >> 2] | 0);
 _free(HEAP32[i2 + 8 >> 2] | 0);
 _free(HEAP32[i2 + 4 >> 2] | 0);
 _free(i2);
 return;
}

function _FcStartDoctypeDecl(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2;
 if (!(_strcmp(i5, 354824) | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = i5;
 _FcConfigMessage(i4, 2, 354354, i1);
 STACKTOP = i2;
 return;
}

function _FT_GlyphLoader_Rewind(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 20 | 0;
 HEAP16[i1 + 22 >> 1] = 0;
 HEAP16[i2 >> 1] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 i1 = i1 + 56 | 0;
 i3 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 return;
}

function _FcStrListNext(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 4 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 if ((i3 | 0) >= (HEAP32[i1 + 4 >> 2] | 0)) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 HEAP32[i2 >> 2] = i3 + 1;
 i3 = HEAP32[i1 + (i3 << 2) >> 2] | 0;
 return i3 | 0;
}

function _FcStrDirname(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = _strrchr(i3, 47) | 0;
 if (!i1) {
  i3 = ___strdup(367594) | 0;
  return i3 | 0;
 }
 i1 = i1 - i3 | 0;
 i2 = _malloc(i1 + 1 | 0) | 0;
 if (!i2) {
  i3 = 0;
  return i3 | 0;
 }
 _strncpy(i2, i3, i1) | 0;
 HEAP8[i2 + i1 >> 0] = 0;
 i3 = i2;
 return i3 | 0;
}

function _FcCompareCharSet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = i6;
 i4 = HEAP32[i2 + 8 >> 2] | 0;
 i3 = i4;
 return +(+((_FcCharSetSubtractCount((i5 & 1 | 0) == 0 ? i6 : (i5 & -2) + i1 | 0, (i3 & 1 | 0) == 0 ? i4 : (i3 & -2) + i2 | 0) | 0) >>> 0));
}

function _FT_Init_FreeType(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = _FT_New_Memory() | 0;
 if (!i2) {
  i3 = 7;
  return i3 | 0;
 }
 i3 = _FT_New_Library(i2, i1) | 0;
 if (!i3) {
  _FT_Add_Default_Modules(HEAP32[i1 >> 2] | 0);
  i3 = 0;
  return i3 | 0;
 } else {
  _FT_Done_Memory(i2);
  return i3 | 0;
 }
 return 0;
}

function _sn_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = i1 + 20 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = (HEAP32[i1 + 16 >> 2] | 0) - i5 | 0;
 i1 = i1 >>> 0 > i3 >>> 0 ? i3 : i1;
 _memcpy(i5 | 0, i2 | 0, i1 | 0) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 return i3 | 0;
}

function _FcCompareString(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = i6;
 i4 = HEAP32[i2 + 8 >> 2] | 0;
 i3 = i4;
 return +(+((_FcStrCmpIgnoreCase((i5 & 1 | 0) == 0 ? i6 : (i5 & -2) + i1 | 0, (i3 & 1 | 0) == 0 ? i4 : (i3 & -2) + i2 | 0) | 0) != 0 & 1));
}

function _FT_List_Find(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 L1 : do if (!i1) i1 = 0; else {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) i1 = 0; else while (1) {
   if ((HEAP32[i1 + 8 >> 2] | 0) == (i2 | 0)) break L1;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i1) {
    i1 = 0;
    break;
   }
  }
 } while (0);
 return i1 | 0;
}

function dynCall_viiiiiiiii(i10, i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 FUNCTION_TABLE_viiiiiiiii[i10 & 0](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0);
}

function _libassjs_resize(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i3 + 4 | 0;
 i4 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 _ass_set_frame_size(HEAP32[91913] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _FT_Stream_ExitFrame(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (HEAP32[i1 + 20 >> 2] | 0) {
  i2 = HEAP32[i1 + 28 >> 2] | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  if (i3 | 0) FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i3);
  HEAP32[i1 >> 2] = 0;
 }
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 return;
}

function _numpad2align(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 do if ((i1 | 0) == -2147483648) i1 = 2; else {
  i1 = ((i2 + -1 | 0) % 3 | 0) + 1 | 0;
  if ((i2 | 0) >= 4) if ((i2 | 0) < 7) {
   i1 = i1 | 8;
   break;
  } else {
   i1 = i1 | 4;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _cff_get_kerning(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = HEAP32[i1 + 532 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 if (!i5) return 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[i5 + 84 >> 2] & 127](i1, i2, i3) | 0;
 HEAP32[i4 >> 2] = i5;
 return 0;
}

function _T42_Size_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i2 = _FT_New_Size(HEAP32[(HEAP32[i1 >> 2] | 0) + 500 >> 2] | 0, i4) | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 HEAP32[i1 + 44 >> 2] = i4;
 _FT_Activate_Size(i4) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _tt_get_kerning(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = HEAP32[i1 + 532 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 if (!i5) return 0;
 i5 = FUNCTION_TABLE_iiii[HEAP32[i5 + 84 >> 2] & 127](i1, i2, i3) | 0;
 HEAP32[i4 >> 2] = i5;
 return 0;
}

function _readlink(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 + 8 >> 2] = i3;
 i3 = ___syscall_ret(___syscall85(85, i5 | 0) | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FcCharacterData(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i4 = HEAP32[i1 >> 2] | 0;
 if (i4 | 0) if (!(_FcStrBufData(i4 + 12 | 0, i2, i3) | 0)) _FcConfigMessage(i1, 2, 352676, i5);
 STACKTOP = i6;
 return;
}

function ___shlim(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i1 + 104 >> 2] = i2;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = i3 - i4 | 0;
 HEAP32[i1 + 108 >> 2] = i5;
 HEAP32[i1 + 100 >> 2] = (i2 | 0) != 0 & (i5 | 0) > (i2 | 0) ? i4 + i2 | 0 : i3;
 return;
}

function _FcObjectName(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2 + -1 | 0;
 if (i1 >>> 0 < 48) i1 = 64244 + (i1 << 3) | 0; else i1 = _FcObjectLookupOtherTypeById(i2) | 0;
 if (!i1) {
  i2 = _FcObjectLookupOtherNameById(i2) | 0;
  return i2 | 0;
 } else {
  i2 = HEAP32[i1 >> 2] | 0;
  return i2 | 0;
 }
 return 0;
}

function _write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 + 8 >> 2] = i3;
 i3 = ___syscall_ret(___syscall4(4, i5 | 0) | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 + 8 >> 2] = i3;
 i3 = ___syscall_ret(___syscall3(3, i5 | 0) | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FcStrPlus(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = _strlen(i1) | 0;
 i4 = _strlen(i2) | 0;
 i5 = _malloc(i3 + 1 + i4 | 0) | 0;
 if (!i5) {
  i5 = 0;
  return i5 | 0;
 }
 _memcpy(i5 | 0, i1 | 0, i3 | 0) | 0;
 _memcpy(i5 + i3 | 0, i2 | 0, i4 + 1 | 0) | 0;
 return i5 | 0;
}

function _tt_cmap14_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = i2;
 HEAP32[i1 + 24 >> 2] = (HEAPU8[i2 + 7 >> 0] | 0) << 16 | (HEAPU8[i2 + 6 >> 0] | 0) << 24 | (HEAPU8[i2 + 8 >> 0] | 0) << 8 | (HEAPU8[i2 + 9 >> 0] | 0);
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 return 0;
}

function _psh_globals_destroy(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 208 >> 2] = 0;
 HEAP32[i1 + 412 >> 2] = 0;
 HEAP32[i1 + 928 >> 2] = 0;
 HEAP32[i1 + 1444 >> 2] = 0;
 HEAP32[i1 + 1960 >> 2] = 0;
 _ft_mem_free(i2, i1);
 return;
}

function _ft_raster1_get_cbox(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 if ((HEAP32[i2 + 72 >> 2] | 0) != (HEAP32[i1 + 16 >> 2] | 0)) return;
 _FT_Outline_Get_CBox(i2 + 108 | 0, i3);
 return;
}

function _Direct_Move_Y(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = i3 & 65535;
 i1 = (HEAP32[i2 + 16 >> 2] | 0) + (i3 << 3) + 4 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i4;
 i4 = (HEAP32[i2 + 24 >> 2] | 0) + i3 | 0;
 HEAP8[i4 >> 0] = HEAP8[i4 >> 0] | 16;
 return;
}

function _raccess_guess_linux_cap(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = _raccess_make_file_name(HEAP32[i1 >> 2] | 0, i3, 280816) | 0;
 if (!i1) {
  i5 = 64;
  return i5 | 0;
 }
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 i5 = 0;
 return i5 | 0;
}

function _ft_smooth_get_cbox(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 if ((HEAP32[i2 + 72 >> 2] | 0) != (HEAP32[i1 + 16 >> 2] | 0)) return;
 _FT_Outline_Get_CBox(i2 + 108 | 0, i3);
 return;
}

function _ass_msg(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 FUNCTION_TABLE_viiii[HEAP32[i1 + 20 >> 2] & 31](i2, i3, i6, HEAP32[i1 + 24 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _parse_bool(i1) {
 i1 = i1 | 0;
 L1 : while (1) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 9:
  case 32:
   break;
  default:
   break L1;
  }
  i1 = i1 + 1 | 0;
 }
 if (!(_ass_strncasecmp(i1, 355978, 3) | 0)) {
  i1 = 1;
  return i1 | 0;
 }
 i1 = (_strtol(i1, 0, 10) | 0) > 0 & 1;
 return i1 | 0;
}

function _utf8_isNmstrt3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAPU8[i2 + 1 >> 0] | 0;
 i1 = HEAPU8[i2 + 2 >> 0] | 0;
 return 1 << (i1 & 31) & HEAP32[25356 + (((HEAPU8[344737 + (i3 >>> 2 & 15 | HEAP8[i2 >> 0] << 4 & 255) >> 0] | 0) << 3 | i3 << 1 & 6 | i1 >>> 5 & 1) << 2) >> 2] | 0;
}

function ___uflow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 if (!(___toread(i1) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 32 >> 2] & 127](i1, i2, 1) | 0) == 1) i1 = HEAPU8[i2 >> 0] | 0; else i1 = -1; else i1 = -1;
 STACKTOP = i3;
 return i1 | 0;
}

function ___uremdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6 | 0;
 ___udivmoddi4(i1, i2, i3, i4, i5) | 0;
 STACKTOP = i6;
 return (tempRet0 = HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
}

function _Direct_Move_X(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = i3 & 65535;
 i1 = (HEAP32[i2 + 16 >> 2] | 0) + (i3 << 3) | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i4;
 i4 = (HEAP32[i2 + 24 >> 2] | 0) + i3 | 0;
 HEAP8[i4 >> 0] = HEAP8[i4 >> 0] | 8;
 return;
}

function _utf8_isName3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAPU8[i2 + 1 >> 0] | 0;
 i1 = HEAPU8[i2 + 2 >> 0] | 0;
 return 1 << (i1 & 31) & HEAP32[25356 + (((HEAPU8[344993 + (i3 >>> 2 & 15 | HEAP8[i2 >> 0] << 4 & 255) >> 0] | 0) << 3 | i3 << 1 & 6 | i1 >>> 5 & 1) << 2) >> 2] | 0;
}

function _raccess_guess_vfat(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = _raccess_make_file_name(HEAP32[i1 >> 2] | 0, i3, 280827) | 0;
 if (!i1) {
  i5 = 64;
  return i5 | 0;
 }
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 i5 = 0;
 return i5 | 0;
}

function _ps_hinter_done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 HEAP32[i1 + 140 >> 2] = 0;
 i2 = i1 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 _ps_dimension_done(i1 + 28 | 0, i3);
 _ps_dimension_done(i1 + 64 | 0, i3);
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 return;
}

function _ft_outline_glyph_copy(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = i2 + 20 | 0;
 i3 = i1 + 20 | 0;
 i1 = _FT_Outline_New(HEAP32[i2 >> 2] | 0, HEAP16[i4 + 2 >> 1] | 0, HEAP16[i4 >> 1] | 0, i3) | 0;
 if (i1 | 0) return i1 | 0;
 _FT_Outline_Copy(i4, i3) | 0;
 return i1 | 0;
}

function ___fseeko(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i4 = (___lockfile(i3) | 0) == 0;
  i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
  if (!i4) ___unlockfile(i3);
 } else i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
 return i1 | 0;
}

function _FT_Get_X11_Font_Format(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 96 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] | 0;
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = FUNCTION_TABLE_iii[i2 & 255](i1, 344709) | 0;
 return i2 | 0;
}

function _FcDirCacheLoad(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 0;
 i3 = (_FcDirCacheProcess(i2, i1, 88, i4, i3) | 0) == 0;
 STACKTOP = i5;
 return (i3 ? 0 : HEAP32[i4 >> 2] | 0) | 0;
}

function _FT_Stream_Free(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!i1) return;
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 i4 = HEAP32[i1 + 24 >> 2] | 0;
 if (i4 | 0) FUNCTION_TABLE_vi[i4 & 127](i1);
 if (i2 | 0) return;
 FUNCTION_TABLE_vii[HEAP32[i3 + 8 >> 2] & 63](i3, i1);
 return;
}

function _testSetjmp(i3, i5, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 while ((i2 | 0) < (i4 | 0)) {
  i1 = HEAP32[i5 + (i2 << 3) >> 2] | 0;
  if (!i1) break;
  if ((i1 | 0) == (i3 | 0)) return HEAP32[i5 + ((i2 << 3) + 4) >> 2] | 0;
  i2 = i2 + 1 | 0;
 }
 return 0;
}

function _af_latin_metrics_scale(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 24 >> 2];
 _af_latin_metrics_scale_dim(i1, i2, 0);
 _af_latin_metrics_scale_dim(i1, i2, 1);
 return;
}

function _outline_free(i1) {
 i1 = i1 | 0;
 if (!i1) return;
 _free(HEAP32[i1 + 16 >> 2] | 0);
 _free(HEAP32[i1 + 20 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function _fmt_o(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!((i3 | 0) == 0 & (i2 | 0) == 0)) do {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = i3 & 7 | 48;
  i3 = _bitshift64Lshr(i3 | 0, i2 | 0, 3) | 0;
  i2 = tempRet0;
 } while (!((i3 | 0) == 0 & (i2 | 0) == 0));
 return i1 | 0;
}

function _memory_stream_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (i3 | 0) FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 63](i2, i3);
 HEAP32[i1 + 24 >> 2] = 0;
 i3 = i1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 return;
}

function _fribidi_shape(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 if (!((i3 | 0) != 0 & (i5 | 0) != 0)) return;
 if (i4 | 0) _fribidi_shape_arabic(i1, i2, i3, i4, i5);
 if (!(i1 & 1)) return;
 _fribidi_shape_mirroring(i2, i3, i5);
 return;
}

function _Round_To_Double_Grid(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i2 | 0) > -1) {
  i3 = i2 + 16 + i3 & -32;
  i3 = (i3 | 0) > 0 ? i3 : 0;
  return i3 | 0;
 } else {
  i3 = 0 - (16 - i2 + i3 & -32) | 0;
  i3 = (i3 | 0) < 0 ? i3 : 0;
  return i3 | 0;
 }
 return 0;
}

function dynCall_viiiiiiii(i9, i1, i2, i3, i4, i5, i6, i7, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 FUNCTION_TABLE_viiiiiiii[i9 & 1](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0);
}

function _Round_To_Half_Grid(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i2 | 0) > -1) {
  i3 = i3 + i2 & -64 | 32;
  i3 = (i3 | 0) < 0 ? 32 : i3;
  return i3 | 0;
 } else {
  i3 = i3 - i2 & -64 | 32;
  i3 = (i3 | 0) < 0 ? -32 : 0 - i3 | 0;
  return i3 | 0;
 }
 return 0;
}

function _FcCompareBool(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0;
 if ((HEAP32[i2 >> 2] | 0) != 4) {
  d3 = -1.0;
  return +d3;
 }
 if ((HEAP32[i1 >> 2] | 0) != 4) {
  d3 = -1.0;
  return +d3;
 }
 d3 = +((HEAP32[i2 + 8 >> 2] | 0) != (HEAP32[i1 + 8 >> 2] | 0) & 1);
 return +d3;
}

function _FT_Get_Char_Index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 92 >> 2] | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 12 >> 2] & 255](i1, i2) | 0;
 return i2 | 0;
}

function __fribidi__new_run_list__internal__() {
 var i1 = 0;
 i1 = _malloc(24) | 0;
 if (!i1) return i1 | 0;
 HEAP32[i1 + 16 >> 2] = 128;
 HEAP8[i1 + 20 >> 0] = -1;
 HEAP32[i1 + 8 >> 2] = -1;
 HEAP32[i1 + 12 >> 2] = -1;
 HEAP32[i1 >> 2] = i1;
 HEAP32[i1 + 4 >> 2] = i1;
 return i1 | 0;
}

function _XmlParseXmlDeclNS(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 return _doParseXmlDecl(89, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) | 0;
}

function _Round_Up_To_Grid(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i2 | 0) > -1) {
  i3 = i2 + 63 + i3 & -64;
  i3 = (i3 | 0) > 0 ? i3 : 0;
  return i3 | 0;
 } else {
  i3 = 0 - (63 - i2 + i3 & -64) | 0;
  i3 = (i3 | 0) < 0 ? i3 : 0;
  return i3 | 0;
 }
 return 0;
}

function _tt_cmap13_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 13;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 9 >> 0] | 0) << 16 | (HEAPU8[i1 + 8 >> 0] | 0) << 24 | (HEAPU8[i1 + 10 >> 0] | 0) << 8 | (HEAPU8[i1 + 11 >> 0] | 0);
 return 0;
}

function _tt_cmap12_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 12;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 9 >> 0] | 0) << 16 | (HEAPU8[i1 + 8 >> 0] | 0) << 24 | (HEAPU8[i1 + 10 >> 0] | 0) << 8 | (HEAPU8[i1 + 11 >> 0] | 0);
 return 0;
}

function _tt_cmap10_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 10;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 9 >> 0] | 0) << 16 | (HEAPU8[i1 + 8 >> 0] | 0) << 24 | (HEAPU8[i1 + 10 >> 0] | 0) << 8 | (HEAPU8[i1 + 11 >> 0] | 0);
 return 0;
}

function _t1_cmap_custom_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i2 + 376 >> 2] | 0;
 HEAP32[i1 + 16 >> 2] = i3;
 HEAP32[i1 + 20 >> 2] = (HEAP32[i2 + 380 >> 2] | 0) - i3;
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 384 >> 2];
 return 0;
}

function _XmlParseXmlDecl(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 return _doParseXmlDecl(90, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) | 0;
}

function _tt_cmap8_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 8;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 9 >> 0] | 0) << 16 | (HEAPU8[i1 + 8 >> 0] | 0) << 24 | (HEAPU8[i1 + 10 >> 0] | 0) << 8 | (HEAPU8[i1 + 11 >> 0] | 0);
 return 0;
}

function _tt_cmap13_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = (HEAPU8[i2 + 13 >> 0] | 0) << 16 | (HEAPU8[i2 + 12 >> 0] | 0) << 24 | (HEAPU8[i2 + 14 >> 0] | 0) << 8 | (HEAPU8[i2 + 15 >> 0] | 0);
 HEAP8[i1 + 24 >> 0] = 0;
 return 0;
}

function _tt_cmap12_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = (HEAPU8[i2 + 13 >> 0] | 0) << 16 | (HEAPU8[i2 + 12 >> 0] | 0) << 24 | (HEAPU8[i2 + 14 >> 0] | 0) << 8 | (HEAPU8[i2 + 15 >> 0] | 0);
 HEAP8[i1 + 24 >> 0] = 0;
 return 0;
}

function _Round_To_Grid(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i2 | 0) > -1) {
  i3 = i2 + 32 + i3 & -64;
  i3 = (i3 | 0) > 0 ? i3 : 0;
  return i3 | 0;
 } else {
  i3 = 0 - (32 - i2 + i3 & -64) | 0;
  i3 = (i3 | 0) < 0 ? i3 : 0;
  return i3 | 0;
 }
 return 0;
}

function _FcStrBufDestroy(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 4 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) return;
 _free(HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = i1 + 20;
 HEAP32[i1 + 16 >> 2] = 64;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 return;
}

function _FcFileIsFile(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i3;
 if (_FcStat(i1, i2) | 0) {
  i2 = 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 i2 = (HEAP32[i2 + 12 >> 2] & 61440 | 0) == 32768 & 1;
 STACKTOP = i3;
 return i2 | 0;
}

function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i6 = i3;
 i3 = ___muldsi3(i5, i6) | 0;
 i1 = tempRet0;
 return (tempRet0 = (Math_imul(i2, i6) | 0) + (Math_imul(i4, i5) | 0) + i1 | i1 & 0, i3 | 0 | 0) | 0;
}

function _FcFileIsLink(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i3;
 if (_lstat(i1, i2) | 0) {
  i2 = 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 i2 = (HEAP32[i2 + 12 >> 2] & 61440 | 0) == 40960 & 1;
 STACKTOP = i3;
 return i2 | 0;
}

function _FcFileIsDir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i3;
 if (_FcStat(i1, i2) | 0) {
  i2 = 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 i2 = (HEAP32[i2 + 12 >> 2] & 61440 | 0) == 16384 & 1;
 STACKTOP = i3;
 return i2 | 0;
}

function _FcStrBufInit(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = (i2 | 0) == 0;
 HEAP32[i1 >> 2] = i4 ? i1 + 20 | 0 : i2;
 HEAP32[i1 + 16 >> 2] = i4 ? 64 : i3;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 return;
}

function _close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i1 = _dummy_138(i1) | 0;
 HEAP32[i3 >> 2] = i1;
 i1 = ___syscall6(6, i3 | 0) | 0;
 i1 = ___syscall_ret((i1 | 0) == -4 ? 0 : i1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _FcRangeIsInRange(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i2 = 0;
  return i2 | 0;
 }
 if (!(+HEAPF64[i1 >> 3] >= +HEAPF64[i2 >> 3])) i1 = 0; else i1 = +HEAPF64[i1 + 8 >> 3] <= +HEAPF64[i2 + 8 >> 3];
 i2 = i1 & 1;
 return i2 | 0;
}

function ___stdio_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i1 = _dummy_138(HEAP32[i1 + 60 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i1;
 i1 = ___syscall_ret(___syscall6(6, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _Round_Down_To_Grid(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i2 | 0) > -1) {
  i3 = i3 + i2 & -64;
  i3 = (i3 | 0) > 0 ? i3 : 0;
  return i3 | 0;
 } else {
  i3 = 0 - (i3 - i2 & -64) | 0;
  i3 = (i3 | 0) < 0 ? i3 : 0;
  return i3 | 0;
 }
 return 0;
}

function _ft_raster1_init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 56 >> 2] | 0) + 8 >> 2] & 31](HEAP32[i1 + 52 >> 2] | 0, HEAP32[i2 + 164 >> 2] | 0, HEAP32[i2 + 168 >> 2] | 0);
 return 0;
}

function _cid_get_ros(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (i2 | 0) HEAP32[i2 >> 2] = HEAP32[i1 + 152 >> 2];
 if (i3 | 0) HEAP32[i3 >> 2] = HEAP32[i1 + 156 >> 2];
 if (!i4) return 0;
 HEAP32[i4 >> 2] = HEAP32[i1 + 160 >> 2];
 return 0;
}

function _ft_smooth_init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 56 >> 2] | 0) + 8 >> 2] & 31](HEAP32[i1 + 52 >> 2] | 0, HEAP32[i2 + 164 >> 2] | 0, HEAP32[i2 + 168 >> 2] | 0);
 return 0;
}

function _ass_font_set_transform(i1, d2, d3, i4) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 i4 = i4 | 0;
 HEAPF64[i1 + 112 >> 3] = d2;
 HEAPF64[i1 + 120 >> 3] = d3;
 if (!i4) return;
 HEAP32[i1 + 128 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 132 >> 2] = HEAP32[i4 + 4 >> 2];
 return;
}

function _ass_realloc_array(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = Math_imul(i3, i2) | 0;
 if ((4294967295 / (i3 >>> 0) | 0) >>> 0 < i2 >>> 0) {
  i4 = 0;
  return i4 | 0;
 }
 i4 = _realloc(i1, (i4 | 0) == 0 ? 1 : i4) | 0;
 return i4 | 0;
}

function dynCall_iiiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 return FUNCTION_TABLE_iiiiiiii[i8 & 1](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0) | 0;
}

function _symlink(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall83(83, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _lstat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall196(196, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _FcFreeTypeIsExclusiveLang(i1) {
 i1 = i1 | 0;
 if (!(_FcLangCompare(i1, 349996) | 0)) return 1;
 if (!(_FcLangCompare(i1, 350003) | 0)) return 1;
 if (!(_FcLangCompare(i1, 350010) | 0)) return 1; else return (_FcLangCompare(i1, 350017) | 0) == 0 | 0;
 return 0;
}

function _stat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall195(195, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _rename(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall38(38, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _access(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall33(33, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _mkdir(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall39(39, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _chmod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall15(15, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _ass_cache_inc_ref(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 if (HEAP32[i1 + -8 >> 2] | 0) {
  i1 = i1 + -4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 | 0) {
   HEAP32[i1 >> 2] = i2 + 1;
   return;
  }
 }
 ___assert_fail(354746, 354776, 457, 354806);
}

function _t2_hints_open(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 2;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 76 >> 2] = 0;
 return;
}

function _t1_hints_open(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 1;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 76 >> 2] = 0;
 return;
}

function _link(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall9(9, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _FcStrListCreate(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _malloc(8) | 0;
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 HEAP32[i2 >> 2] = i1;
 if ((HEAP32[i1 >> 2] | 0) != -1) HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 HEAP32[i2 + 4 >> 2] = 0;
 return i2 | 0;
}

function _FcConfigAddDir(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(_FcStrSetAddFilename(HEAP32[i1 >> 2] | 0, i2) | 0)) {
  i2 = 0;
  i2 = i2 & 1;
  return i2 | 0;
 }
 i2 = (_FcStrSetAddFilename(HEAP32[i1 + 8 >> 2] | 0, i2) | 0) != 0;
 i2 = i2 & 1;
 return i2 | 0;
}

function _FT_Stream_GetChar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 32 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 >= (HEAP32[i1 + 36 >> 2] | 0) >>> 0) {
  i3 = 0;
  return i3 | 0;
 }
 HEAP32[i2 >> 2] = i3 + 1;
 i3 = HEAP8[i3 >> 0] | 0;
 return i3 | 0;
}

function _tt_face_load_post(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 508 >> 2] & 127](i1, 1886352244, i2, 0) | 0;
 if (i3 | 0) return i3 | 0;
 i3 = _FT_Stream_ReadFields(i2, 117652, i1 + 468 | 0) | 0;
 return i3 | 0;
}

function _tt_face_load_pclt(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 508 >> 2] & 127](i1, 1346587732, i2, 0) | 0;
 if (i3 | 0) return i3 | 0;
 i3 = _FT_Stream_ReadFields(i2, 117536, i1 + 548 | 0) | 0;
 return i3 | 0;
}

function _tt_face_load_head(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 508 >> 2] & 127](i1, 1751474532, i2, 0) | 0;
 if (i3 | 0) return i3 | 0;
 i3 = _FT_Stream_ReadFields(i2, 117452, i1 + 160 | 0) | 0;
 return i3 | 0;
}

function _tt_face_load_bhed(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 508 >> 2] & 127](i1, 1651008868, i2, 0) | 0;
 if (i3 | 0) return i3 | 0;
 i3 = _FT_Stream_ReadFields(i2, 117452, i1 + 160 | 0) | 0;
 return i3 | 0;
}

function _raccess_guess_apple_single(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i4 >> 2] = 0;
 if (!i2) {
  i5 = 81;
  return i5 | 0;
 }
 i5 = _raccess_guess_apple_generic(i2, 333312, i5) | 0;
 return i5 | 0;
}

function _raccess_guess_apple_double(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i4 >> 2] = 0;
 if (!i2) {
  i5 = 81;
  return i5 | 0;
 }
 i5 = _raccess_guess_apple_generic(i2, 333319, i5) | 0;
 return i5 | 0;
}

function _snprintf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _vsnprintf(i1, i2, i3, i6) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function dynCall_viiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 FUNCTION_TABLE_viiiiiii[i8 & 1](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0);
}

function _normal_skipS(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = i2 + 76 | 0;
 L1 : while (1) {
  switch (HEAP8[i2 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0) {
  case 21:
  case 9:
  case 10:
   break;
  default:
   break L1;
  }
  i1 = i1 + 1 | 0;
 }
 return i1 | 0;
}

function _T42_Size_Done(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 44 | 0;
 if (!(_FT_List_Find((HEAP32[(HEAP32[i1 >> 2] | 0) + 500 >> 2] | 0) + 108 | 0, HEAP32[i2 >> 2] | 0) | 0)) return;
 _FT_Done_Size(HEAP32[i2 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = 0;
 return;
}

function _tt_cmap14_done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAP32[i1 + 36 >> 2] | 0;
 HEAP32[i1 + 28 >> 2] = 0;
 if (!i3) return;
 i1 = i1 + 32 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) return;
 _ft_mem_free(i3, i2);
 HEAP32[i1 >> 2] = 0;
 return;
}

function _fnt_cmap_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 132 >> 2] | 0;
 i3 = HEAPU8[i2 + 104 >> 0] | 0;
 HEAP32[i1 + 16 >> 2] = i3;
 HEAP32[i1 + 20 >> 2] = 1 - i3 + (HEAPU8[i2 + 105 >> 0] | 0);
 return 0;
}

function _FcNameGetObjectType(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _FcObjectLookupBuiltinIdByName(i1) | 0;
 if (!i2) {
  i2 = _FcObjectLookupOtherTypeByName(i1) | 0;
  return i2 | 0;
 } else {
  i2 = 64244 + (i2 + -1 << 3) | 0;
  return i2 | 0;
 }
 return 0;
}

function _ft_bitmap_glyph_copy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 HEAP32[i2 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 return _FT_Bitmap_Copy(i3, i1 + 28 | 0, i2 + 28 | 0) | 0;
}

function _utf8_isNmstrt2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAPU8[i2 >> 0] | 0;
 i2 = HEAPU8[i2 + 1 >> 0] | 0;
 return 1 << (i2 & 31) & HEAP32[25356 + (((HEAPU8[344737 + (i1 >>> 2 & 7) >> 0] | 0) << 3 | i1 << 1 & 6 | i2 >>> 5 & 1) << 2) >> 2] | 0;
}

function _utf8_isInvalid2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((HEAPU8[i2 >> 0] | 0) < 194) {
  i2 = 1;
  i2 = i2 & 1;
  return i2 | 0;
 }
 i2 = HEAPU8[i2 + 1 >> 0] | 0;
 i2 = (i2 & 128 | 0) == 0 | (i2 & 192 | 0) == 192;
 i2 = i2 & 1;
 return i2 | 0;
}

function ___ftello(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 if ((HEAP32[i2 + 76 >> 2] | 0) > -1) {
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___ftello_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } else i1 = ___ftello_unlocked(i2) | 0;
 return i1 | 0;
}

function _Round_None(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i2 | 0) > -1) {
  i3 = i3 + i2 | 0;
  i3 = (i3 | 0) > 0 ? i3 : 0;
  return i3 | 0;
 } else {
  i3 = i2 - i3 | 0;
  i3 = (i3 | 0) < 0 ? i3 : 0;
  return i3 | 0;
 }
 return 0;
}

function _utf8_isName2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAPU8[i2 >> 0] | 0;
 i2 = HEAPU8[i2 + 1 >> 0] | 0;
 return 1 << (i2 & 31) & HEAP32[25356 + (((HEAPU8[344993 + (i1 >>> 2 & 7) >> 0] | 0) << 3 | i1 << 1 & 6 | i2 >>> 5 & 1) << 2) >> 2] | 0;
}

function _ft_outline_glyph_transform(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i2 | 0) _FT_Outline_Transform(i1 + 20 | 0, i2);
 if (!i3) return;
 _FT_Outline_Translate(i1 + 20 | 0, HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0);
 return;
}

function ___memrchr(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 & 255;
 do {
  if (!i2) {
   i1 = 0;
   break;
  }
  i2 = i2 + -1 | 0;
  i1 = i4 + i2 | 0;
 } while ((HEAP8[i1 >> 0] | 0) != i3 << 24 >> 24);
 return i1 | 0;
}

function _FcDirCacheMapHelper(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = _FcDirCacheMapFd(i1, i2, i3, i4) | 0;
 if (!i1) {
  i5 = 0;
  return i5 | 0;
 }
 HEAP32[i5 >> 2] = i1;
 i5 = 1;
 return i5 | 0;
}

function _FT_Done_Glyph(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) return;
 i2 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
 i3 = HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 12 >> 2] | 0;
 if (i3 | 0) FUNCTION_TABLE_vi[i3 & 127](i1);
 _ft_mem_free(i2, i1);
 return;
}

function _Move_CVT_Stretched(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = _FT_DivFix(i3, _Current_Ratio(i1) | 0) | 0;
 i3 = (HEAP32[i1 + 384 >> 2] | 0) + (i2 << 2) | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i4;
 return;
}

function _FT_Stream_OpenMemory(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 return;
}

function _t1_cmap_unicode_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 return FUNCTION_TABLE_iiiiiii[HEAP32[(HEAP32[i2 + 484 >> 2] | 0) + 4 >> 2] & 1](HEAP32[i2 + 100 >> 2] | 0, i1, HEAP32[i2 + 416 >> 2] | 0, 191, 0, i2) | 0;
}

function _FT_Activate_Size(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) i1 = 36; else {
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) i1 = 35; else if (!(HEAP32[i2 + 96 >> 2] | 0)) i1 = 35; else {
   HEAP32[i2 + 88 >> 2] = i1;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _tt_cmap13_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 i2 = _tt_cmap13_char_map_binary(i1, i4, 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _tt_cmap12_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 i2 = _tt_cmap12_char_map_binary(i1, i4, 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function ___ofl_add(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = ___ofl_lock() | 0;
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 >> 2];
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 | 0) HEAP32[i3 + 52 >> 2] = i1;
 HEAP32[i2 >> 2] = i1;
 ___ofl_unlock();
 return i1 | 0;
}

function _FT_Hypot(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = _FT_Vector_Length(i4) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _tt_cmap4_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = i2;
 HEAP32[i1 + 32 >> 2] = ((HEAPU8[i2 + 6 >> 0] | 0) << 8 | (HEAPU8[i2 + 7 >> 0] | 0)) >>> 1;
 HEAP32[i1 + 24 >> 2] = -1;
 HEAP32[i1 + 28 >> 2] = 0;
 return 0;
}

function _pntz(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _a_ctz_l_458((HEAP32[i1 >> 2] | 0) + -1 | 0) | 0;
 if (!i2) {
  i2 = _a_ctz_l_458(HEAP32[i1 + 4 >> 2] | 0) | 0;
  return ((i2 | 0) == 0 ? 0 : i2 + 32 | 0) | 0;
 } else return i2 | 0;
 return 0;
}

function _afm_compare_kern_pairs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 >> 2] << 16 | HEAP32[i1 + 4 >> 2];
 i2 = HEAP32[i2 >> 2] << 16 | HEAP32[i2 + 4 >> 2];
 return (i1 >>> 0 > i2 >>> 0 ? 1 : (i1 >>> 0 < i2 >>> 0) << 31 >> 31) | 0;
}

function __fribidi__new_run__internal__() {
 var i1 = 0;
 i1 = _malloc(24) | 0;
 if (!i1) return i1 | 0;
 HEAP8[i1 + 20 >> 0] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 return i1 | 0;
}

function _FcPatternCreate() {
 var i1 = 0, i2 = 0;
 i1 = _malloc(16) | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 i2 = i1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0 - i1;
 HEAP32[i1 + 12 >> 2] = 1;
 return i1 | 0;
}

function _destroy(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 if (i1 | 0) _FcCharSetDestroy(i1);
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (i1 | 0) _FcFontSetDestroy(i1);
 _FcConfigDestroy(HEAP32[i2 >> 2] | 0);
 _free(i2);
 return;
}

function dynCall_iiiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return FUNCTION_TABLE_iiiiiii[i7 & 1](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
}

function _skip_spaces(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 >> 2] | 0;
 L1 : while (1) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 9:
  case 32:
   break;
  default:
   break L1;
  }
  i1 = i1 + 1 | 0;
 }
 HEAP32[i2 >> 2] = i1;
 return;
}

function _bitshift64Ashr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = (i2 | 0) < 0 ? -1 : 0;
 return i2 >> i1 - 32 | 0;
}

function _compare_kern_pairs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 >> 2] << 16 | HEAP32[i1 + 4 >> 2];
 i2 = HEAP32[i2 >> 2] << 16 | HEAP32[i2 + 4 >> 2];
 return (i1 >>> 0 > i2 >>> 0 ? 1 : (i1 >>> 0 < i2 >>> 0) << 31 >> 31) | 0;
}

function _put_32(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = i3 & 3;
 HEAP8[i1 + i3 >> 0] = i2 >>> 24;
 HEAP8[i1 + (i3 ^ 1) >> 0] = i2 >>> 16;
 HEAP8[i1 + (i3 ^ 2) >> 0] = i2 >>> 8;
 HEAP8[i1 + (i3 ^ 3) >> 0] = i2;
 return;
}

function _ass_msg_handler(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if ((i1 | 0) > 4) return;
 i4 = HEAP32[22811] | 0;
 _fwrite(357620, 6, 1, i4) | 0;
 _vfprintf(i4, i2, i3) | 0;
 _fputc(10, i4) | 0;
 return;
}

function _FcRandom() {
 var i1 = 0, i2 = 0;
 if ((HEAP32[91939] | 0) == 1) i1 = _setstate(368408) | 0; else {
  i1 = _initstate(_time(0) | 0, 368408, 256) | 0;
  HEAP32[91939] = 1;
 }
 i2 = _random() | 0;
 _setstate(i1) | 0;
 return i2 | 0;
}

function _FcCharSetCopy(i1) {
 i1 = i1 | 0;
 if (!i1) return i1 | 0;
 if ((HEAP32[i1 >> 2] | 0) == -1) {
  _FcCacheObjectReference(i1);
  return i1 | 0;
 } else {
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  return i1 | 0;
 }
 return 0;
}

function _sprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsprintf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _fprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vfprintf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _be_padding(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((i1 | 0) < 4) return i1 | 0;
 if ((i1 | 0) < 8) {
  i1 = 4;
  return i1 | 0;
 } else {
  i2 = 128 - i1 | 0;
  return ((i1 | 0) < 124 ? 5 : (i2 | 0) > 0 ? i2 : 0) | 0;
 }
 return 0;
}

function _compare_offsets(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0;
 return (i1 >>> 0 > i2 >>> 0 ? 1 : (i1 >>> 0 < i2 >>> 0) << 31 >> 31) | 0;
}

function __fribidi__free_run_list__internal__(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] = 0;
 do {
  i2 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  _free(i2);
 } while ((i1 | 0) != 0);
 return;
}

function _strndup(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _strnlen(i3, i1) | 0;
 i1 = _malloc(i2 + 1 | 0) | 0;
 if (!i1) i1 = 0; else {
  _memcpy(i1 | 0, i3 | 0, i2 | 0) | 0;
  HEAP8[i1 + i2 >> 0] = 0;
 }
 return i1 | 0;
}

function _sscanf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsscanf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FcRangeCopy(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0;
 d3 = +HEAPF64[i1 >> 3];
 d2 = +HEAPF64[i1 + 8 >> 3];
 i1 = _malloc(16) | 0;
 if (!i1) return i1 | 0;
 HEAPF64[i1 >> 3] = d3;
 HEAPF64[i1 + 8 >> 3] = d2;
 return i1 | 0;
}

function _read_stream_font(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 127](HEAP32[i1 + 4 >> 2] | 0, i3, i2, i4) | 0;
 return i4 | 0;
}

function _printf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 i2 = _vfprintf(HEAP32[22843] | 0, i1, i4) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _FcDirCacheRead(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if (!i1) {
  i1 = _FcDirCacheLoad(i2, i3, 0) | 0;
  if (i1 | 0) {
   i3 = i1;
   return i3 | 0;
  }
 }
 i3 = _FcDirCacheScan(i2, i3) | 0;
 return i3 | 0;
}

function _tt_property_set(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!(_strcmp(i2, 279997) | 0)) if ((HEAP32[i3 >> 2] | 0) == 35) {
  HEAP32[i1 + 64 >> 2] = 35;
  i1 = 0;
 } else i1 = 7; else i1 = 12;
 return i1 | 0;
}

function dynCall_viiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 FUNCTION_TABLE_viiiiii[i7 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}

function _mystrtoi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0;
 i3 = HEAP32[i1 >> 2] | 0;
 d4 = +_ass_strtod(i3, i1);
 HEAP32[i2 >> 2] = ~~(d4 + (d4 > 0.0 ? .5 : -.5));
 return (HEAP32[i1 >> 2] | 0) != (i3 | 0) | 0;
}

function _ft_smooth_render_lcd_v(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = _ft_smooth_render_generic(i1, i4, i2, i3, 4) | 0;
 if (i1 | 0) return i1 | 0;
 HEAP8[i4 + 94 >> 0] = 6;
 return i1 | 0;
}

function _XmlInitUnknownEncodingNS(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = _XmlInitUnknownEncoding(i1, i2, i3, i4) | 0;
 if (!i1) return i1 | 0;
 HEAP8[i1 + 76 + 58 >> 0] = 23;
 return i1 | 0;
}

function _get_32(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = i2 & 3;
 return (HEAPU8[i1 + (i2 ^ 1) >> 0] | 0) << 16 | (HEAPU8[i1 + i2 >> 0] | 0) << 24 | (HEAPU8[i1 + (i2 ^ 2) >> 0] | 0) << 8 | (HEAPU8[i1 + (i2 ^ 3) >> 0] | 0) | 0;
}

function _ft_smooth_render_lcd(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = _ft_smooth_render_generic(i1, i4, i2, i3, 3) | 0;
 if (i1 | 0) return i1 | 0;
 HEAP8[i4 + 94 >> 0] = 5;
 return i1 | 0;
}

function _bitshift64Shl(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 << i1 | (i3 & (1 << i1) - 1 << 32 - i1) >>> 32 - i1;
  return i3 << i1;
 }
 tempRet0 = i3 << i1 - 32;
 return 0;
}

function _XML_SetUserData(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = i1 + 4 | 0;
 i4 = (HEAP32[i3 >> 2] | 0) == (HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = i2;
 if (!i4) return;
 HEAP32[i3 >> 2] = i2;
 return;
}

function _ft_raster1_set_mode(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 56 >> 2] | 0) + 12 >> 2] & 127](HEAP32[i1 + 52 >> 2] | 0, i2, i3) | 0;
}

function _ft_smooth_set_mode(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 56 >> 2] | 0) + 12 >> 2] & 127](HEAP32[i1 + 52 >> 2] | 0, i2, i3) | 0;
}

function _ft_gzip_alloc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = _ft_mem_alloc(i1, Math_imul(i3, i2) | 0, i4) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FcPatternReference(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2 + 12 | 0;
 if ((HEAP32[i1 >> 2] | 0) == -1) {
  _FcCacheObjectReference(i2);
  return;
 } else {
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  return;
 }
}

function _bitshift64Lshr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >>> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = 0;
 return i2 >>> i1 - 32 | 0;
}

function _T42_Driver_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _FT_Get_Module(HEAP32[i1 + 4 >> 2] | 0, 280791) | 0;
 if (!i2) {
  i2 = 11;
  return i2 | 0;
 }
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 >> 2];
 i2 = 0;
 return i2 | 0;
}

function _FT_Outline_New(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (!i1) {
  i4 = 33;
  return i4 | 0;
 }
 i4 = _FT_Outline_New_Internal(HEAP32[i1 >> 2] | 0, i2, i3, i4) | 0;
 return i4 | 0;
}

function _FT_Bitmap_Init(i1) {
 i1 = i1 | 0;
 if (!i1) return;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function _unlink(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = ___syscall_ret(___syscall10(10, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _ft_validator_init(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 HEAP32[i1 + 156 >> 2] = i2;
 HEAP32[i1 + 160 >> 2] = i3;
 HEAP32[i1 + 164 >> 2] = i4;
 HEAP32[i1 + 168 >> 2] = 0;
 return;
}

function _rmdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = ___syscall_ret(___syscall40(40, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _FcCharSetCreate() {
 var i1 = 0;
 i1 = _malloc(16) | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 HEAP32[i1 >> 2] = 1;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 return i1 | 0;
}

function _cff_cmap_unicode_done(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 20 | 0;
 _ft_mem_free(HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] | 0, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _FcStrSetCreate() {
 var i1 = 0;
 i1 = _malloc(16) | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 HEAP32[i1 >> 2] = 1;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 return i1 | 0;
}

function _t1_cmap_unicode_done(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 20 | 0;
 _ft_mem_free(HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] | 0, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _cff_get_is_cid(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 656 >> 2] | 0;
 HEAP8[i2 >> 0] = 0;
 if (!i1) return 0;
 if ((HEAP32[i1 + 1456 >> 2] | 0) == 65535) return 0;
 HEAP8[i2 >> 0] = 1;
 return 0;
}

function _Direct_Move_Orig_Y(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = (HEAP32[i2 + 12 >> 2] | 0) + ((i3 & 65535) << 3) + 4 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i4;
 return;
}

function _zcalloc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = _ft_mem_alloc(i1, Math_imul(i3, i2) | 0, i4) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _a_ctz_l_458(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) i1 = 32; else if (!(i1 & 1)) {
  i2 = i1;
  i1 = 0;
  do {
   i1 = i1 + 1 | 0;
   i2 = i2 >>> 1;
  } while (!(i2 & 1 | 0));
 } else i1 = 0;
 return i1 | 0;
}

function dynCall_iiiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiiii[i6 & 127](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}

function b6(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 abort(6);
 return 0;
}

function _FcStrSetAddFilename(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _FcStrCopyFilename(i1) | 0;
 if (!i1) i1 = 0; else if (!(__FcStrSetAppend(i2, i1) | 0)) {
  _free(i1);
  i1 = 0;
 } else i1 = 1;
 return i1 | 0;
}

function _Direct_Move_Orig_X(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = (HEAP32[i2 + 12 >> 2] | 0) + ((i3 & 65535) << 3) | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i4;
 return;
}

function _bdf_cmap_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 + 16 >> 2] = HEAP32[(HEAP32[i2 + 140 >> 2] | 0) + 52 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 144 >> 2];
 return 0;
}

function _change_alpha(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 var i4 = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = ~~(+(i2 | 0) * d3 + (1.0 - d3) * +((i4 & 255) >>> 0)) & 255 | i4 & -256;
 return;
}

function _FcRangeCreateInteger(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _malloc(16) | 0;
 if (!i3) return i3 | 0;
 HEAPF64[i3 >> 3] = +(i1 >>> 0);
 HEAPF64[i3 + 8 >> 3] = +(i2 >>> 0);
 return i3 | 0;
}

function _tt_cmap6_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 6;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 4 >> 0] | 0) << 8 | (HEAPU8[i1 + 5 >> 0] | 0);
 return 0;
}

function _tt_cmap4_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 4;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 4 >> 0] | 0) << 8 | (HEAPU8[i1 + 5 >> 0] | 0);
 return 0;
}

function _tt_cmap2_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 2;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 4 >> 0] | 0) << 8 | (HEAPU8[i1 + 5 >> 0] | 0);
 return 0;
}

function _tt_cmap0_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 4 >> 0] | 0) << 8 | (HEAPU8[i1 + 5 >> 0] | 0);
 return 0;
}

function _ass_font_index_magic(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 92 >> 2] | 0;
 if (!i1) return i2 | 0; else return ((HEAP32[i1 + 4 >> 2] | 0) == 1937337698 ? i2 | 61440 : i2) | 0;
 return 0;
}

function _cff_cmap_unicode_char_next(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[(HEAP32[(HEAP32[i1 >> 2] | 0) + 656 >> 2] | 0) + 2956 >> 2] | 0) + 12 >> 2] & 255](i1, i2) | 0;
}

function _cff_cmap_unicode_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[(HEAP32[(HEAP32[i1 >> 2] | 0) + 656 >> 2] | 0) + 2956 >> 2] | 0) + 8 >> 2] & 255](i1, i2) | 0;
}

function _tt_property_get(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (_strcmp(i2, 279997) | 0) {
  i3 = 12;
  return i3 | 0;
 }
 HEAP32[i3 >> 2] = HEAP32[i1 + 64 >> 2];
 i3 = 0;
 return i3 | 0;
}

function _cff_cmap_encoding_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (i2 >>> 0 >= 256) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAPU16[(HEAP32[i1 + 16 >> 2] | 0) + (i2 << 1) >> 1] | 0;
 return i2 | 0;
}

function _ft_raccess_sort_ref_by_id(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP16[i1 >> 1] | 0;
 i2 = HEAP16[i2 >> 1] | 0;
 return ((i1 & 65535) < (i2 & 65535) ? -1 : (i1 & 65535) > (i2 & 65535) & 1) | 0;
}

function _check_postscript_ft(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = (_FT_Get_PS_Font_Info(HEAP32[i1 + 4 >> 2] | 0, i2) | 0) == 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _FT_New_Memory() {
 var i1 = 0;
 i1 = _malloc(16) | 0;
 if (!i1) return i1 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 193;
 HEAP32[i1 + 12 >> 2] = 68;
 HEAP32[i1 + 8 >> 2] = 35;
 return i1 | 0;
}

function _FT_Get_Sfnt_Name_Count(i1) {
 i1 = i1 | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 if (!(HEAP32[i1 + 8 >> 2] & 8)) {
  i1 = 0;
  return i1 | 0;
 }
 i1 = HEAPU16[i1 + 340 >> 1] | 0;
 return i1 | 0;
}

function _font_key_move(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!i1) {
  _free(HEAP32[i2 >> 2] | 0);
  return 1;
 } else {
  _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
  return 1;
 }
 return 0;
}

function _tt_face_free_sbit(i1) {
 i1 = i1 | 0;
 _FT_Stream_ReleaseFrame(HEAP32[i1 + 104 >> 2] | 0, i1 + 724 | 0);
 HEAP32[i1 + 728 >> 2] = 0;
 HEAP32[i1 + 732 >> 2] = 0;
 HEAP32[i1 + 736 >> 2] = 0;
 return;
}

function _FcSerializeReserve(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = i2 & 7;
 HEAP32[i1 >> 2] = ((i4 | 0) == 0 ? 0 : 8 - i4 | 0) + i2 + i3;
 return i3 | 0;
}

function _FcInitLoadOwnConfigAndFonts(i1) {
 i1 = i1 | 0;
 i1 = _FcInitLoadOwnConfig(i1) | 0;
 if (!i1) i1 = 0; else if (!(_FcConfigBuildFonts(i1) | 0)) {
  _FcConfigDestroy(i1);
  i1 = 0;
 }
 return i1 | 0;
}

function dynCall_viiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiiii[i6 & 31](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function _llvm_ctpop_i32(i1) {
 i1 = i1 | 0;
 i1 = i1 - (i1 >>> 1 & 1431655765) | 0;
 i1 = (i1 & 858993459) + (i1 >>> 2 & 858993459) | 0;
 return Math_imul(i1 + (i1 >>> 4) & 252645135, 16843009) >>> 24 | 0;
}

function _mystrtod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0;
 i3 = HEAP32[i1 >> 2] | 0;
 d4 = +_ass_strtod(i3, i1);
 HEAPF64[i2 >> 3] = d4;
 return (HEAP32[i1 >> 2] | 0) != (i3 | 0) | 0;
}

function _Write_CVT_Stretched(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _FT_DivFix(i3, _Current_Ratio(i1) | 0) | 0;
 HEAP32[(HEAP32[i1 + 384 >> 2] | 0) + (i2 << 2) >> 2] = i3;
 return;
}

function _FT_Done_FreeType(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) {
  i1 = 33;
  return i1 | 0;
 }
 i2 = HEAP32[i1 >> 2] | 0;
 _FT_Done_Library(i1) | 0;
 _FT_Done_Memory(i2);
 i1 = 0;
 return i1 | 0;
}

function _t42_get_glyph_name(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _ft_mem_strcpyn(i3, HEAP32[(HEAP32[i1 + 420 >> 2] | 0) + (i2 << 2) >> 2] | 0, i4) | 0;
 return 0;
}

function _ass_shaper_free(i1) {
 i1 = i1 | 0;
 _free(HEAP32[i1 + 8 >> 2] | 0);
 _free(HEAP32[i1 + 12 >> 2] | 0);
 _free(HEAP32[i1 + 16 >> 2] | 0);
 _free(HEAP32[i1 + 20 >> 2] | 0);
 _free(i1);
 return;
}

function _FcStrSetAdd(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = ___strdup(i1) | 0;
 if (!i1) i1 = 0; else if (!(__FcStrSetAppend(i2, i1) | 0)) {
  _free(i1);
  i1 = 0;
 } else i1 = 1;
 return i1 | 0;
}

function _t1_get_glyph_name(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _ft_mem_strcpyn(i3, HEAP32[(HEAP32[i1 + 420 >> 2] | 0) + (i2 << 2) >> 2] | 0, i4) | 0;
 return 0;
}

function _FcInitLoadConfigAndFonts() {
 var i1 = 0;
 i1 = _FcInitLoadOwnConfig(0) | 0;
 if (!i1) i1 = 0; else if (!(_FcConfigBuildFonts(i1) | 0)) {
  _FcConfigDestroy(i1);
  i1 = 0;
 }
 return i1 | 0;
}

function _tt_cmap0_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (i2 >>> 0 >= 256) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAPU8[(HEAP32[i1 + 16 >> 2] | 0) + (i2 + 6) >> 0] | 0;
 return i2 | 0;
}

function b5(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 abort(5);
 return 0;
}

function _FcFontSetCreate() {
 var i1 = 0;
 i1 = _malloc(12) | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return i1 | 0;
}

function _ft_ansi_stream_close(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 12 | 0;
 _fclose(HEAP32[i2 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 return;
}

function _FcBlanksCreate() {
 var i1 = 0;
 i1 = _malloc(12) | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return i1 | 0;
}

function ___DOUBLE_BITS_680(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return i2 | 0;
}

function ___DOUBLE_BITS_552(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return i2 | 0;
}

function _sfnt_stream_close(i1) {
 i1 = i1 | 0;
 _ft_mem_free(HEAP32[i1 + 28 >> 2] | 0, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 return;
}

function _pcf_cmap_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 296 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 300 >> 2];
 return 0;
}

function _FcDirCacheReference(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _FcCacheFindByAddr(i1) | 0;
 if (!i1) return;
 i1 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i2;
 return;
}

function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i2 - i4 - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (tempRet0 = i4, i1 - i3 >>> 0 | 0) | 0;
}

function ___strdup(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = (_strlen(i2) | 0) + 1 | 0;
 i1 = _malloc(i3) | 0;
 if (!i1) i1 = 0; else _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
 return i1 | 0;
}

function dynCall_iiiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiiii[i5 & 127](i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function ___lctrans_impl(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) i1 = 0; else i1 = ___mo_lookup(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, i2) | 0;
 return (i1 | 0 ? i1 : i2) | 0;
}

function ___DOUBLE_BITS(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return i2 | 0;
}

function _FcRangeCreateDouble(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0;
 i3 = _malloc(16) | 0;
 if (!i3) return i3 | 0;
 HEAPF64[i3 >> 3] = d1;
 HEAPF64[i3 + 8 >> 3] = d2;
 return i3 | 0;
}

function _main(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 STACKTOP = i3;
 return 0;
}

function _loadstate(i1) {
 i1 = i1 | 0;
 HEAP32[23002] = i1 + 4;
 i1 = HEAP32[i1 >> 2] | 0;
 HEAP32[23001] = i1 >>> 16;
 HEAP32[23003] = i1 >>> 8 & 255;
 HEAP32[92093] = i1 & 255;
 return;
}

function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = i1 + i3 >>> 0;
 return (tempRet0 = i2 + i4 + (i3 >>> 0 < i1 >>> 0 | 0) >>> 0, i3 | 0) | 0;
}

function _by_encoding(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 return ((i1 | 0) < (i2 | 0) ? -1 : (i1 | 0) > (i2 | 0) & 1) | 0;
}

function _FT_RoundFix(i1) {
 i1 = i1 | 0;
 if ((i1 | 0) > -1) {
  i1 = i1 + 32768 & -65536;
  return i1 | 0;
 } else {
  i1 = 0 - (32768 - i1 & -65536) | 0;
  return i1 | 0;
 }
 return 0;
}

function b9(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 abort(9);
}

function _fnt_cmap_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = i2 - (HEAP32[i1 + 16 >> 2] | 0) | 0;
 return (i2 >>> 0 < (HEAP32[i1 + 20 >> 2] | 0) >>> 0 ? i2 + 1 | 0 : 0) | 0;
}

function _check_glyph_ft(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i2) {
  i2 = 1;
  return i2 | 0;
 }
 i2 = (_FT_Get_Char_Index(HEAP32[i1 + 4 >> 2] | 0, i2) | 0) != 0;
 return i2 | 0;
}

function _t1_cmap_unicode_char_next(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[(HEAP32[i1 >> 2] | 0) + 484 >> 2] | 0) + 12 >> 2] & 255](i1, i2) | 0;
}

function _t1_cmap_unicode_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[(HEAP32[i1 >> 2] | 0) + 484 >> 2] | 0) + 8 >> 2] & 255](i1, i2) | 0;
}

function _Read_CVT_Stretched(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = HEAP32[(HEAP32[i1 + 384 >> 2] | 0) + (i2 << 2) >> 2] | 0;
 return _FT_MulFix(i2, _Current_Ratio(i1) | 0) | 0;
}

function _cid_get_postscript_name(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 140 >> 2] | 0;
 if (!i1) return 0; else return ((HEAP8[i1 >> 0] | 0) == 47 ? i1 + 1 | 0 : i1) | 0;
 return 0;
}

function _Move_CVT(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i2 = (HEAP32[i1 + 384 >> 2] | 0) + (i2 << 2) | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i3;
 return;
}

function _ps_get_standard_strings(i1) {
 i1 = i1 | 0;
 if (i1 >>> 0 > 390) {
  i1 = 0;
  return i1 | 0;
 }
 i1 = 284888 + (HEAP16[118672 + (i1 << 1) >> 1] | 0) | 0;
 return i1 | 0;
}

function _FcBlanksDestroy(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[i1 + 4 >> 2] | 0) == -1) return;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (i2 | 0) _free(i2);
 _free(i1);
 return;
}

function _pcf_get_charset_id(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 + 176 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i1 + 180 >> 2];
 return 0;
}

function _bdf_get_charset_id(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 + 132 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i1 + 136 >> 2];
 return 0;
}

function dynCall_viiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viiii[i5 & 31](i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _ft_smooth_render(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _ft_smooth_render_generic(i1, i2, (i3 | 0) == 1 ? 0 : i3, i4, 0) | 0;
}

function _lcg64(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = ___muldi3(i1 | 0, i2 | 0, 1284865837, 1481765933) | 0;
 i2 = _i64Add(i2 | 0, tempRet0 | 0, 1, 0) | 0;
 return i2 | 0;
}

function _FcCacheObjectReference(i1) {
 i1 = i1 | 0;
 i1 = _FcCacheFindByAddr(i1) | 0;
 if (!i1) return;
 i1 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function ___syscall_ret(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (i1 >>> 0 > 4294963200) {
  i2 = ___errno_location() | 0;
  HEAP32[i2 >> 2] = 0 - i1;
  i1 = -1;
 }
 return i1 | 0;
}

function _t1_cmap_std_done(i1) {
 i1 = i1 | 0;
 i1 = i1 + 16 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 return;
}

function _ass_drawing_set_text(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _free(HEAP32[i1 >> 2] | 0);
 i3 = _strndup(i2, i3) | 0;
 HEAP32[i1 >> 2] = i3;
 return;
}

function _parse_buildchar(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 52 >> 2] & 127](i2, 0, 0, 0) | 0;
 HEAP32[i1 + 540 >> 2] = i2;
 return;
}

function _tt_size_init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 296 >> 2] = -1;
 HEAP32[i1 + 300 >> 2] = -1;
 HEAP8[i1 + 72 + 36 >> 0] = 0;
 HEAP32[i1 + 112 >> 2] = -1;
 return 0;
}

function _FcConfigPatternsAdd(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _FcFontSetAdd(HEAP32[(i3 | 0 ? i1 + 44 | 0 : i1 + 48 | 0) >> 2] | 0, i2) | 0;
}

function b12(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 abort(12);
}

function _ft_gzip_stream_io(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _ft_gzip_file_io(HEAP32[i1 + 12 >> 2] | 0, i2, i3, i4) | 0;
}

function _FT_Stream_Close(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 if (!i2) return;
 FUNCTION_TABLE_vi[i2 & 127](i1);
 return;
}

function _remainder(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 d2 = +_remquo(d1, d2, i3);
 STACKTOP = i3;
 return +d2;
}

function _rasterizer_done(i1) {
 i1 = i1 | 0;
 _free(HEAP32[i1 + 20 >> 2] | 0);
 _free(HEAP32[i1 + 24 >> 2] | 0);
 _ass_aligned_free(HEAP32[i1 + 48 >> 2] | 0);
 return;
}

function _FcPatternGet(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _FcPatternObjectGet(i1, _FcObjectFromName(i2) | 0, i3, i4) | 0;
}

function _ass_set_message_cb(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!i2) return;
 HEAP32[i1 + 20 >> 2] = i2;
 HEAP32[i1 + 24 >> 2] = i3;
 return;
}

function _XML_ErrorString(i1) {
 i1 = i1 | 0;
 if ((i1 + -1 | 0) >>> 0 >= 40) {
  i1 = 0;
  return i1 | 0;
 }
 i1 = HEAP32[30740 + (i1 << 2) >> 2] | 0;
 return i1 | 0;
}

function _FcConfigGlobAdd(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _FcStrSetAdd(HEAP32[(i3 | 0 ? i1 + 36 | 0 : i1 + 40 | 0) >> 2] | 0, i2) | 0;
}

function _savestate() {
 var i1 = 0;
 i1 = (HEAP32[23002] | 0) + -4 | 0;
 HEAP32[i1 >> 2] = HEAP32[23003] << 8 | HEAP32[23001] << 16 | HEAP32[92093];
 return i1 | 0;
}

function _afm_parser_done(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 4 | 0;
 _ft_mem_free(HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 return;
}

function _FcCharSetPromote(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = -1;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 return i1 | 0;
}

function _ass_drawing_free(i1) {
 i1 = i1 | 0;
 if (!i1) {
  _free(i1);
  return;
 }
 _free(HEAP32[i1 >> 2] | 0);
 _outline_free(i1 + 40 | 0);
 _free(i1);
 return;
}

function _Vertical_Sweep_Step(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 148 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP16[i1 + 156 >> 1] | 0);
 return;
}

function dynCall_iiii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iiii[i4 & 127](i1 | 0, i2 | 0, i3 | 0) | 0;
}

function b0(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(0);
 return 0;
}

function _put_16(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = i3 & 1;
 HEAP8[i1 + i3 >> 0] = i2 >>> 8;
 HEAP8[i1 + (i3 ^ 1) >> 0] = i2;
 return;
}

function _XmlPrologStateInit(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 38;
 HEAP32[i1 + 16 >> 2] = 1;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function _ass_shaper_info(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _ass_msg(i1, 4, 358768, i2);
 STACKTOP = i2;
 return;
}

function _FcSerializeCreate() {
 var i1 = 0;
 i1 = _malloc(32776) | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 _memset(i1 | 0, 0, 32776) | 0;
 return i1 | 0;
}

function _FcAtomicUnlock(i1) {
 i1 = i1 | 0;
 i1 = i1 + 8 | 0;
 if ((_unlink(HEAP32[i1 >> 2] | 0) | 0) != -1) return;
 _rmdir(HEAP32[i1 >> 2] | 0) | 0;
 return;
}

function _cff_cmap_encoding_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = (HEAP32[(HEAP32[i1 >> 2] | 0) + 656 >> 2] | 0) + 640;
 return 0;
}

function _FcDirChecksumScandirSorter(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _strcmp((HEAP32[i1 >> 2] | 0) + 11 | 0, (HEAP32[i2 >> 2] | 0) + 11 | 0) | 0;
}

function _strchr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = ___strchrnul(i1, i2) | 0;
 return ((HEAP8[i1 >> 0] | 0) == (i2 & 255) << 24 >> 24 ? i1 : 0) | 0;
}

function _fputs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _strlen(i1) | 0;
 return ((_fwrite(i1, 1, i3, i2) | 0) != (i3 | 0)) << 31 >> 31 | 0;
}

function _tt_get_cmap_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 48 >> 2] & 255](i1, i2) | 0;
}

function _getpid() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = ___syscall20(20, i2 | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _XML_SetDoctypeDeclHandler(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i1 + 84 >> 2] = i2;
 HEAP32[i1 + 88 >> 2] = i3;
 return;
}

function _libassjs_quit() {
 _ass_free_track(HEAP32[91914] | 0);
 _ass_renderer_done(HEAP32[91913] | 0);
 _ass_library_done(HEAP32[91912] | 0);
 return;
}

function _XML_SetElementHandler(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i1 + 52 >> 2] = i2;
 HEAP32[i1 + 56 >> 2] = i3;
 return;
}

function _Current_Ppem_Stretched(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAPU16[i1 + 252 >> 1] | 0;
 return _FT_MulFix(i2, _Current_Ratio(i1) | 0) | 0;
}

function dynCall_viii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_viii[i4 & 31](i1 | 0, i2 | 0, i3 | 0);
}

function b3(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(3);
}

function _initScanContentNS(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _initScan(28872, i1, 1, i2, i3, i4) | 0;
}

function _ass_free_bitmap(i1) {
 i1 = i1 | 0;
 if (!i1) {
  _free(i1);
  return;
 }
 _ass_aligned_free(HEAP32[i1 + 20 >> 2] | 0);
 _free(i1);
 return;
}

function _FcCharSetFirstPage(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i3 >> 2] = 0;
 return _FcCharSetNextPage(i1, i2, i3) | 0;
}

function _initScanPrologNS(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _initScan(28872, i1, 0, i2, i3, i4) | 0;
}

function _strerror(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (___pthread_self_837() | 0) + 188 | 0;
 return ___strerror_l(i1, HEAP32[i2 >> 2] | 0) | 0;
}

function _initScanContent(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _initScan(27740, i1, 1, i2, i3, i4) | 0;
}

function _get_16(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = i2 & 1;
 return (HEAPU8[i1 + i2 >> 0] | 0) << 8 | (HEAPU8[i1 + (i2 ^ 1) >> 0] | 0) | 0;
}

function _cid_get_cid_from_glyph_index(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!i3) return 0;
 HEAP32[i3 >> 2] = i2;
 return 0;
}
function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return i2 | 0;
}

function _initScanProlog(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _initScan(27740, i1, 0, i2, i3, i4) | 0;
}

function _strnlen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _memchr(i1, 0, i2) | 0;
 return ((i3 | 0) == 0 ? i2 : i3 - i1 | 0) | 0;
}

function _setstate(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 ___lock(368364);
 i2 = _savestate() | 0;
 _loadstate(i1);
 ___unlock(368364);
 return i2 | 0;
}

function _Write_CVT(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[(HEAP32[i1 + 384 >> 2] | 0) + (i2 << 2) >> 2] = i3;
 return;
}

function b8(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(8);
 return 0;
}

function _gray_line_to(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _gray_render_line(i2, HEAP32[i1 >> 2] << 2, HEAP32[i1 + 4 >> 2] << 2);
 return 0;
}

function _FcLangSetDestroy(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) _FcStrSetDestroy(i2);
 _free(i1);
 return;
}

function _mult_alpha(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 255 - (((Math_imul(255 - i2 | 0, 255 - i1 | 0) | 0) >>> 0) / 255 | 0) | 0;
}

function _ft_mem_free(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i2) return;
 FUNCTION_TABLE_vii[HEAP32[i1 + 8 >> 2] & 63](i1, i2);
 return;
}

function _winfnt_get_header(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _memcpy(i2 | 0, (HEAP32[i1 + 132 >> 2] | 0) + 4 | 0, 156) | 0;
 return 0;
}

function _swapc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _llvm_bswap_i32(i1 | 0) | 0;
 return ((i2 | 0) == 0 ? i1 : i3) | 0;
}

function _af_autofitter_init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 12 >> 2] = 48;
 HEAP32[i1 + 16 >> 2] = 5;
 HEAP8[i1 + 20 >> 0] = 0;
 return 0;
}

function _t1_cmap_custom_done(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
}

function _FcConfigSubstitute(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _FcConfigSubstituteWithPat(i1, i2, 0, i3) | 0;
}

function _ass_library_init() {
 var i1 = 0;
 i1 = _calloc(1, 28) | 0;
 if (!i1) return i1 | 0;
 HEAP32[i1 + 20 >> 2] = 29;
 return i1 | 0;
}

function _strtoll(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _strtox(i1, i2, i3, 0, -2147483648) | 0;
 return i3 | 0;
}

function _out(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!(HEAP32[i1 >> 2] & 32)) ___fwritex(i2, i3, i1) | 0;
 return;
}

function _strtol(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _strtox(i1, i2, i3, -2147483648, 0) | 0;
 return i3 | 0;
}

function dynCall_iii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[i3 & 255](i1 | 0, i2 | 0) | 0;
}

function b15(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(15);
}

function _psaux_get_glyph_name(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return HEAP32[(HEAP32[i1 + 420 >> 2] | 0) + (i2 << 2) >> 2] | 0;
}

function _ps_get_macintosh_name(i1) {
 i1 = i1 | 0;
 return 284888 + (HEAP16[119454 + ((i1 >>> 0 > 257 ? 0 : i1) << 1) >> 1] | 0) | 0;
}

function _llvm_bswap_i32(i1) {
 i1 = i1 | 0;
 return (i1 & 255) << 24 | (i1 >> 8 & 255) << 16 | (i1 >> 16 & 255) << 8 | i1 >>> 24 | 0;
}

function _errorProcessor(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return HEAP32[i1 + 284 >> 2] | 0;
}

function _FcDirScanOnly(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _FcDirScanConfig(0, i1, 0, i2, 1, i3, 1) | 0;
}

function _FcAtomicReplaceOrig(i1) {
 i1 = i1 | 0;
 return (_rename(HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) >>> 31 ^ 1 | 0;
}

function _tt_face_set_sbit_strike(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _FT_Match_Size(i1, i2, 0, i3) | 0;
}

function _af_indic_hints_apply(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _af_cjk_hints_apply(i1, i2, i3) | 0;
}

function _FcConfigAddCacheDir(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _FcStrSetAddFilename(HEAP32[i1 + 12 >> 2] | 0, i2) | 0;
}

function dynCall_dii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +FUNCTION_TABLE_dii[i3 & 15](i1 | 0, i2 | 0);
}

function _parse_private(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = i2 + 372 | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
 return;
}

function b17(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(17);
 return 0;
}

function _tt_cmap14_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i2 + 4 >> 2] = 14;
 HEAP32[i2 >> 2] = -1;
 return 0;
}

function _FcRangePromote(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 HEAPF64[i2 >> 3] = d1;
 HEAPF64[i2 + 8 >> 3] = d1;
 return i2 | 0;
}

function _t42_ps_get_font_extra(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i2 >> 1] = HEAP16[i1 + 164 >> 1] | 0;
 return 0;
}

function _cid_ps_get_font_extra(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i2 >> 1] = HEAP16[i1 + 312 >> 1] | 0;
 return 0;
}

function _t1_ps_get_font_extra(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP16[i2 >> 1] = HEAP16[i1 + 164 >> 1] | 0;
 return 0;
}

function _srand(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = 367640;
 HEAP32[i2 >> 2] = i1 + -1;
 HEAP32[i2 + 4 >> 2] = 0;
 return;
}

function _FcSortCmpStr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _FcStrCmp(HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
}

function _FcLangSetSerializeAlloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (_FcSerializeAlloc(i1, i2, 40) | 0) != 0 | 0;
}

function _ft_realloc(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _realloc(i4, i3) | 0;
}

function _ass_cache_key(i1) {
 i1 = i1 | 0;
 return i1 + ((HEAP32[(HEAP32[i1 + -28 >> 2] | 0) + 20 >> 2] | 0) + 7 & -8) | 0;
}

function _wctomb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) i1 = 0; else i1 = _wcrtomb(i1, i2, 0) | 0;
 return i1 | 0;
}

function _tt_slot_init(i1) {
 i1 = i1 | 0;
 return _FT_GlyphLoader_CreateExtra(HEAP32[HEAP32[i1 + 156 >> 2] >> 2] | 0) | 0;
}

function _t42_ps_get_font_private(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _memcpy(i2 | 0, i1 + 168 | 0, 196) | 0;
 return 0;
}

function _lrint(d1) {
 d1 = +d1;
 var i2 = 0;
 i2 = _fetestexcept(32) | 0;
 d1 = +_rint(d1);
 if (!i2) {}
 return ~~d1 | 0;
}

function _FcRangeSerializeAlloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (_FcSerializeAlloc(i1, i2, 16) | 0) != 0 | 0;
}

function dynCall_vii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vii[i3 & 63](i1 | 0, i2 | 0);
}

function _vsprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _vsnprintf(i1, 2147483647, i2, i3) | 0;
}

function _t1_ps_get_font_private(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _memcpy(i2 | 0, i1 + 168 | 0, 196) | 0;
 return 0;
}

function _Read_CVT(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return HEAP32[(HEAP32[i1 + 384 >> 2] | 0) + (i2 << 2) >> 2] | 0;
}

function _cmpstringp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _strcmp(HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
}

function _ass_cache_done(i1) {
 i1 = i1 | 0;
 _ass_cache_empty(i1);
 _free(HEAP32[i1 + 4 >> 2] | 0);
 _free(i1);
 return;
}

function _compareulong(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (HEAP32[i1 >> 2] | 0) - (HEAP32[i2 >> 2] | 0) | 0;
}

function _strncpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 ___stpncpy(i1, i2, i3) | 0;
 return i1 | 0;
}

function _ft_outline_glyph_bbox(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _FT_Outline_Get_CBox(i1 + 20 | 0, i2);
 return;
}

function _error(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return 0;
}

function _cmp_segment(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (HEAP32[i1 >> 2] | 0) - (HEAP32[i2 >> 2] | 0) | 0;
}

function _closedir(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _close(HEAP32[i1 >> 2] | 0) | 0;
 _free(i1);
 return i2 | 0;
}

function _ft_validator_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 168 >> 2] = i2;
 _longjmp(i1 | 0, 1);
}

function _ft_outline_glyph_done(i1) {
 i1 = i1 | 0;
 _FT_Outline_Done(HEAP32[i1 >> 2] | 0, i1 + 20 | 0) | 0;
 return;
}

function _strcat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _strcpy(i1 + (_strlen(i1) | 0) | 0, i2) | 0;
 return i1 | 0;
}

function _pcf_driver_requester(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(17940, i2) | 0;
}

function _bdf_driver_requester(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(19436, i2) | 0;
}

function _psnames_get_service(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(24964, i2) | 0;
}

function _ft_bitmap_glyph_done(i1) {
 i1 = i1 | 0;
 _FT_Bitmap_Done(HEAP32[i1 >> 2] | 0, i1 + 28 | 0) | 0;
 return;
}

function _FT_Outline_Embolden(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _FT_Outline_EmboldenXY(i1, i2, i2) | 0;
}

function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!__THREW__) {
  __THREW__ = i1;
  threwValue = i2;
 }
}

function b4(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(4);
}

function _winfnt_get_service(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(12792, i2) | 0;
}

function _strrchr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return ___memrchr(i1, i2, (_strlen(i1) | 0) + 1 | 0) | 0;
}

function _sfnt_get_interface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(20088, i2) | 0;
}

function _ass_shaper_set_base_direction(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 24 >> 2] = i2;
 return;
}

function _FcCharSetSubtract(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _FcCharSetOperate(i1, i2, 92, 1, 0) | 0;
}

function _mbsinit(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 1; else i1 = (HEAP32[i1 >> 2] | 0) == 0;
 return i1 & 1 | 0;
}

function _do_read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return ___string_read(i1, i2, i3) | 0;
}

function _cid_get_interface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(11448, i2) | 0;
}

function _T42_Get_Interface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(12584, i2) | 0;
}

function _af_get_interface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(23744, i2) | 0;
}

function _XML_SetCharacterDataHandler(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 60 >> 2] = i2;
 return;
}

function _tt_size_done(i1) {
 i1 = i1 | 0;
 _tt_size_done_bytecode(i1);
 HEAP8[i1 + 72 + 36 >> 0] = 0;
 return;
}

function _pfr_get_service(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(11660, i2) | 0;
}

function _destroy_font_ft(i1) {
 i1 = i1 | 0;
 _FT_Done_Face(HEAP32[i1 + 4 >> 2] | 0) | 0;
 _free(i1);
 return;
}

function _FcObjectLookupOtherTypeByName(i1) {
 i1 = i1 | 0;
 return __FcObjectLookupOtherTypeByName(i1, 0) | 0;
}

function _FcCharSetUnion(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _FcCharSetOperate(i1, i2, 91, 1, 1) | 0;
}

function b14(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(14);
 return 0;
}

function _TT_Forget_Glyph_Frame(i1) {
 i1 = i1 | 0;
 _FT_Stream_ExitFrame(HEAP32[i1 + 24 >> 2] | 0);
 return;
}

function _T1_GlyphSlot_Done(i1) {
 i1 = i1 | 0;
 HEAP32[(HEAP32[i1 + 156 >> 2] | 0) + 36 >> 2] = 0;
 return;
}

function _Get_Interface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(7612, i2) | 0;
}

function _ass_aligned_free(i1) {
 i1 = i1 | 0;
 if (!i1) return;
 _free(HEAP32[i1 + -4 >> 2] | 0);
 return;
}

function _pfr_cmap_done(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _pcf_cmap_done(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _fseek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return ___fseeko(i1, i2, i3) | 0;
}

function _cid_get_is_cid(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (i2 | 0) HEAP8[i2 >> 0] = 1;
 return 0;
}

function _bdf_cmap_done(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function dynCall_ii(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_ii[i2 & 63](i1 | 0) | 0;
}

function _vprintf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _vfprintf(HEAP32[22843] | 0, i1, i2) | 0;
}

function _T42_GlyphSlot_Done(i1) {
 i1 = i1 | 0;
 _FT_Done_GlyphSlot(HEAP32[i1 + 160 >> 2] | 0);
 return;
}

function _cid_slot_done(i1) {
 i1 = i1 | 0;
 HEAP32[(HEAP32[i1 + 156 >> 2] | 0) + 36 >> 2] = 0;
 return;
}

function _cff_slot_done(i1) {
 i1 = i1 | 0;
 HEAP32[(HEAP32[i1 + 156 >> 2] | 0) + 36 >> 2] = 0;
 return;
}

function _FcConfigHome() {
 var i1 = 0;
 if (!1) i1 = 0; else i1 = _getenv(347408) | 0;
 return i1 | 0;
}

function _close_stream_font(i1) {
 i1 = i1 | 0;
 _free(HEAP32[i1 + 12 >> 2] | 0);
 _free(i1);
 return;
}

function _lcg31(i1) {
 i1 = i1 | 0;
 return (Math_imul(i1, 1103515245) | 0) + 12345 & 2147483647 | 0;
}

function _cff_ps_has_glyph_names(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 8 >> 2] | 0) >>> 9 & 1 | 0;
}

function _tt_cmap14_char_next(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i2 >> 2] = 0;
 return 0;
}

function _ass_shaper_set_level(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = i2;
 return;
}

function _FcDirChecksumScandirFilter(i1) {
 i1 = i1 | 0;
 return (HEAP8[i1 + 10 >> 0] | 0) != 4 | 0;
}

function establishStackSpace(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 STACKTOP = i1;
 STACK_MAX = i2;
}

function _tt_cmap_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = i2;
 return 0;
}

function runPostSets() {}
function __emscripten_dceable_type_decls() {
 _emscripten_longjmp(0, 0);
}

function b18(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(18);
}

function _isspace(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 32 | (i1 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function _gray_raster_set_mode(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 0;
}

function _Horizontal_Sweep_Init(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}

function dynCall_vi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[i2 & 127](i1 | 0);
}

function _gray_raster_done(i1) {
 i1 = i1 | 0;
 _ft_mem_free(HEAP32[i1 >> 2] | 0, i1);
 return;
}

function _strcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 ___stpcpy(i1, i2) | 0;
 return i1 | 0;
}

function _ft_black_set_mode(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 0;
}

function ___lctrans(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return ___lctrans_impl(i1, i2) | 0;
}

function _FcMatrixFree(i1) {
 i1 = i1 | 0;
 if ((i1 | 0) == 1024) return;
 _free(i1);
 return;
}

function _resolve_base_direction(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == -1 ? 64 : 272) | 0;
}

function _mkostemp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return ___mkostemps(i1, 0, i2) | 0;
}

function _gray_raster_reset(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}

function _ft_gzip_free(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ft_mem_free(i1, i2);
 return;
}

function _ft_black_done(i1) {
 i1 = i1 | 0;
 _ft_mem_free(HEAP32[i1 >> 2] | 0, i1);
 return;
}

function _font_destruct(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ass_font_clear(i2);
 return;
}

function _Project_y(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i3 | 0;
}

function _Project_x(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i2 | 0;
}

function _strtod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +(+_strtox_469(i1, i2, 1));
}

function b1(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(1);
 return 0;
}

function _ft_black_reset(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return;
}

function _cff_cmap_encoding_done(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _FcObjectFromName(i1) {
 i1 = i1 | 0;
 return _FcObjectLookupIdByName(i1) | 0;
}

function _FcDirCacheUnload(i1) {
 i1 = i1 | 0;
 _FcCacheObjectDereference(i1);
 return;
}

function _zcfree(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ft_mem_free(i1, i2);
 return;
}

function _XML_ParserCreate(i1) {
 i1 = i1 | 0;
 return _parserCreate(i1, 0, 0, 0) | 0;
}

function _t42_get_ps_font_name(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 364 >> 2] | 0;
}

function _FcStrUsesHome(i1) {
 i1 = i1 | 0;
 return (HEAP8[i1 >> 0] | 0) == 126 | 0;
}

function _tt_driver_init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 64 >> 2] = 35;
 return 0;
}

function _copysignl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_copysign(d1, d2));
}

function _Current_Ppem(i1) {
 i1 = i1 | 0;
 return HEAPU16[i1 + 252 >> 1] | 0 | 0;
}

function _scalbnl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 return +(+_scalbn(d1, i2));
}

function _ft_alloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _malloc(i2) | 0;
}

function __fribidi__free_run__internal__(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function _XML_GetErrorCode(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 284 >> 2] | 0;
}

function _FcStat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _stat(i1, i2) | 0;
}

function b11(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(11);
}

function _putchar(i1) {
 i1 = i1 | 0;
 return _fputc(i1, HEAP32[22843] | 0) | 0;
}

function _ftglue_stream_pos(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}

function _ass_shaper_set_language(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function _tt_cmap14_char_index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 0;
}

function _t1_get_ps_name(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 364 >> 2] | 0;
}

function _frexpl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 return +(+_frexp(d1, i2));
}

function _ass_shaper_set_kerning(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function _FcMakeTempfile(i1) {
 i1 = i1 | 0;
 return _mkostemp(i1, 524288) | 0;
}

function _pshinter_get_globals_funcs(i1) {
 i1 = i1 | 0;
 return i1 + 100 | 0;
}

function _FcAtomicNewFile(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 4 >> 2] | 0;
}

function _ft_free(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _free(i2);
 return;
}

function ___errno_location() {
 return (___pthread_self_840() | 0) + 64 | 0;
}

function _FT_Stream_Pos(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}

function _fmodl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_fmod(d1, d2));
}

function b2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(2);
 return 0.0;
}

function b16(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(16);
 return 0;
}

function _pshinter_get_t2_funcs(i1) {
 i1 = i1 | 0;
 return i1 + 140 | 0;
}

function _pshinter_get_t1_funcs(i1) {
 i1 = i1 | 0;
 return i1 + 112 | 0;
}

function _FcInitLoadConfig() {
 return _FcInitLoadOwnConfig(0) | 0;
}

function _isNever(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 0;
}

function _FcStrCopy(i1) {
 i1 = i1 | 0;
 return ___strdup(i1) | 0;
}

function _FcAtomicDestroy(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function _FcRangeDestroy(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function _FT_Done_Memory(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function _ass_shaper_font_data_free(i1) {
 i1 = i1 | 0;
 return;
}

function _t42_ps_has_glyph_names(i1) {
 i1 = i1 | 0;
 return 1;
}

function _t1_ps_has_glyph_names(i1) {
 i1 = i1 | 0;
 return 1;
}

function _ftell(i1) {
 i1 = i1 | 0;
 return ___ftello(i1) | 0;
}

function _pthread_mutex_unlock(i1) {
 i1 = i1 | 0;
 return 0;
}

function ___pthread_self_840() {
 return _pthread_self() | 0;
}

function ___pthread_self_837() {
 return _pthread_self() | 0;
}

function ___pthread_self_118() {
 return _pthread_self() | 0;
}

function b7(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(7);
}

function ___pthread_self_55() {
 return _pthread_self() | 0;
}

function ___pthread_self_48() {
 return _pthread_self() | 0;
}

function _Horizontal_Sweep_Step(i1) {
 i1 = i1 | 0;
 return;
}

function _FcStrFree(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function _pthread_mutex_lock(i1) {
 i1 = i1 | 0;
 return 0;
}

function ___pthread_self_8() {
 return _pthread_self() | 0;
}

function ___ofl_lock() {
 ___lock(368352);
 return 368360;
}

function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}

function _af_autofitter_done(i1) {
 i1 = i1 | 0;
 return;
}

function _XmlGetUtf8InternalEncodingNS() {
 return 27004;
}

function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}

function _emscripten_get_global_libc() {
 return 368284;
}

function _cid_driver_init(i1) {
 i1 = i1 | 0;
 return 0;
}

function _cf2_free_instance(i1) {
 i1 = i1 | 0;
 return;
}

function b10(i1) {
 i1 = i1 | 0;
 abort(10);
 return 0;
}

function _dummy_138(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function ___ofl_unlock() {
 ___unlock(368352);
 return;
}

function _XmlGetUtf8InternalEncoding() {
 return 24988;
}

function _T1_Driver_Init(i1) {
 i1 = i1 | 0;
 return 0;
}

function _FcIsFsMmapSafe(i1) {
 i1 = i1 | 0;
 return 1;
}

function _FcEndDoctypeDecl(i1) {
 i1 = i1 | 0;
 return;
}

function _feclearexcept(i1) {
 i1 = i1 | 0;
 return 0;
}

function _cid_driver_done(i1) {
 i1 = i1 | 0;
 return;
}

function _cff_driver_done(i1) {
 i1 = i1 | 0;
 return;
}

function _T42_Driver_Done(i1) {
 i1 = i1 | 0;
 return;
}

function _tt_driver_done(i1) {
 i1 = i1 | 0;
 return;
}

function _ps_parser_done(i1) {
 i1 = i1 | 0;
 return;
}

function _fetestexcept(i1) {
 i1 = i1 | 0;
 return 0;
}

function _T1_Driver_Done(i1) {
 i1 = i1 | 0;
 return;
}

function _iconv_close(i1) {
 i1 = i1 | 0;
 return 0;
}

function _XmlSizeOfUnknownEncoding() {
 return 1912;
}

function ___unlockfile(i1) {
 i1 = i1 | 0;
 return;
}

function ___lockfile(i1) {
 i1 = i1 | 0;
 return 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b13(i1) {
 i1 = i1 | 0;
 abort(13);
}

function _pthread_self() {
 return 91e3;
}

function _localeconv() {
 return 91504;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,_tt_face_load_sbit_image];
var FUNCTION_TABLE_iiii = [b1,_TT_Set_MM_Blend,_TT_Set_Var_Design,_tt_face_get_location,_tt_property_set,_tt_property_get,_T1_Set_MM_Design,_T1_Set_MM_Blend,_T1_Set_Var_Design,_cff_get_cid_from_glyph_index,_cff_property_set,_cff_property_get,_cid_get_cid_from_glyph_index,_pfr_get_advance,_pcf_get_charset_id,_pcf_get_bdf_property,_bdf_get_charset_id,_bdf_get_bdf_property,_tt_cmap14_char_var_isdefault,_tt_cmap14_char_variants,_tt_cmap14_variant_chars,_tt_face_load_hhea,_tt_face_get_ps_name,_tt_face_get_kerning,_tt_face_load_hmtx,_tt_face_set_sbit_strike,_tt_face_load_strike_metrics,_sfnt_get_charset_id,_tt_face_find_bdf_prop
,_af_dummy_hints_apply,_af_latin_hints_apply,_af_cjk_hints_apply,_af_indic_hints_apply,_af_property_set,_af_property_get,_ft_black_set_mode,_ft_raster1_set_mode,_gray_raster_set_mode,_gray_conic_to,_ft_smooth_set_mode,_ps_table_new,_ps_parser_to_coord_array,_t1_builder_add_point1,_t1_builder_start_point,_t1_decoder_parse_charstrings,_normal_sameName,_normal_predefinedEntityName,_big2_sameName,_big2_predefinedEntityName,_little2_sameName,_little2_predefinedEntityName,_font_compare,_font_key_move,_bitmap_compare,_bitmap_key_move,_composite_compare,_composite_key_move,_outline_compare,_outline_key_move
,_ass_fontconfig_add_provider,_get_fallback,___stdio_write,___stdio_seek,___stdout_write,_sn_write,_Project,_Project_y,_Dual_Project,_Project_x,_Round_To_Grid,_Round_To_Half_Grid,_Round_To_Double_Grid,_Round_Super,_Round_Super_45,_Round_None,_Round_Up_To_Grid,_Round_Down_To_Grid,_t1_get_index,_pfr_extra_item_load_bitmap_info,_pfr_extra_item_load_font_id,_pfr_extra_item_load_stem_snaps,_pfr_extra_item_load_kerning_pairs,_ft_gzip_alloc,_zcalloc,_adler32,_psh_globals_new,_FT_Outline_Decompose,_XmlInitEncoding,_XmlInitEncodingNS
,_findEncodingNS,_findEncoding,_FcCharSetUnionLeaf,_FcCharSetSubtractLeaf,___stdio_read,_do_read,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_dii = [b2,_FcCompareFamily,_FcCompareString,_FcCompareNumber,_FcCompareSizeRange,_FcCompareSize,_FcCompareBool,_FcCompareFilename,_FcCompareCharSet,_FcCompareLang,_FcComparePostScript,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viiiiiii = [b3,_ass_fill_halfplane_tile16_c];
var FUNCTION_TABLE_viiiii = [b4,_tt_face_get_metrics,_t1_builder_init,_utf8_toUtf8,_utf8_toUtf16,_latin1_toUtf8,_latin1_toUtf16,_ascii_toUtf8,_big2_toUtf8,_big2_toUtf16,_little2_toUtf8,_little2_toUtf16,_ass_fill_generic_tile16_c,_ass_be_blur_c,_ass_stripe_unpack_c,_ass_stripe_pack_c,_ass_blur1234_horz_c,_ass_blur1235_horz_c,_ass_blur1246_horz_c,_ass_blur1234_vert_c,_ass_blur1235_vert_c,_ass_blur1246_vert_c,_psh_globals_set_scale,_unknown_toUtf8,_unknown_toUtf16,_FcStartDoctypeDecl,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_iiiiiiiiii = [b5,_t1_decoder_init];
var FUNCTION_TABLE_iiiiiiiiiii = [b6,_XmlParseXmlDecl,_XmlParseXmlDeclNS,b6];
var FUNCTION_TABLE_vii = [b7,_ft_bitmap_glyph_bbox,_ft_outline_glyph_bbox,_t1_parse_font_matrix,_parse_encoding,_parse_subrs,_parse_charstrings,_parse_private,_parse_blend_design_positions,_parse_blend_design_map,_parse_blend_axis_types,_parse_weight_vector,_parse_buildchar,_parse_fd_array,_cid_parse_font_matrix,_parse_expansion_factor,_t42_parse_font_matrix,_t42_parse_encoding,_t42_parse_charstrings,_t42_parse_sfnts,_af_latin_metrics_scale,_af_cjk_metrics_scale,_af_indic_metrics_scale,_ps_parser_to_token,_font_destruct,_bitmap_destruct,_composite_destruct,_outline_destruct,_cf2_builder_moveTo
,_cf2_builder_lineTo,_cf2_builder_cubeTo,_ft_gzip_free,_zcfree,_ps_hints_t1reset,_emscripten_longjmp,_ft_free,_FcEndElement,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiiii = [b8,_ps_unicodes_init];
var FUNCTION_TABLE_viiiiiiiii = [b9];
var FUNCTION_TABLE_ii = [b10,_tt_driver_init,_tt_size_init,_tt_slot_init,_T1_Driver_Init,_T1_Size_Init,_T1_GlyphSlot_Init,_t1_get_ps_name,_t1_ps_has_glyph_names,_cff_driver_init,_cff_size_init,_cff_slot_init,_cff_parse_font_matrix,_cff_parse_font_bbox,_cff_parse_private_dict,_cff_parse_cid_ros,_cff_ps_has_glyph_names,_cff_get_ps_name,_cid_driver_init,_cid_size_init,_cid_slot_init,_cid_get_postscript_name,_pfr_slot_init,_T42_Driver_Init,_T42_Size_Init,_T42_GlyphSlot_Init,_t42_get_ps_font_name,_t42_ps_has_glyph_names,_sfnt_get_ps_name
,_af_autofitter_init,_ps_hinter_init,_pshinter_get_globals_funcs,_pshinter_get_t1_funcs,_pshinter_get_t2_funcs,_ft_raster1_init,_ft_smooth_init,_ps_parser_to_int,_t1_builder_add_contour,_afm_parser_parse,_ps_unicode_value,_ps_get_macintosh_name,_ps_get_standard_strings,_check_postscript,_check_postscript_ft,___stdio_close,_TT_Load_Glyph_Header,_TT_Load_Simple_Glyph,_TT_Load_Composite_Glyph,_TT_RunIns,_Current_Ppem_Stretched,_Current_Ppem,_malloc,_FcDirChecksumScandirFilter,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viii = [b11,_ft_outline_glyph_transform,_ft_black_reset,_ft_raster1_get_cbox,_gray_raster_reset,_ft_smooth_get_cbox,_t1_decrypt,_get_substitutions,_ass_fill_solid_tile16_c,_Write_CVT_Stretched,_Write_CVT,_Move_CVT_Stretched,_Move_CVT,_t1_hints_stem,_ps_hints_t1stem3,_ps_hints_t2counter,_Vertical_Sweep_Init,_Horizontal_Sweep_Init,_FcStartElement,_FcCharacterData,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_viiiiiiii = [b12,_ass_mul_bitmaps_c];
var FUNCTION_TABLE_vi = [b13,_ft_bitmap_glyph_done,_ft_outline_glyph_done,_tt_driver_done,_tt_face_done,_tt_size_done,_T1_Driver_Done,_T1_Face_Done,_T1_Size_Done,_T1_GlyphSlot_Done,_cff_driver_done,_cff_face_done,_cff_size_done,_cff_slot_done,_cff_cmap_unicode_done,_cff_cmap_encoding_done,_cid_driver_done,_cid_face_done,_cid_size_done,_cid_slot_done,_pfr_cmap_done,_pfr_face_done,_pfr_slot_done,_T42_Driver_Done,_T42_Face_Done,_T42_Size_Done,_T42_GlyphSlot_Done,_FNT_Face_Done,_PCF_Face_Done
,_pcf_cmap_done,_BDF_Face_Done,_bdf_cmap_done,_tt_cmap14_done,_sfnt_done_face,_tt_face_free_name,_tt_face_free_ps_names,_tt_face_free_sbit,_af_autofitter_done,_ps_hinter_done,_ft_black_done,_gray_raster_done,_ps_table_done,_ps_table_release,_ps_parser_done,_ps_parser_skip_spaces,_ps_parser_skip_PS_token,_t1_builder_done,_t1_builder_close_contour,_t1_decoder_done,_afm_parser_done,_t1_cmap_std_done,_t1_cmap_custom_done,_t1_cmap_unicode_done,_destroy,_destroy_font_ft,_TT_Forget_Glyph_Frame,_cf2_free_instance,_ft_ansi_stream_close,_memory_stream_close
,_ft_gzip_stream_close,_ft_lzw_stream_close,_sfnt_stream_close,_af_face_globals_free,_psh_globals_destroy,_t1_hints_open,_t2_hints_open,_Vertical_Sweep_Step,_Horizontal_Sweep_Step,_Split_Conic,_Split_Cubic,_free,_FcEndDoctypeDecl,_close_stream_font,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_iiiii = [b14,_tt_glyph_load,_tt_get_kerning,_T1_Load_Glyph,_Get_Kerning,_t1_get_glyph_name,_T1_Get_Track_Kerning,_cff_glyph_load,_cff_get_kerning,_cff_get_glyph_name,_cff_get_ros,_cid_slot_load_glyph,_cid_get_ros,_pfr_slot_load,_pfr_get_kerning,_pfr_face_get_kerning,_T42_GlyphSlot_Load,_t42_get_glyph_name,_FNT_Load_Glyph,_PCF_Glyph_Load,_BDF_Glyph_Load,_tt_cmap14_char_var_index,_tt_face_goto_table,_sfnt_get_glyph_name,_ft_raster1_render,_ft_raster1_transform,_gray_cubic_to,_ft_smooth_render,_ft_smooth_transform
,_ft_smooth_render_lcd,_ft_smooth_render_lcd_v,_ps_table_add,_ps_parser_to_fixed_array,_afm_parser_init,_normal_prologTok,_normal_contentTok,_normal_cdataSectionTok,_normal_ignoreSectionTok,_normal_attributeValueTok,_normal_entityValueTok,_normal_nameMatchesAscii,_normal_getAtts,_normal_isPublicId,_big2_prologTok,_big2_contentTok,_big2_cdataSectionTok,_big2_ignoreSectionTok,_big2_attributeValueTok,_big2_entityValueTok,_big2_nameMatchesAscii,_big2_getAtts,_big2_isPublicId,_little2_prologTok,_little2_contentTok,_little2_cdataSectionTok,_little2_ignoreSectionTok,_little2_attributeValueTok,_little2_entityValueTok,_little2_nameMatchesAscii
,_little2_getAtts,_little2_isPublicId,_get_data_embedded,_TT_Access_Glyph_Frame,_ft_ansi_stream_io,_ft_gzip_stream_io,_ft_lzw_stream_io,_FT_CMap_New,_ps_hints_apply,_ft_realloc,_prologInitProcessor,_XmlInitUnknownEncoding,_XmlInitUnknownEncodingNS,_prologProcessor,_initScanProlog,_initScanContent,_initScanPrologNS,_initScanContentNS,_contentProcessor,_ignoreSectionProcessor,_internalEntityProcessor,_cdataSectionProcessor,_epilogProcessor,_externalEntityContentProcessor,_errorProcessor,_read_stream_font,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_viiiiii = [b15,_ass_add_bitmaps_c,_ass_sub_bitmaps_c,_Vertical_Sweep_Span,_Vertical_Sweep_Drop,_Horizontal_Sweep_Span,_Horizontal_Sweep_Drop,b15];
var FUNCTION_TABLE_iii = [b16,_ft_bitmap_glyph_init,_ft_bitmap_glyph_copy,_ft_outline_glyph_init,_ft_outline_glyph_copy,_ft_outline_glyph_prepare,_tt_get_interface,_tt_size_request,_tt_size_select,_TT_Get_MM_Var,_Get_Interface,_T1_Read_Metrics,_T1_Size_Request,_t1_get_name_index,_t1_ps_get_font_info,_t1_ps_get_font_extra,_t1_ps_get_font_private,_T1_Get_Multi_Master,_T1_Get_MM_Var,_cff_get_interface,_cff_size_request,_cff_size_select,_cff_cmap_unicode_init,_cff_cmap_unicode_char_index,_cff_cmap_unicode_char_next,_cff_cmap_encoding_init,_cff_cmap_encoding_char_index,_cff_cmap_encoding_char_next,_cff_ps_get_font_info
,_cff_get_name_index,_cff_get_cmap_info,_cff_get_is_cid,_cid_get_interface,_cid_size_request,_cid_ps_get_font_info,_cid_ps_get_font_extra,_cid_get_is_cid,_pfr_cmap_init,_pfr_cmap_char_index,_pfr_cmap_char_next,_pfr_get_service,_T42_Get_Interface,_T42_Size_Request,_T42_Size_Select,_t42_get_name_index,_t42_ps_get_font_info,_t42_ps_get_font_extra,_t42_ps_get_font_private,_winfnt_get_service,_FNT_Size_Request,_FNT_Size_Select,_fnt_cmap_init,_fnt_cmap_char_index,_fnt_cmap_char_next,_winfnt_get_header,_pcf_driver_requester,_PCF_Size_Request,_PCF_Size_Select,_pcf_cmap_init
,_pcf_cmap_char_index,_pcf_cmap_char_next,_bdf_driver_requester,_BDF_Size_Request,_BDF_Size_Select,_bdf_cmap_init,_bdf_cmap_char_index,_bdf_cmap_char_next,_tt_cmap_init,_tt_cmap0_char_index,_tt_cmap0_char_next,_tt_cmap0_validate,_tt_cmap0_get_info,_tt_cmap2_char_index,_tt_cmap2_char_next,_tt_cmap2_validate,_tt_cmap2_get_info,_tt_cmap4_init,_tt_cmap4_char_index,_tt_cmap4_char_next,_tt_cmap4_validate,_tt_cmap4_get_info,_tt_cmap6_char_index,_tt_cmap6_char_next,_tt_cmap6_validate,_tt_cmap6_get_info,_tt_cmap8_char_index,_tt_cmap8_char_next,_tt_cmap8_validate,_tt_cmap8_get_info
,_tt_cmap10_char_index,_tt_cmap10_char_next,_tt_cmap10_validate,_tt_cmap10_get_info,_tt_cmap12_init,_tt_cmap12_char_index,_tt_cmap12_char_next,_tt_cmap12_validate,_tt_cmap12_get_info,_tt_cmap13_init,_tt_cmap13_char_index,_tt_cmap13_char_next,_tt_cmap13_validate,_tt_cmap13_get_info,_tt_cmap14_init,_tt_cmap14_char_index,_tt_cmap14_char_next,_tt_cmap14_variants,_tt_cmap14_validate,_tt_cmap14_get_info,_sfnt_get_interface,_tt_face_load_head,_tt_face_load_cmap,_tt_face_load_maxp,_tt_face_load_os2,_tt_face_load_post,_tt_face_load_name,_tt_face_load_kern,_tt_face_load_gasp,_tt_face_load_pclt
,_tt_face_load_bhed,_tt_face_load_font_dir,_tt_face_load_sbit,_get_sfnt_table,_sfnt_get_name_index,_tt_get_cmap_info,_af_dummy_hints_init,_af_latin_metrics_init,_af_latin_hints_init,_af_cjk_metrics_init,_af_cjk_hints_init,_af_indic_metrics_init,_af_indic_hints_init,_af_get_interface,_ft_black_new,_ft_black_render,_gray_raster_new,_gray_raster_render,_gray_move_to,_gray_line_to,_ps_parser_to_fixed,_t1_builder_check_points,_t1_cmap_standard_init,_t1_cmap_std_char_index,_t1_cmap_std_char_next,_t1_cmap_expert_init,_t1_cmap_custom_init,_t1_cmap_custom_char_index,_t1_cmap_custom_char_next,_t1_cmap_unicode_init
,_t1_cmap_unicode_char_index,_t1_cmap_unicode_char_next,_psnames_get_service,_ps_unicodes_char_index,_ps_unicodes_char_next,_normal_nameLength,_normal_skipS,_normal_charRefNumber,_utf8_isName2,_utf8_isName3,_isNever,_utf8_isNmstrt2,_utf8_isNmstrt3,_utf8_isInvalid2,_utf8_isInvalid3,_utf8_isInvalid4,_big2_nameLength,_big2_skipS,_big2_charRefNumber,_little2_nameLength,_little2_skipS,_little2_charRefNumber,_font_hash,_bitmap_hash,_composite_hash,_outline_hash,_check_glyph,_check_glyph_ft,_comp_PairMap,_Read_CVT_Stretched
,_Read_CVT,_T1_Parse_Glyph,_compare_kern_pairs,_cff_sid_to_glyph_name,_cid_load_glyph,_ft_raccess_sort_ref_by_id,_by_encoding,_compare_offsets,_tt_name_entry_ascii_from_utf16,_tt_name_entry_ascii_from_other,_ps_hints_close,_afm_compare_kern_pairs,_psaux_get_glyph_name,_compare_uni_maps,_ft_alloc,_realloc,_unknown_isName,_unknown_isNmstrt,_unknown_isInvalid,_FcDirChecksumScandirSorter,_cmpstringp,_compareulong,_FcSortCmpStr,_FcSortCompare,_cmp_event_layer,_cmp_segment,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_iiiiii = [b17,_tt_face_init,_tt_get_advances,_T1_Face_Init,_T1_Get_Advances,_t1_ps_get_font_value,_cff_face_init,_cff_get_advances,_cid_face_init,_pfr_face_init,_pfr_get_metrics,_T42_Face_Init,_raccess_guess_apple_double,_raccess_guess_apple_single,_raccess_guess_darwin_ufs_export,_raccess_guess_darwin_newvfs,_raccess_guess_darwin_hfsplus,_raccess_guess_vfat,_raccess_guess_linux_cap,_raccess_guess_linux_double,_raccess_guess_linux_netatalk,_FNT_Face_Init,_PCF_Face_Init,_BDF_Face_Init,_sfnt_init_face,_sfnt_load_face,_tt_face_load_any,_sfnt_table_info,_af_autofitter_load_glyph
,_ps_parser_to_bytes,_ps_parser_load_field,_ps_parser_load_field_table,__bdf_parse_start,__bdf_parse_properties,__bdf_parse_glyphs,_tt_sbit_decoder_load_byte_aligned,_tt_sbit_decoder_load_bit_aligned,_tt_sbit_decoder_load_compound,_prolog0,_prolog1,_doctype0,_error,_doctype1,_internalSubset,_prolog2,_doctype3,_doctype2,_entity0,_attlist0,_element0,_notation0,_doctype5,_doctype4,_entity1,_entity2,_attlist1,_element1,_notation1,_notation3
,_notation2,_declClose,_notation4,_externalSubset1,_condSect0,_condSect1,_condSect2,_element2,_element3,_element6,_element7,_element4,_element5,_attlist2,_attlist8,_attlist5,_attlist3,_attlist9,_attlist6,_attlist4,_attlist7,_entity7,_entity4,_entity3,_entity5,_entity6,_entity9,_entity8,_entity10,_FcDirCacheMapHelper
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_viiii = [b18,_ps_parser_init,_ps_parser_to_token_array,_t1_builder_add_point,_normal_updatePosition,_big2_updatePosition,_little2_updatePosition,_ass_shrink_horz_c,_ass_shrink_vert_c,_ass_expand_horz_c,_ass_expand_vert_c,_ass_pre_blur1_horz_c,_ass_pre_blur2_horz_c,_ass_pre_blur3_horz_c,_ass_pre_blur1_vert_c,_ass_pre_blur2_vert_c,_ass_pre_blur3_vert_c,_msg_callback,_Direct_Move,_Direct_Move_Orig,_Direct_Move_X,_Direct_Move_Orig_X,_Direct_Move_Y,_Direct_Move_Orig_Y,_ft_validator_init,_t2_hints_stems,_ps_hints_t2mask,_gray_render_span,_initUpdatePosition
,_ass_msg_handler,b18,b18];

  return { _main: _main, _libassjs_quit: _libassjs_quit, stackSave: stackSave, _i64Subtract: _i64Subtract, ___udivdi3: ___udivdi3, dynCall_iiiiiii: dynCall_iiiiiii, _libassjs_render: _libassjs_render, setThrew: setThrew, dynCall_viii: dynCall_viii, _bitshift64Lshr: _bitshift64Lshr, _libassjs_init: _libassjs_init, _bitshift64Shl: _bitshift64Shl, dynCall_vi: dynCall_vi, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, ___errno_location: ___errno_location, _bitshift64Ashr: _bitshift64Ashr, _memset: _memset, dynCall_ii: dynCall_ii, _sbrk: _sbrk, _memcpy: _memcpy, stackAlloc: stackAlloc, ___muldi3: ___muldi3, dynCall_vii: dynCall_vii, ___uremdi3: ___uremdi3, ___divdi3: ___divdi3, dynCall_viiiiiii: dynCall_viiiiiii, getTempRet0: getTempRet0, setTempRet0: setTempRet0, _realloc: _realloc, _i64Add: _i64Add, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_iiii: dynCall_iiii, _pthread_mutex_unlock: _pthread_mutex_unlock, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiiiiiiii: dynCall_iiiiiiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiii: dynCall_viiii, dynCall_iiiiii: dynCall_iiiiii, _libassjs_resize: _libassjs_resize, _llvm_bswap_i32: _llvm_bswap_i32, dynCall_viiiii: dynCall_viiiii, _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, runPostSets: runPostSets, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, _memmove: _memmove, stackRestore: stackRestore, _llvm_ctpop_i32: _llvm_ctpop_i32, _malloc: _malloc, dynCall_iii: dynCall_iii, _pthread_mutex_lock: _pthread_mutex_lock, _emscripten_replace_memory: _emscripten_replace_memory, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_dii: dynCall_dii };
})
;